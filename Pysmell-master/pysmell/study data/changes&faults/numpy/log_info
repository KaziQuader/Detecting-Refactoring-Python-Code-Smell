==================
0794d8f;Charles Harris;2015-05-26 13:23:19 -0600;Merge pull request #5914 from sirtom67/master
New typemap for in-place arrays of arbitrary number of dimensions:
==
==================
d1acfd9;Charles Harris;2015-05-26 07:37:25 -0600;Merge pull request #5916 from jorisvandenbossche/doc-nanfunctions
DOC: add nanmedian/nanpercentile to reference docs
==
==================
929e41d;Joris Van den Bossche;2015-05-26 13:55:40 +0200;DOC: add nanmedian/nanpercentile to reference docs

==

doc/source/reference/routines.statistics.rst
==================
a49ad15;Tom Krauss;2015-05-25 13:05:05 -0500;New typemap for in-place arrays of arbitrary number of dimensions:   (DATA_TYPE* INPLACE_ARRAY_FLAT, DIM_TYPE DIM_FLAT) Added unittests, updated documentation.

==

doc/source/reference/swig.interface-file.rst
doc/source/reference/swig.testing.rst
tools/swig/README
tools/swig/numpy.i
tools/swig/test/Flat.cxx
tools/swig/test/Flat.h
tools/swig/test/Flat.i
tools/swig/test/Makefile
tools/swig/test/setup.py
tools/swig/test/testFlat.py
==================
fd720e1;Jaime;2015-05-25 10:38:29 -0700;Merge pull request #5913 from charris/minor-gitwash-correction
DOC: Commit message lines should not excede 72 characters.
==
==================
21c59aa;Charles Harris;2015-05-25 10:55:21 -0600;DOC: Commit message lines should not excede 72 characters.
The reason is that git log indents parts of the message and longer
lines will wrap. Linus has a post on this somewhere.

==

doc/source/dev/gitwash/development_workflow.rst
==================
0844302;Nathaniel J. Smith;2015-05-24 22:19:04 -0700;Merge pull request #5892 from andreabedini/master
Simplify numpy/distutils/__init__.py
==
==================
fd94000;Jaime;2015-05-22 14:09:41 -0700;Merge pull request #5909 from argriffing/linalg-astype-no-copy
MAINT: use copy=False in a few astype() calls
==
==================
1ff2be1;alex;2015-05-22 15:53:36 -0400;MAINT: conditional copy=False in some astype calls

==

numpy/linalg/linalg.py
==================
464e767;alex;2015-05-22 13:46:44 -0400;MAINT: skip copy=False for det and logdet

==

numpy/linalg/linalg.py
==================
177067a;alex;2015-05-22 12:43:41 -0400;MAINT: use copy=False in a few astype calls

==

numpy/linalg/linalg.py
==================
9dba7a4;Jaime;2015-05-21 13:01:38 -0700;Merge pull request #5899 from argriffing/improve-umath-linalg
MAINT: use more conservative integer types for umath linalg
==
==================
b9f5e85;alex;2015-05-21 13:57:46 -0400;MAINT: more consistent notation in umath_linalg

==

numpy/linalg/umath_linalg.c.src
==================
ad4aa25;alex;2015-05-20 21:51:40 -0400;MAINT: use more conservative integer types for umath linalg

==

numpy/linalg/umath_linalg.c.src
==================
a79d9d3;Nathaniel J. Smith;2015-05-18 22:00:48 -0700;Merge pull request #5893 from stefanv/hann
DOC: Fix spelling of Von Hann's surname
==
==================
7897da7;Stefan van der Walt;2015-05-18 21:43:44 -0700;DOC: Fix spelling of Von Hann's surname

==

numpy/lib/function_base.py
==================
c5cf20a;Charles Harris;2015-05-17 16:54:58 -0400;Merge pull request #5886 from jaimefrio/cross_axis
BUG: Handling of axisc in np.cross
==
==================
86f99e8;Charles Harris;2015-05-17 13:17:42 -0400;Merge pull request #5884 from jaimefrio/ma_compress_cleanup
MANT: handling of axis in np.ma.compress_nd
==
==================
aa0532f;Jaime Fernandez;2015-05-16 22:34:39 -0700;MANT: handling of axis in np.ma.compress_nd
Modified the handling that np.ma.compress_nd does of its 'axis'
argument, to more closely follow that of ufunc methods, including
error messages for wrong values.

==

numpy/ma/extras.py
==================
581927a;Jaime Fernandez;2015-05-17 06:37:16 -0700;BUG: Handling of axisc in np.cross
Fixes #5885 by ignoring `axisc` when both input vectors are 2D.
Also adds explicit checks for `axis?` parameters in bounds, to
provide more informative errors.
Also slightly simplified the calculation logic and documented the
assumptions in each branch with `assert`s.

==

numpy/core/numeric.py
numpy/core/tests/test_numeric.py
==================
3b825d3;Andrea Bedini;2015-05-16 19:59:12 +1000;Simplify numpy/distutils/__init__.py
Thanks to the presence of

    from __future__ import absolute_import

we don't need different code paths for Python 2/3.

==

numpy/distutils/__init__.py
==================
0a02b82;Jaime;2015-05-15 06:04:43 -0700;Merge pull request #5879 from shoyer/broadcast-shape-32
BUG: fix _broadcast_shape (and broadcast_array) for len(args) > 32
==
==================
aa50162;Stephan Hoyer;2015-05-15 01:14:18 -0700;BUG: fix _broadcast_shape (and broadcast_array) for len(args) > 32
Fixes gh-5862

==

numpy/lib/stride_tricks.py
numpy/lib/tests/test_stride_tricks.py
==================
0174f2a;Jaime;2015-05-13 19:51:32 -0700;Merge pull request #5873 from charris/style-fix-for-cov
MAINT: Simplify code in cov function a bit.
==
==================
a0bd6c7;Charles Harris;2015-05-13 20:31:55 -0600;MAINT: Simplify code in cov function a bit.

==

numpy/lib/function_base.py
==================
9ceb5cd;Charles Harris;2015-05-13 12:04:16 -0400;Merge pull request #4960 from tpoole/weighted_cov
ENH: add a weighted covariance calculation.
==
==================
d87d2ca;tpoole;2014-08-13 13:22:37 +0100;ENH: add 'fweights' and 'aweights' arguments to covariance calculations.
'fweights' allows integer frequencies to be specified for observation vectors,
and 'aweights' provides a more general importance or probabalistic weighting.

==

doc/release/1.10.0-notes.rst
numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
4fee913;Jaime;2015-05-11 23:09:30 -0700;Merge pull request #5870 from r-barnes/master
DOC: Fixed spelling mistake
==
==================
d7c7bf2;Richard Barnes;2015-05-12 00:19:57 -0500;Fixed spelling mistake

==

numpy/polynomial/chebyshev.py
==================
18c89db;Charles Harris;2015-05-12 00:43:16 -0400;Merge pull request #5605 from shoyer/stack
ENH: add np.stack
==
==================
93d3b8d;Stephan Hoyer;2015-02-25 01:49:26 -0800;ENH: add np.stack
The motivation here is to present a uniform and N-dimensional interface for
joining arrays along a new axis, similarly to how `concatenate` provides a
uniform and N-dimensional interface for joining arrays along an existing axis.

Background
~~~~~~~~~~

Currently, users can choose between `hstack`, `vstack`, `column_stack` and
`dstack`, but none of these functions handle N-dimensional input. In my
opinion, it's also difficult to keep track of the differences between these
methods and to predict how they will handle input with different
dimensions.

In the past, my preferred approach has been to either construct the result
array explicitly and use indexing for assignment, to or use `np.array` to
stack along the first dimension and then use `transpose` (or a similar method)
to reorder dimensions if necessary. This is pretty awkward.

I brought this proposal up a few weeks on the numpy-discussion list:
http://mail.scipy.org/pipermail/numpy-discussion/2015-February/072199.html

I also received positive feedback on Twitter:
https://twitter.com/shoyer/status/565937244599377920

Implementation notes
~~~~~~~~~~~~~~~~~~~~

The one line summaries for `concatenate` and `stack` have been (re)written to
mirror each other, and to make clear that the distinction between these functions
is whether they join over an existing or new axis.

In general, I've tweaked the documentation and docstrings with an eye toward
pointing users to `concatenate`/`stack`/`split` as a fundamental set of basic
array manipulation routines, and away from
`array_split`/`{h,v,d}split`/`{h,v,d,column_}stack`

I put this implementation in `numpy.core.shape_base` alongside `hstack`/`vstack`,
but it appears that there is also a `numpy.lib.shape_base` module that contains
another larger set of functions, including `dstack`. I'm not really sure where
this belongs (or if it even matters).

Finally, it might be a good idea to write a masked array version of `stack`.
But I don't use masked arrays, so I'm not well motivated to do that.

==

doc/release/1.10.0-notes.rst
doc/source/reference/routines.array-manipulation.rst
numpy/add_newdocs.py
numpy/core/shape_base.py
numpy/core/tests/test_shape_base.py
numpy/lib/function_base.py
numpy/lib/index_tricks.py
numpy/lib/shape_base.py
==================
fb6426b;Charles Harris;2015-05-11 22:30:38 -0400;Merge pull request #5869 from wackywendell/notimpl
MAINT: Added more detailed messages to NotImplementedError messages.
==
==================
fc6f448;Wendell Smith;2015-05-11 16:41:57 -0400;MAINT: Added more detailed messages to NotImplementedError messages.
Closes #5444.

==

numpy/ma/core.py
==================
c65fc9e;Charles Harris;2015-05-10 10:47:07 -0400;Merge pull request #5858 from jaimefrio/random_beta
BUG: random.beta with small parameters
==
==================
59de9f2;Jaime;2015-05-10 06:04:05 -0700;Merge pull request #5860 from sotte/neutral_element
DOC: sum/prod & empty array returns neutral elment
==
==================
8284c9c;Stefan Otte;2015-05-10 14:21:26 +0200;DOC: sum/prod & empty array returns neutral elment

==

numpy/core/fromnumeric.py
==================
c7f121a;Jaime Fernandez;2015-05-08 21:08:43 -0700;BUG: np.random.beta with small parameters produces NaNs
Fixes #5851

==

numpy/random/mtrand/distributions.c
numpy/random/tests/test_regression.py
==================
30e3d41;Charles Harris;2015-05-07 17:04:39 -0400;Merge pull request #5852 from rgommers/bento-vendor
MAINT: switch waf download to https://github.com/numpy/numpy-vendor
==
==================
d0f95cc;Ralf Gommers;2015-05-07 21:43:50 +0200;MAINT: switch waf download to https://github.com/numpy/numpy-vendor
Follow-up of gh-5829, which got merged too early.

==

tools/travis-test.sh
==================
21932fb;Jaime;2015-05-07 06:40:26 -0700;Merge pull request #5847 from christianbrodbeck/fix/setdiff1d
BUG: setdiff1d return type

Fixes 5846
==
==================
c05019e;Christian Brodbeck;2015-05-06 10:49:41 -0400;BUG: setdiff1d return dtype
Fixes #5846 (If called with an empty array as first argument, the returned
array had dtype bool instead of the dtype of the input array)

==

numpy/lib/arraysetops.py
numpy/lib/tests/test_arraysetops.py
numpy/ma/extras.py
numpy/ma/tests/test_extras.py
==================
6bb8c0d;Charles Harris;2015-05-07 01:29:13 -0400;Merge pull request #5843 from jaimefrio/interp_bug
BUG: Fix interp issues with small arrays
==
==================
c48068e;Charles Harris;2015-05-07 01:18:10 -0400;Merge pull request #5841 from jaimefrio/object_dtype_str
MANT: Remove size from string representation of object dtype
==
==================
8925950;Jaime Fernandez;2015-05-06 00:09:03 -0700;BUG: Fix interp issues with small arrays
Fixes #5705

==

numpy/core/src/multiarray/compiled_base.c
==================
498acae;Jaime Fernandez;2015-05-06 20:47:17 -0700;DOC: Document string dtype descriptor behavior

==

doc/source/reference/arrays.dtypes.rst
==================
d3a2991;Jaime Fernandez;2015-05-05 20:41:35 -0700;DOC: Document changes in #5840 and #5841 in release notes

==

doc/release/1.10.0-notes.rst
==================
2a13af9;Jaime Fernandez;2015-05-05 20:11:35 -0700;MANT: Remove size from string representation of object dtype

==

numpy/core/src/multiarray/descriptor.c
==================
56e9bd5;Charles Harris;2015-05-06 14:41:00 -0400;Merge pull request #5848 from rgommers/fix-intelcompiler
BUG: distutils: fix a typo in 64-bit Intel compiler for Windows support.
==
==================
0c9967b;Ralf Gommers;2015-05-06 20:13:10 +0200;BUG: distutils: fix a typo in 64-bit Intel compiler for Windows support.
Snuck in in gh-5694.

==

numpy/distutils/ccompiler.py
==================
5ea48b8;Charles Harris;2015-05-06 12:19:04 -0400;Merge pull request #5840 from jaimefrio/dtype_size
MANT: Turn deprecated dtype string warnings into errors
==
==================
90d3778;Charles Harris;2015-05-06 11:49:09 -0400;Merge pull request #5845 from ewmoore/broadcast_to_doc
DOC: note versionadded for broadcast_to
==
==================
682cd97;Eric Moore;2015-05-06 08:51:07 -0400;DOC: note versionadded for broadcast_to
closes gh-5839

==

numpy/lib/stride_tricks.py
==================
45bbce7;Jaime Fernandez;2015-04-27 05:59:34 -0700;MANT: Turn deprecated dtype string warnings into errors
Fixes #5790

==

numpy/core/src/multiarray/conversion_utils.c
numpy/core/tests/test_datetime.py
numpy/core/tests/test_dtype.py
==================
eecb2e3;Charles Harris;2015-05-05 22:39:13 -0400;Merge pull request #5748 from mhvk/numpyufunc-binop-fix
BUG Numpy ufunc binop fix for subclasses with __numpy_ufunc__ (closes #4815)
==
==================
a29c296;Charles Harris;2015-05-05 16:22:36 -0400;Merge pull request #5838 from matthew-brett/master
BUG: revert use of !python for bdist_mpkg scripts
==
==================
2bc2676;Matthew Brett;2015-05-05 12:06:47 -0700;BUG: revert use of !python for bdist_mpkg scripts
bdist_mpkg is a very crude install method that will assume the path to
Python, so we should not use the `#!python` form when installing scripts
in bdist_mpkg.

==

numpy/f2py/setup.py
==================
09e38f9;Charles Harris;2015-05-05 09:46:22 -0400;Merge pull request #5805 from jaimefrio/ix_intp
Ix intp
==
==================
7b0b7cc;Jaime;2015-05-04 21:21:53 -0700;Merge pull request #5703 from ddasilva/ddasilva/compress_rowcols
ENH: Improve np.ma.compress_rowcols() performance, ENH: add compress_nd()
==
==================
bdfea0a;Jaime;2015-05-04 21:03:22 -0700;Merge pull request #5821 from behzadnouri/place-segfault
BUG: fixes segfault in np.place when vals is empty
==
==================
c01165f;Jaime Fernandez;2015-04-28 22:42:50 -0700;BUG: Fix handling of non-empty ndarrays

==

numpy/lib/index_tricks.py
numpy/lib/tests/test_index_tricks.py
==================
93bcedf;Charles Harris;2015-05-04 19:13:25 -0400;Merge pull request #5836 from rgommers/bento-sgemv-fix
BLD: use fix for Accelerate SGEMV issue in Bento build.  See gh-5831.
==
==================
7a02544;Ralf Gommers;2015-05-04 21:46:57 +0200;BLD: use fix for Accelerate SGEMV issue in Bento build.  See gh-5831.

==

numpy/core/bscript
==================
ba29c7b;behzad nouri;2015-05-01 18:42:37 -0400;BUG: fixes segfault in np.place when vals is empty

==

numpy/core/src/multiarray/compiled_base.c
numpy/lib/tests/test_function_base.py
==================
883d052;Daniel da Silva;2015-04-03 21:29:24 -0400;ENH: Introduce np.ma.compress_nd(), generalizes np.ma.compress_rowcols()
Provides a way to supress slices along an abitrary tuple of dimensions.

==

numpy/ma/extras.py
numpy/ma/tests/test_extras.py
==================
63e8bab;Charles Harris;2015-05-03 16:27:05 -0400;Merge pull request #5831 from charris/rebase-gh-5237
rebase-gh-5237 - BUG: Workaround segfault in Apple Accelerate framework SGEMV
==
==================
cf30776;Sturla Molden;2014-10-27 07:45:57 +0100;BUG: Workaround segfault in Apple Accelerate framework SGEMV
SGEMV in Accelerate framework will segfault on MacOS X version 10.9
(aka Mavericks) if arrays are not aligned to 32 byte boundaries and the
CPU supports AVX instructions. This can produce segfaults in np.dot.
This patch overshadows the symbols cblas_sgemv, sgemv_ and sgemv
exported by Accelerate to produce the correct behavior. The MacOS X
version and CPU specs are checked on module import. If Mavericks and AVX
are detected the call to SGEMV is emulated with a call to SGEMM if the
arrays are not 32 byte aligned. If the exported symbols cannot be
overshadowed on module import, a fatal error is produced and the process
aborts. All the fixes are in a self-contained C file and do not alter
the multiarray C code. The patch is not applied unless NumPy is
configured to link with Apple's Accelerate framework.

==

numpy/build_utils/apple_accelerate.py
numpy/build_utils/src/apple_sgemv_fix.c
numpy/core/setup.py
numpy/core/tests/test_multiarray.py
==================
3c06833;Charles Harris;2015-05-03 11:20:52 -0400;Merge pull request #5828 from jaimefrio/frompyfunc_segfault
BUG: Fix segfault in frompyfunc with nout=0
==
==================
5e98be6;Charles Harris;2015-05-03 10:40:52 -0400;Merge pull request #5829 from rgommers/bento-ci
TST: re-enable TravisCI testing with Bento.
==
==================
d9eb7a5;Ralf Gommers;2015-04-27 16:01:17 +0200;TST: re-enable TravisCI testing with Bento.
Disabling was done in gh-5708, due to the Waf download site being down for a
while.

==

.travis.yml
tools/travis-test.sh
==================
6049c66;Jaime Fernandez;2015-05-03 05:23:33 -0700;BUG: Fix segfault in frompyfunc with nout=0
Fixes #2014

==

numpy/core/src/umath/loops.c.src
numpy/core/tests/test_regression.py
==================
3782f7e;Charles Harris;2015-05-02 15:23:48 -0400;Merge pull request #5825 from charris/cleanup-gh-5583
BUG: Make ma.where consistent with unmasked where.
==
==================
63ff998;Charles Harris;2015-05-02 11:22:37 -0600;MAINT: Refactor numpy.ma.where.
Use np._NoValue as default values of 'x' and 'y' in signature. That
allows None values to be used for compatibility with the unmasked
version of where and makes detection of the case when neither is
given easier.

Use properties *.data and *.mask instead of *._data and *._mask. That
may avoid some subtle problems.

Minor style cleanups.

==

numpy/ma/core.py
==================
602836b;John Kirkham;2015-02-19 01:23:50 -0500;BUG: Fix `numpy.ma.where` to be consistent with unmasked version.
Closes #5679.

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
f3e7ef7;Charles Harris;2015-05-02 12:18:38 -0400;Merge pull request #5824 from charris/cleanup-gh-5516
BUG: Fix assignment of mask in ma.masked_where
==
==================
d7ffaea;Gerrit Holl;2015-01-28 19:25:30 -0500;TST: Add test for fix to issue #2972
Add a test to TestMaskedArrayFunctions to verify that a masked
structures array created with masked_where has a structured mask. The
mask was previously unstructured, leading to bug #2972.

==

numpy/ma/tests/test_core.py
==================
a7d663f;Gerrit Holl;2015-01-28 19:25:07 -0500;BUG: Fix mask assignment in masked_where to use .mask property.
This commit fixes a bug in numpy.ma.masked_where when it is passed a
structured array.  masked_where was inadvertently setting the _mask
field of a structured array to a non-structured array, so we would end
up with a masked structured array where x.data was structured, but
x.mask was not.  This led to troubles for methods such as __getitem__,
__repr__, and tolist.  By writing to the property .mask instead of
._mask, this problem is fixed.

Closes #2972.

==

numpy/ma/core.py
==================
ad99656;Charles Harris;2015-04-30 20:15:59 -0400;Merge pull request #5817 from matthew-brett/master
MRG: add module to test installed scripts
==
==================
83e0d17;Matthew Brett;2015-04-29 14:52:27 -0700;TEST: add module to test installed scripts
Module tests whether we can run f2py and return correct version.

Skip this test when running in-place (we don't install f2py in that
case).

Use our own virtualenvs in travis-ci to avoid picking up travis' numpy.

==

.travis.yml
numpy/tests/test_scripts.py
tools/travis-test.sh
==================
38cb7aa;Charles Harris;2015-04-30 11:24:18 -0400;Merge pull request #5815 from matthew-brett/f2py-shebang-fix
BUG: fix f2py shebang line for bdist wheel, egg
==
==================
bd821f5;Charles Harris;2015-04-29 18:25:42 -0400;Merge pull request #5814 from argriffing/vonmises-docstring
DOC: improve the vonmises docstring example
==
==================
19220c4;Matthew Brett;2015-04-29 14:45:17 -0700;ENH: add bdist_mpkg, bdist_wininst to binary dists
Add other binary distribution formats to list of build commands that
should generate !python shebang lines.

==

numpy/f2py/setup.py
==================
fee5ec4;Matthew Brett;2015-04-29 13:00:15 -0700;BUG: fix f2py shebang line for bdist wheel, egg
Command `bdist_wheel` was generating a shebang line for f2py that uses
the Python path for the building Python.  If we are building a wheel or
an egg, use the generic `#!python` shebang line for the f2py script
instead, which setuptools will modify at install time.

Closes gh-5812.

==

numpy/f2py/setup.py
==================
8206e8d;alex;2015-04-29 12:54:03 -0400;DOC: improve the vonmises docstring example

==

numpy/random/mtrand/mtrand.pyx
==================
b282d2a;Charles Harris;2015-04-29 11:14:03 -0400;Merge pull request #5791 from charris/indexing-explanations-cleanup
Indexing explanations cleanup
==
==================
0d31348;Charles Harris;2015-04-23 14:45:06 -0600;MAINT: Spelling and style fixes to internals.code-explanations.rst.
Basic cleanup of the new indexing documentation. Also replace
"subspace" by "subarray" and try to clarify mixed advanced and view
indexing.

[skip ci]

==

doc/source/reference/internals.code-explanations.rst
==================
1cfe6d9;Charles Harris;2015-04-27 12:25:59 -0400;Merge pull request #5800 from behzadnouri/nonc-chi2
BUG: Fixes random.noncentral_chisquare when 0 < df <= 1
==
==================
f06b121;Jaime Fernandez;2015-04-27 06:15:03 -0700;TST: Added tests for ix_

==

numpy/lib/tests/test_index_tricks.py
==================
2a8efb1;Jaime Fernandez;2015-04-27 06:12:56 -0700;BUG: make empty inputs to ix_ create an empty int typed output
Fixes #5804

==

numpy/lib/index_tricks.py
==================
fbd3817;behzad nouri;2015-04-25 10:18:18 -0400;BUG: Fixes random.noncentral_chisquare when 0 < df <= 1
Closes #5766.

==

numpy/random/mtrand/distributions.c
numpy/random/mtrand/mtrand.pyx
numpy/random/tests/test_random.py
==================
588aff4;Charles Harris;2015-04-25 13:43:51 -0400;Merge pull request #5797 from jaimefrio/py_return_none
MANT: Use Py_RETURN_NONE whenever Py_None is returned
==
==================
a8b1c0c;Charles Harris;2015-04-24 22:11:34 -0400;Merge pull request #5597 from zerothi/ENH-distutils
BLD, ENH: Reading of extra flags from site.cfg to extend flexibility
==
==================
3cc68c9;Jaime Fernandez;2015-04-24 18:40:28 -0700;MANT: Use Py_RETURN_NONE whenever Py_None is returned

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/compiled_base.c
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarray_tests.c.src
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/numpymemoryview.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/multiarray/shape.c
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/umathmodule.c
numpy/f2py/src/fortranobject.c
numpy/linalg/lapack_litemodule.c
==================
77c20d8;Charles Harris;2015-04-24 12:22:43 -0400;Merge pull request #5796 from jaimefrio/more_warnings
MANT: Remove several compiler warnings
==
==================
9ec8e5c;Jaime Fernandez;2015-04-24 06:49:17 -0700;MANT: Use proper abs function for pointer addresses in simd.inc.src

==

numpy/core/src/umath/simd.inc.src
==================
fa9e8c4;seberg;2015-04-24 11:16:22 +0200;Merge pull request #5792 from jaimefrio/unused_vars
MANT: Remove unused variables from _PyArray_DescrHashImp
==
==================
d61152a;seberg;2015-04-24 11:14:23 +0200;Merge pull request #5793 from jaimefrio/pyobject_cast
MANT: Add castings to PyObject in PyArray_Round
==
==================
5d0f474;Jaime Fernandez;2015-04-23 22:54:33 -0700;MANT: Use labs, not fabs, for integer abs in distributions.c

==

numpy/random/mtrand/distributions.c
==================
b4245a9;Jaime Fernandez;2015-04-23 22:29:49 -0700;BUG: Fix wrong NULL checks in multiarray_tests.c.src

==

numpy/core/src/multiarray/multiarray_tests.c.src
==================
4f28ca3;Jaime Fernandez;2015-04-23 22:15:56 -0700;MANT: Add castings to PyObject in PyArray_Round

==

numpy/core/src/multiarray/calculation.c
==================
d372299;Jaime Fernandez;2015-04-23 22:02:53 -0700;MANT: Remove unused variables from _PyArray_DescrHashImp

==

numpy/core/src/multiarray/hashdescr.c
==================
98a9dae;Charles Harris;2015-04-23 19:10:32 -0400;Merge pull request #5785 from jaimefrio/compiler_warnings
BUG: Fixed wrong return of PyArray_Partition on failure
==
==================
6981594;Sebastian Berg;2014-02-20 13:57:46 +0100;DOC: Update indexing implementation explanations.

==

doc/source/reference/internals.code-explanations.rst
==================
9d7beb1;Charles Harris;2015-04-23 15:27:53 -0400;Merge pull request #4453 from abalkin/issue-4452
BUG: Masked array addition does not work when dtype=object
==
==================
1cc2f8b;Lev Abalkin;2014-03-05 23:48:34 -0500;TST: Test that masked array addition works when dtype=object
See issue #4452.

==

numpy/ma/tests/test_core.py
==================
eb81ac4;Charles Harris;2015-04-23 12:54:29 -0400;Merge pull request #5784 from jaimefrio/list_overflow
BUG: Use npy_intp instead of int in ctors.c
==
==================
ea1036c;Charles Harris;2015-04-23 12:41:47 -0400;Merge pull request #4612 from Nodd/loadtxt_comments
ENH: Multiple comment tokens in loadtxt
==
==================
e9d04e9;Jaime;2015-04-23 08:44:19 -0700;Merge pull request #5789 from pitrou/identity_steal_none
BUG: reference stolen from None when looking up a ufunc's identity attribute
==
==================
e440e67;Antoine Pitrou;2015-04-23 16:58:44 +0200;BUG: reference stolen from None when looking up a ufunc's identity attribute
A new reference must be returned by the C getter function, not a borrowed one.

==

numpy/core/src/umath/ufunc_object.c
==================
b635ba4;Jaime;2015-04-23 06:50:58 -0700;Merge pull request #5786 from pitrou/record_dtype_hash
BUG: fix instability of structured dtype hash
==
==================
c1a2a0e;Antoine Pitrou;2015-04-23 10:35:07 +0200;BUG: fix instability of structured dtype hash
The hash value of a structured dtype was dependent on iteration order
of the fields mapping, which could make (in rare conditions) two
equal dtypes hash to different values.  We now consider the fields
in deterministic order, according to the names property.

Closes #5715.

==

numpy/core/src/multiarray/hashdescr.c
==================
e1e05e1;Jaime;2015-04-23 06:12:10 -0700;Merge pull request #5787 from pitrou/abs_neg_zero
BUG: fix abs() of floating point scalar on negative zeros
==
==================
af7d8e5;Jaime;2015-04-23 04:53:42 -0700;Merge pull request #5788 from pitrou/complex_round_explicit_output
BUG: fix round() on complex array with explicit output
==
==================
d6b20d1;Antoine Pitrou;2015-04-23 12:01:44 +0200;BUG: fix round() on complex array with explicit output
Closes #5779.

==

numpy/core/src/multiarray/calculation.c
numpy/core/tests/test_multiarray.py
==================
fb93254;Antoine Pitrou;2015-04-23 11:44:02 +0200;BUG: fix abs() of floating point scalar on negative zeros
Closes #5781.

==

numpy/core/src/umath/scalarmath.c.src
numpy/core/tests/test_scalarmath.py
==================
d73f23b;Jaime Fernandez;2015-04-22 20:36:13 -0700;BUG: Fixed wrong return of PyArray_Partition on failure
On failure, PyArray_Partition should return -1, but was returning
NULL in a couple of unlikely cases.

==

numpy/core/src/multiarray/item_selection.c
==================
8a590fb;Jaime Fernandez;2015-04-22 19:50:50 -0700;BUG: Use npy_intp instead of int in ctors.c
Closes #5783

==

numpy/core/src/multiarray/ctors.c
==================
36dbfa5;Joseph Martinot-Lagarde;2015-04-22 11:53:58 +0200;ENH: Multiple comment tokens in loadtxt

==

numpy/lib/npyio.py
numpy/lib/tests/test_io.py
==================
02b8583;Charles Harris;2015-04-21 22:25:06 -0400;Merge pull request #5316 from juliantaylor/align-fixes
fix 1.9 alignment issues
==
==================
efcf028;Julian Taylor;2015-04-19 14:45:42 +0200;Merge pull request #5774 from rgommers/gfortran-version
BLD: distutils: more robust gfortran version checking.  Closes gh-5768.
==
==================
73471de;Ralf Gommers;2015-04-19 14:28:24 +0200;BLD: distutils: more robust gfortran version checking.  Closes gh-5768.

==

numpy/distutils/fcompiler/gnu.py
numpy/distutils/tests/test_fcompiler_gnu.py
==================
e89593f;Charles Harris;2015-04-18 15:35:42 -0400;Merge pull request #5770 from pv/npyio-pickle
ENH: add options for disabling use of pickle in load/save
==
==================
a2bd3a7;Pauli Virtanen;2015-04-17 14:29:43 +0300;ENH: add options for disabling use of pickle in load/save

==

numpy/lib/format.py
numpy/lib/npyio.py
numpy/lib/tests/test_format.py
==================
0752872;Jaime;2015-04-13 05:26:39 -0700;Merge pull request #5764 from Linkid/doc/syntax
DOC, MAINT: fix typo in np.insert docstring
==
==================
c1a3fcc;François Magimel;2015-04-13 11:32:10 +0200;DOC, MAINT: fix typo in np.insert docstring

==

numpy/lib/function_base.py
==================
3c5409e;Jaime;2015-04-08 21:13:59 -0700;Merge pull request #5757 from helderc/patch-1
DOC: Docstring of gradient() function
==
==================
a5416be;Helder Oliveira;2015-04-08 21:53:11 -0300;DOC: Docstring of gradient() function
Updating of docstring of gradient() function specifying the return is a `list` of `ndarray`.

==

numpy/lib/function_base.py
==================
cf2f063;Charles Harris;2015-04-05 22:10:01 -0400;Merge pull request #5751 from helderc/patch-1
DOC: Return of gradient() function
==
==================
34a40a9;Charles Harris;2015-04-05 22:01:04 -0400;Merge pull request #5713 from cowlicks/bug-5712
Fix read_array_header_*
==
==================
b564543;Helder Cesar;2015-04-05 22:26:57 -0300;DOC: Return of gradient() function
This is an improve of documentation for gradient() funcion as commented in #5628
==

numpy/lib/function_base.py
==================
475a640;Blake Griffith;2015-03-24 15:36:30 -0500;BUG: don't ignore version passed to format.write_array
Previously the passed in version was ignored

==

numpy/lib/format.py
==================
8b858d1;Jaime;2015-04-05 00:51:02 -0700;Merge pull request #5750 from rgommers/cython-warning-ndarray
MAINT: add warning filter for possible "ndarray size changed" Cython noise
==
==================
524208a;Ralf Gommers;2015-04-05 09:37:39 +0200;MAINT: add a warning filter for possible "ndarray size changed" Cython noise.
See gh-432 for details.  Motivation for adding this now is the discussion
on gh-5343.

==

numpy/__init__.py
==================
d1153b4;Marten van Kerkwijk;2015-04-04 21:10:39 -0400;Add tests that __numpy_ufunc__ works with subclasses.
In particular, for a class S3(S2), where S2 defines __numpy_ufunc__, ensure
that, e.g., S3() + S2() does *not* pass control to S2 if S2 and S3 share the
same __radd__.

==

numpy/core/tests/test_multiarray.py
==================
6ba4fed;Pauli Virtanen;2014-07-25 00:20:53 +0300;BUG: core: inplace ops don't have corresponding rhs ops, so no need to check the slot

==

numpy/core/src/multiarray/number.c
==================
367b409;Pauli Virtanen;2014-07-24 23:58:28 +0300;BUG: core: ensure binop execution uses ufuncs as fallback
These changes only affect objects defining __numpy_ufunc__. Other
objects use the __array_priority__ mechanism to decide whether
NotImplemented should be returned or not.

The binops previously returned NotImplemented even if other._r<op>__ is
ndarray.__r<op>__, rather than trying to evaluate the result via ufuncs.
This causes problems in binops of two objects that both subclass from
ndarray and define __numpy_ufunc__.

The solution added here makes the total logic as follows:

    def __binop__(self, other):
        if (hasattr(other, '__numpy_ufunc__') and
            not isinstance(other, self.__class__) and
            hasattr(other, '__rop__') and
            other.__class__.__rop__ is not self.__class__.__rop__):
            return NotImplemented
        return np.binop(self, other)

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/number.c
==================
f1f9e14;Charles Harris;2015-04-04 19:08:45 -0400;Merge pull request #5747 from jaimefrio/repeat_broadcast
BUG: np.repeat does not properly broadcast size 1 repeat arrays
==
==================
e05b758;Charles Harris;2015-04-04 18:03:40 -0400;Merge pull request #5343 from pitrou/cache_dtype_hash
Fix #5339: cache dtype.__hash__.
==
==================
cca2c1a;Antoine Pitrou;2014-12-03 11:43:28 +0100;ENH: cache dtype.__hash__
Computing the type of a dhash can be slow for complex (e.g. structured)
dtypes.  Hashing dtypes can be useful in some applications, such as
when doing type-based dispatching, and speed can be critical in those
cases.  This enhancement caches the once-computed hash value in the
dtype structure, so as to save time on further lookups.  The cached
value is invalidated in the rare cases where the dtype is mutated.

Benchmarks numbers:

python3.4 -m timeit -s "import numpy as np; t=np.dtype('uint64')" "hash(t)"
* before patch: 1000000 loops, best of 3: 0.498 usec per loop
* after patch: 10000000 loops, best of 3: 0.0616 usec per loop

python3.4 -m timeit -s "import numpy as np; t=np.dtype([(s, 'f') for s in 'abcdefghij'])" "hash(t)"
* before patch: 100000 loops, best of 3: 4.43 usec per loop
* after patch: 10000000 loops, best of 3: 0.0603 usec per loop

Closes #5339.

==

doc/release/1.10.0-notes.rst
numpy/core/include/numpy/ndarraytypes.h
numpy/core/include/numpy/npy_3kcompat.h
numpy/core/include/numpy/npy_common.h
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/hashdescr.c
numpy/core/tests/test_dtype.py
==================
c3cd4bf;Jaime;2015-04-04 00:24:17 -0700;Merge pull request #5742 from charris/add-test-to-gh-5732
Add test to gh 5732
==
==================
77e433a;jaimefrio;2015-04-03 17:49:25 -0700;BUG: np.repeat does not properly broadcast size 1 repeat arrays
Closes #5743

==

numpy/core/src/multiarray/item_selection.c
numpy/core/tests/test_regression.py
==================
acbd6a9;Charles Harris;2015-04-03 12:46:06 -0600;BUG: Refactor nan_to_num and make list inputs work in Python > 3.2.
Also fix the documentation to reflect current behavior

1) Copies of the input are always returned.
2) Type is preserved, in particular, integer is not upcast to float.

Note that the function now accepts all types, not just inexact and
integer. The lack of upcast is present since at least numpy 1.5, but
may be a bug.

==

numpy/lib/type_check.py
==================
71dea15;Charles Harris;2015-04-03 11:30:35 -0600;TST: Test nan_to_num with integer list input.

==

numpy/lib/tests/test_type_check.py
==================
61a546d;jmrosen155;2014-09-27 13:56:07 -0400;BUG: Integer list passed into nan_to_num results in ValueError.
Fix is to properly set array type.

Closes #1478

==

numpy/lib/type_check.py
==================
147c60f;Charles Harris;2015-04-03 12:54:35 -0400;Merge pull request #5733 from ahaldane/keepdim_doc
ENH sync ndarray methods doc/args with numpy function doc/args
==
==================
8d47d69;Allan Haldane;2015-03-28 21:40:52 -0400;ENH sync ndarray methods doc/args with numpy function doc/args
Modified the docstrings to all, any, sum, prod, mean, var, std, min, max
to add keepdims argument.

Added 'out' keyword parameter to numpy.argmin, numpy.argmax, to mirror
ndarray methods.

Updated ndarray.clip docstring to give correct parameter description.

==

doc/release/1.10.0-notes.rst
numpy/add_newdocs.py
numpy/core/fromnumeric.py
numpy/core/tests/test_multiarray.py
==================
8b6effa;Charles Harris;2015-04-01 21:13:43 -0400;Merge pull request #5709 from abalkin/issue-5185
BUG: Implemented MaskedArray.dot
==
==================
4e0cd7b;Blake Griffith;2015-03-24 15:35:49 -0500;TST: tests for format.read_array_header_* and test read_magic

==

numpy/lib/tests/test_format.py
==================
0b0c803;Blake Griffith;2015-03-24 00:06:41 -0500;BUG: Make read_array_header_* return results
Previously read_array_header_1_0 & read_array_header_2_0 were not
returning the documented results.

Closes #5602

==

numpy/lib/format.py
==================
bf8d332;Alexander Belopolsky;2015-03-30 13:39:22 -0400;Use Python 2.6 compatible assertions in tests.

==

numpy/ma/tests/test_core.py
==================
799a4c7;Jaime;2015-03-29 22:56:38 -0700;Merge pull request #5731 from RittaNarita/norm-axis-fix
BUG: Fix linalg matrix norms when given negative axes.
==
==================
188ed4f;Alexander Belopolsky;2015-03-29 14:45:52 -0400;Made dot return proper type.

==

numpy/ma/core.py
==================
2383bd6;Alexander Belopolsky;2015-03-29 14:00:31 -0400;Fixed out!=None case, added tests.

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
61caa22;RittaNarita;2015-03-29 01:31:49 +0900;TST: Make the test for linalg matrix norms coverage complete

==

numpy/linalg/tests/test_linalg.py
==================
fa372af;RittaNarita;2015-03-29 01:28:59 +0900;BUG: Fix linalg matrix norms when given negative axes.

==

numpy/linalg/linalg.py
==================
061aa26;Charles Harris;2015-03-28 10:42:53 -0600;Merge branch 'gh-5685', docstring cleanups for mtrand.pyx.
* gh-5685:
  DOC: Some cleanups of mtrand.pyx docstrings.
  DOC: Minor edits to docstrings to improve consistency in the module
  DOC: Incremental improvement in random module docstrings

==
==================
037dd99;Charles Harris;2015-03-28 10:37:26 -0600;DOC: Some cleanups of mtrand.pyx docstrings.
- Spelling fixes
- Remove blank lines between references, and
- Some style fixes in examples.

[skip ci]

==

numpy/random/mtrand/mtrand.pyx
==================
e1a96a1;George Castillo;2015-03-16 20:10:08 -0600;DOC: Minor edits to docstrings to improve consistency in the module
Fixed a number of references that were malformatted and broken links.
Module still needs work, particularly in standardizing return values.

==

numpy/random/mtrand/mtrand.pyx
==================
8c5f34b;George Castillo;2015-03-14 21:15:53 -0600;DOC: Incremental improvement in random module docstrings
Fixed some broken links, references, and missing values.  Also reverted
some earlier edits to return value descriptions to make them less
confusing.

==

numpy/random/mtrand/mtrand.pyx
==================
4679ff2;Jaime;2015-03-27 22:05:55 -0700;Merge pull request #5724 from ContinuumIO/numpy-bug-5719
BUG: Fix segfault with custom dtypes 
==
==================
30ebad6;Blake Griffith;2015-03-26 15:31:53 -0500;STY, PEP8: Avoid wildcard imports

==

numpy/core/tests/test_ufunc.py
==================
48c582f;Blake Griffith;2015-03-26 15:22:50 -0500;BUG: Fix astype issue with custom dtypes
Using astype method to convert from custom dtypes should throw an
OverflowError is the destination is too small. Previously it was
segfaulting.

closes bug 5719

==

numpy/core/src/multiarray/dtype_transfer.c
==================
9713a27;Blake Griffith;2015-03-26 15:20:47 -0500;TST: Regression test for gh-5719
Previously this would cause a segfault, now we check that this case
raises an OverflowError.

==

numpy/core/tests/test_dtype.py
==================
a4cd474;Jaime;2015-03-26 12:14:24 -0700;Merge pull request #5723 from ContinuumIO/rand-docs
DOC: Covariance matrix should be symmetric
==
==================
1f6e7cc;Charles Harris;2015-03-26 13:08:07 -0400;Merge pull request #5714 from seberg/fancy-object-assign
BUG: Fix advanced object non-array value assignment
==
==================
c0c6690;Blake Griffith;2015-03-26 11:56:40 -0500;DOC: Covariance matrix should be symmetric

==

numpy/random/mtrand/mtrand.pyx
==================
e6807be;Sebastian Berg;2015-03-24 10:09:45 +0100;BUG: Fix advanced object non-array value assignment
If the value array in an advanced indexing assignment was a non-array
and the array being assigned to is an object array, a temporary
array is created to make the object assignment work well like
slicing in general.
However, this array was created with the swapping of the mapiter
object. So we have to swap it back as if it was an array being
subscripted with MapIterSwapAxes.

==

numpy/core/src/multiarray/mapping.c
numpy/core/tests/test_indexing.py
==================
3fdf188;Alexander Belopolsky;2015-03-22 21:15:59 -0400;BUG: Implemented MaskedArray.dot
MaskedArray used to inherit ndarray.dot which ignored masks in the operands.

Fixes issue #5185.

==

numpy/ma/core.py
numpy/ma/extras.py
==================
e310164;Ralf Gommers;2015-03-22 16:26:17 +0100;Merge pull request #5708 from charris/disable-travis-bento
TST: Disable travis bento build.
==
==================
3fc6128;Charles Harris;2015-03-22 09:04:00 -0600;TST: Disable travis bento build.
The waf.io site needed looks to be offline at the moment. This
disables the travis bento build test that depends on it.

==

.travis.yml
==================
17ff423;Charles Harris;2015-03-22 09:23:03 -0400;Merge pull request #5707 from jaimefrio/format_number
BUG: wrong format field for 2.6
==
==================
d1d351f;Jaime Fernandez;2015-03-21 23:51:12 -0700;BUG: wrong format field for 2.6

==

numpy/core/tests/test_multiarray.py
==================
36f742d;Charles Harris;2015-03-21 14:53:23 -0400;Merge pull request #5704 from jaimefrio/empty_sort
BUG: (arg)sort and (arg)partition handling of empty multidim arrays
==
==================
dd30b50;Jaime Fernandez;2015-03-21 11:06:57 -0700;BUG: (arg)sort and (arg)partition handling of empty multidim arrays
Fixes an error raised by the (arg)sorting and (arg)partitioning
functions, when called on an empty multidimensional array along
an axis that doesn't have 0 length.

==

numpy/core/src/multiarray/item_selection.c
numpy/core/tests/test_multiarray.py
==================
59be917;Charles Harris;2015-03-20 21:58:42 -0400;Merge pull request #5683 from matthew-brett/deprecate-bias-ddof
BUG: deprecation for ignored corrcoef args
==
==================
a55c7fd;Charles Harris;2015-03-20 12:26:58 -0400;Merge pull request #5694 from rgommers/intel-ccompiler
ENH: distutils: add compiler classes for Intel compilers + MSVC-built Python
==
==================
95d1e43;Charles Harris;2015-03-20 12:24:27 -0400;Merge pull request #5701 from argriffing/frobenius-norm-speedup
MAINT: use the fast elementwise 2-norm implementation more often in linalg.norm
==
==================
c3599d2;alex;2015-03-20 11:34:20 -0400;MAINT: use the fast elementwise 2-norm implementation more often in linalg.norm

==

numpy/linalg/linalg.py
==================
ab64179;Ralf Gommers;2015-03-18 07:28:27 +0100;ENH: distutils: add compiler classes for Intel compilers + MSVC-built Python.
Thanks to Intel for contributing this patch.  Contact: Yolanda Chen.

==

numpy/distutils/ccompiler.py
numpy/distutils/intelccompiler.py
==================
2e0db1c;Julian Taylor;2015-03-18 22:49:57 +0100;Merge pull request #5693 from rgommers/numpyswigfile
MAINT: add licence text to numpy.i (SWIG typemaps) file
==
==================
b89bcd0;Ralf Gommers;2015-03-18 22:45:01 +0100;DOC: put a copy of the text in LICENSE.txt into tools/swig/numpy.i
Reason: numpy.i is supposed to be copied, not used from within an installed
Numpy version.

Closes gh-5690

[ci skip]

==

tools/swig/numpy.i
==================
af40d31;Ralf Gommers;2015-03-18 22:41:24 +0100;MAINT: update year of copyright note in LICENSE.txt

==

LICENSE.txt
==================
5b84a29;Jaime;2015-03-18 01:23:49 -0700;Merge pull request #5689 from rgommers/array2string-doc
DOC: add array2string to reference guide and explain relation to array_r...
==
==================
dafb597;Ralf Gommers;2015-03-18 07:44:30 +0100;DOC: add array2string to reference guide and explain relation to array_repr/str
Closes gh-5684.

[ci skip]

==

doc/source/reference/routines.io.rst
numpy/core/arrayprint.py
==================
594c64c;Matthew Brett;2015-03-15 11:34:58 -0700;ENH: deprecate bias and ddof arguments to corrcoef
The bias and ddof arguments had no effect on the calculation of the
correlation coefficient because the value cancels in the calculation.

Deprecate these arguments to np.corrcoef and np.ma.corrcoef.

==

doc/release/1.10.0-notes.rst
numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
numpy/ma/extras.py
numpy/ma/tests/test_extras.py
numpy/ma/tests/test_regression.py
==================
4b4d851;Matthew Brett;2015-03-15 11:31:37 -0700;ENH: _NoValue class at top-level to test kwargs
Add _NoValue class at top level to make it possible to detect when
non-default values got passed to a keyword argument, as in:

    def func(a, b=np._NoValue):
        if b is not np._NoValue:
            warnings.warn("Argument b is deprecated",
                          DeprecationWarning)

==

numpy/__init__.py
==================
c60f1c6;Charles Harris;2015-03-14 22:22:32 -0400;Merge pull request #5682 from matthew-brett/add-clear-catch-warnings-cm
MRG: new clear_catch_warnings context manager
==
==================
4c9e5bd;Matthew Brett;2015-03-14 19:11:29 -0700;DOC: `clear_and_catch_warnings` release note
Add release note on `clear_and_catch_warnings`.

==

doc/release/1.10.0-notes.rst
==================
28971cd;Matthew Brett;2015-03-14 18:32:01 -0700;ENH: add clear_and_catch_warnings context manager
Add context manager for tests that, on entry, clears record of any
previous warnings from given modules, so that any warning raised in the
context block does get raised, rather than suppressed by a previous
warning causing an entry in the `__warningregistry_`` of the module.

==

numpy/testing/tests/test_utils.py
numpy/testing/utils.py
==================
19d861e;Charles Harris;2015-03-13 12:15:48 -0400;Merge pull request #5670 from jaimefrio/sort_refactor
MAINT: refactor PyArray_Sort and PyArray_Partition
==
==================
ace4eec;Charles Harris;2015-03-13 12:01:33 -0400;Merge pull request #5677 from jaimefrio/override_sig_normalize
Override sig normalize
==
==================
cb2405f;Jaime Fernandez;2015-03-12 23:05:50 -0700;DOC: 'signature' preferred over 'sig' as ufunc keyword argument

==

doc/source/reference/ufuncs.rst
==================
533f616;Jaime Fernandez;2015-03-12 22:56:15 -0700;ENH: normalize 'sig' to 'signature' in ufunc override
Closes #5674

==

numpy/core/src/private/ufunc_override.h
numpy/core/tests/test_multiarray.py
==================
13032bb;Charles Harris;2015-03-13 01:17:09 -0400;Merge pull request #5676 from jaimefrio/ufunc_at_nout
BUG: ufunc.at only works on single output ufuncs
==
==================
ce7461e;Charles Harris;2015-03-13 01:06:07 -0400;Merge pull request #5673 from jaimefrio/ufunc_maxargs
BUG: check for nargs <= NPY_MAXARGS in ufunc constructor
==
==================
6ac5172;Jaime Fernandez;2015-03-12 22:01:53 -0700;BUG: ufunc.at only works on single output ufuncs
Fixes #5665

==

numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_ufunc.py
==================
c4db04b;jaimefrio;2015-03-12 11:49:05 -0700;BUG: check for nargs <= NPY_MAXARGS in ufunc constructor
Fixes #5672

==

numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/umathmodule.c
numpy/core/tests/test_regression.py
==================
fd3b0fc;Jaime;2015-03-12 17:58:02 -0700;Merge pull request #5585 from Kreiswolke/BugFixTile
BUG: Fixed issue #4679 - make numpy.tile always return a copy
==
==================
e84454a;Charles Harris;2015-03-12 18:42:59 -0400;Merge pull request #5519 from jaimefrio/array_interface_dtype
ENH: PyArray_FromInterface checks descr if typestr is np.void
==
==================
27c68a3;Charles Harris;2015-03-12 16:30:16 -0400;Merge pull request #5659 from jaimefrio/strict_out_check
ENH: Strict checking of ufunc keyword argument names
==
==================
0ac3920;jaimefrio;2015-03-11 19:10:56 -0700;MAINT: refactor PyArray_Sort and PyArray_Partition
Modified the generic sort functions, npy_quicksort, npy_heapsort
and npy_mergesort, to have a signature compatible with the other
sort functions. Got rid of the global compare ugliness, and
refactored PyArray_Sort and PyArray_Partition to use the new
functions through a call to _new_sortlike.

==

numpy/core/src/multiarray/item_selection.c
numpy/core/src/npysort/heapsort.c.src
numpy/core/src/npysort/mergesort.c.src
numpy/core/src/npysort/npysort_common.h
numpy/core/src/npysort/quicksort.c.src
numpy/core/src/npysort/selection.c.src
numpy/core/src/private/npy_partition.h.src
numpy/core/src/private/npy_sort.h
numpy/core/tests/test_multiarray.py
==================
a866fdd;Jaime;2015-03-11 11:24:32 -0700;Merge pull request #5666 from charris/fix-loadtxt-complex
BUG: loadtxt fails with complex data in Python 3.
==
==================
f1cfc4f;Charles Harris;2015-03-11 10:07:53 -0600;BUG: loadtxt fails with complex data in Python 3.
The problem is that the Python complex type constructor only accepts a
pair of numbers or a string, unlike other numeric types it does not work
with byte strings. The numpy error is subtle, as loadtxt opens the file
in the default text mode, but then converts the input lines to byte
strings when they are split into separate values. The fix here is to
convert the values back to strings in the complex converter.

Closes #5655.

==

numpy/lib/npyio.py
numpy/lib/tests/test_io.py
==================
6eef837;Kreiswolke;2015-03-11 13:07:22 +0100;Update shape_base.py
So removed the paranthesis and included the return statement.
==

numpy/lib/shape_base.py
==================
a7bea17;Charles Harris;2015-03-10 14:53:25 -0400;Merge pull request #5661 from stuarteberg/patch-1
docs: `linalg.eig()`: Add "See Also" ref to `eigh()`
==
==================
96b0382;Stuart Berg;2015-03-10 14:21:03 -0400;DOC: `linalg.eig()`: Add "See Also" ref to `eigh()` [skip ci]

==

numpy/linalg/linalg.py
==================
3a39a0e;Jaime Fernandez;2015-03-09 20:56:14 -0700;ENH: Strict checking of ufunc keyword argument names
Raises a TypeError if any of the keyword arguments supplied to a
ufunc does not exactly match the name in the signature. Prior to
this, trailing characters were discarded, e.g. 'out2' would be
treated as if it where 'out'.

==

doc/source/reference/ufuncs.rst
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_ufunc.py
==================
8e026a2;Charles Harris;2015-03-09 23:19:20 -0400;Merge pull request #5658 from endolith/patch-1
DOC: Add note about random seeds for unit testing
==
==================
0784049;endolith;2015-03-09 22:57:36 -0400;DOC: adjust wording of random data note

==

doc/TESTS.rst.txt
==================
0650e63;Charles Harris;2015-03-09 19:41:54 -0400;Merge pull request #5594 from newville/master
interp(): add storage of previous value for next index lookup
==
==================
29c019a;Julian Taylor;2015-03-09 23:48:30 +0100;Merge pull request #5565 from juliantaylor/pep338-f2py
ENH: make f2py an executable module
==
==================
0808ae8;jaimefrio;2015-01-28 21:25:00 -0800;ENH: PyArray_FromInterface checks descr if typestr is np.void
When the 'typestr' member of the __array_interface__ dictionary defines
a np.void dtype, check the 'descr' member, and if it is a valid dtype
description and it is not the default one, use it to construct the
dtype for the array to return.

This fixes #5081, as as_strided no longer has to worry about changing
the dtype of the return.

==

numpy/core/src/multiarray/ctors.c
numpy/lib/stride_tricks.py
numpy/lib/tests/test_stride_tricks.py
==================
82c03c2;endolith;2015-03-08 19:31:41 -0400;Add note about random seeds

==

doc/TESTS.rst.txt
==================
9fc0773;Jaime;2015-03-08 12:57:39 -0700;Merge pull request #5623 from rev112/fix_overflow_hypergeometric
BUG: Fix potential overflows in rk_hypergeometric_hrua()
==
==================
7f33cd9;Charles Harris;2015-03-08 14:25:18 -0400;Merge pull request #5640 from pv/fix-npy-pickle-load
BUG: enable working around pickle compatibility issues on Py3 in npy files
==
==================
37740a0;Pauli Virtanen;2015-03-08 20:04:49 +0200;STY: fold long lines

==

numpy/lib/format.py
numpy/lib/npyio.py
numpy/lib/tests/test_format.py
==================
f932388;Pauli Virtanen;2015-03-08 19:41:22 +0200;DOC: update release notes vs np.load, np.save pickle kwargs

==

doc/release/1.10.0-notes.rst
==================
8016a68;Pauli Virtanen;2015-03-07 00:48:12 +0200;BUG: enable working around pickle compatibility issues on Py3 in npy files
Add pickle compatibility flags to numpy.save and numpy.load.  Allow only
combinations that cannot corrupt binary data in Numpy arrays.  Use the
same default values as Python pickle.

==

numpy/lib/format.py
numpy/lib/npyio.py
numpy/lib/tests/data/py2-objarr.npy
numpy/lib/tests/data/py2-objarr.npz
numpy/lib/tests/data/py3-objarr.npy
numpy/lib/tests/data/py3-objarr.npz
numpy/lib/tests/test_format.py
==================
bc034dc;Charles Harris;2015-03-08 13:19:13 -0400;Merge pull request #5621 from jaimefrio/ufunc_out_tuple
ENH: ufuncs can take a tuple of arrays as 'out' kwarg
==
==================
a0ea059;Charles Harris;2015-03-08 12:58:17 -0400;Merge pull request #5638 from DavidPowell/master
BUG: Cannot read .f2py_f2cmaps under python 3.3
==
==================
b3a087c;Charles Harris;2015-03-08 12:56:29 -0400;Merge pull request #5644 from rgommers/fix-gfortran-version-check
BLD: fix gfortran version check, and make distutils.test() work
==
==================
bb3ae05;Jaime Fernandez;2015-03-01 22:34:01 -0800;ENH: ufuncs can take a tuple of arrays as 'out' kwarg
Closes #4752

==

doc/release/1.10.0-notes.rst
doc/source/reference/ufuncs.rst
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_umath.py
==================
a81e323;Julian Taylor;2015-02-13 01:12:52 +0100;ENH: make f2py an executable module
allows pep 338 execution via python -mnumpy.f2py

==

numpy/f2py/__main__.py
numpy/f2py/setup.py
==================
eb21e7d;Matt Newville;2015-03-07 21:12:54 -0600;whitespace fixes

==

numpy/core/src/multiarray/compiled_base.c
==================
ebde190;Matt Newville;2015-03-07 21:08:21 -0600;stylistic improvements

==

numpy/core/src/multiarray/compiled_base.c
==================
564be6e;Matt Newville;2015-03-07 20:10:42 -0600;Merge branch 'master' of https://github.com/numpy/numpy

==
==================
1af465b;Charles Harris;2015-03-07 19:15:54 -0500;Merge pull request #5646 from charris/small-doc-cleanup
DOC: Move versionadded 1.6.0 in slogdet to better place.
==
==================
14c4211;Charles Harris;2015-03-07 17:11:43 -0700;DOC: Move versionadded 1.6.0 in slogdet to better place.
Put it up top, it matches better with the versionadded 1.8.0 for
stacked matrices.

[skip ci]

==

numpy/linalg/linalg.py
==================
f6853ed;Charles Harris;2015-03-07 19:07:58 -0500;Merge pull request #5627 from gertingold/slogdet
DOC: added version information for slogdet
==
==================
1b9813c;Gert-Ludwig Ingold;2015-03-03 08:11:27 +0100;DOC: Give version when various linalg functions accepted stacked arrays.
Version information added in the Notes section of the functions
accepting stacked arrays and in the discussion of this feature
in the linalg overview.

==

doc/source/reference/routines.linalg.rst
numpy/linalg/linalg.py
==================
82a8c83;Ralf Gommers;2015-03-07 10:15:50 +0100;BUG: fix import in distutils/__init__.py under Python 2.x
Without this fix, _INSTALLED is False and distutils.test() is not available.

==

numpy/distutils/__init__.py
==================
b50d5d0;Ralf Gommers;2015-03-07 09:58:17 +0100;MAINT: distutils: fix gfortran version check when gfortran emits warnings.

==

numpy/distutils/fcompiler/gnu.py
numpy/distutils/tests/test_fcompiler_gnu.py
==================
7ad33a2;Jaime;2015-03-06 12:34:41 -0800;Merge pull request #5635 from astrofrog/genfromtxt-largeints
genfromtxt does not work in some cases on 32-bit systems with dtype=None
==
==================
2c3ef4c;Thomas Robitaille;2015-03-05 23:44:30 +0100;BUG: genfromtxt gave OverflorError for large integers
Fix StringConverter to avoid OverflowError in genfromtxt. Before, int(2**66) would work
(and return a ‘long’) but then np.array([2**66], dtype=np.integer) would not work and
return an OverflowError which would propagate to genfromtxt. This commit fixes this by
ensuring testing in advance whether an OverflowError will occur. In addition, this adds
an explicit np.int64 entry on systems where integer means int32. Values larger than
2**63-1 will be cast as float. This includes a regression test and adds an entry to the
release notes.
==

doc/release/1.10.0-notes.rst
numpy/lib/_iotools.py
numpy/lib/tests/test__iotools.py
numpy/lib/tests/test_io.py
==================
df6b31d;David Powell;2015-03-06 18:45:12 +1100;BUG: Cannot read .f2py_f2cmaps under python 3.3
When reading .f2py_f2cmaps, these is iteration over dictionaries keys()
and items(), which are iterators in python 3. This prohibits modifying the
dicionaries while iterating. By wrapping these calls with list(), the python 2
behaviour is restored. Fixes #5637.

==

numpy/f2py/capi_maps.py
==================
4cba531;Jaime;2015-03-04 13:49:57 -0800;Merge pull request #5633 from yousefhamza/dev_branch
DOC: Adding note to transpose()
==
==================
ee195f2;Yousef Hamza;2015-03-04 22:30:34 +0200;DOC: Adding note to transpose()
Adding a note to clear that 1D array transpose
returns the same as the original array

==

numpy/core/fromnumeric.py
==================
504d90e;Anton Ovchinnikov;2015-03-02 11:24:20 +0100;BUG: Fix potential overflows in rk_hypergeometric_hrua()

==

numpy/random/mtrand/distributions.c
numpy/random/tests/test_regression.py
==================
03506a9;Jaime;2015-03-02 12:32:24 -0800;Merge pull request #5622 from rmcgibbo/maint-docstrings
MAINT: Reconcile docstrings and function signatures where they disagree
==
==================
6ca778d;Robert McGibbon;2015-03-01 22:53:19 -0800;DOC: Reconcile docstrings and function signatures where they disagree
Fixed typos in docstrings were updated for functions where the parameter
names in the docstring didn't match the function signature.

==

numpy/core/getlimits.py
numpy/lib/_iotools.py
numpy/lib/index_tricks.py
numpy/lib/npyio.py
numpy/lib/recfunctions.py
numpy/linalg/linalg.py
numpy/ma/core.py
numpy/ma/extras.py
numpy/ma/mrecords.py
numpy/matrixlib/defmatrix.py
numpy/polynomial/polyutils.py
numpy/testing/nosetester.py
numpy/testing/utils.py
==================
83b680b;Charles Harris;2015-03-02 11:02:33 -0500;Merge pull request #5615 from charris/distutils-style-cleanups
STY: Some style cleanups in distutils.
==
==================
fba3140;Charles Harris;2015-03-01 17:44:43 -0500;Merge pull request #5620 from shoyer/fix-broadcast_to
BUG: fix broadcast_to for reference types
==
==================
d5a67b5;Stephan Hoyer;2015-03-01 14:23:07 -0800;BUG: fix broadcast_to for reference types

==

numpy/lib/stride_tricks.py
numpy/lib/tests/test_stride_tricks.py
==================
50e4eb8;Julian Taylor;2015-03-01 13:30:17 +0100;Merge pull request #5619 from jaimefrio/unique_docstring
DOC: Describe return_counts keyword in np.unique docstring

==
==================
da3c6a2;Jaime Fernandez;2015-02-28 19:23:13 -0800;DOC: Describe return_counts keyword in np.unique docstring

==

numpy/lib/arraysetops.py
==================
a29f50e;Julian Taylor;2015-03-01 02:06:30 +0100;Merge pull request #5618 from johntyree/arrfill_ulonglong
BUG: Fixes ndarray.fill to accept maximum uint64 value
==
==================
11dfe93;John Tyree;2015-02-28 13:18:43 -0600;BUG: arr.fill() should accept the max uint64 value

==

numpy/core/src/multiarray/convert.c
numpy/core/tests/test_multiarray.py
==================
701dbe1;Charles Harris;2015-02-27 11:30:56 -0700;STY: Some style cleanups in distutils.
Break long lines.
Spaces around operators.
Remove dead code.

==

numpy/distutils/fcompiler/gnu.py
numpy/distutils/mingw32ccompiler.py
==================
96abd32;Charles Harris;2015-02-27 12:27:17 -0500;Merge pull request #5614 from charris/cleanup-gh-5587
BLD: Add support for MinGW-w64/OpenBLAS
==
==================
444b5ac;Charles Harris;2015-02-27 09:34:53 -0700;DOC: Document Carl Kleffner's MinGW-w64 toolchain in INSTALL.txt.
Taken from the description in gh-5587.

==

INSTALL.txt
==================
0817899;carlkl;2015-02-20 01:44:47 +0100;BLD: Improve mingw-w64 detection of check_embedded_lapack.

==

numpy/distutils/system_info.py
==================
ae438c3;carlkl;2015-02-20 01:11:02 +0100;BLD: Add mingw-w64 support for the mingw64static option.

==

numpy/core/src/multiarray/multiarraymodule.c
numpy/distutils/fcompiler/gnu.py
numpy/distutils/mingw32ccompiler.py
numpy/lib/tests/test_function_base.py
setup.py
==================
525f0cd;Nick Papior Andersen;2015-02-27 08:14:59 +0000;BUG: rpath was not implemented for numpy.distutils.fcompiler
This bug-fix only applies for non gnu-compilers.

The fortran compilers in numpy inherited the Ccompier class
which had the runtime library directories NotImplemented.
Hence the compilers need to define their own runtime library
path.
I have added that information to the intel/pgi/sun compilers.
The rest are either already implemented or I do not know them.

I have tested the bug-fix with intel compilers of numpy AND the
subsequent installation of scipy (which relies on the fortran
compilers). Hence this bug will only occur when linking with
the fortran compilers.

==

numpy/distutils/fcompiler/intel.py
numpy/distutils/fcompiler/pg.py
numpy/distutils/fcompiler/sun.py
==================
06af991;Charles Harris;2015-02-26 21:45:17 -0500;Merge pull request #5371 from shoyer/broadcast_to
ENH: add np.broadcast_to and reimplement np.broadcast_arrays
==
==================
05b5335;Stephan Hoyer;2015-01-14 23:41:30 -0800;ENH: add broadcast_to function
Per the mailing list discussion [1], I have implemented a new function
`broadcast_to` that broadcasts an array to a given shape according to
numpy's broadcasting rules.

[1] http://mail.scipy.org/pipermail/numpy-discussion/2014-December/071796.html

==

doc/release/1.10.0-notes.rst
doc/source/reference/routines.array-manipulation.rst
numpy/lib/stride_tricks.py
numpy/lib/tests/test_stride_tricks.py
==================
29b9480;Nick Papior Andersen;2015-02-26 09:30:31 +0000;BUG: Had thought the defaults where made of lists, it is simply a str.
Changed all lists to strings

==

numpy/distutils/system_info.py
numpy/distutils/tests/test_system_info.py
==================
98add16;Nick Papior Andersen;2015-02-26 09:18:56 +0000;ENH: rpath and runtime_library_dirs equivalent
The original distutils assumes runtime_library_dirs to
be located in rpath, however, the internal structures assumes
the keyword to be runtime_library_dirs.
For now numpy.distutils handles both equivalently.

The test has been updated to also test the rpath solution.

==

doc/release/1.10.0-notes.rst
numpy/distutils/system_info.py
numpy/distutils/tests/test_system_info.py
site.cfg.example
==================
32e23a1;seberg;2015-02-26 09:11:33 +0100;Merge pull request #5609 from mspacek/patch-1
DOC: fix typos in corrcoef()
==
==================
aca8260;Martin Spacek;2015-02-25 23:13:19 -0800;DOC: fix typos in corrcoef()

==

numpy/lib/function_base.py
==================
5e9750d;Jaime;2015-02-25 07:09:39 -0800;Merge pull request #5584 from hannaro/bugfix_argpartition
BUG: Fixed issue #5524 and added test
==
==================
1b6f46a;hannaro;2015-02-19 14:47:52 +0100;BUG: Fixes #5524 and adds test
argpartition does not fail anymore on non-ndarray array-likes.
Fix as implemented by @maniteja123.

==

numpy/core/fromnumeric.py
numpy/core/tests/test_multiarray.py
==================
a2ec60c;Nick Papior Andersen;2015-02-25 10:00:27 +0000;BUG: Python3 fix
Direct writing to files is not the same for 2vs3.
Hence we now close the file handle, re-open it
and write using the file.

==

numpy/distutils/tests/test_system_info.py
==================
a6c2443;Nick Papior Andersen;2015-02-25 09:51:41 +0000;BUG: PEP corrections
More corrections pointed out by Ralf

Changed the get_standard_file to a fully temporary
file. This means that the __init__ diverges a bit
from the system_info object. However, it only has
to do with the setup for the test. All internal things
regarding the object have not been altered.
I have checked on my box that all files/directories are removed.

==

numpy/distutils/system_info.py
numpy/distutils/tests/test_system_info.py
==================
f917960;Nick Papior Andersen;2015-02-25 09:10:59 +0000;BUG: PEP corrections and streamlined with numpy dev line
Changed self.assert* to assert_ instances through numpys
own testing utilities.

Fixes for the rst document.

Removed unnecessary import statements in the test.

==

doc/release/1.10.0-notes.rst
numpy/distutils/system_info.py
numpy/distutils/tests/test_system_info.py
==================
2e016ac;Charles Harris;2015-02-24 16:48:26 -0500;Merge pull request #5501 from jaimefrio/faster_fastputmask
ENH: speed up putmask avoiding % in inner loop
==
==================
4d4fb0d;Charles Harris;2015-02-24 13:07:56 -0500;Merge pull request #5494 from jaimefrio/argsort_refactor
MAINT: refactor PyArray_ArgSort and PyArrayArgPartition
==
==================
43fb77f;Nick Papior Andersen;2015-02-24 14:04:10 +0000;BUG: Trying to fix travis builds
The error of getcwd on 2.6 was due to previous fault.
We should not request include_dirs as they are not provided.

For python 3 I forgot the top ascii writing.

==

numpy/distutils/tests/test_system_info.py
==================
0e78439;Nick Papior Andersen;2015-02-24 13:50:05 +0000;BUG: Trying to fix travis builds
The test on Travis does not allow getcwd on python 2.6

The test for python 3+ already is in unicode, hence the
str representation was wrong.

==

numpy/distutils/tests/test_system_info.py
==================
e87ad6e;Nick Papior Andersen;2015-02-24 13:29:38 +0000;ENH: Added tests to the extra options read in
A simple test (distutils/testing/test_system_info.py)
to check that the options are read in correctly has been added.
This test has a few faults:

A) It does not allow strict library checks as that can be
   _very_ system dependent.
B) It compiles some simple C-programs but does currently not link
   them to a shared library.
C) As such the test does not check that the flags are actually used.

To circumvent this one should:

A) Make a library of the compiled sources.
B) Check that a runtime_library_dirs is working by checking
   with ldd
C) Make a preprocessor flag to check the output of two commands which
   should differ according to the flags in each block

I am not too much into the distutils compiler suite. So I have not
endeavoured on this path.

- The current test shows that the flags are read in by the standard system_info
  object and can thus be considered a "stable" solution.

- Added note of the 1.10 release schedule.

- Corrected the site.cfg.example, added runtime_library_dirs to
  the OpenBLAS example where it seems appropriate.

- Bugfix for the site.cfg.example (the [DEFAULT] block should be
  name [ALL])
  This might have lead to some confusion, but many of the libraries
  are linked explicitly by their own sections, hence it might not have
  been caught.

==

doc/release/1.10.0-notes.rst
numpy/distutils/tests/test_system_info.py
site.cfg.example
==================
a0aaf75;jaimefrio;2015-01-23 13:45:05 -0800;MAINT: refactor PyArray_ArgSort and PyArrayArgPartition
Added three new functions to npy_sort: npy_aquicksort, npy_aheapsort
and npy_amergesort, for generic dtypes, with signature compatible with
PyArray_ArgSortFunc, and refactored PyArray_ArgSort and
PyArray_ArgPartition to use them through a call to _new_argsortlike.

As an added bonus, partly fixes #5469 and adds some tests for it.

==

numpy/core/src/multiarray/item_selection.c
numpy/core/src/npysort/heapsort.c.src
numpy/core/src/npysort/mergesort.c.src
numpy/core/src/npysort/quicksort.c.src
numpy/core/src/private/npy_sort.h
numpy/core/tests/test_multiarray.py
==================
8c0a50c;Julian Taylor;2015-02-23 20:22:42 +0100;Merge pull request #5599 from pitrou/refleak_ufunc2
BUG: Fix a reference leak in ufunc type resolution.

==
==================
50afb0f;Antoine Pitrou;2015-02-23 19:43:05 +0100;BUG: Fix a reference leak in ufunc type resolution.
ensure_dtype_nbo() already creates a new reference.

==

numpy/core/src/umath/ufunc_type_resolution.c
==================
63e0f6a;Nick Papior Andersen;2015-02-23 14:37:11 +0000;BLD, ENH: Reading of extra flags from site.cfg to extend flexibility
Addition to the distutils module to be able
to read in more optional arguments and flags
from the site.cfg file.

Currently are these additional options read:

runtime_library_dirs:
  It allows users to set the runtime
  library directories so that LD_LIBRARY_PATH can be ignored.
  This has the same format as the library_dirs option.

extra_compile_args:
  This allows the user to add specific compiler
  flags when compiling sources.
  There will be no formatting/checking of these additional compile
  flags, the compiler should complain if something is wrong.

extra_link_args:
  This allows the user to add specific linker flags
  when linking the .so objects.
  There will be no formatting/checking of these additional compile
  flags, the linker should complain if something is wrong.

When the config is runned it automatically prints out the
read in information, thereby allowing the user to see
what has been set and what has not.

Tested with and without flags to check that it builds correctly.

==

numpy/distutils/system_info.py
==================
8b44a55;Nathaniel J. Smith;2015-02-22 23:11:44 -0800;Merge pull request #5595 from jaimefrio/compiler_warnings
BUG: Uninitialized variable ret XDECREF'ed on fail
==
==================
329b7fe;Jaime Fernandez;2015-02-22 22:18:36 -0800;BUG: Unitialized variable ret XDECREF'ed on fail

==

numpy/core/src/multiarray/cblasfuncs.c
==================
85e4ac7;Matt Newville;2015-02-22 20:49:50 -0600;interp(): add storage of previous value for next index lookup

==

numpy/core/src/multiarray/compiled_base.c
==================
2b60f5b;Charles Harris;2015-02-22 19:55:41 -0500;Merge pull request #5590 from chebee7i/allclose_isclose
Make allclose use isclose.
==
==================
e59c622;chebee7i;2015-02-22 18:19:46 -0600;DOC: Add versionadded.

==

numpy/core/numeric.py
==================
a3b7aa5;chebee7i;2015-02-22 18:01:28 -0600;MAINT: Minor code edits.

==

numpy/core/numeric.py
numpy/testing/utils.py
==================
f896f50;Charles Harris;2015-02-22 14:49:37 -0500;Merge pull request #5592 from simongibbons/ma_polyfit_fix
BUG: numpy.ma.polyfit masks NaNs incorrectly
==
==================
c2681a5;chebee7i;2015-02-21 12:53:41 -0600;DOC: Update release notes on allclose/isclose changes.

==

doc/release/1.10.0-notes.rst
==================
9df5143;Simon Gibbons;2015-02-21 18:25:28 +0000;BUG: numpy.ma.polyfit masks NaNs incorrectly
This fixes the incorrect handing of masked NaNs by
``np.ma.polyfit``. Instead of passing the mask into
``np.polyfit`` by setting the weight of the masked
points to zero, the subset of elements of which are
to be fitted are passed instead.

Closes #5591

==

numpy/ma/extras.py
numpy/ma/tests/test_extras.py
==================
e2812ed;chebee7i;2015-02-20 21:42:31 -0600;TST: Update unittests for allclose, isclose.

==

numpy/core/tests/test_numeric.py
==================
e1d3a0c;chebee7i;2015-02-20 21:32:42 -0600;ENH: Add `equal_nan` argument to allclose.

==

numpy/core/numeric.py
numpy/testing/utils.py
==================
2ae0529;chebee7i;2015-02-20 21:31:42 -0600;MAINT: Make allclose use isclose.

==

numpy/core/numeric.py
==================
a5ea773;Oliver Eberle;2015-02-19 15:24:47 +0100;BUG: Fixed issue #4679 and added test
Tile now copies the input when it is a numpy array and all dimensions are
repeated only once.

==

numpy/lib/shape_base.py
numpy/lib/tests/test_shape_base.py
==================
d770034;Charles Harris;2015-02-18 21:50:34 -0500;Merge pull request #5563 from jakirkham/fix_masked_casting_warning
BUG: Avoid casting warning with masked arrays when using in-place operations
==
==================
8af02f7;John Kirkham;2015-02-18 20:16:18 -0500;BUG: Fix casting warnings during masked array in-place operations. (numpy/numpy#5563)

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
6032b8d;Charles Harris;2015-02-17 23:09:26 -0500;Merge pull request #5579 from jakirkham/pycharm_gitignore_fix
ENH: Ignore PyCharm project files.
==
==================
22c8b7a;John Kirkham;2015-02-17 23:02:09 -0500;ENH: Ignore PyCharm project files.

==

.gitignore
==================
4338d11;Charles Harris;2015-02-17 19:11:18 -0500;Merge pull request #5577 from charris/cleanup-gh-5263
BUG: financial.pmt warns of zero divide when rate == 0.
==
==================
97c481e;Charles Harris;2015-02-17 15:02:22 -0700;MAINT: Fix pmt test in numpy/lib/tests/test_financial.py.
The tests were using assert_almost_equal and setting the precision to 3
decimals. The reason for that low precision appears to have been the
failure of the tests for a more reasonable precision. The fix was to use
assert_allclose instead.

==

numpy/lib/tests/test_financial.py
==================
a9a80fc;Charles Harris;2015-02-17 15:01:29 -0700;MAINT: Simplify fix for rate == 0 in financial.pmt.

==

numpy/lib/financial.py
==================
97917ac;Fei Liu;2014-11-05 23:20:16 -0500;BUG: Fix zero divide warning in financial.pmt.
The pmt function in financial.py does a zero divide when rate=0 because
error because the alternatives in np.where() are evaluated befor the
selection is made.first before going into the function however, the
denominator can be zero at that time.

Closes #4701.

==

numpy/lib/financial.py
numpy/lib/tests/test_financial.py
==================
4065adb;Jaime;2015-02-17 07:09:40 -0800;Merge pull request #5576 from levitsky/master
MAINT: Fix an error in fmax docstring
==
==================
6acf296;Lev Levitsky;2015-02-17 17:13:19 +0300;Fix an error in fmax docstring

==

numpy/core/code_generators/ufunc_docstrings.py
==================
564a5a2;Charles Harris;2015-02-14 19:32:27 -0500;Merge pull request #5572 from lamby/master
Correct exit code if number of errors % 256 == 0
==
==================
9d77ba8;Chris Lamb;2015-02-15 00:18:04 +0000;Correct exit code if number of errors % 256 == 0
For example, we had 256 errors (etc.) our process will exit with a
successful error code which is incorrect and/or misleading.

Signed-off-by: Chris Lamb <chris@chris-lamb.co.uk>

==

tools/swig/test/testArray.py
tools/swig/test/testFarray.py
tools/swig/test/testFortran.py
tools/swig/test/testMatrix.py
tools/swig/test/testSuperTensor.py
tools/swig/test/testTensor.py
tools/swig/test/testVector.py
==================
c75caa1;Jaime;2015-02-14 15:05:56 -0800;Merge pull request #5571 from charris/fix-warnings
Fix warnings
==
==================
e3cc0f4;Charles Harris;2015-02-14 13:53:49 -0700;MAINT: Fix possible unitialized variable in shape.c.
The warning was not real, but the logic was too twisted for the
compiler. The function PyArray_Ravel could possibly be improved
a bit, but for now, just initialize the variable to 0.

==

numpy/core/src/multiarray/shape.c
==================
f23d710;Charles Harris;2015-02-14 13:44:37 -0700;MAINT: Avoid unused variable in umath_tests.c.src.
The variable is only used in an assert statement that is not always
compiled, so use the variable value there instead.

==

numpy/core/src/umath/umath_tests.c.src
==================
f317ab8;Charles Harris;2015-02-14 13:27:04 -0700;MAINT: Replace some Python macros by functions.
PyObject_INIT -> PyObject_Init
PyObject_INIT_VAR -> PyObject_InitVar

This avoids warning about parenthetical expression in PyObject_INIT.
Python recommends the functional versions when available.

==

numpy/core/src/multiarray/scalartypes.c.src
==================
ce1dadf;Charles Harris;2015-02-14 12:29:07 -0700;MAINT: fftpack.c needs #define NPY_NO_DEPRECATED_API NPY_API_VERSION.
This is because of the inclusion of numpy/ndarraytypes.h in b3121e8.

==

numpy/fft/fftpack.c
==================
172ad3e;Charles Harris;2015-02-14 12:54:06 -0500;Merge pull request #5440 from chebee7i/yieldssection
DOC: Add documentation for Yields section in docstrings.
==
==================
ec116c4;chebee7i;2015-02-14 11:23:53 -0600;DOC: Mention numpydoc 0.6.

==

doc/HOWTO_DOCUMENT.rst.txt
==================
d64d4a5;chebee7i;2015-02-14 10:58:45 -0600;DOC: Replace "Parameters" with "Returns".

==

doc/HOWTO_DOCUMENT.rst.txt
==================
e4e54a0;Charles Harris;2015-02-13 14:21:31 -0500;Merge pull request #5502 from jaimefrio/in1d_unorder
ENH: speed-up in1d replacing sorting with fancy indexing
==
==================
654399f;Charles Harris;2015-02-13 13:48:42 -0500;Merge pull request #5568 from vallis/master
Use correct #ifdef __cplusplus guard to include std_complex.i
==
==================
237d16b;Michele Vallisneri;2015-02-13 10:25:46 -0800;Use correct #ifdef __cplusplus guard to include std_complex.i

==

tools/swig/numpy.i
==================
c5b90eb;Charles Harris;2015-02-13 13:22:16 -0500;Merge pull request #5504 from charris/cleanup-gh-133
ENH: Add support for float hex format to loadtxt.
==
==================
0516465;Charles Harris;2015-02-12 13:09:29 -0700;DOC: Document loadtxt support for float.hex float representation.

==

doc/release/1.10.0-notes.rst
==================
31f5d40;Charles Harris;2015-02-12 12:51:37 -0700;TST: Make loadtxt able to load floats as hex strings.
The strings must be produced by the python float.hex method.

==

numpy/lib/tests/test_io.py
==================
4aef6a8;Chris Laumann;2011-08-03 22:35:43 -0400;ENH: Add support for float hex format to loadtxt.
Add _floatconv to npyio.py as a default floating point converter. This
uses float() as a type conversion with a fallback on (ValueError) to
float.fromhex().

Closes #2517.

==

numpy/lib/npyio.py
==================
35d01b2;Charles Harris;2015-02-13 12:44:16 -0500;Merge pull request #5518 from charris/simple-gh-3010
BUG: Simplified fix, Overflow in tan and tanh for large complex values.
==
==================
f9c3776;Charles Harris;2015-02-13 09:09:23 -0700;DOC: Document changes in npymath library.
Document the increased use of the system library for C99 complex
functions and the addition of improved fallback functions for

* npy_ctan,
* npy_cacos, npy_casin, npy_catan
* npy_ccosh, npy_csinh, npy_ctanh,
* npy_cacosh, npy_casinh, npy_catanh

==

doc/release/1.10.0-notes.rst
==================
3a4127b;Charles Harris;2015-01-30 10:03:39 -0700;BUG: Disable broken complex trig functions for early linux glibc.
The library functions casin, casinh, catan, catanh are inaccurate
in glibc version < 2.16, so use the numpy fallback functions for
those.

==

numpy/core/setup_common.py
numpy/core/src/private/npy_config.h
==================
44d0c52;Charles Harris;2015-01-28 19:35:07 -0700;BUG: Do not use system cpow directly.
Numpy computes small integer powers by multiplication, this leads to
different results than the system cpow for such integers. In particular,
cpow((0 + inf*1j), 2) returns (-inf + 0j) rather than (-inf + nanj). The
system version probably makes more sense, but better to keep
compatibility at this point. We could fix our results using cproj.

==

numpy/core/src/npymath/npy_math_complex.c.src
==================
34b5f9f;Eric Moore;2015-01-28 19:27:49 -0700;TST: Add tests for complex ufuncs.
The test for precision needed to have difference changed from 2*eps to
2.1*eps for the system supplied sinh.

==

numpy/core/tests/test_umath.py
==================
6906823;Eric Moore;2015-01-28 16:15:30 -0700;ENH: Use the new complex functions in npymath for our ufuncs.
This should clear up such things as

>>> np.tanh(372 + 1j)
(nan+nan*j)

==

numpy/core/src/umath/funcs.inc.src
==================
c1f7e0b;Eric Moore;2015-01-28 16:13:23 -0700;ENH: Implement more fallback complex functions for npy_math.
The new functions added:

    npy_ctan,
    npy_cacos, npy_casin, npy_catan
    npy_ccosh, npy_csinh, npy_ctanh
    npy_cacosh, npy_casinh, npy_catanh

==

numpy/core/include/numpy/npy_math.h
numpy/core/src/npymath/npy_math_complex.c.src
==================
ccc810e;Jaime;2015-02-13 07:08:30 -0800;Merge pull request #5567 from ahjulstad/histogram2d-docstring
DOC: Updated docstring for histogram2d as suggested in issue #5538
==
==================
40fd50e;Åsmund Hjulstad;2015-02-13 14:10:12 +0100;DOC: Updated docstring for histogram2d as suggested in issue #5538
Also, added unittest for [int, array] combination arguments

==

numpy/lib/tests/test_twodim_base.py
numpy/lib/twodim_base.py
==================
8cf7c4a;Charles Harris;2015-02-11 08:11:25 -0500;Merge pull request #5555 from ahjulstad/ifort-deprecated-options
DEV: Replace deprecated options for ifort.
==
==================
c64b61b;Charles Harris;2015-02-10 13:27:30 -0500;Merge pull request #5547 from mwcraig/add-contribution-guidelines
Add contribution guidelines that github will automatically display
==
==================
1801fe6;Charles Harris;2015-02-10 13:19:25 -0500;Merge pull request #5556 from ahjulstad/dev-version-number
Change to fully PEP440 compliant dev version numbers (always .dev0)
==
==================
e15f292;Åsmund Hjulstad;2015-02-10 18:07:55 +0100;Change to fully PEP440 compliant dev version numbers (always .dev0)

==

setup.py
==================
713147a;Åsmund Hjulstad;2015-02-10 17:10:20 +0100;DEV: Replace deprecated options for ifort.
The /Qlowercase and /us options has been deprecated in the Intel Visual Fortran Compiler since at least version 2013.
Replace with /names:lowercase and /assume:underscore.

==

numpy/distutils/fcompiler/intel.py
==================
c2c0f7f;Matthew Craig;2015-02-09 11:55:26 -0600;DOC: add more details to instructions for reporting issues

==

CONTRIBUTING.md
==================
a4cdc5b;Charles Harris;2015-02-09 10:28:58 -0500;Merge pull request #5549 from ahjulstad/doc-sitecfg
Added MKL for win-64 to site.cfg example. Changed link to ConfigParser doc
==
==================
5e3f9bd;Åsmund Hjulstad;2015-02-09 12:57:21 +0100;DOC: Added MKL win-64 settings to site.cfg example
Added MKL settings for Intel Fortran Composer.
In addition, changed link to ConfigParser documentation.

==

site.cfg.example
==================
a8a6a72;Matthew Craig;2015-02-08 20:18:28 -0600;DOC: add CONTRIBUTING.md that will be automatically displayed on github
Rather than reproducing the details of contribution guidelines it points
contributors to the existing documentation.

==

CONTRIBUTING.md
==================
0faf6d6;Charles Harris;2015-02-08 20:57:07 -0500;Merge pull request #5535 from ahjulstad/bytevsstr-lib2def
Return output from nm command as string (and not bytes)
==
==================
d930edd;Charles Harris;2015-02-08 20:53:30 -0500;Merge pull request #5546 from charris/fix-gh-5545
BLD: Use system-wide fenv.h on cygwin
==
==================
adc6b13;Sebastien Gouezel;2015-02-08 22:50:23 +0100;BLD: Use system-wide fenv.h on cygwin
Closes #5532.

==

bento.info
numpy/core/include/numpy/fenv/fenv.c
numpy/core/include/numpy/fenv/fenv.h
numpy/core/setup.py
numpy/core/src/npymath/ieee754.c.src
==================
6d3c2c5;Charles Harris;2015-02-08 19:06:03 -0500;Merge pull request #5544 from mwcraig/update-ma-average-docstring
Update docstring of ma.extras.average to reflect actual behavior
==
==================
edb9399;Matthew Craig;2015-02-08 15:21:43 -0600;Update docstring of ma.extras.average to reflect actual behavior

==

numpy/ma/extras.py
==================
72f409c;Charles Harris;2015-02-08 13:24:48 -0500;Merge pull request #5536 from stefaneng/patch-1
genfromtxt example in user docs missing delimiter
==
==================
ad3f89f;Charles Harris;2015-02-08 11:45:53 -0500;Merge pull request #5542 from sandrotosi/master
SWIG testing: clarify location and number of tests
==
==================
4cccb9b;Sandro Tosi;2015-02-08 15:02:12 +0000;SWIG testing: clarify location and number of tests
SWIG interface has moved to tools/ directory, so updating the doc to state that
and also the number of tests is reduced since what reported, so a generic "more
than" is used (to avoid similar situations in the future) but likely also the
other numbers should be checked.

==

doc/source/reference/swig.testing.rst
==================
3fdce81;Jaime;2015-02-06 16:04:15 -0800;Merge pull request #5540 from sandrotosi/master
DOC: Fix 'dimensions' typo in numpy.kron() help message
==
==================
0a338f7;Sandro Tosi;2015-02-06 23:40:09 +0000;Fix 'dimensions' typo in numpy.kron() help message
This bug was reported in Debian as: http://bugs.debian.org/777172 .

==

numpy/lib/shape_base.py
==================
76bdf3b;Åsmund Hjulstad;2015-02-06 09:20:13 +0100;Uses universal_newlines option for subprocess.Popen to automatically decode the output. (instead of a subsequent decode step).

==

numpy/distutils/lib2def.py
==================
c09d8dc;Stefan Eng;2015-02-05 08:40:00 -0800;genfromtxt example in user docs missing delimiter
The example given in the user docs does not run correctly without adding `delimiter=","`. This add the missing keyword to allow the examples to be run.
==

doc/source/user/basics.io.genfromtxt.rst
==================
b791dde;Åsmund Hjulstad;2015-02-05 12:10:38 +0100;Return output from nm command as string (and not bytes)

==

numpy/distutils/lib2def.py
==================
75eeb75;Jaime;2015-02-02 10:44:11 -0800;Merge pull request #5531 from cowlicks/patch-1
Correct my email address
==
==================
6a92319;Blake Griffith;2015-02-02 10:32:53 -0800;Correct my email address

==

doc/neps/ufunc-overrides.rst
==================
a02f5c8;Charles Harris;2015-01-30 22:49:01 -0500;Merge pull request #5527 from efiring/rayleigh_docstring
DOC: correct erroneous description of Rayleigh distribution
==
==================
934b6d6;Eric Firing;2015-01-30 15:36:19 -1000;DOC: correct erroneous description of Rayleigh distribution

==

numpy/random/mtrand/mtrand.pyx
==================
ea52028;Charles Harris;2015-01-30 18:29:52 -0500;Merge pull request #5523 from ahaldane/recarray_fixrepr
BUG: recarray __repr__ gives inaccurate representation
==
==================
73a74e9;Allan Haldane;2015-01-29 12:54:25 -0500;BUG: recarray __repr__ gives inaccurate representation
In https://github.com/numpy/numpy/pull/5483, I solved the problem that a
"recarray" and a "record array" (nomenclature defined in
https://github.com/numpy/numpy/pull/5482) looked identical by making
sure that a type's subclass was listed in the repr. However, recarrays
are still represented using the function 'rec.array' even though this
function technically creates record arrays, not recarrays.

So I have updated recarray.__repr__.

Setup:

    >>> a = np.array([(1,'ABC'), (2, "DEF")], dtype=[('foo', int), ('bar', 'S4')])
    >>> recordarr = np.rec.array(a)
    >>> recarr = a.view(np.recarray)

Behavior after https://github.com/numpy/numpy/pull/5483:

    >>> recordarr
    rec.array([(1, 'ABC'), (2, 'DEF')],
          dtype=(numpy.record, [('foo', '<i8'), ('bar', 'S4')]))
    >>> recarr
    rec.array([(1, 'ABC'), (2, 'DEF')],
          dtype=[('foo', '<i8'), ('bar', 'S4')])

New Behavior:

    >>> recordarr
    rec.array([(1, 'ABC'), (2, 'DEF')],
          dtype=[('foo', '<i8'), ('bar', '|S4')])
    >>> recarr
    array([(1, 'ABC'), (2, 'DEF')],
          dtype=[('foo', '<i8'), ('bar', 'S4')]).view(numpy.recarray)

==

numpy/core/records.py
numpy/core/tests/test_records.py
numpy/doc/structured_arrays.py
==================
456318e;Charles Harris;2015-01-29 21:17:50 -0500;Merge pull request #5522 from jaimefrio/dtype_f_doc
DOC: Update PyArray_ArrFuncs documentation
==
==================
b3f0d25;jaimefrio;2015-01-29 09:09:00 -0800;DOC: Update PyArray_ArrFuncs documentation

==

doc/source/reference/c-api.types-and-structures.rst
==================
8149c36;Charles Harris;2015-01-28 23:11:47 -0500;Merge pull request #5517 from jaimefrio/array_interface_doc
DOC: Update docs for PyArray_FromInterface/PyArray_FromStructInterface
==
==================
a7743d4;jaimefrio;2015-01-28 17:40:00 -0800;DOC: Update docs for PyArray_FromInterface/PyArray_FromStructInterface

==

doc/source/reference/c-api.array.rst
==================
de681b7;Charles Harris;2015-01-28 09:33:48 -0700;ENH: Detect all functions in complex.h
Set the HAVE_XXXX macros for all of the following functions.

    csin,   ccos,   ctan
    casin,  cacos,  catan
    csinh,  ccosh,  ctanh
    casinh, cacosh, catanh
    cexp,   clog,   cpow
    cabs,   csqrt,  carg
    cimag,  creal,  conj,
    cproj

The macros do not need to be used, but it is good to have all of
them available.

==

numpy/core/setup_common.py
==================
0a7fe2e;Jaime;2015-01-28 07:15:49 -0800;Merge pull request #5515 from rgommers/aix-build
BLD: fix include order of headers, otherwise AIX build fails.  See gh-5474
==
==================
214bfd4;Ralf Gommers;2015-01-28 08:14:40 +0100;BLD: fix include order of headers, otherwise AIX build fails.  See gh-5474.

==

numpy/fft/fftpack.c
==================
a9411ab;Jaime;2015-01-27 16:55:26 -0800;Merge pull request #5512 from charris/cleanup-generate_umath
MAINT: Style cleanup of generate_umath.py,
==
==================
50cd57c;Charles Harris;2015-01-27 15:54:05 -0700;MAINT: Style cleanup of generate_umath.py.
Break some long lines.
Remove some line continuations.
Update TypeDescription Attributes documentation.

==

numpy/core/code_generators/generate_umath.py
==================
fbcc24f;Charles Harris;2015-01-26 20:51:58 -0500;Merge pull request #5505 from ahaldane/recarray_returntype
BUG: Fix recarray getattr and getindex return types
==
==================
3cd9e73;Allan Haldane;2015-01-25 18:52:41 -0500;BUG: Fix recarray getattr and getindex return types
This commit makes changes to `__getitem__` and `__getattr__` of recarrays:

 1. recarrays no longer convert string ndarrays to chararrays, and
    instead simply return ndarrays of string type.
 2. attribute access and index access of fields now behaves identically
 3. dtype.type is now inherited when fields of structured type are accessed

Demonstration:

    >>> rec = np.rec.array([('abc ', (1,1), 1), ('abc', (2,3), 1)],
    ...       dtype=[('foo', 'S4'), ('bar', [('A', int), ('B', int)]), ('baz', int)])

Old Behavior:

    >>> type(rec.foo), type(rec['foo'])
    (numpy.core.defchararray.chararray, numpy.recarray)
    >>> type(rec.bar), type(rec['bar']), rec.bar.dtype.type
    (numpy.recarray, numpy.recarray, numpy.void)
    >>> type(rec.baz), type(rec['baz'])
    (numpy.ndarray, numpy.ndarray)

New behavior:

    >>> type(rec.foo), type(rec['foo'])
    (numpy.ndarray, numpy.ndarray)
    >>> type(rec.bar), type(rec['bar']), rec.bar.dtype.type
    (numpy.recarray, numpy.recarray, numpy.record)
    >>> type(rec.baz), type(rec['baz'])
    (numpy.ndarray, numpy.ndarray)

==

doc/release/1.10.0-notes.rst
numpy/core/records.py
numpy/core/tests/test_records.py
numpy/doc/structured_arrays.py
==================
a786c82;Charles Harris;2015-01-26 16:48:42 -0500;Merge pull request #5307 from hunse/array-docstring
Array docstring now lists correct order default
==
==================
2864715;Charles Harris;2015-01-26 16:40:00 -0500;Merge pull request #5249 from immerrr/add-missing-scalar-func-docs
DOC: add documentation for some scalar checks
==
==================
fc8db73;jaimefrio;2015-01-25 10:00:00 -0800;ENH: speed up putmask avoiding % in inner loop

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/item_selection.c
==================
704dcc0;jaimefrio;2015-01-25 09:20:55 -0800;ENH: speed-up in1d replacing sorting with fancy indexing

==

numpy/lib/arraysetops.py
==================
937d1f2;Julian Taylor;2015-01-25 16:58:23 +0100;Merge pull request #5492 from grahamc/gotofail-malloc-ret-null-fft
PyErr_NoMemory when PyArray_Zeros fails to initialize

==
==================
c3888e7;Graham Christensen;2015-01-23 13:09:23 -0600;BUG: PyErr_NoMemory when PyArray_Zeros fails to initialize

==

numpy/fft/fftpack_litemodule.c
==================
2344c26;Charles Harris;2015-01-25 09:48:47 -0500;Merge pull request #5473 from rgommers/doc-inplace-build
DOC: update build instructions, add developer docs
==
==================
7ce93ba;Charles Harris;2015-01-24 12:41:18 -0500;Merge pull request #5483 from ahaldane/dtype_showtype
ENH: Show subclass type in dtype repr and str of structured arrays
==
==================
86efa7d;Allan Haldane;2015-01-22 15:32:38 -0500;ENH: Show subclass type in dtype repr and str of structured arrays
This is a modification to the dtype str and repr functions what helps
solve https://github.com/numpy/numpy/issues/3581.

I discussed it on the mailing list in a message "Re: structured arrays,
recarrays, and record arrays" on Jan 19 2015. I didn't get any replies,
but hopefully that merely means "no opinion" rather than "bad idea".

What it does: For structured arrays, if the dtype is not np.void then
print the dtype as `(base_dtype, dtype)`.

New Behavior:

 >>> a = np.array([(1,'ABC'), (2, "DEF")], dtype=[('foo', int), ('bar', 'S4')])
 >>> np.rec.array(a)
 rec.array([(1, 'ABC'), (2, 'DEF')],
       dtype=(numpy.record, [('foo', '<i8'), ('bar', 'S4')]))
 >>> a.view(np.recarray)
 rec.array([(1, 'ABC'), (2, 'DEF')],
       dtype=[('foo', '<i8'), ('bar', 'S4')])

==

numpy/core/records.py
numpy/core/src/multiarray/descriptor.c
numpy/core/tests/test_records.py
==================
e1ff626;Charles Harris;2015-01-24 11:50:06 -0500;Merge pull request #5495 from charris/cleanup-gh-4649
BUG: Fix genfromtext NameValidator arguments passed to easy_dtype.
==
==================
22f2dc5;Charles Harris;2015-01-24 11:08:33 -0500;Merge pull request #5496 from charris/cleanup-gh-5103
ENH:Add keyword max_rows to genfromtxt.
==
==================
88307d1;Ralf Gommers;2015-01-24 16:50:38 +0100;DOC: developer guide: add section on rebuild/clean, expand section on gdb.
Addresses review comments on gh-5473.

[ci skip]

==

doc/source/dev/development_environment.rst
==================
0062a17;Charles Harris;2015-01-23 17:37:32 -0700;DOC: Document new genfromtxt max_rows argument in release notes.

==

doc/release/1.10.0-notes.rst
==================
add0881;Ralf Gommers;2015-01-24 14:20:55 +0100;Merge pull request #5498 from abdulmuneer/master
DOC: Fixing help documentation error in numpy.zeros. Fixes #5497
==
==================
76e6aa6;abdulmuneer;2015-01-24 15:11:48 +0530;DOC: Fixing help documentation error in numpy.zeros. Fixes #5497 [skip ci]

==

numpy/add_newdocs.py
==================
7a9e3d9;Warren Weckesser;2014-10-31 22:18:24 -0400;ENH: genfromtxt: Change 'nrows' to 'max_rows'.

==

numpy/lib/npyio.py
numpy/lib/tests/test_io.py
==================
54ebec3;Charles Harris;2015-01-23 18:39:16 -0500;Merge pull request #5493 from jaimefrio/lib_tests
MAINT: bring back np.lib tests
==
==================
6bb48b0;Charles Harris;2015-01-23 16:10:37 -0700;MAINT: Make argument determination in NameValidator more precise.
The function was useing `'u' in case_sensitive` to detect `upper`.
Make that more precise with `case_sensitive.startswith('u').

Raise ValueError if case_sensitive has unrecognized value.

==

numpy/lib/_iotools.py
numpy/lib/tests/test__iotools.py
==================
c8f603e;jaimefrio;2015-01-23 15:14:24 -0800;MAINT: bring back np.lib tests

==

numpy/lib/setup.py
==================
4b1aab3;Charles Harris;2015-01-23 16:06:27 -0700;TST: Fix bug in test_dtype_with_converters_and_usecols.
The case_sensitive argument to np.recfromcsv has a default value of
'lower'. That value was not previously correctly passed on, but is
now, so the previous expected values in this test were incorrectly
upper cased.

==

numpy/lib/tests/test_io.py
==================
1b88f08;Alan Briolat;2014-04-29 11:23:10 +0100;BUG: Fix genfromtext NameValidator arguments passed to easy_dtype.
np.genfromtxt validates field names twice: once in genfromtxt and once
in easy_dtype. Whilst the arguments to genfromtxt are used in the first
validation, they aren't passed to easy_dtype (which is used only when
dtype != None) and therefore in this case the default validation (strip
non-alphanum, replace spaces) gets confusingly applied, ignoring
genfromtxt's arguments.

This patch adds fixes genfromtxt by passing the appropriate arguments
onwards to easy_dtype.  That is probably the least invasive way to fix
the issue.

==

numpy/lib/npyio.py
numpy/lib/tests/test_io.py
==================
e0807a5;Jaime;2015-01-23 12:15:09 -0800;Merge pull request #5476 from juliantaylor/merge-cbase
merge _compiled_base module into multiarray
==
==================
d5e0270;Julian Taylor;2015-01-23 20:54:56 +0100;Merge pull request #5458 from jaimefrio/sort_refactor
MAINT: Refactor _new_sortlike and _new_argsortlike
==
==================
0091499;styr;2014-09-21 16:19:57 +0800;ENH:Add keyword nrows to genfromtxt.
This allows one to specify the maximum number of row processed in
in a call. The new functionality allows for reading more complex
data formats. For instance, multiple calls can be used to read in
multiple arrays stored in a single file.

Closes #5084.
Closes #5093.

==

numpy/lib/npyio.py
numpy/lib/tests/test_io.py
==================
d44604e;Charles Harris;2015-01-23 11:33:53 -0500;Merge pull request #5489 from charris/cleanup-gh-5156
Cleanup gh 5156
==
==================
8697b9c;Charles Harris;2015-01-23 09:02:37 -0700;TST: Add test for loadtxt with None as string type.

==

numpy/lib/tests/test_io.py
==================
95aac05;Leonardo Donelli;2014-10-05 16:27:02 +0200;BUG: Fix loadtxt with comments=None and a string None data.
Current loadtxt with `comments=None` considers the string `'None'` as a
comment symbol. Fixed by making split_line method check if comments is
None.

Closes #5155.

==

numpy/lib/npyio.py
==================
5b714c7;Charles Harris;2015-01-22 18:42:10 -0500;Merge pull request #5482 from ahaldane/recordarray_doc
DOC: improve record/structured array nomenclature & guide
==
==================
1bd0b4e;Allan Haldane;2015-01-16 23:53:41 -0500;DOC: improve record/structured array nomenclature & guide
This update adds a section better describing record arrays in the user
guide (numpy/doc/structured_arrays.py).

It also corrects nomenclature, such that "structured array" refers to
ndarrays with structured dtype, "record array" refers to modified
ndarrays as created by np.rec.array, and "recarray" refers to ndarrays
viewed as np.recarray. See the note at the end of the structured
array user guide.

==

doc/source/reference/arrays.classes.rst
doc/source/reference/arrays.dtypes.rst
doc/source/reference/arrays.indexing.rst
doc/source/reference/arrays.interface.rst
doc/source/reference/arrays.ndarray.rst
doc/source/reference/arrays.scalars.rst
doc/source/reference/c-api.array.rst
doc/source/reference/internals.code-explanations.rst
doc/source/user/basics.rec.rst
numpy/add_newdocs.py
numpy/core/records.py
numpy/core/src/multiarray/arrayobject.c
numpy/doc/creation.py
numpy/doc/glossary.py
numpy/doc/structured_arrays.py
numpy/lib/npyio.py
==================
9019933;Julian Taylor;2015-01-21 20:47:46 +0100;MAINT: update .gitignore for new template files

==

.gitignore
==================
4f86123;Julian Taylor;2015-01-21 19:54:12 +0100;MAINT: merge _compiled_base module into multiarray
Allows access to internal functions for the file.

==

numpy/add_newdocs.py
numpy/bento.info
numpy/core/bscript
numpy/core/setup.py
numpy/core/src/multiarray/compiled_base.c
numpy/core/src/multiarray/compiled_base.h
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/multiarraymodule_onefile.c
numpy/core/src/umath/umathmodule.c
numpy/lib/bento.info
numpy/lib/bscript
numpy/lib/function_base.py
numpy/lib/index_tricks.py
numpy/lib/npyio.py
numpy/lib/setup.py
numpy/lib/src/_compiled_base.c
==================
723a1ee;Charles Harris;2015-01-22 15:18:19 -0500;Merge pull request #5480 from charris/cleanup-gh-5279
BUG: Fix astype for structured array fields of different byte order.
==
==================
82dc4fc;Darsh P. Ranjan;2014-11-09 23:20:16 -0800;BUG: Fix astype for structured array fields of different byte order.
The offending commit is c53b0e4, which introduced two regressions:

- using astype to cast a structured array to one with a different byte
  order no longer works;
- comparing structured-array dtypes can give incorrect results if the
  two dtypes have different byte orders.

This pull request should fix both.

One thing I wasn't sure about is reordering struct fields.  In my
implementation, the `equiv`, `same_kind`, and `safe` rules are now
allowed to reorder fields.  If that isn't desired, though, it's a pretty
easy change.

==

numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_multiarray.py
==================
3937a87;jaimefrio;2015-01-21 17:15:00 -0800;MAINT: Refactor _new_sortlike and _new_argsortlike
Simplify the signature of both functions, remove code duplication
inside, add proper handling of byte-swapping for compound dtypes
(like complex, fixes #5441), and add functionality to deal with
dtypes containing Python object references. This last enhancement is
not needed for this PR, but supports subsequent ones.

==

numpy/core/src/multiarray/item_selection.c
numpy/core/tests/test_multiarray.py
==================
b69035e;Charles Harris;2015-01-21 17:26:01 -0500;Merge pull request #5475 from ContinuumIO/pickle_string_fix
BUG: Fix #3926: pickling empty string fails
==
==================
c51770d;Jay Bourque;2015-01-21 13:08:50 -0600;BUG: Fix #3926: pickling empty string fails

==

numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_regression.py
==================
960433e;Charles Harris;2015-01-20 22:44:42 -0500;Merge pull request #5468 from jaimefrio/swapaxes_view
ENH: Make swapaxes always return a view. Fixes #5260
==
==================
a7fdf04;jaimefrio;2015-01-20 19:16:05 -0800;TST: swapaxes tests

==

numpy/core/tests/test_multiarray.py
==================
1d3bcb4;jaimefrio;2015-01-20 19:15:00 -0800;ENH: Make swapaxes always return a view
swapaxes now returns a view of the input array when the axes to swap
are both the same, not the input array as it used to do. Fixes #5260

==

doc/release/1.10.0-notes.rst
numpy/core/fromnumeric.py
numpy/core/src/multiarray/shape.c
==================
e73d4fc;Charles Harris;2015-01-20 19:12:31 -0500;Merge pull request #5471 from juliantaylor/faster-fastclip
ENH: faster fastclip functions
==
==================
1b49bc5;Ralf Gommers;2015-01-20 08:45:56 +0100;DOC: add "build and test" section to developer guide.  Closes gh-5465.
[ci skip]

==

doc/source/dev/development_environment.rst
doc/source/dev/gitwash/index.rst
doc/source/dev/index.rst
doc/source/user/install.rst
==================
bc1b892;Julian Taylor;2015-01-20 19:29:34 +0100;ENH: faster fastclip functions
copying the element in the loop via an else is significantly faster than
copying first and skipping the else clause as it allows the compiler to
use branchless instructions like minsd/maxsd.

For floats this is 3 times faster for min xor max and 40% faster for min
and max. Further improvements are possible via vectorization.
There is a penalty for inplace clips due to higher memory bandwidth
usage but it seems to be less than 10% and could be easily recovered
with another template specialization if required.

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/calculation.c
numpy/core/tests/test_numeric.py
==================
71c7a39;Ralf Gommers;2015-01-20 08:21:03 +0100;DOC: update "build and install" page in user guide.
- add section on basic and parallel builds
- update links and remove outdated info

==

INSTALL.txt
doc/source/user/install.rst
==================
4ed1587;Jaime;2015-01-19 09:10:22 -0800;Merge pull request #5464 from charris/rollaxis-always-return-view
Rollaxis always return view
==
==================
cf41fce;Charles Harris;2015-01-18 19:23:47 -0700;TST: Tests for numeric.rollaxis.
There were no tests previous to this.

==

numpy/core/tests/test_numeric.py
==================
38b1a7c;Charles Harris;2015-01-18 10:29:42 -0700;ENH: Make rollaxis always return a view.
Previous to this commit, rollaxis returned a view unless the order of
the axis was unchanged, in which case the input array was returned.

==

doc/release/1.10.0-notes.rst
numpy/core/numeric.py
==================
5c00d82;jnothman;2014-11-04 15:49:12 +1100;DOC : rollaxis returns a view of the input.

==

numpy/core/numeric.py
==================
8a81c08;Charles Harris;2015-01-17 13:30:49 -0500;Merge pull request #5462 from charris/gh-5453
MAINT/TST: Add test for require, stop making extra copies.
==
==================
e744b03;Eric Moore;2015-01-14 09:22:26 -0500;MAINT/TST: Add test for require, stop making extra copies.
Also add ENSUREARRAY and a note about  requiring native
byteorder to the docs.

==

numpy/core/numeric.py
numpy/core/tests/test_numeric.py
==================
a8b6452;Charles Harris;2015-01-17 12:42:28 -0500;Merge pull request #5459 from rgommers/pareto-docstring
DOC: fix a few bugs in the random.pareto docstring.  Closes gh-4181.
==
==================
9922222;Charles Harris;2015-01-17 12:35:30 -0500;Merge pull request #5461 from rgommers/c-api-doc
DOC: some small fixes to the "Using Python as glue" section of the user ...
==
==================
fea2ebb;Ralf Gommers;2015-01-06 22:11:46 +0100;DOC: fix a few bugs in the random.pareto docstring.  Closes gh-4181.
[ci skip]

==

numpy/random/mtrand/mtrand.pyx
==================
a41c311;Ralf Gommers;2015-01-17 16:37:20 +0100;DOC: some small fixes to the "Using Python as glue" section of the user guide.
[ci skip]

==

doc/source/user/c-info.how-to-extend.rst
doc/source/user/c-info.python-as-glue.rst
==================
1d87101;Charles Harris;2015-01-16 20:17:40 -0500;Merge pull request #5455 from gerritholl/masked_structured_datetime64
BUG: Fix #4476 by adding datetime64 and timedelta64 types
==
==================
00ee332;Gerrit Holl;2015-01-15 15:33:18 -0500;TST: Add testcase for the fix to bug #4476.
Add a testcase `test_fillvalue_datetime_timedelta` to class
`TestFillingValues` for the fix to bug #4476.  See commit
216fd17 and pull request #5455.

==

numpy/ma/tests/test_core.py
==================
4bfcf48;Gerrit Holl;2015-01-15 15:32:28 -0500;BUG: Fix #4476 by adding datetime64 and timedelta64 types
This commit fixes bug #4476 by adding the codes for the datetime64 and
timedelta64 types to the `default_filler` dictionary in numpy.ma.core,
used by `default_fill_value`.  Also adapt checking in the
`default_fill_value` to include code for timedelta64, not only datetime64.

==

numpy/ma/core.py
==================
1444550;Charles Harris;2015-01-14 20:15:16 -0500;Merge pull request #5446 from jaimefrio/linspace_denormals_again
BUG: linspace should return the same as arange when possible
==
==================
2aab654;jaimefrio;2015-01-13 14:25:00 -0800;BUG: linspace should return the same as arange when equivalent
Fixes failures on other projects (scipy.signal) introduced by #5438

==

numpy/core/function_base.py
numpy/core/tests/test_function_base.py
==================
25ee91b;Charles Harris;2015-01-13 12:08:32 -0500;Merge pull request #5361 from JDWarner/arraypad_fixes
ENH: Improve arg handling & enhance test suite for `np.pad`
==
==================
615bcd1;Charles Harris;2015-01-13 12:00:18 -0500;Merge pull request #5447 from juliantaylor/ma-median-ndarray
BUG: fix ma.median used on ndarrays
==
==================
b82230f;Julian Taylor;2015-01-13 08:07:14 +0100;BUG: fix ma.median used on ndarrays
ndarrays have a data attribute pointing to the data buffer which leads
to the median working on a byte view instead of the actual type.
closes gh-5424

==

numpy/ma/extras.py
numpy/ma/tests/test_extras.py
==================
ad238c1;Julian Taylor;2015-01-13 00:32:02 +0100;Merge pull request #5438 from jaimefrio/linspace_denormal
BUG: linspace handling of denormals, fixes #5437
==
==================
bef3f08;Jaime;2015-01-11 23:07:41 -0800;Merge pull request #5442 from tdihp/patch-1
Fix typo in slogdet doc
==
==================
22a9c89;tdihp;2015-01-12 14:12:50 +0800;Fix typo in slogdet doc
fix typo in slogdet docstring

"than" -> "then"
==

numpy/linalg/linalg.py
==================
4eac56a;chebee7i;2015-01-11 15:32:52 -0600;DOC: Clarify documentation for Yields.

==

doc/HOWTO_DOCUMENT.rst.txt
==================
3d182f0;chebee7i;2015-01-11 12:19:58 -0600;DOC: Add documentation for Yields section in docstrings.

==

doc/HOWTO_DOCUMENT.rst.txt
==================
b70e249;Charles Harris;2015-01-11 12:54:34 -0500;Merge pull request #5439 from charris/gh-5347
TST: Update assert_array_almost_equal_nulp tests
==
==================
103fee0;Ryan Nelson;2014-12-05 11:39:39 -0500;TST: Update assert_array_almost_equal_nulp tests
This fix addresses Issue #347.

All of the tests in this class were using random numbers generated
without a seed. This broke `test_simple` in a nondeterministic manner.

Rewrote all tests for this function. Instead of using random numbers,
well-defined arrays of widely varying amplitude were created instead.
Changed the array modification values so that the test arrays were
either just above or just below the NULP threshold.

Added tests for float64, float32, complex128, and complex64 dtypes, and
added both addition and subtraction tests. Tried to standardize the code
for all tests.

==

numpy/testing/tests/test_utils.py
==================
ae2fbd3;Charles Harris;2015-01-11 12:29:47 -0500;Merge pull request #5332 from rnelsonchem/dev_docs
DOC: Reorganization request for Development Workflow docs
==
==================
926b236;Charles Harris;2015-01-11 12:14:37 -0500;Merge pull request #5436 from aisthesis/seterrcall-doc
DOC: Fix doc of seterrcall. Issue #4427
==
==================
f304b48;Marshall Farrier;2015-01-09 18:28:23 -0800;DOC: Fix doc of seterrcall. Issue #4427

==

numpy/core/numeric.py
==================
9d9e5a1;jaimefrio;2015-01-10 17:51:45 -0800;BUG: linspace handling of denormals, fixes #5437

==

numpy/core/function_base.py
numpy/core/tests/test_function_base.py
==================
557108c;Ryan Nelson;2014-11-30 17:09:50 -0500;DOC: Update Development Workflow Page
The "Basic Workflow" section of the Development Workflow page was reorganized
to make it clearer to new users and remove/update old material.

Major changes:

- Moved the core developer notes. Core dev notes are confusing in basic usage
  information. Updated a couple of the commands

- Added more commands and reorgaized the "New Feature Branch" section. Took
  some text from "Rebasing" and moved it here, because it was redundant.

- Made many changes to the "Editing Workflow" to clarify commands. Moved some
  git push stuff into this section as well.

- Moved pull request section to just after editing workflow. Removed outdated
  images and simplified the text. Make code review requirements explicit.

- Moved rebasing and troubleshooting sections to the end. Could add more here
  later.

- Links renamed and broken link removed.

==

doc/HOWTO_BUILD_DOCS.rst.txt
doc/source/dev/gitwash/branch_list.png
doc/source/dev/gitwash/branch_list_compare.png
doc/source/dev/gitwash/development_workflow.rst
doc/source/dev/gitwash/git_links.inc
==================
aaf5429;Charles Harris;2015-01-08 08:53:52 -0500;Merge pull request #5432 from jrjohansson/polynomial-docstring-updates
Minor docstring fix
==
==================
04bf8c9;Robert Johansson;2015-01-08 22:38:01 +0900;Minor docstring fix

==

numpy/polynomial/hermite.py
numpy/polynomial/hermite_e.py
==================
03c2bb8;Ralf Gommers;2015-01-07 19:06:12 +0100;Merge pull request #4984 from MartinThoma/master
DOC: style fixes for random.multivariate_normal docstring.

==
==================
8b56985;Martin Thoma;2014-08-23 12:22:43 -0400;DOC: style fixes for random.multivariate_normal docstring.

==

numpy/random/mtrand/mtrand.pyx
==================
29464a9;Josh Warner (Mac);2014-12-09 10:37:24 -0600;ENH: Improve arg handling & enhance test suite for np.pad

==

doc/release/1.10.0-notes.rst
numpy/lib/arraypad.py
numpy/lib/tests/test_arraypad.py
==================
f4be103;Charles Harris;2015-01-06 17:16:29 -0500;Merge pull request #5421 from charris/special-case-matrix
Special case matrix
==
==================
f80d5e0;Charles Harris;2015-01-03 18:05:50 -0700;DOC: Document changes to diag, diagonal, ravel in 1.10-notes.rst.
The changes are that they all preserve ndarray subtypes with the
exception of ravel, which still return 1-D arrays for backward
compatibility.

==

doc/release/1.10.0-notes.rst
==================
96d9c34;Charles Harris;2015-01-06 16:14:10 -0500;Merge pull request #5309 from rgommers/remove-f2py-deprecation
MAINT: remove NPY_NO_DEPRECATED_API define from f2py.
==
==================
d3e8d69;Charles Harris;2015-01-06 13:28:01 -0500;Merge pull request #5425 from mbyt/ensure_OPT_environment_variable_is_read
BLD: ensure OPT build environment variable is read
==
==================
ed83ae7;mbyt;2015-01-06 06:51:37 +0100;BLD: ensure OPT link environment variable is read

==

numpy/distutils/unixccompiler.py
==================
1cb9cf2;mbyt;2015-01-05 21:20:16 +0100;BLD: ensure OPT build environment variable is read

==

numpy/distutils/unixccompiler.py
==================
c6b8109;Charles Harris;2015-01-05 14:23:05 -0500;Merge pull request #5418 from shoyer/nanprod
ENH: add np.nanprod
==
==================
1b2d2e9;Stephan Hoyer;2015-01-03 18:37:33 +0200;ENH: add np.nanprod
This PR adds an implementation of `nanprod`.

The actual function is a two-liner adapted from `nansum`. Most of this PR
consists of documentation and tests (for which I took the opportunity to do
some consolidation).

A method with the same functionality exists in pandas, and I was surprised to
discover that it's not in numpy.

==

doc/release/1.10.0-notes.rst
numpy/lib/nanfunctions.py
numpy/lib/tests/test_nanfunctions.py
==================
c39a56a;Charles Harris;2015-01-04 12:33:04 -0500;Merge pull request #5423 from rgommers/npy-format-2point0-doc
DOC: update npy-format NEP and lib/format.py with version 2.0 descriptio...
==
==================
638a427;Ralf Gommers;2015-01-04 16:59:56 +0100;DOC: update npy-format NEP and lib/format.py with version 2.0 description.
As discussed on gh-5413.  Version 2.0 was added in gh-4765.

==

doc/neps/npy-format.rst
numpy/lib/format.py
==================
ea927d9;Charles Harris;2015-01-03 17:55:43 -0700;BUG: Make ravel function return 1-D arrays for matrix argument.
This is a backward compatibility hack to avoid breaking scipy.sparse
after fixing ravel to respect subtypes. Subtypes are still respected
except in the case of matrices and subclasses of matrices.

==

numpy/core/fromnumeric.py
numpy/matrixlib/tests/test_defmatrix.py
==================
ad2d264;Charles Harris;2015-01-03 17:11:32 -0700;BUG: Make diag, diagonal return 1-D arrays for matrix arguments.
This is an ugly hack to preserve backwards compatibility for code
that uses matrices. It is needed since both diag and diagonal have
been changed to preserve subtypes otherwise.

Note that a.diagonal() still returns matrices when a is a matrix.

==

numpy/core/fromnumeric.py
numpy/lib/twodim_base.py
numpy/matrixlib/tests/test_numeric.py
==================
7fbc43b;Charles Harris;2015-01-02 16:51:42 -0500;Merge pull request #5398 from Garrett-R/fix_5376
BUG: Fixes #5376: np.ravel to return same array type
==
==================
d2b6e96;Charles Harris;2015-01-02 14:43:10 -0500;Merge pull request #5415 from charris/tests-for-PyArray_AsCArray
TST: added test for PyArray_AsCArray #5313
==
==================
1e052f3;Henning Dickten;2014-12-01 00:25:50 +0100;TST: added test for PyArray_AsCArray #5313

==

numpy/core/src/multiarray/multiarray_tests.c.src
numpy/core/tests/test_multiarray.py
==================
3a9b333;Charles Harris;2015-01-02 13:54:47 -0500;Merge pull request #5413 from rgommers/link-format-nep
DOC: link to the npy-format NEP in numpy.npyio docs.  Closes gh-4523.
==
==================
a908924;Charles Harris;2015-01-02 13:14:03 -0500;Merge pull request #5396 from argriffing/add-nuclear-norm
ENH: nuclear norm
==
==================
ce05d8a;alex;2015-01-02 12:54:27 -0500;DOC: 'sum of singular values' -> 'sum of the singular values'

==

numpy/linalg/linalg.py
==================
20bc2eb;Ralf Gommers;2015-01-02 13:14:58 +0100;DOC: link to the npy-format NEP in numpy.npyio docs.  Closes gh-4523.
[ci skip]

==

doc/source/reference/routines.io.rst
numpy/lib/npyio.py
==================
78f69df;Garrett-R;2014-12-16 22:50:26 -0800;BUG: Fixes #5376: np.ravel to return same array type
In PR #5358, np.diagonal was modified to return whatever array type it took in.
Also, np.cumsum and np.clip return the same array type. So, np.ravel's behavior is surprising.
Two tests which were expecting np.ravel to return an array have been changed.
Also, the optional `order` parameter was added to MaskedArray.ravel to make it compatible
(matrix.ravel already had this parameter).

==

doc/release/1.10.0-notes.rst
numpy/core/arrayprint.py
numpy/core/fromnumeric.py
numpy/ma/core.py
numpy/ma/tests/test_core.py
numpy/matrixlib/tests/test_defmatrix.py
==================
c852f59;Charles Harris;2015-01-01 19:32:22 -0500;Merge pull request #5410 from insertinterestingnamehere/einsum_readable
ENH: Make views produced by np.einsum writeable
==
==================
08cfe11;Ian Henriksen;2015-01-01 14:35:51 -0700;DOC: Added a note about writeability of views from np.einsum to the corresponding docstring. Also added an example showing how to write to the diagonal of an array.

==

numpy/add_newdocs.py
==================
26a8ae3;Ian Henriksen;2015-01-01 13:39:51 -0700;DOC: Add note about writeable views from einsum to 1.10.0 release notes.

==

doc/release/1.10.0-notes.rst
==================
a42a5d1;Ian Henriksen;2015-01-01 11:35:43 -0700;TST: Test that, when returning a view, einsum returns a writable view whenever the input array is writable.

==

numpy/core/tests/test_einsum.py
==================
59cab3e;Ian Henriksen;2015-01-01 10:51:56 -0700;ENH: Make einsum return a writeable view whenever the input is writeable.

==

numpy/core/src/multiarray/einsum.c.src
==================
061feab;Charles Harris;2015-01-01 11:10:18 -0500;Merge pull request #5405 from Garrett-R/docstring_change_for_np_diagonal
DOC: Docstring of np.diagonal to reflect edits of PR #5358
==
==================
df5c87f;Garrett-R;2014-12-31 12:50:52 +0530;DOC: Docstring of np.diagonal to reflect edits of PR #5358
These should have been included with PR #5358.

==

numpy/core/fromnumeric.py
==================
fb898ce;Jaime;2014-12-30 03:48:56 -0800;Merge pull request #5386 from maniteja123/issue5354
BUG: Issue 5354 - Fixed segmentation fault when clipping complex arrays
==
==================
61f3b10;Maniteja Nandana;2014-12-22 02:53:39 +0530;BUG: solves complex array clip in issue #5354 and added symmetric regression test

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/tests/test_numeric.py
==================
1f6084a;Ralf Gommers;2014-12-30 10:36:18 +0100;Merge pull request #5403 from Juanlu001/patch-1
Remove NotImplementedError for MinGW-w64
==
==================
b2f6792;Jaime;2014-12-29 06:40:34 -0800;Merge pull request #5402 from rgommers/pep440-relnotes
DOC: add change to dev-version string (gh-5387) to 1.10.0 release notes.
==
==================
acd8736;Juan Luis Cano Rodríguez;2014-12-29 12:28:39 +0100;Removed NotImplementedError for MinGW-w64
Closes #3405
==

numpy/distutils/fcompiler/gnu.py
==================
a29c718;Ralf Gommers;2014-12-29 11:52:28 +0100;DOC: add change to dev-version string (gh-5387) to 1.10.0 release notes.

==

doc/release/1.10.0-notes.rst
==================
01f56bf;Ralf Gommers;2014-12-29 10:41:27 +0100;Merge pull request #5400 from yw5aj/master
DOC: Added ma.clump_masked to doc; removed `extras` in examples
==
==================
c5b19b1;Yuxiang Wang;2014-12-28 15:42:49 -0500;DOC: Added ma.clump_masked to doc; removed `extras` in examples
1. Added `ma.clump_masked` and `ma.clump_unmasked` into the rst file;
2. Removed the `.extras` in the examples due to the namespace change

==

doc/source/reference/routines.ma.rst
numpy/ma/extras.py
==================
b4cd025;Ralf Gommers;2014-12-27 10:42:03 +0100;Merge pull request #5397 from esc/fix/trailing_whitespace
MAINT: remove trailing whitespace
==
==================
33bacd5;Valentin Haenel;2014-12-27 01:38:11 +0100;remove trailing whitespace

==

numpy/lib/npyio.py
==================
8e53928;alex;2014-12-25 19:04:12 -0500;MAINT: remove nuclear norm from the list of options for computing condition number

==

numpy/linalg/linalg.py
==================
d699516;alex;2014-12-25 18:06:12 -0500;ENH: nuclear norm

==

numpy/linalg/linalg.py
numpy/linalg/tests/test_linalg.py
==================
901f88b;Charles Harris;2014-12-25 13:23:15 -0500;Merge pull request #5369 from charris/compat-note
REL: Update the 1.10 release notes.
==
==================
aa95d5d;Charles Harris;2014-12-24 14:02:58 -0500;Merge pull request #5364 from charris/detect_atlas_3_10
ENH: Add support for ATLAS > 3.9.33.
==
==================
bcd7169;Charles Harris;2014-12-24 13:49:06 -0500;Merge pull request #5383 from charris/xerbla
BUG: Xerbla doesn't get linked in 1.10-devel.
==
==================
75666e3;Charles Harris;2014-12-19 19:47:55 -0700;BUG: Xerbla doesn't get linked in 1.10-devel.
Add our python_xerbla to the multiarray sources. That function is
needed for all modules that link to the ATLAS 3.10 libraries, which
are now all located in two files, libsatlas and libtatlas.

Also make the test for xerbla linkage work better. If xerbla is not
linked the test will be skipped with a message.

Closes #5362.

==

numpy/core/bscript
numpy/core/setup.py
numpy/core/src/multiarray/multiarraymodule_onefile.c
numpy/core/src/multiarray/python_xerbla.c
numpy/linalg/tests/test_linalg.py
==================
dd0732e;Charles Harris;2014-12-10 17:42:02 -0700;ENH: Add support for ATLAS > 3.9.33.
Recent ATLAS combines the previous libraries into two

* libsatlas -- single threaded.
* libtatlas -- threaded.

This fix is a bit of hack in that ATLAS > 3.9.33 is treated as a new,
separate library covered by atlas_3_10_info, but the latter derived
from atlas_info, which treats the cblas, atlas, and atlas_lapack
libraries separately, so the new info has a bit of repetition.

The alternative would be to rewrite atlas_info, but that can wait
on a larger cleanup of the build system.

Closes #3774.

==

numpy/distutils/system_info.py
==================
2be7ec4;Julian Taylor;2014-12-24 13:39:04 +0100;Merge pull request #5374 from lebigot/patch-1
DOC: Fixed incorrect assert_array_almost_equal_nulp documentation

==
==================
3b6217f;Eric O. LEBIGOT (EOL);2014-12-17 16:30:02 +0800;DOC: Fixed incorrect assert_array_almost_equal_nulp documentation
The `max()` function previously used does not work with two array-like.
`maximum()` does, and is what is essentially used in the code
(`ref = nulp * np.spacing(np.where(ax > ay, ax, ay))`).

==

numpy/testing/utils.py
==================
b5cb6f1;Charles Harris;2014-12-23 20:20:15 -0500;Merge pull request #5387 from argriffing/pep-440
BLD: PEP 440
==
==================
c683a43;alex;2014-12-22 19:52:14 -0500;BLD: for PEP 440 compliance, change development version name format from e.g. 1.10.0.dev-243ab56 to 1.10.0.dev+243ab56

==

setup.py
==================
0453130;Julian Taylor;2014-12-23 20:02:53 +0100;Merge pull request #5390 from sturlamolden/mtrand-bugfix-threadsafe
BUG: Make RandomState.seed, RandomState.randint and RandomState.shuffle threadsafe

==
==================
fee4bcb;Sturla Molden;2014-12-23 17:25:27 +0100;BUG: make seed, randint and shuffle threadsafe

==

numpy/random/mtrand/mtrand.pyx
==================
a581765;Julian Taylor;2014-12-23 16:43:08 +0100;Merge pull request #5388 from sturlamolden/mtrand-bugfix-threadsafe
BUG: Make RandomState.set_state and RandomState.get_state threadsafe

==
==================
5295888;Sturla Molden;2014-12-23 16:19:38 +0100;BUG: make set_state and get_state threadsafe

==

numpy/random/mtrand/mtrand.pyx
==================
243ab56;Jaime;2014-12-19 06:45:43 -0800;Merge pull request #5380 from ewmoore/apidocfixtiny
DOC: fix typo in array flag docs.
==
==================
8b3d681;Eric Moore;2014-12-19 09:06:05 -0500;DOC: fix typo in array flag docs.

==

doc/source/reference/c-api.array.rst
==================
3ef77ee;Ralf Gommers;2014-12-13 12:03:45 +0100;Merge pull request #5368 from tacaswell/sundry_doc_changes
Cleanups in documentation formatting.
==
==================
26d883c;Charles Harris;2014-12-12 16:50:50 -0700;REL: Update the 1.10 release notes.
Mention that diag and diagonal functions now preserve subtypes. That
can lead to incompatibilies with previous code using matrices.

==

doc/release/1.10.0-notes.rst
==================
2070ecf;Charles Harris;2014-12-12 15:24:45 -0500;Merge pull request #5358 from Garrett-R/fix_bug_2015
Fix #2015: diag returns ndarray instead of matrix
==
==================
35890ae;Charles Harris;2014-12-12 14:59:50 -0500;Merge pull request #5367 from WarrenWeckesser/doc-format-ref
DOC: Give a more explicit reference to the .npy format documentation in the 'save' docstring.
==
==================
1b908fc;Thomas A Caswell;2014-12-12 14:02:50 -0500;DOC : optional parenthesis

==

numpy/lib/financial.py
==================
c05734e;Thomas A Caswell;2014-12-12 14:01:50 -0500;DOC : added missing space in frexp docstring

==

numpy/core/code_generators/ufunc_docstrings.py
==================
ab6b165;Thomas A Caswell;2014-12-10 11:24:40 -0500;DOC : integer -> int doc nitpick

==

numpy/core/numeric.py
==================
93ee10e;Thomas A Caswell;2014-12-09 18:19:32 -0500;DOC : do not abuse enum markup
 - {ndarray, bool} -> ndarray or bool
 - {int, array of ints} -> int or array of ints
 - {str, function} -> str or function
 - {sequnce, int} -> sequence or int
 - {array_like, poly1d} -> array_like or poly1d
 - {None, list of `m` scalars, scalar} -> list of `m` scalars or scalar

==

numpy/core/code_generators/ufunc_docstrings.py
numpy/core/defchararray.py
numpy/core/fromnumeric.py
numpy/lib/arraypad.py
numpy/lib/polynomial.py
==================
48b61ec;Thomas A Caswell;2014-12-09 17:55:29 -0500;DOC : move shape to front to match rest of docs

==

numpy/lib/function_base.py
==================
994a877;Thomas A Caswell;2014-12-09 17:45:06 -0500;DOC : do not abuse enumeration for return types
change '{ndarray, float}' -> 'ndarray or float' as {} are for
when the value is an enumeration

==

numpy/core/code_generators/ufunc_docstrings.py
numpy/lib/function_base.py
numpy/ma/core.py
numpy/random/mtrand/mtrand.pyx
==================
ad38608;Thomas A Caswell;2014-12-09 17:34:45 -0500;DOC : list type option in tensordot axes arg

==

numpy/core/numeric.py
==================
997f432;Warren Weckesser;2014-12-12 10:12:59 -0500;DOC: Give a more explicit reference to the .npy format documentation in the 'save' docstring.

==

numpy/lib/npyio.py
==================
629735b;Julian Taylor;2014-12-10 20:23:33 +0100;Merge pull request #5287 from chatcannon/reconcile-c-api-with-docs
Reconcile C API with docs

==
==================
8df7edd;Julian Taylor;2014-12-10 20:22:34 +0100;MAINT: cast PyArray_ITEMSIZE result to avoid warnings
return type depends on API version used

==

numpy/f2py/src/fortranobject.c
==================
69265b8;Chris Kerr;2014-11-17 20:34:11 +0100;MAINT: Update printf statements in fortranobject.c
Using NPY_INTP_FMT to format PyArray_ITEMSIZE

==

numpy/f2py/src/fortranobject.c
==================
cf2dc93;Julian Taylor;2014-12-10 20:20:24 +0100;Merge pull request #5277 from sotte/multidot_typos
DOC: fix typos and clarify multi_dot docstring..
==
==================
c5808d1;Julian Taylor;2014-12-10 19:55:59 +0100;Merge pull request #5359 from tacaswell/linspace_doc
DOC : minor changes to linspace docstring

==
==================
14a3dca;Thomas A Caswell;2014-12-09 14:39:48 -0500;DOC : minor changes to linspace docstring
 - added optional flag to dtype
 - moved conditional on step to the description from the type

==

numpy/core/function_base.py
==================
971ae72;Garrett-R;2014-12-08 20:40:41 -0800;Improved PEP-8 compliance

==

numpy/core/fromnumeric.py
numpy/lib/twodim_base.py
==================
819b3a8;Garrett-R;2014-12-08 20:33:48 -0800;BUG: Closes #2015: diag returns ndarray
If x is a matrix, np.diag(x) and np.diagonal(x) now return matrices
instead of arrays.  Both of these cause x.diagonal() to be called.
That means they return row vectors (just like x.flatten(), x.ravel(),
x.cumprod(), etc.)

==

numpy/core/fromnumeric.py
numpy/lib/twodim_base.py
numpy/matrixlib/tests/test_numeric.py
==================
b8a5da4;Charles Harris;2014-12-08 10:08:46 -0500;Merge pull request #5355 from jaimefrio/digitize_bug
BUG: digitize segfaults on TypeError
==
==================
0e8edab;jaimefrio;2014-12-07 19:32:36 -0800;BUG: digitize segfaults on TypeError
The new searchsorted-based digitize introduced in #5101 segfaults
when it should raise a TypeError.

==

numpy/lib/src/_compiled_base.c
numpy/lib/tests/test_function_base.py
==================
545d485;Nathaniel J. Smith;2014-12-06 02:13:57 +0000;Merge pull request #5349 from bobpoekert/patch-1
Change pronoun in doc string from "his" to gender-neutral "their"
==
==================
36f7178;Bob Poekert;2014-12-05 16:47:43 -0800;Change pronoun in doc string from "his" to gender-neutral "their"

==

numpy/lib/format.py
==================
152805e;Julian Taylor;2014-12-05 17:24:44 +0100;Merge pull request #5335 from rnelsonchem/fft_name_fix
BUG: Rename fft C functions to avoid name conflict
==
==================
b3121e8;Ryan Nelson;2014-12-02 08:46:58 -0500;BUG: Rename fft C functions to avoid name conflict
Resolves issue #565.

The public fft functions defined in fftpack.c have name conflicts on certain
systems, so the prefix "npy_" was added to these functions.

Added NPY_VISIBILITY_HIDDEN to the public functions in both fftpack.h and
fftpack.c. This required rearranging the includes at the beginning of
fftpack_litemodule.c so that this macro was properly defined. In addition,
Python.h and numpy/ndarraytypes.h were included in the fftpack.h.

One function, rfftb1, was flagged as `static` as it was not exported in the
header.

Build and tests pass using both Python 2.7.8 and Python 3.4.2.

==

numpy/fft/fftpack.c
numpy/fft/fftpack.h
numpy/fft/fftpack_litemodule.c
==================
00e6f31;Nathaniel J. Smith;2014-12-02 21:19:23 +0000;Merge pull request #5342 from argriffing/show-relaxed-strides-in-nosetester
TST: report relaxed strides setting alongside the numpy version and path at the beginning of nosetests
==
==================
8e76459;alex;2014-12-02 15:47:48 -0500;TST: report relaxed strides setting alongside the numpy version and path at the beginning of nosetests

==

numpy/testing/nosetester.py
==================
a6b0917;Charles Harris;2014-12-02 12:00:39 -0500;Merge pull request #5319 from larsmans/c-fixes
MAINT: refactor packbits/unpackbits
==
==================
e31dcad;Charles Harris;2014-12-01 14:28:53 -0500;Merge pull request #5333 from rnelsonchem/comp_exe
BLD: Change Fortran version flag and string check
==
==================
c4c2f21;Ryan Nelson;2014-12-01 09:55:15 -0500;BLD: Change Fortran version flag and string check
The version check flag for GnuFCompiler and Gnu95FCompiler were changed from
`--version` to `-dumpversion`. This simplifies the gnu_version_match code for
gfortran, and makes it possible to drop much of the check code for g77 as
well. This fix addresses issue #5315 and #5321.

==

numpy/distutils/fcompiler/gnu.py
numpy/distutils/tests/test_fcompiler_gnu.py
==================
5ef9566;Stefan Otte;2014-11-13 17:52:14 +0100;DOC: fix typos and clarify multi_dot docstring..
- fix singular/plural issues
- don't switch between "order" and "ordering"; use "order"
- clarify the shapes of the arguments
- don't "import numpy as np" in docstring

==

numpy/linalg/linalg.py
==================
24effb6;Lars Buitinck;2014-11-30 22:20:24 +0100;ENH ensure np.packbits works on np.bool dtype

==

numpy/lib/src/_compiled_base.c
numpy/lib/tests/test_packbits.py
==================
8a2dd06;Charles Harris;2014-11-30 15:02:49 -0500;Merge pull request #5327 from madawilliams/savetxt
ENH: More explicit error message for np.savetxt
==
==================
6ce9883;Lars Buitinck;2014-11-27 23:15:08 +0100;MAINT/TST: refactor and test packbits/unpackbits
Pushes the GIL release one loop outward. First test for these functions (!).

Incorporates suggestions by @jaimefrio and @charris.

==

numpy/lib/src/_compiled_base.c
numpy/lib/tests/test_packbits.py
==================
f7eb37f;Charles Harris;2014-11-30 12:20:48 -0500;Merge pull request #5324 from Garrett-R/fix_bug_2917
BUG: Fixes #2917: numpy.lib._iotools.StringConverter.upgrade return
==
==================
665e52e;Charles Harris;2014-11-30 12:14:12 -0500;Merge pull request #5326 from cournape/fix_hashable_collections
BUG: fix collections.Hashable behaviour for numpy arrays.
==
==================
8993a5d;Charles Harris;2014-11-30 11:51:52 -0500;Merge pull request #5322 from yw5aj/tensordot_doc
Imrpoved docstring for np.tensordot()
==
==================
1761a64;Adam Williams;2014-11-30 15:51:51 +0000;ENH: More explicit error message for np.savetxt

==

numpy/lib/npyio.py
==================
3591181;David Cournapeau;2014-11-30 13:57:00 +0000;BUG: fix collections.Hashable behaviour for numpy arrays.

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/tests/test_multiarray.py
==================
b82388e;Garrett-R;2014-11-29 23:35:56 -0800;BUG: Closes #2917: numpy.lib._iotools.StringConverter.upgrade return
numpy.lib._iotools.StringConverter.upgrade should have a return value

==

numpy/lib/_iotools.py
numpy/lib/tests/test__iotools.py
==================
af1cf19;Yuxiang Wang;2014-11-28 15:05:52 -0500;DOC: Imrpoved docstring for np.tensordot()

==

numpy/core/numeric.py
==================
0afa5fc;Charles Harris;2014-11-29 11:19:22 -0500;Merge pull request #5304 from juliantaylor/mul-overflow
ENH: use gcc intrinsic for overflow checked multiplication
==
==================
710be5b;Charles Harris;2014-11-29 11:15:54 -0500;Merge pull request #5314 from hensing/master
BUG: Closes #5313: PyArray_AsCArray caused segfault with 3D-arrays
==
==================
74b0836;Charles Harris;2014-11-29 11:12:16 -0500;Merge pull request #5308 from gmabey/swig-std-complex
ENH: added std::complex support to numpy.i
==
==================
eb61066;Charles Harris;2014-11-29 11:00:55 -0500;Merge pull request #5301 from larsmans/pyiter-doc
DOC: NpyIter documentation improvements
==
==================
821072b;immerrr;2014-10-30 14:45:40 +0300;DOC: add documentation for some scalar checks
DOC: Mention that PyArray_Return steals a reference to arr

==

doc/source/reference/c-api.array.rst
==================
e73ee5d;Charles Harris;2014-11-29 10:47:17 -0500;Merge pull request #5217 from jnothman/note-issue-1866
DOC note the effect of #1866 in byteorder discussion
==
==================
7d106d5;Julian Taylor;2014-11-26 21:47:41 +0100;BUG: reduce maximum alignment to 8 bytes on 32 bit
malloc only provides 8byte alignment and is sufficient to load complex
on x86 platforms.
This fixes the f2py alignment failures with complex types on win32 or on
linux32 with -malign-double

==

numpy/core/setup.py
numpy/core/src/private/npy_config.h
==================
3351dbf;Julian Taylor;2014-11-26 21:51:05 +0100;BUG: fix string arrays not being aligned
If itemsize is a power of two use that as the required alignment up to
the maximum provided by the platform. Power of two sizes may be accessed
via larger moves than bytes.
Non-power of two sizes are accessed bytewise and can thus always be
considered aligned.
Closes gh-5293

==

numpy/core/src/multiarray/common.c
numpy/core/tests/test_multiarray.py
==================
9a24de1;Henning Dickten;2014-11-26 17:19:19 +0100;BUG: Closes #5313 PyArray_AsCArray caused segfault

==

numpy/core/src/multiarray/multiarraymodule.c
==================
3202612;Ralf Gommers;2014-11-23 22:15:51 +0100;MAINT: remove NPY_NO_DEPRECATED_API define from f2py.
See gh-5281 for discussion.  With the defines in, compiling scipy 0.14.0 and
below isn't possible.

==

numpy/f2py/rules.py
numpy/f2py/src/fortranobject.c
==================
b63b64e;Eric Hunsberger;2014-11-20 22:09:54 -0500;DOC: array docstring lists correct order default
Fixes #5306

==

numpy/add_newdocs.py
==================
6686686;Julian Taylor;2014-11-20 23:58:22 +0100;ENH: use gcc intrinsic for overflow checked multiplication
More efficient as it uses processor overflow flags if available.

==

numpy/core/setup_common.py
numpy/core/src/private/templ_common.h.src
==================
3619a2a;Lars Buitinck;2014-11-20 17:58:38 +0100;DOC: NpyIter chapter: move table to bottom
... so that the example is now the first thing seen after the (short) intro.

==

doc/source/reference/c-api.iterator.rst
==================
31b94e8;Charles Harris;2014-11-20 09:40:34 -0500;Merge pull request #5162 from juliantaylor/scalarmath-merge
MAINT: merge scalarmathmodule into umath module
==
==================
fb037eb;Charles Harris;2014-11-20 09:19:22 -0500;Merge pull request #5298 from nils-werner/resizedocstring
Expand np.resize docstring
==
==================
e4d3069;Nils Werner;2014-11-20 08:26:13 +0100;Resize: Show an example that explains the potentially confusing behaviour of resize

==

numpy/core/fromnumeric.py
==================
8bcb756;Julian Taylor;2014-11-20 00:25:29 +0100;Merge pull request #5296 from alimuldal/fix_parallel_extensions_njobs
BUG: getattr() raises AttributeError  in get_num_jobs() when --jobs argument not given
==
==================
7f45d42;Lars Buitinck;2014-11-19 23:01:45 +0100;DOC: fix example in NpyIter docs that didn't compile

==

doc/source/reference/c-api.iterator.rst
==================
6ceb0e6;Alistair Muldal;2014-11-19 20:46:22 +0000;BUG: missing default None values in getattr(...)

==

numpy/distutils/misc_util.py
==================
68ffaec;Charles Harris;2014-11-19 11:53:18 -0500;Merge pull request #5294 from larsmans/pyiter-doc
DOC: iterator: don't bother users with NumPy development details
==
==================
ff8a146;Lars Buitinck;2014-11-19 16:47:38 +0100;DOC: iterator: don't bother users with NumPy development details

==

doc/source/reference/c-api.iterator.rst
==================
23f20aa;Charles Harris;2014-11-19 08:03:32 -0500;Merge pull request #5292 from larsmans/glue-docs
DOC: python-as-glue: use Cython, not Pyrex
==
==================
460bc51;Lars Buitinck;2014-11-19 12:15:00 +0100;DOC: python-as-glue: copyedit
[ci skip]

==

doc/source/user/c-info.python-as-glue.rst
==================
8331b93;Lars Buitinck;2014-11-18 22:45:46 +0100;DOC: python-as-glue: use Cython, not Pyrex
Fixes gh-4492. [ci skip]

==

doc/source/user/c-info.python-as-glue.rst
==================
9bfd76e;Charles Harris;2014-11-18 15:04:43 -0500;Merge pull request #5291 from wackywendell/bagobj
ENH: add BagObj.__dir__ to numpy.lib.npyio
==
==================
be13b6a;Wendell Smith;2014-11-18 12:22:29 -0500;TEST: added test of BagObj

==

numpy/lib/tests/test_io.py
==================
60de33d;Wendell Smith;2014-11-18 12:08:12 -0500;ENH: add BagObj.__dir__ to numpy.lib.npyio
This allows dir(bagobj), and also enables tab-completion on a BagObj,
which can be useful in an interpreter or IPython

==

numpy/lib/npyio.py
==================
c2d7845;Charles Harris;2014-11-18 12:53:54 -0500;Merge pull request #5281 from rgommers/f2py-deprecated-api
MAINT: change place where NPY_NO_DEPRECATED_API is defined in f2py.
==
==================
53a202b;Charles Harris;2014-11-18 12:34:13 -0500;Merge pull request #5264 from nils-werner/untranspose
Untranspose method
==
==================
8dd530b;Charles Harris;2014-11-18 12:33:05 -0500;Merge pull request #5284 from juliantaylor/doc-fix
DOC: fix documentation build removing single backticks
==
==================
1246dbc;Charles Harris;2014-11-18 11:41:24 -0500;Merge pull request #5288 from larsmans/glue-docs
DOC: Python as glue
==
==================
54bb07b;Chris Kerr;2014-11-17 20:30:04 +0100;DOC: Update the docs for the C API to reflect the change in return type of PyArray_ITEMSIZE

==

doc/source/reference/c-api.array.rst
==================
cd4c700;Julian Taylor;2014-11-17 19:34:58 +0100;DOC: sync 1.9.1 release notes
[ci skip]

==

doc/release/1.9.1-notes.rst
doc/source/release.rst
==================
de0eb86;Julian Taylor;2014-11-17 00:46:52 +0100;DOC: fix documentation build removing single backticks
using them around setup.py build causes a "error: option -b not
recognized" error from sphinx-build.
Replace them with * for italic.

==

doc/release/1.10.0-notes.rst
==================
5a78905;Julian Taylor;2014-11-17 19:15:57 +0100;Merge pull request #5283 from larsmans/divide-docs
DOC: core: np.divide differences between Py2/3
==
==================
06440c1;Julian Taylor;2014-11-17 19:14:46 +0100;Merge pull request #5282 from larsmans/c-fixes
MAINT: fft: cleanup in fftpack module
==
==================
33d8c1b;Lars Buitinck;2014-11-17 00:12:01 +0100;DOC: remove Weave recommendation
Weave is dead. It's not removed from SciPy yet, but it's deprecated and
doesn't work with Python 3.

==

doc/source/user/c-info.python-as-glue.rst
==================
6cfb0c6;Lars Buitinck;2014-11-17 00:19:59 +0100;DOC: python-as-glue: remove Instant, PyInline
Both projects appear to be dead.

==

doc/source/user/c-info.python-as-glue.rst
==================
1810b68;Lars Buitinck;2014-11-16 23:23:09 +0100;DOC: core: np.divide differences between Py2/3
Fixes gh-5278.

==

numpy/core/code_generators/ufunc_docstrings.py
==================
5af88f9;Lars Buitinck;2014-11-16 23:10:06 +0100;MAINT: fft: cleanup in fftpack module
* put string constants in const arrays
* use static functions were possible
* removed a stale comment
* more consistent whitespace

==

numpy/fft/fftpack_litemodule.c
==================
fff6dee;Ralf Gommers;2014-11-16 14:40:35 +0100;MAINT: change place where NPY_NO_DEPRECATED_API is defined in f2py.
This makes sure to undef at the end, and by putting the define in the
C code it ensures that the error message is understandable.

==

numpy/f2py/rules.py
numpy/f2py/src/fortranobject.c
numpy/f2py/src/fortranobject.h
==================
f14d5e1;Julian Taylor;2014-11-13 11:08:48 +0100;Merge pull request #4977 from sotte/mdot
ENH: add `mdot`: fast dot with multiple arguments.
==
==================
25aff4d;Charles Harris;2014-11-12 09:40:41 -0700;Merge pull request #5274 from chatcannon/fix-testing-cyclic-import
TST: Fix ImportError in runtests.py (fixes #5273)
==
==================
0f171d9;Chris Kerr;2014-11-11 10:40:46 +0000;TST: Fix ImportError in runtests.py (fixes #5273)
In numpy/testing/__init__.py, import Tester before importing numpy core

==

numpy/testing/__init__.py
==================
975267d;Charles Harris;2014-11-11 16:25:57 -0700;Merge pull request #5270 from chatcannon/f2py-remove-deprecated-api
Stop F2Py from using the deprecated numpy API 
==
==================
b36ecba;Charles Harris;2014-11-11 15:51:52 -0700;Merge pull request #5266 from chebee7i/multivariate_normal
Possible regression in `multivariate_normal()`
==
==================
265fbe1;Julian Taylor;2014-11-10 22:18:18 +0100;Merge pull request #5271 from matthew-brett/give-up-on-rackspace-wheels
MAINT: give up on rackspace wheels
==
==================
7d1ea60;Matthew Brett;2014-11-10 12:21:06 -0800;MAINT: give up on rackspace wheels
Rackspace wheels (from http://wheels.scikit-image.org) are giving
timeouts, again - e.g.:

https://travis-ci.org/numpy/numpy/jobs/40578751

Use Nathaniel's trick of not compiling Cython, for speed, and to work
round previous Cython build breakage.

==

.travis.yml
==================
fa30605;chebee7i;2014-11-10 13:27:38 -0600;Update docstring for multivariate_normal().
The change is to make a stronger statement that the covariance matrix must
be positive-semidefinite and that if it is not, then the results are not
guaranteed across NumPy versions.

==

numpy/random/mtrand/mtrand.pyx
==================
6656d04;Chris Kerr;2014-11-10 15:58:47 +0000;DEP: #declaring NPY_NO_DEPRECATED_API in fortranobject.h

==

numpy/f2py/src/fortranobject.h
==================
6693460;Chris Kerr;2014-11-10 15:58:22 +0000;DEP: removed deprecated API calls from test code (wrapmodule.c)

==

numpy/f2py/tests/src/array_from_pyobj/wrapmodule.c
==================
7b60731;Chris Kerr;2014-11-10 15:49:14 +0000;DEP: Replace NPY_CONTIGUOUS with NPY_ARRAY_C_CONTIGUOUS

==

numpy/f2py/cfuncs.py
numpy/f2py/src/fortranobject.h
==================
5f321b4;Chris Kerr;2014-11-10 15:40:47 +0000;DEP: Corrected some type errors that appear when enabling NPY_NO_DEPRECATED_API

==

numpy/f2py/src/fortranobject.c
==================
347c614;Chris Kerr;2014-11-10 15:33:00 +0000;DEP: Replaced NPY_[F,C]ARRAY with NPY_ARRAY_[F,C]ARRAY

==

numpy/f2py/cb_rules.py
numpy/f2py/src/fortranobject.c
==================
64d4fa5;Chris Kerr;2014-11-10 15:24:26 +0000;DEP: Using the internal PyArrayObject_fields API for the swap_arrays and dump_attrs functions

==

numpy/f2py/src/fortranobject.c
==================
fd12653;Chris Kerr;2014-11-10 15:19:34 +0000;DEP: Using PyArray_SIZE and PyArray_TYPE instead of PyArray_DESCR()->elsize etc

==

numpy/f2py/cfuncs.py
==================
eb27fc3;Chris Kerr;2014-11-10 15:01:41 +0000;DEP: Replaced arr->descr, arr->flags and arr->base with the PyArray_* functions

==

numpy/f2py/cfuncs.py
numpy/f2py/rules.py
numpy/f2py/src/fortranobject.c
numpy/f2py/src/fortranobject.h
==================
c5f0d72;Chris Kerr;2014-11-10 14:45:15 +0000;DEP: replaced arr->dimensions with PyArray_DIMS(arr) or PyArray_DIM(arr,i)

==

numpy/f2py/cfuncs.py
numpy/f2py/rules.py
numpy/f2py/src/fortranobject.c
==================
2129f5c;Chris Kerr;2014-11-10 14:18:37 +0000;DEP: replaced arr->data with PyArray_DATA

==

numpy/f2py/cb_rules.py
numpy/f2py/cfuncs.py
numpy/f2py/rules.py
numpy/f2py/src/fortranobject.c
==================
c5463e8;Chris Kerr;2014-11-10 13:59:44 +0000;DEP: replaced arr->nd with PyArray_NDIM in C code generation scripts

==

numpy/f2py/cfuncs.py
numpy/f2py/rules.py
==================
e2e6bd8;Chris Kerr;2014-11-10 13:52:03 +0000;DEP: Replaced arr->nd with PyArray_NDIM in fortranobject.c

==

numpy/f2py/src/fortranobject.c
==================
1b12c39;Stefan Otte;2014-08-20 11:40:02 +0200;ENH: add `multi_dot`: dot with multiple arguments.
`np.linalg.multi_dot` computes the dot product of two or more arrays in
a single function call, while automatically selecting the fastest evaluation
order.

The algorithm for selecting the fastest evaluation order uses dynamic
programming and closely follows:

    Cormen, "Introduction to Algorithms", Chapter 15.2, p. 370-378

==

doc/release/1.10.0-notes.rst
numpy/linalg/linalg.py
numpy/linalg/tests/test_linalg.py
==================
9671491;Julian Taylor;2014-11-09 17:04:38 +0100;Merge pull request #5265 from matthew-brett/rackspace-cython
MAINT: use scikit-image wheels collection
==
==================
c12820f;Matthew Brett;2014-11-07 19:18:34 -0800;MAINT: add --no-cython-compile flag for Cython
Add flag to prevent Cython compiling itself.  This speeds Cython
installation and doesn't much slow down pyx file building.

From suggestion by Nathaniel.

==

.travis.yml
==================
1cad7f8;Glen Mabey;2014-11-07 20:43:04 -0600;ENH: added std::complex support to numpy.i
numpy.i now includes ready-made typemaps for std::complex<float>
and std::complex<double> .  Tests were added to testArray using
a newly defined ArrayZ class.

==

tools/swig/numpy.i
tools/swig/test/Array.i
tools/swig/test/ArrayZ.cxx
tools/swig/test/ArrayZ.h
tools/swig/test/Makefile
tools/swig/test/setup.py
tools/swig/test/testArray.py
==================
7b1f8e2;Nils Werner;2014-11-07 23:09:30 +0100;Mention transport argsort for inverting the transposition

==

numpy/core/fromnumeric.py
==================
df33cd8;Matthew Brett;2014-11-07 11:08:19 -0800;MAINT: use scikit-image wheels collection
An attempt to address Cython build failures.

==

.travis.yml
==================
cfa095a;Charles Harris;2014-11-02 09:03:44 -0800;Merge pull request #5257 from juliantaylor/py3-header-fix
BUG: fix header using symbols not available in py3
==
==================
f7c0e78;Julian Taylor;2014-11-02 16:55:40 +0100;BUG: fix header using symbols not available in py3
Inside numpy we handle this via the py3kcompat header which is not
really public api. So for our public headers we need some explicit
checks.

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/multiarray/multiarray_tests.c.src
numpy/core/tests/test_multiarray.py
==================
066be28;Julian Taylor;2014-11-02 15:09:55 +0100;Merge pull request #5161 from juliantaylor/parallel-distutils
ENH: support parallel compilation of extensions
==
==================
0d30aef;Charles Harris;2014-10-31 14:19:28 -0700;Merge pull request #5251 from embray/astropy-3052
Issue with fromarrays not using correct format for unicode arrays
==
==================
b89849b;Erik M. Bray;2014-10-31 11:05:13 -0400;Fix issue with fromarrays not correctly determining a format string for unicode data (in the process eliminate some unnecessary cruft)

==

numpy/core/records.py
numpy/core/tests/test_records.py
==================
c63e1f4;Charles Harris;2014-10-29 09:52:35 -0700;Merge pull request #5245 from argriffing/deprecate-pkgload
DEP: deprecate pkgload
==
==================
4638475;alex;2014-10-29 09:52:42 -0400;MAINT: warn instead of raise

==

numpy/_import_tools.py
==================
7419906;alex;2014-10-28 23:20:52 -0400;DEP: deprecate pkgload

==

doc/release/1.10.0-notes.rst
numpy/_import_tools.py
==================
3b22d87;Charles Harris;2014-10-28 16:11:35 -0700;Merge pull request #5242 from juliantaylor/fix-ufunc-subok-out
BUG: fix not returning out array from ufuncs with subok=False set
==
==================
b40e686;Julian Taylor;2014-10-28 21:33:22 +0100;BUG: fix not returning out array from ufuncs with subok=False set
closes gh-5240

==

numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_numeric.py
numpy/core/tests/test_umath.py
numpy/ma/core.py
==================
461bf42;Julian Taylor;2014-10-14 01:09:15 +0200;DOC: update installation instructions

==

INSTALL.txt
==================
23d5461;Julian Taylor;2014-10-08 20:23:32 +0200;ENH: support parallel compilation of extensions
Allow extensions using numpy.distutils to compile in parallel.
By passing `--jobs=n` or `-j n` to `setup.py build` the compilation of
extensions is now performed in `n` parallel processes.
Additionally the environment variable NPY_NUM_BUILD_JOBS is used as
the default value, if its unset the default is serial compilation.

The parallelization is limited to within the files of an extension, so
only numpy multiarraymodule really profits but its still a nice
improvement when you have 2-4 cores.
Unfortunately Cython will not profit at all as it tends to build one
module per file.

==

doc/release/1.10.0-notes.rst
numpy/distutils/ccompiler.py
numpy/distutils/command/build.py
numpy/distutils/command/build_clib.py
numpy/distutils/command/build_ext.py
numpy/distutils/misc_util.py
tools/travis-test.sh
==================
7be18ed;Julian Taylor;2014-10-27 20:30:19 +0100;Merge pull request #5214 from mkowoods/np.average
Update to average calculation

==
==================
3d5f499;Malik Woods;2014-10-21 15:24:50 -0700;BUG: upcast weights to average result type to avoid inaccuracies
closes gh-5202

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
1657544;Charles Harris;2014-10-27 12:07:48 -0700;Merge pull request #5077 from jaimefrio/gufuncs_core_dim_no_broadcast
WIP: gufunc core dimensions should not broadcast
==
==================
23ee379;Charles Harris;2014-10-27 09:13:22 -0700;Merge pull request #5238 from yuvallanger/patch-1
Replacing list with generator compherension
==
==================
304d9b6;Yuval Langer;2014-10-27 17:11:42 +0200;Replacing list with generator compherension

==

numpy/core/records.py
==================
256d256;Charles Harris;2014-10-26 09:09:31 -0700;Merge pull request #5086 from mdboom/stride-fix
Fix how strides is set on Py_buffer object when the array is C-contiguous
==
==================
fb40fe8;Julian Taylor;2014-10-26 13:02:26 +0100;Merge pull request #5233 from juliantaylor/off_t-fix
BUG: fix build in c99 mode
==
==================
76fc3e7;Julian Taylor;2014-10-26 12:18:23 +0100;BUG: fix build in c99 mode
The definition of off_t is located in sys/types.h and is not pulled
by other files when compiling in c99 mode instead of the default gnu89.
Closes gh-5231

==

numpy/core/include/numpy/npy_common.h
==================
fe7816d;Julian Taylor;2014-10-24 23:45:04 +0200;Merge pull request #5216 from charris/cleanup-gh-5132
BUG: Make PyArray_PutTo respect writeable flag.
==
==================
280f605;Charles Harris;2014-10-24 12:21:42 -0700;Merge pull request #5225 from juliantaylor/datetime-arange-crash
BUG: fix crash when using arange on datetime without dtype set
==
==================
0332a2d;Julian Taylor;2014-10-23 22:12:14 +0200;BUG: fix crash when using arange on datetime without dtype set

==

numpy/core/src/multiarray/datetime.c
numpy/core/tests/test_datetime.py
==================
f107a98;Joel Nothman;2014-10-22 11:33:33 +1100;DOC note the effect of #1866 in byteorder discussion

==

numpy/doc/byteswapping.py
==================
b1f8bcf;Charles Harris;2014-10-21 18:09:27 -0600;TST: Add some tests for ndarray.put.

==

numpy/core/tests/test_multiarray.py
==================
892c469;Jarl Haggerty;2014-09-27 16:08:15 -0400;BUG: Make PyArray_PutTo respect writeable flag.
Closes #4465.

==

numpy/core/src/multiarray/item_selection.c
==================
0625671;Julian Taylor;2014-10-21 22:09:31 +0200;Merge pull request #5204 from RobberPhex/master
fixed #4896 (fails to build with MSVC 2013)

==
==================
a4e68f4;RobberPhex;2014-10-18 10:11:06 +0800;BUG: fix build error with MSVC 2013 caused by C99 complex support
closes gh-4896

==

numpy/core/src/npymath/npy_math_complex.c.src
numpy/core/src/npymath/npy_math_private.h
==================
0e091af;Julian Taylor;2014-10-21 22:04:21 +0200;Merge pull request #5212 from charris/fix-long-long-fmt
BUG: Use 'll' as the default length specifier for long long.
==
==================
a435de3;Charles Harris;2014-10-21 11:07:19 -0600;Merge pull request #5207 from juliantaylor/msvc-fix
MSVC fixes
==
==================
72e9072;Charles Harris;2014-10-21 09:24:36 -0600;Merge pull request #5203 from njsmith/master
BUG: copy inherited masks in MaskedArray.__array_finalize__
==
==================
0ddb8e3;Charles Harris;2014-10-21 09:09:56 -0600;BUG: Use 'll' as the default length specifier for long long.
The previous default was 'L', which seems gcc specific, whereas
'll' is the now recognized standard and is also accepted by gcc.

Closes #5027.

==

numpy/core/include/numpy/npy_common.h
==================
528bac1;jaimefrio;2014-10-20 22:43:35 -0700;DOC: Stricter checks for gufunc signatures
Documented the the new behavior in c-api.generalized-ufuncs.rst.

Added PyUFunc_FromFuncAndDataAndSignature to c-api.ufunc.rst.

==

doc/release/1.10.0-notes.rst
doc/source/reference/c-api.generalized-ufuncs.rst
doc/source/reference/c-api.ufunc.rst
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/umath_tests.c.src
numpy/core/tests/test_ufunc.py
==================
3205c89;Nathaniel J. Smith;2014-10-18 03:07:43 +0100;BUG: copy inherited masks in MaskedArray.__array_finalize__
Previously, operations which created a new masked array from an old
masked array -- e.g., np.empty_like -- would tend to result in the new
and old arrays sharing the same .mask attribute. This leads to
horrible brokenness in which writes to one array affect the other. In
particular this was responsible for part of the brokenness that
@jenshnielsen reported in gh-5184 in which np.gradient on masked
arrays would modify the original array's mask.

This fixes the worst part of the issues addressed in gh-3404, though
there's still an argument that we ought to deprecate the mask-copying
behaviour entirely so that empty_like returns an array with an empty
mask. That can wait until we find someone who cares though.

I also applied a small speedup to np.gradient (avoiding one copy);
previously this inefficiency was masking (heh) some of the problems
with masked arrays, so removing it is both an optimization and makes
it easier to test that things are working now.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
4ed4aec;Jaime;2014-10-20 14:52:21 -0700;Merge pull request #5210 from ewmoore/norm_doc
MAINT: more informative error message from linalg.norm
==
==================
7d1cb08;Michael Droettboom;2014-10-20 17:25:13 -0400;Add additional testing

==

numpy/core/tests/test_multiarray.py
==================
270ae2c;Eric Moore;2014-10-20 14:06:50 -0400;MAINT: Give a more helpful error for bad axis specifications.
This specifically addresses passing things like axis=[0,1] which
gave an error message that an int was required.  The real error
was that if the axis isn't None or a tuple, it was simply wraped
in a tuple, so the ufunc that is eventually called ended up with
a list.  The error message is matches that in
core/src/multiarray/conversion_utils.c::PyArray_ConvertMultiAxis.

==

numpy/linalg/linalg.py
==================
96ef52e;Julian Taylor;2014-10-19 14:50:21 +0200;BUG: don't set invalid flag in cbrt fallback
cbrt does not set the invalid flag on nan input as all inputs are valid.
Fix the fallback to behave the same.

==

numpy/core/src/npymath/npy_math.c.src
==================
d90c6e0;Julian Taylor;2014-10-19 14:32:51 +0200;BUG: fix undefined ldexpl and frexpl with msvc
The functions are macros in msvc which we undefine and redeclare in
npy_math. Since we now generate the ldexpl and frexpl ufuncs in gh-4852
this was broken by the extra logic for them in npy_config.h

==

numpy/core/src/private/npy_config.h
==================
df9db6e;Jaime;2014-10-18 22:55:21 -0700;Merge pull request #5206 from WarrenWeckesser/typo
MAINT: Fix typo in the 'issubclass' docstring.
==
==================
6114f1c;Warren Weckesser;2014-10-19 01:35:47 -0400;MAINT: Fix typo in the 'issubclass' docstring.

==

numpy/core/numerictypes.py
==================
7b3809b;Jaime;2014-10-17 10:39:24 -0700;Merge pull request #5146 from cimarronm/fromnumeric_axis_tuples_doc
Updated function docstrings for tuples in axis
==
==================
c9d6153;Charles Harris;2014-10-17 09:52:27 -0600;Merge pull request #5196 from ewmoore/norm_keepdims
Add keepdims to linalg.norm
==
==================
6f88eea;Eric Moore;2014-10-16 12:01:46 -0400;MAINT: Stop repeatedly running duplicate tests.     These three tests don't make use of the infrastructre in     _TestNorm. This means they are identical tests when run     as part of TestNorm(Double,Single,Int64). Once is enough.

==

numpy/linalg/tests/test_linalg.py
==================
9b152aa;Eric Moore;2014-10-16 11:59:03 -0400;ENH: Add keepdims to linalg.norm

==

numpy/linalg/linalg.py
numpy/linalg/tests/test_linalg.py
==================
5505dc9;Jaime;2014-10-17 06:51:30 -0700;Merge pull request #5117 from saullocastro/interp_with_period
ENH: added parameter to use periodic x-coordinates
==
==================
498b84a;saullogiovani;2014-10-17 08:14:52 +0200;ENH: added parameter to use periodic x-coordinates

==

doc/release/1.10.0-notes.rst
==================
673ca72;saullogiovani;2014-10-17 07:59:03 +0200;Merge branch 'master' of https://github.com/numpy/numpy into interp_with_period

==
==================
39aaa43;Cimarron Mittelsteadt;2014-10-16 20:22:39 -0700;DOC: Update axis documentation for tuple of ints to be consistent between functions

==

numpy/core/fromnumeric.py
==================
f6c5611;Charles Harris;2014-10-16 13:16:30 -0600;Merge pull request #5190 from juliantaylor/lto-support
BLD: try linking a file if compile long double repr detection fails
==
==================
443a49a;Charles Harris;2014-10-16 11:29:07 -0600;Merge pull request #5182 from juliantaylor/nanmedian-inf
BUG: fix nanmedian on arrays containing inf
==
==================
4c0747d;Charles Harris;2014-10-16 11:17:26 -0600;Merge pull request #5186 from pseudocubic/gradient-boundary-order-keyword
BUG: Fixes #5184 gradient calculation behavior at boundaries
==
==================
8969da5;David M Fobes;2014-10-14 13:09:58 -0400;BUG: Fixes #5184 gradient calculation behavior at boundaries
* Previous expected behavior was that the gradient is computed using central
  differences in the interior and first differences at the boundaries.

* gradient was updated in v1.9.0 so that second-order accurate calculations are
  done at the boundaries, but this breaks expected behavior with old code, so
  `edge_order` keyword (Default: 1) is added to specify whether first or second
  order calculations at the boundaries should be used.

* Since the second argument is *varargs, in order to maintain compatibility
  with old code and compatibility with python 2.6 & 2.7, **kwargs is used, and
  all kwargs that are not `edge_order` raise an error, listing the offending
  kwargs.

* Tests and documentation updated to reflect this change.

* Added `.. versionadded:: 1.9.1` to the new optional kwarg `edge_order`
  documentation, and specified supported `edge_order` kwarg values.

* Clarified documentation for `varargs`.

* Made indentation in docstring consistent with other docstring styles.

* Examples corrected

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
140c505;jaimefrio;2014-10-15 23:16:51 -0700;TST: Stricter checks for gufunc signatures
Added euclidean_pdist to umath/umath_tests.c.src.

Modified tests to reflect new, stricter gufunc signature behavior.

==

numpy/core/src/umath/umath_tests.c.src
numpy/core/tests/test_ufunc.py
==================
3a82763;jaimefrio;2014-10-15 17:41:59 -0700;BUG: Stricter checks for gufunc signatures
* Arguments, both input and output, must have at least as many
  dimensions as the corresponding number of core dimensions. In
  previous versions, 1's were prepended to the shape as needed.
* Core dimensions with same labels must have exactly matching
  sizes. In previous versions, core dimensions of size 1 would
  broadcast against other core dimensions with the same label.
* All core dimensions must have their size specified by a passed
  in input or output argument. In previous versions, core
  dimensions in an output argument that were not specified in an
  input argument, and whose size could not be inferred from a
  passed in output argument, would have their size set to 1.

==

numpy/core/src/umath/ufunc_object.c
==================
51f0976;Julian Taylor;2014-10-16 01:50:24 +0200;Merge pull request #5192 from charris/deprecate-safeeval-class
Deprecate SafeEval class
==
==================
c2c7051;Charles Harris;2014-10-15 16:29:23 -0600;DEP: Deprecate SafeEval class.
The class is no longer used in numpy and was never exported.

==

doc/release/1.10.0-notes.rst
numpy/lib/utils.py
==================
7276551;Charles Harris;2014-10-12 09:45:20 -0600;MAINT: Use ast.literal_eval in safe_eval.
This does what is needed now that the compiler module is no longer
used.

==

numpy/lib/utils.py
==================
35fad05;Julian Taylor;2014-10-15 23:48:10 +0200;Merge pull request #5177 from charris/do-not-use-compiler-module
MAINT: Remove use of compiler module.
==
==================
50ff7da;Charles Harris;2014-10-15 15:42:36 -0600;Merge pull request #5191 from juliantaylor/config-maint
size and version check maintenance
==
==================
03f0aeb;Julian Taylor;2014-10-15 23:12:20 +0200;MAINT: remove obsolete version checks
minimum requirement is python2.6, this allows removing a couple 2.3 and
2.4 checks.

==

numpy/core/bscript
numpy/core/setup.py
numpy/core/tests/test_dtype.py
numpy/core/tests/test_nditer.py
numpy/distutils/command/build_ext.py
numpy/f2py/setup.py
numpy/testing/utils.py
==================
aa8a243;Julian Taylor;2014-10-15 22:56:28 +0200;BLD: fix expected size argument for complex types
The caller was passing a list of lists instead of a list with its
entries doubled. Removes the binary type search for most if not all
platforms.

==

numpy/core/setup.py
==================
89d627e;Julian Taylor;2014-10-15 22:56:20 +0200;BLD: change expected type sizes to 64 bit
64 bit is more common these days, so switch the expected type sizes to
values common on this platform. This removes a few compile tests. The
expected sizes are just hints and do not have to be correct.

==

numpy/core/setup.py
==================
a356a10;Julian Taylor;2014-10-15 22:13:20 +0200;BLD: try linking a file if compile long double repr detection fails
When compiler uses link time optimization it will not emit the binary
representation of the long double during linking. This prevents building
numpy with -flto.
To avoid this try linking the object when the compile detection failed.
With this change numpy can be built with link time optimization with 4 worker
processes using following command:

CC='gcc -fno-fat-lto-objects -flto=4 -fuse-linker-plugin -O3' \
LDSHARED='gcc -fno-fat-lto-objects -flto=4 -fuse-linker-plugin -shared
-O3' AR=gcc-ar \
python setup.py build_ext

See also:
https://www.mail-archive.com/numpy-discussion@scipy.org/msg45535.html

Should also work with icc's -ipo switch (probably closes gh-4992)

==

numpy/core/setup_common.py
==================
e2218a6;Julian Taylor;2014-10-15 20:54:32 +0200;Merge pull request #5183 from charris/fix-npy-header-write
BUG: Fix writing of intrinsic long integers in python2 npy files.
==
==================
fd06081;Nathaniel J. Smith;2014-10-15 17:05:19 +0100;Merge pull request #5189 from cbrueffer/setops
Add examples for intersect1d and union1d of more than two arrays.
==
==================
657c8b9;Christian Brueffer;2014-10-15 17:54:50 +0200;Add examples for intersect1d and union1d of more than two arrays.
The approach was suggested by Jaime Frio in issue #5179.

==

numpy/lib/arraysetops.py
==================
2f1e276;Julian Taylor;2014-10-13 22:45:03 +0200;BUG: fix nanmedian on arrays containing inf
There are two issues:
A masked divide of an infinite value is a masked value which means one
can't use np.ma.mean to compute the median as infinity division is well
defined.
This behaviour seems wrong to me but it also looks intentional so
changing it is not appropriate for a bugfix release.

The second issue is that the ordering of the sorted masked array is
undefined for equal values, the sorting considers infinity the largest
floating point value which is not correct in respect to sorting where
nan is considered larger. This is fixed by changing the
minimum_fill_value to nan for float data in the masked sorts.

Closes gh-5138

==

numpy/lib/tests/test_nanfunctions.py
numpy/ma/core.py
numpy/ma/extras.py
numpy/ma/tests/test_extras.py
==================
a8e027f;Charles Harris;2014-10-13 18:33:02 -0600;BUG: Fix writing of intrinsic long integers in python2 npy files.
This only happens when C long is smaller than npy_intp, in particular,
on 64 bit windows. The 'L' suffix is not needed as long as safe_eval
is used to recover the values, and the long intrinsic causes problems
for python3.

The python3 read side has been fixed, but we might as well fix the
problem at the root as well.

==

numpy/lib/format.py
==================
2f17863;Julian Taylor;2014-10-13 20:12:38 +0200;Merge pull request #5178 from charris/fix-npz-header-incompatibility
Fix npz header incompatibility
==
==================
8b1f90a;Charles Harris;2014-10-12 13:40:16 -0600;TST: Add tests for Python2, Python3 *.npy compatibility.

==

.gitattributes
numpy/lib/tests/data/python3.npy
numpy/lib/tests/data/win64python2.npy
numpy/lib/tests/test_format.py
==================
8f068b7;Charles Harris;2014-10-12 13:01:57 -0600;BUG: Make python2 *.npy files readable in python3.
The Python2 generated file had long integer literals like '1L' that
broke in Python3. The fix here is to filter out the 'L' and let
safe_eval take care of the integer type in converting the string.

The fix here comes from Nathaniel Smith with a few added fixups.

Closes #5170.

==

numpy/lib/format.py
==================
2ba94e7;Julian Taylor;2014-10-12 18:20:29 +0200;Merge pull request #5176 from larsmans/memmap-doc
DOC: core: contents of newly allocated space in memmap
==
==================
ade76b0;Lars Buitinck;2014-10-12 17:04:01 +0200;DOC: core: contents of newly allocated space in memmap
Fixes #5157.

==

numpy/core/memmap.py
==================
9917a12;Charles Harris;2014-10-12 09:45:20 -0600;MAINT: Remove use of compiler module.
The ast module was added in Python 2.6 as a replacement for the compiler
module. As we no longer support Python versions < 2.6, all uses of the
compiler module can be removed.

==

numpy/lib/utils.py
==================
4c4595b;Charles Harris;2014-10-12 08:32:42 -0600;Merge pull request #5175 from larsmans/c-fixes
MAINT: core: string constants in static buffers
==
==================
8b17fae;Lars Buitinck;2014-10-12 15:58:26 +0200;MAINT: core: string constants in static buffers
Saves copying them into temporary buffers.

==

numpy/core/src/multiarray/multiarraymodule.c
==================
9636420;Charles Harris;2014-10-11 11:18:38 -0600;Merge pull request #5144 from juliantaylor/int-vectorize
ENH: allow auto vectorization of integer loops
==
==================
2e1ff06;Julian Taylor;2014-10-02 22:07:48 +0200;ENH: allow auto vectorization of integer loops
Generalize the loop specializations with two new macros UNARY_LOOP_FAST
and BINARY_LOOP_FAST and apply it to more integer loops.
Same also gh-4561 which did this for integer boolean operations.

==

numpy/core/src/umath/loops.c.src
numpy/core/tests/test_umath.py
==================
8e113c9;Charles Harris;2014-10-10 12:56:23 -0600;Merge pull request #5169 from juliantaylor/pyobjcopy-simplification
MAINT: replace bytewise copy with memcpy
==
==================
d6278bd;Julian Taylor;2014-10-10 19:53:03 +0200;MAINT: replace bytewise copy with memcpy
memcpy takes care of unaligned memory and is inlined by the compiler,
there is no need for own code.

==

numpy/core/include/numpy/npy_cpu.h
==================
6457686;Charles Harris;2014-10-10 10:18:03 -0600;Merge pull request #5168 from charris/f2py-space-fix
BUG: Make f2py work with intent(in out).
==
==================
d6d6795;Charles Harris;2014-10-10 10:16:30 -0600;Merge pull request #5154 from charris/improve-gauss-hermite
Improve gauss hermite
==
==================
7eff5b8;Charles Harris;2014-10-10 10:15:38 -0600;Merge pull request #5167 from juliantaylor/rh5-miscompile
BUG: remove static from function
==
==================
e98686d;Charles Harris;2014-10-09 19:35:18 -0600;TST: Add basic test for compiling with intent(in out).
This checks that the compilation works and that the expected error
is raised when non-contiguous arrays are passed as intent(in out).

==

numpy/f2py/tests/src/regression/inout.f90
numpy/f2py/tests/test_regression.py
==================
1d6ef52;Charles Harris;2014-10-09 15:03:25 -0600;BUG: Make f2py work with intent(in out).
Note that Fortran ignores spaces in this case, so that 'in out' is
treated as 'inout'.

Closes #479.

==

numpy/f2py/crackfortran.py
==================
017969b;Julian Taylor;2014-10-09 19:15:13 +0200;BUG: remove static from function to avoid gcc-4.1 miscompile
gcc 4.1.2 (e.g. in red hat 5) will miscompile the function when
inlining. Without static it will not inline solving the issue.
Closes gh-5163

==

numpy/core/src/multiarray/arraytypes.c.src
==================
261de3f;Julian Taylor;2014-10-08 22:22:18 +0200;MAINT: merge scalarmathmodule into umath module
There is no good reason it needs to be its own module.
Also removes the undocumented pymath alter/restore functions.

==

numpy/core/__init__.py
numpy/core/bento.info
numpy/core/bscript
numpy/core/setup.py
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/nditer_api.c
numpy/core/src/multiarray/nditer_constr.c
numpy/core/src/multiarray/templ_common.h.src
numpy/core/src/private/scalarmathmodule.h.src
numpy/core/src/private/templ_common.h.src
numpy/core/src/scalarmathmodule.c.src
numpy/core/src/umath/scalarmath.c.src
numpy/core/src/umath/umathmodule.c
numpy/core/src/umath/umathmodule_onefile.c
==================
e6e2bb0;Julian Taylor;2014-10-08 19:43:16 +0200;Merge pull request #5160 from bdkearns/master
fix intention of loop in test_copyto_permut
==
==================
ee7ca7d;Brian Kearns;2014-10-08 01:46:57 -0400;fix intention of loop in test_copyto_permut

==

numpy/core/tests/test_api.py
==================
7d1a3cf;Julian Taylor;2014-10-05 01:04:26 +0200;Merge pull request #5152 from tovrstra/collapsingbug
fixed #5147 collapsingbug in einsum

==
==================
8615d5e;Toon Verstraelen;2014-10-04 15:54:09 -0400;BUG: fixed #5147 collapsingbug in einsum

==

numpy/core/src/multiarray/einsum.c.src
numpy/core/tests/test_einsum.py
==================
dc00206;Charles Harris;2014-10-04 15:47:34 -0600;MAINT: Improve computation of gauss weights for hermite and hermite_e.
The new computations use normalized polynomials. Those polynomials are
less subject to overflow and allow the determination of the weights and
roots up to about degree 350, at which point the weights underflow.

Two private functions are added for computing the values of the
normalized polynomials:

1. _normed_hermite_n
2. _normed_hermite_e_n

==

numpy/polynomial/hermite.py
numpy/polynomial/hermite_e.py
==================
0650d04;Charles Harris;2014-10-04 12:37:11 -0600;MAINT: Improve computation of scaled companion matrices.
The previous method used for hermite and hermite_e polynomials suffered
from double overflow for polynomials of large degree. Those numbers were
later scaled down by equally large numbers, but the result was NaN. The
wanted values are now computed in such a way that overflow in some
entries is replaced by underflow in others. The resulting zeros are a
negligible perturbation of the companion matrix.

==

numpy/polynomial/hermite.py
numpy/polynomial/hermite_e.py
==================
cd0b8e7;Julian Taylor;2014-10-04 20:31:30 +0200;Merge pull request #5149 from charris/fix-ma-docs-for-OO-option
BUG: Make numpy import when run with Python flag '-OO

==
==================
43ca904;Charles Harris;2014-10-03 21:10:45 -0600;TST: Add test with python flag -OO.

==

.travis.yml
tools/travis-test.sh
==================
dc45391;Charles Harris;2014-10-03 20:03:31 -0600;BUG: Make numpy import when run with Python flag '-OO'.
This consists of checking for a docstring equal to None and skipping two
tests that require docstrings.

Closes #5148.

==

numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_utils.py
numpy/ma/extras.py
==================
aaa8940;Cimarron Mittelsteadt;2014-10-02 17:24:24 -0700;DOC: Updated from numeric doc to indicate where axis can also be a tuple of ints, i.e. axes, over which to perform the given operation

==

numpy/core/fromnumeric.py
==================
58350f4;Charles Harris;2014-10-02 09:34:26 -0600;Merge pull request #5135 from juliantaylor/correlate-improve
ENH: unroll correlate loops
==
==================
48ee0b2;saullogiovani;2014-10-02 08:59:20 +0200;ENH: added parameter to use periodic x-coordinates

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
fa14ae0;Julian Taylor;2014-09-30 19:20:39 +0200;Merge pull request #5140 from pyhits/5136
BUG: ImportError: No module named thread

==
==================
7fc3227;Ulrich Seidl;2014-09-30 09:30:56 +0200;BUG: ImportError: No module named thread
Fixes #5136. Import dummy_threading if importing threading fails.

==

numpy/random/mtrand/mtrand.pyx
==================
73d87a7;Julian Taylor;2014-09-30 09:33:39 +0200;Merge pull request #5139 from juliantaylor/restrict-fix
BUG: fix restrict check
==
==================
b58f130;Julian Taylor;2014-09-30 09:17:33 +0200;BUG: fix restrict check
If the compiler does not support the keyword the macro must still exist.

==

numpy/core/setup.py
==================
8cdc5f5;Charles Harris;2014-09-29 21:34:22 -0600;Merge pull request #5101 from jaimefrio/digitize_as_searchsorted
ENH: implement `digitize` with `PyArray_SearchSorted`
==
==================
f401e7f;Charles Harris;2014-09-29 20:50:06 -0600;Merge pull request #5092 from jaimefrio/bmat_ldict_gdict
DOC: document `ldict` and `gdict` in `bmat`, closes #5058
==
==================
6a4aa59;Charles Harris;2014-09-29 20:24:30 -0600;Merge pull request #5124 from larsmans/c-fixes
FIX: core: remove sprintf calls
==
==================
5eb6e36;Jaime;2014-09-29 17:53:31 -0700;Merge pull request #5137 from juliantaylor/restrict
BLD: add check for C99 restrict keyword
==
==================
5478aaf;Julian Taylor;2014-09-29 23:03:18 +0200;BLD: add check for C99 restrict keyword
Define it as NPY_RESTRICT
Restrict indicates a memory block does not alias, gcc supports it in c89
with the __restrict__ keyword.

==

numpy/core/setup.py
numpy/distutils/command/autodist.py
numpy/distutils/command/config.py
==================
d3470b7;Julian Taylor;2014-09-29 19:22:43 +0200;ENH: unroll correlate loops
Unrolling the inner loop ensures the kernel is placed into registers and
reused, this almost doubles performance.
Also move the function to arraytypes.c.src where also our dot product is
placed.
The templ_common.h might still be useful in future so its kept.

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/arraytypes.h
numpy/core/src/multiarray/templ_common.h.src
==================
8521e28;Julian Taylor;2014-09-29 19:21:52 +0200;Merge pull request #5131 from frutiger/random_uniform_throw_on_outofrange
ENH: Throws if range is too large for 'random.uniform'
==
==================
e065a26;Charles Harris;2014-09-28 20:32:30 -0600;Merge pull request #5125 from larsmans/f2py-sprintf
MAINT: f2py: rewrite fortran_doc
==
==================
b356ef0;Lars Buitinck;2014-09-27 16:40:24 +0200;MAINT: f2py: rewrite fortran_doc
Should not use sprintf, and certainly not with incorrect error checking
(gh-5044). Entirely rewritten for readability.

Also replaced a few sprintf calls that were just copying strings without
interpretation by the simpler and possibly faster strcpy/strcat.
(These need to be replaced by something more sensible.)

==

numpy/f2py/src/fortranobject.c
==================
74ae35d;Masud Rahman;2014-09-27 15:28:05 -0400;Throws if range is too large for 'random.uniform'
This fixes issue #2138 by checking that the range (i.e. high - low) is finite
before invoking `rk_uniform`.

A test case was added to ensure valid ranges do not throw, but invalid ranges
do.

==

numpy/random/mtrand/mtrand.pyx
numpy/random/tests/test_random.py
==================
bfc4bf4;Lars Buitinck;2014-09-27 13:12:44 +0200;FIX: core: unchecked realloc
Also changed types to Py_ssize_t, and check for overflow when multiplying.

==

numpy/core/src/multiarray/arrayobject.c
==================
c73fce0;Lars Buitinck;2014-09-27 11:57:49 +0200;MAINT: core: simplify array_repr_builtin (don't use sprintf)

==

numpy/core/src/multiarray/arrayobject.c
==================
297aed3;Lars Buitinck;2014-09-27 11:26:46 +0200;FIX: core: remove sprintf calls
This changes the behavior of ufunc_repr to no longer truncate its arg's
name. I guess the truncation was only there to make the function work
with sprintf, and if I read http://bugs.python.org/issue7330 correctly,
then truncation wouldn't work in 3.2 <= Python <= 3.4.

==

numpy/core/src/umath/ufunc_object.c
==================
22ae193;seberg;2014-09-26 18:42:33 +0200;Merge pull request #4622 from mhvk/lib/stride_tricks/subclasses
ENH: add subok flag to stride_tricks (and thus broadcast_arrays)
==
==================
a7802ce;Michael Droettboom;2014-09-26 10:18:57 -0400;When requesting Fortan order, don't return C order.

==

numpy/core/src/multiarray/buffer.c
==================
0730abe;jaimefrio;2014-09-25 18:32:18 -0700;DOC: reorganize `digitize` docstring

==

numpy/add_newdocs.py
==================
7dc79a7;jaimefrio;2014-09-25 00:10:02 -0700;ENH: Release GIL in `digitize`

==

numpy/lib/src/_compiled_base.c
==================
ed9345f;jaimefrio;2014-09-24 23:52:07 -0700;DOC: document improvements to `np.digitize`

==

doc/release/1.10.0-notes.rst
numpy/add_newdocs.py
==================
e3e82e5;jaimefrio;2014-09-22 22:53:12 -0700;ENH: implement `digitize` with `PyArray_SearchSorted`

==

numpy/add_newdocs.py
numpy/lib/src/_compiled_base.c
==================
befb246;Charles Harris;2014-09-25 17:51:09 -0600;Merge pull request #5113 from jaimefrio/logaddexp_inf
ENH: remove warnings from logaddexp with same sign infs
==
==================
a90ee32;jaimefrio;2014-09-25 16:08:50 -0700;ENH: better handling of NaNs in logaddexp

==

numpy/core/src/npymath/npy_math.c.src
==================
002b0de;Charles Harris;2014-09-25 17:38:38 -0600;Merge pull request #5122 from juliantaylor/small-dot
ENH: add small kernel correlate function
==
==================
c7fae32;Julian Taylor;2014-09-24 23:30:42 +0200;ENH: add small kernel correlate function
For cases like convolve/correlate with small kernel calling out to BLAS
dot is very slow as it goes through many wrappers and BLAS is typically
optimized for very large data.
So add a template utility file and add a special function for small dot
products.
2-4 times faster than openblas dot for kernel sizes < 11.

==

numpy/core/bscript
numpy/core/setup.py
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/templ_common.h.src
numpy/core/tests/test_numeric.py
==================
caeb888;Charles Harris;2014-09-25 13:46:34 -0600;Merge pull request #5120 from larsmans/install-docs
DOC: update installation docs
==
==================
66a0441;Lars Buitinck;2014-09-25 19:18:23 +0200;DOC/MAINT: Python 2.6 or 3.2 required
Installation docs still stated Python 2.4 is supported, while not mentioning
3.x at all. Also corrected the statement that distutils is in python-dev on
Debian, while it's actually in the main package.

Several parts of the dev docs and some comments also referenced now-irrelevant
2.5 bugs/limitations.

==

doc/HOWTO_RELEASE.rst.txt
doc/source/reference/arrays.classes.rst
doc/source/reference/c-api.types-and-structures.rst
doc/source/user/c-info.python-as-glue.rst
doc/source/user/install.rst
numpy/core/src/multiarray/numpyos.c
==================
5f5edf7;Charles Harris;2014-09-25 12:43:23 -0600;Merge pull request #5116 from jaimefrio/poly-overflow
ENH: Cast non-object arrays to float in np.poly
==
==================
3a0587e;jaimefrio;2014-09-25 10:45:08 -0700;ENH: Cast non-object arrays to float in np.poly
Closes #5096. Casts integer arrays to np.double, to prevent
integer overflow. Object arrays are left unchanged, to allow
use of arbitrary precision objects.

==

doc/release/1.10.0-notes.rst
numpy/lib/polynomial.py
numpy/lib/tests/test_polynomial.py
==================
7b7f83b;Charles Harris;2014-09-25 08:54:16 -0600;Merge pull request #5118 from jaimefrio/docs-gil-thresholded
DOC: document NPY_BEGIN_THREADS_THRESHOLDED
==
==================
75c1ed8;jaimefrio;2014-09-25 00:21:20 -0700;DOC: document NPY_BEGIN_THREADS_THRESHOLDED

==

doc/source/reference/c-api.array.rst
==================
f4fa7bd;Charles Harris;2014-09-24 19:28:17 -0600;Merge pull request #5115 from jaimefrio/searchsorted-c-docs
DOC: Update PyArray_SearchSorted docs in c-api.array.rst
==
==================
4f19c0c;jaimefrio;2014-09-24 16:14:37 -0700;DOC: Update PyArray_SearchSorted docs in c-api.array.rst

==

doc/source/reference/c-api.array.rst
==================
5140ce7;Jaime;2014-09-24 15:30:28 -0700;Merge pull request #5111 from larsmans/fast-bool
ENH: faster (branchless) logical_xor
==
==================
f2ab1fb;Lars Buitinck;2014-09-24 20:44:43 +0200;TST: extend truth table test to arrays with various dtypes

==

numpy/core/tests/test_umath.py
==================
4acc527;jaimefrio;2014-09-24 11:17:00 -0700;TST: logaddexp and logaddexp2 with infs should issue no warnings

==

numpy/core/tests/test_umath.py
==================
5e79fb5;jaimefrio;2014-09-24 11:04:16 -0700;ENH: logaddexp handling of same sign infs without warnings

==

numpy/core/src/npymath/npy_math.c.src
==================
d8e581e;Lars Buitinck;2014-06-24 00:59:19 +0200;ENH: faster (branchless) logical_xor

==

numpy/core/src/umath/loops.c.src
==================
27d73bf;Charles Harris;2014-09-23 15:20:00 -0600;Merge pull request #5104 from juliantaylor/inner-fix
BUG: check success of PyArray_DescrFromType in PyArray_InnerProduct
==
==================
d7fd1e8;Charles Harris;2014-09-23 15:18:52 -0600;Merge pull request #5107 from juliantaylor/na-doc
DOC: remove preservena reference from docstrings
==
==================
5554488;Charles Harris;2014-09-23 15:11:51 -0600;Merge pull request #5106 from juliantaylor/sequence-fix
BUG: check if object provides len() before trying to iterate it
==
==================
3b579f7;Julian Taylor;2014-09-23 22:50:33 +0200;DOC: remove preservena reference from docstrings
preservena is not not implemented.
the putmask docstring is misleading, currently copyto is faster for
dense or sparse masks while putmask is faster for random masks.
[ci skip]

==

numpy/add_newdocs.py
==================
04d507f;Charles Harris;2014-09-23 14:21:11 -0600;Merge pull request #5105 from juliantaylor/where-no-subtype
BUG: don't propagate subtypes from np.where
==
==================
e5a7d58;Julian Taylor;2014-09-23 20:59:05 +0200;BUG: check success of PyArray_DescrFromType in PyArray_InnerProduct
closes gh-5065

==

numpy/core/src/multiarray/multiarraymodule.c
==================
8bf9a18;Julian Taylor;2014-09-23 21:19:23 +0200;BUG: check if object provides len() before trying to iterate it
some libraries want object arrays from objects that are iterable but
rely on not providing len() to get the right dtype from numpy.
closes gh-5100

==

numpy/core/src/multiarray/common.c
numpy/core/tests/test_multiarray.py
==================
8dd2e47;Julian Taylor;2014-09-23 21:05:58 +0200;BUG: don't propagate subtypes from np.where
the C implementation cannot preserve subclass attributes, this needs a
python wrapper using indexing for subclasses.
closes gh-5095

==

numpy/core/src/multiarray/multiarraymodule.c
==================
d599cdf;Julian Taylor;2014-09-23 20:41:05 +0200;Merge pull request #5102 from dpinte/fix/epd_canopy
replacing old reference from EPD to Canopy

==
==================
7be6655;Didrik Pinte;2014-09-23 09:55:57 +0200;DOC: replacing old reference from EPD to Canopy

==

doc/source/user/install.rst
==================
fc5d32a;Jaime;2014-09-23 08:50:00 -0700;Merge pull request #5099 from perimosocordiae/patch-1
BUG: np.unique with chararray + inverse_index
==
==================
7efd5cf;CJ Carey;2014-09-22 14:30:36 -0400;BUG: np.unique with chararray + inverse_index
The call to `empty_like` was trying to use the `chararray` subclass,
which doesn't support the `np.intp` dtype.

==

numpy/lib/arraysetops.py
numpy/lib/tests/test_arraysetops.py
==================
8b44a21;jaimefrio;2014-09-20 18:02:36 -0700;DOC: document `ldict` and `gdict` in bmat, closes #5058

==

numpy/matrixlib/defmatrix.py
==================
2e3778a;Charles Harris;2014-09-19 17:22:00 -0600;Merge pull request #5088 from juliantaylor/not-fix
BUG: fix wrong error checks of PyBytes_AsStringAndSize
==
==================
e50e17c;Julian Taylor;2014-09-20 00:14:25 +0200;BUG: fix wrong error checks of PyBytes_AsStringAndSize
The check in ufunc_type_resolution.c is broken due to a spurious not and
a few cases of TypeError being overwritten without clearing.
Also change all of these error checks to a negative check for
consistency.

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/buffer.c
numpy/core/src/multiarray/conversion_utils.c
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/nditer_pywrap.c
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/ufunc_type_resolution.c
==================
ffacca0;Michael Droettboom;2014-09-19 17:15:07 -0400;Explicitly set strides with negative number in test

==

numpy/core/tests/test_multiarray.py
==================
c85e31e;Julian Taylor;2014-09-19 22:38:15 +0200;Merge pull request #5076 from kanhua/kh_fix
DOC: Minor fix on c-info.python-as-glue.rst

==
==================
0cabea8;kanhua;2014-09-16 18:12:07 +0900;DOC: add section on compiling pyf files
Add section to remind the readers to recomplile add.pyf and add.f95
files before checking the add module in python

==

doc/source/user/c-info.python-as-glue.rst
==================
882c028;Charles Harris;2014-09-19 14:33:52 -0600;Merge pull request #5087 from juliantaylor/unicode-argmin
BUG: fix out of bound access in unicode argmin/argmax
==
==================
5a14415;Julian Taylor;2014-09-19 21:30:19 +0200;BUG: fix out of bound access in unicode argmin/argmax
elsize is in bytes and the pointer of unicode type, so it must divided
by the size.
Closes gh-5082

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/tests/test_multiarray.py
==================
0c6fd48;Michael Droettboom;2014-09-19 12:46:49 -0400;Fix strides when creating Python buffer

==

numpy/core/src/multiarray/buffer.c
numpy/core/tests/test_multiarray.py
==================
4083883;Julian Taylor;2014-09-18 20:44:51 +0200;Merge pull request #5034 from seberg/inplace-ravel
ENH: Allow ravel to reshape in place when possible
==
==================
a32625e;Julian Taylor;2014-09-18 20:29:42 +0200;Merge pull request #5078 from charris/add-back-cblas.h
BUG: Readd the cblas.h header.
==
==================
2d9aa59;Charles Harris;2014-09-17 13:37:19 -0600;BUG: Readd the cblas.h header.
Rename cblas.h to npy_cblas.h and put it in numpy/core/src/private.
Fix the various includes to account for the change.

It turns out that MKL provides cblas, but not cblas.h. Rather, they
provide mkl_cblas.h, which also uses typedefs for the CBLAS_XXX enums.

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/cblasfuncs.c
numpy/core/src/multiarray/vdot.c
numpy/core/src/private/npy_cblas.h
==================
691a8f9;Julian Taylor;2014-09-16 09:25:59 +0200;Merge pull request #5075 from grlee77/docfix
DOC: update numpy.extract docstring
==
==================
5856a12;Gregory R. Lee;2014-09-15 22:33:15 -0400;DOC: update numpy.extract docstring

==

numpy/lib/function_base.py
==================
1dc6350;Jaime;2014-09-15 10:47:26 -0700;Merge pull request #5072 from charris/remove-testcalcs.py
MAINT: Remove testcalcs.py file.
==
==================
fa37c97;Charles Harris;2014-09-15 08:51:27 -0600;MAINT: Remove testcalcs.py file.
The testcalcs.py file is nowhere imported or installed, nor did anyone
reply when it was proposed on the mailing list to remove it. It looks
to be a leftover from the original work on datetime.

==

doc/release/1.10.0-notes.rst
numpy/core/src/multiarray/testcalcs.py
==================
d98e57c;Charles Harris;2014-09-14 09:46:31 -0600;Merge pull request #5070 from juliantaylor/gnubsd-fix
TST: gnufreebsd has fixed the thread control word loss
==
==================
2000e83;Julian Taylor;2014-09-13 14:06:29 +0200;TST: gnufreebsd has fixed the thread control word loss
http://lists.alioth.debian.org/pipermail/glibc-bsd-commits/2014-September/004163.html

==

numpy/random/tests/test_random.py
==================
44877b3;Sebastian Berg;2014-09-03 18:33:06 +0200;ENH: Allow ravel to reshape in place when possible
This fixes a lot of corner cases in reshape 'K' when the array
is not contiguous in the first place, it was previously never
ravelled in place.

Closes gh-5033

==

numpy/core/src/multiarray/shape.c
numpy/core/tests/test_multiarray.py
==================
04f6c0f;Julian Taylor;2014-09-13 14:21:57 +0200;Merge pull request #5061 from keszybz/fix-dimension-message
Fix dimension message
==
==================
860489c;Julian Taylor;2014-09-13 14:20:43 +0200;Merge pull request #5024 from pp-mo/in1d_of_set
DOC: warn about using a set with 'in1d'.
==
==================
1e72312;Julian Taylor;2014-09-13 14:19:55 +0200;Merge pull request #5045 from ryanblak/argmin-doc
DOC: added doc for argmin
==
==================
2706c59;Julian Taylor;2014-09-13 14:18:19 +0200;Merge pull request #5062 from charris/update-numpy_ufunc-doc
DOC: Correct versionadded for __numpy_ufunc__ documentation.
==
==================
ca39bc1;Julian Taylor;2014-09-13 14:17:23 +0200;Merge pull request #5066 from seberg/index-sequence
BUG: cannot convert invalid sequence index to tuple
==
==================
9af5028;Sebastian Berg;2014-09-13 14:02:02 +0200;TST: Test tuple subclass index and broken sequence index

==

numpy/core/tests/test_indexing.py
==================
c85dd45;Sebastian Berg;2014-09-11 18:26:04 +0200;BUG: cannot convert invalid sequence index to tuple
A sequence which raises an error on item getting, should be just
handled as a single index and not a tuple nd-index.

Also fix some error handling.

closes gh-5063

==

numpy/core/src/multiarray/mapping.c
==================
7e8e7a2;Charles Harris;2014-09-11 11:43:32 -0600;Merge pull request #5067 from juliantaylor/restore-dup
BUG: restore api of npy_PyFile_DupClose in python2
==
==================
0be73e0;Julian Taylor;2014-09-11 18:27:17 +0200;BUG: restore api of npy_PyFile_DupClose in python2
breaks matplotlib

==

numpy/core/include/numpy/npy_3kcompat.h
==================
575ef09;Charles Harris;2014-09-10 12:45:19 -0600;DOC: Correct versionadded for __numpy_ufunc__ documentation.
Make it 1.10.

==

doc/source/reference/arrays.classes.rst
==================
5bc942a;Zbigniew Jędrzejewski-Szmek;2014-09-10 10:40:43 -0400;BUG: fix off-by-one in dimension error message
The maximum allowed is really NP_MAX_INT, not NP_MAX_INT-1.

==

numpy/core/src/multiarray/scalartypes.c.src
==================
457ab0b;Zbigniew Jędrzejewski-Szmek;2014-09-10 10:39:48 -0400;BUG: fix off-by-one in dimensionality error message
The maximum allowed is really 32, not 31.

==

numpy/core/src/multiarray/conversion_utils.c
==================
fe0f6cc;Charles Harris;2014-09-09 12:07:54 -0600;Merge pull request #5059 from juliantaylor/config-warn
MAINT: make main a strict prototype in configure checks
==
==================
c0bba1c;Julian Taylor;2014-09-09 17:45:30 +0200;MAINT: make main a strict prototype in configure checks
removes about 400 lines of warnings from the build logs

==

numpy/distutils/command/config.py
==================
2c6937f;Ralf Gommers;2014-09-07 22:14:30 +0200;Merge pull request #5055 from juliantaylor/note-sync
DOC: sync release notes with 1.9 branch
==
==================
48df193;Charles Harris;2014-09-07 09:10:11 -0600;Merge pull request #5056 from juliantaylor/scalar-exact
add C-API PyArray_IsAnyScalarExact
==
==================
ab170ae;Charles Harris;2014-09-07 07:17:54 -0600;Merge pull request #5047 from juliantaylor/move-dotblas-to-multiarray
Move dotblas to multiarray
==
==================
2f55059;Julian Taylor;2014-09-06 19:58:04 +0200;ENH: skip numpy_ufunc and priority lookup for numpy scalars
improves rmul with scalars, gh-5030

==

numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/number.c
==================
d72dd18;Julian Taylor;2014-09-06 19:48:16 +0200;API: add PyArray_IsAnyScalarExact for a fast check for scalars

==

numpy/core/code_generators/numpy_api.py
numpy/core/src/multiarray/scalarapi.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/multiarray/scalartypes.h
==================
6ded5d5;Julian Taylor;2014-09-06 19:37:31 +0200;ENH: search typenumbers from typeobjects via a binary search

==

numpy/core/src/multiarray/scalartypes.c.src
==================
a32a932;Charles Harris;2014-09-07 06:47:34 -0600;Merge pull request #5050 from juliantaylor/cbrt
ENH: add cube root function np.cbrt for real floats
==
==================
d5f5574;Julian Taylor;2014-09-07 14:38:14 +0200;Merge pull request #5043 from chatcannon/fortranobject_malloc
Add NULL check after malloc() in fortranobject.c
==
==================
774cc84;Julian Taylor;2014-09-07 14:36:52 +0200;Merge pull request #5054 from larsmans/c-fixes
BUG: unchecked malloc in heapsort
==
==================
4a23c23;Julian Taylor;2014-09-07 14:19:46 +0200;DOC: sync release notes with 1.9 branch
[ci skip]

==

doc/release/1.8.2-notes.rst
doc/release/1.9.0-notes.rst
doc/source/release.rst
==================
e7a8370;Julian Taylor;2014-09-05 20:03:39 +0200;ENH: add cube root function np.cbrt for real floats
wraps the C99 cube root function cbrt.

==

doc/release/1.10.0-notes.rst
numpy/core/code_generators/generate_umath.py
numpy/core/code_generators/ufunc_docstrings.py
numpy/core/include/numpy/npy_math.h
numpy/core/setup_common.py
numpy/core/src/multiarray/number.c
numpy/core/src/multiarray/number.h
numpy/core/src/npymath/npy_math.c.src
numpy/core/tests/test_umath.py
==================
9974fb6;Lars Buitinck;2014-09-07 13:06:16 +0200;BUG: unchecked malloc in heapsort

==

numpy/core/src/npysort/heapsort.c.src
==================
f137171;Jaime;2014-09-06 22:40:03 -0700;Merge pull request #5053 from Gabriel-p/typo-percentile
DOC: fix typo in np.percentile docstring
==
==================
078af94;Gabriel-p;2014-09-07 00:54:08 -0300;fix typo

==

numpy/lib/function_base.py
==================
2af027d;Charles Harris;2014-09-06 06:03:25 -0600;Merge pull request #5051 from juliantaylor/thread-test-fix
TST: accept small error in threaded random test
==
==================
3ea3dec;Julian Taylor;2014-09-06 13:15:22 +0200;TST: accept small error in threaded random test
freebsd and windows change x87 precision mode (fctrl bit 8 and 9) from
extended to double in child threads so the random numbers cannot be
exactly the same from master and child threads.
see gh-4909

==

numpy/random/tests/test_random.py
==================
77703de;Charles Harris;2014-09-04 16:44:59 -0600;Merge pull request #5048 from juliantaylor/subclass-test-fix
BUG: fix array_almost_equal for array subclasses
==
==================
dfc5677;Julian Taylor;2014-09-05 00:17:28 +0200;BUG: fix array_almost_equal for array subclasses
introduced in gh-4105/ab04e1ae0e8eca717bc7e42f3b0a60c9ff764289

==

numpy/testing/tests/test_utils.py
numpy/testing/utils.py
==================
0cf6dcf;Julian Taylor;2014-09-04 22:25:42 +0200;ENH: add better error message for misaligned matrices
based on gh-4985 by Lars Buitinck

==

numpy/core/src/multiarray/cblasfuncs.c
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/multiarraymodule.c
==================
eba3c4b;Julian Taylor;2014-09-04 22:25:17 +0200;MAINT: cleanup unnecessary code

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/cblasfuncs.c
numpy/core/src/multiarray/common.c
==================
75a27ce;Julian Taylor;2014-08-24 20:10:37 +0200;BLD: check for CBLAS header in "unoptimized" blas
Allows building against system installed blas library that might be
optimized.

==

numpy/distutils/system_info.py
==================
8f03863;Charles Harris;2014-08-23 12:23:17 -0600;BUG: Capitalize environmental variables in numpy/core/__init__.py.

==

numpy/core/__init__.py
==================
12bf7fe;Charles Harris;2014-08-22 13:55:12 -0600;TST: Add vdot tests, move tests from test_blasdot to test_multiarray.
Not all tests from test_blasdot were relevant, as they checked the cblas
implementations against the non-cblas implementations. Those two are no
longer separate.

Remove test_blasdot.py as there nothing is left in it.

==

numpy/core/tests/test_blasdot.py
numpy/core/tests/test_multiarray.py
==================
d8a8377;Charles Harris;2014-08-22 12:54:21 -0600;DOC: Update docs to reflect deprecation of alterdot and restoredot.
Also move docstrings into the versions in numpy/core/numeric.py as
the functions are no longer in the defunct _dotblas module.

==

doc/release/1.10.0-notes.rst
numpy/add_newdocs.py
numpy/core/numeric.py
==================
9c1d553;Charles Harris;2014-08-20 12:39:40 -0600;ENH: Move vdot to multiarray.
Remove vdot from _dotblas and implement it in multiarray.
Remove the files in core/blasdot as they are no longer needed.
Fix tests and build to reflect the changes.

The vdot function is now a bit faster in the common case as ravel
is used instead of flatten. There is also no need to conjugate the
files for clongdouble.

==

numpy/core/bento.info
numpy/core/blasdot/_dotblas.c
numpy/core/blasdot/cblas.h
numpy/core/bscript
numpy/core/numeric.py
numpy/core/setup.py
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/arraytypes.h
numpy/core/src/multiarray/cblasfuncs.c
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/multiarraymodule_onefile.c
numpy/core/src/multiarray/vdot.c
numpy/core/src/multiarray/vdot.h
numpy/core/tests/test_blasdot.py
==================
2079469;Charles Harris;2014-08-17 16:51:57 -0600;MAINT: Refactor ndarray.dot method to call PyArray_MatrixProduct2.
Now that PyArray_MatrixProduct2 is blas enabled, call it directly.

==

numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarraymodule.c
==================
93feabb;Charles Harris;2014-08-17 15:10:08 -0600;ENH: Move dotblas_innerproduct down into multiarray.
Move the dotblas_innerproduct function from the _dotblas.c file to a new
cblasfuncs.c file in multiarray and rename it cblas_innerproduct.
Modify it so that it can called directly from PyArray_InnerProduct and
do so.  Fix up numeric.py and the tests to reflect these changes.

==

numpy/core/blasdot/_dotblas.c
numpy/core/numeric.py
numpy/core/src/multiarray/cblasfuncs.c
numpy/core/src/multiarray/cblasfuncs.h
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_blasdot.py
==================
fee3c92;Charles Harris;2014-08-16 19:01:58 -0600;MAINT: Update waf to 1.7.16

==

tools/travis-test.sh
==================
41396c4;Charles Harris;2014-08-16 11:53:02 -0600;ENH: Move dotblas_matrixproduct down into multiarray.
Move the dotblas_matrixproduct function from the _dotblas.c file to a
new cblasfuncs.c file in multiarray and rename it cblas_matrixproduct.
Modify it so that it can called directly from PyArray_MatrixProduct2 and
do so.  Fix up numeric.py and core/__init__.py to reflect these changes.

==

numpy/core/__init__.py
numpy/core/blasdot/_dotblas.c
numpy/core/bscript
numpy/core/numeric.py
numpy/core/setup.py
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/arraytypes.h
numpy/core/src/multiarray/cblasfuncs.c
numpy/core/src/multiarray/cblasfuncs.h
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/multiarraymodule_onefile.c
numpy/core/tests/test_blasdot.py
numpy/linalg/bscript
==================
a391971;Charles Harris;2014-08-15 13:33:23 -0600;MAINT, STY: Remove use of alterdot, restoredot in _dotblas.c.
These are no longer needed. Also do C style cleanups.

==

numpy/core/blasdot/_dotblas.c
==================
175cea4;Charles Harris;2014-08-13 18:16:26 -0600;ENH: When cblas is available use it in descr->f->dot.
Importing _dotblas currently executes _dotblas.alterdot, which replaces
the default descr->f->dot function with a cblas based version for float,
double, complex float, and complex double data types. This PR changes
the default descr->f->dot to use cblas whenever it is available. After
this change, the alterdot and restoredot functions serve no purpose, so
are changed to do nothing and deprecated. Note that those functions were
already doing nothing when _dotblas was not available.

==

numpy/core/blasdot/_dotblas.c
numpy/core/bscript
numpy/core/numeric.py
numpy/core/setup.py
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/tests/test_blasdot.py
numpy/core/tests/test_deprecations.py
==================
2995792;Charles Harris;2014-08-11 13:20:08 -0600;ENH: Add 'HAVE_CBLAS' macro for build purposes.
The current system works for MKL and OpenBLAS by default because the
mkl_info and openblas_info classes in numpy/distutils/system_info do not
define the macro 'NO_ATLAS_INFO=1' that currently signals the absence of
CBLAS. This PR declares the presence of CBLAS directly by defining the
'HAVE_CBLAS' macro.

==

numpy/core/setup.py
numpy/distutils/system_info.py
==================
00a3339;Chris Kerr;2014-09-04 20:09:19 +0100;Changed the `goto fail` to a `return PyErr_NoMemory()`

==

numpy/f2py/src/fortranobject.c
==================
3ab6ec8;Charles Harris;2014-09-04 12:41:42 -0600;Merge pull request #5042 from juliantaylor/test-argv
TST: pass sys.argv to run_module_suite by default
==
==================
537c7a6;ryanblak;2014-09-04 19:35:06 +0100;DOC: added doc for argmin

==

numpy/core/fromnumeric.py
==================
949daea;Julian Taylor;2014-09-04 00:22:08 +0200;TST: pass sys.argv to run_module_suite by default
allows passing flags like --pdb to test files
also add call to files where its missing

==

numpy/compat/tests/test_compat.py
numpy/core/tests/test_abc.py
numpy/core/tests/test_blasdot.py
numpy/core/tests/test_function_base.py
numpy/core/tests/test_multiarray_assignment.py
numpy/linalg/tests/test_build.py
numpy/matrixlib/tests/test_multiarray.py
numpy/matrixlib/tests/test_numeric.py
numpy/matrixlib/tests/test_regression.py
numpy/testing/nosetester.py
==================
596dd84;Chris Kerr;2014-09-04 09:48:06 +0100;Add NULL check after malloc() in fortranobject.c

==

numpy/f2py/src/fortranobject.c
==================
03dcd3b;Charles Harris;2014-09-03 13:58:44 -0600;Merge pull request #5038 from juliantaylor/clongdouble-align
TST: skip clongdouble alignment checks on 32 bit arches
==
==================
eb9db82;Julian Taylor;2014-09-03 20:57:37 +0200;TST: skip clongdouble alignment checks on 32 bit arches
turns out not only sparc is borked, skip the checks on all 32 bit arches
with too large clongdouble alignments until we have an aligned
allocator.

==

numpy/core/tests/test_numeric.py
numpy/f2py/tests/test_array_from_pyobj.py
==================
6968c25;seberg;2014-09-03 20:38:37 +0200;Merge pull request #5035 from juliantaylor/fft-test
TST: join fft threads before getting values
==
==================
b8aedd0;Julian Taylor;2014-09-03 20:20:03 +0200;TST: join fft threads before getting values
avoids timeouts on slow machines

==

numpy/fft/tests/test_fftpack.py
==================
0f0575c;Julian Taylor;2014-09-02 23:40:11 +0200;Merge pull request #4572 from juliantaylor/string-cmp
ENH: optimize STRING_compare by using memcmp
==
==================
588bcc4;Julian Taylor;2014-09-02 23:07:26 +0200;Merge pull request #5020 from charris/disable-some-test-warnings
TST: Silence some warning that turns up on OpenBSD.
==
==================
4a501a0;Julian Taylor;2014-09-02 23:06:25 +0200;Merge pull request #5025 from pp-mo/assert_allclose_percent
BUG: fix percentage reporting when testing.assert_allclose fails.
==
==================
138b3bf;seberg;2014-09-02 17:36:46 +0200;Merge pull request #5031 from charris/speedup-old-polynomial-functions
MAINT: Make numpy/lib/polynomial/polyval a bit faster.
==
==================
3e31b9a;Charles Harris;2014-09-02 09:00:23 -0600;MAINT: Make numpy/lib/polynomial/polyval a bit faster.
Multiplying a numpy_scalar times a numpy_array is much faster than
the other way around. This PR switches the order of multiplication
in the polyval function resulting in a speedup of about 5x for scalar
values of x.

Closes #4610.

==

numpy/lib/polynomial.py
==================
ea32c90;Patrick Peglar;2014-09-01 17:22:12 +0100;Use more portable test methods.

==

numpy/testing/tests/test_utils.py
==================
4097ec3;Patrick Peglar;2014-08-31 15:43:39 +0100;BUG: fix percentage reporting when testing.assert_allclose fails.

==

numpy/core/numeric.py
numpy/testing/tests/test_utils.py
numpy/testing/utils.py
==================
37ff2cd;Patrick Peglar;2014-08-31 14:01:12 +0100;DOC: warn about using a set with 'in1d'.

==

numpy/lib/arraysetops.py
==================
9c50f98;Charles Harris;2014-08-30 18:15:55 -0600;Merge pull request #5022 from seberg/structured-insert
BUG: Fix np.insert for inserting a single item into a structured array
==
==================
45f8a18;Charles Harris;2014-08-30 11:15:08 -0600;Merge pull request #5004 from juliantaylor/argmin-performance
ENH: improve bool arg{min.max} performance
==
==================
f880b1a;Sebastian Berg;2014-08-30 09:25:52 +0100;BUG: Fix np.insert for inserting a single item into a structured array
Note that there are some object array special cases because of allowing
multiple inserts. `np.array(..., dtype=object)` is not always clear.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
ff8337d;Ralf Gommers;2014-08-29 21:53:26 +0200;Merge pull request #5021 from charris/remove-missing-files-from-setup
MAINT: Remove references to missing files from install.
==
==================
42aa77f;Charles Harris;2014-08-29 10:55:15 -0600;MAINT: Remove references to missing files from install.
The following directories and files have been moved or deleted

    numpy/lib/benchmarks
    numpy/f2py/docs
    numpy/f2py/f2py.1

This PR removes references to them from the relevant setup.py files.

Closes #5010.

==

numpy/f2py/setup.py
numpy/lib/setup.py
==================
affeaf5;Charles Harris;2014-08-29 09:01:42 -0600;TST: Silence some warning that turns up on OpenBSD.
On OpenBSD with gcc-4.2 log1p(nan) raises an invalid value warning.
This PR disables both 'divide' and 'invalid' for the log1p tests.

Closes #5017.

==

numpy/core/tests/test_umath.py
==================
502cb12;Charles Harris;2014-08-28 09:43:07 -0600;Merge pull request #5003 from endolith/patch-1
escape the italics bold and monospace examples
==
==================
3975e09;Charles Harris;2014-08-28 09:37:34 -0600;Merge pull request #5014 from juliantaylor/cache-struct
MAINT: use a structure as cache buckets
==
==================
7530e9e;Julian Taylor;2014-08-28 11:57:29 +0200;MAINT: use a structure as cache buckets

==

numpy/core/src/multiarray/alloc.c
==================
791a719;Julian Taylor;2014-08-28 11:30:05 +0200;Merge pull request #5013 from larsmans/c-fixes
Small fixes, including a memset(NULL, c, n)
==
==================
9e93c07;Lars Buitinck;2014-08-28 11:00:58 +0200;BUG: potential memset on NULL in allocator cache

==

numpy/core/src/multiarray/alloc.c
==================
036efee;seberg;2014-08-28 09:34:38 +0100;Merge pull request #5012 from jaimefrio/faster_return_inverse
ENH: Speed up `unique` with `return_inverse`
==
==================
a85c177;jaimefrio;2014-08-27 22:52:19 -0700;ENH: Speed up `unique` with `return_inverse`
This replaces a sort with fancy indexing.

==

numpy/lib/arraysetops.py
==================
e859031;Marten van Kerkwijk;2014-08-27 14:46:07 -0400;Convert as_strided input to array first

==

numpy/lib/stride_tricks.py
numpy/lib/tests/test_stride_tricks.py
==================
0210cca;Julian Taylor;2014-08-27 15:52:24 +0200;Merge pull request #5006 from dhomeier/ioconv_usecols
BUG: fix genfromtxt check of converters when using usecols

==
==================
709a06d;Derek Homeier;2014-08-27 13:42:32 +0200;BUG: fix genfromtxt check of converters when using usecols
fixes an issue reported by Adrian Altenhoff where user-supplied
converters in genfromtxt were not tested with the right first_values
when also specifying usecols.

==

numpy/lib/npyio.py
numpy/lib/tests/test_io.py
==================
1454228;seberg;2014-08-27 13:23:22 +0100;Merge pull request #5002 from juliantaylor/convolve-nocopy
ENH: remove unnecessary copy of convolve inputs
==
==================
0104e62;Julian Taylor;2014-08-27 12:45:07 +0200;Merge pull request #5005 from juliantaylor/use-tempdir-for-large-file
Use tempdir for large file
==
==================
e95cf5f;Julian Taylor;2014-08-27 12:08:08 +0200;TST: skip large file test on windows
nobody knows if it supports sparse filesystems, so just skip it.

==

numpy/lib/tests/test_format.py
==================
dcf32db;Matthew Brett;2014-07-30 19:41:22 -0700;BUG: avoid NamedTemporaryFile for large file test
NamedTemporaryFile files can't be reopened on Windows.

==

numpy/lib/tests/test_format.py
==================
69b7962;Julian Taylor;2014-08-27 10:25:16 +0200;ENH: vectorize BOOL_argmax
using the same method as BOOL_logical_and

==

numpy/core/src/multiarray/arraytypes.c.src
==================
c12c31f;Julian Taylor;2014-08-27 09:55:21 +0200;ENH: improve bool argmin performance
in glibc memchr using SSE2 is about 18 times faster than our current
code.

==

numpy/core/src/multiarray/arraytypes.c.src
==================
7c6fd58;Lars Buitinck;2014-08-27 09:58:00 +0200;MAINT: linalg: use sizeof instead of magic constant
Allows changing the error message at some point.

==

numpy/linalg/lapack_lite/python_xerbla.c
==================
f702698;endolith;2014-08-26 20:16:56 -0400;escape the italics bold and monospace examples
since this is meant to be read in rendered form, and there are examples of these scattered through the text otherwise
==

doc/HOWTO_DOCUMENT.rst.txt
==================
ad42ea6;Julian Taylor;2014-08-27 01:06:59 +0200;Merge pull request #4997 from juliantaylor/unicode-init
BUG: set needs-init flag for unicode dtype
==
==================
64c8932;Nathaniel J. Smith;2014-08-26 23:44:03 +0100;Merge pull request #5001 from juliantaylor/sizeof
support __sizeof__()
==
==================
8724ed7;Julian Taylor;2014-08-26 23:22:12 +0200;ENH: remove unnecessary copy of convolve inputs

==

numpy/core/numeric.py
numpy/core/tests/test_numeric.py
==================
606ac22;Julian Taylor;2014-08-26 22:27:47 +0200;ENH: add dimensions and strides to _sizeof__ and handle not owning data

==

numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_scalarmath.py
==================
11fe65c;Daniel da Silva;2014-03-14 00:00:38 -0400;ENH: Implement sys.getsizeof(x) for arrays and scalars.
Fixes #2279. Stubs/declares __sizeof__ method to use nbytes attribute.

==

numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_scalarmath.py
==================
52d6c3d;Julian Taylor;2014-08-26 00:31:42 +0200;Merge pull request #4996 from fdiary/gfortran-rpath
support rpath for GNU Fortran compiler.

==
==================
79d3635;Kazuhiko Shiozaki;2014-08-25 20:16:27 +0200;BLD: support rpath for GNU Fortran compiler.

==

numpy/distutils/fcompiler/gnu.py
==================
007b186;Julian Taylor;2014-08-25 21:26:25 +0200;BUG: set needs-init flag for unicode dtype
Python >= 3.3 does not like printing garbage unicode so printing
np.empty(x, 'U') can throw UnicodeDecode errors.
It is probably easier to just require initializing the dtype as a whole
instead of trying to catching the decode error on all places where it
might occur. Hopefully 0 is a valid code in all codecs.
Closes gh-4994.

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/tests/test_multiarray.py
==================
26a02cd;Marten van Kerkwijk;2014-04-15 21:32:42 -0400;ENH: add subok flag to stride_tricks (and thus broadcast_arrays)

==

numpy/lib/stride_tricks.py
numpy/lib/tests/test_stride_tricks.py
==================
14e4cc3;Charles Harris;2014-08-24 11:10:39 -0600;Merge pull request #4989 from juliantaylor/percentile-fix
BUG: don't overwrite input percentile arrays
==
==================
040d040;Julian Taylor;2014-08-24 17:54:35 +0200;BUG: don't overwrite input percentile arrays

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
c9dad32;Charles Harris;2014-08-24 09:22:18 -0600;Merge pull request #4988 from juliantaylor/gfortran-debug
BLD: add debug information to gfortran builds
==
==================
4c4212b;Julian Taylor;2014-08-24 16:52:14 +0200;BLD: add debug information to gfortran builds
Similar to C builds which always have debug info.

==

numpy/distutils/fcompiler/gnu.py
==================
d1c5030;Julian Taylor;2014-08-23 21:06:45 +0200;Merge pull request #4937 from charris/pep8-numpy-random
Pep8 numpy random
==
==================
98d1161;Julian Taylor;2014-08-23 16:31:07 +0200;Merge pull request #4936 from charris/pep8-numpy-fft
STY: minor PEP8 fixups for numpy/fft.
==
==================
2059cce;Charles Harris;2014-08-23 08:19:06 -0600;Merge pull request #4982 from charris/gh-2941
Fixup of PR #4921
==
==================
5ce8e06;Charles Harris;2014-08-23 07:43:54 -0600;Merge pull request #4941 from charris/fix-numpy-compat-_inspect
Fix numpy compat  _inspect
==
==================
9cd4dc2;Charles Harris;2014-08-22 11:08:59 -0600;TST: Add tests for maximum/minimum of object arrays with nan.
There is a random element to these tests, so that they may fail to
fail when python compare is being used instead of richcompare.

==

numpy/core/tests/test_umath.py
==================
f818316;mamikony;2014-07-29 16:33:04 -0400;BUG: Fix NaN handling in npy_ObjectMax and npy_ObjectMin.
These functions currently fail randomly for Python < 3.x because they
use PyObject_Cmp, which looks at addresses for NaN objects. The fix is
to use PyObject_RichCompareBool, which is available in Python >= 2.6.
Note that for Python 2.6 and 2.7, PyObject_RichCompareBool falls back on
PyObject_Cmp when an object doesn't provide rich compare.

Closes #4903.

==

numpy/core/src/umath/funcs.inc.src
==================
15cd639;Charles Harris;2014-08-22 06:41:18 -0600;Merge pull request #4981 from hpaulj/fill_diagonal
Correct the fill_diagonal examples
==
==================
8910afb;hpaulj;2014-08-21 23:53:43 -0700;Correct the fill_diagonal examples

==

numpy/lib/index_tricks.py
==================
a3243ad;Charles Harris;2014-08-18 13:24:36 -0600;Merge pull request #4975 from juliantaylor/datetime-memleak
BUG: fix memoryleaks in datetime dtype parsing
==
==================
bbb7c3f;Julian Taylor;2014-08-18 20:47:32 +0200;BUG: fix memoryleaks in datetime dtype parsing
closes gh-4973
closes gh-4974

==

numpy/core/src/multiarray/datetime.c
==================
8957f23;Julian Taylor;2014-08-18 00:03:03 +0200;Merge pull request #4971 from charris/fix-redefined-macro-warnings
MAINT: Get rid of some harmless gcc warnings about macro redefines.
==
==================
ee9f85b;Charles Harris;2014-08-17 15:19:22 -0600;MAINT: Get rid of some harmless gcc warnings about macro redefines.
The Python.h header likes to be included first, otherwise warnings about
redefining "_POSIX_C_SOURCE" and "_XOPEN_SOURCE" are generated. This is
really a problem with the Python.h header, but can be worked around by
changing the order of inclusion.

==

numpy/core/src/umath/operand_flag_tests.c.src
numpy/core/src/umath/test_rational.c.src
==================
221ed0c;Julian Taylor;2014-08-17 19:59:44 +0200;Merge pull request #4970 from charris/fix-compile-warnings
MAINT: Get rid of some harmless gcc warnings about macro redefines.
==
==================
661c4a5;Charles Harris;2014-08-17 11:14:30 -0600;MAINT: Get rid of some harmless gcc warnings about macro redefines.
The Python.h header likes to be included first, otherwise warnings about
redefining "_POSIX_C_SOURCE" and "_XOPEN_SOURCE" are generated. This is
really a problem with the Python.h header, but can be worked around by
changing the order of inclusion.

==

numpy/core/src/npysort/heapsort.c.src
numpy/core/src/npysort/mergesort.c.src
numpy/core/src/npysort/quicksort.c.src
==================
4125912;seberg;2014-08-16 10:22:50 +0200;Merge pull request #4968 from WarrenWeckesser/bug-genfromtxt
BUG: io: genfromtxt did not handle filling_values=0 correctly. Closes gh-2317.
==
==================
9c76897;Warren Weckesser;2014-08-15 19:24:37 -0400;BUG: io: genfromtxt did not handle filling_values=0 correctly. Closes gh-2317.

==

numpy/lib/npyio.py
numpy/lib/tests/test_io.py
==================
50a1dfa;Ralf Gommers;2014-08-13 19:19:17 +0200;Merge pull request #4961 from cel4/tiny_doc_fixes
Fixed two typos in the c-api user guide.
==
==================
047371b;cel;2014-08-13 14:56:54 +0200;Fixed two typos in the c-api user guide.

==

doc/source/user/c-info.how-to-extend.rst
==================
f5849e6;Ralf Gommers;2014-08-12 20:51:50 +0200;Merge pull request #4957 from WarrenWeckesser/doc-fix
DOC: remove 'count_reduce_items' from the 'Counting' section.
==
==================
90d6979;Warren Weckesser;2014-08-11 23:01:33 -0400;DOC: remove 'count_reduce_items' from the 'Counting' section.

==

doc/source/reference/routines.sort.rst
==================
7e53e9b;Charles Harris;2014-08-04 15:43:38 -0600;Merge pull request #4926 from juliantaylor/concatenate-error
ENH: better error message for invalid axis and concatenate inputs
==
==================
e65c9aa;Charles Harris;2014-08-04 14:48:03 -0600;Merge pull request #4938 from charris/fix-docstring-typo
DOC: Fix typo in _iotools.py docstring.
==
==================
192f025;Charles Harris;2014-08-04 14:32:34 -0600;Merge pull request #4924 from charris/pep8-numpy-polynomial
Pep8 numpy polynomial
==
==================
74bd706;Charles Harris;2014-08-04 14:31:15 -0600;Merge pull request #4932 from argriffing/ravel-docstrings
DOC: clarify matrix.ravel docstring and add tests
==
==================
bf04603;Charles Harris;2014-08-04 13:42:20 -0600;Merge pull request #4946 from argriffing/squeeze-bad-axis-size
MAINT: small change to squeeze error message
==
==================
d71637b;alex;2014-08-04 15:27:36 -0400;MAINT: use N.ndarray instead of core.multiarray.ndarray

==

numpy/matrixlib/defmatrix.py
==================
c81fd7d;alex;2014-08-04 14:52:06 -0400;MAINT: small change to squeeze error message

==

numpy/core/src/multiarray/shape.c
==================
cc577a4;Charles Harris;2014-08-04 12:43:02 -0600;Merge pull request #4943 from argriffing/matrix-squeeze-docs
DOC: matrix.squeeze docstring
==
==================
2aa2132;alex;2014-08-01 23:41:36 -0400;DOC: matrix.squeeze docstring

==

numpy/matrixlib/defmatrix.py
==================
3d7438a;Charles Harris;2014-08-01 10:19:03 -0600;STY: Minor PEP8 fixes.

==

numpy/compat/py3k.py
numpy/compat/setup.py
==================
3eb219f;Charles Harris;2014-08-01 09:59:00 -0600;BUG: Fix bugs in unused code paths.
The `getargspec` needed to import the disassembler to support parsing
tuple arguments. Since numpy never uses those, the corresponding code
is deleted and an TypeError raised if such arguments are encountered.

Also fix the unused formatargs function so it does not require the
string module.

==

numpy/compat/_inspect.py
numpy/compat/tests/test_compat.py
==================
34698b6;Charles Harris;2014-07-31 19:34:18 -0600;DOC: Fix typo in _iotools.py docstring.
The error is in the StringConverter.upgrade docstring.

==

numpy/lib/_iotools.py
==================
1e22553;Charles Harris;2014-07-31 19:29:27 -0600;Merge pull request #4931 from argriffing/matrix-docstrings
DOC: matrix flatten docstring
==
==================
275b1dd;Charles Harris;2014-07-31 19:04:11 -0600;BUG: Fix None comparison giving FutureWarning in choice function.
This is in numpy/random/mtrand/mtrand.pyx where the choice function
was using comparisons of the form `None != p`.

==

numpy/random/mtrand/mtrand.pyx
==================
56471a1;Charles Harris;2014-07-31 18:54:22 -0600;STY: PEP8 fixups for numpy/random.

==

numpy/random/setup.py
numpy/random/tests/test_random.py
numpy/random/tests/test_regression.py
==================
489d23c;alex;2014-07-31 20:26:30 -0400;DOC: clarify that matrix.ravel only copies if necessary; this is already tested

==

numpy/matrixlib/defmatrix.py
==================
fdedd16;alex;2014-07-31 20:23:56 -0400;MAINT: restore optional ravel order and add tests and more docstring lines

==

numpy/matrixlib/defmatrix.py
numpy/matrixlib/tests/test_defmatrix.py
==================
4e7ae3d;Charles Harris;2014-07-31 17:39:17 -0600;STY: minor PEP8 fixups for numpy/fft.

==

numpy/fft/fftpack.py
numpy/fft/setup.py
numpy/fft/tests/test_helper.py
==================
7bfa929;alex;2014-07-31 19:25:39 -0400;MAINT: fix the import

==

numpy/matrixlib/defmatrix.py
==================
3b40702;alex;2014-07-31 19:18:27 -0400;DOC: add minimal clarification to the matrix.ravel docstring

==

numpy/matrixlib/defmatrix.py
==================
650d4ef;alex;2014-07-31 18:49:19 -0400;DOC: clarify matrix flatten docstring

==

numpy/matrixlib/defmatrix.py
==================
b6ba4ad;alex;2014-07-31 17:33:35 -0400;DOC: use m for matrix instead of a for array

==

numpy/matrixlib/defmatrix.py
==================
75f302e;alex;2014-07-31 17:24:30 -0400;DOC: matrix flatten docstring

==

numpy/matrixlib/defmatrix.py
==================
ae7c942;Charles Harris;2014-07-31 14:30:10 -0600;Merge pull request #4929 from juliantaylor/charris-pep8-numpy-lib
Charris pep8 numpy lib
==
==================
01b0d7e;Charles Harris;2014-07-30 18:06:28 -0600;STY: Make files in numpy/lib PEP8 compliant.
The rules enforced are the same as those used for scipy.

==

numpy/lib/_datasource.py
numpy/lib/_iotools.py
numpy/lib/_version.py
numpy/lib/arraypad.py
numpy/lib/arraysetops.py
numpy/lib/arrayterator.py
numpy/lib/financial.py
numpy/lib/format.py
numpy/lib/function_base.py
numpy/lib/index_tricks.py
numpy/lib/npyio.py
numpy/lib/polynomial.py
numpy/lib/recfunctions.py
numpy/lib/scimath.py
numpy/lib/setup.py
numpy/lib/shape_base.py
numpy/lib/stride_tricks.py
numpy/lib/type_check.py
numpy/lib/user_array.py
numpy/lib/utils.py
==================
dec6658;Charles Harris;2014-07-30 16:48:11 -0600;MAINT: Fixes for problems in numpy/lib revealed by pyflakes.
Some of those problems look like potential coding errors. In those
cases a Fixme comment was made and the offending code, usually an
unused variable, was commented out.

==

numpy/lib/_datasource.py
numpy/lib/_iotools.py
numpy/lib/arraypad.py
numpy/lib/arraysetops.py
numpy/lib/arrayterator.py
numpy/lib/financial.py
numpy/lib/function_base.py
numpy/lib/nanfunctions.py
numpy/lib/npyio.py
numpy/lib/recfunctions.py
numpy/lib/shape_base.py
numpy/lib/twodim_base.py
numpy/lib/user_array.py
numpy/lib/utils.py
==================
0b5a664;Charles Harris;2014-07-30 15:14:11 -0600;STY: PEP8 compliance for numpy/lib/tests.
The possibly controversial part of this is making the nested array
value lists PEP8 compliant, as there is something to be said aligning
the values for clarity. In the end, it seemed like the easiest thing
to do was to make them PEP8 compliant. The eye can get used to that.

==

numpy/lib/tests/test__datasource.py
numpy/lib/tests/test__iotools.py
numpy/lib/tests/test_arraypad.py
numpy/lib/tests/test_arraysetops.py
numpy/lib/tests/test_financial.py
numpy/lib/tests/test_index_tricks.py
numpy/lib/tests/test_nanfunctions.py
numpy/lib/tests/test_polynomial.py
numpy/lib/tests/test_twodim_base.py
==================
b2955ed;Charles Harris;2014-07-30 14:17:00 -0600;MAINT: Fix problems noted by pyflakes in numpy/lib/tests.

==

numpy/lib/tests/test__datasource.py
numpy/lib/tests/test__iotools.py
numpy/lib/tests/test_arraysetops.py
numpy/lib/tests/test_financial.py
numpy/lib/tests/test_format.py
numpy/lib/tests/test_index_tricks.py
numpy/lib/tests/test_polynomial.py
numpy/lib/tests/test_recfunctions.py
numpy/lib/tests/test_regression.py
numpy/lib/tests/test_shape_base.py
numpy/lib/tests/test_stride_tricks.py
numpy/lib/tests/test_twodim_base.py
numpy/lib/tests/test_type_check.py
numpy/lib/tests/test_ufunclike.py
numpy/lib/tests/test_utils.py
==================
3f0cb83;Julian Taylor;2014-07-30 23:24:41 +0200;ENH: better error message for invalid axis and concatenate inputs
the old errors
np.concatenate(1,2)
TypeError: object of type 'int' has no len()

concatenate([1], [2])
TypeError: an integer is required

are not very unhelpful, add a new internal function that allows adding
some context to axis argument conversion failures and check for sequence
inputs in concatenate.
Closes gh-4923.

==

numpy/core/src/multiarray/conversion_utils.c
numpy/core/src/multiarray/multiarraymodule.c
==================
f9c6398;Charles Harris;2014-07-29 22:35:28 -0600;MAINT: Fix blemishes in numpy/polynomial/tests revealed by pyflakes.

==

numpy/polynomial/tests/test_classes.py
numpy/polynomial/tests/test_hermite.py
numpy/polynomial/tests/test_hermite_e.py
numpy/polynomial/tests/test_laguerre.py
numpy/polynomial/tests/test_legendre.py
numpy/polynomial/tests/test_polyutils.py
==================
02f922b;Charles Harris;2014-07-29 21:52:41 -0600;STY: PEP8 fixes for numpy/polynomial/tests/*.py.
Made conformant with the standards of scipy.

==

numpy/polynomial/tests/test_chebyshev.py
numpy/polynomial/tests/test_hermite.py
numpy/polynomial/tests/test_hermite_e.py
numpy/polynomial/tests/test_laguerre.py
numpy/polynomial/tests/test_legendre.py
numpy/polynomial/tests/test_polynomial.py
==================
daf9335;Charles Harris;2014-07-29 21:38:28 -0600;MAINT: Remove unused variables and imports in numpy/polynomial/*.py.
Detected by pyflakes.

==

numpy/polynomial/__init__.py
numpy/polynomial/hermite.py
numpy/polynomial/hermite_e.py
numpy/polynomial/laguerre.py
numpy/polynomial/polyutils.py
==================
346489a;Charles Harris;2014-07-29 21:27:15 -0600;STY: PEP8 fixes for files in numpy/polynomial.
The rather lax standards used in scipy were used to identify the
needed style fixups.

==

numpy/polynomial/_polybase.py
numpy/polynomial/chebyshev.py
numpy/polynomial/hermite.py
numpy/polynomial/hermite_e.py
numpy/polynomial/laguerre.py
numpy/polynomial/legendre.py
numpy/polynomial/polynomial.py
numpy/polynomial/polyutils.py
==================
2243fee;Charles Harris;2014-07-29 21:40:00 -0600;BUG: Fix typo in hermite_e.py.
The hermepow function was incorrectly listed in __all__ as hermpow.

==

numpy/polynomial/hermite_e.py
==================
2ad5388;Julian Taylor;2014-07-29 22:48:35 +0200;Merge pull request #4916 from yotam/triu-dtype-fix
BUG: Avoid type promotion in tril and triu.
==
==================
c50a2da;Charles Harris;2014-07-29 14:20:48 -0500;Merge pull request #4917 from juliantaylor/zeros_like_string
BUG: fix string type inconsistency between zeros and zeros_like
==
==================
a7c788c;Yotam Doron;2014-07-29 15:59:26 +0100;BUG: Avoid type promotion in tril and triu.

==

numpy/lib/tests/test_twodim_base.py
numpy/lib/twodim_base.py
==================
778af02;Julian Taylor;2014-07-29 20:04:28 +0200;BUG: fix string type inconsistency between zeros and zeros_like
np.zeros for strings returns empty strings while np.zeros_like of a
string array creates strings containing an string 0.

==

doc/release/1.9.0-notes.rst
numpy/core/numeric.py
numpy/core/tests/test_multiarray.py
==================
d61ee81;Charles Harris;2014-07-28 15:20:08 -0500;Merge pull request #4913 from juliantaylor/fix-cont-constr
BUG: fix ineffective as ascontiguousarray
==
==================
84a9ab0;Julian Taylor;2014-07-28 21:08:21 +0200;Merge pull request #4910 from seberg/scalar-none-cmp
BUG: None comparison deprecation does not affect scalars

==
==================
8624924;Sebastian Berg;2014-07-27 21:16:47 +0200;BUG: None comparison deprecation does not affect scalars
This circumvents the None warnings for scalar comparisons.
Unfortunatly datetime NaT *can* in some cases evaluate equal
to None because NaT.item() is None.

Closes gh-4894

==

numpy/core/src/multiarray/scalartypes.c.src
numpy/core/tests/test_deprecations.py
==================
d43cd21;Julian Taylor;2014-07-28 19:52:03 +0200;BUG: fix ineffective as ascontiguousarray
My last microoptimization break copying of non-contigous 1d arrays in
the continous array constructors.
What was that saying about premature optimization again?

==

numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_multiarray.py
==================
bc4a583;Charles Harris;2014-07-27 18:14:57 -0500;Merge pull request #4902 from juliantaylor/asarray-improve
ENH: add a ndarray super-fast path to _array_from_object
==
==================
91369d3;Julian Taylor;2014-07-24 23:44:50 +0200;ENH: add a ndarray super-fast path to _array_from_object
When the argument is exactly an ndarray and the rest of the arguments
are their defaults we can skip the very slow
PyArg_ParseTupleAndKeywords.
This improves np.array(ndarray, copy=False) performance by about a
factor three and np.asarray(ndarray) by about a factor of two.

==

numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_multiarray.py
==================
656cf24;Charles Harris;2014-07-27 13:23:17 -0500;Merge pull request #4905 from juliantaylor/doc-update
documentation updates
==
==================
638e627;Austin Godber;2014-07-18 06:40:20 -0700;DOC: numpy.testing documentation clarification of "Raise an assertion"
"Raise an assertion" was changed to "Raises an AssertionError" to clarify that
an exception named AssertionError will be raised.
Closes gh-4884

[ci skip]

==

numpy/testing/utils.py
==================
60d2cb1;Julian Taylor;2014-07-27 11:22:23 +0200;TST: test reduction argument parsing
In case we might want it up in future

==

numpy/core/tests/test_ufunc.py
==================
236c23b;Julian Taylor;2014-07-26 17:00:48 +0200;DOC: add a note on the potential string dtype change

==

doc/release/1.9.0-notes.rst
==================
e8a4358;Talha Oz;2014-07-18 01:13:34 -0400;DOC: fix PEP links in HOWTO_DOCUMENT.rst.txt

==

doc/HOWTO_DOCUMENT.rst.txt
==================
b72346e;Kirill Smelkov;2014-07-17 23:10:17 +0400;DOC: NPY_ITEM_LISTPICKLE -> NPY_LIST_PICKLE
There is no NPY_ITEM_LISTPICKLE - it was NPY_LIST_PICKLE from the
beginning - from c3551579 (Expand usage of hasobject to be a flag-like
entity keeping track of how the data-type should be used.)

The documentation in the same rst file even uses the correct identifier
later, so it was just a typo/thinko.

==

doc/source/reference/c-api.types-and-structures.rst
==================
70e88ca;Kirill Smelkov;2014-07-16 11:41:21 +0400;MAINT: .gitignore += generated umath/loops.h
Commit 494abcf1 (ENH: speed-up minimum, maximum and xor for bool dtype)
reworked numpy/core/src/umath/loops.h to be autogenerated at build time,
but forgot to update .gitignore.

Fix it, so that the now-autogenerated loops.h do not constantly show as
untracked in git status output.

==

.gitignore
==================
c32d0cb;Julian Taylor;2014-07-23 21:27:49 +0200;DOC: remove obsolete NA documentation page

==

doc/source/reference/routines.maskna.rst
==================
fa1b71f;Julian Taylor;2014-07-23 21:12:07 +0200;DOC: add some missing ma functions to reference
closes gh-4898

==

doc/source/reference/routines.ma.rst
==================
dd70de2;Julian Taylor;2014-07-23 01:24:45 +0200;DOC: document behavior of ma.sort(endswith=) for unmasked min/max values
see gh-4422

==

numpy/ma/core.py
==================
d1c4a69;Julian Taylor;2014-07-22 01:28:20 +0200;DOC: add version added tag to reduction keepdims argument

==

numpy/add_newdocs.py
==================
ef269d5;Julian Taylor;2014-07-19 12:02:09 +0200;DOC: fix documented return value of tostring/tobytes
The function returns bytes not strings. This is relevant in python3.

==

numpy/add_newdocs.py
==================
0bdd45a;Julian Taylor;2014-07-18 23:22:01 +0200;MAINT: add common source indexer files to .gitignore
ignore cscope and gnu global files

==

.gitignore
==================
9e8c1ad;Julian Taylor;2014-07-18 23:18:54 +0200;DOC: add ascontiguousarray and asarray_chkfinite to appropriate section
added to "Changing kind of array" with the other as* functions
Closes gh-4890

==

doc/source/reference/routines.array-manipulation.rst
==================
4507dd6;Julian Taylor;2014-07-18 23:08:07 +0200;DOC: document non-integer reduce axis argument deprecation

==

doc/release/1.9.0-notes.rst
==================
9ae5b5f;Charles Harris;2014-07-27 12:00:58 -0500;Merge pull request #4907 from juliantaylor/win-alignment
TST: win32 also does not provide 16 byte alignment
==
==================
7eefe92;Julian Taylor;2014-07-27 12:51:49 +0200;TST: win32 also does not provide 16 byte alignment
mingw builds set the alignment requirement for complex doubles types to
16 byte so the tests checking the alignment flag must be disabled.

==

numpy/core/tests/test_numeric.py
numpy/f2py/tests/test_array_from_pyobj.py
==================
1c11f98;Julian Taylor;2014-07-18 23:05:05 +0200;DOC: clarify that umfpack, fftw and djbfft are not used by numpy
their presence in site.cfg is only for the benefit of third party
packages using numpy.distutils

==

site.cfg.example
==================
e04e79a;Julian Taylor;2014-07-24 23:44:42 +0200;ENH: intern some commonly used strings in the multiarray module
Allows improving dictionary lookup performance.

==

numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/multiarraymodule.h
==================
3b5f871;Julian Taylor;2014-07-23 21:17:55 +0200;Merge pull request #4887 from ewmoore/conj_obj
BUG: object array np.conjugate, ndarray.conjugate inconsistent
==
==================
5941fc9;Eric Moore;2014-07-18 11:04:29 -0400;BUG: object array np.conjugate, ndarray.conjugate inconsistent
fixes gh-4730

==

numpy/core/src/multiarray/calculation.c
numpy/core/tests/test_multiarray.py
==================
236ca8b;Julian Taylor;2014-07-23 19:49:30 +0200;Merge pull request #4866 from mhvk/ma/mvoid-initialisation
BUG Masked recarray assignment with [row][record] does not work
==
==================
c96bc5d;Julian Taylor;2014-07-23 19:43:56 +0200;Merge pull request #4889 from juliantaylor/object-array-init
BUG: initialize object array of array on resize and zeros
==
==================
809938d;Julian Taylor;2014-07-23 01:16:58 +0200;Merge pull request #4888 from pv/fix-bytes-encoding-unpickle
ENH: core: make unpickling with encoding='bytes' work
==
==================
16f39c8;Pauli Virtanen;2014-07-19 00:23:58 +0300;BUG: core: ensure unpickled dtype fields and names have correct types + coerce on Py3
That 'names' is a tuple and 'fields' a dict (when present) is assumed in
most of the code base, so check them during unpickling.

Also add coercion from bytes using ASCII codec on Python 3.  This is
never triggered in the "usual" case of loading Py3-generated pickles on
Py3, but can occur if loading Py2 generated pickles with
pickle.load(f, encoding='bytes'), which sometimes is the only working
option.

The ASCII codec is probably the safest choice and likely covers most use
cases.

==

numpy/core/src/multiarray/descriptor.c
numpy/core/tests/test_regression.py
==================
4008bb4;Pauli Virtanen;2014-07-18 19:48:06 +0300;ENH: core: make unpickling with encoding='bytes' work
Make dtype.__setstate__ accept endian either as a byte string or unicode.

Also fix a missing error return introduced in c3551579, apparently
mistake.

==

numpy/core/src/multiarray/descriptor.c
numpy/core/tests/test_regression.py
==================
a28bfa5;Julian Taylor;2014-07-20 23:48:54 +0200;Merge pull request #4892 from rgommers/msvc10-fix
BLD: fix build issues with MSVC10 on Windows.  Closes gh-4245.
==
==================
fa0ec11;Ralf Gommers;2014-07-20 21:39:38 +0200;BLD: fix build issues with MSVC10 on Windows.  Closes gh-4245.
Note that there are a few similar patches posted to gh-4101 and gh-4245.
Those were all patches to msvc9compiler in Python distutils.
Monkeypatching ``MSVCCompiler.link`` is less easy than this change
to ``config._check_compiler``; effect should be the same.

Also updates the error message shown when initializing MSVC fails.

[ci skip]

==

numpy/distutils/command/config.py
==================
4cbced2;Julian Taylor;2014-07-19 00:48:41 +0200;Merge pull request #4883 from pv/fix-scalar-unpickle-py3
ENH: core: add hack enabling unpickling Py2 pickled scalars on Py3 under encoding='latin1'
==
==================
fcce027;Pauli Virtanen;2014-07-18 15:14:21 +0300;ENH: core: add hack enabling unpickling Py2 pickled scalars on Py3 under encoding='latin1'
There is a similar hack in place for arrays, but scalar unpickling was not covered.

Provides a workaround for gh-4879

==

numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_regression.py
==================
4e32035;Julian Taylor;2014-07-19 00:02:49 +0200;Merge pull request #4882 from pv/fix-unpickle-latin1-crash
BUG: core: fix crash when unpickling data on Py3 under non-latin1 encoding
==
==================
c09d0ce;Julian Taylor;2014-07-18 21:31:44 +0200;BUG: initialize object array of array on resize and zeros
np.zeros(2, dtype=[('k', object, 2)]) did only initialize the first
element to zero while the rest stayed None.

    In [1]: numpy.zeros(2, dtype=[('k', object, 2)])
    Out[1]:
    array([([0, None],), ([0, None],)],
          dtype=[('k', 'O', (2,))])

This is a surprising and likely not intended behavior which is fixed
here.
The changed function PyArray_FillObjectArray is only used with None or
zero inputs from numpy, though as its part of the API it could affect
third parties but this is not very likely.

Additionally the memory after the first element was not initialized when
the object was resized.
Closes gh-4857

==

numpy/core/src/multiarray/refcount.c
numpy/core/src/multiarray/shape.c
numpy/core/tests/test_multiarray.py
==================
cd062f5;Pauli Virtanen;2014-07-18 14:49:20 +0300;BUG: core: fix crash when unpickling data on Py3 under non-latin1 encoding

==

numpy/core/src/multiarray/methods.c
numpy/core/tests/test_regression.py
==================
4ed00c7;Marten van Kerkwijk;2014-07-16 11:03:43 +0200;BUG Make ma[row][rec] setter work by avoiding copy in mvoid.__new__

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
d75c549;Charles Harris;2014-07-17 14:00:29 -0500;Merge pull request #4877 from juliantaylor/reduce-float-axis
DEP: deprecate float as axis argument to reductions
==
==================
011bb15;Julian Taylor;2014-07-17 20:36:22 +0200;Merge pull request #4878 from nouiz:doc

==
==================
88cf0e4;Frederic;2014-07-17 14:16:55 -0400;DOC: fix return shape of tensorinv doc

==

numpy/linalg/linalg.py
==================
5b86b76;Julian Taylor;2014-07-17 20:05:14 +0200;DEP: deprecate float as axis argument to reductions
consistent with deprecation of float as slice indices.
Closes gh-4876

==

numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_deprecations.py
==================
e49be3c;Charles Harris;2014-07-16 19:21:44 -0500;Merge pull request #4875 from juliantaylor/test-reduce
TST: remove not important tests to reduce travis load
==
==================
92ead9b;Charles Harris;2014-07-16 18:51:10 -0500;Merge pull request #4873 from juliantaylor/masked-sort-memory
ENH: avoid meshgrid and fancy indexing for 1d masked sort
==
==================
b36af0c;Julian Taylor;2014-07-16 23:17:37 +0200;TST: remove not important tests to reduce travis load
Remove one of the separate compilation and relaxed strides tests, it is
not worth the cpu time to test these on two python versions.
Use one of them to add a non debug python3.4 test.

==

.travis.yml
==================
acc3369;Julian Taylor;2014-07-16 22:38:59 +0200;ENH: avoid meshgrid and fancy indexing for 1d masked sort
Improves performance by using the simple indexing path and memory by
avoiding creating a full meshgrid.

==

numpy/ma/core.py
==================
4e41192;Julian Taylor;2014-07-16 22:12:40 +0200;Merge pull request #4870 from juliantaylor/linspace-version-doc
DOC: add version added tag to new linspace dtype argument
==
==================
3f60022;Julian Taylor;2014-07-16 21:17:53 +0200;DOC: add version added tag to new linspace dtype argument

==

numpy/core/function_base.py
==================
bd2d8df;Charles Harris;2014-07-15 18:08:51 -0500;Merge pull request #4869 from endolith/patch-1
DOC: fix a typo and use TeX for plot labels
==
==================
71a9c6c;endolith;2014-07-15 19:06:30 -0400;DOC: fix a typo and use TeX for plot labels

==

doc/source/reference/routines.polynomials.classes.rst
==================
a0c3c1d;Julian Taylor;2014-07-15 19:50:03 +0200;Merge pull request #4850 from notsimon/osx_endianness
BLD: fix endianness detection from endian.h with clang on osx 10.9
==
==================
2ec3fc0;Julian Taylor;2014-07-11 01:14:10 +0200;Merge pull request #4861 from jaimefrio/tri_with_inf
BUG: inf turned to nan when calling np.triu/np.tril, fixes #4859
==
==================
1392888;jaimefrio;2014-07-10 09:03:16 -0700;BUG: Use `np.where` in np.triu/np.tril, fixes #4859
Replaces the current method to zero items, from multiplication to
using `np.where`.

==

numpy/lib/tests/test_twodim_base.py
numpy/lib/twodim_base.py
==================
ea6f909;Charles Harris;2014-07-10 10:34:10 -0500;Merge pull request #4852 from ewmoore/gen_frexp
Generate ufuncs for frexp and ldexp
==
==================
56b5f27;Charles Harris;2014-07-10 10:30:18 -0500;Merge pull request #4856 from juliantaylor/elide-testcases
TST: add temporary elision testcases
==
==================
2e83a5d;Julian Taylor;2014-07-09 21:17:47 +0200;TST: add temporary elision testcases
A very significant optimization for numpy would be to avoid the
temporaries in these types of expressions:

    res = a + b + c

transforming it into:

    res = a + b
    res += c

An approach to do that is to check the reference count of the PyNumber
slot arguments, temporary expressions coming from python have reference
count 1 and can be converted to inplace operations.
Unfortunately C-extensions can skip increasing reference counts for
operations breaking the assumption that an inplace operation can be
performed, e.g. Cython does this type of optimizations.
To ensure to not accidentally break such extensions in future test
that refcount == 1 operands from extensions are not elided.

==

numpy/core/src/multiarray/multiarray_tests.c.src
numpy/core/tests/test_multiarray.py
==================
aba6adb;Charles Harris;2014-07-09 14:09:47 -0500;Merge pull request #4854 from juliantaylor/i386-alignment
BUG: add missing elementsize alignment check for simd reductions
==
==================
7ee56eb;Eric Moore;2014-07-08 15:10:18 -0400;MAINT: Add frexp and ldexp to npymath and generate their ufuncs

==

numpy/core/code_generators/generate_umath.py
numpy/core/code_generators/ufunc_docstrings.py
numpy/core/include/numpy/npy_math.h
numpy/core/src/npymath/npy_math.c.src
numpy/core/src/umath/loops.c.src
numpy/core/src/umath/loops.h.src
numpy/core/src/umath/umathmodule.c
==================
f8ce5d1;Simon Guillot;2014-07-09 13:41:26 +0200;reorder endianness checks

==

numpy/core/include/numpy/npy_endian.h
==================
7cf7d21;Julian Taylor;2014-07-08 23:35:59 +0200;BUG: add missing elementsize alignment check for simd reductions
e.g. doubles are only aligned to 4 bytes on i386 so one cannot peel them
to 16 byte alignment.
Closes gh-4853

==

numpy/core/src/umath/simd.inc.src
numpy/core/tests/test_scalarmath.py
numpy/core/tests/test_umath.py
==================
8915b33;Simon Guillot;2014-07-07 18:33:20 +0200;fall back to the cpu branch if no endianness defines are found

==

numpy/core/include/numpy/npy_endian.h
==================
a824fc2;Eric Moore;2013-10-15 11:32:29 -0400;MAINT: npy_a(exp,log,sqrt,fabs) don't really exist.

==

numpy/core/include/numpy/npy_math.h
==================
251acc0;Julian Taylor;2014-07-07 17:16:16 +0200;Merge pull request #4842 from cournape/fix_intrinsics_detection
fix unknown attribute warnings under clang
==
==================
d0689a3;David Cournapeau;2014-07-07 23:17:11 +0900;REF: remove obsolete code.

==

numpy/distutils/ccompiler.py
numpy/distutils/command/autodist.py
numpy/distutils/command/config.py
==================
8a1496d;David Cournapeau;2014-07-07 21:16:30 +0900;FEAT: add a check_gcc_variable_attribute function in config command.

==

numpy/core/setup.py
numpy/distutils/command/autodist.py
numpy/distutils/command/config.py
==================
9cede27;David Cournapeau;2014-07-07 20:47:10 +0900;ENH: use pragma instead of generic warning when detecting for function attributes.

==

numpy/distutils/command/autodist.py
==================
1616767;Simon Guillot;2014-07-07 13:42:13 +0200;fix endianness detection with clang on osx 10.9

==

numpy/core/include/numpy/npy_endian.h
==================
dc98a3d;Charles Harris;2014-07-06 23:49:41 -0600;Merge pull request #4671 from charris/prepare-1.10-devel
MAINT: start 1.10-devel.
==
==================
594b0de;Charles Harris;2014-07-06 23:43:25 -0600;Merge pull request #4697 from charris/update-1.9.0-notes
DOC: Update 1.9.0-notes to mention pairwise summation.
==
==================
d244ec7;Charles Harris;2014-07-06 14:00:09 -0600;Merge pull request #4847 from juliantaylor/writeable2
better writeable flag fix
==
==================
4352957;Julian Taylor;2014-07-06 21:33:37 +0200;MAINT: fix a compiler warning

==

numpy/core/src/multiarray/mapping.c
==================
0d744c4;Julian Taylor;2014-07-06 21:29:34 +0200;MAINT: better fix for subclass writeable flag preservation

==

numpy/core/src/multiarray/mapping.c
==================
1c71d46;Charles Harris;2014-07-06 11:26:56 -0600;Merge pull request #4351 from njsmith/matmul-pep
A new PEP for infix matrix multiplication
==
==================
35626e7;Julian Taylor;2014-07-06 18:50:53 +0200;Merge pull request #4844 from charris/spellcheck-some-files
MAINT: Spellcheck some files.
==
==================
ca397d8;Julian Taylor;2014-07-06 18:49:21 +0200;Merge pull request #4839 from juliantaylor/buffer-overflow
BUG: fix buffer overflow in data array of ldexp and frexp
==
==================
d4a4e99;Charles Harris;2014-07-04 09:58:05 -0600;MAINT: Spellcheck some files.
Fix spelling and grammar in

numpy/core/src/multiarray/mapping.c
numpy/core/tests/test_indexing.py
numpy/core/tests/test_regression.py

==

numpy/core/src/multiarray/mapping.c
numpy/core/tests/test_indexing.py
numpy/core/tests/test_regression.py
==================
94417e4;Charles Harris;2014-07-06 10:43:41 -0600;Merge pull request #4843 from juliantaylor/subclass-writeable
BUG: retain writeable flag when indexing subclasses
==
==================
77d62bb;Julian Taylor;2014-07-06 15:35:41 +0200;BUG: retain writeable flag when indexing subclasses

==

numpy/core/src/multiarray/mapping.c
numpy/core/tests/test_indexing.py
==================
8dba040;Charles Harris;2014-07-06 10:06:50 -0600;Merge pull request #4804 from seberg/fancy-ass-1d
WIP: Fix matplotlib, etc. errors
==
==================
8457aab;David Cournapeau;2014-07-06 03:17:22 -0700;BUG: fix check_gcc_function_attribute when attribute is actually supported.

==

numpy/distutils/command/autodist.py
==================
6b03099;David Cournapeau;2014-07-06 17:57:16 +0900;ENH: don't use check_func anymore for check_compile_without_warning.

==

numpy/core/setup.py
==================
2b1179f;David Cournapeau;2014-07-06 17:57:01 +0900;FEAT: add check to ensure compilation without warning for a piece of code.

==

numpy/distutils/command/autodist.py
numpy/distutils/command/config.py
==================
4769fe7;David Cournapeau;2014-07-06 17:17:41 +0900;FEAT: add check_gcc_function_attribute check.

==

numpy/core/setup.py
numpy/distutils/command/autodist.py
numpy/distutils/command/config.py
==================
66c792b;David Cournapeau;2014-07-06 17:17:11 +0900;FEAT: add a try_output_compile in numpy.distutils.

==

numpy/distutils/ccompiler.py
numpy/distutils/command/config.py
==================
81242f6;Charles Harris;2014-07-05 15:36:51 -0600;Merge pull request #4841 from juliantaylor/alloc-hook-gc
BUG: disable garbage collector during memory allocation hook
==
==================
c9c53ea;Julian Taylor;2014-07-05 23:09:12 +0200;BUG: disable garbage collector during memory allocation hook
When a cython object contains numpy arrays the pure python allocation
hook can trigger during cythons __dealloc__ method and trigger a second
deletion of the object currently being deleted.
To minimize the probabily that that happens disable the garbage
collector during the hook.
As this involves python calls it is still possible that a double delete
occurs but chances are lowered, a proper solution would be C only hook
like python 3.4 tracemalloc module.

Closes gh-4834

==

tools/allocation_tracking/track_allocations.py
==================
9c4d48c;Sebastian Berg;2014-07-05 21:59:43 +0200;BUG: Add missing error incref in 1d indexing fallback

==

numpy/core/src/multiarray/mapping.c
==================
ed88fa9;Sebastian Berg;2014-07-05 18:43:13 +0200;BUG: boolean assignment; allow wrong number of elements
Uses old code to be more broad then previous commit

==

numpy/core/src/multiarray/mapping.c
==================
7434481;Sebastian Berg;2014-07-05 18:02:28 +0200;DEP: Allow high dim boolean assignment, but deprecate it

==

numpy/core/src/multiarray/mapping.c
==================
4b8c9fd;Julian Taylor;2014-07-05 15:14:33 +0200;BUG: fix buffer overflow in data array of ldexp and frexp
the number types does not match the size of the blank array anymore, use
a larger array and add asserts to ensure the size matches.

==

numpy/core/src/umath/umathmodule.c
==================
7a2b14a;Charles Harris;2014-07-04 13:22:34 -0600;Merge pull request #4837 from juliantaylor/select-bug
BUG: wrong selection for orders falling into equal ranges
==
==================
d6c7a16;Julian Taylor;2014-07-04 18:54:17 +0200;BUG: wrong selection for orders falling into equal ranges
when orders are selected where the kth element falls into an equal range
the the last stored pivot was not the kth element, this leads to losing
the ordering of smaller orders as following selection steps can start at
index 0 again instead of the at the offset of the last selection.
Closes gh-4836

==

numpy/core/src/npysort/selection.c.src
numpy/core/tests/test_multiarray.py
==================
e8d1374;Charles Harris;2014-07-03 16:56:08 -0600;Merge pull request #4812 from juliantaylor/align-bloat
Align bloat
==
==================
1d96a95;Julian Taylor;2014-06-30 23:19:51 +0200;TST: disable tests that fail due to bad alignment on sparc
(debian) sparc system malloc does not provide the alignment required by 16 byte
long double types this means the inout intent cannot be satisfied and several
tests fail as the alignment flag can be randomly true or fals when numpy gains
an aligned allocator the tests could be enabled again.

==

numpy/core/tests/test_numeric.py
numpy/f2py/tests/test_array_from_pyobj.py
==================
9bdd5d4;Julian Taylor;2014-06-19 14:58:39 +0200;BUG: fix transpose not updating alignment flag
transposing structured arrays can lose alignment

==

numpy/core/src/multiarray/shape.c
numpy/core/tests/test_numeric.py
==================
83524f6;Julian Taylor;2014-06-17 19:01:10 +0200;BUG: fix arrays wrapping foreign data losing their alignment flag
e.g. ufunc_at wraps input arrays which without this fix causes the
iterator to choose much slower unaligned code paths.
Also pointers from malloc can be not aligned for long double types, e.g.
on debian sparc.

==

numpy/core/src/multiarray/ctors.c
==================
fc5d7cfb;Julian Taylor;2014-06-17 18:58:35 +0200;BUG: limit type alignment to the largest alignment needed by numpy
clongdouble type required alignment of 32 bytes which is never provided
by numpys allocation scheme so they always took unaligned paths.
As complex types are structs of two smaller types only half the
alignment is actually required for operations on them.
Copying complex types on the other hand might require a larger alignment
as copies can be done on the whole structure so one can not just remove
the doubling of the alignment.

As a compromise limit the maximum alignment to 16 bytes which is double
what the current numpy copy loops require and does not penalize amd64
with unnecessary unaligned code paths in most cases.
16 bytes might be required on sparc to load long doubles.
Complex doubles on i386 will still unnecessarly take unaligned code
paths as the system will not provide 16 byte alignment.
Closes gh-3768

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/common.c
numpy/core/src/private/npy_config.h
==================
b25cdd6;Julian Taylor;2014-06-30 22:45:56 +0200;Merge pull request #4800 from ogrisel/fix-ufunc-pickling
FIX pickling ufuncs defined in nested modules
==
==================
0136d65;Olivier Grisel;2014-06-30 22:13:00 +0200;BUG: pickling ufuncs defined in nested modules

==

numpy/core/__init__.py
numpy/core/tests/test_ufunc.py
==================
c62b14a;Julian Taylor;2014-06-30 19:35:57 +0200;Merge pull request #4801 from larsmans/c-fixes
MAINT: const correctness and minor fixes to C code
==
==================
2762f54;Julian Taylor;2014-06-30 19:33:36 +0200;Merge pull request #4831 from charris/simplify-with-errstate
MAINT: Simplify some uses of errstate context manager.
==
==================
4e3a24b;Julian Taylor;2014-06-30 19:32:15 +0200;Merge pull request #4828 from ogrisel/fix-isfileobj-py3
FIX isfileobj accepts write-mode files under PY3
==
==================
49c30fd;Charles Harris;2014-06-30 07:24:53 -0600;Merge pull request #4832 from abalkin/nomask
MAINT: Use an unqualified nomask variable in ma.core.
==
==================
e2254e4;Lev Abalkin;2014-06-30 08:51:56 -0400;MAINT: Use an unqualified nomask variable in ma.core.

==

numpy/ma/core.py
==================
6efd849;Olivier Grisel;2014-06-26 14:49:59 +0200;FIX isfileobj accepts write-mode files under PY3

==

numpy/compat/py3k.py
numpy/compat/tests/test_compat.py
==================
290f192;Olivier Grisel;2014-06-30 11:09:26 +0200;Move tempdir context manager to numpy.testing.utils

==

numpy/lib/tests/test_io.py
numpy/testing/utils.py
==================
cdfbc69;Charles Harris;2014-05-10 12:35:08 -0600;DOC: Update 1.9.0-notes to mention pairwise summation.

==

doc/release/1.9.0-notes.rst
==================
7298d36;Charles Harris;2014-06-29 20:24:57 -0600;MAINT: Simplify some uses of errstate context manager.
This changes, e.g.,

    with np.errstate():
        np.seterr(divide='ignore')
        ...

to

    with np.errstate(divide='ignore'):
        ...

==

numpy/ma/tests/test_core.py
numpy/ma/tests/test_old_ma.py
==================
efb203c;Charles Harris;2014-06-29 19:54:26 -0600;Merge pull request #4822 from juliantaylor/masked-improv
small masked array performance enhancement
==
==================
ad48eaa;Charles Harris;2014-06-29 19:44:15 -0600;Merge pull request #4823 from juliantaylor/hist-rounding
BUG: handle rounding issue with histogram edges on float32 data
==
==================
2aafae5;Charles Harris;2014-06-26 06:27:10 -0600;Merge pull request #4826 from juliantaylor/umath-static-fixes
umath static analysis fixes
==
==================
2421f2d;Julian Taylor;2014-06-26 01:51:23 +0200;BLD: fix random API hash due to memory references of annotations
also update hash for the new include guard of the api header.

==

numpy/core/code_generators/cversions.txt
numpy/core/code_generators/genapi.py
==================
92fbc04;Julian Taylor;2014-06-26 01:39:07 +0200;MAINT: enable external api use when running cpychecker
allows using the annotations in umath module

==

numpy/core/code_generators/generate_numpy_api.py
==================
578ce46;Julian Taylor;2014-06-26 01:26:25 +0200;BUG: fix some memory leaks found by cpychecker
only the one in normalize___call___args can be can be a real issue.

==

numpy/core/src/private/ufunc_override.h
numpy/core/src/umath/loops.c.src
numpy/core/src/umath/umathmodule.c
==================
7f0f6c8;Charles Harris;2014-06-25 10:13:02 -0600;Merge pull request #4825 from ilam/poly
Polynomial module in Polynomial package Doc example
==
==================
59892ad;Ilambharathi Kanniah;2014-06-24 18:32:03 -0700;DOC Polynomial example import statement corrected. #3615

==

numpy/polynomial/polynomial.py
==================
c613147;Ilambharathi Kanniah;2014-06-24 18:27:02 -0700;DOC Polynomial example import statement updated. #3615

==

numpy/polynomial/polynomial.py
==================
305b26b;Julian Taylor;2014-06-23 20:51:47 +0200;MAINT: replace two step errstate change with a direct change

==

numpy/ma/core.py
==================
ad902ff;Julian Taylor;2014-06-23 20:50:11 +0200;ENH: use copy to move the masked values into the result
saves a relatively expensive bool -> x cast

==

numpy/ma/core.py
==================
e20d4b9;Julian Taylor;2014-06-23 22:44:05 +0200;BUG: handle rounding issue with histogram edges on float32 data
Following inequality causes wrong counting at the edges and can be avoided by
making the edge array of the same type as the input data.

In [1]: np.around(np.float64(6010.36962890625), 5)
Out[1]: 6010.3696300000001
In [2]: np.around(np.float32(6010.36962890625), 5)
Out[2]: 6010.3701

Closes gh-4799

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
fe3410f;Nathaniel J. Smith;2014-06-19 16:25:29 +0100;Merge pull request #4816 from juliantaylor/star-import
MAINT: move star imports to end of numeric.py
==
==================
621c0a6;Julian Taylor;2014-06-19 13:19:59 +0200;MAINT: move star imports to end of numeric.py
allows static analysis (e.g. pyflakes) to detect undefined names

==

numpy/core/numeric.py
==================
133d4f4;Charles Harris;2014-06-17 06:46:07 -0600;Merge pull request #4809 from adamreeve/swig_typemap_fix
Fix SWIG typemaps for Fortran ordered array input
==
==================
ef4806a;Charles Harris;2014-06-16 21:55:01 -0600;Merge pull request #4803 from juliantaylor/doc-updates
Doc updates
==
==================
71fc802;Adam Reeve;2014-06-16 10:12:16 +1200;Fix typemap for Fortran ordered array input
The typemaps with size parameters after the array pointer were correct,
but the typemaps with size parameters before the array pointer created
arrays with C ordering.

==

tools/swig/numpy.i
==================
480432b;Sebastian Berg;2014-06-12 00:30:16 +0200;WIP: Fix matplotlib, etc. errors

==

numpy/core/src/multiarray/mapping.c
numpy/core/tests/test_indexing.py
numpy/core/tests/test_regression.py
==================
d70431d;Julian Taylor;2014-06-14 10:19:04 +0200;DOC: add full/full_like
closes gh-4805
[ci skip]

==

doc/source/reference/routines.array-creation.rst
==================
75bb95f;Julian Taylor;2014-06-11 21:50:18 +0200;DOC: update numpydoc to tag v0.5

==

doc/sphinxext
==================
5a52edd;Julian Taylor;2014-06-11 21:33:16 +0200;DOC: fix a couple mistakes in the indexing documentation
closes gh-618

==

doc/source/reference/arrays.indexing.rst
==================
6e2a69b;Julian Taylor;2014-06-11 21:14:12 +0200;DOC: remove wrong mention of .gz in np.load
closes gh-312

==

numpy/lib/npyio.py
==================
118dc9e;Julian Taylor;2014-06-11 21:11:06 +0200;DOC: fix signature of PyArray_NewShape in C-API docs
closes gh-4579

==

doc/source/reference/c-api.array.rst
==================
6ec8a1d;Julian Taylor;2014-06-11 21:05:08 +0200;DOC: document broadcastable lam parameter of poisson
closes gh-4526

==

numpy/random/mtrand/mtrand.pyx
==================
59b5606;Lars Buitinck;2014-06-10 22:15:33 +0200;MAINT: const correctness and minor fixes to C code

==

doc/source/reference/c-api.types-and-structures.rst
numpy/core/include/numpy/ufuncobject.h
numpy/core/src/multiarray/lowlevel_strided_loops.c.src
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/ufunc_type_resolution.c
==================
89d9add;Charles Harris;2014-06-09 14:23:18 -0600;Merge pull request #4796 from juliantaylor/msvc-fix
BLD: workaround msvc being stupid
==
==================
fb35105;Julian Taylor;2014-06-09 20:00:23 +0200;BLD: workaround msvc being stupid
Apparently it tries to respect calling conventions for static inline
functions so the 4th variable can't be passed over the stack as it needs
16 byte alignment.
Work around this by passing the variable as a pointer.
Closes gh-4795

==

numpy/core/src/umath/simd.inc.src
==================
10098da;Julian Taylor;2014-06-08 16:29:06 +0200;Merge pull request #4454 from jurnix/namedargs
ENH: apply_along_axis accepts named arguments
==
==================
c346477;Julian Taylor;2014-06-08 16:21:12 +0200;Merge pull request #4793 from juliantaylor/sha256-sums
BLD: compute sha256 sums of build artifacts
==
==================
621b14e;Julian Taylor;2014-06-08 16:20:43 +0200;Merge pull request #4792 from Juanlu001/piecewise-fix
Piecewise fix for 0d
==
==================
f451a9c;Julian Taylor;2014-06-08 15:56:58 +0200;BLD: compute sha256 sums of build artifacts
Using a secure hash allows verifying ther binaries from a gpg signed
README.txt.
MD5 just kept for legacy users who may not be able to obtain a sha256
utility.

==

pavement.py
==================
292b9ff;Juan Luis Cano Rodríguez;2014-06-07 21:52:29 +0200;BUG: Fixed piecewise function for 0d input
When `x` has more than one element the condlist `[True, False]`
is being made equivalent to `[[True, False]]`, which is correct.
However, when `x` is zero dimensional the expected condlist is
`[[True], [False]]`: this commit addresses the issue. Besides,
the documentation stated that there could be undefined values
but actually these are 0 by default: using `nan` would be desirable,
but for the moment the docs were corrected. Closes #331.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
db710ce;Julian Taylor;2014-06-08 15:04:51 +0200;Merge pull request #4789 from juliantaylor/release-notes-19b1
DOC: add some highlights to release notes
==
==================
5f31255;Julian Taylor;2014-06-07 13:52:31 +0200;DOC: add some highlights to release notes and reorganize
also minor general documentation fixes
[ci skip]

==

doc/release/1.9.0-notes.rst
doc/source/reference/swig.interface-file.rst
==================
49b0628;Julian Taylor;2014-06-08 14:56:58 +0200;Merge pull request #4786 from juliantaylor/cross-style
MAINT: improve readablility of cross and improve test coverage
==
==================
3087de3;Julian Taylor;2014-06-08 14:56:21 +0200;Merge pull request #4790 from juliantaylor/log2-windows
BUG: improve log2 windows compiler fallback of log2
==
==================
079b741;Julian Taylor;2014-06-08 14:55:45 +0200;Merge pull request #4788 from jaimefrio/unique_nonarray
BUG: Correct behavior for lists of tuples in unique, closes #4785
==
==================
c73405d;Julian Taylor;2014-06-07 14:10:41 +0200;BUG: improve log2 windows compiler fallback of log2
Fallback (similar to python3.4 math.log2) provides int(log(2**i)) == i
in default rounding mode.
Non-default rounding modes not tested but if it does not work we are at
least not worse than python.
Closes gh-4787

==

numpy/core/src/npymath/npy_math.c.src
numpy/core/tests/test_umath.py
==================
22df076;Julian Taylor;2014-06-06 19:35:56 +0200;MAINT: improve readablility of cross and improve test coverage

==

numpy/core/numeric.py
numpy/core/tests/test_numeric.py
==================
4452960;jaimefrio;2014-06-06 16:57:14 -0700;BUG: Correct behavior for lists of tuples in unique, closes #4785
np.unique produces wrong results when passed a list of tuples and
no keyword arguments, as it fails to recognize it as a multidim
array, but handles it as a 1D array of objects. The only way around
this seems to be to completely eliminate the fast path for non-array
inputs using `set`.

==

numpy/lib/arraysetops.py
numpy/lib/tests/test_arraysetops.py
==================
7f8aae0;jurnix;2014-06-06 10:40:32 +0200;PEP8 nitpicks

==

numpy/lib/shape_base.py
==================
4c854c2;Charles Harris;2014-06-04 18:24:17 -0600;Merge pull request #4784 from jaimefrio/iter-dealloc-gufunc
BUG: Avoid double iterator deallocation in `ufunc_object.c`
==
==================
a95c8e4;jaimefrio;2014-06-04 16:22:13 -0700;BUG: Avoid double iterator deallocation in `ufunc_object.c`
In `PyUFunc_GeneralizedFunction`, whenever a call to
`NpyIter_GetIterNext` fails, `NpyIter_Deallocate` is called twice, one
right after the error check, the second in the `goto fail`. Removed
the first one.

==

numpy/core/src/umath/ufunc_object.c
==================
805e11a;Charles Harris;2014-06-04 17:18:13 -0600;Merge pull request #4783 from juliantaylor/flat-assign-improve
ENH: use copyswap instead of memmove for flat assignment
==
==================
b3ecb09;Charles Harris;2014-06-04 16:36:18 -0600;Merge pull request #4782 from juliantaylor/where-string-fix
BUG: fix where not filling string types properly
==
==================
b9b9add;Julian Taylor;2014-06-05 00:23:38 +0200;ENH: use copyswap instead of memmove for flat assignment
improves d.flat = x performance by about 35% for basic types as the
copyswap functions have known elementsizes and these are implemented
optimally by the compiler while for the generic call the compiler needs
to call out to libc.

==

numpy/core/src/multiarray/getset.c
==================
e2e49c7;Julian Taylor;2014-06-04 23:58:38 +0200;BUG: fix where not filling string types properly
the copyswap part of where used the input arrays descriptions to copy
into the destination so if they had a smaller size the destination was
not properly padded with zeros.
Closes gh-4778

==

numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_multiarray.py
==================
7860d2e;Charles Harris;2014-06-04 15:08:17 -0600;Merge pull request #4781 from juliantaylor/cpucaps-build
BLD: add a simple python file to build cpucaps.dll
==
==================
c345ee6;Charles Harris;2014-06-04 14:54:51 -0600;Merge pull request #4777 from juliantaylor/byteswap-align
BUG: check alignment of strides for byteswap
==
==================
3cca518;Julian Taylor;2014-06-04 21:06:12 +0200;BLD: add a simple python file to build cpucaps.dll
using scons seems to fail with wine 1.6, but one only needs to run three
commands so its simpler to just put these into a script instead of
trying to debug scons.

==

tools/win32build/README.txt
tools/win32build/build-cpucaps.py
==================
9749fa9;Julian Taylor;2014-06-04 19:58:03 +0200;BUG: check alignment of strides for byteswap
closes gh-4774

==

numpy/core/src/multiarray/ctors.c
==================
d856a7f;Charles Harris;2014-06-03 16:51:14 -0600;Merge pull request #4773 from juliantaylor/win-testfix
BUG: fix test deleting temporary file before using it on windows
==
==================
21ea30b;Julian Taylor;2014-06-03 22:46:08 +0200;TST: add a format 2.0 roundtrip test

==

numpy/lib/tests/test_io.py
==================
f7f838b;Julian Taylor;2014-06-03 21:26:52 +0200;BUG: fix test deleting temporary file before using it on windows
The version check was not valid for python3, though the whole logic can
be removed with a finally clause.
This requires that the savez tests need to cleanup the NpyzFile results
which still hold an open file descriptor.

==

numpy/lib/tests/test_io.py
==================
3f5e457;Charles Harris;2014-06-03 12:28:56 -0600;Merge pull request #4772 from juliantaylor/scope-red
MAINT: reduce scope of some variables in indexing code
==
==================
e75e930;Julian Taylor;2014-06-03 19:40:43 +0200;MAINT: reduce scope of some variables in indexing code
also improves code generation with gcc-4.8 leading up to a 10%
performance increase on some cpus by removing a stack spill.

==

numpy/core/src/multiarray/lowlevel_strided_loops.c.src
==================
14cc717;Charles Harris;2014-06-02 16:32:02 -0600;Merge pull request #4760 from juliantaylor/masked-median
ENH: rewrite ma.median to improve poor performance for multiple dimensions
==
==================
99ff7a7;Julian Taylor;2014-05-31 13:20:43 +0200;ENH: use masked median for small multidimensional nanmedians

==

numpy/lib/nanfunctions.py
numpy/lib/tests/test_nanfunctions.py
==================
0ae3628;Julian Taylor;2014-05-30 19:06:24 +0200;ENH: rewrite ma.median to improve poor performance for multiple dimensions
many masked median along a small dimension is extremely slow due to the
usage of apply_along_axis which iterates fully in python. The unmasked
median is about 1000x faster.

Work around this issue by using indexing to select the median element
instead of apply_along_axis.

Further improvements are possible, e.g. using the current np.nanmedian
approach for masked medians along large dimensions so partition is used
instead of sort or to extend partition to allow broadcasting over
multiple elements.

Closes gh-4683.

==

numpy/ma/extras.py
numpy/ma/tests/test_extras.py
==================
39fbc1b;Julian Taylor;2014-05-30 19:03:27 +0200;ENH: use sparse meshgrid instead of indices().tolist()
tolist() converts numpy integers to python integers which are converted
back to numpy integers by the indexing.
meshgrid(indexing='ij') returns the indices wanted here as the right type.
triples performance of sorting a size=(200, 200, 50) array along axis 2
and reduces memory usage by almost 40%.

==

numpy/ma/core.py
==================
e6f4366;Charles Harris;2014-06-02 14:07:29 -0600;Merge pull request #4765 from juliantaylor/npyformat-2.0
ENH: add storage format 2.0 with 4 byte header size
==
==================
5e7e24e;Julian Taylor;2014-06-02 22:04:57 +0200;Merge pull request #4770 from charris/meshgrid-doc-maintenance
DOC: Fix indentation and add missing blank lines for meshgrid doc.
==
==================
38dda9d;Charles Harris;2014-06-02 13:48:38 -0600;DOC: Fix indentation and add missing blank lines for meshgrid doc.

==

numpy/lib/function_base.py
==================
dc5a148;Julian Taylor;2014-06-02 21:35:09 +0200;Merge pull request #4768 from depristo/master
ENH: Optimization for pickling random states

the constructor intended for pickling initializes its state via reading /dev/urandom which can be expensive on virtual machines. as the pickle constructor just needs to create any state which will later be initialized these urandom reads are unnecessary.
==
==================
fc50d27;Julian Taylor;2014-06-02 00:29:28 +0200;ENH: add storage format 2.0 with 4 byte header length size
The new format only increases the header length field to 4 bytes.
allows storing structured arrays with a large number of named columns.
The dtype serialization for these can exceed the 2 byte header length
field required by the 1.0 format.
The generic functions automatically use the 2.0 format if the to be
stored data requires it. To avoid unintentional incompatibilies a
UserWarning is emitted when this happens.
If the format is not required the more compatible 1.0 format is used.

Closes gh-4690

==

doc/release/1.9.0-notes.rst
numpy/lib/format.py
numpy/lib/tests/test_format.py
==================
e9f27b9;Julian Taylor;2014-06-02 21:18:18 +0200;Merge pull request #4757 from charris/update-1.9.0-release-notes
DOC: Note nanpercentile in 1.9.0 release notes.
==
==================
e2645bd;Julian Taylor;2014-06-02 21:17:21 +0200;Merge pull request #4769 from juliantaylor/mesh-doc
DOC: add versionadded tags to meshgrid arguments
==
==================
b8222cb;Julian Taylor;2014-06-02 20:47:03 +0200;DOC: add versionadded tags to meshgrid arguments
[ci skip]

==

numpy/lib/function_base.py
==================
41dc794;markdepristo;2014-06-02 14:47:35 -0400;Optimization for pickling random states
-- Addresses https://github.com/numpy/numpy/issues/4763

==

numpy/random/__init__.py
==================
b1c69df;Charles Harris;2014-05-31 09:50:44 -0600;Merge pull request #4764 from KillaW0lf04/master
Fix minor error in "squeeze" docstring
==
==================
016b211;Michael Aquilina;2014-05-31 16:20:44 +0100;Fix minor error in "squeeze" docstring

==

numpy/core/fromnumeric.py
==================
d6c9432;Charles Harris;2014-05-30 13:38:20 -0600;Merge pull request #4762 from juliantaylor/hist-test
TST: fix random failing histogram test
==
==================
40bebba;Julian Taylor;2014-05-30 20:41:37 +0200;TST: fix random failing histogram test
histogramdd rounds by decimal=6 so the random numbers may not be
outliers if they are below 1. + 1e6

==

numpy/lib/tests/test_twodim_base.py
==================
a3fda96;Julian Taylor;2014-05-30 20:32:49 +0200;Merge pull request #4761 from dfreese/maint/keepdimsincov
MAINT: Removed code emulating keepdims in cov
==
==================
d41fc7a;David Freese;2014-05-30 10:41:57 -0700;MAINT: Removed code emulating keepdims in cov

==

numpy/lib/function_base.py
==================
db10b93;Charles Harris;2014-05-30 08:50:40 -0600;Merge pull request #4759 from juliantaylor/warning-fix
MAINT: fix a few harmless compiler warnings
==
==================
e5eb95a;Charles Harris;2014-05-29 17:08:14 -0600;DOC: Note nanpercentile in 1.9.0 release notes.

==

doc/release/1.9.0-notes.rst
==================
4215b2c;Julian Taylor;2014-05-30 16:01:29 +0200;MAINT: fix a few harmless compiler warnings

==

numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/number.c
==================
11cdc3d;Julian Taylor;2014-05-30 13:15:10 +0200;Merge pull request #4758 from mforbes/issue_4755
BUG: Don't let meshgrid ignore unknown kwargs. Fixes #4755.
==
==================
83c6d76;Michael McNeil Forbes;2014-05-29 16:22:38 -0700;BUG: Don't let meshgrid ignore unknown kwargs. Fixes #4755.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
b384fbb;Ralf Gommers;2014-05-30 09:52:36 +0200;Merge pull request #4756 from charris/gh-4688
Extend gh-4688 style improvements to whatisnumpy.rst.
==
==================
9cd2998;Charles Harris;2014-05-29 16:40:14 -0600;MAINT: Grammar and style corrections to whatisnumpy.rst.

==

doc/source/user/whatisnumpy.rst
==================
631ae81;Yoni Ben-Meshulam;2014-05-08 19:11:03 -0700;DOC: Fix typos, punctuation, and grammar.

==

doc/source/user/whatisnumpy.rst
==================
d1a2f7d;Charles Harris;2014-05-29 16:30:59 -0600;Merge pull request #4751 from juliantaylor/vonmises-fix
BUG: avoid infinite loop for small kappa in vonmises
==
==================
3d14321;Charles Harris;2014-05-29 16:20:25 -0600;Merge pull request #4692 from juliantaylor/fft-interrupt
BUG: fix crash when sending interrupt signal to fft functions
==
==================
3d88c07;Charles Harris;2014-05-29 16:18:09 -0600;Merge pull request #4745 from dfroger/swig_missing_fragment
BUG: Fix missing fragment in ARGOUTVIEWM typemaps.
==
==================
075872d;Charles Harris;2014-05-29 06:37:27 -0600;Merge pull request #4076 from seberg/advanced-indexing-doc
DOC: Rework the advanced indexing documentation.
==
==================
f731d17;Sebastian Berg;2013-11-24 22:35:34 +0100;DOC: Rework the advanced indexing documentation.
Mostly makes the advanced indexing doc much more example based,
and prominently mentions the np.ix_ function.
Some subtleties (some of which are new) are also mentioned.

==

doc/source/reference/arrays.indexing.rst
==================
4d61a32;Charles Harris;2014-05-28 19:24:25 -0600;Merge pull request #4746 from juliantaylor/void-compare-opt
ENH: improve VOID_compare performance
==
==================
c243ca7;Julian Taylor;2014-05-29 00:03:55 +0200;Merge pull request #4749 from seberg/0d-nanperc-out
BUG: nanpercentile 0-d with output given.
==
==================
69e26e5;Julian Taylor;2014-05-28 19:28:25 +0200;BUG: avoid infinite loop for small kappa in vonmises
rho results in 0. for kappa < 1.4e-8 whch leads to nans appearing and an
infinite loop.
the second order taylor expansion is more precise up to at least 1e-5.
Closes gh-4720

==

numpy/random/mtrand/distributions.c
numpy/random/tests/test_random.py
==================
29f9b6e;Sebastian Berg;2014-05-27 11:44:21 +0200;BUG: nanpercentile/nanmedian 0-d with output given.
Also some PEP-8 fixes and test improvements

==

numpy/lib/nanfunctions.py
numpy/lib/tests/test_nanfunctions.py
==================
3e09d37;seberg;2014-05-28 13:38:50 +0200;Merge pull request #4750 from jaimefrio/tri-sty
STY: Use `.astype`'s `copy` kwarg in `np.tri`
==
==================
2f7cb25;jaimefrio;2014-05-27 10:42:19 -0700;STY: Use `.astype`'s `copy` kwarg in `np.tri`
Replace an explicit type check with setting `copy=False` in call to `astype`.

==

numpy/lib/twodim_base.py
==================
c24cc4e;Julian Taylor;2014-05-27 02:00:58 +0200;Merge pull request #4748 from argriffing/more-linalg-regression-testing
TST: add more regression testing related to https://github.com/numpy/numpy/issues/4733
==
==================
7005eef;alex;2014-05-26 19:44:04 -0400;TST: add more regression testing related to https://github.com/numpy/numpy/issues/4733

==

numpy/linalg/tests/test_regression.py
==================
f80ccb0;Julian Taylor;2014-05-26 23:07:30 +0200;DOC: clarify savetxt delimiter and newline docstring
newline and delimiter can be strings not only single characters
==

numpy/lib/npyio.py
==================
5fe26e6;Julian Taylor;2014-05-26 23:02:52 +0200;Merge pull request #4574 from ggventurini/master
DOC: Docstring fix for `savetxt` (minor change)
==
==================
25518e5;Julian Taylor;2014-05-26 21:43:40 +0200;ENH: improve VOID_compare performance
use small memory cache for the temporary data allocation in the compare
loop and use npy_is_aligned instead of the very expensive signed
division.

Improves unaligned compares which occur in structured arrays with
strings:

d = np.ones((2,10000), dtype=np.dtype([('f0', 'S5'), ('f1', '<i4')]))
%timeit np.argsort(d)
100 loops, best of 3: 8.6 ms per loop

vs before:
100 loops, best of 3: 23.7 ms per loop

==

numpy/core/src/multiarray/arraytypes.c.src
==================
e4dc0c9;Julian Taylor;2014-05-26 21:43:26 +0200;Merge pull request #4721 from juliantaylor/void-index
ENH: avoid expensive PyArg_ParseTuple in void operations
==
==================
d367f63;Julian Taylor;2014-05-26 21:16:37 +0200;Merge pull request #4744 from rgommers/openrisc
BLD: add support for OpenRISC architecture.  Closes gh-4743.
==
==================
39715d5;David Froger;2014-05-26 21:05:00 +0200;BUG: Fix missing fragment in ARGOUTVIEWM typemaps.
The argout typemaps of all the ARGOUTVIEWM typemap suites make use of the
free_cap function, defined in the NumPy_Utilities fragment, which was not
listed in the fragment argument of the typemaps.

As a result, the free_cap function is not included in the source generated
code by SWIG, and the code do not compile (unless another typemap including
the missing fragment has been used).

==

tools/swig/numpy.i
==================
8c72443;Ralf Gommers;2014-05-26 20:35:13 +0200;BLD: add support for OpenRISC architecture.  Closes gh-4743.
Thanks to @manuelafm for the patch.

==

numpy/core/include/numpy/npy_cpu.h
numpy/core/include/numpy/npy_endian.h
==================
0500cbe;Julian Taylor;2014-05-26 18:49:35 +0200;Merge pull request #4731 from juliantaylor/get-libs-default
BUG: don't set a default for libraries configuration key
==
==================
d438067;Julian Taylor;2014-05-16 18:54:57 +0200;ENH: avoid expensive PyArg_ParseTuple in void operations
Replace simple "Oi|O" unpack with faster specialized unpacking

Improves e.g.:

    nrows, ncols = 365, 10000
    items = np.rec.fromarrays(randn(2,265, 10000), names=['widgets','gadgets'])
    row_idx, colidx = randint(0, nrows, ncols), np.arange(ncols)
    %timeit filtered_items = items[row_idx, col_idx]
    In [7]: %timeit filtered_items = items[row_idx, col_idx]
    1000 loops, best of 3: 1.55 ms per loop

to

    In [7]: %timeit filtered_items = items[row_idx, col_idx]
    1000 loops, best of 3: 706 µs per loop

==

numpy/core/src/multiarray/arraytypes.c.src
==================
5bbccc5;Julian Taylor;2014-05-26 18:31:29 +0200;Merge pull request #4734 from dfreese/feature/nanpercentile
ENH: added functionality nanpercentile to numpy
==
==================
d2a56ee;Julian Taylor;2014-05-26 18:27:30 +0200;Merge pull request #4740 from jaimefrio/bool-ops
ENH: speed-up minimum, maximum and xor for bool dtype
==
==================
494abcf;jaimefrio;2014-05-25 00:15:45 -0700;ENH: speed-up minimum, maximum and xor for bool dtype Replaced the operations for the above ufuncs on bools, by simpler single instructions.
On random inputs `np.minimum` and `np.maximum` run about 25% faster,
and `np.logical_xor` and `np.bitwise_xor` almost 3x faster.

==

numpy/core/bscript
numpy/core/setup.py
numpy/core/src/umath/loops.c.src
numpy/core/src/umath/loops.h
numpy/core/src/umath/loops.h.src
numpy/core/tests/test_umath.py
==================
4b42810;Ralf Gommers;2014-05-24 18:04:31 +0200;Merge pull request #4739 from FRidh/docs
Docs: fix numpy.fft.fft2 example
==
==================
9430c7d;Frederik Rietdijk;2014-05-24 17:48:52 +0200;Docs: fix numpy.fft.fft2 example
Fixes issue #4736

The example showed a call to np.fft.fft instead of np.fft.fft2.

==

numpy/fft/fftpack.py
==================
c7f10f7;Charles Harris;2014-05-24 09:31:53 -0600;Merge pull request #4738 from rgommers/gufuncs-doc
DOC: tweak gufunc API documentation, remove broken link.  
==
==================
a075dcb;Ralf Gommers;2014-05-24 16:31:02 +0200;DOC: tweak gufunc API documentation, remove broken link.  Closes gh-4726.

==

doc/source/reference/c-api.generalized-ufuncs.rst
==================
8d492d7;Charles Harris;2014-05-22 16:40:30 -0600;Merge pull request #4735 from argriffing/fix-svd
BUG: svd ufunc typo
==
==================
fea4421;alex;2014-05-22 18:18:46 -0400;BUG: svd ufunc typo

==

numpy/linalg/tests/test_regression.py
numpy/linalg/umath_linalg.c.src
==================
19aa509;David Freese;2014-05-21 16:54:07 -0700;ENH: added functionality nanpercentile to numpy Implemented a nanpercentile and associated tests as an extension of np.percentile to complement the other nanfunctions.

==

numpy/lib/nanfunctions.py
numpy/lib/tests/test_nanfunctions.py
==================
0d483a7;Julian Taylor;2014-05-22 22:05:21 +0200;BUG: check if openblas embeds lapack
add openblas_lapack info which checks if it embedds lapack so
lapack_info will point to openblas
the normal openblas info does not check so it may or may not embed
lapack.
closes gh-4192

==

numpy/distutils/system_info.py
==================
7ec0a06;Julian Taylor;2014-05-22 20:34:53 +0200;BUG: don't set a default for libraries configuration key
the get_libs function assumes there is no default to return the default
it was asked to return in that case.
Closes gh-4607

==

numpy/distutils/system_info.py
==================
848cd10;Julian Taylor;2014-05-22 20:15:15 +0200;MAINT: move variable attribute checks into a common variable
also rename GCC_ATTRIBUTES to FUNCTION_ATTRIBUTES

==

numpy/core/setup.py
numpy/core/setup_common.py
==================
2f6da63;Julian Taylor;2014-03-31 21:58:10 +0200;ENH: optimize STRING_compare by using memcmp

==

numpy/core/src/multiarray/arraytypes.c.src
==================
9dd46ee;seberg;2014-05-19 15:35:52 +0200;Merge pull request #4722 from mtkni/master
BUG: Fix seg fault converting empty string to object
==
==================
9ca38a5;Mike Kelly;2014-05-16 13:09:29 -0400;BUG: Fix seg fault converting empty string to object

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/tests/test_dtype.py
==================
3398b0e;Julian Taylor;2014-05-16 19:27:46 +0200;Merge pull request #4713 from charris/add-numpyversion
ENH: Add the scipy NumpyVersion class.
==
==================
ee49411;Charles Harris;2014-05-16 10:45:51 -0600;Merge pull request #4719 from juliantaylor/fft-test
TST: reduce memory usage of fft test
==
==================
e8e40dc;Charles Harris;2014-05-15 17:41:58 -0600;Merge pull request #4186 from juliantaylor/reduce-opt
Improve small reduction performance
==
==================
edb67b6;Julian Taylor;2014-05-16 00:34:46 +0200;TST: reduce memory usage of fft test
tests should not use more than 500 MB of memory, this one uses more than
a GB. Also it didn't join its threads.

==

numpy/fft/tests/test_fftpack.py
==================
f0497ec;Julian Taylor;2014-01-11 00:41:24 +0100;ENH: avoid keyword arguments for some ufunc.reduce wrappers
PyArg_ParseTupleAndKeywords is pretty slow for keywords as it needs to
create python strings first. Using positional arguments avoids this and
gains 15-20% performance for small reductions.

==

numpy/core/_methods.py
==================
003fcda;Julian Taylor;2014-05-15 23:50:11 +0200;Merge pull request #4626 from cowlicks/ufunc-override-methods
Update ufunc override to work properly with ufunc methods.
==
==================
9c5109c;Charles Harris;2014-05-15 11:00:52 -0600;Merge pull request #4716 from brettrmurphy/patch-1
Changing EPD to Canopy
==
==================
d1af10e;brettrmurphy;2014-05-15 10:24:10 -0500;Changing EPD to Canopy

==

doc/source/user/install.rst
==================
62e4561;Charles Harris;2014-05-14 15:34:53 -0600;ENH: Add the scipy NumpyVersion class.
The class is in numpy/lib/_version.py and can be used to compare
numpy versions when the version goes to double digits.

==

doc/release/1.9.0-notes.rst
numpy/lib/__init__.py
numpy/lib/_version.py
numpy/lib/tests/test__version.py
==================
13b32e9;Charles Harris;2014-05-14 19:26:29 -0600;Merge pull request #4676 from juliantaylor/rand-seed-lim
BUG: reject too large seeds to RandomState
==
==================
6b1a120;Julian Taylor;2014-05-05 19:13:28 +0200;BUG: reject too large seeds to RandomState
mtrand accepts seeds larger than 32 bit but silently truncates them back
to 32 bit. This can lead to accidentally getting the same random stream
for two different seeds, e.g. 1 and 1 + 2**40.

==

doc/release/1.9.0-notes.rst
numpy/random/mtrand/mtrand.pyx
numpy/random/mtrand/numpy.pxd
numpy/random/tests/test_random.py
==================
677ff90;Charles Harris;2014-05-14 18:06:32 -0600;Merge pull request #4712 from juliantaylor/strtoll
BUG: Fix string to uint64 conversion on 32-bit platforms
==
==================
9590c04;Julian Taylor;2014-05-14 21:03:21 +0200;Merge pull request #4711 from pv/scalar-richcmp-fix
BUG: core: allow scalar type richcompare to call ndarray-subclass methods
==
==================
ceffd04;Julian Taylor;2014-05-14 20:31:07 +0200;BUG: Fix string to int64 conversion on 32-bit platforms
closes gh-4575

==

numpy/core/setup_common.py
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/tests/test_multiarray.py
==================
da40eba;Pauli Virtanen;2014-05-14 21:37:16 +0300;BUG: core: allow scalar type richcompare to call ndarray-subclass methods
This makes the scalar richcmp behave exactly as
"array(self) <op> other". The difference comes in when "other" is an ndarray
subclass, in which case this change allows the subclass to override the
comparison operations via usual Python binop dispatch rules.

==

numpy/core/src/multiarray/scalartypes.c.src
numpy/core/tests/test_regression.py
==================
afe32d7;Charles Harris;2014-05-14 08:37:10 -0600;Merge pull request #4699 from charris/fix-ma.count-return-type-check
BUG, TST: Fix tests of ma.count return type.
==
==================
d1987d1;Charles Harris;2014-05-14 08:32:56 -0600;Merge pull request #4708 from jaimefrio/sorter-bug
BUG: searchsorted fails if sorter is not of type np.intp fixes #4698
==
==================
76760cf;jaimefrio;2014-05-13 18:43:25 -0700;BUG: searchsorted fails if sorter is not of type np.intp fixes #4698
The array being passed to the search function was not the one converted
to NPY_INTP, so it only worked if it was of that type to begin with.

==

numpy/core/src/multiarray/item_selection.c
numpy/core/tests/test_multiarray.py
==================
06054c0;Nathaniel J. Smith;2014-05-13 22:33:15 +0100;Merge pull request #4705 from barentsen/patch-1
Fix for unclear resize() error message
==
==================
1ef79bc;Geert Barentsen;2014-05-13 21:54:26 +0100;Fix for unclear array.resize() error message

==

numpy/core/src/multiarray/shape.c
==================
8713ad1;Julian Taylor;2014-05-12 19:41:28 +0200;Merge pull request #4700 from charris/ignore-invalid-value-in-test
BUG: Fix invalid value raised as error when testing on Windows.
==
==================
0c63e8c;Charles Harris;2014-05-11 17:19:03 -0600;BUG: Fix invalid value raised as error when testing on Windows.
The invalid value RuntimeWarning is raised as an error in numpy
testing, and in this case the Window build was raising the warning
for comparisons of NaNs.

Fixes the first error in #4698.

==

numpy/core/tests/test_deprecations.py
==================
cd0d057;Ralf Gommers;2014-05-11 09:04:04 +0200;Merge pull request #4662 from matthew-brett/cythonize-for-wheels
BUG: cythonize sources for wheel build
==
==================
9592bfa;Charles Harris;2014-05-10 21:09:57 -0600;BUG, TST: Fix tests of ma.count return type.
The masked array count method was fixed to use np.intp when doing sums.
The return type is always np.intp except for count(arr, axis=None) when
arr has no mask, in which case the return type is that of ndarray.size.

The test errors were noted in #4698.

==

numpy/ma/tests/test_core.py
numpy/ma/tests/test_old_ma.py
==================
c8ac77c;Blake Griffith;2014-04-18 14:28:37 -0500;TST: Add tests for ufunc.method overrides.

==

numpy/core/tests/test_umath.py
==================
d261913;Blake Griffith;2014-04-30 22:58:03 -0500;BUG: Fix and add ufunc override capabilities to ufunc methods.

==

numpy/core/src/umath/ufunc_object.c
==================
6fdee1c;Blake Griffith;2014-04-18 14:25:10 -0500;BUG: Properly parse ufunc methods with PyUFunc_CheckOverride.

==

numpy/core/src/private/ufunc_override.h
==================
f671012;Charles Harris;2014-05-09 10:20:16 -0600;Merge pull request #4687 from wa03/randBinomFix
BUG: mtrand binomial algorithm is different from original paper algorithm
==
==================
73be3ce;Josh Lawrence;2014-05-09 10:06:31 -0500;Updated release notes to warn users about RNG state changes

==

doc/release/1.9.0-notes.rst
==================
2d7a9ee;Julian Taylor;2014-05-09 15:52:04 +0200;BUG: fix crash when sending interrupt signal to fft functions
the SIGINT handling code must be in the GIL released section so the
longjmp does not skip the retaking.
This implies that the signal handlers must use thread local storage to
avoid a crash when sending interrupt to threaded fft functions.
Distribution of SIGINT to each threads must be handled by the
application as only the master thread receives it
Closes gh-4634

==

numpy/core/include/numpy/npy_common.h
numpy/core/setup.py
numpy/core/src/multiarray/multiarraymodule.c
numpy/fft/fftpack_litemodule.c
==================
9e9ae5f;Julian Taylor;2014-05-09 12:53:55 +0200;Merge pull request #4691 from juliantaylor/travis-fix
TST: update package list for chroot build
==
==================
fbf668e;Julian Taylor;2014-05-09 12:36:11 +0200;TST: update package list for chroot build
travis boxes are again badly out of date

==

tools/travis-test.sh
==================
a2c8da0;Josh Lawrence;2014-05-08 09:50:42 -0500;BUG: mtrand binomial algorithm is different from original paper algorithm

==

numpy/random/mtrand/distributions.c
==================
59d3bbb;Julian Taylor;2014-05-07 23:59:49 +0200;Merge pull request #4684 from perimosocordiae/patch-1
BUG: argwhere is not equivalent to transpose(nonzero(...)))
==
==================
3262c93;CJ Carey;2014-05-07 15:51:24 -0400;removing call to asanyarray

==

numpy/core/numeric.py
==================
02008f7;Charles Harris;2014-05-06 17:21:35 -0600;Merge pull request #4680 from charris/pre-1.9.x-branch
Pre 1.9.x branch
==
==================
27bfcdb;Charles Harris;2014-05-06 17:13:34 -0600;Merge pull request #4656 from foogod/master
Fix for #4655: Make fftpack._raw_fft threadsafe
==
==================
e4adab8;Alex Stewart;2014-05-06 15:54:05 -0700;Make TestFFTThreadSafe tests Py3-compatible

==

numpy/fft/tests/test_fftpack.py
==================
d1422d3;Charles Harris;2014-05-06 09:37:38 -0600;MAINT: Make NPY_RELAXED_STRIDE_CHECKING true by default.

==

.travis.yml
doc/release/1.10.0-notes.rst
numpy/core/bscript
numpy/core/setup.py
tools/test-installed-numpy.py
tox.ini
==================
46c7211;Charles Harris;2014-05-06 09:35:52 -0600;MAINT: Remove the polytemplate.py file.

==

doc/release/1.10.0-notes.rst
numpy/polynomial/polytemplate.py
==================
767f044;Charles Harris;2014-05-06 08:01:44 -0600;MAINT: Update pavement.py to 1.10.0.

==

pavement.py
==================
ff99924;Charles Harris;2014-05-05 16:44:39 -0600;MAINT: Change default inplace, ufunc(...,out=x) casting to same_kind.
There has been a warning of this change since numpy 1.7. numpy 1.10
is a good time to do it. The nanvar function needed a fix after the
change, and the tests and documentation are updated.

==

doc/source/reference/ufuncs.rst
numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/convert_datatype.c
numpy/core/tests/test_ufunc.py
numpy/lib/nanfunctions.py
==================
6f5329f;Charles Harris;2014-05-04 17:07:30 -0600;MAINT: start 1.10-devel.
* Create 1.10.0-notes.
* Add 1.10.-notes to the generated documentation.
* Update version number in setup.py

==

doc/release/1.10.0-notes.rst
doc/source/release.rst
setup.py
==================
7548dc0;Charles Harris;2014-05-06 16:22:27 -0600;Merge pull request #4682 from charris/fix-_numpyconfig.h.in
BUG: Add @DEFINE_NPY_RELAXED_STRIDES_CHECKING@ to _numpyconfig.h.in.
==
==================
2a6cb99;Charles Harris;2014-05-06 14:41:07 -0600;BUG: Add @DEFINE_NPY_RELAXED_STRIDES_CHECKING@ to _numpyconfig.h.in.
The entry is needed for Bento builds to correctly configure numpy.

==

numpy/core/include/numpy/_numpyconfig.h.in
==================
62b5cf3;Charles Harris;2014-05-06 13:59:14 -0600;DOC: update 1.9.0-notes.

==

doc/release/1.9.0-notes.rst
==================
5286f5e;Alex Stewart;2014-05-06 11:49:23 -0700;Added regression tests for #4655

==

numpy/fft/tests/test_fftpack.py
==================
d150103;Julian Taylor;2014-05-06 20:38:35 +0200;Merge pull request #4307 from dfreese/feature/nanmedian
ENH: added functionality nanmedian to numpy
==
==================
b85a4dd;Charles Harris;2014-05-06 10:18:12 -0600;MAINT:Ignore boolean '-' deprecation warnings in nosetester.py
This allows numpy 1.9 testing to be used with current scipy
without flooding the output with deprecation warnings.

The deprecation warnings are currently issued for both the
subtract and negative operators when used with booleans.

==

numpy/testing/nosetester.py
==================
15f02e2;Alex Stewart;2014-05-06 09:15:53 -0700;Add comments to clarify cache handling in _raw_fft

==

numpy/fft/fftpack.py
==================
bc32ada;Charles Harris;2014-05-06 09:05:14 -0600;DOC: Update the release notes.
Remove duplicated "New Features" heading.
Note removal of numpytesting.py file containing importall function.

==

doc/release/1.9.0-notes.rst
==================
45761e6;Charles Harris;2014-05-06 08:20:32 -0600;MAINT: Remove deprecated importall.
The importall function was the only function in the numpytest.py
file, so remove the whole file.

==

numpy/testing/__init__.py
numpy/testing/numpytest.py
==================
b2b3347;Charles Harris;2014-05-05 17:11:34 -0600;Merge pull request #4606 from juliantaylor/small-memcache
ENH: add small memory chunk cache
==
==================
c1570b5;Julian Taylor;2014-05-05 22:13:56 +0200;MAINT: move memory allocator functions to own file alloc.c

==

numpy/core/bscript
numpy/core/code_generators/genapi.py
numpy/core/setup.py
numpy/core/src/multiarray/alloc.c
numpy/core/src/multiarray/alloc.h
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/ctors.h
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/multiarraymodule_onefile.c
==================
994b153;Charles Harris;2014-05-05 11:53:43 -0600;Merge pull request #4677 from charris/revert-d8fd283
BUG: Fix test error in scipy introduced by commit d8fd283.
==
==================
b34800a;Charles Harris;2014-05-05 11:20:22 -0600;BUG: Fix test error in scipy introduced by commit d8fd283.
Revert "ENH: ma.asarray() and ma.asanyarray() will pass through input
        of the correct type."

This reverts commit d8fd28389adb491e24b7cdc25cd1b20f539310c3.

That commit caused test errors in scipy, which was apparently
expecting a copy rather than a passed through array. The idea
may be good, but at a minimum it should probably be preceded
by a deprecation period.

Closes #4675.

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
8e0ac44;Charles Harris;2014-05-05 10:30:29 -0600;Merge pull request #4670 from charris/prepare-for-1.9-branch
Prepare for 1.9 branch
==
==================
b4ed857;Julian Taylor;2014-05-05 14:42:33 +0200;Merge pull request #4668 from jaimefrio/fast-argfunc
ENH: Break out early of loop in argmin/max for bool, fixes #4659
==
==================
6a36c11;Charles Harris;2014-05-04 19:54:08 -0600;DOC: Update HOWTO_RELEASE.rst.txt.
Add more detail in the "Check the C API version number" section.

==

doc/HOWTO_RELEASE.rst.txt
==================
8bf8b34;Charles Harris;2014-05-04 17:56:55 -0600;MAINT: Add NPY_1_9_API_VERSION to numpyconfig.h.
Defined to the same value it same value as the NPY_1_8_API_VERSION as
there have been no deprecated macros or functions in the include files.

==

numpy/core/include/numpy/numpyconfig.h
==================
bcfe8fa;Charles Harris;2014-05-04 16:24:17 -0600;MAINT: Delete code_generators/cversions.py in its old location.

==

numpy/core/code_generators/cversions.py
==================
98392eb;Charles Harris;2014-05-04 16:23:08 -0600;MAINT: Update the C-API hash in cversions.txt.
The new annotations caused the api hash to change.

==

numpy/core/code_generators/cversions.txt
numpy/core/setup_common.py
==================
906ecab;Charles Harris;2014-05-04 16:21:02 -0600;DOC: Document the new location of cversions.py.
The instructions in HOWTO_RELEASE.rst.txt needed to be modified.

==

doc/HOWTO_RELEASE.rst.txt
==================
e1bffd6;Charles Harris;2014-05-04 16:17:00 -0600;MAINT: Move numpy/core/code_generators/cversions.py to numpy/core.
This is done because it runs as a script, hence without context, and
this causes problems with imports in the code_generators package. This
became apparent when numpy_api.py was changed to import genapi.py from
the same package.

==

numpy/core/cversions.py
==================
e03c0fa;jaimefrio;2014-05-04 14:20:06 -0700;ENH: Break out early of loop in argmin/max for bool, fixes #4659
Break out early of loop if the min (max) found is `False` (`True`) when
`argmin` (`argmax`) is called on an array of type `bool`.

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/tests/test_multiarray.py
==================
f5b0c8c;Julian Taylor;2014-05-04 23:07:57 +0200;ENH: release GIL for callocs
useful for programs that block operations to avoid hitting the memory
bandwidth wall.

==

numpy/core/src/multiarray/ctors.c
==================
0beb47f;Matthew Brett;2014-05-03 14:58:38 -0700;TST: add travis test for wheel build and install
Add travis build that builds and installs wheel, runs tests from
installed wheel.

==

.travis.yml
tools/travis-test.sh
==================
e47a50e;Julian Taylor;2014-04-09 19:25:27 +0200;ENH: add small memory chunk cache
Add very simplistic caching of small memory blocks (< 1024 bytes)
This improves the performance of small array operations by about 15%-20%:

without cache:
In [1]: d = np.array([1,1])
In [2]: %timeit d*d*d*d
1000000 loops, best of 3: 2.1 µs per loop

with cache:
In [1]: d = np.array([1,1])
In [2]: %timeit d*d*d*d
1000000 loops, best of 3: 1.7 µs per loop

The cache is a simple list of buckets of pointers, one for each size up
to 1023 bytes.
Two caches are required one for array data one one for
dimensinos/strides as they use different allocators.
All pointers can still be deleted with their matching deallocator but
this implies the size of the block must be known at the time of the free
in order to place the pointer in the right bucket. This should not be an
issue for well behaved numpy users.

Technically the ABI is broken in this change as the size of the
dimension memory block has been decreased from 3 * nd to 2 * nd, the
increase to 3 was a relic from the NA branch and is not needed anymore.
It should be unlikely someone relies on this size.

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/ctors.h
numpy/core/tests/test_multiarray.py
==================
753149e;Charles Harris;2014-05-04 13:54:44 -0600;Merge pull request #3514 from seberg/object_comparison
FIX: Make object comparison ufuncs not include identity check
==
==================
f40831a;Sebastian Berg;2014-01-26 17:16:10 +0100;MAINT: Comparison deprecation followup fixes
Makes the identity check `a = np.array([np.nan], dtype=object)`
`a == a`, etc. a deprecation/futurewarning instead of just
changing it.
Also fixes some smaller things.

==

numpy/core/src/umath/loops.c.src
numpy/core/tests/test_deprecations.py
numpy/core/tests/test_umath.py
numpy/lib/polynomial.py
numpy/polynomial/_polybase.py
numpy/polynomial/polytemplate.py
==================
34fc091;Charles Harris;2014-05-04 11:51:43 -0600;Merge pull request #4609 from juliantaylor/random-gil
ENH: replace GIL of random module with a per state lock
==
==================
17e9ff8;Sebastian Berg;2014-01-26 01:55:06 +0100;DEP: Deprecate identity check in comparisons (not just removing)
Instead of just removing it, raise Deprecation/Future warnings
when the comparison object ufunc and the identity check do not
coincide.

==

numpy/core/src/umath/loops.c.src
==================
ad0b975;Sebastian Berg;2013-12-05 15:01:42 +0100;DOC: Add (object) equality changes and error raising to release notes

==

doc/release/1.9.0-notes.rst
==================
9b8f6c7;Sebastian Berg;2013-07-25 16:10:54 +0200;DEP: Deprecate that comparisons ignore errors.
This means that for example broadcasting errors get raised.

The array_equiv function is changed to explicitely test
if broadcasting is possible. It may be nice to do this
test differently, but I am not sure if that is possible.

Create a FutureWarning for comparisons to None, which
should result in areal elementwise (object) comparisons.

Slightly adepted a wrong test.

Poly changes: Some changes in the polycode was necessary,
the one is probably a bug fix, the other needs to be
thought over, since len check is not perfect maybe, since
it is more liekly to raise raise an error.

Closes gh-3759 and gh-1608

==

numpy/core/numeric.py
numpy/core/src/multiarray/arrayobject.c
numpy/core/tests/test_deprecations.py
numpy/core/tests/test_multiarray.py
numpy/lib/polynomial.py
numpy/polynomial/polytemplate.py
==================
84831ca;Sebastian Berg;2013-07-10 16:49:59 +0200;FIX: Make object comparison ufuncs not include identity check
The issue here is that PyObject_RichCompareBool does an identity
check before doing any other checks. This is good, and is the
way for example list comparisons are handled. However in numpy
comparisons are elementwise, so that the identitycheck should
not be expected. The example for this is as follows:
obj_array = np.arange(3)
a = np.array([obj_array, 0], dtype=object)
np.equal(a, a)
If an identity check is done, this returns [True, True]. But
obj_array == obj_array itself cannot be cast to a bool.

While this is slightly slower, not doing the identity check seems
more logical in the light of elementwise operations.

Closes gh-2117.

==

numpy/core/src/umath/loops.c.src
numpy/core/tests/test_umath.py
==================
19feb88;Charles Harris;2014-05-04 08:34:25 -0600;Merge pull request #4666 from ElDeveloper/issue-3488
DOC/FIX: Fix error in documentation
==
==================
ac92c61;Charles Harris;2014-05-04 07:35:14 -0600;Merge pull request #4633 from charris/fix-polynomial-true-division
Fix polynomial true division
==
==================
2142962;Charles Harris;2014-05-04 06:59:52 -0600;Merge pull request #4667 from charris/fix-numpy-distutils
BUG: Fix use of setuptools.command.install._install.
==
==================
8bc4d45;Charles Harris;2014-05-04 06:18:21 -0600;BUG: Fix use of setuptools.command.install._install.
This private variable has disappeared in later versions of setuptools.
In older versions of setuptools it is the same as
distutils.command.install.install, so use that instead.

Closes #4664.

==

numpy/distutils/command/install.py
==================
31e969b;Yoshiki Vázquez Baeza;2014-05-04 00:29:37 -0600;DOC/FIX: Fix error in documentation
Remove misleading note about equivalency betwen column_stack and
np.vstack(tup).T.

Fixes #3488

==

numpy/lib/shape_base.py
==================
24a0fd4;Charles Harris;2014-04-30 15:27:16 -0600;TST: Add tests for the polynomial classes true division.

==

numpy/polynomial/tests/test_classes.py
==================
8c72a78;Charles Harris;2014-04-30 15:25:03 -0600;BUG: Fix __truediv__ bug in polytemplate.py file.
The use of polytemplate is deprecated, this fix is only for a backport
if needed.

==

numpy/polynomial/polytemplate.py
==================
be3f0b1;Charles Harris;2014-04-30 15:17:50 -0600;MAINT: Refactor numpy/polynomial/_polybase.py
1) Clean up the code and move repeated snippet to a method.
2) Remove use of has_sametype, has_samewindow, has_samedomain. I would
   like to deprecate those methods.
3) Fix error in __truediv__, and make it only allow non-boolean numbers
   for the denominator.

Closes #4631.

==

numpy/polynomial/_polybase.py
==================
99cbdba;Matthew Brett;2014-05-03 14:04:11 -0700;BUG: cythonize sources for wheel build
Wheel build was not cythonizing sources, giving a compile error because
needed `numpy/random/mtrand/mtrand.c` was missing.

==

setup.py
==================
e24486e;Alex Stewart;2014-05-02 10:07:01 -0700;Fix for #4655: Make fftpack._raw_fft threadsafe

==

numpy/fft/fftpack.py
==================
beec75b;David Freese;2014-02-16 08:51:16 -0800;ENH: added functionality nanmedian to numpy
Implemented a nanmedian and associated tests as an
extension of np.median to complement the other
nanfunctions

Added negative values to the unit tests

Cleaned up documentation of nanmedian

==

doc/release/1.9.0-notes.rst
numpy/lib/nanfunctions.py
numpy/lib/tests/test_nanfunctions.py
==================
a0cf183;Julian Taylor;2014-05-02 13:51:42 +0200;Merge pull request #4580 from juliantaylor/openblas-affinity
ENH: disable OpenBLAS affinity settings
==
==================
94172e1;Julian Taylor;2014-04-11 01:20:30 +0200;ENH: replace GIL of random module with a per state lock
The random module currently relies on the GIL for the state
synchronization which hampers threading performance.
Instead add a lock to the RandomState object and take it for all
operations calling into randomkit while releasing the GIL.
This allows parallizing random number generation using multiple states
or asynchronous generation in a worker thread.

Note that with a large number of threads the standard mersenne twister
used may exhibit overlap if the number of parallel streams is large
compared to the size of the state space, though due to the limited
scalability of Python in regards to threads this is likely not a big
issue.

==

doc/release/1.9.0-notes.rst
numpy/random/mtrand/mtrand.pyx
numpy/random/mtrand/numpy.pxd
numpy/random/tests/test_random.py
==================
4a2783f;Julian Taylor;2014-05-02 12:00:24 +0200;Merge pull request #4654 from charris/fix-memory-leak-gh-4652
BUG: Fix memory leak.
==
==================
dad468e;Charles Harris;2014-05-01 18:07:12 -0600;BUG: Fix memory leak.
Patch is from Julian Taylor. Closes #4652.

==

numpy/core/src/multiarray/mapping.c
==================
fae89b0;Charles Harris;2014-05-01 08:08:59 -0600;Merge pull request #4641 from gdementen/random_docstring_fixes
DOC: standardize "size" arg description in random module docstrings
==
==================
1c774db;Charles Harris;2014-05-01 08:04:02 -0600;Merge pull request #4648 from jaimefrio/void-api
BUG: Hold GIL for types with fields, fix #4642
==
==================
63df267;Charles Harris;2014-05-01 08:02:52 -0600;Merge pull request #4637 from juliantaylor/api-annotate
annotate reference semantics of c-api
==
==================
64af3fd;Julian Taylor;2014-04-26 12:27:09 +0200;MAINT: replace multiarray_global_vars_types by using tuples

==

numpy/core/code_generators/genapi.py
numpy/core/code_generators/generate_numpy_api.py
numpy/core/code_generators/numpy_api.py
==================
0c9f285;Charles Harris;2014-04-29 07:51:27 -0600;Merge pull request #4640 from gdementen/patch-1
DOC: fixed typo
==
==================
0816d55;jaimefrio;2014-04-28 13:45:53 -0700;BUG: Hold GIL for types with fields, fixes #4642
Set the `NPY_NEEDS_PYAPI` flag for types with fields, as these need
access to the Python API to manipulate the tuples and dicts holding
field information. It remains unset for the base `np.void` type.

==

numpy/core/src/multiarray/descriptor.c
==================
7bab957;Charles Harris;2014-04-26 15:14:54 -0600;Merge pull request #4644 from crbates/patch-1
Update __init__.py
==
==================
d6e8cde;Cameron Bates;2014-04-26 12:41:05 -0700;Update __init__.py
interpreter is misspelled
==

numpy/__init__.py
==================
1eb08d5;Julian Taylor;2014-04-25 00:03:30 +0200;MAINT: always use tuples for api index values
simplifies the generation logic a bit

==

numpy/core/code_generators/genapi.py
numpy/core/code_generators/generate_numpy_api.py
numpy/core/code_generators/generate_ufunc_api.py
numpy/core/code_generators/numpy_api.py
==================
8e234ba;Gaëtan de Menten;2014-04-25 13:25:29 +0200;DOC: standardize "size" argument description in docstrings for functions of random module
there were many different versions for no good reason

==

numpy/random/mtrand/mtrand.pyx
==================
3d3c3bd;Gaëtan de Menten;2014-04-25 11:34:12 +0200;DOC: fixed typo

==

numpy/random/mtrand/mtrand.pyx
==================
a8536d5;Charles Harris;2014-04-24 14:42:16 -0600;Merge pull request #4639 from diego898/fix-doc-example
Fixing the `poly2herm` example import line
==
==================
09db62b;Diego Mesa;2014-04-24 12:55:43 -0700;fixing poly2herm example

==

numpy/polynomial/hermite.py
==================
cb045e9;Julian Taylor;2014-04-24 21:24:18 +0200;MAINT: add a few nonnull attributes to array creation functions
also fix wrong capi documentation of PyArray_NewFromDescr stating it
accepts NULL dtype while it does not.

==

doc/source/reference/c-api.array.rst
numpy/core/code_generators/numpy_api.py
numpy/core/src/multiarray/ctors.c
==================
999753f;Julian Taylor;2014-04-12 13:29:35 +0200;MAINT: annotate reference stealing and burrowed refs in multiarray
allows for better static analysis report with e.g. cpychecker

==

numpy/core/code_generators/genapi.py
numpy/core/code_generators/generate_numpy_api.py
numpy/core/code_generators/generate_ufunc_api.py
numpy/core/code_generators/numpy_api.py
numpy/core/include/numpy/ndarraytypes.h
numpy/core/include/numpy/npy_common.h
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/scalarapi.c
tools/travis-test.sh
==================
d598cf1;Julian Taylor;2014-04-12 13:55:01 +0200;BLD: allow strings for check_func declarations
makes attribute checks more sane and allows adding nonnull

==

numpy/core/include/numpy/npy_common.h
numpy/core/setup.py
numpy/core/setup_common.py
numpy/distutils/command/config.py
==================
d0b3f8f;Charles Harris;2014-04-22 18:31:32 -0600;Merge pull request #4628 from mhvk/nanfunctions-copyto-call
BUG: incorrect argument order to _copyto in in np.nanmax, np.nanmin
==
==================
ff459fd;Marten van Kerkwijk;2014-04-22 20:08:47 -0400;Add tests using matrices

==

numpy/lib/tests/test_nanfunctions.py
==================
dd192e6;Charles Harris;2014-04-22 14:32:37 -0600;Merge branch 'gh-4618'
* gh-4618:
  DEP: Deprecate numpy.rank

==
==================
a45df10;Sebastian Berg;2014-04-12 23:42:11 +0200;DEP: Deprecate numpy.rank
This function is commonly confused with numpy.linalg.matrix_rank
and exists itself only for history reasons.

Closes gh-4616

==

doc/release/1.9.0-notes.rst
numpy/__init__.py
numpy/core/fromnumeric.py
numpy/core/tests/test_deprecations.py
==================
51ca860;Charles Harris;2014-04-22 13:36:52 -0600;Merge pull request #4635 from juliantaylor/cast-fastpath
ENH: add a basic type fastpath to PyArray_CanCastTypeTo
==
==================
25fdec2;Julian Taylor;2014-04-22 20:04:12 +0200;ENH: add a basic type fastpath to PyArray_CanCastTypeTo
improves small array performance by 5%-10%

==

numpy/core/src/multiarray/convert_datatype.c
==================
5c3819a;Charles Harris;2014-04-22 11:48:04 -0600;Merge pull request #4630 from rgommers/intel-noframework
BLD: remove "-Wl,-framework,Python" from linker flags for Intel compiler...
==
==================
fff4865;Charles Harris;2014-04-22 11:43:24 -0600;Merge pull request #4632 from rgommers/refguide-update
Doc update: NEPs, f2py examples and refguide section fix.
==
==================
d7f7616;Ralf Gommers;2014-04-21 20:17:30 +0200;DOC: clean up docs in userguide for interfacing to compiled code a bit.
Add a link to f2py docs, which was missing.

[ci skip]

==

numpy/doc/misc.py
==================
7d3e739;Ralf Gommers;2014-04-21 18:01:10 +0200;DOC: fix reST formatting of npy-format NEP.

==

doc/neps/npy-format.rst
==================
b66af02;Ralf Gommers;2014-04-21 16:56:15 +0200;DOC: add NEPs overview to documentation.

==

doc/neps/deferred-ufunc-evaluation.rst
doc/neps/math_config_clean.rst
doc/neps/math_config_clean.txt
doc/neps/missing-data.rst
doc/neps/new-iterator-ufunc.rst
doc/neps/newbugtracker.rst
doc/neps/npy-format.rst
doc/neps/npy-format.txt
doc/neps/pep_buffer.txt
doc/neps/structured_array_extensions.rst
doc/neps/structured_array_extensions.txt
doc/neps/warnfix.rst
doc/neps/warnfix.txt
doc/source/_templates/indexcontent.html
doc/source/contents.rst
doc/source/neps/datetime-proposal.rst
doc/source/neps/datetime-proposal3.rst
doc/source/neps/deferred-ufunc-evaluation.rst
doc/source/neps/generalized-ufuncs.rst
doc/source/neps/groupby_additions.rst
doc/source/neps/index.rst
doc/source/neps/math_config_clean.rst
doc/source/neps/missing-data.rst
doc/source/neps/new-iterator-ufunc.rst
doc/source/neps/newbugtracker.rst
doc/source/neps/npy-format.rst
doc/source/neps/structured_array_extensions.rst
doc/source/neps/ufunc-overrides.rst
doc/source/neps/warnfix.rst
==================
2c902f1;Ralf Gommers;2014-04-21 16:17:15 +0200;Merge pull request #4629 from chatcannon/any_all_typo
Fixed typo in the docstrings of np.all() and np.any()
==
==================
1dff3ce;Ralf Gommers;2014-04-21 16:14:21 +0200;DOC: fix examples in f2py documentation.  They didn't appear at all in html.
Also fix example in testing that Sphinx saw as section header.

==

doc/source/f2py/python-usage.rst
numpy/testing/utils.py
==================
db668f3;Ralf Gommers;2014-04-21 15:01:07 +0200;DOC: remove obsolete oldnumeric/numarray sections from reference guide.
Also fix a duplicate entry for numpy.testing due to incorrect
header underlining.

==

doc/source/reference/routines.rst
doc/source/reference/routines.testing.rst
==================
f4a7cf9;Ralf Gommers;2014-04-21 11:46:57 +0200;BLD: remove "-Wl,-framework,Python" from linker flags for Intel compiler.
The "-Wl,-undefined,dynamic_lookup" flag is enough to make things work
with OS X bundles.  On the mailing list an issue was reported with
Anaconda (non-framework build) where f2py was picking up the system framework
Python instead of the Anaconda one.

Thanks to Robert Kern for explaining how to fix this.

==

numpy/distutils/fcompiler/intel.py
==================
32dc770;Chris Kerr;2014-04-21 08:49:20 +0100;Fixed typo in the docstrings of np.all() and np.any()

==

numpy/core/fromnumeric.py
==================
e8a9e84;Charles Harris;2014-04-20 18:08:27 -0600;Merge pull request #4621 from jess010/newaxis-doc
update arrays.indexing.rst for 'newaxis' description 
==
==================
5348c02;Marten van Kerkwijk;2014-04-20 16:47:43 -0400;BUG: incorrect argument order to _copyto in in np.nanmax, np.nanmin

==

numpy/lib/nanfunctions.py
==================
ac69505;jess010;2014-04-17 11:01:47 -0400;updated for None-npnewaxis alias comment

==

doc/source/reference/arrays.indexing.rst
==================
3fd19f2;jess010;2014-04-15 17:26:35 -0400;arrays.indexing.rst

==

doc/source/reference/arrays.indexing.rst
==================
61c699e;Charles Harris;2014-04-11 20:13:46 -0600;Merge pull request #4615 from mhvk/ma/matrix-flat-redo-shape
Revert line from #4585 to get mask, data shapes to match in .flat
==
==================
d69cd85;Marten van Kerkwijk;2014-04-11 21:11:16 -0400;Revert line from #4585 to get mask, data shapes to match in .flat

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
fbf2072;Julian Taylor;2014-04-11 20:17:45 +0200;Merge pull request #4614 from charris/fix-gh-4613
BUG: Fix lack of NULL check in array_richcompare.
==
==================
bd3ca1e;Charles Harris;2014-04-11 12:00:11 -0600;Merge pull request #4611 from gdementen/patch-1
fixed bad signature in docstring for uniform()
==
==================
df32153;Charles Harris;2014-04-11 10:56:40 -0600;BUG: Fix lack of NULL check in array_richcompare.
The lack of this check led to a segfault.

Closes #4613.

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/tests/test_regression.py
==================
b8ba37f;Gaëtan de Menten;2014-04-11 09:49:27 +0200;fixed bad signature in docstring for uniform()

==

numpy/random/mtrand/mtrand.pyx
==================
f9e0771;Charles Harris;2014-04-10 20:04:37 -0600;Merge pull request #4585 from mhvk/ma/iterator-get-single-item
BUG: Ensure MaskedArray.flat can access single items
==
==================
a7eef2d;Marten van Kerkwijk;2014-04-10 20:55:40 -0400;Ensure single record items also work correctly with MaskedIterator; tests

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
89daa7c;Julian Taylor;2014-04-10 21:30:00 +0200;Merge pull request #4551 from michelmno/master
ENH: adding ppc64le architecture support
==
==================
09fb420;Charles Harris;2014-04-10 13:16:41 -0600;Merge pull request #4180 from jaimefrio/unique_counts
ENH: add a 'return_counts=' keyword argument to `np.unique`
==
==================
fbdeac8;Charles Harris;2014-04-10 13:03:31 -0600;Merge pull request #4589 from juliantaylor/cython-gen
BLD: remove cython c source from git
==
==================
f320935;Charles Harris;2014-04-09 08:12:53 -0600;Merge pull request #4602 from cgohlke/patch-2
BUG: ifort has issues with optimization flag /O2
==
==================
f97d5ca;cgohlke;2014-04-08 20:19:15 -0700;BUG: ifort has issues with optimization flag /O2
Fixes scipy test failures.
==

numpy/distutils/fcompiler/intel.py
==================
aadcf11;Nathaniel J. Smith;2014-04-06 21:55:22 +0100;add associativity/precedence rationale (+ a few misc tweaks)

==

doc/neps/return-of-revenge-of-matmul-pep.rst
==================
733f547;Julian Taylor;2014-04-03 14:46:49 +0200;ENH: disable OpenBLAS affinity settings
OpenBLAS starts as many threads as it can and assigns them to cpus
This includes the main thread Python is running in.
This means any threads or processes Python starts must all share this
cpu, nullifying any parallization efforts.
Luckily this behaviour can be disabled via an environment variable which
we need to set before loading dotblas which may be linked to OpenBLAS.
Libraries loading BLAS before numpy are stills screwed.

==

numpy/core/numeric.py
==================
eae3d1a;jaimefrio;2014-01-09 10:23:07 -0800;ENH: add a 'return_counts=' keyword argument to `np.unique`
This PR adds a new keyword argument to `np.unique` that returns the
number of times each unique item comes up in the array. This allows
replacing a typical numpy construct:

    unq, _ = np.unique(a, return_inverse=True)
    unq_counts = np.bincount(_)

with a single line of code:

    unq, unq_counts = np.unique(a, return_counts=True)

As a plus, it runs faster, because it does not need the extra
operations required to produce `unique_inverse`.

==

doc/release/1.9.0-notes.rst
numpy/lib/arraysetops.py
numpy/lib/tests/test_arraysetops.py
==================
52d5d10;Charles Harris;2014-04-05 18:23:05 -0600;Merge pull request #4591 from szpy/bugfixes
BUG: Prevent division by zero. Closes #650.
==
==================
0b02990;szpy;2014-04-05 18:04:09 -0600;BUG: Prevent division by zero. Closes #650.

==

numpy/core/src/multiarray/ctors.c
==================
6857173;Charles Harris;2014-04-05 14:49:37 -0600;Merge pull request #4588 from ddasilva/ddasilva/2591
ENH: Better error w/ line num for bad column count in np.loadtxt()
==
==================
079ca4d;Daniel da Silva;2014-04-04 23:48:58 -0400;ENH: Better error w/ line num for bad column count in np.loadtxt()
Resolves #2591. Adds more explicit error handling in line parsing loop.

==

numpy/lib/npyio.py
numpy/lib/tests/test_io.py
==================
c9fd634;Julian Taylor;2014-04-05 13:13:13 +0200;BLD: remove cython c source from git
Instead generate at build time. The generated sources are still part of
the sdist.
tools/cythonize.py is copied from SciPy with small changes to the
configuration.

==

.gitignore
.travis.yml
bscript
numpy/random/mtrand/mtrand.c
setup.py
tools/cythonize.py
tools/travis-test.sh
==================
a0794f6;Charles Harris;2014-04-04 20:40:51 -0600;Merge pull request #4587 from ddasilva/meltingwax/4571
BUG: Explicitly reject nan values for p in binomial(n, p).
==
==================
ac56b60;Daniel da Silva;2014-04-04 21:58:11 -0400;BUG: Explicitly reject nan values for p in binomial(n, p). Fixes #4571.
Adds check with np.isnan(p) and raises ValueError if check is positive.

==

numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
numpy/random/tests/test_random.py
==================
dfebb5a;Marten van Kerkwijk;2014-04-04 17:40:32 -0400;BUG: Ensure MaskedArray.flat can access single items

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
547765d;Charles Harris;2014-04-04 09:45:10 -0600;Merge pull request #4576 from mhvk/ma/subclass-printing
ENH: Ensure that repr and str work for MaskedArray non-ndarray bases
==
==================
24a8f3b;Marten van Kerkwijk;2014-03-21 21:53:33 -0400;ENH: Ensure that repr and str work for MaskedArray non-ndarray bases
For repr, use the name of the base class in output as "masked_<name>"
(with name=array for ndarray to match the previous implementation).
For str, insert masked_print_option in an ndarray view of the object
array that is created for string output, to avoid calling __setitem__
in the base class.  Add tests to ensure this works.

==

doc/release/1.9.0-notes.rst
numpy/ma/core.py
numpy/ma/tests/test_core.py
numpy/ma/tests/test_subclassing.py
==================
3998fdf;Charles Harris;2014-04-03 16:24:58 -0600;Merge pull request #4463 from abalkin/issue-4461
BUG: Masked arrays and apply_over_axes
==
==================
e4082eb;Julian Taylor;2014-04-03 20:46:51 +0200;Merge pull request #4255 from juliantaylor/ufunc-attr-check
__numpy_ufunc__ check improvement
==
==================
6c6ddaf;Charles Harris;2014-04-02 19:38:36 -0600;Merge pull request #4578 from juliantaylor/static-bugs
BUG: fix memory leaks and missing NULL checks
==
==================
3c94550;Julian Taylor;2014-04-02 20:58:31 +0200;BUG: fix memory leaks and missing NULL checks
found by cpychecker gcc plugin

==

numpy/core/src/multiarray/buffer.c
numpy/core/src/multiarray/conversion_utils.c
numpy/core/src/multiarray/datetime_busdaycal.c
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/nditer_pywrap.c
numpy/core/tests/test_item_selection.py
numpy/core/tests/test_multiarray.py
==================
76c9bb3;Lev Abalkin;2014-03-08 20:01:24 -0500;BUG: Masked arrays and apply_over_axes
Masked arrays version of apply_over_axes did not apply
function correctly to arrays with non-trivial masks.

Fixes #4461.

==

numpy/ma/extras.py
numpy/ma/tests/test_extras.py
==================
3ff41a6;Julian Taylor;2014-01-11 00:18:23 +0100;ENH: avoid searching for __numpy_ufunc__ if its a basic python type
Checking for the attribute is a very large bottlenecks for reductions.
dtype, out, keepdims will often be basic python types so the check can
be skipped.
Also add a couple missing types to helper function _is_basic_python_type
and move it into a header so it can be used in umath.

==

numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/common.h
numpy/core/src/private/ufunc_override.h
==================
de73f9f;Julian Taylor;2014-01-10 23:46:59 +0100;ENH: intern the constant python strings
Was always intended this way but not done due to a mistake in Python3
fix. Speeds up dictionary lookups a bit as string comparisons can be
skipped on hash collisions.

==

numpy/core/src/umath/umathmodule.c
==================
39de3c8;ggventurini;2014-04-01 12:47:55 +0200;Docstring fix for `savetxt`

==

numpy/lib/npyio.py
==================
3e61f86;Charles Harris;2014-03-31 16:07:49 -0600;Merge pull request #4568 from jaimefrio/cumprod-vander.
ENH: Replace exponentiation with cumulative product in np.vander

==
==================
30aeb2e;jaimefrio;2014-03-28 13:43:11 -0700;ENH: Replace exponentiation with cumulative product in np.vander
Speeds calculation up by ~3x for 100x100 matrices, and by ~45x for
1000x1000

==

doc/release/1.9.0-notes.rst
numpy/lib/twodim_base.py
==================
5b26579;Charles Harris;2014-03-31 10:57:25 -0600;Merge pull request #3664 from mdboom/structured_array_compare
structured arrays with different byteorders do not compare
==
==================
c53b0e4;Michael Droettboom;2014-03-28 15:31:55 -0400;BUG: Compare struct arrays with different endian.
Fixes two places where dtypes with fields are compared for *exact*
equality where they should be compared for *equivalency*.

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_multiarray.py
==================
fd0d7d2;Charles Harris;2014-03-30 15:49:05 -0600;Merge pull request #4570 from juliantaylor/index-gil
ENH: release GIL for a[..., bool] type indexing
==
==================
92f499a;Julian Taylor;2014-03-30 20:12:30 +0200;ENH: release GIL for a[..., bool] type indexing
set _save to NULL in NPY_END_THREADS to simplify some code

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/mapping.c
==================
15a87e2;Charles Harris;2014-03-30 12:57:38 -0600;Merge pull request #4567 from juliantaylor/obj-array-create-opt
ENH: optimize array creation from homogenous python sequences
==
==================
012a353;Julian Taylor;2014-03-29 13:25:50 +0100;ENH: use fast sequence API for discover_dimensions
reduces runtime of function by about 20%

==

numpy/core/src/multiarray/ctors.c
==================
afdb698;Julian Taylor;2014-03-29 12:58:01 +0100;ENH: use fast sequence API for setArrayFromSequence
reduces runtime of function by about 10%

==

numpy/core/src/multiarray/ctors.c
==================
d36f822;Julian Taylor;2014-03-28 21:07:15 +0100;ENH: optimize array creation from homogenous python sequences
Instead calling PyArray_DTypeFromObjectHelper for each item in a
sequence, check if all items in the sequence are of the same scalar
type, if this is the case we only need to recurse on one item.
Also use the PySequence_Fast API to avoid expensive function calls for
the common case of lists or tuples.

np.array(range(10)) improves about 25%
np.array(range(100)) improves about 40%

==

numpy/core/src/multiarray/common.c
numpy/core/tests/test_multiarray.py
==================
ceeeb1a;Charles Harris;2014-03-28 18:36:00 -0600;Merge pull request #4569 from juliantaylor/rn-sync
DOC: sync release notes of 1.8 branch and add some missing 1.9 sections
==
==================
bce5bfb;Charles Harris;2014-03-28 18:33:21 -0600;Merge pull request #3830 from jarondl/recfromcsv
MAINT (API?): organize npyio.recfromcsv defaults
==
==================
77a5c89;Julian Taylor;2014-03-29 00:56:26 +0100;DOC: sync release notes of 1.8 branch and add some missing 1.9 sections
[ci-skip]

==

doc/release/1.8.0-notes.rst
doc/release/1.8.1-notes.rst
doc/release/1.9.0-notes.rst
==================
7b0d075;Julian Taylor;2014-03-29 00:33:12 +0100;Merge pull request #4565 from charris/fill_value_fix
Raise TypeError when setting inappropriate ma fill_value 
==
==================
92a0a2c;Charles Harris;2014-03-28 10:19:47 -0600;DOC: Document changes to ma.core._check_fill_value in release notes.

==

doc/release/1.9.0-notes.rst
==================
06aafa5;Tim Burgess;2013-05-29 10:40:40 +1000;BUG: Fix for issue #3213
Two changes to numpy.ma.core._check_fill_value:

1. When the fill value is a string and the array type is not one of
   'OSUV', raise TypeError instead of using the default fill value.

2. When the fill value overflows the type, raise TypeError instead
   of OverflowError.

Closes #3213.

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
9fc98ae;Charles Harris;2014-03-28 13:04:10 -0600;Merge pull request #4566 from juliantaylor/na-doc
DOC: remove obsolete NA reference from polyfit docs
==
==================
2baee6d;Charles Harris;2014-03-28 13:03:40 -0600;Merge pull request #4531 from charris/polynomial-abstract-base
Use polynomial abstract base instead of template.
==
==================
5bff338;Julian Taylor;2014-03-28 19:18:04 +0100;DOC: remove obsolete NA reference from polyfit docs

==

numpy/polynomial/chebyshev.py
numpy/polynomial/hermite.py
numpy/polynomial/hermite_e.py
numpy/polynomial/laguerre.py
numpy/polynomial/legendre.py
numpy/polynomial/polynomial.py
==================
ab0642c;Charles Harris;2014-03-28 06:40:28 -0600;Merge pull request #4558 from charris/document-assert_raises_regex
DOC: Document assert_raises_regex in numpy reference.
==
==================
2ba74c3;William Grant;2014-03-20 08:44:31 +0100;Adding support of ppc64le architecture
Signed-off-by: William Grant <wgrant@ubuntu.com>
Signed-off-by: Michel Normand <normand@linux.vnet.ibm.com>

==

doc/release/1.9.0-notes.rst
numpy/core/include/numpy/npy_cpu.h
numpy/core/include/numpy/npy_endian.h
numpy/core/setup.py
numpy/core/setup_common.py
numpy/core/src/npymath/ieee754.c.src
numpy/core/src/npymath/npy_math_private.h
numpy/core/src/private/npy_fpmath.h
==================
46929e8;Charles Harris;2014-03-27 17:55:51 -0600;Merge pull request #4561 from juliantaylor/int-vectorize-compiler
allow compiler vectorization of integer compares
==
==================
468d78b;Charles Harris;2014-03-27 16:21:02 -0600;Merge pull request #4562 from juliantaylor/opt-cast-loop
ENH: compile casting loops with O3 to enable vectorizer
==
==================
dab5e3e;Julian Taylor;2014-03-27 21:56:11 +0100;ENH: use smallest integer for tri ranges
reduces buffer copy and comparison overhead for boolean outer product

==

numpy/lib/twodim_base.py
==================
0e44d06;Julian Taylor;2014-03-18 23:08:03 +0100;ENH: write integer compare loops in way the compiler can vectorize them
current compilers (gcc 4.8, clang 3.4) are not good in vectorizing these
loops but at least for bytes and shorts they do give decent
improvements. Properly vectorizing the operations like already done for
floats is tedious and not probably not worth the effort, especially as
64 bit integer compares only exist in SSE4 and can thus not be used by
default.

==

numpy/core/src/umath/loops.c.src
==================
43dae24;Julian Taylor;2014-03-27 21:35:08 +0100;ENH: compile casting loops with O3 to enable vectorizer
improves performance of some casts by 25%-50%

==

numpy/core/src/multiarray/lowlevel_strided_loops.c.src
==================
ddc95d3;Albert;2014-03-06 16:17:52 +0100;ENH: apply_along_axis accepts named arguments

==

numpy/lib/shape_base.py
numpy/ma/tests/test_extras.py
==================
ef951bd;Charles Harris;2014-03-21 20:20:47 -0600;DEP: Deprecate the numpy/polnomial/polytemplate.py module.
Make the version of its removal Numpy 1.10.0.

==

numpy/polynomial/polytemplate.py
==================
5407a95;Charles Harris;2014-03-21 20:14:25 -0600;DOC: Document change of polynomial classes base class in release notes.

==

doc/release/1.9.0-notes.rst
==================
a2c96a6;Charles Harris;2014-03-21 18:22:45 -0600;DOC: Fixup documentation for new way of generating classes.
Move the class documentation to the place of definition in the
appropriate module. This allow for documenting the specific series kind
along with the series specific default domains and windows

Remove template placeholders from the ABCPolyBase class documention.

General fixup of documentation that rendered poorly.

==

numpy/polynomial/_polybase.py
numpy/polynomial/chebyshev.py
numpy/polynomial/hermite.py
numpy/polynomial/hermite_e.py
numpy/polynomial/laguerre.py
numpy/polynomial/legendre.py
numpy/polynomial/polynomial.py
==================
a5aae29;Charles Harris;2014-03-21 15:05:51 -0600;DOC: Cleanup polyutils.py module documentation.
Also note that PolyBase is no longer to be used.

==

numpy/polynomial/polyutils.py
==================
1eb81b7;Charles Harris;2014-03-21 14:53:18 -0600;ENH, MAINT: Use an abstract base class for the polynomial classes.
The new base is ABCPolyBase and is intended to replace the use of the
polytemplate string.  In this way the need to compile the polynomial
classes on import is avoided.

Closes #634. Closes #3639.

==

numpy/polynomial/_polybase.py
numpy/polynomial/chebyshev.py
numpy/polynomial/hermite.py
numpy/polynomial/hermite_e.py
numpy/polynomial/laguerre.py
numpy/polynomial/legendre.py
numpy/polynomial/polynomial.py
==================
46767a2;Charles Harris;2014-03-26 20:33:38 -0600;Merge pull request #4045 from abalkin/gh-4043
ENH: ma.asarray() and ma.asanyarray() will pass through input of the cor...
==
==================
42965e1;Charles Harris;2014-03-26 19:47:27 -0600;DOC: Document assert_raises_regex in numpy reference.

==

doc/source/reference/routines.testing.rst
==================
69238dd;Charles Harris;2014-03-26 18:37:01 -0600;Merge pull request #4553 from seberg/fancy-negated-strides
BUG: fix fancy indexing with negated strides
==
==================
c2c89cb;Charles Harris;2014-03-26 18:18:05 -0600;Merge pull request #4557 from juliantaylor/index-nonzero
ENH: use super optimized count_boolean_trues in indexing subfunction
==
==================
419cb15;Charles Harris;2014-03-26 18:10:34 -0600;Merge pull request #4542 from immerrr/fix-bincount-systemerror
BUG: fix some errors raised when minlength is incorrect in np.bincount
==
==================
d35d5c1;Charles Harris;2014-03-26 17:53:23 -0600;Merge pull request #4541 from ElDeveloper/issue-2367
BUG:change formatting of assert_array_almost_equal
==
==================
0953088;Charles Harris;2014-03-26 16:41:39 -0600;Merge pull request #4544 from juliantaylor/unaligned-index
BUG: fix unaligned access of new indexing
==
==================
d3dfa68;Julian Taylor;2014-03-26 22:56:50 +0100;ENH: use super optimized count_boolean_trues in indexing subfunction
speeds up e.g. a[..., boolmask]

==

numpy/core/src/multiarray/mapping.c
==================
7395900;Julian Taylor;2014-03-26 22:17:07 +0100;Merge pull request #4509 from jaimefrio/twodim-speedup
ENH: speed-up of triangular matrix functions
==
==================
8e47f39;Julian Taylor;2014-03-26 19:46:23 +0100;Merge pull request #4555 from larsmans/partition-docs
DOC: partition doesn't have three algorithms (yet)
==
==================
e40c961;Lars Buitinck;2014-03-26 18:07:00 +0100;DOC: partition doesn't have three algorithms (yet)

==

numpy/core/fromnumeric.py
==================
812aaf6;Sebastian Berg;2014-03-26 14:15:52 +0100;BUG: fix fancy indexing with negated strides
When strides where negated and the subspace had a size of 1, then
finding the output array strides did not work because
DONT_NEGATE_STRIDES was not set on the iterator used to find
the output arrays strides.

==

numpy/core/src/multiarray/mapping.c
numpy/core/tests/test_indexing.py
==================
a11c162;Yoshiki Vázquez Baeza;2014-03-25 23:53:15 -0600;TST: Change tests to look at array formatting only
The tests were looking at the formatting of other elements in the string
which is not relevant for the things testsed in this case. By looking
only at the array formatting, we guarantee consistency across systems.

==

numpy/testing/tests/test_utils.py
==================
e5cf365;immerrr;2014-03-24 09:16:36 +0400;BUG: fix incorrect minlength handling in np.bincount

==

numpy/lib/src/_compiled_base.c
numpy/lib/tests/test_function_base.py
==================
60d4347;immerrr;2014-03-25 22:28:51 +0400;ENH: export nose.tools.assert_raises_regex via numpy.testing.utils

==

numpy/testing/utils.py
==================
b1dfdea;Yoshiki Vázquez Baeza;2014-03-25 23:37:08 -0600;TST: Remove test that makes no sense
It's silly to check scalars when their string representations will vary
so much from system to system.

==

numpy/testing/tests/test_utils.py
==================
b07880b;Yoshiki Vázquez Baeza;2014-03-25 23:05:46 -0600;BUG: Fix non-compatible py3 property

==

numpy/testing/tests/test_utils.py
==================
c94e135;Yoshiki Vázquez Baeza;2014-03-25 22:24:44 -0600;TST: Add exception message formatting tests
assert_approx_equal & assert_almost_equal make internal use of
build_err_msg so a few tests have been added to check that the errors
are formatted correctly.

==

numpy/testing/tests/test_utils.py
==================
2e58804;Yoshiki Vázquez Baeza;2014-03-25 22:19:03 -0600;ENH: Add check for ndarray/scalar in build_err_msg
This check is needed now that build_err_msg takes a precision argument,
which is only relevant if the things being compared are ndarrays.

==

numpy/testing/utils.py
==================
fc5d375;Julian Taylor;2014-03-25 22:33:58 +0100;Merge pull request #4549 from juliantaylor/datetime-test-fix
TST: increase test time to avoid negative times on UTC conversion
==
==================
60f2f51;Julian Taylor;2014-03-25 22:17:42 +0100;TST: increase test time to avoid negative times on UTC conversion
fixes the test on windows where mingw _mktemp64 will return an error
instead of a negative time.

==

numpy/core/tests/test_datetime.py
==================
9d9c952;Charles Harris;2014-03-25 15:09:09 -0600;Merge pull request #4548 from juliantaylor/boolcount-improve
ENH: optimize count_boolean_trues further via unrolling
==
==================
aa36680;Julian Taylor;2014-03-25 19:09:26 +0100;ENH: optimize count_boolean_trues further via unrolling
redoing the computation if the booleans do not not contain 0 or 1 allows
sharing registers for the addition and or operations so we can more
aggressively unroll the loop to save 3 multiplies and shifts. Also it
allows better pipelining of integer operations.
Improvements range from 10%-50% on a range of amd64 cpus.

==

numpy/core/src/multiarray/item_selection.c
==================
c437672;Julian Taylor;2014-03-25 00:06:08 +0100;BUG: fix unaligned access of new indexing
Requires 16 bytes alignment from string and flexible dtypes, as
processing functions might access them on the itemsize which can be
larger than 1 byte (e.g. 8 bytes strings)
16 byte the largest alignment required for all numpy copy loops.
Closes gh-4314

==

numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/lowlevel_strided_loops.c.src
numpy/core/tests/test_indexing.py
==================
2f0494c;Charles Harris;2014-03-25 11:54:17 -0600;Merge pull request #4547 from tecki/master
add support for python ABCs
==
==================
90953b1;Charles Harris;2014-03-25 11:03:32 -0600;Merge pull request #4365 from larsmans/c-fixes
MAINT: fix unused variable warning
==
==================
a80946d;jaimefrio;2014-03-25 09:25:27 -0700;ENH: speed-up of triangular matrix functions
* `np.tri` now produces less intermediate arrays. Runs about 40% faster for
  general dtypes, up to 3x faster for boolean arrays.
* `np.tril` now does smarter type conversions (thanks Julian!), and together
  with the improvements in `np.tri` now runs about 30% faster. `np.triu`
  runs almost 2x faster than before, but still runs 20% slower than
  `np.tril`, which is an improvement over the 50% difference before.
* `np.triu_indices` and `np.tril_indices` do not call `np.mask_indices`,
  instead they call `np.where` directly on a boolean array created with
  `np.tri`. They now run roughly 2x faster.
* Removed the constraint for the array to be square in calls to
  `np.triu_indices`, `np.tril_indices`, `np.triu_indices_from` and
  `np.tril_indices_from`.

==

numpy/lib/tests/test_twodim_base.py
numpy/lib/twodim_base.py
==================
44be277;Martin Teichmann;2014-03-25 15:50:10 +0100;ENH: add numerator and denominator to integers
numbers.Integral types are supposed to have a numerator and
denominator attribute. This adds those two trivial attributes.

==

numpy/core/src/multiarray/scalartypes.c.src
==================
2d73ff3;Martin Teichmann;2014-03-25 10:19:15 +0100;ENH: add support for python ABCs
Beginning with version 2.6, python supports abstract base classes,
which contain a class hierarchy for numbers. This class hierarchy is
very similar to the one of numpy, so it is very easy to register
the numpy type hierarchy with the python type hierarchy.

This patch adds those registrations and also adds unit tests for it.

==

doc/release/1.9.0-notes.rst
numpy/core/numerictypes.py
numpy/core/tests/test_abc.py
==================
540c5c8;Lars Buitinck;2014-03-25 11:06:48 +0100;MAINT: ignore some more generated C files

==

.gitignore
==================
9f754d6;Lars Buitinck;2014-02-25 19:52:06 +0100;MAINT: fix unused variable warning

==

numpy/core/include/numpy/npy_3kcompat.h
==================
4112bf1;Yoshiki Vázquez Baeza;2014-03-24 22:34:59 -0600;TST: Add tests for build_err_msg

==

numpy/testing/tests/test_utils.py
==================
de7c651;Yoshiki Vázquez Baeza;2014-03-23 19:57:30 -0600;BUG:change formatting of assert_array_almost_equal
assert_array_almost_equal now prints the number of digits that were
being compared in the test instead of always printing 8 (the default
for array_repr). This would lead to uninformattive error messages.

Fixes #2367

==

numpy/testing/utils.py
==================
8409b4c;Julian Taylor;2014-03-25 00:51:38 +0100;Merge pull request #4545 from charris/style-fix
STY: Fix some multiline C comments in npy_3kcompat.h.
==
==================
6b8a647;Charles Harris;2014-03-24 17:46:27 -0600;STY: Fix some multiline C comments in npy_3kcompat.h.

==

numpy/core/include/numpy/npy_3kcompat.h
==================
3a4030c;Charles Harris;2014-03-24 10:20:28 -0600;Merge pull request #4358 from seberg/fast-select
ENH: Speed improvements and deprecations for np.select
==
==================
a0bbdcf;Julian Taylor;2014-03-23 21:36:13 +0100;Merge pull request #4538 from seberg/size1_reductions
BUG: nditer: Initialize buffer reduce pos
==
==================
123b319;Sebastian Berg;2014-02-24 15:22:44 +0100;ENH: Speed improvements and deprecations for np.select
The idea for this (and some of the code) originally comes from
Graeme B Bell (gh-3537).
Choose is not as fast and pretty limited, so an iterative
copyto is used instead.

Closes gh-3259, gh-3537, gh-3551, and gh-3254

==

doc/release/1.9.0-notes.rst
numpy/core/src/multiarray/multiarraymodule.c
numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
adf38de;Sebastian Berg;2014-03-23 20:08:23 +0100;BUG: nditer: Initialize buffer reduce pos
The FirstVisit function uses this, but when the reduction is
over a single element it isn't considered a reduction. This is
fine, however the reduce pos must still be initialized to 0 in
that case. Also changes the check order so that it is not
necessary to initialize the outerstrides as well.

See also gh-4134, and gh-4535.

==

numpy/core/src/multiarray/nditer_api.c
numpy/core/src/multiarray/nditer_constr.c
numpy/core/tests/test_ufunc.py
==================
730bff3;Charles Harris;2014-03-23 11:06:39 -0600;Merge pull request #4071 from endolith/patch-1
DOC: Link convolve with polymul
==
==================
e5b803c;Charles Harris;2014-03-23 09:11:02 -0600;Merge pull request #4535 from juliantaylor/itersize-1
BUG: fix uninitialized use of size 1 reductions
==
==================
3302291;Julian Taylor;2014-03-23 12:36:05 +0100;BUG: fix uninitialized use of size 1 reductions
Size 1 reductions do not intiialize the iterator fully as normal
reductions which triggers uninitialized use in NpyIter_IsFirstVisit.
To fix this check the size of the iterator and return true if it only
has size 1.

==

numpy/core/src/multiarray/nditer_api.c
numpy/core/tests/test_ufunc.py
==================
51c65c1;Charles Harris;2014-03-22 18:35:21 -0600;Merge pull request #4533 from charris/redo-gh-4529-commit-message
BUG: fix broken operand initialization for einsum.
==
==================
b148f0a;Jez Ng;2014-03-21 16:41:09 -0400;BUG: fix broken operand initialization for einsum.
Closes #4528.

==

numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_einsum.py
==================
4f3a204;Charles Harris;2014-03-22 18:10:59 -0600;Merge pull request #4512 from juliantaylor/opt-srcstride0-copy
ENH: optimize srcstride0 copy with O3
==
==================
af69b3f;Charles Harris;2014-03-22 18:03:05 -0600;Merge pull request #4490 from charris/fix-random-multivariate-normal
Fix random multivariate normal
==
==================
cec4815;Charles Harris;2014-03-22 17:52:16 -0600;Merge pull request #4522 from ninjin/master
FIX: items/keys iterators in 3k, list wrapping
==
==================
8ba277d;Charles Harris;2014-03-13 16:14:22 -0600;DOC: Note new random.multivariate_normal warning in release notes.

==

doc/release/1.9.0-notes.rst
==================
1c825f3;Charles Harris;2014-03-13 16:07:31 -0600;TST: Add some tests for random.multivariate_normal.
Explicitly Test that the default shape does not raise a
DeprecationWarning.

Check that a covariance matrix that is not positive-semidefinite
raises a RuntimeWarning.

==

numpy/random/tests/test_random.py
==================
d36f813;Charles Harris;2014-03-13 15:50:03 -0600;ENH, MAINT: Check that covariance is positive-semidefinite.
numpy.random.multivariate_normal uses SVD to obtain the covariance
square root, but the result will be incorrect if the covariance is not
positive-semidefinite and no warning will be given. However, a check can
be made even while using the SVD by checking if the rows of u.T and v
have the same sign, where u and v are given by u, d, v = svd(a).

A deprecation warning is also fixed. When the default size was used an
empty list was passed to multiply.reduce, which resulted in a default
float 1. for a shape index. That is no longer legal. The problem is
fixed by using an array reshape, which also avoids potential overflow in
the original computation.

Closes #4489.

==

numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
==================
de0e571;endolith;2013-11-24 11:21:02 -0500;DOC: Link convolve with polymul
Matlab uses `conv` for both convolution and polynomial multiplication. Clarifying that numpy has functions for each.

==

numpy/core/numeric.py
numpy/lib/polynomial.py
==================
5025c40;Pontus Stenetorp;2014-03-20 18:59:07 +0900;FIX: items/keys iterators in 3k, list wrapping

==

numpy/_import_tools.py
==================
2b98429;Charles Harris;2014-03-19 19:45:31 -0600;Merge pull request #4518 from juliantaylor/datetime-overflow
BUG: catch overflow of nominator in datetime conversions
==
==================
7ef9c48;Julian Taylor;2014-03-19 21:31:30 +0100;BUG: catch overflow of nominator in datetime conversions
closes gh-4486

==

numpy/core/src/multiarray/datetime.c
numpy/core/tests/test_datetime.py
==================
e67765b;Julian Taylor;2014-03-19 18:57:17 +0100;Merge pull request #4515 from ogrisel/undefined-asarray
FIX: missing asarray import in numpy.libs.utils
==
==================
caf3fc4;Olivier Grisel;2014-03-19 18:36:32 +0100;TST: add unittest for byte_bounds

==

numpy/lib/tests/test_utils.py
==================
741e5c7;Olivier Grisel;2014-03-19 16:16:04 +0100;FIX: missing asarray import in numpy.libs.utils

==

numpy/lib/utils.py
==================
7e40517;Charles Harris;2014-03-18 17:24:18 -0600;Merge pull request #4514 from abergeron/get_info
Add the change to disutils in the release notes.
==
==================
d1ae6cf;Arnaud Bergeron;2014-03-18 18:31:01 -0400;DOC: Add the change to disutils in the release notes.

==

doc/release/1.9.0-notes.rst
==================
8357e0b;Charles Harris;2014-03-18 14:53:51 -0600;Merge pull request #4387 from abergeron/get_info
ENH: Make output of get_atlas_info conditional on system_info.verbosity
==
==================
e72b7e9;Julian Taylor;2014-03-18 19:14:38 +0100;ENH: optimize srcstride0 copy with O3
enables autovectorization with gcc and improves performance by about 25% for cached data.

==

numpy/core/include/numpy/npy_common.h
numpy/core/setup_common.py
numpy/core/src/multiarray/lowlevel_strided_loops.c.src
==================
1d884dd;Nathaniel J. Smith;2014-03-18 18:13:19 +0000;fix PEP headers to placate PEP-0000 builder, mention Julia in notation section, and remove stray ^^ operator left over from the @@ purge

==

doc/neps/return-of-revenge-of-matmul-pep.rst
==================
6b38cdd;Julian Taylor;2014-03-18 19:03:42 +0100;Merge pull request #4507 from juliantaylor/test-add
TST: add some more tests
==
==================
f384717;njsmith;2014-03-18 16:49:03 +0000;Merge pull request #4503 from rproepp/3504-quantities
Fix linspace for use with physical quantities
==
==================
0e933e6;Nathaniel J. Smith;2014-03-18 16:38:49 +0000;New version just submitted to PEP editors.
Main changes:
- @@ is gone
- A few small factual inaccuracies have been fixed
- I added a discussion of Guido's ".M *" idea to the "Rejected
  alternatives" section
- Added an (incomplete) "Implementation details" section, based on
  Nick's comments.

==

doc/neps/return-of-revenge-of-matmul-pep.rst
==================
4a764d3;Robert Pröpper;2014-03-17 16:35:27 +0100;BUG: Fix linspace for use with physical quantities
The fix for issue 3504 led to errors when using linspace with the quantities package. Multiplying with 1 instead of adding 0 prevents issues when using physical quantities.

==

numpy/core/function_base.py
numpy/core/tests/test_function_base.py
==================
5df0158;Julian Taylor;2014-03-17 21:56:07 +0100;TST: add some more tests
test for gh-4494
test median returns array scalars and works with object arrays

==

numpy/core/tests/test_regression.py
numpy/lib/tests/test_function_base.py
==================
e3794e7;Julian Taylor;2014-03-17 21:50:17 +0100;Merge pull request #4494 from embray/astropy-1987
BUG: Adds missing Py_INCREF in array_boolean_subscript
==
==================
ad8e2c7;Charles Harris;2014-03-17 13:13:48 -0600;Merge pull request #4502 from mwiebe/einsumfix
Fix for obscure einsum bug (#4485)
==
==================
10e289c;Mark Wiebe;2014-03-16 20:40:23 -0700;BUG: Buffered stride was erroneously marked fixed (fixes #4485)

==

numpy/core/src/multiarray/nditer_api.c
==================
04eaf27;Mark Wiebe;2014-03-16 20:56:16 -0700;TST: Test for einsum/nditer fixed stride bug

==

numpy/core/tests/test_einsum.py
==================
81428d8;Mark Wiebe;2014-03-16 18:31:46 -0700;BLD: Fix build on Windows

==

numpy/core/src/npymath/ieee754.c.src
==================
b80ef75;Charles Harris;2014-03-16 13:50:53 -0600;Merge pull request #4483 from meltingwax/meltingwax/2469
BUG: Fix commutativity of {dot,multiply,inner}(scalar, matrix_of_objects)
==
==================
ea63902;Charles Harris;2014-03-16 09:15:29 -0600;Merge pull request #4496 from hmeine/PY_ARRAY_UNIQUE_SYMBOL_docs
mention possible definition of unique symbol in .h
==
==================
dab0040;Julian Taylor;2014-03-16 12:35:51 +0100;Merge pull request #4500 from jaimefrio/mapping-shadowing
MANT: rename variable to avoid shadowing
==
==================
2f38c8e;Hans Meine;2014-03-16 11:23:37 +0100;DOC: suggest definition of unique symbol in .h
I find it much more convenient to define the PY_ARRAY_UNIQUE_SYMBOL in a
header file #included by all files of the extension (than to repeat its definition in each and every file).
==

doc/source/reference/c-api.array.rst
==================
df71ae6;jaimefrio;2014-03-15 22:58:48 -0700;MANT: rename variable to avoid shadowing
The variable `obj` in `prepare_index` is shadowed in an inner scope within
the function. Renamed the inner scope variable to `tmp_obj` to avoid
confusion.

==

numpy/core/src/multiarray/mapping.c
==================
ddd02d5;Charles Harris;2014-03-15 21:17:11 -0600;Merge pull request #4497 from juliantaylor/index-gil-release
ENH: release gil for indexing operations
==
==================
646f54e;Charles Harris;2014-03-15 21:04:46 -0600;Merge pull request #4498 from meltingwax/meltingwax/2092
DOC: specify that 2d array must be non-empty in np.poly error message.
==
==================
403c26a;Charles Harris;2014-03-15 18:15:31 -0600;Merge pull request #4067 from hmeine/master
explain character codes of dtype.kind
==
==================
f8942f5;Daniel da Silva;2014-03-15 15:05:13 -0400;DOC: specify that 2d array must be non-empty in np.poly error message.
Fixes #2092. Changes message passed to ValueError.

==

numpy/lib/polynomial.py
==================
6ae3946;Julian Taylor;2014-03-15 14:35:10 +0100;ENH: release gil for put and putmask

==

numpy/core/src/multiarray/item_selection.c
==================
259db01;Julian Taylor;2014-03-15 13:58:20 +0100;ENH: release gil for indexing operations
closes gh-4310

==

numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/lowlevel_strided_loops.c.src
numpy/core/src/multiarray/mapping.c
==================
68179d5;Hans Meine;2014-03-15 07:15:17 +0100;"(byte-)string" in PyArrayInterface.typekind docs

==

doc/source/reference/c-api.types-and-structures.rst
==================
c001472;Hans Meine;2014-03-15 07:11:58 +0100;explain character codes of dtype.kind
"one of 'biufcSUV'" is not very helpful if it stands alone,
also the 'O' typecode was missing.
==

numpy/add_newdocs.py
==================
e86077a;Hans Meine;2014-03-15 06:58:24 +0100;doc fixes to 'array-protocol type strings'
The item size is not always used (and not always means exact bytes), and
'O' was not in the table.
==

doc/source/reference/arrays.dtypes.rst
==================
17227ce;Charles Harris;2014-03-14 11:57:45 -0600;Merge pull request #4493 from charris/reference-cython-not-pyrex
DOC: Change pyrex to Cython in c-info.how-to-extend.rst.
==
==================
9d24bc1;Nathaniel J. Smith;2014-03-14 17:26:52 +0000;add more comprehensive discussion of alternative symbols

==

doc/neps/return-of-revenge-of-matmul-pep.rst
==================
d369f1e;Erik M. Bray;2014-03-14 13:06:30 -0400;Remove excessive spacing

==

numpy/core/src/multiarray/mapping.c
==================
a2ca82f;Charles Harris;2014-03-14 09:53:26 -0600;DOC: Change pyrex to Cython in c-info.how-to-extend.rst.

==

doc/source/user/c-info.how-to-extend.rst
==================
8eb120f;Charles Harris;2014-03-14 09:11:30 -0600;Merge pull request #4488 from charris/remove-numpybook
MAINT: Remove doc/numpybook.
==
==================
a22bb0e;Daniel da Silva;2014-03-13 21:58:05 -0400;BUG: Fix commutativity of {dot,multiply,inner}(scalar, matrix_of_objs)
Fixes #2469 and #4482. Relaxes fail condition to allow subtype as documented.

==

numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_ufunc.py
==================
d319c24;Nathaniel J. Smith;2014-03-14 02:01:29 +0000;yet more word tweaks

==

doc/neps/return-of-revenge-of-matmul-pep.rst
==================
c86a38c;Nathaniel J. Smith;2014-03-14 00:06:16 +0000;realized I wasn't so sure of my claim about in-place matrix multiplication, so couch it more cautiously

==

doc/neps/return-of-revenge-of-matmul-pep.rst
==================
32de06e;Nathaniel J. Smith;2014-03-13 23:28:05 +0000;add 'unresolved issues' section; + wording tweaks and a little more elaboration of the problems with mixing np.ndarray and np.matrix

==

doc/neps/return-of-revenge-of-matmul-pep.rst
==================
48c77a6;Charles Harris;2014-03-13 16:34:07 -0600;Merge pull request #3908 from juliantaylor/median-percentile
add extended axis and keepdims support to percentile and median
==
==================
08550b9;Erik M. Bray;2014-03-13 16:28:23 -0400;Need to INCREF dtype again since PyArray_NewFromDescr steals a reference

==

numpy/core/src/multiarray/mapping.c
==================
7d53c81;Julian Taylor;2014-03-12 20:44:14 +0100;MAINT: revert back to separate median implementation
Merging median and percentile make would break astropy and quantities as
we don't call mean anymore. These packages rely on overriding mean to
add their own median behavior.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
50b60fe;Julian Taylor;2014-03-13 19:49:00 +0100;Merge pull request #4339 from abalkin/issue-2219
ENH: Implemented ma.append
==
==================
eea1a9c;Julian Taylor;2013-10-13 12:34:43 +0200;ENH: add extended axis and keepdims support to median and percentile

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
9c4602f;Charles Harris;2014-03-13 11:56:50 -0600;Merge pull request #4487 from charris/move-swig-to-tools-directory
Move swig to tools directory
==
==================
c7bb1b6;Charles Harris;2014-03-13 11:10:07 -0600;DOC: Document removal of doc/numpybook in 1.9.0 release notes.

==

doc/release/1.9.0-notes.rst
==================
5b97375;Charles Harris;2014-03-13 11:05:10 -0600;MAINT: Remove doc/numpybook.
Remove doc/numpybook. It has become outdated in parts and its contents
is now part of the official numpy documentation.

==

doc/numpybook/Figures/contiguous.eps
doc/numpybook/Figures/contiguous.fig
doc/numpybook/Figures/contiguous.pdf
doc/numpybook/Figures/fig1.eps
doc/numpybook/Figures/fig1bw.eps
doc/numpybook/Figures/fig2.eps
doc/numpybook/Figures/fig2bw.eps
doc/numpybook/Figures/hierarchy.dia
doc/numpybook/Figures/hierarchy.eps
doc/numpybook/Figures/hierarchy.fig
doc/numpybook/Figures/hierarchy.pdf
doc/numpybook/Figures/hierarchy.png
doc/numpybook/Figures/threefundamental.eps
doc/numpybook/Figures/threefundamental.fig
doc/numpybook/Figures/threefundamental.png
doc/numpybook/capi.lyx
doc/numpybook/comparison/ctypes/code.c
doc/numpybook/comparison/ctypes/filter.py
doc/numpybook/comparison/ctypes/interface.py
doc/numpybook/comparison/ctypes/newfile.dat
doc/numpybook/comparison/ctypes/timeme
doc/numpybook/comparison/f2py/add.f
doc/numpybook/comparison/f2py/add.pyf
doc/numpybook/comparison/f2py/filter.f
doc/numpybook/comparison/f2py/filter.pyf
doc/numpybook/comparison/f2py/filtermodule.c
doc/numpybook/comparison/f2py/timeme
doc/numpybook/comparison/pyrex/add.c
doc/numpybook/comparison/pyrex/add.pyx
doc/numpybook/comparison/pyrex/c_numpy.pxd
doc/numpybook/comparison/pyrex/filter.c
doc/numpybook/comparison/pyrex/filter.pyx
doc/numpybook/comparison/pyrex/setup.py
doc/numpybook/comparison/pyrex/timeme
doc/numpybook/comparison/timing.py
doc/numpybook/comparison/weave/filter.py
doc/numpybook/comparison/weave/inline.py
doc/numpybook/comparison/weave/timeme
doc/numpybook/graphics/note.eps
doc/numpybook/graphics/note.fig
doc/numpybook/graphics/note.png
doc/numpybook/graphics/tip.eps
doc/numpybook/graphics/tip.fig
doc/numpybook/graphics/tip.png
doc/numpybook/graphics/tip.xfig.fig
doc/numpybook/graphics/warning.eps
doc/numpybook/graphics/warning.fig
doc/numpybook/graphics/warning.png
doc/numpybook/mybook.layout
doc/numpybook/numpybook.lyx
doc/numpybook/runcode.py
==================
03564ae;Nathaniel J. Smith;2014-03-13 16:01:43 +0000;and yet even more phrasing tweaks

==

doc/neps/return-of-revenge-of-matmul-pep.rst
==================
83f5127;Nathaniel J. Smith;2014-03-13 15:23:35 +0000;more phrasing tweaks

==

doc/neps/return-of-revenge-of-matmul-pep.rst
==================
dfe6c7e;Charles Harris;2014-03-13 09:20:32 -0600;Merge pull request #4473 from Sankarshan-Mudkavi/fix-gh-2208
BUG: Fixes gh-2208, alignment in subarrays
==
==================
ba9da00;Nathaniel J. Smith;2014-03-13 14:54:54 +0000;phrasing tweaks

==

doc/neps/return-of-revenge-of-matmul-pep.rst
==================
3ede17e;Nathaniel J. Smith;2014-03-13 04:09:45 +0000;more updates based on people's latest suggestions

==

doc/neps/return-of-revenge-of-matmul-pep.rst
==================
9472a8d;Nathaniel J. Smith;2014-03-12 21:41:58 +0000;clean up in prep for python-ideas

==

doc/neps/return-of-revenge-of-matmul-pep.rst
==================
f151004;Charles Harris;2014-03-12 12:52:02 -0600;DOC: Document doc/swig move in 1.9.0 release notes.

==

doc/release/1.9.0-notes.rst
==================
147c6bb;Charles Harris;2014-03-12 11:32:46 -0600;STY: Whitespace patrol on numpy.i.

==

tools/swig/numpy.i
==================
a38888c;Charles Harris;2014-03-12 11:19:40 -0600;MAINT: Move doc/swig to tools/swig.
Also update MANIFEST.in and documentation to reflect the move. The
discussion of this change is at #2384.

Closes #2384. Closes #4374.

==

MANIFEST.in
doc/source/user/c-info.python-as-glue.rst
doc/swig/Makefile
doc/swig/README
doc/swig/numpy.i
doc/swig/pyfragments.swg
doc/swig/test/Array.i
doc/swig/test/Array1.cxx
doc/swig/test/Array1.h
doc/swig/test/Array2.cxx
doc/swig/test/Array2.h
doc/swig/test/Farray.cxx
doc/swig/test/Farray.h
doc/swig/test/Farray.i
doc/swig/test/Fortran.cxx
doc/swig/test/Fortran.h
doc/swig/test/Fortran.i
doc/swig/test/Makefile
doc/swig/test/Matrix.cxx
doc/swig/test/Matrix.h
doc/swig/test/Matrix.i
doc/swig/test/SuperTensor.cxx
doc/swig/test/SuperTensor.h
doc/swig/test/SuperTensor.i
doc/swig/test/Tensor.cxx
doc/swig/test/Tensor.h
doc/swig/test/Tensor.i
doc/swig/test/Vector.cxx
doc/swig/test/Vector.h
doc/swig/test/Vector.i
doc/swig/test/setup.py
doc/swig/test/testArray.py
doc/swig/test/testFarray.py
doc/swig/test/testFortran.py
doc/swig/test/testMatrix.py
doc/swig/test/testSuperTensor.py
doc/swig/test/testTensor.py
doc/swig/test/testVector.py
tools/swig/Makefile
tools/swig/README
tools/swig/numpy.i
tools/swig/pyfragments.swg
tools/swig/test/Array.i
tools/swig/test/Array1.cxx
tools/swig/test/Array1.h
tools/swig/test/Array2.cxx
tools/swig/test/Array2.h
tools/swig/test/Farray.cxx
tools/swig/test/Farray.h
tools/swig/test/Farray.i
tools/swig/test/Fortran.cxx
tools/swig/test/Fortran.h
tools/swig/test/Fortran.i
tools/swig/test/Makefile
tools/swig/test/Matrix.cxx
tools/swig/test/Matrix.h
tools/swig/test/Matrix.i
tools/swig/test/SuperTensor.cxx
tools/swig/test/SuperTensor.h
tools/swig/test/SuperTensor.i
tools/swig/test/Tensor.cxx
tools/swig/test/Tensor.h
tools/swig/test/Tensor.i
tools/swig/test/Vector.cxx
tools/swig/test/Vector.h
tools/swig/test/Vector.i
tools/swig/test/setup.py
tools/swig/test/testArray.py
tools/swig/test/testFarray.py
tools/swig/test/testFortran.py
tools/swig/test/testMatrix.py
tools/swig/test/testSuperTensor.py
tools/swig/test/testTensor.py
tools/swig/test/testVector.py
==================
4fd4850;Charles Harris;2014-03-12 11:11:02 -0600;MAINT: Remove no longer existing files from MANIFEST.in.

==

MANIFEST.in
==================
0c82f69;Sankarshan Mudkavi;2014-03-12 13:18:38 -0400;Added tests for fix in alignment of subarrays, gh-2208

==

numpy/core/tests/test_dtype.py
==================
12472aa;Charles Harris;2014-03-12 10:10:47 -0600;Merge pull request #4466 from seberg/delay-size-nditer-size-check
BUG: Delay npyiter size check when size may change
==
==================
424b56e;Charles Harris;2014-03-12 08:16:57 -0600;Merge pull request #4479 from leomao/master
BUG: when initialize a vectorize object, always set self._ufunc to None first. fix #3285.
==
==================
5a3b0ab;Sebastian Berg;2014-03-07 23:05:47 +0100;BUG: Delay npyiter size check when size may change
When a multi index is tracked and RemoveAxis can be called, the
size of the iterator may still change. This was causing failures
for example for the SVD, because the gufunc machinery requires
a temporarily larger iterator for output allocation.

Thanks to Jaime (jaime.frio@gmail.com) for noting that this is
plausible since the size check can be delayed pretty ok up
until GetIterNext (or similar functions).

Closes gh-4442

==

doc/release/1.9.0-notes.rst
doc/source/reference/c-api.iterator.rst
numpy/core/src/multiarray/multiarray_tests.c.src
numpy/core/src/multiarray/nditer_api.c
numpy/core/src/multiarray/nditer_constr.c
numpy/core/src/multiarray/nditer_pywrap.c
numpy/core/src/multiarray/nditer_templ.c.src
numpy/core/tests/test_nditer.py
numpy/linalg/tests/test_regression.py
==================
aff43c0;jarondl;2014-03-12 08:57:54 +0200;STY: change and delete some comments in recfromcsv
Removed two irrelevant comments about code history.

P.S. my first try with Github's online editor.
==

numpy/lib/npyio.py
==================
42d6a74;LeoMao;2014-03-12 11:28:22 +0800;remove assert in _get_ufunc_and_otypes, add a test in test_function_base.py

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
f82fe71;Charles Harris;2014-03-11 16:46:19 -0600;Merge pull request #4475 from juliantaylor/gil-release
Gil release for nonzero
==
==================
ff1dd4e;Charles Harris;2014-03-11 16:24:30 -0600;Merge pull request #4480 from juliantaylor/error-returns
BUG: add missing gufunc failure return values and missing malloc fail check
==
==================
aa51604;Julian Taylor;2014-03-11 21:39:54 +0100;BUG: add missing gufunc failure return values and missing malloc fail check

==

numpy/core/src/umath/ufunc_object.c
==================
7add97b;Julian Taylor;2014-03-10 22:23:51 +0100;ENH: release gil for np.packbits and np.unpackbits

==

numpy/lib/src/_compiled_base.c
==================
d62c435;Julian Taylor;2014-03-10 21:30:04 +0100;ENH: release gil for np.take and np.arange
implies adapting check_and_adjust_index to allow threadsafe error
reporting.

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/lowlevel_strided_loops.c.src
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/methods.c
==================
2f8c7a7;Lev Abalkin;2014-02-21 12:09:20 -0500;ENH: Implemented ma.append
Fixes #2219.

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
19b2be5;Julian Taylor;2014-03-10 19:53:19 +0100;ENH: release gil for nonzero

==

numpy/core/src/multiarray/item_selection.c
==================
3904978;Julian Taylor;2014-03-10 19:29:55 +0100;MAINT: add NPY_BEGIN_THREAD_NDITER and remove unnecessary needs_api checks
the thread variable is initialized to NULL and checked by the end macro
so the needs_api check is redundant.

==

numpy/core/src/multiarray/array_assign_array.c
numpy/core/src/multiarray/array_assign_scalar.c
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/einsum.c.src
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/umath/ufunc_object.c
==================
3d419a1;LeoMao;2014-03-11 16:15:21 +0800;when initialize a vectorize object, always set self._ufunc to None first. fix #3285

==

numpy/lib/function_base.py
==================
05dfbee;Nathaniel J. Smith;2014-03-11 03:15:37 +0000;add copyright notice

==

doc/neps/return-of-revenge-of-matmul-pep.rst
==================
3151e78;Nathaniel J. Smith;2014-03-11 03:08:44 +0000;another ReST tweak

==

doc/neps/return-of-revenge-of-matmul-pep.rst
==================
09df639;Nathaniel J. Smith;2014-03-11 03:07:12 +0000;more ReST fixes

==

doc/neps/return-of-revenge-of-matmul-pep.rst
==================
2f0e55b;Nathaniel J. Smith;2014-03-11 02:57:55 +0000;fix ReST typoes that were breaking footnotes

==

doc/neps/return-of-revenge-of-matmul-pep.rst
==================
ebca136;Nathaniel J. Smith;2014-03-11 02:56:35 +0000;phrasing tweaks

==

doc/neps/return-of-revenge-of-matmul-pep.rst
==================
976b50c;Nathaniel J. Smith;2014-03-11 02:45:04 +0000;lots better text, more polishing yes

==

doc/neps/return-of-revenge-of-matmul-pep.rst
==================
42be275;Charles Harris;2014-03-10 18:07:56 -0600;Merge pull request #4474 from juliantaylor/nonzero-bug
BUG: prevent nonzero memchr from running out of bounds
==
==================
cf26fc9;Julian Taylor;2014-03-10 18:30:10 +0100;BUG: prevent nonzero memchr from running out of bounds

==

numpy/core/src/multiarray/item_selection.c
==================
60b5dfe;Charles Harris;2014-03-10 09:15:02 -0600;Merge pull request #4471 from meltingwax/meltingwax/2552-r2
ENH: Explicitly use __eq__ in assert_equal(a,b)
==
==================
42354ba;Nathaniel J. Smith;2014-03-10 02:48:29 +0000;much expanded background section, to start addressing feedback from sympy/sage folks

==

doc/neps/return-of-revenge-of-matmul-pep.rst
==================
c1031bd;Daniel da Silva;2014-03-09 22:43:13 -0400;ENH: Explicitly use __eq__ in assert_equal(a,b)
Fixes #2552. Changes primary test expression in function.

==

numpy/testing/utils.py
==================
2766776;Charles Harris;2014-03-09 18:13:47 -0600;Merge pull request #4370 from juliantaylor/where-improve
ENH: improve PyArray_Nonzero for sparse bool masks
==
==================
61d7a10;Julian Taylor;2014-02-26 19:40:14 +0100;ENH: improve PyArray_Nonzero for sparse bool masks
we already count the number of true elements so we can decide when its
sparse and use faster (4-byte) vectorized npy_memchr.

==

numpy/core/src/multiarray/item_selection.c
numpy/core/tests/test_numeric.py
==================
81982f8;Nathaniel J. Smith;2014-03-09 02:13:46 +0000;make the initial section even more overwritten

==

doc/neps/return-of-revenge-of-matmul-pep.rst
==================
d369c1a;Nathaniel J. Smith;2014-03-09 00:36:02 +0000;add some more fields to the Big List o' Fields

==

doc/neps/return-of-revenge-of-matmul-pep.rst
==================
d99195e;Nathaniel J. Smith;2014-03-09 00:02:56 +0000;More edits; pretty clean at this point.

==

doc/neps/return-of-revenge-of-matmul-pep.rst
==================
3203a05;Nathaniel J. Smith;2014-03-08 23:36:03 +0000;edit edit

==

doc/neps/return-of-revenge-of-matmul-pep.rst
==================
1a977ac;Sankarshan Mudkavi;2014-03-07 14:54:52 -0500;BUG: Fixes gh-2208, alignment in subarrays

==

numpy/core/src/multiarray/descriptor.c
==================
4da29a8;Julian Taylor;2014-03-07 19:48:28 +0100;Merge pull request #4459 from Sankarshan-Mudkavi/fix-gh-1367
ENH: Added an output argument for numpy.outer
==
==================
51fc048;Sankarshan Mudkavi;2014-03-07 13:09:29 -0500;Added versiontag to docstring

==

numpy/core/numeric.py
==================
0007cd6;Julian Taylor;2014-03-07 16:49:52 +0100;Merge pull request #4456 from juliantaylor/travis-updates
work around outdated travis boxes
==
==================
b099017;seberg;2014-03-07 12:48:06 +0100;Merge pull request #4457 from cimarronm/linalg_lstsq_docfix
DOC: Fixed documentation on lstsq function on when it return an empty re...
==
==================
ea75479;Cimarron Mittelsteadt;2014-03-06 19:00:17 -0800;DOC: Fixed documentation on lstsq function on when it return an empty residuals array

==

numpy/linalg/linalg.py
==================
bf2a953;Julian Taylor;2014-03-06 22:59:39 +0100;TST: work around outdated travis boxes
run manual apt-get update to pick up the latest py3 security update

==

tools/travis-test.sh
==================
26f053d;Sankarshan Mudkavi;2014-03-05 17:23:22 -0500;ENH: Added an output argument for numpy.outer

==

numpy/core/numeric.py
numpy/core/tests/test_numeric.py
==================
a6f9b78;Charles Harris;2014-03-05 18:40:29 -0700;Merge pull request #4451 from meltingwax/meltingwax/revert-4421
BUG: Revert PR #4421: causes SciPy tests to fail
==
==================
4b2b77e;Daniel da Silva;2014-03-05 20:06:00 -0500;Revert "Merge pull request #4421 from meltingwax/meltingwax/4382"
Caused SciPy tests to fail when built with this NumPy.

==

numpy/distutils/fcompiler/__init__.py
numpy/distutils/misc_util.py
numpy/distutils/npy_pkg_config.py
numpy/distutils/tests/test_npy_pkg_config.py
numpy/distutils/unixccompiler.py
==================
683bc33;Charles Harris;2014-03-05 16:40:11 -0700;Merge pull request #4450 from juliantaylor/api-restore
BUG: restore api for file npy_PyFile_Dup and npy_PyFile_DupClose
==
==================
0bf8fec;Charles Harris;2014-03-05 15:33:24 -0700;Merge pull request #4334 from jspreston/patch-1
numpy.i bugfix: fortran ordering check
==
==================
ea89757;Julian Taylor;2014-03-05 21:54:39 +0100;BUG: restore api for file npy_PyFile_Dup and npy_PyFile_DupClose
breaking the api breaks matplotlib build and pip installation.
Introduce npy_PyFile_Dup2 and npy_PyFile_DupClose2 as replacements

==

doc/release/1.9.0-notes.rst
numpy/core/include/numpy/npy_3kcompat.h
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarraymodule.c
==================
a509af1;Charles Harris;2014-03-05 14:34:03 -0700;Merge pull request #4418 from charris/remove-cython-pyrex-directories
MAINT: Remove doc/cython and doc/pyrex files.
==
==================
94a1c20;Charles Harris;2014-03-05 14:31:49 -0700;Merge pull request #4421 from meltingwax/meltingwax/4382
BUG: Fix support for builds with directories that contain whitespace
==
==================
2e2bd93;Charles Harris;2014-03-05 14:14:29 -0700;Merge pull request #4449 from juliantaylor/vectorize-isnan
ENH: vectorize isnan
==
==================
7571ca7;Julian Taylor;2014-03-05 21:59:49 +0100;Merge pull request #4447 from charris/small-optimization
MAINT: Use static variable in numpy/core/src/multiarray/descriptor.c.
==
==================
fea6079;Charles Harris;2014-03-05 13:28:04 -0700;Merge pull request #4448 from sviterok/fix_broadcasting_doc
DOC: Update link to EricsBroadcastingDoc
==
==================
3796793;Julian Taylor;2014-03-05 20:34:57 +0100;ENH: vectorize isnan
isnan on amd64 is equivalent to x != x so we can use the existing code
with only adding a specialization for unary loops.

==

numpy/core/src/umath/loops.c.src
numpy/core/src/umath/simd.inc.src
numpy/core/tests/test_numeric.py
==================
30b2445;Charles Harris;2014-03-05 12:41:35 -0700;Merge pull request #4437 from abalkin/issue-4436
BUG: Masked array filled method ignores fill value
==
==================
342a935;Julian Taylor;2014-03-05 20:25:19 +0100;MAINT: remove some duplication in vectorized compare code

==

numpy/core/src/umath/simd.inc.src
==================
baf254c;Charles Harris;2014-03-05 12:32:54 -0700;Merge pull request #4446 from juliantaylor/bool-fix
BUG: fix double bool compares not being set to 0x1
==
==================
9b68fe7;Roman Nekhoroshev;2014-03-05 23:28:06 +0400;Update link to EricsBroadcastingDoc

==

numpy/doc/broadcasting.py
==================
18eb88b;Charles Harris;2014-03-05 12:21:47 -0700;MAINT: Use static variable in numpy/core/src/multiarray/descriptor.c.
This produces slightly cleaner code. When the const string array is not
static, gcc puts it on the stack and initializes it on every entry.

==

numpy/core/src/multiarray/descriptor.c
==================
1dc0002;Charles Harris;2014-03-05 12:09:11 -0700;Merge pull request #4402 from meltingwax/meltingwax/4357
BUG: adds check in dtype.name that string starts with "numpy." prefix before removing it (Fixes #4357)
==
==================
6a902a0;Julian Taylor;2014-03-05 20:01:08 +0100;BUG: fix double bool compares not being set to 0x1
mask needs to be applied after all packing else the result is the
saturated values (127)

==

numpy/core/src/umath/simd.inc.src
numpy/core/tests/test_numeric.py
==================
50bf6df;Daniel da Silva;2014-03-02 12:39:11 -0500;BUG: Fix support for builds in dirs with whitespace
Add escaping and quoting of dirs and enabled POSIX support in lexer.

Closes #4382.

==

numpy/distutils/fcompiler/__init__.py
numpy/distutils/misc_util.py
numpy/distutils/npy_pkg_config.py
numpy/distutils/tests/test_npy_pkg_config.py
numpy/distutils/unixccompiler.py
==================
460adc0;Daniel da Silva;2014-02-28 23:39:14 -0500;BUG: Fixes SystemError in dtype(user_defined_type).name
Adds an additional check that the "numpy." prefix exists before removing.

Closes #4357.

==

numpy/core/src/multiarray/descriptor.c
numpy/core/tests/test_dtype.py
==================
787fbff;Lev Abalkin;2014-03-04 22:15:23 -0500;BUG: Masked array filled method ignores fill value
When string fill value is passed to the filled method of
a masked array with object ('O') dtype, it is ignored and
masked elements are filled with '?' instead.

Fixes #4436

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
8722ea0;Charles Harris;2014-03-04 16:35:22 -0700;Merge pull request #4435 from jaimefrio/compare-doc
DOC: dtype's compare requires aligned, not swapped arrays
==
==================
64694a5;Charles Harris;2014-03-04 16:10:12 -0700;Merge pull request #4428 from jarondl/genfromtxt-doc
DOC: add missing parameters to npyio.genfromtxt, fix #2929
==
==================
91fa07e;Charles Harris;2014-03-04 16:08:02 -0700;Merge pull request #4430 from juliantaylor/apply-over-doc
DOC: document equivalence of apply_over_axes and tuple axis ufuncs
==
==================
9d8f31c;jaimefrio;2014-03-04 12:48:42 -0800;DOC: dtype's compare requires aligned, not swapped arrays

==

doc/source/reference/c-api.types-and-structures.rst
==================
f6800f5;Julian Taylor;2014-03-04 01:08:12 +0100;DOC: document equivalence of apply_over_axes and tuple axis ufuncs

==

numpy/lib/shape_base.py
==================
6030f09;jarondl;2014-03-04 09:24:39 +0200;DOC: two minor typos in genfromtxt

==

numpy/lib/npyio.py
==================
3e00e00;Charles Harris;2014-03-03 21:00:28 -0700;Merge pull request #4433 from jnothman/patch-4
DOC fix incorrect variable name in example
==
==================
b1d5501;jnothman;2014-03-04 14:47:05 +1100;DOC fix incorrect variable name in example
Undefined `dataaddr` -> `dataptrarray`
==

doc/source/reference/c-api.iterator.rst
==================
de6ec88;Charles Harris;2014-03-03 19:24:12 -0700;Merge pull request #4429 from juliantaylor/bool-comp-improve
ENH: improve vectorization of float comparisons
==
==================
81bb076;Charles Harris;2014-03-03 19:19:52 -0700;Merge pull request #4432 from jaimefrio/getarrayparamsfromobj_doc
DOC: Remove extra reference (&) in PyArray_GetParamsFromObject example
==
==================
3f1199b;Charles Harris;2014-03-03 19:17:01 -0700;Merge pull request #4431 from meltingwax/meltingwax/3311
BUG: Fix deepcopy() of rank-zero arrays.
==
==================
cb92b93;jaimefrio;2014-03-03 16:49:27 -0800;DOC: Remove extra reference (&) in PyArray_GetParamsFromObject example

==

numpy/core/src/multiarray/ctors.c
==================
726937e;Daniel da Silva;2014-03-03 18:47:24 -0500;BUG: Fix deepcopy() of rank-zero arrays.
Removed call to PyArray_Return() on return value.

Closes #3311.

==

numpy/core/src/multiarray/methods.c
numpy/core/tests/test_regression.py
==================
8fca578;Julian Taylor;2014-03-03 23:14:33 +0100;ENH: improve vectorization of float comparisons
Unroll and use pack instructions instead of slowish movemask with lookup
table.
Doubles performance AMD phenoms and about 30% on Intel haswells.
Core2 also gain a few percent.

==

numpy/core/src/umath/simd.inc.src
==================
e9afd40;Julian Taylor;2014-03-03 19:30:39 +0100;Merge pull request #4414 from mosessky/master
BUG: fix issue#4354 byte_bounds() bug closes gh-4354
==
==================
479437d;Yaron de Leeuw;2014-03-03 20:17:57 +0200;DOC: add missing parameters to npyio.genfromtxt, fix #2929
`loose` `missing` and `skiprows` were missing from the docstring of
`npyio.genfromtxt`. The later two are actualy deprecated, but were added
nonetheless.

==

numpy/lib/npyio.py
==================
4e1bffa;mosessky;2014-03-02 21:16:39 -0800;BUG: fix ValueError for byte_bounds() on datetime array close gh-4345

==

numpy/lib/utils.py
==================
d4c7c3a;Ralf Gommers;2014-03-02 23:29:34 +0100;Merge pull request #4423 from charris/fix-documentation-build
BUG: DOC: Fix documentation build.
==
==================
53b17c5;Charles Harris;2014-03-02 14:41:31 -0700;BUG: DOC: Fix documentation build.
The documentation was not building. The apparent cause was a problem in
parsing some `...` constructs in 1.9.0-notes.rst. Some of those
constructs looked intended as links and others just looked wrong. All
uses of `...` were replaced by inline literals ``...`` just to be safe.
I have no idea where or what the actual bug was.

Also spellchecked and reformatted for line length.

Closes #4346.

==

doc/release/1.9.0-notes.rst
==================
0013ffb;Julian Taylor;2014-03-02 14:30:12 +0100;Merge pull request #4420 from jnothman/patch-3
DOC apply correct documentation to np.ma.argmin
==
==================
028a45c;jnothman;2014-03-03 00:24:12 +1100;DOC apply correct documentation to np.ma.argmin
A typo assigned it the documentation for argmax.
==

numpy/ma/core.py
==================
dea0bea;Charles Harris;2014-03-01 21:31:18 -0700;DOC: Document removal of doc/pyrex and doc/cython directories.

==

doc/release/1.9.0-notes.rst
==================
e988116;Charles Harris;2014-03-01 21:08:21 -0700;MAINT: Remove doc/cython and doc/pyrex files.
Pyrex is obsolete and cython does a good job with Numpy these days.
These directories are not packages, so I don't think they need
deprecation.

Closes #4373.

==

doc/cython/MANIFEST
doc/cython/Makefile
doc/cython/README.txt
doc/cython/c_numpy.pxd
doc/cython/c_python.pxd
doc/cython/numpyx.pyx
doc/cython/run_test.py
doc/cython/setup.py
doc/pyrex/MANIFEST
doc/pyrex/Makefile
doc/pyrex/README.txt
doc/pyrex/c_numpy.pxd
doc/pyrex/c_python.pxd
doc/pyrex/notes
doc/pyrex/numpyx.c
doc/pyrex/numpyx.pyx
doc/pyrex/run_test.py
doc/pyrex/setup.py
==================
52bac2c;Charles Harris;2014-03-01 20:38:17 -0700;Merge pull request #4415 from juliantaylor/log1p-expm1-no-c99
BUG: fix non-c99 fallback for np.inf input to log1p/expm1
==
==================
76ecffa;Charles Harris;2014-03-01 20:29:56 -0700;Merge pull request #4401 from meltingwax/meltingwax/4359
BUG: Fix infinite recursion in else case of __format__() implementation (fixes #4359)
==
==================
2371f13;Daniel da Silva;2014-03-01 21:11:07 -0500;BUG: Fix infinite recursion in str.format of flex arrays (Fixes #4359).
The implemention of __format__ on generic objects (PEP 3101) was changed to use string conversion when no better method is found.

==

numpy/core/src/multiarray/scalartypes.c.src
numpy/core/tests/test_regression.py
==================
18cda3b;Julian Taylor;2014-03-02 02:55:30 +0100;BUG: fix non-c99 fallback for np.inf input to log1p/expm1
closes gh-4225

==

numpy/core/src/npymath/npy_math.c.src
numpy/core/tests/test_umath.py
==================
0dbd06f;Charles Harris;2014-03-01 12:12:02 -0700;Merge pull request #4411 from jyu-rmn/master
typo
==
==================
df39aa6;Charles Harris;2014-03-01 12:01:17 -0700;Merge pull request #4409 from juliantaylor/partition-doc
DOC: remove mention of quickselect in argpartition docs
==
==================
ec3f521;James Yu;2014-03-01 12:44:03 -0600;typo

==

numpy/polynomial/polynomial.py
==================
da9f29a;Julian Taylor;2014-03-01 19:37:16 +0100;DOC: remove mention of quickselect in argpartition docs
the default algorithm is introselect

==

numpy/add_newdocs.py
==================
41a17e8;Charles Harris;2014-03-01 09:29:43 -0700;Merge pull request #4377 from ContinuumIO/as_strided_fix
Fix stride_stricks.as_strided function for object arrays
==
==================
4d2acec;Julian Taylor;2014-03-01 15:40:19 +0100;Merge pull request #4338 from jaimefrio/cross-broadcast
BUG: Fix broadcasting in np.cross (solves #2624)
==
==================
94d35b5;Charles Harris;2014-03-01 07:04:34 -0700;Merge pull request #4372 from charris/fix-gh-2423
DOC: Fix documentation of normed keyword in histogram2d and histogramdd.
==
==================
a4e7645;Charles Harris;2014-03-01 07:04:07 -0700;Merge pull request #4376 from charris/fix-gh-2807
DOC: Improve the documentation of numpy.load.
==
==================
50da92a;Charles Harris;2014-03-01 07:03:54 -0700;Merge pull request #4400 from charris/fix-ufunc-documention
Fix ufunc documention
==
==================
64e9f78;Julian Taylor;2014-03-01 14:58:11 +0100;Merge pull request #4399 from juliantaylor/mingw-filefix
BUG: enable windows large file support for mingw
==
==================
24438fb;Julian Taylor;2014-03-01 14:47:52 +0100;Merge pull request #4284 from robquant/histogramdd_rightmost_binedge
Closes issue #4266, fixes histogramdd treatment of events at rightmost binedge
==
==================
e97601d;Julian Taylor;2014-03-01 14:39:18 +0100;Merge pull request #4146 from seberg/issue-4145
BUG: Only convert 0d arrays to scalars in power
==
==================
6bfd6d4;Charles Harris;2014-02-28 17:03:08 -0700;DOC: Document ldexp and frexp.
The documentation needs to be in umathmodule.c as that is where ldexp
and frexp and defined. I moved the current documention from
add_newdocs.py to ufunc_docstrings.py, manually translated them into C
strings, and inserted them into umathmodule.c.

Closes #2354.

==

numpy/add_newdocs.py
numpy/core/code_generators/ufunc_docstrings.py
numpy/core/src/umath/umathmodule.c
==================
0a3b146;Charles Harris;2014-02-27 20:10:05 -0700;DOC: Correct and extend the documentation of fmod and remainder ufuncs.
Closes #3563.

==

numpy/core/code_generators/ufunc_docstrings.py
==================
cc380c5;Julian Taylor;2014-02-28 18:50:52 +0100;BUG: enable windows large file support for mingw
The (non-lfs) posix api mingw otherwise uses does not seem to work on win32.
The windows lseek prototypes are available in the ancient mingw32 version
we use for our windows binaries but not the fseek/ftell, so they are
defined manually.

==

numpy/core/include/numpy/npy_common.h
==================
a22130f;Julian Taylor;2014-02-28 14:25:49 +0100;Merge pull request #4396 from juliantaylor/paver-3.4
MAINT: add python3.4 to paver file
==
==================
b3f4975;Julian Taylor;2014-02-28 14:05:29 +0100;MAINT: add python3.4 to paver file

==

pavement.py
==================
7e0cd9a;Sebastian Berg;2013-12-26 22:21:16 +0100;BUG: Only convert 0d arrays to scalars in power
Operations such as `x**array([2])` would convert the
2 into an integer and loose the dimension information,
because the array (at this time, it is deprecated),
supports `__index__` even though it is not 0-d.

This fixes it, by not trying the index machinery
when it was an array, since it is unnecessary.

Closes gh-4145

==

numpy/core/src/multiarray/number.c
numpy/core/tests/test_umath.py
==================
39f1133;Yaron de Leeuw;2014-02-27 20:13:03 +0200;DOC: npyio.recfromcsv keyword argument changes
Added a note to recfromcsv about the `dtype` keyword,
as suggested by @hpaulj. Also added a note to the release notes,
about the change in the `update` keyword, as suggested by @charris.

==

doc/release/1.9.0-notes.rst
numpy/lib/npyio.py
==================
3b99f37;Yaron de Leeuw;2013-11-25 16:25:25 +0200;TST: Added regression test for recfromcsv dtype error, as suggested by @hpaulj

==

numpy/lib/tests/test_io.py
==================
803a75f;Yaron de Leeuw;2013-09-29 10:35:21 +0300;MAINT (API?): organize npyio.recfromcsv defaults
Organizes the default kwargs in recfromcsv. Changes two undocumented
kwargs behaviors:

*  previously, if a user set `names=None`, it was ignored and replaced
   with `names=True`
*  the `dtype` kwarg was ignored. If `update` was given, it was used as
   `dtype`, and if not, None was used. We can retain the `update` behavior
 by using `kwargs.setdefault("dtype",kwargs.get('update', None))`.
  This Closes #311 .

==

numpy/lib/npyio.py
==================
447c724;Charles Harris;2014-02-27 20:26:06 -0700;Merge pull request #4394 from ariddell/patch-1
DOC: Fix typo in np.random.choice documentation
==
==================
615d230;Allen Riddell;2014-02-27 22:10:56 -0500;DOC: Fix typo in np.random.choice documentation
np.random.permutation returns an array, which can be sliced.
==

numpy/random/mtrand/mtrand.pyx
==================
f1aab14;Charles Harris;2014-02-27 14:31:35 -0700;Merge pull request #4391 from juliantaylor/cov-array
BUG: accept non arrays in cor and corrcoeff
==
==================
0dbbbd4;Charles Harris;2014-02-27 14:13:13 -0700;Merge pull request #4386 from juliantaylor/sse2-negative
ENH: vectorize negative with sse
==
==================
df84ecf;Julian Taylor;2014-02-27 20:39:12 +0100;BUG: accept non arrays in cor and corrcoeff
closes gh-4295

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
bf00084;Charles Harris;2014-02-27 12:19:26 -0700;DOC, MAINT: Spell check and break long lines in ufunc_docstrings.py.
Some bits are also rephrased and nan is replaced by NaN where
appropriate.

==

numpy/core/code_generators/ufunc_docstrings.py
==================
c2afa62;Arnaud Bergeron;2014-02-27 14:04:36 -0500;ENH: Make output of get_atlas_info conditional on system_info.verbosity

==

numpy/distutils/command/config.py
numpy/distutils/exec_command.py
numpy/distutils/system_info.py
==================
3870d1a;Julian Taylor;2014-02-27 19:33:50 +0100;ENH: vectorize negative with sse
negative on amd64 is the same as absolute except using xor instead of andnot

==

numpy/core/src/umath/loops.c.src
numpy/core/src/umath/simd.inc.src
numpy/core/tests/test_umath.py
==================
8c4d9be;Charles Harris;2014-02-27 10:23:18 -0700;Merge pull request #4383 from argriffing/more-versionadded
DOC: some versionadded notes
==
==================
a0470bc;alex;2014-02-27 11:15:46 -0500;DOC: assert_no_warnings versionadded 1.8 -> 1.7

==

numpy/testing/utils.py
==================
1f2771c;alex;2014-02-27 10:50:25 -0500;DOC: some versionadded notes

==

numpy/lib/npyio.py
numpy/testing/utils.py
==================
3a2f048;Charles Harris;2014-02-26 17:37:04 -0700;Merge pull request #4375 from ContinuumIO/fix_scalar_inherit
Fix scalar inherit
==
==================
a98b6b4;Jay Bourque;2014-02-26 18:30:44 -0600;Fix stride_stricks.as_strided function for object arrays
Currently, calling as_strided for object array results in 'TypeError: Cannot change data-type for object array.'. Fix so that dtype of new array is only set for void dtype, as originally intended.

==

numpy/lib/stride_tricks.py
numpy/lib/tests/test_stride_tricks.py
==================
73750e6;Charles Harris;2014-02-26 17:23:24 -0700;DOC: Improve the documentation of numpy.load.
Add the fact that for pickled files, a file-like object must also
support the readline() method.

Closes #2807.

==

numpy/lib/npyio.py
==================
3a64972;Travis E. Oliphant;2014-02-26 17:40:46 -0600;Add test-case for multiple-inheritance on an array-scalar.

==

numpy/core/tests/test_scalarinherit.py
==================
149359f;Travis E. Oliphant;2014-02-26 17:27:58 -0600;Fix infinite recursion when initializing sub-class of array scalars.

==

numpy/core/src/multiarray/scalartypes.c.src
==================
3392529;Charles Harris;2014-02-26 13:07:32 -0700;DOC: Fix documentation of normed in histogram2d and histogramdd.
The documentation misrepresented what happened, leaving out division
by the total number of sample points.

Also run spellcheck over function_base.py and twodim_base.py and break
some long lines.

Closes #2423.

==

numpy/lib/function_base.py
numpy/lib/twodim_base.py
==================
2943c43;Charles Harris;2014-02-26 12:42:30 -0700;Merge pull request #4191 from juliantaylor/openblas-info
BUG: get_info('openblas') does not read libraries key
==
==================
997f65e;seberg;2014-02-26 15:50:39 +0100;Merge pull request #4333 from charris/fix-gh-2312
Fix gh 2312
==
==================
5100498;seberg;2014-02-26 15:45:42 +0100;Merge pull request #4302 from charris/fix-gh-605
BUG: Make interp return NaN at NaN interpolation points.
==
==================
8ce3640;Julian Taylor;2014-02-25 22:26:24 +0100;Merge pull request #4336 from Sankarshan-Mudkavi/fix-issue-3504
Fixed issue 3504
==
==================
87a9d5c;Charles Harris;2014-02-25 14:13:36 -0700;Merge pull request #3984 from ContinuumIO/promote_types_fix
Fix promote_types for strings and numbers
==
==================
ba1e4df;Sankarshan Mudkavi;2014-02-20 19:12:24 -0500;BUG: Fixed issue 3504, and added tests for complex support

==

numpy/core/function_base.py
numpy/core/tests/test_function_base.py
==================
1f9d4d2;Jay Bourque;2013-12-20 12:08:53 -0600;BUG: Fix promote_types, can_cast, as astype issues
- promote_types does not return correct string size for integer and string arguments. Fix so that integer and string types are promoted to string type that is long enough to hold integer type safely cast to string.
- can_cast incorrectly returns True for certain integer and string types. Fix so that can_cast only returns True if string type is long enough to hold integer type safely cast to string.
- calling astype to convert integer to string should fail if string type is not long enough to hold integer converted to string and casting argument is set to "safe".

==

doc/release/1.9.0-notes.rst
doc/source/reference/c-api.array.rst
numpy/add_newdocs.py
numpy/core/src/multiarray/convert_datatype.c
numpy/core/tests/test_api.py
numpy/core/tests/test_numeric.py
numpy/core/tests/test_shape_base.py
==================
5a44a9f;Charles Harris;2014-02-25 11:38:04 -0700;Merge pull request #4361 from juliantaylor/py3.4-travis
TST: switch i386 build to python3.4 defaulting ubuntu 14.04
==
==================
2872bf7;Julian Taylor;2014-02-24 20:19:50 +0100;TST: switch i386 build to python3.4 defaulting ubuntu 14.04
to do that fix a missing $DIST variable usage in the test script

==

.travis.yml
tools/travis-test.sh
==================
07ef370;Nathaniel J. Smith;2014-02-25 10:26:01 -0500;add negative power support to @@

==

doc/neps/return-of-revenge-of-matmul-pep.rst
==================
56eb28e;Charles Harris;2014-02-24 22:52:16 -0700;Merge pull request #4364 from argriffing/triu-broadcasting
ENH: tril and triu broadcasting
==
==================
e4c274f;alex;2014-02-25 00:10:06 -0500;DOC: triu/tril broadcasting release notes

==

doc/release/1.9.0-notes.rst
==================
249c38e;alex;2014-02-24 23:10:32 -0500;ENH: tril and triu broadcasting

==

numpy/lib/tests/test_twodim_base.py
numpy/lib/twodim_base.py
==================
9573f78;Charles Harris;2014-02-24 18:38:21 -0700;Merge pull request #4362 from njsmith/master
[DOC] Fix small inaccuracy in broadcasting docs
==
==================
3b94837;Nathaniel J. Smith;2014-02-24 19:56:45 -0500;move intended usage section after motivation

==

doc/neps/return-of-revenge-of-matmul-pep.rst
==================
c13e2eb;Nathaniel J. Smith;2014-02-24 19:02:42 -0500;more edits

==

doc/neps/return-of-revenge-of-matmul-pep.rst
==================
f8bcb88;njsmith;2014-02-24 18:50:04 -0500;[DOC] Fix small inaccuracy in broadcasting docs
During broadcasting, dimensions with size 1 can be matched against 0-sized dimensions, and in this case it's the size 1 dimension that will be shrunk away to nothingness. So it's wrong to say that the *smaller* dimension is the one that changes.
==

numpy/doc/broadcasting.py
==================
2d152af;jaimefrio;2014-02-24 11:32:55 -0800;DOC: Added note to 1.9.0 release notes

==

doc/release/1.9.0-notes.rst
==================
dd8fa82;Nathaniel J. Smith;2014-02-24 00:21:09 -0500;tweak tweak

==

doc/neps/return-of-revenge-of-matmul-pep.rst
==================
9a7a9f0;Nathaniel J. Smith;2014-02-23 23:47:46 -0500;more text tweaks

==

doc/neps/return-of-revenge-of-matmul-pep.rst
==================
76b1f2c;Nathaniel J. Smith;2014-02-23 23:35:49 -0500;switch to just use text for the table, it's easier to read!

==

doc/neps/return-of-revenge-of-matmul-pep.rst
==================
5bb44e4;Nathaniel J. Smith;2014-02-23 23:23:59 -0500;more table format tweaking. too bad .rst sucks at this!

==

doc/neps/return-of-revenge-of-matmul-pep.rst
==================
8041598;Nathaniel J. Smith;2014-02-23 23:18:53 -0500;bold the 'dot' row of table

==

doc/neps/return-of-revenge-of-matmul-pep.rst
==================
1199a31;Nathaniel J. Smith;2014-02-23 23:12:30 -0500;add mention of ellipsis

==

doc/neps/return-of-revenge-of-matmul-pep.rst
==================
703fcc6;Nathaniel J. Smith;2014-02-23 23:08:59 -0500;Many updates to draft PEP incorporating feedback

==

doc/neps/return-of-revenge-of-matmul-pep.rst
==================
6447357;Nathaniel J. Smith;2014-02-22 16:20:24 -0500;initial commit of new infix matrix multiply PEP

==

doc/neps/return-of-revenge-of-matmul-pep.rst
==================
b5c62f8;Charles Harris;2014-02-22 12:46:00 -0700;Merge pull request #4348 from juliantaylor/rand-int-check-bug
BUG: handle non integer types for multinomial/dirichlet size
==
==================
826d137;Charles Harris;2014-02-22 12:39:42 -0700;Merge pull request #4350 from seberg/buffer-fixes
Buffer fixes
==
==================
6c4e642;Sebastian Berg;2014-02-22 18:18:23 +0100;BUG: Hang on to originally filled Py_Buffer view.
When filling the python buffer view object, python sets
view.shape = &view.len (ndim=1, so this works). If we copy
the view info into our Memoryview object instead of having
it directly filled &view.len points into nirvana.

Closes gh-3175

==

numpy/core/src/multiarray/numpymemoryview.c
==================
e067e6b;Sebastian Berg;2014-02-22 17:19:23 +0100;BUG: Whitespace stripping in pep3118 format parser and early free
Closes gh-3348

==

numpy/core/src/multiarray/buffer.c
==================
d2fd1af;Charles Harris;2014-02-22 09:40:47 -0700;Merge pull request #4288 from nh2/fix-seterr-examples
Mistake in seterr docs?
==
==================
65a73df;Charles Harris;2014-02-22 08:58:19 -0700;Merge pull request #4344 from jaimefrio/unique-sort
BUG: Fixes #2799
==
==================
2882cc9;Charles Harris;2014-02-22 08:54:47 -0700;Merge pull request #4347 from juliantaylor/partition-max
ENH: add max fastpath to partition for nan detection
==
==================
bf5fd54;Charles Harris;2014-02-22 08:32:08 -0700;Merge pull request #4349 from juliantaylor/warning-maint
MAINT: fix a bunch of compiler warnings
==
==================
4dcfcc5;Julian Taylor;2014-02-22 13:33:52 +0100;MAINT: fix a bunch of compiler warnings

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/number.c
numpy/core/src/multiarray/refcount.c
numpy/core/src/multiarray/scalarapi.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/private/npy_binsearch.h.src
numpy/core/src/private/ufunc_override.h
numpy/core/src/umath/loops.c.src
numpy/core/src/umath/simd.inc.src
==================
fdb219f;Julian Taylor;2014-02-22 12:14:44 +0100;BUG: handle non integer types for multinomial/dirichlet size
Closes gh-3173

==

numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
numpy/random/tests/test_random.py
==================
a676f4e;Julian Taylor;2014-02-18 00:23:56 +0100;ENH: add max fastpath to partition for nan detection
Allows low overhead check for NaN via isnan(partition(d, (x, -1))[-1])

==

numpy/core/src/npysort/selection.c.src
numpy/core/tests/test_multiarray.py
==================
a712c67;jaimefrio;2014-02-21 16:35:32 -0800;BUG: Fixes #2799 Use `np.sort` instead of `sorted` when the input is a list and no indices are requested. Fixes #2799.

==

numpy/lib/arraysetops.py
numpy/lib/tests/test_arraysetops.py
==================
8a4ff79;Julian Taylor;2014-02-21 23:35:22 +0100;DOC: update openblas fork warning with fixed pthread build info

==

site.cfg.example
==================
5dbf527;Julian Taylor;2014-01-12 17:27:07 +0100;BUG: get_info('openblas') does not read libraries key
The documented libraries tag in the site.cfg is not read by the configuration,
instead openblas_libs is used, this is inconsistent with atlas configuration.
So libraries first and then try openblas_libs for backward compatibility.

Also ensure check_libs returns None instead of a dict of empty lists if
nothing is found.

==

numpy/distutils/system_info.py
==================
dd85748;Charles Harris;2014-02-21 15:15:32 -0700;Merge pull request #4342 from seberg/issue-4340
TST: do not use "ignore" to filter warnings
==
==================
fd399aa;Sebastian Berg;2014-02-21 21:13:29 +0100;TST: do not use "ignore" to filter warnings
When a warning is ignored (or raised once) in python, the warnings
module will tag on a `__warningregistry__` dictionary to be able
to filter these warnings in the future. This is tagged on to the
current context, causing leakage to later calls (this is a bit
more complex, since where the registry ends up depends on the
layers between the original caller and warner).

In short, tests should typically not use ignore but catch the
warnings to avoid changing the user experience (or errors
on duplicate test runs).

Fixes an error on duplicate test runs (does not remove all
"ignores" which may change behaviour outside tests).
Closes gh-4340

==

numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_nanfunctions.py
==================
e31da35;jaimefrio;2014-02-21 10:58:06 -0800;TST: Added out of bounds axis checking to the tests. ENH: Minimize temporary intermediate arrays using a preallocated      output array and in-place operations. DOC: Added 'Supports full broadcasting' note to the docstring.

==

numpy/core/numeric.py
numpy/core/tests/test_numeric.py
==================
b9454f5;jaimefrio;2014-02-20 22:15:47 -0800;BUG: Fix broadcasting in np.cross (solves #2624)
Changed np.cross to move the axis it's operating on to the end, not the
beginning of the shape tuple, and used rollaxis, not swapaxes, so that
normal broadcasting rules apply.
There were no tests in place, so I added some validation of results and
broadcasted shapes, including the one reported in #2624

==

numpy/core/numeric.py
numpy/core/tests/test_numeric.py
==================
aa615ad;jspreston;2014-02-20 14:32:20 -0700;numpy.i bugfix: fortran ordering check
for ARGOUTVIEWM?_FARRAY[34] typemaps, the included require_fortran check was inverted -- failing if the resulting array had fortran ordering, not if it did not.  This modification inverts these checks.
==

doc/swig/numpy.i
==================
34d7bee;Charles Harris;2014-02-20 10:08:06 -0700;Merge pull request #4315 from charris/fix-gh-2408
BUG: #2408, Fix f2py Python 3 error message string bug.
==
==================
d54b678;Charles Harris;2014-02-20 10:06:56 -0700;Merge pull request #4305 from charris/fix-gh-4256
BUG: #4256: f2py, PyString_FromStringAndSize is undefined in Python3.
==
==================
7daf5cd;Charles Harris;2014-02-20 09:18:42 -0700;DOC: Document tofile exception changes in 1.9.0 release notes.

==

doc/release/1.9.0-notes.rst
==================
1058717;Charles Harris;2014-02-20 08:55:07 -0700;MAINT: #2312, Make all tofile failures raise IOError.
Fix two that were raising ValueError instead.
Make some style cleanups.

Closes #2312.

==

numpy/core/src/multiarray/convert.c
==================
0178b12;seberg;2014-02-20 15:44:49 +0100;Merge pull request #4321 from juliantaylor/half-sum-fix
BUG: fix initialized half sum
==
==================
5803ec4;Niklas Hambüchen;2014-02-20 11:24:22 +0000;Fix seterr example for resetting to old settings

==

numpy/core/numeric.py
==================
3aaf365;Julian Taylor;2014-02-19 18:41:42 +0100;Merge pull request #4329 from seberg/index-casting-rule
BUG: Index arrays need to be cast with SAME_KIND or FORCE casting
==
==================
c513585;Sebastian Berg;2014-02-19 16:29:03 +0100;BUG: Index arrays need to be cast with SAME_KIND or FORCE casting
When checking index arrays for out of bound values, safe casting
was used. In principle this is unsafe, but we need to support indexing
with a 64bit integer array on 32bit systems.

Closes gh-4328

==

numpy/core/src/multiarray/mapping.c
numpy/core/tests/test_indexing.py
==================
8997167;seberg;2014-02-19 14:33:55 +0100;Merge pull request #4325 from charris/memmap-has-no-close
DOC: Remove close method from memmap docstring.
==
==================
8a38f64;Charles Harris;2014-02-18 22:46:07 -0700;DOC: Remove close method from memmap docstring.
Memmap objects no longer have a close method.

==

numpy/core/memmap.py
==================
871c73b;Julian Taylor;2014-02-18 19:08:03 +0100;BUG: fix initialized half sum
pairwise summation added in 1.9 broke half sums if the first element is
initialized non-zero. E.g. d += x

==

numpy/core/src/umath/loops.c.src
numpy/core/tests/test_ufunc.py
==================
b5b47b1;seberg;2014-02-18 10:11:14 +0100;Merge pull request #4316 from charris/fix-gh-4092
DOC: Remove \n from strings in plot examples.
==
==================
5db04db;Charles Harris;2014-02-17 18:43:14 -0700;DOC: Remove \n from strings in plot examples.
The \n occur in plot titles and mess up the generated html. An
alternative fix would be to use a raw docstring or \\n, but here
it looks simpler to just delete the problem.

Closes #4092.

==

numpy/lib/twodim_base.py
==================
b69ee44;Charles Harris;2014-02-17 16:08:52 -0700;Merge pull request #4309 from venthur/master
Mention `compress` in `take`'s See Also docstring
==
==================
1f8a78d;Charles Harris;2014-02-17 16:05:58 -0700;Merge pull request #4313 from MarcCote/master
Update c-api.array.rst
==
==================
1b83d85;Charles Harris;2014-02-17 14:47:44 -0700;BUG: #2408, Fix f2py Python 3 error message string bug.
The original was generating an exception message and, after aliasing,
calling PyBytes_AsString on a unicode string -> error. It was also
leaking references, although that probably didn't matter in context.

The fix here is on the cheap side, just use a C string for the message
without including the extra information about the erroneous type that
led to the exception.

No test, I don't know how to evoke this error.

Closes #2408.

==

numpy/f2py/src/fortranobject.c
==================
1ca2c00;Marc-Alexandre Côté;2014-02-17 13:23:52 -0500;Update c-api.array.rst
Add a note explaining the ``out`` parameter of some functions.
==

doc/source/reference/c-api.array.rst
==================
297f54b;seberg;2014-02-17 10:58:59 +0100;Merge pull request #4303 from charris/fix-gh-588
DOC: Typo, replace PyArrayDescr_Check by PyArray_DescrCheck.
==
==================
64f730d;Bastian Venthur;2014-02-17 10:42:50 +0100;Mention `compress` in `take`'s See Also docstring
closes #3620

==

numpy/core/fromnumeric.py
==================
25ac48f;Charles Harris;2014-02-16 16:57:23 -0700;Merge pull request #4299 from juliantaylor/win-tempfile-fix
Windows tempfile fix
==
==================
2a8eea9;seberg;2014-02-16 23:33:24 +0100;Merge pull request #4304 from charris/fix-gh-3332
DOC: Document that fliplr only works on 2-D arrays.
==
==================
d1dc51b;Charles Harris;2014-02-16 13:29:45 -0700;DOC: Document that fliplr only works on 2-D arrays.
Docstring claimed 2-D was not required, but it is. Fix that.

Closes #3332.

==

numpy/lib/twodim_base.py
==================
ddcb49e;Charles Harris;2014-02-16 15:07:25 -0700;BUG: #4256: f2py, PyString_FromStringAndSize is undefined in Python3.
Use PyUString_FromStringAndSize defined in npy_3kcompat instead. Not
using bytes may cause some problems, but strings seem like a better
choice. As modules generated with current f2py error out, this
particular use is not common and we are free to choose.

Closes #4256.

==

numpy/f2py/cfuncs.py
numpy/f2py/src/fortranobject.h
numpy/f2py/tests/test_callback.py
==================
a500052;Charles Harris;2014-02-16 12:50:03 -0700;DOC: Typo, replace PyArrayDescr_Check by PyArray_DescrCheck.
Found by trac user komnomnomnom.

Closes #588.

==

doc/numpybook/capi.lyx
doc/source/reference/c-api.array.rst
==================
68ae047;seberg;2014-02-16 20:11:37 +0100;Merge pull request #4300 from charris/fix-gh-636
BUG: Fix typo in f2py/cfuncs.py.
==
==================
1c2ac8f;Charles Harris;2014-02-16 11:27:45 -0700;BUG: Make interp return NaN at NaN interpolation points.
A NaN interpolation point was interpreted as out of bounds on the left
side, hence the value of the left parameter in the function call was
returned.

>>> np.interp(np.nan, [-10, 10], [-2, 2])
-2.0

NaN is a better choice.

Closes #605.

==

numpy/lib/src/_compiled_base.c
numpy/lib/tests/test_function_base.py
==================
1f2f6b6;Charles Harris;2014-02-16 10:11:12 -0700;BUG: Fix typo in f2py/cfuncs.py.
Replace "insinged_long_long" by "unsigned_long_long". Patch due to trac
user pepijndevos.

Closes #636.

==

numpy/f2py/cfuncs.py
==================
5669280;Julian Taylor;2014-02-16 12:42:40 +0100;DOC: remove mktemp mention from f2py manpage

==

doc/f2py/f2py.1
doc/source/f2py/usage.rst
==================
f7b0265;Julian Taylor;2014-02-16 12:40:42 +0100;TST: avoid opening files twice which doesn't work on windows

==

numpy/core/tests/test_memmap.py
numpy/core/tests/test_multiarray.py
==================
2868dc4;Charles Harris;2014-02-15 16:38:43 -0700;Merge pull request #4105 from seberg/deprecate-boolean-math
DEP: Deprecate boolean math operations
==
==================
ab04e1a;Sebastian Berg;2014-02-12 11:57:27 +0100;BUG: Force allclose logic to use inexact type
Casting y to an inexact type fixes problems such as
abs(MIN_INT) < 0, and generally makes sense since the allclose
logic is inherently for float types.

==

numpy/core/numeric.py
numpy/core/tests/test_numeric.py
numpy/ma/core.py
numpy/ma/tests/test_core.py
numpy/testing/tests/test_utils.py
numpy/testing/utils.py
==================
e246cc7;Charles Harris;2014-02-15 15:49:31 -0700;Merge pull request #4095 from seberg/descr-shape
BUG: Error checks for the dtype shape.
==
==================
b5553b5;Charles Harris;2014-02-15 15:32:32 -0700;Merge pull request #4298 from charris/fix-gh-3146
BUG: Fix wrong variable in test_build.py exception.
==
==================
76195c7;Charles Harris;2014-02-15 15:31:32 -0700;Merge pull request #4289 from seberg/speed-regression-fix
BUG: Fix performance regression for PyObject_Get/SetItem
==
==================
3248aa7;Charles Harris;2014-02-15 13:25:31 -0700;BUG: Fix wrong variable in test_build.py exception.
The variable used was not defined, causing an error when the exception
was raised.

Closes #3146.

==

numpy/linalg/tests/test_build.py
==================
7bc5480;Sebastian Berg;2014-02-14 21:14:48 +0100;BUG: Raise some out of bound negative index in PySequence_GetItem
PySequence_GetItem and PySequence_SetItem already fix a negative
index, so that we do not need to fix it as well.

Also clean up a little/doc fixes

==

doc/release/1.9.0-notes.rst
numpy/core/src/multiarray/array_assign_array.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/mapping.h
numpy/core/src/multiarray/multiarray_tests.c.src
numpy/core/src/multiarray/sequence.c
numpy/core/tests/test_indexing.py
==================
e3f0f53;Charles Harris;2014-02-15 08:46:47 -0700;Merge pull request #4296 from juliantaylor/fasttake-microopt
minor fasttake performance improvement
==
==================
fd4bf67;Julian Taylor;2014-02-15 14:15:30 +0100;ENH: explicitly mark invalid index branch as unlikely
gcc already detects this as unlikely but it might profit other
compilers.

==

numpy/core/src/multiarray/common.h
==================
86316b9;Julian Taylor;2014-02-15 14:08:56 +0100;ENH: hint that nelem == 1 branch is more likely
improves performance for simple takes by 10%, chunked takes spend more
time copying so the less dense code matters less.

==

numpy/core/src/multiarray/arraytypes.c.src
==================
3333728;Charles Harris;2014-02-14 18:08:00 -0700;Merge pull request #4257 from juliantaylor/tostring-depr
ENH: add tobytes and stop using tostring in documentation
==
==================
9f8771a;Sebastian Berg;2014-02-13 15:25:14 +0100;BUG: Fix performance regression for PyObject_Get/SetItem
Also restructures the calling conventions a little to channel
all calls through the general functions, this will add a little
overhead and could be streamlined if necessary.

==

numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/multiarray_tests.c.src
numpy/core/tests/test_indexing.py
==================
792d1ae;Charles Harris;2014-02-14 11:38:28 -0700;Merge pull request #4294 from juliantaylor/fix-longdouble-int
BUG: fix NULL dereference on longdouble conversion error
==
==================
59057c7;Julian Taylor;2014-02-14 18:45:18 +0100;BUG: fix NULL dereference on longdouble conversion error
Closes gh-627

==

numpy/core/src/multiarray/scalartypes.c.src
numpy/core/tests/test_scalarmath.py
==================
95d7083;Charles Harris;2014-02-13 18:51:24 -0700;Merge pull request #4292 from juliantaylor/ramdisk-chroot
TST: bootstrap chroot in tmpfs
==
==================
db198d5;Julian Taylor;2014-02-14 01:18:53 +0100;Merge pull request #4244 from jaimefrio/binsearch
ENH: Type specific binary search functions for `searchsorted`
==
==================
0e9956e;seberg;2014-02-13 23:27:54 +0100;Merge pull request #4286 from juliantaylor/flex-shuffle
BUG: fix shuffling of flexible dtypes and masked arrays
==
==================
09aef17;Julian Taylor;2014-02-13 20:26:43 +0100;TST: bootstrap chroot in tmpfs
during bootstrap eatmydata is not available in the chroot so it takes a
significant time. Avoid this by placing the whole chroot in a tmpfs
ramdisk.

==

tools/travis-test.sh
==================
31967d2;Julian Taylor;2014-02-13 20:33:43 +0100;Merge pull request #4290 from ceball/dsplit_errmsg
DOC: Fix typo in a dsplit() error message.
==
==================
0981867;Julian Taylor;2014-02-12 20:01:17 +0100;BUG: fix shuffling of flexible dtypes and masked arrays
closes gh-4270 and gh-3263
also regenerate with cython 0.20.1

==

numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
numpy/random/tests/test_random.py
==================
f02ed1a;Chris Ball;2014-02-13 17:18:46 +0000;DOC: Fix typo in a dsplit() error message.

==

numpy/lib/shape_base.py
==================
9350d4d;jaimefrio;2014-02-13 00:23:45 -0800;MANT: Minor style corrections, `get_(arg)binsearch_func` is no longer inline. DOC: Added note on `doc/release/1.9.0-notes.rst`

==

doc/release/1.9.0-notes.rst
numpy/core/src/private/npy_binsearch.h.src
==================
c4c139b;Robert Franke;2014-02-12 15:20:38 +0100;Fix histogramdd treatment of events at rightmost binedge
Fixes Github issue #4266

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
58e9e27;Sebastian Berg;2013-12-05 22:53:26 +0100;DEP: Deprecate boolean `-` operations
Boolean - is not well defined, especially the unary and
binary operator are not compatible. In general boolean
minus seems to have no real application and does not do
what might be expected.

All "allclose" type functions (numpy, tests, masked) have to
now check for boolean to avoid the deprecation warning. In
the future one could think about removing it again and just
allowing the upcast.

==

numpy/core/code_generators/generate_umath.py
numpy/core/numeric.py
numpy/core/src/umath/ufunc_type_resolution.c
numpy/core/src/umath/ufunc_type_resolution.h
numpy/core/tests/test_defchararray.py
numpy/core/tests/test_deprecations.py
numpy/core/tests/test_regression.py
numpy/ma/core.py
numpy/ma/extras.py
numpy/testing/utils.py
==================
f57c77b;Charles Harris;2014-02-12 00:21:51 -0700;Merge pull request #4282 from jaimefrio/bincount-minmax
ENH: single pass over array in `bincount` to determine output size
==
==================
b8a6eb6;jaimefrio;2014-02-11 23:01:30 -0800;MANT: separated initial assignment for `min` and `max`

==

numpy/lib/src/_compiled_base.c
==================
9dcdb57;jaimefrio;2014-02-11 22:41:42 -0800;ENH: single pass over array in `bincount` to determine output size `bincount` checks its input array to make sure there are no negative entries, and to determine the size of the output array. This is done by calling two different functions, each having to loop over the whole array. This PR adds a new function, `minmax`, that computes the minimum and maximum of the array in a single pass over it. This leads to speed-ups peaking at 1.5x, with typical values for large arrays around 1.15x - 1.25x.
A full benchmark summary of the new implementation, including a supposedly
more efficient algorithm that turned out to run slower, can be found [here](https://gist.github.com/jaimefrio/8743836).

==

numpy/lib/src/_compiled_base.c
==================
05c5177;jaimefrio;2014-02-11 18:10:18 -0800;MAINT: Added `NPY_VISIBILITY_HIDDEN` to binary search functions in        `binsearch.c.src` and `npy_binsearch.h.src`.

==

numpy/core/src/npysort/binsearch.c.src
numpy/core/src/private/npy_binsearch.h.src
==================
688b243;Charles Harris;2014-02-11 18:52:43 -0700;Merge pull request #4279 from juliantaylor/symbol-cleanup
MAINT: hide symbols that shouldn't be exported
==
==================
58ffcdc;Charles Harris;2014-02-11 18:16:02 -0700;Merge pull request #4247 from jaimefrio/digitize-monotonic
BUG: check for monotonic bin arrays in digitize
==
==================
c8975ff;jaimefrio;2014-02-11 16:37:56 -0800;MAINT: rewrote `check_array_monotonic` following @charris suggestion to        minimize indexing.

==

numpy/lib/src/_compiled_base.c
==================
6a6d53c;Julian Taylor;2014-02-11 18:59:13 +0100;MAINT: hide symbols that shouldn't be exported

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/nditer_pywrap.c
numpy/core/src/multiarray/shape.c
numpy/core/src/npymath/ieee754.c.src
numpy/core/src/private/npy_partition.h.src
==================
e2addbd;Julian Taylor;2014-02-11 19:38:42 +0100;Merge pull request #4276 from charris/fix-stat-methods
BUG: Fix mean, var, std methods for object arrays.
==
==================
2facd5c;Julian Taylor;2014-02-03 20:01:07 +0100;ENH: add tobytes and stop using tostring in documentation
tostring returns bytes which are not equal to string, so provide a
tobytes function alias.
tostring does not emit a deprecation warning yet so rdepends do not need
to check two names to support older versions of numpy without warnings.

==

doc/numpybook/capi.lyx
doc/numpybook/numpybook.lyx
doc/release/1.9.0-notes.rst
doc/source/reference/arrays.ndarray.rst
doc/source/reference/c-api.array.rst
doc/source/reference/maskedarray.baseclass.rst
doc/source/reference/routines.ma.rst
numpy/add_newdocs.py
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/tests/test_defchararray.py
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_regression.py
numpy/doc/byteswapping.py
numpy/f2py/tests/test_array_from_pyobj.py
numpy/lib/format.py
numpy/ma/core.py
numpy/ma/mrecords.py
numpy/matrixlib/tests/test_defmatrix.py
==================
4d686a1;Charles Harris;2014-02-10 11:04:37 -0700;MAINT: Remove checks for presence of decimal module.
The decimal module has been available since Python 2.4 and we no
longer support Python earlier than 2.6.

==

numpy/core/tests/test_multiarray.py
==================
4ebf25e;Charles Harris;2014-02-08 19:04:12 -0700;BUG: Fix mean, var, std methods for object arrays.
This takes care to preserve the object type for scalar returns and
fixes the error that resulted when the scalar did not have a dtype
attribute.

Closes #4063.

==

numpy/core/_methods.py
numpy/core/tests/test_multiarray.py
==================
f65593d;jaimefrio;2014-02-09 22:06:13 -0800;STY: adapted code to `C_STYLE_GUIDE.rst.txt`. MAINT: rewrote `check_array_monotonic` to use array indices, not pointers. TST: tests for proper handling of bins with all items almost equal now check      the return value for correctness, not just that an error is not raised.

==

numpy/lib/src/_compiled_base.c
numpy/lib/tests/test_function_base.py
==================
e672f8a;jaimefrio;2014-02-09 20:26:11 -0800;STY: adapted code to `C_STYLE_GUIDE.rst.txt`

==

numpy/core/src/multiarray/item_selection.c
numpy/core/src/npysort/binsearch.c.src
numpy/core/src/private/npy_binsearch.h.src
==================
bd5894b;Charles Harris;2014-02-09 19:50:42 -0700;Merge pull request #4274 from arunpersaud/ap/rfft-doc-fix-typo
DOC: fixed small type in rfft notes
==
==================
de6729d;Charles Harris;2014-02-09 09:43:42 -0700;Merge pull request #3798 from seberg/new-index-machinery
ENH: Reimplementing the indexing machinery
==
==================
09d0520;Julian Taylor;2014-02-09 13:17:07 +0100;Merge pull request #4273 from juliantaylor/test-file-leak
TST: clean up tempfile in test_closing_zipfile_after_load
==
==================
6a7da26;Julian Taylor;2014-02-09 12:53:48 +0100;Merge pull request #4267 from juliantaylor/fuzz-test
BUG: add more malloc failure checks
==
==================
df66018;Julian Taylor;2014-02-09 12:45:04 +0100;Merge pull request #4271 from juliantaylor/big-file-test-fix
TST: fix test_io.TestSavezLoad
==
==================
b93b493;Julian Taylor;2014-02-08 00:16:16 +0100;BUG: fix use of capi without gil in ufunc.at
without a pointer to store the error NpyIter_ResetBasePointers uses
python errors to signal problems which requires the GIL.

==

numpy/core/src/umath/ufunc_object.c
==================
cedc9c4;Julian Taylor;2014-02-07 20:21:31 +0100;BUG: fix missing memory allocation failure checks

==

numpy/core/src/multiarray/array_assign_scalar.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/datetime_strings.c
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/nditer_pywrap.c
numpy/core/src/multiarray/scalarapi.c
==================
8225401;Arun Persaud;2014-02-08 13:44:01 -0800;DOC: fixed small whitespace error in rfft notes

==

numpy/fft/fftpack.py
==================
d5b4a81;jaimefrio;2014-02-08 23:18:53 -0800;- removed unused `store_arr` variable from `PyArray_SearchSorted`.

==

numpy/core/src/multiarray/item_selection.c
==================
0970b67;jaimefrio;2014-02-08 08:04:58 -0800;- initialize `last_key_val` to first value in `key` to avoid compiler warnings.

==

numpy/core/src/npysort/binsearch.c.src
==================
8296aa0;Julian Taylor;2014-02-08 13:40:26 +0100;TST: clean up tempfile in test_closing_zipfile_after_load

==

numpy/lib/tests/test_io.py
==================
524b9ea;Julian Taylor;2014-02-08 11:55:36 +0100;TST: fix test_io.TestSavezLoad

==

numpy/lib/tests/test_io.py
==================
e410371;jaimefrio;2014-02-07 12:51:01 -0800;- Refactored code, to have type specific and generic binary search functions   share signature. `get_(arg)binsearch_func` now handles finding the right   function for all cases, making it transparent to `PyArray_SearchSorted`. - Reordered types in `(arg)binsearch_map` to be sorted by type num. Since   the function is searched using binary search, this is a requirement. Only   `npy_half` was out of place. Added comment to remind future expansions. - Corrected reference counting for `dtype` in `PyArray_SearchSorted`. - The requirement for a coniguous `sorter` array had been dropped, but the   stride for it was set to the element size. This created an opportunity for   a very unlikely bug, that is now corrected. Added test to verify it. - Removed unused includes from `binsearch.c.src` and `npy_binsearch.h.src`.

==

numpy/core/src/multiarray/item_selection.c
numpy/core/src/npysort/binsearch.c.src
numpy/core/src/private/npy_binsearch.h.src
numpy/core/tests/test_multiarray.py
==================
6c866c5;Julian Taylor;2014-02-07 19:13:30 +0100;BUG: fix two missing array creation failure checks

==

numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/nditer_pywrap.c
==================
d554c29;Sebastian Berg;2014-02-07 14:58:30 +0100;BUG: Fix common.h convert_shape_to_string.

==

numpy/core/src/multiarray/common.h
==================
636e70b;jaimefrio;2014-02-07 05:32:03 -0800;- Modified generic searches to take a PyArrayObject and use its PyArray_DESCR   to fetch a compare function, rather than the global state function that   the sort functions take. - Added get_genericbinsearch_func and get_genericargbinsearch_func to   npy_binsearch.h.src, to get a function pointer to the right generic type   search function. This makes the code in item_selection.c easier to follow,   I think. - Littered PyArray_SearchSorted with comments with my ref counts for dtype,   hopefully I got it right this time.

==

numpy/core/setup.py
numpy/core/src/multiarray/item_selection.c
numpy/core/src/npysort/binsearch.c.src
numpy/core/src/private/npy_binsearch.h.src
==================
f2d06ce;Julian Taylor;2014-02-06 19:32:32 +0100;Merge pull request #4261 from ahmadia/allow_vendor_compiler_versions
BUG: Detect vendor versions of GNU Compilers
==
==================
aba22aa;Sebastian Berg;2014-01-25 20:26:21 +0100;BUG: Fix statement before declaration in mapping.c (again...)
Undid it by accident.

==

numpy/core/src/multiarray/mapping.c
==================
35a5639;Sebastian Berg;2014-02-06 17:29:15 +0100;DOC: Add some examples to the indexing change release notes

==

doc/release/1.9.0-notes.rst
==================
b292046;Sebastian Berg;2014-02-06 17:18:02 +0100;MAINT: Comments from charris and some extra documentation

==

numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/lowlevel_strided_loops.c.src
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/nditer_constr.c
==================
98b1892;Sebastian Berg;2014-01-25 20:26:21 +0100;BUG: Fix statement before declaration in mapping.c

==

numpy/core/src/multiarray/mapping.c
==================
c3eb6c5;Sebastian Berg;2014-01-25 16:03:42 +0100;BUG: Skip must check SIZE and NDIM...
Found by pandas tests...

==

numpy/core/src/multiarray/lowlevel_strided_loops.c.src
numpy/core/tests/test_indexing.py
==================
9635b48;Sebastian Berg;2013-12-24 16:34:24 +0100;BUG: Move 0-d array-is-scalar special case into array branch
This should also fix array-likes

==

doc/release/1.9.0-notes.rst
numpy/core/src/multiarray/mapping.c
numpy/core/tests/test_indexing.py
==================
97e9053;Sebastian Berg;2013-12-18 13:34:55 +0100;DOC: Minor release notes changes

==

doc/release/1.9.0-notes.rst
==================
d1cf905;Sebastian Berg;2013-12-17 16:10:42 +0100;MAINT: Remove old undefs in mapping.c

==

numpy/core/src/multiarray/mapping.c
==================
628e0ef;Sebastian Berg;2013-12-17 15:45:42 +0100;DOC|MINOR: minor fixes to release notes indexing part.

==

doc/release/1.9.0-notes.rst
==================
e0b28df;Sebastian Berg;2013-12-16 17:42:17 +0100;MAINT: move npy_index_info into mapping.h

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/mapping.h
==================
4e92b2b;Sebastian Berg;2013-12-16 16:50:35 +0100;TST: Fix buggy ref-count test

==

numpy/core/tests/test_indexing.py
==================
b993968;Sebastian Berg;2013-12-16 16:08:12 +0100;DOC: Add indexing info to release notes

==

doc/release/1.9.0-notes.rst
==================
4836b65;Sebastian Berg;2013-12-16 12:21:18 +0100;TST: Simple indexing subspace broadcasting test.

==

numpy/core/tests/test_indexing.py
==================
4cc6066;Sebastian Berg;2013-12-14 20:16:24 +0100;STY|DOC: Small fixes

==

numpy/core/src/multiarray/mapping.c
numpy/core/tests/test_indexing.py
==================
44c1f7a;Sebastian Berg;2013-12-13 14:15:23 +0100;BUG: Memory order of indexing result should be flexible
Memory order of non-trivial indexing results should adept to
the input.

==

numpy/core/src/multiarray/mapping.c
numpy/core/tests/test_indexing.py
==================
b1f8e29;Sebastian Berg;2013-11-24 22:35:11 +0100;STY: mapping.c minor style fixes

==

numpy/core/src/multiarray/mapping.c
==================
1e647c5;Sebastian Berg;2013-11-23 23:37:31 +0100;STY/DOC: minor fixes

==

numpy/core/src/multiarray/mapping.c
==================
90421c6;Sebastian Berg;2013-11-08 16:05:39 +0100;DOC: Some doc fixes

==

numpy/core/src/multiarray/mapping.c
==================
753bcc4;Sebastian Berg;2013-10-28 16:31:04 +0100;BUG: Test and fix array converson before transpose
When SwapAxes is called a base class array is needed or the
subclass might mess with the shape. Fixes the previously
not-working test and code

==

numpy/core/src/multiarray/mapping.c
numpy/core/tests/test_indexing.py
==================
8544000;Sebastian Berg;2013-10-28 14:44:42 +0100;TST: Add deprecation tests

==

numpy/core/src/multiarray/mapping.c
numpy/core/tests/test_deprecations.py
==================
628f60d;Sebastian Berg;2013-10-27 22:24:17 +0100;TST: Just one more small test

==

numpy/core/tests/test_indexing.py
==================
52b4a94;Sebastian Berg;2013-10-27 22:05:46 +0100;ENH,TST: Add many tests and have boolean finalize at end.
__array_finalize__ is now called in boolean indexing on the
result array, so that all numerical values are available.

==

numpy/core/src/multiarray/mapping.c
numpy/core/tests/test_indexing.py
==================
169926f;Sebastian Berg;2013-10-26 02:26:13 +0200;BUGS: Fix subspace casting and make fancy broadcasting consistent
Normal CopyInto allows removal of 1s from the start, but
broadcasting never did (and did not here before). This allows that
case, though by creating a view.

==

numpy/core/src/multiarray/lowlevel_strided_loops.c.src
numpy/core/src/multiarray/mapping.c
numpy/core/tests/test_indexing.py
==================
fe859f1;Sebastian Berg;2013-10-25 22:58:49 +0200;TST: Add some broadcasting assignment tests

==

numpy/core/tests/test_indexing.py
==================
009b17a;Sebastian Berg;2013-10-25 18:58:08 +0200;BUG: Fix native byteorder check for trivial loops

==

numpy/core/src/multiarray/mapping.c
numpy/core/src/private/lowlevel_strided_loops.h
numpy/core/tests/test_indexing.py
==================
b85dcf8;Sebastian Berg;2013-10-25 12:17:43 +0200;MAINT: Small cleanups

==

numpy/core/src/multiarray/lowlevel_strided_loops.c.src
==================
059f7d4;Sebastian Berg;2013-10-25 03:46:32 +0200;ENH: Only check getitem index in inner loop if a single index
Otherwise they might be broadcasted which makes index checking
in the inner loop unnecessary expensive. The overhead itself
should not be too high in that case.

Also some cleanup

==

numpy/core/src/multiarray/lowlevel_strided_loops.c.src
numpy/core/src/multiarray/mapping.c
==================
fa35a25;Sebastian Berg;2013-10-25 03:40:49 +0200;ENH: Add trivial loop special cases for fancy indexing
This optimizes simple contiguous loops for a single fancy
index into a 1-d array and also for general index checking

==

numpy/core/src/multiarray/lowlevel_strided_loops.c.src
numpy/core/src/multiarray/mapping.c
numpy/core/src/private/lowlevel_strided_loops.h
==================
020ec96;Sebastian Berg;2013-10-23 15:02:17 +0200;BUG: Fix reference count issues

==

numpy/core/src/multiarray/mapping.c
==================
96dbf1b;Sebastian Berg;2013-10-22 20:08:54 +0200;ENH: Use template for inner loops and use stransfer

==

numpy/core/src/multiarray/lowlevel_strided_loops.c.src
numpy/core/src/multiarray/mapping.c
numpy/core/src/private/lowlevel_strided_loops.h
==================
13b44ee;Sebastian Berg;2013-10-21 15:04:24 +0200;BUG: Check if extra operand has too many dimensions
This was *not* done for the 1-d special case previously.

==

numpy/core/src/multiarray/mapping.c
==================
308bf7a;Sebastian Berg;2013-10-21 14:25:34 +0200;ENH: Create meaningful broadcasting errors
Also checks dimensions a bit stricter (not relavent currently),
silence error (back to old behaviour...)

When advanced indexes cannot be broadcast, an index error is
now raised. When the assignment values cannot be broadcast
a ValueError is raised.

Note shape printing in nditer is no changed so that it is (2,)
and not (2).

==

numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/nditer_constr.c
numpy/core/tests/test_nditer.py
numpy/core/tests/test_regression.py
==================
2d82c05;Sebastian Berg;2013-10-20 21:20:30 +0200;GRR: Fully consider scalar arrays as array indices
This will break matrix[:,np.array(1)] = vals (transposed lhs
during assignment)

==

numpy/core/src/multiarray/mapping.c
==================
80d3bdd;Sebastian Berg;2013-10-20 20:33:52 +0200;GRRRRR: Scipy ndimage.measurement uses 1-D iteration order...
... for assignments

==

numpy/core/src/multiarray/mapping.c
==================
3ec6314;Sebastian Berg;2013-10-20 17:11:12 +0200;BUG: Abort iteration when dtype buffering errored
This means that if the buffer is smaller then the array,
a transfer may be done up until the first bad element is
reached. This is in line with all other transfers.

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/mapping.c
==================
269b6da;Sebastian Berg;2013-10-20 03:03:54 +0200;readd mapping.c change lost in rebase

==

numpy/core/src/multiarray/mapping.c
==================
8533c52;Sebastian Berg;2013-10-20 01:25:47 +0200;Fix bugs with old mapiter compatibility

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/mapping.h
==================
f4772b1;Sebastian Berg;2013-10-19 18:41:16 +0200;Further fixups

==

numpy/core/src/multiarray/mapping.c
==================
ef22bd4;Sebastian Berg;2013-10-19 12:38:35 +0200;Working mostly now, need to plug back in the exposed API

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/mapping.h
==================
5b3d406;Sebastian Berg;2013-10-17 23:19:08 +0200;Working on a thourough rework of mapiter

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/mapping.c
==================
1bad2c3;Sebastian Berg;2013-10-14 23:30:53 +0200;Start trying to include operand into iterator

==

numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/mapping.h
==================
9f55b02;Sebastian Berg;2013-10-14 16:10:05 +0200;Followup stuff

==

numpy/core/src/multiarray/mapping.c
==================
28dab27;Sebastian Berg;2013-10-13 22:26:25 +0200;Attempt to start optimizing setmap

==

numpy/core/src/multiarray/mapping.c
==================
4b3f607;Sebastian Berg;2013-09-28 15:44:46 +0200;WIP,BUG: Fix outer iteration bug.

==

numpy/core/src/multiarray/mapping.c
==================
a7f39ff;Sebastian Berg;2013-09-27 13:02:19 +0200;WIP,ENH: Already allow boolean scalars for 0-d arrays
Since indexing into a 0-d array with an integer is impossible,
we can disable any conversion/interpretation is integer code
to special case the 0-d array for now and fix this annoying
issue...

==

numpy/core/src/multiarray/mapping.c
==================
4780be1;Sebastian Berg;2013-09-26 18:32:53 +0200;WIP: Restore binary compatibility of MapIterObject (hopefully)

==

numpy/core/include/numpy/ndarraytypes.h
==================
acafbff;Sebastian Berg;2013-09-26 15:45:13 +0200;WIP: Move Ellipsis setting check and clear warnings

==

numpy/core/src/multiarray/mapping.c
==================
23c3b30;Sebastian Berg;2013-09-26 14:00:34 +0200;WIP,TST,DOC: tiny fix
maybe triggers Travis too...

==

numpy/core/tests/test_indexing.py
==================
631710b;Sebastian Berg;2013-09-26 01:43:21 +0200;WIP: fix field order; And MapIterNext iteration end

==

numpy/core/src/multiarray/mapping.c
==================
0851157;Sebastian Berg;2013-09-26 01:40:55 +0200;WIP,TST: Fixup python3 tests

==

numpy/core/tests/test_multiarray.py
==================
1b35cb9;Sebastian Berg;2013-09-26 01:31:20 +0200;WIP: bug fixes and field oder access change

==

numpy/core/src/multiarray/mapping.c
==================
a32709f;Sebastian Berg;2013-09-26 00:48:29 +0200;WIP,TST: Small fixes for the tests

==

numpy/core/tests/test_deprecations.py
==================
efdc9b0;Sebastian Berg;2013-09-25 14:27:57 +0200;WIP: use fast_take and fix Deprecations

==

numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/mapping.h
==================
fe61578;Sebastian Berg;2013-09-25 06:06:21 +0200;WIP,TST: Fix tests to match new behaviour

==

numpy/core/tests/test_indexing.py
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_numerictypes.py
numpy/core/tests/test_regression.py
==================
3e35c31;Sebastian Berg;2013-09-25 06:05:39 +0200;WIP: Speed improvements by using EXTERNAL_LOOP

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/mapping.c
==================
607863d;Sebastian Berg;2013-04-14 23:20:25 +0200;ENH: Attempt to rewrite the index parsing.
Some optimizations still missing.

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/mapping.h
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/tests/test_indexing.py
numpy/lib/tests/test_function_base.py
==================
c7a30d5;Charles Harris;2014-02-05 17:51:59 -0700;Merge pull request #4262 from juliantaylor/mktemp-remove
remove insecure mktemp usage
==
==================
0bb46c1;Julian Taylor;2014-02-05 23:01:47 +0100;ENH: remove insecure mktemp use
mktemp only returns a filename, a malicous user could replace it before
it gets used.

==

numpy/core/tests/test_memmap.py
numpy/core/tests/test_multiarray.py
numpy/f2py/__init__.py
numpy/f2py/f2py2e.py
numpy/lib/tests/test_io.py
==================
ed569bf;Aron Ahmadia;2014-02-04 16:04:48 -0500;Detect vendor versions of GNU Compilers
Cray and other HPC vendors provide patched versions of the GNU compilers
with modified version strings.  Use re.search instead of re.match in the
version detection scripts to account for modified version strings.

Ref: https://github.com/numpy/numpy/issues/4259

==

numpy/distutils/fcompiler/gnu.py
==================
b785070;Charles Harris;2014-02-02 08:51:25 -0800;Merge pull request #4248 from juliantaylor/scalar-memleak
BUG: fix scalar type memory leak
==
==================
ba05979;jaimefrio;2014-02-01 21:57:42 -0800;- Modified resetting of binary search indices when multiple keys are being   searched, following @juliantaylor's suggestion. This speeds up searches of   ordered keys by a lot (up to 3x), but slightly slows down purely random   keys. Some benchmarks are available [here](https://gist.github.com/jaimefrio/8704101#file-gistfile2-txt) - Added tests for proper handling of the smart index resetting when the last   key was larger than all items in the searched array. - Added basic tests for all implemented dtypes. - This last change unearthed a funny behavior of `PyArray_CheckFromAny`,   which was changing the byteorder attribute of `NPY_UBYTE` from `NPY_IGNORE`   to `NPY_NATIVE`, and triggering lots of failures in `np.core.test()`. So I   modified `PyArray_CheckFromAny` to leave `NPY_IGNORE` byteorders alone. - Removed the now unused binary search functions from `item_selection.c`.

==

numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/npysort/binsearch.c.src
numpy/core/tests/test_multiarray.py
==================
0b92be6;Philip Eliot;2014-02-01 07:48:46 -0500;BUG: IRR was returning nan instead of valid negative answer.
This change corrects the following two bugs in numpy.irr:

* When the solution was negative, numpy.irr returned nan instead of the
  correct solution because of the mask applied to the roots. Corrected
  by removing the mask that 0 < res < 1.
* When multiple roots were found, numpy.irr was returning an array of
  all roots rather than a single float. This bug was corrected by
  selecting the single root closest to zero (min(abs(root)).

With these corrections, numpy.irr returns the same result as the
corresponding spreadsheet function in LibreOffice Calc for all test
cases (additional test cases were added to cover cases with multiple
positive and negative roots)

==

numpy/lib/financial.py
numpy/lib/tests/test_financial.py
==================
e9ebefe;Julian Taylor;2014-01-31 21:25:49 +0100;BUG: fix scalar type memory leak
have an explicit tp_free that is different from PyObject_Free which is also the
tp_free of PyBaseObject so python does not COPYSLOT it, instead it takes the
next parent PyInt which has a different allocator.
Also added it for arrays just in case, currently not required as they don't
don't inherit from a python type.

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/tests/test_scalarmath.py
==================
8392255;jaimefrio;2014-01-30 16:49:55 -0800;BUG: check for monotonic bin arrays in digitize
The check for monotonic bin arrays of digitize doesn't properly handle
inputs with repeated entries at the beginning of the array:

```
>>> np.__version__
'1.8.0'
>>> np.digitize([1], [0, 0 , 2])
array([2], dtype=int64)
>>> np.digitize([1], [2, 2, 0])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: The bins must be monotonically increasing or decreasing
```

Modified `check_array_monotonic` in `_compiled_base.c` to skip over repeating
entries before deciding to check for increasing or decreasing monotonicity
and added relevant tests to `test_function_base.py`.

==

numpy/lib/src/_compiled_base.c
numpy/lib/tests/test_function_base.py
==================
7044588;jaimefrio;2014-01-29 23:26:19 -0800;ENH: Type specific binary search functions for `searchsorted`
This PR replaces the generic binary search functions used by `searchsorted`
with type specific ones for numeric types. This results in a speed-up of
calls to `searchsorted` which is highly dependent on the size of the
'haystack' and the 'needle', with typical values for large enough needles
in the 1.5x - 3.0x for direct searches (i.e. without a `sorter` argument)
and 1.2x - 2.0x for indirect searches. A summary benchmark on float and
int arrays can be found [here](https://gist.github.com/jaimefrio/8704101).

Furthermore, the type specific binary search functions can take strided
inputs for all their arguments, which is a step in the right direction to
eventually add an `axis` argument to `searchsorted`.

==

numpy/core/bento.info
numpy/core/setup.py
numpy/core/src/multiarray/item_selection.c
numpy/core/src/npysort/binsearch.c.src
numpy/core/src/private/npy_binsearch.h.src
==================
ad5bded;Charles Harris;2014-01-29 18:33:21 -0800;Merge pull request #4243 from juliantaylor/sdist-check
BLD: check submodules on sdist
==
==================
4cd7274;Julian Taylor;2014-01-29 22:59:19 +0100;BLD: check submodules on sdist
prevents broken source distributions due to not up to date submodules.

==

setup.py
==================
0a2be83;seberg;2014-01-29 04:36:19 -0800;Merge pull request #4239 from astaric/documentation_fix
DOC: Fix description of ma.average parameter.
==
==================
b58a854;astaric;2014-01-29 10:44:14 +0100;DOC: Fix description of ma.average parameter.
Replace mention of variance in numpy.ma.average doc string with average.

==

numpy/ma/extras.py
==================
c159cb0;seberg;2014-01-28 13:52:21 -0800;Merge pull request #4238 from pv/reduceat-doc
DOC: fix error in reduceat documentation
==
==================
a258e3c;Pauli Virtanen;2014-01-28 21:48:34 +0200;DOC: fix error in reduceat documentation
reduceat does not allow out-of-bounds indices currently

==

numpy/add_newdocs.py
==================
05b2364;seberg;2014-01-27 09:34:16 -0800;Merge pull request #4234 from jennystone/Branch1
BUG: removed inconsistencies of count (Issues #3368 and #4228)
==
==================
3d8da08;Janani;2014-01-26 16:18:34 +0530;BUG: Removed the inconsistencies of the function ma.count The inconsistency of ma.count when appled on masked_array with mask as 'nomask' has been removed. the return type of the function has also been standardized according to the docs.Corresponding changes in testing to check the functioning of ma.count Closes gh-3368 and gh-4228

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
0f7dffa;Charles Harris;2014-01-26 20:17:31 -0800;Merge pull request #4237 from juliantaylor/sdist-updates
Sdist updates
==
==================
0f6641b;Julian Taylor;2014-01-26 19:31:41 +0100;BLD: exclude compiled python files in source distribution
they could accidentally appear in the source distribution if sdist was
run after a make -C doc.

==

MANIFEST.in
==================
e573709;Julian Taylor;2014-01-26 19:29:07 +0100;BLD: include f2py docs in source distribution
update was forgotten in the move to the doc/folder

==

MANIFEST.in
==================
2fc0c65;Julian Taylor;2014-01-25 12:15:32 -0800;Merge pull request #4233 from pv/copybutton
MAINT: update scipy-sphinx-theme
==
==================
3cd2137;Pauli Virtanen;2014-01-25 22:10:09 +0200;MAINT: update scipy-sphinx-theme
Adds copybutton that toggles ">>>" in code samples.

==

doc/scipy-sphinx-theme
==================
4cdf911;Charles Harris;2014-01-25 05:30:54 -0800;Merge pull request #4232 from juliantaylor/check-win-compile
TST: fail on declaration-after-statement in travis test
==
==================
2f2f64c;Julian Taylor;2014-01-25 12:36:03 +0100;TST: test count_nonzero on unaligned memory

==

numpy/core/tests/test_multiarray.py
==================
8358f04;seberg;2014-01-25 03:34:38 -0800;Merge pull request #4215 from juliantaylor/where-obj-fix
BUG: fix reference count, thread safety and dtypes of np.where
==
==================
d79ce1a;Julian Taylor;2014-01-25 12:18:21 +0100;TST: test non integer item does not return array
from gh-4223 in the 1.8 branch

==

numpy/core/tests/test_indexing.py
==================
89e59e0;Julian Taylor;2014-01-24 22:53:52 +0100;TST: fail on declaration-after-statement in travis test
required for windows compilers

==

tools/travis-test.sh
==================
b8407f3;cgohlke;2014-01-24 12:19:27 -0800;BLD: Fix ANSI C syntax error
Fixes msvc9/10 error C2143: syntax error : missing ';' before 'type'

==

numpy/core/src/multiarray/multiarraymodule.c
==================
79cd735;Julian Taylor;2014-01-23 01:22:00 +0100;DOC: document special float scalar casting change in release notes

==

doc/release/1.9.0-notes.rst
==================
cc81da6;Julian Taylor;2014-01-19 20:41:42 +0100;BUG: min_scalar_type_num: special float values can be represented in half
E.g. pandas sometime uses float('NaN') which would otherwise convert to
float64 where not required. The new np.where which uses
PyArray_ResultType is a case where the conversion is unnecessary.

==

numpy/core/src/multiarray/convert_datatype.c
numpy/core/tests/test_multiarray.py
==================
631655e;seberg;2014-01-22 14:58:48 -0800;Merge pull request #4213 from juliantaylor/choice-improv
improve random.choice performance and regen with cython 0.20
==
==================
bc54f96;seberg;2014-01-22 14:57:42 -0800;Merge pull request #4220 from juliantaylor/ufunc-at-ver
DOC: add versionadded:: 1.8.0 to ufunc.at docstring
==
==================
5e5cf62;seberg;2014-01-22 14:56:34 -0800;Merge pull request #4221 from rgommers/fix-f2py-warning
MAINT: fix some f2py related build warnings.
==
==================
35f996a;Ralf Gommers;2014-01-22 20:25:42 +0100;MAINT: fix some f2py related build warnings.

==

numpy/f2py/src/fortranobject.c
==================
6c9fee6;Julian Taylor;2014-01-22 20:11:53 +0100;DOC: add versionadded:: 1.8.0 to ufunc.at docstring

==

numpy/add_newdocs.py
==================
e95b6ac;Julian Taylor;2014-01-19 18:40:04 +0100;BUG: properly handle references of objects in new np.where
Objects must go over the objects copyswap function and GIL must be taken
before dereferences for correct reference counting.

==

numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_multiarray.py
==================
783b96d;Julian Taylor;2014-01-19 05:32:51 -0800;Merge pull request #4212 from rgommers/buildwarnings
Fix some build warnings
==
==================
b0427e2;Julian Taylor;2014-01-19 12:33:07 +0100;MAINT: regenerate with cython 0.20 and fix a warning it emits
Fixed warning is "Non-trivial type declarators in shared declaration".

==

numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
==================
9ff1415;Julian Taylor;2014-01-18 18:16:27 +0100;ENH: reduce overhead of probs check of choice
Use kahan_sum as multinomial does.
Closes gh-4188

==

numpy/random/mtrand/mtrand.pyx
==================
fd9f876;Ralf Gommers;2014-01-18 22:27:39 +0100;MAINT: silence some build warnings due to missing NO_IMPORT_ARRAY

==

numpy/core/src/dummymodule.c
numpy/core/src/umath/loops.c.src
numpy/random/mtrand/initarray.h
==================
57caa73;Ralf Gommers;2014-01-18 20:32:31 +0100;MAINT: fix build warnings in test_rational.c.src

==

numpy/core/src/umath/test_rational.c.src
==================
40be024;Ralf Gommers;2014-01-18 19:43:23 +0100;MAINT: fix build warnings for umath_linalg
The removal of CFLOAT for eig/eigvals is related to a bug, see c355550dd80.
Can be put back once that issue is fixed.

==

numpy/linalg/umath_linalg.c.src
==================
42c40bc;Ralf Gommers;2014-01-18 19:14:33 +0100;MAINT: remove unused variables from einsum.c.src and loops.c.src
Fixes some build warnings.

==

numpy/core/src/multiarray/einsum.c.src
numpy/core/src/umath/loops.c.src
==================
b449dfd;Ralf Gommers;2014-01-18 18:51:43 +0100;MAINT: remove unused simple_capsule_dtor() from npy_3kcompat.h
This removes a lot of build warnings when including this file.

==

doc/release/1.9.0-notes.rst
numpy/core/include/numpy/npy_3kcompat.h
==================
bbb4918;Charles Harris;2014-01-18 08:38:50 -0800;Merge pull request #4211 from rgommers/fix-knownfail
BUG: testing.run_module_suite() didn't pass on KnownFailure plugin.
==
==================
9dabdb8;Ralf Gommers;2014-01-18 17:08:20 +0100;BUG: testing.run_module_suite() didn't pass on KnownFailure.
This results in errors whenever you run tests using KnownFailure
like so: ``python test_mymodule.py`` (where run_module_suite is
used in the file, like numpy and scipy do).

==

numpy/testing/nosetester.py
==================
3dfc6d6;Charles Harris;2014-01-17 12:41:35 -0800;Merge pull request #4207 from juliantaylor/where-api
BUG: set the needs_api variable in np.where
==
==================
33b6326;Julian Taylor;2014-01-17 18:43:18 +0100;BUG: set the needs_api variable in np.where

==

numpy/core/src/multiarray/multiarraymodule.c
==================
bd8d70a;Julian Taylor;2014-01-16 13:11:26 -0800;Merge pull request #4206 from juliantaylor/single-thread-fix
BUG: fix build with single-threaded python
==
==================
13fbb67;Ulrich Seidl;2014-01-14 15:18:49 +0100;BUG: fix build with single-threaded python
Some symbols are not defined leading to:
ImportError Undefined symbol: PyGILState_Release

Closes gh-3255

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/nditer_api.c
numpy/linalg/lapack_lite/python_xerbla.c
==================
7f46687;Charles Harris;2014-01-15 16:54:38 -0800;Merge pull request #4205 from juliantaylor/travis-dbg
TST: add travis test using python-dbg
==
==================
27c119a;Charles Harris;2014-01-15 16:15:46 -0800;Merge pull request #4197 from juliantaylor/memview-leak
BUG: fix minor memory leak in memoryview failure case
==
==================
8ef97a9;Julian Taylor;2014-01-16 00:32:19 +0100;TST: add travis test using python-dbg
python-dbg adds couple extra asserts on reference counts, memory
allocation and also enables a few numpy internal asserts.

==

.travis.yml
tools/travis-test.sh
==================
2f8d33b;Julian Taylor;2014-01-14 00:27:59 +0100;BUG: fix minor memory leak in memoryview failure case

==

numpy/core/src/multiarray/buffer.c
==================
796ac14;Charles Harris;2014-01-15 11:40:43 -0800;Merge pull request #4204 from pbugnion/feat_run_module_suite_argv
ENH: Added argv argument and docstring to run_module_suite.
==
==================
c25e8b7;Pascal Bugnion;2014-01-15 19:09:23 +0000;STY: Style adjustments to run_module_suite.
Cosmetic adjustments to previous commit (893fe99) following "charris"'s
comments.

==

numpy/testing/nosetester.py
==================
23d40e8;Charles Harris;2014-01-15 08:19:09 -0800;Merge pull request #4193 from pv/prune-lapack-lite
MAINT: linalg: prune unused routines from lapack_lite
==
==================
893fe99;Pascal Bugnion;2014-01-15 10:59:27 +0000;DOC: Added docstring for run_module_suite.

==

numpy/testing/nosetester.py
==================
e7f4ad0;Pascal Bugnion;2014-01-15 10:57:53 +0000;ENH: Added argv argument to run_module_suite.
Adding an 'argv' optional argument to the
"numpy.testing.run_module_suite" function lets the client pass arguments
to the nose testrunner.

For example, this lets the user add things like:

run_module_suite(sys.argv)

at the end of a test module, so that arguments specified on the command
line will get passed to the nose runner. The user could then run:

$ python test_module.py --nocapture

==

numpy/testing/nosetester.py
==================
19796ca;Charles Harris;2014-01-14 20:00:35 -0800;Merge pull request #4182 from juliantaylor/where-improve
ENH: optimize np.where via nditer with external loop
==
==================
53fa3bb;Charles Harris;2014-01-14 19:26:53 -0800;Merge pull request #4187 from juliantaylor/large-file-fix
BUG: Fix large file support on 32 bit
==
==================
74c1c48;Charles Harris;2014-01-14 19:04:36 -0800;Merge pull request #4200 from juliantaylor/thread-thresh
ENH: avoid more thread save/restores for small iteration counts
==
==================
ea027f3;Julian Taylor;2014-01-15 00:19:33 +0100;ENH: release GIL during where iteration

==

numpy/core/src/multiarray/multiarraymodule.c
==================
bba4ed5;Julian Taylor;2014-01-14 21:52:34 +0100;TST: document reason for truncate instead of seek past end

==

numpy/lib/tests/test_format.py
==================
a4d1e26;Julian Taylor;2014-01-14 21:50:40 +0100;MAINT: add a configure check for ftello and fseeko
Works on Ubuntu/Debian, might require lfs macros on some platforms to
succeed, but its also defined by Python.h so it should mostly work.

==

numpy/core/include/numpy/npy_common.h
numpy/core/setup_common.py
==================
0f43553;Julian Taylor;2014-01-14 11:48:17 -0800;Merge pull request #4196 from pv/fix-tofile-test-osx
TST: core: fix tofile file positioning test
==
==================
a724c93;Julian Taylor;2014-01-14 11:35:11 -0800;Merge pull request #4194 from larsmans/openblas-docs
DOC: site.cfg: warn against OpenBLAS and multiprocessing
==
==================
7488ebe;Lars Buitinck;2014-01-12 17:34:10 +0100;DOC: site.cfg: warn against OpenBLAS and multiprocessing
Fixes #654 by not fixing it; I don't think NumPy *can* actually fix
the problem as it's a design flaw in Python's multiprocessing. Listed
various alternatives (Python 3.4 forkserver, single-threaded OpenBLAS,
Python threading).

==

site.cfg.example
==================
48558df;Julian Taylor;2014-01-14 19:25:41 +0100;ENH: avoid more thread save/restores for small iteration counts
Releasing the GIL is not worthwhile for small loop iteration counts.
This was previously only done for non-reduction ufuncs.
Do this now also for reductions and assignments.
Improves performance of small reductions by about 10% as they avoid two
save and restores.

==

numpy/core/src/multiarray/array_assign_scalar.c
numpy/core/src/umath/ufunc_object.c
==================
edeaf3f;Julian Taylor;2014-01-14 00:04:26 +0100;MAINT: move array creation earlier and use goto for deallocs

==

numpy/core/src/multiarray/multiarraymodule.c
==================
feadae4;Pauli Virtanen;2014-01-13 21:49:33 +0200;TST: core: fix tofile file positioning test
Python 2 I/O is a thin wrapper on FILE* C-API. All Python code must
follow the ANSI C requirement (see man fopen) that there is a seek or a
flush between reads and writes, otherwise the behavior is undefined.
Whether this is required depends on the CRT implementation; glibc
doesn't seem to require it, but OSX apparently does.

Fixes gh-4189

==

numpy/core/tests/test_multiarray.py
==================
f5f109a;Julian Taylor;2014-01-13 01:51:12 +0100;MAINT: add an explicit check on zero iteration

==

numpy/core/src/multiarray/multiarraymodule.c
==================
490a9b2;Julian Taylor;2014-01-12 23:00:29 +0100;ENH: improve new where function
Allow object and zerosized iteration and move bool casting of mask into
the iterator logic and improve tests appropriately.

==

numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_multiarray.py
==================
593e3c3;Julian Taylor;2014-01-10 01:24:30 +0100;ENH: optimize np.where via nditer with external loop
Implementation via PyArray_Choose is very slow, a direct implementation
is 10 times faster.
Optimizing Choose is more complicated due to its higher complexity and
would require specialization for optimal np.where anyway, but it is
something that could be done in future.

==

numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_multiarray.py
==================
0b85f91;Julian Taylor;2014-01-12 10:05:44 -0800;Merge pull request #4061 from larsmans/c-fixes
MAINT: Minor C fixes
==
==================
cd7f283;Lars Buitinck;2013-11-17 16:05:57 +0100;MAINT: umath: get rid of "statement with no effect" warning
(What was this line for anyway?)

==

numpy/core/src/umath/test_rational.c.src
==================
f5dd97d;Lars Buitinck;2013-10-24 00:51:08 +0200;MAINT: multiarray: fix types
convert_datatype.c and number.c now compile without warnings.

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/number.c
numpy/core/src/multiarray/number.h
==================
38d9c26;Pauli Virtanen;2014-01-12 16:24:18 +0200;MAINT: linalg: prune unused routines from lapack_lite

==

numpy/linalg/lapack_litemodule.c
numpy/linalg/tests/test_linalg.py
==================
da3ad01;Julian Taylor;2014-01-11 14:42:59 +0100;TST: run slow chroot test earlier for better load balancing

==

.travis.yml
==================
a1c6d4a;Julian Taylor;2014-01-11 14:10:02 +0100;TST: run 32 bit test with python3

==

tools/travis-test.sh
==================
dd8be8e;Julian Taylor;2014-01-11 13:41:21 +0100;BUG: fix npy_PyFile_Dup error handling
no caller deals with the -1.

==

numpy/core/include/numpy/npy_3kcompat.h
==================
d64d62b;Julian Taylor;2014-01-11 13:21:45 +0100;BUG: fix large file support on 32 bit systems
On linux large file support must be enabled and ftello used to avoid
overflows. The result must not be converted to a size_t, but a long
long.

==

numpy/core/bscript
numpy/core/include/numpy/npy_3kcompat.h
numpy/core/include/numpy/npy_common.h
numpy/core/setup.py
numpy/core/src/multiarray/ctors.c
numpy/lib/bscript
numpy/lib/tests/test_format.py
==================
4b4796a;Leif Denby;2014-01-08 16:21:16 +0000;BUG: Fix typos in conversion_utils
Unparenthesized logical expressions in if statements caused clang
compilation failure on OSX.

==

numpy/core/src/multiarray/conversion_utils.c
==================
d400b04;Charles Harris;2014-01-10 11:36:50 -0800;Merge pull request #4183 from charris/gh-4099
ENH: Remove unnecessary broadcasting notation restrictions in einsum.
==
==================
b1b0ea8;hpaulj;2014-01-07 11:39:49 -0800;ENH: Remove unnecessary broadcasting notation restrictions in einsum.
In a case where 'ik,kj->ij' works, einsum would raise an error for
'ik,k...->i...' because the 'ik' did not have ellipsis

In einsum.c.src prepare_op_axes() pass all 'broadcast' cases through the
'RIGHT' case (interation from the end).

Since the BROADCAST variable is not longer needed, all instances of it have
been removed from einsum.c.src

test_einsum.py - adds a test_einsum_broadcast case.

==

doc/release/1.9.0-notes.rst
numpy/add_newdocs.py
numpy/core/src/multiarray/einsum.c.src
numpy/core/tests/test_einsum.py
==================
d1dbf8e;Charles Harris;2014-01-09 16:00:15 -0800;Merge pull request #3895 from larsmans/norm-dot
ENH: use dot in linalg.norm
==
==================
42c8ced;Charles Harris;2014-01-09 10:49:40 -0800;Merge pull request #4177 from juliantaylor/objmalloc
ENH: replace a few small allocations with PyObject_Malloc
==
==================
e58dc05;Charles Harris;2014-01-09 08:41:33 -0800;Merge pull request #4152 from pv/fromfile-fix
BUG: core: ensure file handle positions are in sync
==
==================
03a2535;Pauli Virtanen;2014-01-09 10:38:08 +0200;BLD: add off_t size detection to bento build

==

numpy/core/bscript
numpy/core/include/numpy/_numpyconfig.h.in
==================
3de3fda;Pauli Virtanen;2014-01-02 20:47:34 +0200;BUG: core: use correct Python format string for npy_off_t

==

numpy/core/include/numpy/npy_3kcompat.h
numpy/core/include/numpy/npy_common.h
numpy/core/setup.py
==================
41690fc;Pauli Virtanen;2014-01-02 19:06:18 +0200;ENH: core: switch to off_t and lseek in Python 3 file seeks
This removes dependency on CRT implementation details (whether
fflush/fclose actually seeks the underlying raw file handle or not).

Also, check seek error statuses.

==

numpy/core/include/numpy/npy_3kcompat.h
numpy/core/include/numpy/npy_common.h
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarraymodule.c
==================
dd05022;Pauli Virtanen;2013-12-11 18:59:13 -0800;BUG: core: ensure file handle positions are in sync
The Python3 file handles keep records of current file positions, so that
the raw handle needs to be restored to the original position in order
to not confuse the mechanism.

Fixes gh-4118

==

numpy/core/include/numpy/npy_3kcompat.h
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_multiarray.py
==================
927cfcf;Charles Harris;2014-01-08 19:51:23 -0800;Merge pull request #4165 from juliantaylor/lfs-mtrand
BUG: compile random in lfs mode
==
==================
6834b3a;Julian Taylor;2014-01-08 18:31:53 +0100;ENH: replace a few small allocations with PyObject_Malloc
It uses a faster small object allocator for sizes smaller than 512 bytes
(256 in python2). This improves nditer construction and scalar
operations by about 10%.

For now only replace high profile encapsulated nditer allocation and
python object (PyArray and gentype) allocations that go over tp_free to
ensure no non-buggy third party application is broken.

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/nditer_constr.c
numpy/core/src/multiarray/scalartypes.c.src
==================
5f36f57;Pauli Virtanen;2014-01-08 10:34:48 -0800;Merge pull request #4171 from cowlicks/ufunc-override-out
BUG: Allow __numpy_ufunc__ to handle multiple output ufuncs.
==
==================
b3420fd;Pauli Virtanen;2014-01-08 10:22:20 -0800;Merge pull request #4170 from juliantaylor/memoryview-error
BUG: core: fix memoryview issues with python 3.4
==
==================
e770f92;Pauli Virtanen;2014-01-07 11:07:40 -0800;Merge pull request #4175 from takluyver/patch-1
DOC: Update link to numpydoc README
==
==================
43dcd32;Thomas Kluyver;2014-01-07 11:01:02 -0800;MAINT: Update link to numpydoc README
This is the counterpart of my PR numpy/numpydoc#7 renaming the README.
==

doc/HOWTO_DOCUMENT.rst.txt
==================
ff7d5f9;Ralf Gommers;2014-01-05 01:09:04 -0800;Merge pull request #4173 from leaz/patch-2
Add '.FOR' to src_extensions
==
==================
d77dda3;leaz;2014-01-05 16:57:07 +0800;Add '.FOR' to src_extensions
The uppercase source extension '.FOR' is also commonly used.
==

numpy/distutils/fcompiler/__init__.py
==================
d849245;Blake Griffith;2014-01-04 12:59:38 -0600;BUG DOC TST: Allow __numpy_ufunc__ to handle multiple output ufuncs.
Added details about how the output variables are handled to the spec.
Also adds tests for ufuncs with multiple outputs.

==

doc/neps/ufunc-overrides.rst
numpy/core/src/private/ufunc_override.h
numpy/core/tests/test_umath.py
==================
28eb575;Julian Taylor;2014-01-04 01:13:03 +0100;BUG: fix native-only long long check
Caused all long longs to be required native only in memoryviews.
NPY_SIZEOF_LONG_LONG never existed, replace documentation with existing
NPY_SIZEOF_LONGLONG and code with a sizeof(npy_longlong).

==

doc/source/reference/c-api.config.rst
numpy/core/src/multiarray/buffer.c
numpy/core/tests/test_multiarray.py
==================
5733037;Julian Taylor;2014-01-04 00:12:48 +0100;BUG: return immediately if memoryview cannot be non-native
late return triggers an assert with python3.4 in debug mode.
Closes gh-4138.

==

numpy/core/src/multiarray/buffer.c
==================
45ec18e;Lars Buitinck;2013-12-26 13:23:02 +0100;ENH: optimize complex vector norm
Also used ravel(order='K') to prevent copies.

==

numpy/linalg/linalg.py
==================
1ffe713;Ralf Gommers;2014-01-03 10:51:18 -0800;Merge pull request #4161 from juliantaylor/32bit-travis
TST: add 32 bit travis tests
==
==================
b3bdb4b;Julian Taylor;2014-01-03 16:46:39 +0100;MAINT: enable verbose bento build

==

tools/travis-test.sh
==================
b6cb030;Julian Taylor;2013-12-23 14:11:57 +0100;TST: add 32 bit travis tests
Implemented by setting up a chroot in the travis VM and moving all the
test logic, including bento build, to a single script.
This is still reasonable fast, about twice as slow as the normal tests.
When Travis updates to a newer OS it can be replaced by standard cross
compiling.

==

.bento_travisci.sh
.travis.yml
tools/travis-test.sh
==================
9ab9648;Julian Taylor;2014-01-02 19:37:28 +0100;BUG: compile random in lfs mode
randomkit.c uses fopen which requires LFS mode to support larger than 64
bit files on 32 bit systems.

==

numpy/random/bscript
numpy/random/setup.py
==================
bb91617;Charles Harris;2014-01-02 16:31:39 -0800;Merge pull request #4149 from argriffing/doc-matrix-rank
DOC: matrix_rank
==
==================
b8b58bc;Charles Harris;2014-01-02 16:27:28 -0800;Merge pull request #4158 from rgommers/f2py-no-reload
MAINT: remove use of ``reload`` from f2py.  See gh-4139.
==
==================
b91d3f4;Julian Taylor;2014-01-02 15:00:27 -0800;Merge pull request #4163 from juliantaylor/complex-norm-fix
BUG: fix complex norm of higher order
==
==================
7213b97;Charles Harris;2014-01-02 14:26:46 -0800;Merge pull request #4168 from pv/f2py-docs
DOC: Move f2py docs under doc/ and link to Sphinx docs
==
==================
4f7d101;Pauli Virtanen;2014-01-03 00:02:11 +0200;DOC: f2py: fix some typos etc

==

doc/source/f2py/getting-started.rst
doc/source/f2py/python-usage.rst
doc/source/f2py/signature-file.rst
doc/source/f2py/usage.rst
==================
3b3a531;Pauli Virtanen;2014-01-02 23:31:34 +0200;DOC: f2py: more Numeric -> numpy updating

==

doc/source/f2py/getting-started.rst
doc/source/f2py/signature-file.rst
==================
6c7af63;Pauli Virtanen;2014-01-02 23:27:42 +0200;DOC: f2py: update numpy.distutils part a bit

==

doc/source/f2py/distutils.rst
doc/source/f2py/setup_example.py
==================
31f50a8;Pauli Virtanen;2014-01-02 23:25:19 +0200;DOC: f2py: minor fixups

==

doc/source/f2py/distutils.rst
doc/source/f2py/index.rst
doc/source/f2py/python-usage.rst
==================
def9fda;Pauli Virtanen;2014-01-02 23:20:11 +0200;MAINT: remove unused file

==

doc/source/f2py/default.css
==================
6325f92;Pauli Virtanen;2014-01-02 23:19:54 +0200;DOC: f2py: Numeric -> numpy

==

doc/source/f2py/array_session.dat
doc/source/f2py/getting-started.rst
doc/source/f2py/python-usage.rst
doc/source/f2py/scalar_session.dat
doc/source/f2py/signature-file.rst
doc/source/f2py/string_session.dat
==================
337366c;Pauli Virtanen;2014-01-02 22:41:27 +0200;DOC: split up f2py user guide + markup fixes

==

doc/source/contents.rst
doc/source/f2py/advanced.rst
doc/source/f2py/distutils.rst
doc/source/f2py/getting-started.rst
doc/source/f2py/index.rst
doc/source/f2py/python-usage.rst
doc/source/f2py/signature-file.rst
doc/source/f2py/usage.rst
==================
5bcfbe9;Pauli Virtanen;2014-01-02 22:26:50 +0200;DOC: fix up f2py user guide formatting

==

doc/source/f2py/index.rst
==================
75c2d2f;Pauli Virtanen;2014-01-02 22:12:01 +0200;DOC: move f2py documentation under doc/ and link its user guide with Sphinx

==

doc/f2py/BUGS.txt
doc/f2py/FAQ.txt
doc/f2py/HISTORY.txt
doc/f2py/Makefile
doc/f2py/OLDNEWS.txt
doc/f2py/README.txt
doc/f2py/Release-1.x.txt
doc/f2py/Release-2.x.txt
doc/f2py/Release-3.x.txt
doc/f2py/Release-4.x.txt
doc/f2py/TESTING.txt
doc/f2py/THANKS.txt
doc/f2py/TODO.txt
doc/f2py/apps.tex
doc/f2py/bugs.tex
doc/f2py/collectinput.py
doc/f2py/commands.tex
doc/f2py/default.css
doc/f2py/docutils.conf
doc/f2py/ex1/arr.f
doc/f2py/ex1/bar.f
doc/f2py/ex1/foo.f
doc/f2py/ex1/foobar-smart.f90
doc/f2py/ex1/foobar.f90
doc/f2py/ex1/foobarmodule.tex
doc/f2py/ex1/runme
doc/f2py/f2py.1
doc/f2py/f2py2e.tex
doc/f2py/f2python9-final/README.txt
doc/f2py/f2python9-final/aerostructure.jpg
doc/f2py/f2python9-final/flow.jpg
doc/f2py/f2python9-final/mk_html.sh
doc/f2py/f2python9-final/mk_pdf.sh
doc/f2py/f2python9-final/mk_ps.sh
doc/f2py/f2python9-final/src/examples/exp1.f
doc/f2py/f2python9-final/src/examples/exp1mess.txt
doc/f2py/f2python9-final/src/examples/exp1session.txt
doc/f2py/f2python9-final/src/examples/foo.pyf
doc/f2py/f2python9-final/src/examples/foom.pyf
doc/f2py/f2python9-final/structure.jpg
doc/f2py/fortranobject.tex
doc/f2py/hello.f
doc/f2py/index.html
doc/f2py/intro.tex
doc/f2py/multiarray/array_from_pyobj.c
doc/f2py/multiarray/bar.c
doc/f2py/multiarray/foo.f
doc/f2py/multiarray/fortran_array_from_pyobj.txt
doc/f2py/multiarray/fun.pyf
doc/f2py/multiarray/run.pyf
doc/f2py/multiarray/transpose.txt
doc/f2py/multiarrays.txt
doc/f2py/notes.tex
doc/f2py/oldnews.html
doc/f2py/options.tex
doc/f2py/pyforttest.pyf
doc/f2py/pytest.py
doc/f2py/python9.tex
doc/f2py/signaturefile.tex
doc/f2py/simple.f
doc/f2py/simple_session.dat
doc/f2py/using_F_compiler.txt
doc/f2py/win32_notes.txt
doc/source/_templates/indexcontent.html
doc/source/f2py/allocarr.f90
doc/source/f2py/allocarr_session.dat
doc/source/f2py/array.f
doc/source/f2py/array_session.dat
doc/source/f2py/calculate.f
doc/source/f2py/calculate_session.dat
doc/source/f2py/callback.f
doc/source/f2py/callback2.pyf
doc/source/f2py/callback_session.dat
doc/source/f2py/common.f
doc/source/f2py/common_session.dat
doc/source/f2py/compile_session.dat
doc/source/f2py/default.css
doc/source/f2py/extcallback.f
doc/source/f2py/extcallback_session.dat
doc/source/f2py/fib1.f
doc/source/f2py/fib1.pyf
doc/source/f2py/fib2.pyf
doc/source/f2py/fib3.f
doc/source/f2py/ftype.f
doc/source/f2py/ftype_session.dat
doc/source/f2py/index.rst
doc/source/f2py/moddata.f90
doc/source/f2py/moddata_session.dat
doc/source/f2py/run_main_session.dat
doc/source/f2py/scalar.f
doc/source/f2py/scalar_session.dat
doc/source/f2py/setup_example.py
doc/source/f2py/spam.pyf
doc/source/f2py/spam_session.dat
doc/source/f2py/string.f
doc/source/f2py/string_session.dat
doc/source/f2py/var.pyf
doc/source/f2py/var_session.dat
numpy/f2py/BUGS.txt
numpy/f2py/Makefile
numpy/f2py/NEWS.txt
numpy/f2py/README.txt
numpy/f2py/TODO.txt
numpy/f2py/doc/Makefile
numpy/f2py/doc/Release-1.x.txt
numpy/f2py/doc/Release-2.x.txt
numpy/f2py/doc/Release-3.x.txt
numpy/f2py/doc/Release-4.x.txt
numpy/f2py/doc/apps.tex
numpy/f2py/doc/bugs.tex
numpy/f2py/doc/collectinput.py
numpy/f2py/doc/commands.tex
numpy/f2py/doc/ex1/arr.f
numpy/f2py/doc/ex1/bar.f
numpy/f2py/doc/ex1/foo.f
numpy/f2py/doc/ex1/foobar-smart.f90
numpy/f2py/doc/ex1/foobar.f90
numpy/f2py/doc/ex1/foobarmodule.tex
numpy/f2py/doc/ex1/runme
numpy/f2py/doc/f2py2e.tex
numpy/f2py/doc/f2python9-final/README.txt
numpy/f2py/doc/f2python9-final/aerostructure.jpg
numpy/f2py/doc/f2python9-final/flow.jpg
numpy/f2py/doc/f2python9-final/mk_html.sh
numpy/f2py/doc/f2python9-final/mk_pdf.sh
numpy/f2py/doc/f2python9-final/mk_ps.sh
numpy/f2py/doc/f2python9-final/src/examples/exp1.f
numpy/f2py/doc/f2python9-final/src/examples/exp1mess.txt
numpy/f2py/doc/f2python9-final/src/examples/exp1session.txt
numpy/f2py/doc/f2python9-final/src/examples/foo.pyf
numpy/f2py/doc/f2python9-final/src/examples/foom.pyf
numpy/f2py/doc/f2python9-final/structure.jpg
numpy/f2py/doc/fortranobject.tex
numpy/f2py/doc/index.html
numpy/f2py/doc/intro.tex
numpy/f2py/doc/multiarray/array_from_pyobj.c
numpy/f2py/doc/multiarray/bar.c
numpy/f2py/doc/multiarray/foo.f
numpy/f2py/doc/multiarray/fortran_array_from_pyobj.txt
numpy/f2py/doc/multiarray/fun.pyf
numpy/f2py/doc/multiarray/run.pyf
numpy/f2py/doc/multiarray/transpose.txt
numpy/f2py/doc/multiarrays.txt
numpy/f2py/doc/notes.tex
numpy/f2py/doc/oldnews.html
numpy/f2py/doc/options.tex
numpy/f2py/doc/python9.tex
numpy/f2py/doc/signaturefile.tex
numpy/f2py/doc/using_F_compiler.txt
numpy/f2py/doc/win32_notes.txt
numpy/f2py/docs/FAQ.txt
numpy/f2py/docs/HISTORY.txt
numpy/f2py/docs/OLDNEWS.txt
numpy/f2py/docs/README.txt
numpy/f2py/docs/TESTING.txt
numpy/f2py/docs/THANKS.txt
numpy/f2py/docs/default.css
numpy/f2py/docs/docutils.conf
numpy/f2py/docs/hello.f
numpy/f2py/docs/pyforttest.pyf
numpy/f2py/docs/pytest.py
numpy/f2py/docs/simple.f
numpy/f2py/docs/simple_session.dat
numpy/f2py/docs/usersguide/allocarr.f90
numpy/f2py/docs/usersguide/allocarr_session.dat
numpy/f2py/docs/usersguide/array.f
numpy/f2py/docs/usersguide/array_session.dat
numpy/f2py/docs/usersguide/calculate.f
numpy/f2py/docs/usersguide/calculate_session.dat
numpy/f2py/docs/usersguide/callback.f
numpy/f2py/docs/usersguide/callback2.pyf
numpy/f2py/docs/usersguide/callback_session.dat
numpy/f2py/docs/usersguide/common.f
numpy/f2py/docs/usersguide/common_session.dat
numpy/f2py/docs/usersguide/compile_session.dat
numpy/f2py/docs/usersguide/default.css
numpy/f2py/docs/usersguide/docutils.conf
numpy/f2py/docs/usersguide/extcallback.f
numpy/f2py/docs/usersguide/extcallback_session.dat
numpy/f2py/docs/usersguide/fib1.f
numpy/f2py/docs/usersguide/fib1.pyf
numpy/f2py/docs/usersguide/fib2.pyf
numpy/f2py/docs/usersguide/fib3.f
numpy/f2py/docs/usersguide/ftype.f
numpy/f2py/docs/usersguide/ftype_session.dat
numpy/f2py/docs/usersguide/index.txt
numpy/f2py/docs/usersguide/moddata.f90
numpy/f2py/docs/usersguide/moddata_session.dat
numpy/f2py/docs/usersguide/run_main_session.dat
numpy/f2py/docs/usersguide/scalar.f
numpy/f2py/docs/usersguide/scalar_session.dat
numpy/f2py/docs/usersguide/setup_example.py
numpy/f2py/docs/usersguide/spam.pyf
numpy/f2py/docs/usersguide/spam_session.dat
numpy/f2py/docs/usersguide/string.f
numpy/f2py/docs/usersguide/string_session.dat
numpy/f2py/docs/usersguide/var.pyf
numpy/f2py/docs/usersguide/var_session.dat
numpy/f2py/f2py.1
==================
a32807e;Julian Taylor;2014-01-02 10:47:31 -0800;Merge pull request #4166 from juliantaylor/man-hyphen
DOC: f2py manpage, use minus instead of hyphens for options
==
==================
551541c;Julian Taylor;2014-01-02 16:43:17 +0100;DOC: f2py manpage, use minus instead of hyphens for options

==

numpy/f2py/f2py.1
==================
bd6d287;Julian Taylor;2014-01-02 17:19:48 +0100;BUG: fix complex norm of higher order
asfarray truncates the complex part, so it must be avoided for complex
types.
Closes gh-4156.

==

numpy/linalg/linalg.py
numpy/linalg/tests/test_linalg.py
==================
192355e;Julian Taylor;2013-12-31 08:59:41 -0800;Merge pull request #4159 from juliantaylor/doc-sync
DOC: synchronize release notes with 1.7.x
==
==================
2f4a837;Julian Taylor;2013-12-31 17:59:06 +0100;DOC: synchronize release notes with 1.7.x

==

doc/release/1.7.2-notes.rst
==================
9dbeb2e;Ralf Gommers;2013-12-30 17:49:33 +0100;MAINT: remove use of ``reload`` from f2py.  See gh-4139.

==

numpy/f2py/crackfortran.py
numpy/f2py/f2py2e.py
==================
3130900;Julian Taylor;2013-12-30 05:58:00 -0800;Merge pull request #4144 from larsmans/norm-bugs
BUG: linalg: norm fails on longdouble, signed int
==
==================
14fb700;seberg;2013-12-30 02:23:49 -0800;Merge pull request #3916 from larsmans/dotblas-64bit-safe
64-bit safe _dotblas
==
==================
c2b40f4;alex;2013-12-26 20:39:30 -0500;DOC: more matrix_rank docs

==

numpy/linalg/__init__.py
==================
3a6c1c2;alex;2013-12-26 20:31:49 -0500;DOC: matrix_rank

==

doc/source/reference/routines.linalg.rst
==================
dff0726;Lars Buitinck;2013-12-26 14:12:53 +0100;BUG: linalg: norm fails on longdouble, signed int
This fixes the following bug with longdouble:

>>> x = np.arange(10, dtype=np.longdouble)
>>> np.linalg.norm(x, ord=3)
Traceback (most recent call last):
  File "<ipython-input-5-7ee53a8ac142>", line 1, in <module>
    np.linalg.norm(x, ord=3)
  File "/tmp/v/lib/python2.7/site-packages/numpy/linalg/linalg.py", line 2090, in norm
    return add.reduce(absx**ord, axis=axis)**(1.0/ord)
UnboundLocalError: local variable 'absx' referenced before assignment

As well as the handling of minimal values for signed integers:

>>> x = np.array([-2**31], dtype=np.int32)
>>> np.linalg.norm(x, ord=3)
/tmp/v/lib/python2.7/site-packages/numpy/linalg/linalg.py:2090: RuntimeWarning: invalid value encountered in double_scalars
  return add.reduce(absx**ord, axis=axis)**(1.0/ord)
nan

==

numpy/linalg/linalg.py
numpy/linalg/tests/test_linalg.py
==================
61998c2;Charles Harris;2013-12-24 14:46:01 -0800;Merge pull request #4141 from rgommers/py34-fixes
Fix a few issues that show up with python 3.4b1
==
==================
9e836c2;Ralf Gommers;2013-12-23 10:45:54 +0100;TST: fix test failure due to comparing floats with assert_equal.
Observed on 32-bit linux with python 3.4b1

==

numpy/lib/tests/test_function_base.py
==================
8d4cc1e;Ralf Gommers;2013-12-23 10:34:13 +0100;MAINT: don't use open(.., 'U') in Python 3.x, is deprecated.
This is default behavior in 3.x; in 2.x open() doesn't have a `newline`
kw.  So make code Python-version-specific.

==

numpy/lib/npyio.py
==================
bc82e93;Ralf Gommers;2013-12-23 04:52:13 -0800;Merge pull request #4137 from juliantaylor/sumfix
BUG: Ensure signed division of stride for pairwise sum
==
==================
ecc20a3;Julian Taylor;2013-12-23 12:57:37 +0100;BUG: Ensure signed division of stride for pairwise sum
Avoids wrong wrapping with i386 12 byte long doubles.
Closes gh-4136.

==

numpy/core/src/umath/loops.c.src
==================
0856259;seberg;2013-12-22 12:39:42 -0800;Merge pull request #4112 from rhewett/meshgrid_single
ENH: Allow meshgrid to take 1D and 0D inputs
==
==================
86df1b1;Charles Harris;2013-12-20 15:16:06 -0800;Merge pull request #4102 from seberg/issue-612
FIX: Array split should not hack empty array shape away
==
==================
d68a6b8;Charles Harris;2013-12-20 14:37:31 -0800;Merge pull request #4133 from ContinuumIO/datetime_sort
Add lexsort support for datetime and timedelta
==
==================
823ff90;Jay Bourque;2013-12-20 15:08:24 -0600;Add lexsort support for datetime and timedelta

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/npysort/heapsort.c.src
numpy/core/src/npysort/mergesort.c.src
numpy/core/src/npysort/npysort_common.h
numpy/core/src/npysort/quicksort.c.src
numpy/core/src/private/npy_sort.h
numpy/core/tests/test_multiarray.py
==================
e7fe68a;Charles Harris;2013-12-20 11:06:29 -0800;Merge pull request #4103 from seberg/issue-616
BUG|API: Raise wrong arg{min|max} out shape and stricter check
==
==================
f43dee7;Sebastian Berg;2013-12-05 14:09:13 +0100;BUG|API: Raise wrong arg{min|max} out shape and stricter check
The error was not raised when the output array size did not match
the given out array causing segfaults if the out array was smaller.

This also makes the shape check strict and changes the error
to a ValueError. The shape check could be relaxed for leading
ones. ufuncs and assignments do this.

==

doc/release/1.9.0-notes.rst
numpy/core/src/multiarray/calculation.c
numpy/core/tests/test_multiarray.py
==================
c91b4c3;Sebastian Berg;2013-12-20 16:35:00 +0100;BUG: Fix array_split empty array type and add FutureWarning
Fixes the result type of empty output arrays.

The FutureWarning warns about changed behaviour. A "kludge" was
introduced into array split converting converting the result of
something like:

>>> np.array_split(np.array([[1, 1]]), 2)
[array([[1, 1]]), array([], dtype=int64)]

instead of retaining the shape of the empty/second array to
be (0, 2). A FutureWarning is now raised when such a
replacement occurs.

Closes gh-612

==

numpy/lib/shape_base.py
numpy/lib/tests/test_shape_base.py
==================
b7144d2;seberg;2013-12-18 05:37:25 -0800;Merge pull request #4127 from nouiz/argmax
DOC: Fix doc and error handling in Argmax
==
==================
a8e86ab;rhewett;2013-12-07 15:08:26 -0800;ENH: Allow meshgrid to work for 1D and 0D cases.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
a2507f6;seberg;2013-12-18 04:05:51 -0800;Merge pull request #4128 from longjon/master
Avoid overallocating memory in arraypad with user supplied function
==
==================
cf22b31;Jonathan L Long;2013-12-17 16:24:07 -0800;Avoid overallocating memory in arraypad with user supplied function
Previously, arraypad used zeros(shape).astype(dtype) instead of
zeros(shape, dtype), which could allocate up to eight times more memory
than necessary.

==

numpy/lib/arraypad.py
==================
65c57d7;Frederic;2013-12-17 15:08:01 -0500;Fix the doc of PyArray_ArgMax and PyArray_ArgMin

==

doc/source/reference/c-api.array.rst
==================
ff325bb;Ralf Gommers;2013-12-14 13:02:02 -0800;Merge pull request #4114 from rgommers/travis-bento
Fix Bento issues and add Bento build to Travis CI config
==
==================
aff396d;Charles Harris;2013-12-14 12:43:48 -0800;Merge pull request #4124 from seberg/issue-4123
BUG: Fix missing NULL check in lexsort
==
==================
684b159;Sebastian Berg;2013-12-14 20:21:11 +0100;BUG: Fix missing NULL check in lexsort
When Getitem of the lexsort sequence argument failed
this was not checked.

Closes gh-4123

==

numpy/core/src/multiarray/item_selection.c
numpy/core/tests/test_regression.py
==================
205598b;seberg;2013-12-12 15:09:40 -0800;Merge pull request #4117 from abalkin/gh-2276
BUG: Propagate error when assigning an instance to an array item.
==
==================
03d3747;Lev Abalkin;2013-12-10 19:15:14 -0500;BUG: Propagate error when assigning an instance to an array item.
Prior to this fix, numpy would swallow an error that may occur when
an instance of an old-style class would be used to set an item in an
incompatible array.  This would result in a SystemError.

Fixes #2276.

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/tests/test_multiarray.py
==================
e886943;Julian Taylor;2013-12-12 12:28:35 -0800;Merge pull request #4115 from msperlich/master
BUG: fix loading from compressed .npz (Issue 4093)
==
==================
f5f223f;Max Sperlich;2013-12-11 21:44:05 -0500;MAINT: Change test to read random sized chunks
Speeds the test up vs. reading single bytes at a time, and is now
correctly handled when reading the magic string and array header.

==

numpy/lib/tests/test_format.py
==================
e09c5f0;Max Sperlich;2013-12-11 21:35:50 -0500;MAINT: Introduced _read_array function
This wrapper function is used everywhere in format.py now to ensure to
correctly the handle the case when fp.read returns fewer bytes than
requested.

Also added a test for the orignal bug, loading an array of size more
than 64K from a zip file.

==

numpy/lib/format.py
numpy/lib/tests/test_format.py
==================
bdb6f8c;Max Sperlich;2013-12-09 19:44:36 -0500;MAINT: Better handling of very small chunks
Issue 4093: Improved the handling of the case when the amount of data
read by fp.read is smaller than dtype.itemsize. Also changed the test
code to make sure this case is tested.

==

numpy/lib/format.py
numpy/lib/tests/test_format.py
==================
161ca8f;Max Sperlich;2013-12-08 21:15:00 -0500;STY: pep8

==

numpy/lib/tests/test_format.py
==================
aa2443a;Max Sperlich;2013-12-08 20:57:23 -0500;TST: Adds test case for Issue 4093

==

numpy/lib/format.py
numpy/lib/tests/test_format.py
==================
faf4131;Max Sperlich;2013-12-08 19:29:06 -0500;BUG: Fixes Python3 compatibility

==

numpy/lib/format.py
==================
3ba1d94;Max Sperlich;2013-12-08 17:57:25 -0500;BUG: fix loading from compressed .npz (Issue 4093)
In Python 2.6.x the number of bytes read from a zip file is 2^16, which
is less than the 2^18 requested by lib.format.py. This change handles
the case where fp.read() returns fewer than the requested number of bytes.

==

numpy/lib/format.py
==================
eef2e73;Ralf Gommers;2013-12-08 16:35:24 +0100;DOC: update version number in bento.info

==

bento.info
==================
915dda7;Ralf Gommers;2013-12-08 15:23:42 +0100;MAINT: remove useless email notification in .travis.yml

==

.travis.yml
==================
d2e676f;Ralf Gommers;2013-12-08 15:21:52 +0100;TST: add Bento build to Travis CI runs.

==

.bento_travisci.sh
.travis.yml
==================
55c76f6;Ralf Gommers;2013-12-08 16:16:11 +0100;BLD: fix Bento build issue with new .h.src templating.

==

bento.info
bscript
==================
b6fa5ca;Ralf Gommers;2013-12-08 15:32:01 +0100;BLD: fix syntax errors in bento.info

==

numpy/core/bento.info
==================
3aa76ba;Charles Harris;2013-12-07 08:04:44 -0800;Merge pull request #4110 from rgommers/setuppy
MAINT: setup.py improvements - allow some setuptools commands to work.
==
==================
17716d7;Ralf Gommers;2013-12-06 20:45:40 +0100;MAINT: setup.py improvements - allow some setuptools commands to work.

==

setup.py
==================
d05518c;Charles Harris;2013-12-06 19:40:56 -0800;Merge pull request #4111 from chrisdembia/patch-1
Correct typo in interp() docstring.
==
==================
bfec9ee;Christopher Dembia;2013-12-06 16:20:47 -0800;Correct typo in interp() docstring.
The docstring for interp() contained the grammatically-incorrect text "defaults is". I corrected this to "default is".
==

numpy/lib/function_base.py
==================
d47b6de;njsmith;2013-12-05 16:37:22 -0800;Merge pull request #4106 from juliantaylor/objargs
ENH: use PyObject_CallFunctionObjArgs in Generic*Function
==
==================
6b05a67;Julian Taylor;2013-12-06 01:01:31 +0100;ENH: use PyObject_CallFunctionObjArgs in Generic*Function
ObjArgs is a few percent faster than the format version. This is
noticable in scalar operations.

==

numpy/core/src/multiarray/number.c
==================
056ab73;Charles Harris;2013-12-04 05:52:40 -0800;Merge pull request #4098 from seberg/issue-3352
BUG: fix incorrect type in binomial ditsributions.c
==
==================
6e141d7;Sebastian Berg;2013-12-04 14:19:26 +0100;BUG: fix incorrect type in binomial ditsributions.c
This caused slowness and wrong/potentially wrong results
when the binomial result is larger then a native C int.

Closes gh-3352

==

numpy/random/mtrand/distributions.c
==================
043e357;seberg;2013-12-03 11:31:12 -0800;Merge pull request #4058 from juliantaylor/intern-strings
ENH: intern some commonly used strings in umath module
==
==================
05ab6f4;njsmith;2013-12-02 16:37:42 -0800;Merge pull request #3685 from juliantaylor/pairwise
ENH: implement pairwise summation
==
==================
95ff68f;Julian Taylor;2013-12-02 15:33:30 -0800;Merge pull request #4094 from cgwaldman/master
BUG: fix NaT handling in _strided_to_strided_string_to_datetime
==
==================
1951d3d;Sebastian Berg;2013-12-02 17:54:19 +0100;BUG: Error checks for the dtype shape.
Also creates a clean tuple for the shape tuple, instead of
passing potentially mutable objects through.

Closes gh-4009

==

numpy/core/src/multiarray/descriptor.c
numpy/core/tests/test_dtype.py
==================
67b95a3;Charles G Waldman;2013-12-02 22:53:11 +0000;BUG: fix NaT handling in _strided_to_strided_string_to_datetime
When converting an array of strings to datetime64, a "NaT" occurring
in the input would cause all subsequent values to be converted to NaT.

==

numpy/core/src/multiarray/dtype_transfer.c
numpy/core/tests/test_datetime.py
==================
c0a0cd7;Julian Taylor;2013-12-02 18:25:45 +0100;ENH: also use pairwise summation for half and complex types

==

numpy/core/src/umath/loops.c.src
numpy/core/tests/test_ufunc.py
==================
5da4722;Charles Harris;2013-12-02 09:58:27 -0800;Merge pull request #4089 from seberg/issue-3494
BUG: Fix negative axis insert (issue 3494)
==
==================
b0bc012;Julian Taylor;2013-11-30 20:52:19 +0100;ENH: fix stride issue and unroll 8 times to improve accuracy
Fix missing stride accounting in calling recursive function.
Unroll 8 times to improve accuracy and allowing vectorizing with avx
without changing summation order.
Add tests.

==

numpy/core/src/umath/loops.c.src
numpy/core/tests/test_ufunc.py
==================
9d6caf9;Félix Hartmann;2013-07-03 15:15:55 +0200;TST: add test for negative axis values in np.insert.

==

numpy/lib/tests/test_function_base.py
==================
50fad03;Sebastian Berg;2013-12-02 13:47:46 +0100;BUG: Fix np.insert with negative axis.
In some cases a negative axis argument to np.insert would result
in wrong behaviour due to np.rollaxis, add modulo operation to
avoid this (an error is still raised due to arr.shape[axis]).

Closes gh-3494

==

numpy/lib/function_base.py
==================
8db0dc7;seberg;2013-12-01 10:58:19 -0800;Merge pull request #4066 from garyo/master
DOC: Improved doc for boolean array indexing
==
==================
0debb6b;Gary Oberbrunner;2013-12-01 11:43:16 -0500;DOC: further tweaks to boolean indexing doc to improve clarity

==

numpy/doc/indexing.py
==================
f57b255;Lars Buitinck;2013-10-15 18:17:35 +0200;ENH: umath: simplify pairwise sum
Simple recursive implementation with unrolled base case. Also fixed
signed/unsigned issues by making all indices signed.

Added a unit test based on @juliantaylor's example.

Performance seems unchanged: still about a third faster than before.

==

numpy/core/src/umath/loops.c.src
numpy/core/tests/test_ufunc.py
==================
1e624fa;Julian Taylor;2013-09-04 21:15:31 +0200;ENH: implement pairwise summation
pairwise summation has an average error of O(log(n)) instead of O(n) of
the regular summation.
It is implemented as summing pairs of small blocks of regulary summed
values in order to archive the same performance as the old sum.

An example of data which profits greatly is
d = np.ones(500000)
(d / 10.).sum() - d.size / 10.

An alternative to pairwise summation is kahan summation but in order to
have a low performance penalty one must unroll and vectorize it,
while pairwise summation has the same speed without any vectorization.
The better error bound of O(1) is negligible in many cases.

==

numpy/core/src/umath/loops.c.src
==================
a5038d9;Gary Oberbrunner;2013-11-29 16:58:25 -0500;DOC: further improvements for boolean array indexing doc

==

numpy/doc/indexing.py
==================
8ff4c66;Julian Taylor;2013-11-26 19:29:49 +0100;ENH: skip redundant checking of subok keyword in _find_array_prepare
all currently existing callers only call this function if subok has
already been checked to be true, but keep the code to make clear it has
to be checked.

==

numpy/core/src/umath/ufunc_object.c
==================
b731d4d;Julian Taylor;2013-11-16 12:51:04 +0100;ENH: intern some commonly used strings in umath module
Allows using the PyObject dictionary functions instead of the costly
C-string variants.

Make use of this in some of the ufunc subtype wrapper functions.

Improvement:

    a, b = np.arange(200.), np.arange(200.)
    %timeit np.add(a, b, out=a)
    1000000 loops, best of 3: 768 ns per loop

vs before:

    %timeit np.add(a, b, out=a)
    1000000 loops, best of 3: 1.03 µs per loop

==

numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/ufunc_object.h
numpy/core/src/umath/umathmodule.c
==================
f4749b7;seberg;2013-11-26 10:25:00 -0800;Merge pull request #4077 from ogrisel/streaming-numpy-save
Streaming numpy.save to arbitrary file objects 
==
==================
7a497ff;Olivier Grisel;2013-11-26 16:12:06 +0100;TST: Increase test coverage of numpy.save/load roundtrips

==

numpy/lib/tests/test_io.py
==================
207474f;Olivier Grisel;2013-11-26 16:11:35 +0100;ENH: Use nditer in numpy.save to stream bytes to custom file objects

==

numpy/lib/format.py
==================
1d18032;Lars Buitinck;2013-10-23 21:55:33 +0200;ENH: dotblas: re-route all cblas_?dot calls to chunked versions
Also factored out and simplified NumPy->BLAS stride conversion.

==

numpy/core/blasdot/_dotblas.c
==================
46dd681;Lars Buitinck;2013-10-14 19:36:38 +0200;BUG/ENH: blasdot: make *dot calls 64-bit safe
BLAS uses int for all its size types, so the size is going to be
silently truncated on platforms where sizeof npy_intp > sizeof int,
i.e. on modern 64-bit platforms. In this case, we do a dot product
in reasonably-sized chunks and add the result ourselves.

On platforms where sizeof(int) == sizeof(npy_intp), i.e. typical
32-bit platforms, it's up to the compiler to optimize the loop away.

Also tried to make the code more readable, replaced int by npy_intp
in a few places and removed useless register declarations (modern
compilers ignore those).

==

numpy/core/blasdot/_dotblas.c
==================
78e29a3;seberg;2013-11-20 12:29:22 -0800;Merge pull request #4064 from juliantaylor/import-speed
ENH: improve add_newdocs performance
==
==================
acfe123;Gary Oberbrunner;2013-11-20 14:51:00 -0500;DOC: Improved doc for boolean array indexing

==

numpy/doc/indexing.py
==================
9f611de;seberg;2013-11-20 08:17:37 -0800;Merge pull request #3980 from larsmans/refactor-gemm-gemv
MAINT: dotblas: factor out all gemm and gemv calls
==
==================
66174b8;Julian Taylor;2013-11-19 00:25:32 +0100;ENH: improve add_newdocs performance
replace slow exec with a direct __import__.
improves `import numpy` speed by about 10%.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
74e5c12;Charles Harris;2013-11-16 10:20:28 -0800;Merge pull request #4057 from juliantaylor/unaligned-macro
MAINT: make NPY_CPU_HAVE_UNALIGNED_ACCESS a numeric macro
==
==================
773c8f3;Julian Taylor;2013-11-15 21:02:27 +0100;MAINT: make NPY_CPU_HAVE_UNALIGNED_ACCESS a numeric macro
allows using it in if statements like for count_nonzero
also fix a compiler warning by casting

==

numpy/core/include/numpy/npy_cpu.h
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/lowlevel_strided_loops.c.src
==================
2c02016;Julian Taylor;2013-11-16 02:24:30 -0800;Merge pull request #4020 from juliantaylor/memcrash
BUG: fix missing check for memory allocation failure in ufuncs
==
==================
6eb4a43;Charles Harris;2013-11-15 10:25:23 -0800;Merge pull request #4056 from herr-biber/master
Fix typo.
==
==================
843792b;Charles Harris;2013-11-15 10:23:11 -0800;Merge pull request #4047 from arunpersaud/convolve_doc
DOC: use variable names in formula for convolve
==
==================
b4b5ad2;Markus Roth;2013-11-15 19:15:55 +0100;Fix typo.

==

numpy/lib/twodim_base.py
==================
9f8639a;Arun Persaud;2013-11-12 13:56:54 -0800;DOC: use variable names in formula for convolve
Use the variables names `a` and `v` as used in the function instead of
using `f` and `g`. This makes it clearer which array "slides" along the other.

==

numpy/core/numeric.py
==================
1ebbd5c;Charles Harris;2013-11-14 17:18:17 -0800;Merge pull request #4055 from takluyver/patch-2
MAINT: Update links to numpydoc source code and README
==
==================
d10c9ff;Thomas Kluyver;2013-11-14 16:44:49 -0800;MAINT: Update links to numpydoc source code and README
These links pointed to numpydoc's location within the numpy project on Github, but it has since been split out to a separate repository, breaking the links.
==

doc/HOWTO_DOCUMENT.rst.txt
==================
a49c279;Lev Abalkin;2013-11-14 15:24:23 -0500;BUG: Fixed mask_rowcols().
Previous implementation relied on ma.asarray() to always create
a new object.

See gh-4043.

==

numpy/ma/extras.py
==================
a49f07e;Charles Harris;2013-11-14 11:08:44 -0800;Merge pull request #4051 from juliantaylor/valgrind
fix two uninitialized uses reported with valgrind
==
==================
b861cff;Charles Harris;2013-11-14 10:55:24 -0800;Merge pull request #4044 from juliantaylor/scalar-conv-enh
ENH: check if type is basic python type before checking for __numpy_ufunc__
==
==================
1bc2ae5;Charles Harris;2013-11-14 10:46:52 -0800;Merge pull request #4042 from chatcannon/f2pydoc
A few F2PY documentation improvements
==
==================
ce6f348;Julian Taylor;2013-11-13 16:04:56 -0800;Merge pull request #4038 from seberg/issue-4036
DEP: non-integer scalar python sequence repeat
==
==================
eed68a8;Julian Taylor;2013-11-13 23:00:42 +0100;BUG: fix uninitialized use in _strided_to_strided_string_to_datetime
dt == NPY_DATETIME_NAT is used as error condition, so initialize it to
something else.

==

numpy/core/src/multiarray/dtype_transfer.c
==================
5bd9fbf;Julian Taylor;2013-11-13 21:59:18 +0100;MAINT: initialize strides for ufunc.at
avoids uninitialized use errors from valgrind, value of strides is
irrelevant as count is always 1.

==

numpy/core/src/umath/ufunc_object.c
==================
217402e;Charles Harris;2013-11-13 12:04:11 -0800;Merge pull request #4046 from chatcannon/speling
Spelling & notation corrections
==
==================
0221385;Julian Taylor;2013-11-12 18:53:53 +0100;ENH: check if type is basic python type before checking for __numpy_ufunc__
improves performance of scalar conversions (x + .5) by ~30%.

==

numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/number.c
==================
e4d8ad8;seberg;2013-11-13 10:15:46 -0800;Merge pull request #4039 from abalkin/issue-4026
BUG: ma.compressed() function returns masked array
==
==================
50b0e8e;Lev Abalkin;2013-11-11 14:21:01 -0500;BUG: ma.compressed() function returns masked array
When a masked array with nomask was passed to ma.compressed()
function, the result was the original masked array instead of
an ndarray.

Closes gh-4026.

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
1a1a757;Chris Kerr;2013-11-12 19:55:56 +0000;spelling: AC -> AD in years
(could also use BCE and CE to be more politically correct)

==

doc/neps/datetime-proposal.rst
doc/neps/datetime-proposal3.rst
==================
2f34889;Chris Kerr;2013-11-12 19:54:53 +0000;Spelling: loose -> lose

==

doc/neps/datetime-proposal.rst
doc/neps/datetime-proposal3.rst
==================
d8fd283;Lev Abalkin;2013-11-12 12:44:03 -0500;ENH: ma.asarray() and ma.asanyarray() will pass through input of the correct type.
If x is of type MaskedArray for ma.asarray(x) or any subtype of
MaskedArray for ma.asanyarray(x), these functions will simply return x.
This makes them consistent with their numpy counterparts.

Closes gh-4043.

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
c3b7236;Chris Kerr;2013-11-12 10:55:20 +0000;Changed CVS cens.ioc.ee documentation links to link to GitHub

==

numpy/f2py/docs/README.txt
==================
a0b182c;Chris Kerr;2013-11-12 10:49:56 +0000;Moved old news from README.txt to OLDNEWS.txt

==

numpy/f2py/docs/OLDNEWS.txt
numpy/f2py/docs/README.txt
==================
ca0d3f0;Chris Kerr;2013-11-12 10:38:34 +0000;Updated FAQ with links to github issues page etc
Removed some questions that are no longer relevant

==

numpy/f2py/docs/FAQ.txt
==================
4d0076f;Charles Harris;2013-11-11 18:56:19 -0800;Merge pull request #4037 from migueldvb/docs
Example to convert the type of an array using the astype method and minor typo fix
==
==================
0e5e3d4;Chris Kerr;2013-11-11 23:07:59 +0000;DOC: Spelling correction for numpy.diag see also

==

numpy/lib/twodim_base.py
==================
e1e021d;Miguel de Val-Borro;2013-11-11 13:45:51 -0500;DOC: Add an example of casting array type and byte order using astype.

==

doc/HOWTO_DOCUMENT.rst.txt
numpy/doc/byteswapping.py
==================
b326be1;Sebastian Berg;2013-11-11 15:42:19 +0100;DEP: non-integer scalar python sequence repeat
This starts deprecation for code such as
np.float_(3.4) * [1, 2]
which should only work for integer objects. It may be possible
to just return NotImplemented since at least python sequences
implement their multiply themself through __index__.

Further action is only needed for PyArray_PyIntAsIntp, so this
is part of a larger deprecation now.

Closes gh-4036

==

doc/release/1.9.0-notes.rst
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/tests/test_deprecations.py
==================
6132b98;Charles Harris;2013-11-10 09:56:11 -0800;Merge pull request #4034 from endolith/patch-1
DOC: Change pad mode options to a definition list
==
==================
f325c34;endolith;2013-11-10 10:41:11 -0500;DOC: Change pad mode options to a definition list
Current formatting is not part of rst, and is not rendering correctly at http://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.pad.html
==

numpy/lib/arraypad.py
==================
96dd69c;Julian Taylor;2013-11-09 02:47:51 -0800;Merge pull request #4032 from juliantaylor/format-test
TST: improve test_long_str and add documentation
==
==================
235d957;Julian Taylor;2013-11-09 11:22:01 +0100;TST: improve test_long_str and add documentation

==

numpy/lib/tests/test_format.py
==================
896863a;Julian Taylor;2013-11-09 02:20:40 -0800;Merge pull request #4027 from halfaleague/chunk-read-bug
Chunked reading fails when dtype.itemsize is larger than buffer size.
==
==================
ff3c89f;Charles Harris;2013-11-08 17:53:19 -0800;Merge pull request #3996 from stromnov/master
Allow checking two or more fortran compilers instead of one.
==
==================
3b6f93c;Charles Harris;2013-11-08 17:34:36 -0800;Merge pull request #4022 from bbudescu/win-home-envvar
cross-platform code to find home folder when looking .numpy-site.cfg
==
==================
83eb3ac;Luke Carmichael;2013-11-08 20:02:15 -0500;BUG: Fix chunked reading of strings longer than BUFFERSIZE
This fix correctly calculates the number of BUFFER_SIZE chunks to read.
This fix takes into account dtype sizes that could be larger
than the BUFFER_SIZE, like a long string.
See #4027

==

numpy/lib/tests/test_format.py
==================
4050ac7;seberg;2013-11-08 14:24:53 -0800;Merge pull request #4024 from eltjpm/from_sequence_fix
Sequence assignment doesn't raise exception on shape mismatch
==
==================
a7a3001;Luke Carmichael;2013-11-08 17:08:25 -0500;test for failing chunk read of large string

==

numpy/lib/tests/test_format.py
==================
8195973;eltjpm;2013-11-08 16:35:06 -0500;BUG: Fix raising exception on invalid assignment from sequence
Closes gh-4024

==

numpy/core/src/multiarray/ctors.c
numpy/core/tests/test_regression.py
==================
92b9e84;Luke Carmichael;2013-11-08 16:18:49 -0500;When reading file in chunks, buffer_size < dtype.itemsize, ensure at least one read

==

numpy/lib/format.py
==================
f30cecb;Alexander Belopolsky;2013-11-06 14:17:27 -0500;BUG: Support ndim=0 when constructing arrays from buffer
Previously the buffer was interpreted as 1-dimensional when
no shape was provided, even when ndim was 0.

Closes gh-4015

==

numpy/core/src/multiarray/ctors.c
numpy/core/tests/test_multiarray.py
==================
e1569a3;bbudescu;2013-11-07 12:41:27 +0200;cross-platform code to find numpy config
https://github.com/numpy/numpy/issues/3995

==

numpy/distutils/system_info.py
==================
d071d3f;Charles Harris;2013-11-06 14:32:06 -0800;Merge pull request #3974 from juliantaylor/fenv-improve
ENH: avoid expensive clears in fenv functions
==
==================
a056816;Julian Taylor;2013-11-06 20:34:05 +0100;BUG: fix missing check for memory allocation failure in ufuncs
closes gh-4018

==

numpy/core/src/umath/ufunc_object.c
==================
dcfe326;Julian Taylor;2013-10-24 23:07:19 +0200;ENH: avoid expensive clears in fenv functions
Clearing is 50-100 times more expensive than checking on x86, so check if there
is anything needs to be cleared first. This speeds up scalar operations
by 10%-20%.
Based on Arink Verma code in #3739.

Implement the functions as new C-API functions npy_get_floatstatus and
npy_clear_floatstatus in npy_math.

==

doc/source/reference/c-api.coremath.rst
doc/source/reference/c-api.ufunc.rst
numpy/core/include/numpy/npy_math.h
numpy/core/include/numpy/ufuncobject.h
numpy/core/src/npymath/ieee754.c.src
numpy/core/src/umath/simd.inc.src
numpy/core/src/umath/ufunc_object.c
numpy/linalg/umath_linalg.c.src
==================
e7e365f;seberg;2013-11-06 05:32:31 -0800;Merge pull request #4010 from juliantaylor/reduce-opt
reduction micro optimizations
==
==================
41f2a26;Julian Taylor;2013-11-05 18:23:26 +0100;ENH: early return from PyArray_EquivTypenums if the numbers are equal

==

numpy/core/src/multiarray/multiarraymodule.c
==================
7b124cf;Julian Taylor;2013-11-04 23:04:26 +0100;MAINT: remove unused variable

==

numpy/core/src/umath/ufunc_object.c
==================
23065cf;Julian Taylor;2013-11-04 20:01:05 +0100;ENH: replace PyUFunc_GetPyValues with faster _get_bufsize_errmask
avoids unnecessary creation of unused error objects.

==

numpy/core/src/umath/ufunc_object.c
==================
c86daba;Julian Taylor;2013-11-04 19:48:37 +0100;ENH: replace Py_BuildValue with faster PyTuple_Pack

==

numpy/core/src/umath/ufunc_object.c
==================
0774804;Julian Taylor;2013-11-03 05:11:16 -0800;Merge pull request #4004 from juliantaylor/doc-updates
DOC: fix layout of issue listings in release notes
==
==================
bfc6699;Julian Taylor;2013-11-03 14:06:59 +0100;DOC: fix layout of issue listings in release notes

==

doc/release/1.6.1-notes.rst
doc/release/1.6.2-notes.rst
doc/release/1.7.1-notes.rst
doc/release/1.7.2-notes.rst
==================
37b28f8;Julian Taylor;2013-11-03 04:09:29 -0800;Merge pull request #4003 from juliantaylor/release-notes
DOC: update 1.7.2 release notes
==
==================
1beb0ec;Julian Taylor;2013-11-03 12:55:40 +0100;DOC: update 1.7.2 release notes
add two additional fixed bugs

==

doc/release/1.7.2-notes.rst
==================
8a2728c;Charles Harris;2013-11-02 13:45:15 -0700;Merge pull request #3999 from WarrenWeckesser/vander
ENH: lib: Rewrite vander
==
==================
253cff0;Warren Weckesser;2013-11-02 16:19:08 -0400;MAINT: lib: Use a consistent PEP8-compliant import style in twodim_base.py and tests/test_twodim_base.py.  Also make a couple more PEP8 tweaks.

==

numpy/lib/tests/test_twodim_base.py
numpy/lib/twodim_base.py
==================
c5c4d0b;Warren Weckesser;2013-11-02 14:09:47 -0400;MAINT: lib: Add a 'See Also' section to the vander docstring, and make a few more PEP8 tweaks.

==

numpy/lib/twodim_base.py
==================
cdd1419;Warren Weckesser;2013-11-02 12:51:32 -0400;MAINT: lib: remove unused imports and PEP8 clean up in twodim_base.py

==

numpy/lib/twodim_base.py
==================
6ced92b;Warren Weckesser;2013-11-02 12:41:31 -0400;ENH: lib: Rewrite vander: make it faster, and add an option to specify the order of the powers (either decreasing or increasing).

==

numpy/lib/tests/test_twodim_base.py
numpy/lib/twodim_base.py
==================
a73f729;Warren Weckesser;2013-11-02 11:10:37 -0400;MAINT: Don't use 'import *' in lib/test_twodim_base.py.

==

numpy/lib/tests/test_twodim_base.py
==================
0ddb6d1;Charles Harris;2013-11-01 09:41:29 -0700;Merge pull request #3997 from juliantaylor/release-notes
DOC: add 1.7.2 release notes
==
==================
bd92d8c;Julian Taylor;2013-11-01 14:17:46 +0100;DOC: add 1.7.2 release notes

==

doc/release/1.7.2-notes.rst
doc/source/release.rst
==================
cef2dc2;Andrew Stromnov;2013-11-01 01:22:01 +0400;Allow checking two or more fortran compilers instead of one.

==

numpy/distutils/fcompiler/__init__.py
==================
eb40f65;Julian Taylor;2013-10-30 01:50:14 -0700;Merge pull request #3992 from ewmoore/winhypot
BUG: hypot(inf, 0) shouldn't raise a warning
==
==================
753d611;Eric Moore;2013-10-29 18:40:30 -0400;BUG: fix handling of infs in hypot on windows
On any platform where we used our own implementation of hypot, (e.g.
windows) there were several issues with infs.

hypot(inf, y) == inf, for all y including nan.  We now check for inf and
handle this case explicitly for all y instead of just y = nan.

Although hypot(inf, 0) was correctly returning inf, it was incorrectly
raising the invalid floating point exception.

Fixes gh-2385

==

numpy/core/src/npymath/npy_math.c.src
numpy/core/tests/test_umath.py
==================
e7802e7;Charles Harris;2013-10-28 15:32:41 -0700;Merge pull request #3989 from charris/add-authors-to-1.8-notes
DOC: Add list of authors to 1.8.0 release notes.
==
==================
1bc4af2;Charles Harris;2013-10-28 16:21:58 -0600;DOC: Add list of authors to 1.8.0 release notes.

==

doc/release/1.8.0-notes.rst
==================
85b83e6;Charles Harris;2013-10-27 18:23:02 -0700;Merge pull request #3982 from charris/refactor-eigh-eigvalsh
MAINT: Refactor eigh and eigvalsh and associated tests.
==
==================
3fc4907;Charles Harris;2013-10-25 17:20:22 -0600;MAINT: Refactor eigh and eigvalsh and associated tests.
Do not convert the UPLO argument to a bytestring, it is not necessary.
Distribute parts of the eigh tests into the appropriate TestEigvalsh or
TestEigh test class.

==

numpy/linalg/linalg.py
numpy/linalg/tests/test_linalg.py
==================
14153dc;Lars Buitinck;2013-10-25 18:57:19 +0200;MAINT: dotblas: factor out all gemm and gemv calls

==

numpy/core/blasdot/_dotblas.c
==================
47b5af9;Charles Harris;2013-10-25 12:34:31 -0700;Merge pull request #3978 from juliantaylor/py3-eigh-bug
BUG: fix broken UPLO of eigh in python3
==
==================
103abc2;Charles Harris;2013-10-25 11:43:26 -0700;Merge pull request #3979 from pv/gcov
MAINT: runtests: enable generation of C code coverage info via gcov
==
==================
f8e0727;Julian Taylor;2013-10-25 19:36:33 +0200;BUG: reject invalid UPLO with ValueError in eigh/eigvalsh
to prevent unintentional use of wrong function. Restores 1.7 behavior.

==

numpy/linalg/linalg.py
numpy/linalg/tests/test_linalg.py
==================
4f386f1;Charles Harris;2013-10-25 11:04:59 -0700;Merge pull request #3969 from juliantaylor/memchr-bug2
BUG: fix handling of negative strides in npy_memchr
==
==================
5005b29;Pauli Virtanen;2013-10-25 19:34:57 +0300;MAINT: runtests: enable generation of C code coverage info via gcov

==

runtests.py
==================
e549e69;Julian Taylor;2013-10-25 18:56:59 +0200;BUG: fix broken UPLO of eigh in python3
UPLO was cast to bytes and compared to a string which is always false in
python3.
closes gh-3977

==

numpy/linalg/linalg.py
numpy/linalg/tests/test_linalg.py
==================
ef22934;Julian Taylor;2013-10-23 22:32:05 +0200;MAINT: remove trailing zero count path in npy_memchr
its only actually faster than just running through the trailing bytewise
loop if the needle is in the last byte.

==

numpy/core/setup_common.py
numpy/core/src/multiarray/common.h
==================
a3e8c12;Charles Harris;2013-10-24 15:30:22 -0700;Merge pull request #3965 from seberg/valgrind
MAINT: Initialize strides in NpyIter and silence valgrind
==
==================
3a01f4e;Sebastian Berg;2013-10-24 23:26:16 +0200;TST: Initialize some arrays to to avoid valgrind warnings

==

numpy/core/tests/test_multiarray.py
numpy/linalg/tests/test_linalg.py
==================
ef51114;Sebastian Berg;2013-10-24 23:23:23 +0200;BUG: Further reference count issues in __int__ and friends

==

numpy/core/src/multiarray/number.c
==================
8988715;Julian Taylor;2013-10-24 10:41:48 -0700;Merge pull request #3971 from ochoadavid/patch-1
BUG: changed string.lowercase to string.ascii_lowercase
==
==================
b61cb2c;ochoadavid;2013-10-24 15:16:02 -0200;crackfortran: changed string.lowercase to string.ascii_lowercase
Compatibility with Python3, which dosn't have string.lowercase.
==

numpy/f2py/crackfortran.py
==================
d6e8115;Sebastian Berg;2013-10-24 14:47:41 +0200;BUG: Fix clongdouble type in scalar type selection

==

numpy/core/src/multiarray/convert_datatype.c
==================
6e5f0c1;Sebastian Berg;2013-10-24 02:22:48 +0200;MAINT|BUG: Some small refcounting fixes

==

numpy/core/src/multiarray/nditer_constr.c
numpy/core/src/multiarray/number.c
numpy/core/src/umath/test_rational.c.src
numpy/core/tests/test_regression.py
==================
77ecefb;Sebastian Berg;2013-10-23 00:52:34 +0200;BUG|MAINT: Fix reference count bugs, init NpyIter strides
Also changes some tests to not use np.empty as to avoid
valgrind spam.

The NpyIter strides are arbitrary, but 0 makes sense, and the
strides are used to decide which transfer function to use, etc.
causing lots of warnings in valgrind.

==

numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/nditer_constr.c
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_api.py
==================
cfd8148;Julian Taylor;2013-10-23 20:51:21 +0200;BUG: fix handling of negative strides in npy_memchr
the new code did not account for them at all, add the old loops back but
keep the stride 1 optimization for sparse masks.

==

numpy/core/src/multiarray/common.h
numpy/core/tests/test_api.py
==================
93a0ac8;Charles Harris;2013-10-23 13:07:07 -0700;Merge pull request #3970 from juliantaylor/sort-keeporder
ENH: keep order in np.sort and np.partition copy
==
==================
f0e6e01;Julian Taylor;2013-10-23 21:26:47 +0200;ENH: keep order in np.sort and np.partition copy
avoids unnecessary strided to contig copy for fortran arrays.

==

numpy/core/fromnumeric.py
==================
ec5b97d;Charles Harris;2013-10-23 12:07:52 -0700;Merge pull request #3963 from juliantaylor/default-errobj-crash
Default errobj crash
==
==================
a1dad5d;Julian Taylor;2013-10-22 20:23:50 +0200;ENH: merge UFUNC_ERR_DEFAULT2 variable into UFUNC_ERR_DEFAULT
It seems it was added as a precaution to avoid breaking the rather
complicated ufunc code. It effectively disabled the skipping of the
dictionary lookup for the default values for the common case and leading
to hardly tested code in third party libraries like pandas which set the
error state to numpys old default (ignore all).
The skipping improves scalar performance by 2.5-5%.

==

numpy/core/include/numpy/ufuncobject.h
numpy/core/numeric.py
numpy/core/src/umath/umathmodule.c
numpy/core/tests/test_numeric.py
==================
b52487e;Julian Taylor;2013-10-22 20:23:25 +0200;BUG: fix crash on default errobj
Missing check for optional NULL argument, the case can only happen if
the error mask is 0 (the old default).
closes gh-3962

==

numpy/core/src/umath/ufunc_object.c
==================
54d3559;seberg;2013-10-21 02:36:37 -0700;Merge pull request #3952 from JStech/issue_2052
BUG: #2052 del scalar subscript causes segfault
==
==================
0d3289f;Charles Harris;2013-10-20 17:17:59 -0700;Merge pull request #3954 from juliantaylor/memchr-bug
BUG: wrong boundary check in unrolled memchr
==
==================
11a931b;Charles Harris;2013-10-20 17:15:51 -0700;Merge pull request #3953 from WarrenWeckesser/savetxt-bad-fmt-error
MAINT: io: handle a bad fmt argument in savetxt by raising a ValueError.
==
==================
97e6cad;Julian Taylor;2013-10-20 20:16:12 +0200;BUG: wrong boundary check in unrolled memchr

==

numpy/core/src/multiarray/common.h
==================
c71f366;John Stechschulte;2013-10-19 10:51:55 -0700;BUG: #2052 del scalar subscript causes segfault
Fixes issue #2052, where attempting to delete a scalar field causes a
segfault. Returns ValueError instead, like when attempting to delete an
array element.

Also added a test for this bug.

==

numpy/core/src/multiarray/scalartypes.c.src
numpy/core/tests/test_multiarray.py
==================
0d28476;Warren Weckesser;2013-10-20 10:56:27 -0400;MAINT: io: handle a bad fmt argument in savetxt by raising a ValueError.

==

numpy/lib/npyio.py
numpy/lib/tests/test_io.py
==================
55d3ef5;Charles Harris;2013-10-19 14:24:29 -0700;Merge pull request #3856 from pv/op-before-ufunc
BUG: core: ensure __r*__ has precedence over __numpy_ufunc__
==
==================
fd5d308;Pauli Virtanen;2013-10-01 22:30:09 +0300;BUG: core: ensure __r*__ has precedence over __numpy_ufunc__
Add a special case to the implementation of ndarray.__mul__ et al. that
refuses to work on other objects that are not ndarray subclasses and
implement both __numpy_ufunc__ and __r*__.

This way, execution passes first to the custom __r*__ method, which
makes it possible to have e.g. __mul__ and np.multiply do different
things.

Additionally, disable one __array_priority__ special case handling when
also __numpy_ufunc__ is defined.

==

doc/neps/ufunc-overrides.rst
doc/source/reference/arrays.classes.rst
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/number.c
numpy/core/src/multiarray/number.h
numpy/core/tests/test_multiarray.py
==================
1eb5f03;Charles Harris;2013-10-19 13:03:28 -0700;Merge pull request #3921 from mdickinson/doc-numpy-random-fixes
DOC: Fix misleading description of random_sample in numpy.random docstring.
==
==================
a3858f3;Charles Harris;2013-10-19 12:29:25 -0700;Merge pull request #3951 from seberg/scalar-priority
ENH: Add scalar special cases to Priority getter
==
==================
11248b7;Sebastian Berg;2013-10-19 20:04:23 +0200;ENH: Add scalar special cases to Priority getter
Exact Python scalars can never have a priority, but checking
it is expensive. This adds checks for these to the Priority
getter function.

==

numpy/core/src/multiarray/common.c
==================
5d01dd1;Charles Harris;2013-10-19 10:54:20 -0700;Merge pull request #3946 from juliantaylor/pyufunc_refactor
delay error object creation to when errors occur
==
==================
6d6dc6d;Julian Taylor;2013-09-29 13:35:39 +0200;MAINT: refactor ufunc error object handling
_get_global_ext_obj: retrieves global ufunc object
_get_bufsize_errmask: get only bufsize and errormask from ufunc object
_extract_pyvals: handle NULL extobj

PyUFunc_GetPyValues implemented as _get_global_ext_obj +_extract_pyvals
drop unused first_error variable.

fix errobj memory leak in previous commit.

add some test for the extobj and warning path, the warning tests are
disabled like the raising path as they fail on a bunch of platforms.

==

numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_numeric.py
==================
43df2ee;Charles Harris;2013-10-19 10:30:07 -0700;Merge pull request #3945 from juliantaylor/minmax-improve
ENH: unroll vector minmax loop
==
==================
e79296b;Arink Verma;2013-09-05 04:23:08 +0530;ENH: High time consumption by PyUFunc_GetPyValues in ufunc_object.c For every single operation calls, numpy has to extract value of buffersize, errormask  and name to pack and build error object. These two functions, _extract_pyvals and PyUFunc_GetPyValues together use >12% of time.

==

numpy/core/src/umath/ufunc_object.c
==================
b0dd690;Julian Taylor;2013-10-19 19:02:51 +0200;ENH: accept callable as message in assert_
Allows deferring evaluation until failure.
Used for blocked minmax test which evaluate array representations for
the error message many thousand times accumulating to a full second
useless runtime.

==

numpy/core/tests/test_umath.py
numpy/testing/utils.py
==================
46a3fc1;Julian Taylor;2013-10-19 19:02:27 +0200;ENH: unroll vector minmax loop
Improves speed by 10% on intel cpus.
Simplify code by moving the fenv support check into the dispatcher. fenv works
on all common platforms (including windows), the fallback is not worth it for
the exotic platforms where it might not be available.

==

numpy/core/src/umath/simd.inc.src
==================
4533821;Charles Harris;2013-10-19 09:54:13 -0700;Merge pull request #3950 from larsmans/c-fixes
C fixes
==
==================
341eeb5;Lars Buitinck;2013-10-19 17:51:55 +0200;MAINT: fix item_selection.c so it compiles without warnings

==

numpy/core/src/multiarray/item_selection.c
==================
405753a;Lars Buitinck;2013-10-19 17:51:10 +0200;MAINT: typo

==

numpy/core/_methods.py
==================
31d6c4e;Lars Buitinck;2013-10-15 18:24:36 +0200;MAINT: unused variable, formatting

==

numpy/core/src/multiarray/nditer_api.c
numpy/core/src/multiarray/number.c
==================
002de55;Lars Buitinck;2013-10-15 10:17:49 +0200;MAINT: C identifiers causing UB + useless char returns
C identifiers aren't allowed to match "^_[A-Z]". Fixed that in
numpyos.c and removed some more useless underscores.

Changed NumPyOS_ascii_tolower and the code that calls it to handle
ints, not chars. C promotes char to int in so many situations that
char variables are just a pain. (The C standard library uses int
in <ctype.h>, for example.)

==

numpy/core/src/multiarray/numpyos.c
==================
503c7ae;Lars Buitinck;2013-10-11 20:00:54 +0200;MAINT: double underscores in Lapack-lite C module
Strictly speaking, any non-standard name with "__" in it causes
undefined behavior in C. It's also completely unnecessary to use
any in this module.

==

numpy/linalg/lapack_litemodule.c
==================
640c9de;Charles Harris;2013-10-19 07:08:09 -0700;Merge pull request #3948 from pv/runtests-path
BUG: runtests: make -t option work again
==
==================
eef0f07;Julian Taylor;2013-10-19 04:40:15 -0700;Merge pull request #3947 from seberg/inline-check-index
ENH: Inline check_and_adjust_index
==
==================
0b9094b;Pauli Virtanen;2013-10-19 13:39:00 +0300;BUG: runtests: make -t option work again

==

runtests.py
==================
81a0fe9;Sebastian Berg;2013-10-19 12:43:03 +0200;ENH: Inline check_and_adjust_index
The function takes a considerable amount of time of np.take and
to also fancy indexing. Simple np.takes can speed up by more then
40%, fancy indexes around 10%.

==

numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/common.h
==================
18acfa4;Charles Harris;2013-10-17 18:17:00 -0700;Merge pull request #3941 from charris/make-test-endian-independent
BUG: test_fortran_order_buffer fails on big endian architectures.
==
==================
dc974f3;Charles Harris;2013-10-17 17:16:56 -0600;BUG: test_fortran_order_buffer fails on big endian architectures.
The numpy unicode string comparison function does not work correctly
for non-native byte orders. That is a problem needing fixing, but
test_fortran_order_buffer is only needed to check that the buffer
works correctly for fortran order buffers, so let the endianess of
test data be the platform default.

==

numpy/core/tests/test_regression.py
==================
ac63298;Charles Harris;2013-10-17 12:45:49 -0700;Merge pull request #3936 from charris/forward-port-3935
forward-port-3935 
==
==================
876f416;Yaroslav Halchenko;2013-10-17 16:28:59 +0000;BUG: multiarray/mapping -- address for former renaming of array_ass_big_item
Lead to build failures on s390 (32bit user space).
Patch by Charles Harris

==

numpy/core/src/multiarray/mapping.h
==================
af2b52e;Charles Harris;2013-10-17 10:50:46 -0700;Merge pull request #3933 from charris/add-missing-no-deprecated-api
MAINT: Define NPY_NO_DEPRECATED_API in struct_ufunc_test.c.src
==
==================
3b3fa76;Charles Harris;2013-10-16 17:46:58 -0700;Merge pull request #3931 from juliantaylor/memchr-move
move memchr like code to a function
==
==================
7d4ea16;Julian Taylor;2013-10-16 19:49:47 +0200;ENH: improve npy_memchr(p, 0) by using __builtin_ctz (tzcnt on x86)
Improves sparse mask performance by about a factor of three, the worst
case of no consecutive mask elements slows down by about 10%-15%.

==

numpy/core/setup_common.py
numpy/core/src/multiarray/common.h
==================
cf0869e;Charles Harris;2013-10-16 15:35:27 -0700;Merge pull request #3913 from bspinnler/fix_correlate_docstring
DOC: fixed correlate docstring.
==
==================
935017c;Julian Taylor;2013-10-02 20:38:12 +0200;MAINT: add npy_memchr for memchr like operations
useful for small sizes where the function call is expensive.

==

numpy/core/setup.py
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/umath/ufunc_type_resolution.c
numpy/core/tests/test_api.py
==================
0f7eea9;Julian Taylor;2013-10-16 20:02:02 +0200;MAINT: silence warning by casting to right type

==

numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/item_selection.c
==================
0bfb598;Charles Harris;2013-10-16 15:10:36 -0700;Merge pull request #3929 from chrodan/strc++11
add spaces to literal string concatination for C++11 compatibility
==
==================
a6b0f40;Charles Harris;2013-10-16 14:04:09 -0700;Merge pull request #3932 from juliantaylor/windows-annoyance
BUG: fix declaration-after-statement
==
==================
f4eaba7;Charles Harris;2013-10-16 14:15:22 -0600;MAINT: Define NPY_NO_DEPRECATED_API in struct_ufunc_test.c.src
Removes a compile warning and makes the function use proper macro
replacements. Also fix a pointer type mismatch warning.

==

numpy/core/src/umath/struct_ufunc_test.c.src
==================
0f99cf0;Julian Taylor;2013-10-16 21:55:13 +0200;BUG: fix declaration-after-statement
closes gh-3930

==

numpy/core/src/multiarray/lowlevel_strided_loops.c.src
==================
5fdfa41;Christoph Dann;2013-10-16 15:17:58 -0400;added spaces to literal string concats
literal string concatination without spaces not
allowed in C++11 anymore

==

numpy/core/include/numpy/npy_1_7_deprecated_api.h
==================
84c52d8;Joseph Martinot-Lagarde;2013-10-08 23:33:26 +0200;BUG: cov/corrcoef complex input and empty arrays
This preserves the complex (and higher precision float or
object) type of the input array, so that the complex
covariance and correlation coefficients can be calculated.

It also fixes the the behaviour of empty arrays. These will
now either result in a 0x0 result, or a NxN result filled
with NaNs.

A warning is now issued when ddof is too large and the factor
set to 0 so that in this case the result is always NaN or
infinity/negative infinity and never a negative number.

Closes gh-597 and gh-2680
Closes gh-3882 (original pull request)

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
95a5219;Charles Harris;2013-10-16 11:17:01 -0700;Merge pull request #3914 from mhvk/numeric/isclose-mask-safe
BUG Masked arrays treated incorrectly in isclose(..,..,equal_nan=True)
==
==================
e31729b;Julian Taylor;2013-10-16 19:56:12 +0200;MAINT: add NPY_CPU_HAVE_UNALIGNED_ACCESS macro
currently only i386 and amd64, must be used carefully as the compiler
may still be allowed to assume alignment and try to vectorize based on
type size alignment.

==

numpy/core/include/numpy/npy_cpu.h
numpy/core/src/multiarray/lowlevel_strided_loops.c.src
==================
16236e2;Charles Harris;2013-10-15 17:12:18 -0700;Merge pull request #3923 from cgohlke/patch-1
BUG: close file-like objects returned by urlopen
==
==================
a1ebc67;cgohlke;2013-10-15 14:17:40 -0700;BUG: close file-like objects returned by urlopen
Fix `ResourceWarning: unclosed file` on Python 3
==

numpy/lib/_datasource.py
==================
9217077;Mark Dickinson;2013-10-15 20:39:12 +0100;DOC: Fix misleading description of random_sample in numpy.random docstring.

==

numpy/random/info.py
==================
f6492d9;Bernhard Spinnler;2013-10-15 21:21:33 +0200;DOC: replaced typeset formulas by pure ASCII equivalents.
Replaced typeset formulas by pure ASCII equivalents. Should now be
easier to read in source files.

==

numpy/core/numeric.py
==================
61c8568;Charles Harris;2013-10-15 05:07:54 -0700;Merge pull request #3919 from nkoep/master
Fix example plot of Laplace distribution
==
==================
0390fe3;Niklas Koep;2013-10-15 12:57:43 +0200;Fix example plot of Laplace distribution
In the PDF used for the example plot of the Laplace distribution only the location parameter loc instead of the absolute difference between random variable and loc was divided by the scale parameter. For the example at hand this makes no difference as loc is 0 and lambda is 1. For different values, however, the plot makes no sense.
==

numpy/random/mtrand/mtrand.pyx
==================
415c62c;Ralf Gommers;2013-10-15 08:18:47 +0200;MAINT: update pavement.py for no-2to3.

==

pavement.py
==================
07a20f3;Charles Harris;2013-10-14 17:18:07 -0700;Merge pull request #3918 from seberg/nditer-too-large
BUG: Check that npyiter is not too large
==
==================
fea2a00;Sebastian Berg;2013-10-14 23:38:45 +0200;BUG: Check that npyiter is not too large
Since NpyIter keeps track of the total size, this cannot be
larger then npy_intp, so that an overflow check is necessary.

==

numpy/core/src/multiarray/nditer_constr.c
numpy/core/tests/test_nditer.py
==================
066bdec;Charles Harris;2013-10-14 16:23:49 -0700;Merge pull request #3917 from juliantaylor/scalar-int-overflow
check integer overflows in scalarmath
==
==================
777c6e5;Julian Taylor;2013-10-14 22:59:05 +0200;MAINT: add library sources to some dependencies
fixes missing recompilation of parts of numpy when the static libraries
change.

==

numpy/core/setup.py
==================
3f5ef54;Julian Taylor;2013-10-14 21:55:33 +0200;ENH: add scalarmathmodule.h.src with integer overflow functions
and use them in scalarmathmodule.c instead of the old (disabled) ones.

==

numpy/core/bento.info
numpy/core/setup.py
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/private/scalarmathmodule.h.src
numpy/core/src/scalarmathmodule.c.src
==================
10ce5b2;Julian Taylor;2013-10-14 21:54:17 +0200;MAINT: add src/private in build_dir to include search paths
allows generating headers like npy_partition.h with the code generator

==

numpy/core/bento.info
numpy/core/setup.py
numpy/core/src/private/npy_partition.h
==================
681025d;Charles Harris;2013-10-14 10:58:47 -0700;Merge pull request #3820 from juliantaylor/microopt
A couple micro optimizations
==
==================
83fb19e;Marten van Kerkwijk;2013-10-13 22:39:40 -0400;Ensure masked arrays are treated correctly for isclose(..,..,equal_nan=True)

==

numpy/core/numeric.py
numpy/core/tests/test_numeric.py
==================
4dbf3fe;Charles Harris;2013-10-13 14:58:41 -0700;Merge pull request #3906 from mhvk/ma/test-pep8-and-cleanup
Convert docstrings to comments for nose; PEP8 cleanup (some tests activated)
==
==================
d713f3d;Charles Harris;2013-10-13 12:42:50 -0700;Merge pull request #3910 from pv/runtests-fix
MAINT: update runtests.py from scipy
==
==================
53cafa0;Bernhard Spinnler;2013-10-13 21:35:30 +0200;DOC: fixed correlate docstring.
Replaced correlation formula with corrected version that matches the
numpy implementation. Added comment on possible further different
definitions of correlation. Added examples.
==

numpy/core/numeric.py
==================
6dfe864;Pauli Virtanen;2013-10-13 21:50:21 +0300;MAINT: update runtests.py from scipy
The additional chdir before starting the test allows tests that launch
subprocesses to run.

Fixes gh-3909

==

runtests.py
==================
3d9d9aa;Marten van Kerkwijk;2013-10-12 23:39:32 -0400;One revert (comparisons with None; not PEP8, but good to check); extra comments

==

numpy/ma/tests/test_core.py
numpy/ma/tests/test_mrecords.py
==================
beb1911;Marten van Kerkwijk;2013-10-12 23:22:27 -0400;Small further cleanups of ma.tests, plus correction for python3

==

numpy/ma/tests/test_core.py
numpy/ma/tests/test_mrecords.py
==================
9f1c178;Marten van Kerkwijk;2013-10-12 22:02:19 -0400;Convert docstrings to comments for nose; PEP8 cleanup (some tests activated)

==

numpy/ma/tests/test_core.py
numpy/ma/tests/test_extras.py
numpy/ma/tests/test_mrecords.py
numpy/ma/tests/test_old_ma.py
numpy/ma/tests/test_regression.py
numpy/ma/tests/test_subclassing.py
==================
46b1a4c;Charles Harris;2013-10-12 17:14:11 -0700;Merge pull request #3900 from mhvk/ma/pass-on-NotImplemented
BUG Ensure NotImplemented is passed on in MaskedArray ufunc's
==
==================
50f33ad;Marten van Kerkwijk;2013-10-12 19:50:43 -0400;Small corrections to tests

==

numpy/ma/tests/test_core.py
==================
a2f0115;Charles Harris;2013-10-12 13:44:50 -0700;Merge pull request #3902 from pv/fix-linalg-stride-pt2
BUG: linalg: don't tell BLAS to use zero strides
==
==================
6ec4380;Pauli Virtanen;2013-10-12 23:25:12 +0300;STY: linalg: fix C comment style

==

numpy/linalg/umath_linalg.c.src
==================
301d075;Marten van Kerkwijk;2013-10-12 16:06:14 -0400;Add test cases to ensure NotImplemented is passed on

==

numpy/ma/tests/test_core.py
==================
984854a;Pauli Virtanen;2013-10-12 22:57:22 +0300;BUG: linalg: don't tell BLAS to use zero strides
At least OSX Accelerate fails for this case.

==

numpy/linalg/tests/test_linalg.py
numpy/linalg/umath_linalg.c.src
==================
c9ed04a;Charles Harris;2013-10-12 12:03:39 -0700;Merge pull request #3894 from juliantaylor/count_bool
ENH: add faster boolean count
==
==================
310c8c1;Julian Taylor;2013-10-11 00:07:11 +0200;ENH: add faster boolean count by using wider data types
about 3-5 times faster on 64 bit machines, about 2 times faster on i386.

==

numpy/core/src/multiarray/item_selection.c
numpy/core/tests/test_multiarray.py
==================
405d4ae;Marten van Kerkwijk;2013-10-12 12:11:37 -0400;Ensure NotImplemented is passed on in MaskedArray ufunc's

==

numpy/ma/core.py
==================
de9b44f;Lars Buitinck;2013-10-10 23:32:32 +0200;ENH: use dot (BLAS!) in linalg.norm

==

numpy/linalg/linalg.py
==================
d19d96f;njsmith;2013-10-11 09:47:17 -0700;Merge pull request #3862 from juliantaylor/null-free
MAINT: accept NULL in NpyIter_Deallocate and remove redundant NULL checks
==
==================
deb6b86;Charles Harris;2013-10-10 18:49:39 -0700;Merge pull request #3888 from cowlicks/backporting-docs
DOC: Notes on backporting.
==
==================
664d7db;Blake Griffith;2013-10-09 15:35:43 -0500;DOC: Notes on backporting.

==

doc/source/dev/gitwash/development_workflow.rst
doc/source/dev/gitwash/git_links.inc
==================
31aa001;Charles Harris;2013-10-10 16:56:55 -0700;Merge pull request #3829 from jarondl/pep8-npyio
STY: pep8 for npyio
==
==================
cc0dc43;Yaron de Leeuw;2013-10-11 02:28:55 +0300;STY: pepe8 for npyio continued 2 (typo)
fixing one typo in npyio.py

==

numpy/lib/npyio.py
==================
ae8d7b5;Charles Harris;2013-10-10 14:14:55 -0700;Merge pull request #3885 from Nodd/py3_info
BUG: Disable check for oldstyle classes in python3 (np.info)
==
==================
c3d111c;Joseph Martinot-Lagarde;2013-10-10 20:37:35 +0200;TST: Raise AssertionError on failure

==

numpy/lib/tests/test_regression.py
==================
b91c711;Charles Harris;2013-10-10 11:17:28 -0700;Merge pull request #3890 from andreas-h/patch-1
Update memmap.py
==
==================
03b414f;Charles Harris;2013-10-10 09:33:04 -0700;Merge pull request #3886 from charris/update-1.8.0-notes
DOC: Update 1.8.0 release notes.
==
==================
86f956a;Andreas Hilboll;2013-10-10 15:15:34 +0200;Update memmap.py
Clarify `memmap` docstring to better reflect the meaning of *offset*.
==

numpy/core/memmap.py
==================
7d0c743;Charles Harris;2013-10-09 11:27:52 -0600;DOC: Update 1.8.0 release notes.
Order highlights by significance. This is a subjective judgement.
Mention the linalg enhancements and illustrate with an example.

==

doc/release/1.8.0-notes.rst
==================
ba3697d;Joseph Martinot-Lagarde;2013-10-09 12:56:10 +0200;TST: Regression test for gh-2561

==

numpy/lib/tests/test_regression.py
==================
293b9e0;Joseph Martinot-Lagarde;2013-10-09 12:55:08 +0200;BUG: Disable check for oldstyle classes in python3
Fixes gh-2561

==

numpy/lib/utils.py
==================
6a7830b;Charles Harris;2013-10-08 08:49:48 -0700;Merge pull request #3880 from pv/linalg-stride-fix
Fix bugs in umath_linalg + add more tests + remove unused code
==
==================
2fa1c9d;Pauli Virtanen;2013-10-08 00:16:48 +0300;TST: linalg: better rtol choice

==

numpy/linalg/tests/test_linalg.py
==================
727ed46;Pauli Virtanen;2013-10-08 00:12:10 +0300;TST: linalg: add slightly bigger test case + don't catch KeyboardInterrupt

==

numpy/linalg/tests/test_linalg.py
==================
0f51682;Pauli Virtanen;2013-10-07 22:24:53 +0300;MAINT: linalg: strip out unused gufuncs_linalg code
Some of the functions removed were untested, and apparently did not
function correctly (cholesky_up, inner1d, maybe more).

==

numpy/linalg/_gufuncs_linalg.py
numpy/linalg/tests/test_gufuncs_linalg.py
numpy/linalg/umath_linalg.c.src
==================
bbfe9a4;Pauli Virtanen;2013-10-07 21:22:34 +0300;BUG: linalg: fix eigvalsh return type (always real-valued)

==

numpy/linalg/linalg.py
==================
694ce0e;Pauli Virtanen;2013-10-07 21:08:59 +0300;BUG: linalg: use correct BLAS incx convention in xCOPY

==

numpy/linalg/umath_linalg.c.src
==================
f2ce635;Pauli Virtanen;2013-10-07 20:51:31 +0300;TST: linalg: add more comprehensive test cases for linalg funcs
Also remove TestCase subclassing, so that generator tests work.  Also
fix bugs in the existing generator tests that were not actually run
previously.

==

numpy/linalg/tests/test_linalg.py
==================
ec3603f;Charles Harris;2013-10-06 09:25:00 -0700;Merge pull request #3872 from charris/fix-sunpro-issue
BUG: Include sunmath.h in npy_math.h when __SUNPRO_CC defined.
==
==================
15bb858;Charles Harris;2013-10-06 09:54:48 -0600;BUG: Include sunmath.h in npy_math.h when __SUNPRO_CC defined.
The include is needed for isinf.

Closes #3871.

==

numpy/core/include/numpy/npy_math.h
==================
6c18991;Yaron de Leeuw;2013-10-06 09:15:39 +0300;STY: pep8 for npyio continued
Two slight style modifications in npyio, regarding line length.

==

numpy/lib/npyio.py
==================
7457f15;Charles Harris;2013-10-05 17:37:01 -0700;Merge pull request #3869 from charris/tweak-1.8-notes
DOC: Tweak the 1.8.0 release notes.
==
==================
4c4d517;seberg;2013-10-05 13:59:49 -0700;Merge pull request #3769 from juliantaylor/percentile-compat
BUG: ensure percentile has same output structure as in 1.8
==
==================
635181b;Charles Harris;2013-10-05 12:51:48 -0600;DOC: Tweak the 1.8.0 release notes.
Add the new nan functions and linear algebra gufuncs to highlights.
Tweak some rst formatting.

==

doc/release/1.8.0-notes.rst
==================
2df7b8c;Charles Harris;2013-10-05 11:40:14 -0700;Merge pull request #3868 from charris/forwardport-1.9-3859
Forwardport 1.9 3859
==
==================
488930a;Julian Taylor;2013-10-03 20:12:31 +0200;DOC: add highlights to release notes and rewrite and move some sections
closes gh-3842, gh-3843

==

doc/release/1.8.0-notes.rst
==================
e8f9d6d;Julian Taylor;2013-10-03 20:12:43 +0200;DOC: fix signature of NpyIter_GetIterNext in capi doc

==

doc/source/reference/c-api.iterator.rst
==================
0cfa4ed;Charles Harris;2013-10-05 09:03:37 -0700;Merge pull request #3866 from charris/refactor-1.9-nanfunctions
Refactor 1.9 nanfunctions
==
==================
2f77e1e;Charles Harris;2013-10-04 12:48:24 -0600;BUG: Make ndarray.{var, std} work for scalars.

==

numpy/core/_methods.py
numpy/core/tests/test_numeric.py
==================
9c7e6e3;Charles Harris;2013-10-04 13:49:33 -0600;BUG: Refactor nanfunctions to behave as agreed on for 1.9.
    Deal with subclasses of ndarray, like pandas.Series and matrix.

        Subclasses may not define the new keyword keepdims or deal
        gracefully with ufuncs in all their forms. This is solved by
        throwing the problem onto the np.sum, np.any, etc. functions
        that have ugly hacks to deal with the problem.

    Settle handling of all-nan slices.

        nanmax, nanmin -- Raise warning, return NaN for slice.
        nanargmax, nanargmin -- Raise ValueError.
        nansum -- Return 0 for slice.
        nanmean, nanvar, nanstd -- Raise warning, return NaN for slice.

    Make NaN functions work for scalar arguments.

        This may seem silly, but it removes a check for special cases.

    Update tests

        Deal with new all-nan handling.
        Test with matrix class as example of subclass without keepdims.
        Test with scalar arguments.

    Fix nanvar issue reported in #3860.

    Closes #3860 #3850

==

numpy/lib/nanfunctions.py
numpy/lib/tests/test_nanfunctions.py
==================
c2dc2cd;Charles Harris;2013-10-04 13:27:39 -0700;Merge pull request #3865 from rgommers/matrixprop-docs
DOC: make docstrings of matrix properties (.T, .H, .I, .A, .A1) work.
==
==================
cc99961;Ralf Gommers;2013-10-04 12:11:41 +0200;DOC: make docstrings of matrix properties (.T, .H, .I, .A, .A1) work.
Closes gh-1939.

==

numpy/matrixlib/defmatrix.py
==================
0950739;Julian Taylor;2013-09-20 21:11:20 +0200;BUG: ensure percentile has same output structure as in 1.8
percentile returned scalars and lists of arrays in 1.8
adapt new percentile to return scalar and arrays with q dimension first
for compatibility.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
76db3ff;Julian Taylor;2013-10-03 23:01:27 +0200;MAINT: accept NULL in NpyIter_Deallocate and remove redundant NULL checks
Deallocation should just do nothing if provided a NULL pointer nditer
deletion broke this convention.
Removed many redundant NULL checks for various deallocation functions
used in numpy, they all end up in standard C free or PyMem_Free which
are both NULL safe.

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/nditer_constr.c
numpy/core/src/multiarray/nditer_pywrap.c
numpy/core/src/umath/ufunc_object.c
numpy/lib/src/_compiled_base.c
==================
f665c61;njsmith;2013-10-02 11:11:37 -0700;Merge pull request #3851 from juliantaylor/median-subclass
BUG: preserve ndarray subclasses in median
==
==================
e6f0c90;Julian Taylor;2013-10-01 20:02:03 +0200;BUG: preserve ndarray subclasses in median
closes gh-3846

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
d231626;Charles Harris;2013-10-02 09:37:05 -0700;Merge pull request #3848 from seberg/solve_0k
BUG: Allos linalg.solve to handle zero equations.
==
==================
88f35b7;Charles Harris;2013-10-01 19:10:49 -0700;Merge pull request #3841 from juliantaylor/rnotes-master
update 1.9 release notes and sync 1.8 notes with maintenance branch
==
==================
069ecae;Sebastian Berg;2013-10-01 12:44:48 +0200;BUG: Allos linalg.solve to handle zero equations.
This was previously correct, but the special case was missing
since the gufunc code cannot handle it.

==

numpy/linalg/linalg.py
numpy/linalg/tests/test_linalg.py
==================
a1fe302;Julian Taylor;2013-09-30 21:08:52 +0200;DOC: minor rewording of partition note

==

doc/release/1.8.0-notes.rst
==================
6e22646;Julian Taylor;2013-09-30 21:05:36 +0200;DOC: update percentile release notes and add np.array improvement

==

doc/release/1.9.0-notes.rst
==================
80b9c20;Julian Taylor;2013-09-30 20:25:47 +0200;DOC: move support for large files to features
its nothing you should need to worry about when porting to 1.8

==

doc/release/1.8.0-notes.rst
==================
399db09;Julian Taylor;2013-09-30 20:25:03 +0200;DOC: mention new comparison runtime warnings in release notes

==

doc/release/1.8.0-notes.rst
==================
74abfa2;Charles Harris;2013-09-30 10:18:36 -0700;Merge pull request #3838 from juliantaylor/null-fix
MAINT: fix another wrong NULL check
==
==================
ebe4ce7;Julian Taylor;2013-09-30 18:37:47 +0200;MAINT: fix another wrong NULL check
silences cppcheck error, not a bug as the only caller checks the python
error.

==

numpy/core/src/multiarray/ctors.c
==================
0e195ab;Charles Harris;2013-09-29 15:27:49 -0700;Merge pull request #3826 from charris/add-oldnumeric-numarray-to_init
MAINT: Make useless imports of oldnumeric and numarray safe.
==
==================
e051ff1;Charles Harris;2013-09-29 11:35:08 -0700;Merge pull request #3832 from juliantaylor/static-issues
BUG: fix small issues found with cppcheck
==
==================
34fc33e;Julian Taylor;2013-09-29 20:09:24 +0200;BUG: fix small issues found with cppcheck
uninitialized use in _strided_to_strided_one_to_n_with_finish
wrong error NULL checks in PyArray_MapIterNew and einsum_sub_op_from_str
double free and memleak in umath_linalg.c.src init_@lapack_func@

==

numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/linalg/umath_linalg.c.src
==================
e765197;Yaron de Leeuw;2013-09-29 09:51:18 +0300;STY: pep8 for npyio
Various pep8 fixes for npyio.py
Also reorganized the imports, and removed the unnecessary (I hope)
`_string_like = _is_string_like` statement.

==

numpy/lib/npyio.py
==================
3a6c629;Charles Harris;2013-09-28 17:34:33 -0700;Merge pull request #3827 from pv/fix-gh-3796
BUG: core: consider both C and F order buffers as contiguous
==
==================
3820f9e;Pauli Virtanen;2013-09-28 20:43:40 +0300;BUG: core: consider both C and F order buffers as contiguous

==

numpy/core/src/multiarray/conversion_utils.c
numpy/core/tests/test_regression.py
==================
9b94699;Charles Harris;2013-09-28 11:31:16 -0600;MAINT: Make useless imports of oldnumeric and numarray safe.
The oldnumeric and numarray packages were removed in numpy 1.9, but
some packages, e.g. scipy, import them even though they are not used.
This defines both to the string 'removed' in numpy/__init__.py, which
avoids an import error.

==

numpy/__init__.py
==================
33cd94b;Julian Taylor;2013-09-28 08:47:32 -0700;Merge pull request #3821 from NextThought/master
Installation fails with NameError if SandboxViolation is raised
==
==================
8015369;Jason Madden;2013-09-28 10:24:37 -0500;Do not fail with NameError if SandboxViolation is raised

==

numpy/distutils/system_info.py
==================
19d344b;Julian Taylor;2013-09-28 16:54:04 +0200;TST: improve test speed
move slow test_memmap_roundtrip to slow tests
decrease excessively large array size used in np.sin(x) compuation
TestInterp.test_if_len_x_is_small, the code has no special path for this
large size differences.

==

numpy/lib/tests/test_format.py
numpy/lib/tests/test_function_base.py
==================
58d7900;Julian Taylor;2013-09-28 16:30:37 +0200;ENH: reduce calls to npy_is_aligned in _IsAligned
one can just bitwise_or the memory and all strides and call npy_is_aligned on
that to get the same result.

==

numpy/core/src/multiarray/common.c
==================
1475cfa;Julian Taylor;2013-09-28 16:19:56 +0200;ENH: speed up intp multiply overflow check
Avoid expensive division by checking against half size of the result first.
Speeds up PyArray_NewFromDescr by a factor of two according to perf.
Could still be further improved by making use of cpu overflow flags, e.g. via
clangs __builtin_mul_with_overflow or using gccs __int128 type.

==

numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/multiarraymodule.c
==================
a1da193;Charles Harris;2013-09-28 07:57:28 -0700;Merge pull request #3638 from charris/remove-numarray-and-oldnumeric
Remove numarray and oldnumeric
==
==================
02e85a5;Ralf Gommers;2013-09-28 06:45:07 -0700;Merge pull request #3818 from lxbarth/master
BUG: fix platform detection for intel platforms
==
==================
72accd2;Alex Barth;2013-09-28 09:36:01 -0400;Fix platform detection for intel platform where get_platform() returns a string ending in x86_64, for instance 'macosx-10.8-x86_64'.

==

numpy/distutils/system_info.py
==================
24df94c;Charles Harris;2013-09-27 16:52:40 -0700;Merge pull request #3807 from juliantaylor/gcc-check
BUG: fix wrong gcc version check
==
==================
282801c;Charles Harris;2013-09-27 13:55:01 -0700;Merge pull request #3806 from njsmith/fix_cancasttypeto_deprecation
[fix] Check for errors in PyArray_CanCastTypeto DEPRECATE
==
==================
da8f1ff;Nathaniel J. Smith;2013-09-27 20:29:14 +0100;[fix] If we fail to raise an error, at least dump something to the console

==

numpy/core/src/multiarray/convert_datatype.c
numpy/core/tests/test_ufunc.py
==================
247b450;Julian Taylor;2013-09-27 20:04:59 +0200;BUG: fix wrong gcc version check
probably irrelevant by now, but emits a warning during compilation.

==

numpy/distutils/command/autodist.py
==================
46fbdc5;Nathaniel J. Smith;2013-09-27 18:12:52 +0100;[fix] Check for errors in PyArray_CanCastTypeto DEPRECATE
If a user had set warnings to raise errors, then this DEPRECATE would
leave us with an unpropagated exception and cause havoc downstream.

Unfortunately there is no way to propagate an exception from here, so
we just have to throw it away :-(. But this is still better than the
alternative...

==

numpy/core/src/multiarray/convert_datatype.c
numpy/core/tests/test_ufunc.py
==================
6fbbd7f;Charles Harris;2013-09-26 20:30:57 -0700;Merge pull request #3790 from juliantaylor/test-speedup
TST: speed up some very slow tests
==
==================
369f301;Charles Harris;2013-09-26 20:17:50 -0700;Merge pull request #3789 from juliantaylor/check-alignment
MAINT: check alignment of copy arguments in debug mode
==
==================
67b5392;Charles Harris;2013-09-26 20:08:59 -0700;Merge pull request #3775 from jarondl/doc-function_base-pep8
STY: make function_base.py pep8 compatible
==
==================
21d99a6;Charles Harris;2013-09-26 19:38:37 -0700;Merge pull request #3802 from juliantaylor/bool-check
BUG: do a boolean check on casting bool to other types
==
==================
856b544;Charles Harris;2013-09-26 15:52:23 -0700;Merge pull request #3800 from juliantaylor/fix-long-hash
BUG: fix hashing of long integers under python3
==
==================
46072bd;Julian Taylor;2013-09-26 22:31:15 +0200;BUG: do a boolean check on casting bool to other types
avoids some issues of booleans coming from external buffers that may not
only contain 0 or 1.
closes #3801.

==

numpy/core/src/multiarray/lowlevel_strided_loops.c.src
numpy/core/tests/test_multiarray.py
==================
74eac4e;Julian Taylor;2013-09-25 23:28:55 +0200;BUG: fix hashing of long integers under python3
python3 long_hash is more complex than int_hash so instead of copying
into numpy call it via the Python capi.
Same for long long for wich the numpy hash function is not correct with
python 2.7 on i386.
Will be slower but doesn't need adapting each timy python changes.
closes #3793

==

numpy/core/src/multiarray/scalartypes.c.src
numpy/core/tests/test_multiarray.py
==================
5da4888;seberg;2013-09-26 10:25:53 -0700;Merge pull request #3799 from esc/fix_typos_in_npyio.py
fix two typos in npyio.py
==
==================
3c18714;Valentin Haenel;2013-09-26 18:33:13 +0200;fix two typos in npyio.py

==

numpy/lib/npyio.py
==================
79a1e7a;Charles Harris;2013-09-25 15:41:11 -0700;Merge pull request #3788 from seberg/object-copy-refs
BUG: INCREF before DECREF when copying object arrays.
==
==================
bab8e8c;Charles Harris;2013-09-25 15:24:59 -0700;Merge pull request #3794 from perimosocordiae/patch-1
DOC: adding 'Returns' section to `empty` function docstring
==
==================
846e320;njsmith;2013-09-25 14:40:07 -0700;Merge pull request #3795 from seberg/init_ufunc_at_needapi
BUG: ufunc_at needs_api requires init to 0
==
==================
a2b3ad1;Sebastian Berg;2013-09-25 22:54:50 +0200;BUG: ufunc_at needs_api requires init to 0
as reported by valgrind...

==

numpy/core/src/umath/ufunc_object.c
==================
0c71afc;CJ Carey;2013-09-25 16:29:09 -0400;DOC: adding 'Returns' section to `empty` function
This matches the format of related functions like `empty_like` and `zeros`.
==

numpy/add_newdocs.py
==================
848949a;Julian Taylor;2013-09-23 21:16:54 +0200;MAINT: check alignment of copy arguments in debug mode
Allows catching unaligned access issues on x86.
Triggers TestRegression.test_complex64_alignment if the fix is reverted.

Also remove some dead code.

==

numpy/core/src/multiarray/lowlevel_strided_loops.c.src
==================
99ee78a;njsmith;2013-09-24 00:47:47 -0700;Merge pull request #3757 from dimasad/issue-3017-fix
BUG: fix #3017 Inconsistency in indexing 0-d arrays with Ellipsis.
==
==================
ec50fb1;Yaron de Leeuw;2013-09-24 09:49:06 +0300;STY: error and warning formatting on 'function_base.py'

==

numpy/lib/function_base.py
==================
a38fee9;Yaron de Leeuw;2013-09-24 09:40:09 +0300;STY: Error and warning newline standardization in function_base.py
Continueing the pep8 effort, adds newline afer each `Error(`
and tries to wrap correctly.

==

numpy/lib/function_base.py
==================
79d3a94;Julian Taylor;2013-09-24 00:50:16 +0200;TST: delay error message building to failures in assert_almost_equal
improves test performance by about 15%

==

numpy/testing/utils.py
==================
2657098;Julian Taylor;2013-09-23 23:50:38 +0200;TST: speed up some very slow tests
Minimize alignment combinations to useful set with SSE, might need to
be revisited if we add AVX support.
Move large data test_zeros test to slow and drop the extremely slow
count_nonzero() call.
Rename gen_alignment_data to _gen_alignment_data (private) to reserve
right to change it, e.g. add min_size.

==

numpy/core/tests/test_multiarray.py
numpy/core/tests/test_scalarmath.py
numpy/core/tests/test_umath.py
numpy/testing/utils.py
==================
3beebbc;Charles Harris;2013-08-18 18:40:28 -0600;DEP: Remove deprecated modules numarray and oldnumeric.
They were deprecated in 1.8 and scheduled for removal in 1.9.

Closes #3637.

==

numpy/numarray/__init__.py
numpy/numarray/_capi.c
numpy/numarray/alter_code1.py
numpy/numarray/alter_code2.py
numpy/numarray/compat.py
numpy/numarray/convolve.py
numpy/numarray/fft.py
numpy/numarray/functions.py
numpy/numarray/image.py
numpy/numarray/include/numpy/arraybase.h
numpy/numarray/include/numpy/cfunc.h
numpy/numarray/include/numpy/ieeespecial.h
numpy/numarray/include/numpy/libnumarray.h
numpy/numarray/include/numpy/numcomplex.h
numpy/numarray/include/numpy/nummacro.h
numpy/numarray/linear_algebra.py
numpy/numarray/ma.py
numpy/numarray/matrix.py
numpy/numarray/mlab.py
numpy/numarray/nd_image.py
numpy/numarray/numerictypes.py
numpy/numarray/random_array.py
numpy/numarray/session.py
numpy/numarray/setup.py
numpy/numarray/ufuncs.py
numpy/numarray/util.py
numpy/oldnumeric/__init__.py
numpy/oldnumeric/alter_code1.py
numpy/oldnumeric/alter_code2.py
numpy/oldnumeric/array_printer.py
numpy/oldnumeric/arrayfns.py
numpy/oldnumeric/compat.py
numpy/oldnumeric/fft.py
numpy/oldnumeric/fix_default_axis.py
numpy/oldnumeric/functions.py
numpy/oldnumeric/linear_algebra.py
numpy/oldnumeric/ma.py
numpy/oldnumeric/matrix.py
numpy/oldnumeric/misc.py
numpy/oldnumeric/mlab.py
numpy/oldnumeric/precision.py
numpy/oldnumeric/random_array.py
numpy/oldnumeric/rng.py
numpy/oldnumeric/rng_stats.py
numpy/oldnumeric/setup.py
numpy/oldnumeric/tests/test_oldnumeric.py
numpy/oldnumeric/tests/test_regression.py
numpy/oldnumeric/typeconv.py
numpy/oldnumeric/ufuncs.py
numpy/oldnumeric/user_array.py
==================
2a1705f;Charles Harris;2013-08-18 19:51:59 -0600;DEP, DOC: Document removal of oldnumeric and numarray in release notes.

==

doc/release/1.9.0-notes.rst
==================
5d76b01;Charles Harris;2013-08-18 19:49:55 -0600;DEP, DOC: Undocument numarray and numeric.
Mention that they were removed in 1.9.0.

==

doc/source/reference/routines.numarray.rst
doc/source/reference/routines.oldnumeric.rst
==================
4974823;Charles Harris;2013-08-18 19:42:33 -0600;DEP, MAINT: Copy info function from numarray.
The numarray info function is called by lib.utils.info. Rename it
to _info and copy into lib/utils.py. Some modifications are made
as it only needs to support numpy.

==

numpy/lib/utils.py
==================
3512346;Charles Harris;2013-08-18 19:47:56 -0600;DEP, MAINT: Remove references to numeric and numarray.
This covers those locations that either import or build numarray
or numeric.

==

numpy/bento.info
numpy/core/setup.py
numpy/core/tests/test_regression.py
numpy/distutils/misc_util.py
numpy/lib/tests/test_regression.py
numpy/setup.py
==================
ed7e9ab;Sebastian Berg;2013-09-23 19:38:20 +0200;BUG: INCREF before DECREF when copying object arrays.
Only the change in dtype_transfer actually seems to be
related to the simple np.copyto(a, a) bug, when a is a scalar
object array.
It seemed however safer to me, to generally turn around the
logic, even if it may not be necessary and in one place
requires an extra temporary variable.

Closes gh-3787

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/tests/test_regression.py
==================
0a38962;Charles Harris;2013-09-23 06:02:54 -0700;Merge pull request #3766 from rgommers/fix-bento-build
Fix bento build
==
==================
372d9ca;Charles Harris;2013-09-22 13:41:10 -0700;Merge pull request #3781 from seberg/test_multiarray-indent
TST: wrong indent in multiarray tests
==
==================
c4b01c9;Sebastian Berg;2013-09-22 22:22:21 +0200;TST: wrong indent in multiarray tests

==

numpy/core/tests/test_multiarray.py
==================
094ebf7;Dimas Abreu Dutra;2013-09-22 16:19:42 -0300;TST: added test for issue #3017.
Also changed style to please numpy developers.

==

numpy/core/src/multiarray/mapping.c
numpy/core/tests/test_indexing.py
==================
6f9a412;Charles Harris;2013-09-22 12:16:06 -0700;Merge pull request #3772 from juliantaylor/sse-configure-check
BUG: make checking for sse intrinsics more robust
==
==================
27e931f;Charles Harris;2013-09-22 11:20:50 -0700;Merge pull request #3779 from pv/pep3118-fastpath
ENH: core: add a fast path for PEP3118 buffer string parsing
==
==================
b7aec60;Pauli Virtanen;2013-09-22 20:47:38 +0300;ENH: core: add a fast path for PEP3118 buffer string parsing
The call back to Python numpy.core._internal._dtype_from_pep3118 is an
unnecessary large overhead for the most common case, when the buffer
passed in has a simple non-composite type.

This commit adds a fast path for the simple case.

==

numpy/core/src/multiarray/buffer.c
numpy/core/tests/test_multiarray.py
==================
be9e0f0;Charles Harris;2013-09-22 11:42:08 -0600;Merge branch 'gh-3754'
* gh-3754:
  fix indentation and nitpicks
  Moved test_multiarra_relational_operators to test_multiarray.py
  scalar relational operation
  ENH: Added test cases for relation operation. To ensure behaviour of int. There is a need to add test case which ensure and maintain the behaviour of integer. As per pr #3567, which speed up integer scalar's operations by avoiding the conversion of integer to NumPy Scalar.

==
==================
3a1f2b2;Arink Verma;2013-09-19 08:38:57 +0530;fix indentation and nitpicks

==

numpy/core/tests/test_multiarray.py
numpy/core/tests/test_scalarmath.py
==================
2a303f6;Arink Verma;2013-09-17 23:37:32 +0530;Moved test_multiarra_relational_operators to test_multiarray.py

==

numpy/core/tests/test_multiarray.py
numpy/core/tests/test_scalarmath.py
==================
764274f;Arink Verma;2013-09-17 05:44:56 +0530;scalar relational operation

==

numpy/core/tests/test_scalarmath.py
==================
29c5325;Arink Verma;2013-09-16 00:31:33 +0530;ENH: Added test cases for relation operation. To ensure behaviour of int. There is a need to add test case which ensure and maintain the behaviour of integer. As per pr #3567, which speed up integer scalar's operations by avoiding the conversion of integer to NumPy Scalar.

==

numpy/core/tests/test_scalarmath.py
==================
0b96b2d;Charles Harris;2013-09-22 10:27:52 -0700;Merge pull request #3767 from juliantaylor/mom5-improve
Mom5 selection improvements
==
==================
fffeee6;Charles Harris;2013-09-22 08:47:05 -0700;Merge pull request #3777 from pv/ufunc-override-fix
BUG: core: don't ignore raised exceptions in __numpy_ufunc__ handler
==
==================
f42549f;Pauli Virtanen;2013-09-22 17:25:35 +0300;REF: core: clean up PyUFunc_CheckOverride
Move argument normalization out from the inner loop, reduce complexity.
Add error checks.

==

numpy/core/src/private/ufunc_override.h
==================
acf72ea;Pauli Virtanen;2013-09-22 17:13:37 +0300;BUG: core: don't ignore raised exceptions in __numpy_ufunc__ handler

==

numpy/core/src/private/ufunc_override.h
numpy/core/tests/test_umath.py
==================
8707b0e;Ralf Gommers;2013-09-22 13:19:43 +0200;DOC: [bento] document that adding optional GCC performance improvements is TODO
[ci skip]

==

numpy/core/bscript
==================
c1e38dd;Yaron de Leeuw;2013-09-22 08:54:19 +0300;STY: make function_base.py pep8 compatible
This makes function_base.py almost pep8 compatible.
ALSO, removes the Set import which is unneeded since python 2.4,
and organises the import statements.

==

numpy/lib/function_base.py
==================
1354437;njsmith;2013-09-21 15:36:34 -0700;Merge pull request #3773 from charris/enable-f2py-tests
ENH: Add gfortran to travis.yml configuration to enable f2py tests.
==
==================
be45f33;Charles Harris;2013-09-21 16:11:47 -0600;ENH: Add gfortran to travis.yml configuration to enable f2py tests.

==

.travis.yml
==================
9073214;Charles Harris;2013-09-21 14:24:27 -0700;Merge pull request #3753 from jarondl/fix-doc-savetxt
DOC: Fixes in the npyio documentation
==
==================
fd2e110;Julian Taylor;2013-09-21 21:16:36 +0200;BUG: make checking for sse intrinsics more robust
check for two intrinsics from [ex]mmintrin.h instead of only checking
the existance of the headers.
E.g. mingw 4.2 emmintrin.h can be included even if SSE2 is disabled.
closes #3760

==

numpy/core/include/numpy/npy_common.h
numpy/core/setup.py
numpy/core/setup_common.py
numpy/core/src/multiarray/einsum.c.src
numpy/core/src/umath/loops.c.src
numpy/core/src/umath/simd.inc.src
==================
9b7beb6;Yaron de Leeuw;2013-09-21 19:09:44 +0300;DOC STY: make npyio docstrings less than 80 chars

==

numpy/lib/npyio.py
==================
fde3dee;Charles Harris;2013-09-19 19:09:40 -0700;Merge pull request #3752 from pv/doc-some-xref
DOC: improve __numpy_ufunc__ documentation
==
==================
15572e9;Julian Taylor;2013-09-19 13:39:45 -0700;Merge pull request #3658 from jjhelmus/percentile_enh_new
ENH: percentile function with additional parameters and vectorization
==
==================
eb8991e;Julian Taylor;2013-09-19 22:23:14 +0200;ENH: remove an always true conditional
v[1] < v[2] is guaranteed by the swapping a few lines above

==

numpy/core/src/npysort/selection.c.src
==================
afd2e13;Julian Taylor;2013-09-19 22:14:10 +0200;TST: exercise median of median of 5 code by using a median of 3 killer dataset

==

numpy/core/tests/test_multiarray.py
==================
df14561;Charles Harris;2013-09-19 12:24:47 -0700;Merge pull request #3765 from charris/forward-port-3761
BUG: Fix issue with PR #3491
==
==================
fddf1e0;Ralf Gommers;2013-09-19 21:11:10 +0200;BLD: add new test extensions (rational, struct_ufunc, operand_flag) to Bento build.

==

numpy/core/bento.info
==================
6418925;Ralf Gommers;2013-09-19 20:20:08 +0200;BLD: fix Bento build.
Issue was introduced with PR-3524, the ufunc override stuff.

==

numpy/core/blasdot/_dotblas.c
numpy/core/bscript
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/private/ufunc_override.h
==================
b893154;Jay Bourque;2013-09-18 09:47:40 -0500;BUG: Fix issue with PR #3491
Don't convert unicode string to ascii string before getting byte length.
Also, get length of non string type as ascii or unicode depending on
output string type.

==

numpy/core/src/multiarray/ctors.c
numpy/core/tests/test_api.py
==================
61e0f2b;Dimas Abreu Dutra;2013-09-16 23:59:47 -0300;BUG: fix #3017 Inconsistency in indexing 0-d arrays with Ellipsis.

==

numpy/core/src/multiarray/mapping.c
==================
0c857a8;Ralf Gommers;2013-09-16 23:42:56 +0200;MAINT: update release scripts for building OS X binaries.
Works with Python 3.x now that bdist_mpkg is ported (thanks @matthew-brett).

==

pavement.py
release.sh
tools/numpy-macosx-installer/new-create-dmg
==================
4f1f9d2;seberg;2013-09-16 11:24:00 -0700;Merge pull request #3482 from jjhelmus/linspace_enh
ENH: Add dtype parameter to linspace and logspace functions.
==
==================
9316110;Jonathan Helmus;2013-09-16 10:44:26 -0600;TST: note on overwrite_input parameter in percentile
* added note that `overwrite_input` has not effect when `a` is not
  an array in the percentile function.
* added unit test to verify that no error is raised when `a` is not
  an array and `overwrite_input` is True.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
9dd212c;Jonathan Helmus;2013-09-16 10:32:25 -0600;MAINT: changed 'closest' interpolation to 'nearest'

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
3a4fbed;Yaron de Leeuw;2013-09-15 21:03:53 +0300;small typo

==

numpy/lib/npyio.py
==================
688df31;Yaron de Leeuw;2013-09-15 20:49:35 +0300;Fixes in the npyio documentation
Fixes the "see also" section of savetxt, which
described savez as compressing (closes #587 ). Also
replaces all occurences of .npy and .npz to use double backticks.
Some had, some did not, and some had " symbols.

==

numpy/lib/npyio.py
==================
1840463;Pauli Virtanen;2013-09-15 15:58:40 +0300;DOC: improve __numpy_ufunc__ documentation
Cross-reference it from Ufunc documentation and mention the version it
was added.

==

doc/source/reference/arrays.classes.rst
doc/source/reference/ufuncs.rst
==================
6ce65d8;Charles Harris;2013-09-14 14:24:04 -0700;Merge pull request #3746 from charris/fix-nansum-documentation
DOC: Make documentation of nansum current with 1.9.
==
==================
4d53e8b;Charles Harris;2013-09-14 11:46:30 -0700;Merge pull request #3747 from cgohlke/py_hash_t
Fix issue #3743: Hash changed signature in Python 3.3
==
==================
997fe5b;Christoph Gohlke;2013-09-14 11:27:22 -0700;BUG: use correct type for hash values
As of Python 3.2 hash values are of type Py_hash_t. Previous versions use C long.

==

numpy/core/include/numpy/npy_3kcompat.h
numpy/core/src/multiarray/hashdescr.c
numpy/core/src/multiarray/hashdescr.h
numpy/core/src/multiarray/scalartypes.c.src
==================
4f535ff;Charles Harris;2013-09-14 11:33:19 -0600;DOC: Make documentation of nansum current with 1.9.
Simply state that Numpy versions < 1.9 returned nan instead of zero
for the sum of empty slices.

==

numpy/lib/nanfunctions.py
==================
f88a225;Charles Harris;2013-09-14 10:07:40 -0700;Merge pull request #3700 from larsmans/static-loggam
MAINT: make loggam static in random kit
==
==================
0262a60;Charles Harris;2013-09-14 07:01:46 -0700;Merge pull request #3741 from juliantaylor/doc-update
DOC: add isclose and partition to reference and link some docs
==
==================
d4ef9b1;Julian Taylor;2013-09-14 14:53:26 +0200;DOC: add isclose and partition to reference and link some docs
also drop sometrue/alltrue link, its equivalent to any/all.

==

doc/source/reference/routines.logic.rst
doc/source/reference/routines.sort.rst
numpy/add_newdocs.py
numpy/core/fromnumeric.py
numpy/core/numeric.py
==================
9aed31a;Jonathan Helmus;2013-09-13 17:00:27 -0500;TST: additional test for percentile

==

numpy/lib/tests/test_function_base.py
==================
a7fc781;Jonathan Helmus;2013-09-13 16:57:17 -0500;DOC: changes to scoreatpercentile docstring, doc test now passes

==

numpy/lib/function_base.py
==================
4a084a0;Jonathan Helmus;2013-09-05 11:20:56 -0500;MAINT: cleaning up percentile function.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
07cbe99;Jonathan Helmus;2013-08-28 20:40:17 -0500;ENH: percentile function with additional parameters and vecorization
The percentile function was enhanced by adding limit and interpolation
parameters to give it similar functionality to SciPy's stats.scoreatpercentile
function.  In addition the function was vecorized along q and rewritten to
use the partition method for better performance.

==

doc/release/1.9.0-notes.rst
numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
f8cdbba;Jonathan Helmus;2013-06-28 12:19:25 -0500;ENH: Add dtype parameter to linspace and logspace functions.
Many NumPy functions such as arange allow users to define the dtype of the
returned type with a dtype parameter.  This adds this same functionality
to the logspace and linspace functions.

==

doc/release/1.9.0-notes.rst
numpy/core/function_base.py
numpy/core/tests/test_function_base.py
==================
3e80e2a;Charles Harris;2013-09-13 14:12:20 -0700;Merge pull request #3736 from charris/add-savez_compressed-to-docs
DOC: Make savez_compressed show up in the documentation.
==
==================
de29fcb;Charles Harris;2013-09-13 14:34:10 -0600;DOC: Make savez_compressed show up in the documentation.
Closes #3708.

==

doc/source/reference/routines.io.rst
==================
f5fceeb;Charles Harris;2013-09-13 12:22:38 -0700;Merge pull request #3725 from juliantaylor/fix-subarray-zeros
BUG: fix zero initialization with subarray dtypes
==
==================
4d1c2d4;Julian Taylor;2013-09-12 11:28:36 +0200;BUG: fix zero initialization with subarray dtypes
closes #3724

==

numpy/core/src/multiarray/ctors.c
numpy/core/tests/test_multiarray.py
==================
ad3f601;Charles Harris;2013-09-13 09:21:04 -0700;Merge pull request #3723 from charris/workaround-dgeqrf-bug
MAINT: Make the qr raw mode test independent of the LAPACK library.
==
==================
f1f0842;Charles Harris;2013-09-12 08:56:27 -0700;Merge pull request #3728 from juliantaylor/f2py-negative-refcount
BUG: f2py, fix decref on wrong object
==
==================
26ade56;Julian Taylor;2013-09-12 17:42:55 +0200;BUG: f2py, fix decref on wrong object
missing brackets causes decref on an wrong object.
shows itself as abort with negative refcount in test_callback using
python-dbg.

==

numpy/f2py/cfuncs.py
==================
52f58ea;Charles Harris;2013-09-11 18:50:32 -0600;MAINT: Make the qr raw mode test independent of the LAPACK library.
The qr factorization is not unique and the values returned by the raw
mode may differ between LAPACK versions. Consequently, the results
cannot be checked against known values.

Closes #3703.

==

numpy/linalg/tests/test_linalg.py
==================
f297de0;njsmith;2013-09-12 03:44:00 -0700;Merge pull request #3726 from juliantaylor/dbg-fixes
Dbg fixes
==
==================
5262478;Julian Taylor;2013-09-12 12:05:54 +0200;BUG: fix bad alignment asserts
if the arrays are smaller than a vector they don't need to be aligned.

==

numpy/core/src/umath/simd.inc.src
==================
1dd3778;Julian Taylor;2013-09-12 12:04:36 +0200;BUG: ensure raising of invalid on bad complex powers
put inf - inf into a volatile variable so it is not optimized away by
compilers.

==

numpy/core/src/umath/funcs.inc.src
numpy/core/tests/test_umath.py
==================
5d2e8a0;Charles Harris;2013-09-11 11:11:13 -0700;Merge pull request #3720 from charris/refactor-test_xerbla
MAINT: Refactor test_xerbla to hide printed error messages.
==
==================
fa25cf7;Charles Harris;2013-09-10 12:21:52 -0600;MAINT: Refactor test_xerbla to hide printed error messages.
Combine the xerbla override tests with the previous _is_xerbla_safe
decorator. The xerbla checks are then made in a forked process where the
outputs are closed so that if xerbla prints a message it does not
appear.

It would be nice to figure out a Windows version of this test.

Closes #3704. Closes #3687.

==

numpy/linalg/tests/test_linalg.py
==================
dfd9f5f;Charles Harris;2013-09-09 17:44:38 -0700;Merge pull request #3715 from seberg/ndindex-0size
BUG: Fix 0-sized ndindex
==
==================
72d2382;njsmith;2013-09-09 13:43:15 -0700;Merge pull request #3696 from juliantaylor/copy-array-create
ENH: copy ndarrays if they are encountered in setArrayFromSequence
==
==================
906a884;Sebastian Berg;2013-09-09 22:41:03 +0200;BUG: Fix 0-sized ndindex
The zerosize_ok flag to nditer was missing, so that it did not
allow for 0-sized iteration.

Closes gh-3714

==

numpy/lib/index_tricks.py
numpy/lib/tests/test_index_tricks.py
==================
b768db8;Charles Harris;2013-09-09 09:19:36 -0700;Merge pull request #3709 from charris/update-conversion_utils_h
BUG: PyArray_SelectkindConverter should be in conversion_utils.h.
==
==================
8233626;Charles Harris;2013-09-09 09:37:29 -0600;BUG: PyArray_SelectkindConverter should be in conversion_utils.h.
Also include numpy/ndarraytypes.h, although this seems not needed in
practice.

==

numpy/core/src/multiarray/conversion_utils.h
==================
c9b0611;Charles Harris;2013-09-08 19:47:21 -0700;Merge pull request #3701 from cgohlke/patch-2
ENH: add support for Python 3.4 ast.NameConstant
==
==================
8edccea;Christoph Gohlke;2013-09-08 17:52:03 -0700;TST: add test for Python 3.4 _ast.NameConstant

==

numpy/lib/tests/test_utils.py
==================
0b71913;Christoph Gohlke;2013-09-08 16:29:30 -0700;ENH: add support for Python 3.4 ast.NameConstant

==

numpy/lib/utils.py
==================
d53d0b2;Lars Buitinck;2013-09-08 16:33:31 +0200;MAINT: make loggam static in random kit

==

numpy/random/mtrand/distributions.c
==================
73fbfb2;Charles Harris;2013-09-07 19:46:27 -0700;Merge pull request #3698 from cgohlke/patch-1
BUG: check axes and window length input for all integer types in fft.helper
==
==================
fe05eac;Christoph Gohlke;2013-09-07 19:10:21 -0700;BUG: check axes and window length input for all integer types
On Python 2.7, the long type was excluded.
==

numpy/fft/helper.py
==================
260433c;Christoph Gohlke;2013-09-07 18:59:56 -0700;ENH: export py3k.integer_types from numpy.compat

==

numpy/compat/py3k.py
==================
25445cd;Charles Harris;2013-09-07 14:37:29 -0700;Merge pull request #3697 from charris/fix-simd-for-windows
BUG: Fix UFUNC_CHECK_STATUS to work on both 32 and 64 bit Windows.
==
==================
e20a54b;Charles Harris;2013-09-07 14:54:41 -0600;BUG: Fix UFUNC_CHECK_STATUS to work on both 32 and 64 bit Windows.
Patch is due to Christolph Gohlke.

==

numpy/core/include/numpy/ufuncobject.h
==================
089cc01;Charles Harris;2013-09-07 12:05:17 -0600;Merge branch 'gradient'
* gradient:
  ENH: Improve accuracy of numpy.gradient at edges

==
==================
332d628;danieljfarrell;2013-08-12 14:33:11 +0900;ENH: Improve accuracy of numpy.gradient at edges
* numpy.gradient has been enhanced to use a second order accurate
  one-sided finite difference stencil at boundary elements of the
  array. Second order accurate central difference are still used for
  the interior elements. The result is a fully second order accurate
  approximation of the gradient over the full domain.

* The one-sided stencil uses 3 elements each with a different weight. A
  forward difference is used for the first element,
     dy/dx ~ -(3.0*y[0] - 4.0*y[1] + y[2]) / (2.0*dx)
  and backwards difference is used for the last element,
     dy/dx ~ (3.0*y[-1] - 4.0*y[-2] + y[-3]) / (2.0*dx)

* Because the datetime64 datatype cannot be multiplied a view is taken
  of datetime64 arrays and cast to int64. The gradient algorithm is
  then applied to the view rather than the input array.

* Previously no dimension checks were performed on the input array. Now
  if the array size along the differentiation axis is less than 2, a
  ValueError is raised which explains that more elements are needed. If
  the size is exactly two the function falls back to using a 2 point
  stencil (the old behaviour). If the size is 3 and above then the
  higher accuracy methods are used.

* A new test has been added which validates the higher accuracy. Old
  tests have been updated to pass. Note, this should be expected
  because the boundary elements now return different (more accurate)
  values.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
7679c14;Charles Harris;2013-09-07 06:27:49 -0700;Merge pull request #3694 from juliantaylor/test-rational-fix
BUG: fix test_rational PyNumberMethods for python3
==
==================
a486a6b;Julian Taylor;2013-09-07 11:59:19 +0200;ENH: copy ndarrays if they are encountered in setArrayFromSequence
By avoiding the elementwise copy array([a,b,c]) is now as
fast as vstack([a,b,c])

==

numpy/core/src/multiarray/ctors.c
numpy/core/tests/test_multiarray.py
==================
ba08629;Julian Taylor;2013-09-07 09:45:04 +0200;BUG: fix test_rational PyNumberMethods for python3
wrong structure makes VC9 fail to compile under python3

==

numpy/core/src/umath/test_rational.c.src
==================
1ec9419;Charles Harris;2013-09-06 14:58:31 -0700;Merge pull request #3691 from juliantaylor/windows-fpu-fix
BUG: fix windows fpu flag check for mixed x87 and sse instructions
==
==================
554ee09;Julian Taylor;2013-09-06 23:12:13 +0200;BUG: fix windows fpu flag check for mixed x87 and sse instructions
windows enables sse intrinsics also on 32 bit by default so we need to
check both the x87 and sse fpu flags.
closes #3680

==

numpy/core/include/numpy/ufuncobject.h
==================
b9b0ea5;Charles Harris;2013-09-06 10:31:09 -0700;Merge pull request #3676 from charris/pep8-polynomial-tests
STY: Make numpy/polynomial/tests/*.py PEP8 compliant.
==
==================
f1e49d7;Charles Harris;2013-09-06 10:29:59 -0700;Merge pull request #3524 from cowlicks/ufunc-override
Ufunc Overrides
==
==================
711b997;Blake Griffith;2013-08-31 16:02:05 -0500;DOC: Update release notes.

==

doc/release/1.9.0-notes.rst
==================
3320571;Blake Griffith;2013-08-15 12:35:27 -0500;BLD TRAVIS: Added libatlas to travis build so it can test BLAS stuff.
sudo apt-get install -qq libatlas-dev libatlas-base-dev

==

.travis.yml
==================
022aea8;Blake Griffith;2013-07-18 21:26:58 -0500;BLD: Added ufunc_override.h to setup.py.

==

numpy/core/setup.py
==================
5c630f0;Blake Griffith;2013-07-22 23:22:55 -0500;TST: Add ufunc override tests.

==

numpy/core/tests/test_blasdot.py
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_umath.py
==================
21976ca;Blake Griffith;2013-08-25 11:44:53 -0500;ENH: Add ufunc override functionality to ufuncs and dots.

==

numpy/core/blasdot/_dotblas.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/umath/ufunc_object.c
==================
c50e60d;Charles Harris;2013-09-05 15:49:45 -0700;Merge pull request #3689 from charris/fix-gitignore
BUG: .gitignore ignores all release directories.
==
==================
3b8aba7;Charles Harris;2013-09-05 14:10:50 -0700;Merge pull request #3688 from jseabold/update-release-notes
DOC: Update release notes for openblas build.
==
==================
7386f6d;Charles Harris;2013-09-05 15:06:15 -0600;BUG: .gitignore ignores all release directories.
It should only ignore the one in the root directory. The fix is to
prepend a '/' to the directory name.

==

.gitignore
==================
92ed1b2;Skipper Seabold;2013-09-05 16:36:31 -0400;DOC: Update release notes for openblas build.

==

doc/release/1.8.0-notes.rst
==================
b5dab6d;Charles Harris;2013-09-05 13:30:21 -0700;Merge pull request #3642 from jseabold/openblas-install
BLD: Allow easy use of openblas.
==
==================
fb0c7bd;Olivier Grisel;2013-09-04 17:43:21 +0200;Use the default install location of OpenBLAS in the example

==

site.cfg.example
==================
ffd4332;Olivier Grisel;2013-09-04 16:16:33 +0200;site.cfg.example should not reference blas_opt and lapack_opt
blas_opt and lapack_opt sections are not actually read by the
numpy.distutils.system_info machinery. They are just meta entry points for the
`get_info` public function that in turns introspec the atlas, openblas and mkl
sections.

==

site.cfg.example
==================
573b3b0;Charles Harris;2013-09-04 07:12:31 -0700;Merge pull request #3657 from charris/add-hash-method-to-polynomials
BUG: Set __hash__ = None for non-hashable classes.
==
==================
43fcc0e;Olivier Grisel;2013-09-04 16:10:04 +0200;Make vecLib / Accelerate not shadow other optimized builds under OSX

==

numpy/distutils/system_info.py
==================
0a91ade;Charles Harris;2013-09-04 07:06:21 -0700;Merge pull request #3678 from charris/fix-wrong-variable-type
BUG: PyArray_PyIntAsIntp had variable size check wrong way around.
==
==================
3c8eb4e;Charles Harris;2013-09-03 19:26:17 -0600;BUG: PyArray_PyIntAsIntp had variable size check wrong way around.
This bug resulted in using a long type when a long long was required,
resulting in numerous errors when numpy was compiled as 64 bits on
64 bit windows.

==

numpy/core/src/multiarray/conversion_utils.c
==================
8255df3;Charles Harris;2013-09-03 05:55:28 -0600;STY: Make numpy/polynomial/tests/*.py PEP8 compliant.
Run autopep8 on the tests and fixup the results.

==

numpy/polynomial/tests/test_chebyshev.py
numpy/polynomial/tests/test_classes.py
numpy/polynomial/tests/test_hermite.py
numpy/polynomial/tests/test_hermite_e.py
numpy/polynomial/tests/test_laguerre.py
numpy/polynomial/tests/test_legendre.py
numpy/polynomial/tests/test_polynomial.py
numpy/polynomial/tests/test_polyutils.py
numpy/polynomial/tests/test_printing.py
==================
7ae0206;Charles Harris;2013-09-03 11:14:03 -0700;Merge pull request #3673 from charris/pep8-lib-tests
STY: Make numpy/lib/test/*.py PEP8 compliant.
==
==================
545dc98;Charles Harris;2013-09-03 06:17:56 -0700;Merge pull request #3675 from charris/revert-merge-pr-3567
Revert "Merge pull request #3567 from arinkverma/avoid_conversion"
==
==================
b35728d;Charles Harris;2013-09-03 06:41:28 -0600;Revert "Merge pull request #3567 from arinkverma/avoid_conversion"
This reverts commit de9f1c92d3ca0920bce915438f0406f587aa98db, reversing
changes made to d958dec676beeac218a118fac084fa8b14bc9171.

There is a change of behavior in conversion of signed to unsigned
PyLong that shows up on my machine. For some reason this did not show
up in the travisbot tests. This reverts the merge that led to this
problem until it can be sorted out. Error shows up as

numpy/core/arrayprint.py",
line 653, in __call__
    if _MININT < x < _MAXINT:
OverflowError: can't convert negative int to unsigned

==

numpy/core/src/scalarmathmodule.c.src
==================
d2c44c5;Charles Harris;2013-09-02 13:21:48 -0600;STY: Make numpy/lib/test/*.py PEP8 compliant.
Run autopep8 over the test files in numpy/lib/test and make fixes
to the result.

Also remove Python5 workaround.

==

numpy/lib/tests/test__datasource.py
numpy/lib/tests/test__iotools.py
numpy/lib/tests/test_arraypad.py
numpy/lib/tests/test_arraysetops.py
numpy/lib/tests/test_financial.py
numpy/lib/tests/test_format.py
numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_index_tricks.py
numpy/lib/tests/test_io.py
numpy/lib/tests/test_nanfunctions.py
numpy/lib/tests/test_polynomial.py
numpy/lib/tests/test_recfunctions.py
numpy/lib/tests/test_regression.py
numpy/lib/tests/test_shape_base.py
numpy/lib/tests/test_stride_tricks.py
numpy/lib/tests/test_twodim_base.py
numpy/lib/tests/test_type_check.py
numpy/lib/tests/test_ufunclike.py
numpy/lib/tests/test_utils.py
==================
294dd26;Ralf Gommers;2013-09-02 23:13:45 -0700;Merge pull request #3674 from charris/add-to-gitignore
ENH: Add paver generated release directory to .gitignore.
==
==================
2aa5197;Charles Harris;2013-09-02 20:48:45 -0600;ENH: Add paver generated release directory to .gitignore.

==

.gitignore
==================
e703ee1;Ralf Gommers;2013-09-02 13:50:09 -0700;Merge pull request #3672 from charris/update-pavement
MAINT: Update pavement.py script.
==
==================
de9f1c9;Charles Harris;2013-09-02 09:07:50 -0700;Merge pull request #3567 from arinkverma/avoid_conversion
ENH: Avoiding conversion of integer to NumPy Scalar.
==
==================
e4d9030;Charles Harris;2013-09-01 09:30:27 -0600;MAINT: Update pavement.py script.
Remove builds for Python 2.6 and 3.1
Update release notes path to doc/release/1.9.0-notes.rst.
Set LOG_START to 'branch-1.8.x'

==

pavement.py
==================
d958dec;Charles Harris;2013-09-01 06:56:47 -0700;Merge pull request #3668 from charris/fix-buggy-tests
Fix buggy tests
==
==================
57245e4;Charles Harris;2013-08-31 20:30:11 -0600;MAINT: Make Warning handling cleaner in test_concatenate_sloppy0.
The test in question is in numpy/core/tests/test_shape_base. The cleanup
consists of using warning.catch_warnings instead of setting and popping the
warnings filter.

==

numpy/core/tests/test_shape_base.py
==================
d4413a3;Charles Harris;2013-08-31 20:21:32 -0600;BUG: Catch DeprecationWarning in numpy/core/tests/test_numeric.py.
TestCreationFuncs.check_function was spewing Deprecation warnings in
release mode. AFAICT, it did not raise errors during development because
it was buried by a TypeError. The Deprecation in question is at line
1141 in multiarray/conversion_utils.c. Hiding the deprecation should
be harmless here, but when the Deprecation is turned into an error
it will need to be caught in the test.

==

numpy/core/tests/test_numeric.py
==================
03371cd;Charles Harris;2013-08-31 20:17:52 -0600;BUG: Make DeprecationWarning always raise error in test.
The test_fancy in numpy/lib/tests/test_function_base.py failed in
release because a DeprecationWarning was no longer raised, it had
become a warning.

==

numpy/lib/tests/test_function_base.py
==================
536cd36;Blake Griffith;2013-08-25 11:44:14 -0500;ENH: Add ufunc override API.

==

numpy/core/src/private/ufunc_override.h
==================
6fe8eb6;Blake Griffith;2013-08-25 09:35:06 -0500;DOC: Add NEP and documentation for ufunc overrides.

==

doc/neps/ufunc-overrides.rst
doc/source/reference/arrays.classes.rst
==================
7ed2c9b;Arink Verma;2013-08-31 02:59:35 +0530;Check for error value by PyLong_AsUnsignedLong as (unsigned long)-1

==

numpy/core/src/scalarmathmodule.c.src
==================
74b6b2c;Charles Harris;2013-08-30 12:15:33 -0700;Merge pull request #3644 from juliantaylor/nonzero-bool
ENH: add nonzero of bools fastpath
==
==================
c5ee7f7;Julian Taylor;2013-08-20 19:56:48 +0200;ENH: add nonzero of bools fastpath
count_nonzero already has a fastpath but nonzero does not.
Improves performance by about 25% via avoiding a function call.

==

numpy/core/src/multiarray/item_selection.c
==================
5018894;Charles Harris;2013-08-30 08:19:48 -0700;Merge pull request #3647 from endolith/patch-1
DOC: hfft/ihfft description conflicts with itself
==
==================
1ae2b9e;endolith;2013-08-30 09:44:14 -0400;DOC: Unlink non-variable 'm', use monospace instead

==

numpy/fft/fftpack.py
==================
78785a4;Charles Harris;2013-08-30 06:26:51 -0700;Merge pull request #3655 from larsmans/c-fixes
FIX: unchecked mallocs and various other things
==
==================
0167ac1;Lars Buitinck;2013-08-30 11:56:25 +0200;FIX don't explicitly cast void* when final type is known

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/npysort/heapsort.c.src
numpy/core/src/npysort/mergesort.c.src
==================
ee1ec3f;Lars Buitinck;2013-08-27 17:03:59 +0200;FIX: some more casts in ufunc_object
Introduced a helper function to get rid of repetitive code.

==

numpy/core/src/umath/ufunc_object.c
==================
b76cb5b;Lars Buitinck;2013-08-27 17:02:24 +0200;MAINT: remove unused goto label and useless casts

==

numpy/core/src/multiarray/array_assign_array.c
numpy/core/src/multiarray/multiarraymodule.c
==================
0b062a8;Lars Buitinck;2013-08-27 15:31:22 +0200;FIX: unchecked mallocs and Python operations
Rewrote _tmp_string_t handling in buffer.c to use the fact that
realloc(NULL, n) is equivalent to malloc(n). There are still some
unchecked cases in this file.

Also changed some arguments to const and removed casts on malloc
return values; malloc returns void*, which is converted to any
other pointer automatically. Casting the return value of malloc
is more likely to hide bugs than to fix anything.

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/buffer.c
numpy/core/src/multiarray/ctors.c
==================
df664ea;endolith;2013-08-29 21:24:46 -0400;DOC: Remove parentheses around axis

==

numpy/fft/fftpack.py
==================
e5a80eb;endolith;2013-08-29 20:03:03 -0400;DOC: change "Hermite" to "Hermitian", "though" to "although"

==

numpy/fft/fftpack.py
numpy/fft/helper.py
==================
b350089;Charles Harris;2013-08-29 15:14:56 -0700;Merge pull request #3651 from MatthieuDartiailh/polyfit_doc
Small correction in the docstring of polyfit.
==
==================
d334dbd;Arink Verma;2013-08-30 02:04:52 +0530;Replaced PyInt_As_Long with PyInt_AsLong and  errorchecking

==

numpy/core/src/scalarmathmodule.c.src
==================
7b415b2;Arink Verma;2013-08-27 22:05:38 +0530;Added PyInt_CheckExact for python < 3 and error check for PyLong_AsLong

==

numpy/core/src/scalarmathmodule.c.src
==================
9c7ef03;Arink Verma;2013-08-20 01:18:50 +0530;Moved int test cases to pr#3592

==

numpy/core/tests/test_scalarmath.py
==================
79342d5;Arink Verma;2013-08-03 18:09:55 +0530;Extracting longlong value without converting it to NyType

==

numpy/core/src/scalarmathmodule.c.src
==================
70de8aa;Arink Verma;2013-08-03 04:25:46 +0530;ENH: Avoiding conversion of integer to NumPy Scalar. There is a bottleneck in scalar operations, when trying to extract the underlying C value from a Python integer/float. I have avoid conversion for know integer type but extracting its value.

==

numpy/core/src/scalarmathmodule.c.src
numpy/core/tests/test_scalarmath.py
==================
e2675e3;Charles Harris;2013-08-28 13:04:59 -0600;BUG: Set __hash__ = None for non-hashable classes.
Because neither poly1d nor the Polynomial package polynomial classes are
immutable, hence not reliably hashable, they should signal that by
setting __hash__ = None. This also fixes the warning

Overriding __eq__ blocks inheritance of __hash__ in 3.x

that is given when the command `python2.7 -3 -c"import numpy"` is run.

==

numpy/lib/polynomial.py
numpy/polynomial/polytemplate.py
==================
bec793a;njsmith;2013-08-27 05:50:39 -0700;Merge pull request #3653 from larsmans/c-fixes
FIX: call through wrong function pointer type + minor stuff
==
==================
49d7ca3;Lars Buitinck;2013-08-27 14:14:42 +0200;MAINT: ignore some more generated C files.

==

.gitignore
==================
994bf25;Lars Buitinck;2013-08-27 12:05:22 +0200;FIX: remove unused variables and add casts
Makes the build complete with fewer warnings.

==

numpy/core/src/multiarray/multiarray_tests.c.src
numpy/core/src/multiarray/nditer_api.c
numpy/core/src/umath/ufunc_object.c
numpy/numarray/_capi.c
==================
404a21a;Lars Buitinck;2013-08-27 12:03:23 +0200;FIX: wrong function types in ufunc_object.c
assign_reduce_identity_{zero,one} were treated as
PyArray_AssignReduceIdentityFunc, but that type has
an extra void* argument. Added the argument.

==

numpy/core/src/umath/ufunc_object.c
==================
5c7a9f2;Matthieu Dartiailh;2013-08-25 16:30:09 +0200;Small correction in the docstring of polyfit. As mentionned in Issue 3640, the notes were wrong in the order of the index for p.

==

numpy/lib/polynomial.py
==================
266a1d1;Charles Harris;2013-08-23 12:02:32 -0700;Merge pull request #3592 from arinkverma/int_behaviour
ENH: Added test cases to ensure the behavior of integer as it is.
==
==================
1ab96d2;endolith;2013-08-23 11:41:44 -0400;DOC: add note clarifying why ifftshift is needed

==

numpy/fft/helper.py
==================
8cd496d;endolith;2013-08-22 22:27:24 -0400;DOC: Add examples, copy some text from rfft functions to clarify inputs and outputs

==

numpy/fft/fftpack.py
==================
202e78d;Charles Harris;2013-08-22 09:25:43 -0700;Merge pull request #3645 from charris/enable-diagonal-as-view
ENH: Make the ndarray diagonal method return a view.
==
==================
fd6cfd6;Charles Harris;2013-08-11 20:52:39 -0600;ENH: Make the ndarray diagonal method return a view.
Also remove the test_diagonal_deprecation test and add test that
checks that a view is returned and that it is not writeable.

Closes #596.

==

numpy/add_newdocs.py
numpy/core/fromnumeric.py
numpy/core/src/multiarray/item_selection.c
numpy/core/tests/test_multiarray.py
==================
1b30036;Arink Verma;2013-08-22 21:12:37 +0530;Removing test for OS choices on long conventions

==

numpy/core/tests/test_scalarmath.py
==================
768a739;endolith;2013-08-21 16:20:43 -0400;DOC: hfft/ihfft description conflicts with itself
Says Hermite spectrum when it means signal
==

numpy/fft/fftpack.py
==================
6c81671;Skipper Seabold;2013-08-20 12:12:49 -0400;BLD: Update with information about openblas.

==

site.cfg.example
==================
42af4e0;Ake Sandgren;2013-08-20 12:11:44 -0400;Add support for using openblas for the _dotblas function.

==

numpy/distutils/system_info.py
==================
9464075;Charles Harris;2013-08-18 20:13:01 -0700;Merge pull request #3636 from charris/fix-nanfunction-deprecations
DEP: Make nansum return 0 for all-NaN or empty axis.
==
==================
0858d8a;Charles Harris;2013-08-18 20:44:24 -0600;DEP: Make nansum return 0 for all-NaN or empty axis.
Make this happen and remove test parts dependent on numpy version
< 1.9. Fixes test failures in numpy after 1.8 branch.

==

numpy/lib/nanfunctions.py
numpy/lib/tests/test_nanfunctions.py
==================
3fe2744;Charles Harris;2013-08-18 18:26:50 -0600;REL: Setup 1.9.0-notes.rst for master.

==

doc/release/1.9.0-notes.rst
doc/source/release.rst
==================
4d5ac69;Charles Harris;2013-08-18 18:03:41 -0600;REL: Update minor version number to 9.
Numpy 1.9.0-devel opens.

==

setup.py
==================
6c729b4;Charles Harris;2013-08-18 16:19:20 -0700;Merge pull request #3635 from charris/giant-style-cleanup
Giant style cleanup
==
==================
97e5b0d;Arink Verma;2013-08-17 04:04:10 +0530;added int test for error raises

==

numpy/core/tests/test_scalarmath.py
==================
fbd6510;Charles Harris;2013-08-18 11:51:25 -0600;STY: Giant comma spacing fixup.
Run the 2to3 ws_comma fixer on *.py files. Some lines are now too long
and will need to be broken at some point. OTOH, some lines were already
too long and need to be broken at some point. Now seems as good a time
as any to do this with open PRs at a minimum.

==

doc/newdtype_example/example.py
doc/newdtype_example/setup.py
doc/numpybook/comparison/ctypes/interface.py
doc/numpybook/comparison/timing.py
doc/numpybook/comparison/weave/filter.py
doc/numpybook/comparison/weave/inline.py
doc/numpybook/runcode.py
doc/swig/test/setup.py
doc/swig/test/testArray.py
doc/swig/test/testFarray.py
doc/swig/test/testFortran.py
doc/swig/test/testMatrix.py
doc/swig/test/testSuperTensor.py
doc/swig/test/testTensor.py
doc/swig/test/testVector.py
numpy/_import_tools.py
numpy/add_newdocs.py
numpy/build_utils/common.py
numpy/compat/setup.py
numpy/core/__init__.py
numpy/core/_internal.py
numpy/core/arrayprint.py
numpy/core/code_generators/genapi.py
numpy/core/code_generators/generate_umath.py
numpy/core/fromnumeric.py
numpy/core/function_base.py
numpy/core/getlimits.py
numpy/core/memmap.py
numpy/core/numeric.py
numpy/core/numerictypes.py
numpy/core/setup.py
numpy/core/setup_common.py
numpy/core/shape_base.py
numpy/core/src/multiarray/testcalcs.py
numpy/core/tests/test_api.py
numpy/core/tests/test_blasdot.py
numpy/core/tests/test_datetime.py
numpy/core/tests/test_defchararray.py
numpy/core/tests/test_deprecations.py
numpy/core/tests/test_dtype.py
numpy/core/tests/test_einsum.py
numpy/core/tests/test_function_base.py
numpy/core/tests/test_getlimits.py
numpy/core/tests/test_half.py
numpy/core/tests/test_indexerrors.py
numpy/core/tests/test_indexing.py
numpy/core/tests/test_item_selection.py
numpy/core/tests/test_memmap.py
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_nditer.py
numpy/core/tests/test_numeric.py
numpy/core/tests/test_numerictypes.py
numpy/core/tests/test_print.py
numpy/core/tests/test_regression.py
numpy/core/tests/test_scalarmath.py
numpy/core/tests/test_shape_base.py
numpy/core/tests/test_ufunc.py
numpy/core/tests/test_umath.py
numpy/core/tests/test_umath_complex.py
numpy/core/tests/test_unicode.py
numpy/distutils/ccompiler.py
numpy/distutils/command/__init__.py
numpy/distutils/command/bdist_rpm.py
numpy/distutils/command/build.py
numpy/distutils/command/build_clib.py
numpy/distutils/command/build_ext.py
numpy/distutils/command/build_py.py
numpy/distutils/command/build_src.py
numpy/distutils/command/config.py
numpy/distutils/command/config_compiler.py
numpy/distutils/command/install.py
numpy/distutils/command/install_headers.py
numpy/distutils/command/sdist.py
numpy/distutils/conv_template.py
numpy/distutils/core.py
numpy/distutils/cpuinfo.py
numpy/distutils/exec_command.py
numpy/distutils/extension.py
numpy/distutils/fcompiler/__init__.py
numpy/distutils/fcompiler/absoft.py
numpy/distutils/fcompiler/compaq.py
numpy/distutils/fcompiler/g95.py
numpy/distutils/fcompiler/gnu.py
numpy/distutils/fcompiler/hpux.py
numpy/distutils/fcompiler/ibm.py
numpy/distutils/fcompiler/intel.py
numpy/distutils/fcompiler/lahey.py
numpy/distutils/fcompiler/mips.py
numpy/distutils/fcompiler/nag.py
numpy/distutils/fcompiler/none.py
numpy/distutils/fcompiler/pg.py
numpy/distutils/fcompiler/sun.py
numpy/distutils/from_template.py
numpy/distutils/intelccompiler.py
numpy/distutils/line_endings.py
numpy/distutils/log.py
numpy/distutils/mingw32ccompiler.py
numpy/distutils/misc_util.py
numpy/distutils/setup.py
numpy/distutils/system_info.py
numpy/distutils/tests/f2py_ext/setup.py
numpy/distutils/tests/f2py_ext/tests/test_fib2.py
numpy/distutils/tests/f2py_f90_ext/setup.py
numpy/distutils/tests/f2py_f90_ext/tests/test_foo.py
numpy/distutils/tests/gen_ext/setup.py
numpy/distutils/tests/gen_ext/tests/test_fib3.py
numpy/distutils/tests/pyrex_ext/setup.py
numpy/distutils/tests/setup.py
numpy/distutils/tests/swig_ext/setup.py
numpy/distutils/tests/swig_ext/tests/test_example.py
numpy/distutils/tests/test_misc_util.py
numpy/distutils/unixccompiler.py
numpy/dual.py
numpy/f2py/__init__.py
numpy/f2py/auxfuncs.py
numpy/f2py/capi_maps.py
numpy/f2py/cb_rules.py
numpy/f2py/cfuncs.py
numpy/f2py/common_rules.py
numpy/f2py/crackfortran.py
numpy/f2py/diagnose.py
numpy/f2py/doc/collectinput.py
numpy/f2py/docs/pytest.py
numpy/f2py/docs/usersguide/setup_example.py
numpy/f2py/f2py2e.py
numpy/f2py/f2py_testing.py
numpy/f2py/f90mod_rules.py
numpy/f2py/func2subr.py
numpy/f2py/rules.py
numpy/f2py/setup.py
numpy/f2py/tests/test_array_from_pyobj.py
numpy/f2py/tests/test_assumed_shape.py
numpy/f2py/tests/test_callback.py
numpy/f2py/tests/test_kind.py
numpy/f2py/tests/test_return_character.py
numpy/f2py/tests/test_return_complex.py
numpy/f2py/tests/test_return_integer.py
numpy/f2py/tests/test_return_logical.py
numpy/f2py/tests/test_return_real.py
numpy/f2py/tests/test_size.py
numpy/f2py/use_rules.py
numpy/fft/fftpack.py
numpy/fft/helper.py
numpy/fft/setup.py
numpy/fft/tests/test_helper.py
numpy/lib/__init__.py
numpy/lib/financial.py
numpy/lib/format.py
numpy/lib/function_base.py
numpy/lib/index_tricks.py
numpy/lib/info.py
numpy/lib/polynomial.py
numpy/lib/recfunctions.py
numpy/lib/scimath.py
numpy/lib/setup.py
numpy/lib/shape_base.py
numpy/lib/stride_tricks.py
numpy/lib/tests/test_arraysetops.py
numpy/lib/tests/test_financial.py
numpy/lib/tests/test_format.py
numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_index_tricks.py
numpy/lib/tests/test_io.py
numpy/lib/tests/test_nanfunctions.py
numpy/lib/tests/test_polynomial.py
numpy/lib/tests/test_recfunctions.py
numpy/lib/tests/test_regression.py
numpy/lib/tests/test_shape_base.py
numpy/lib/tests/test_stride_tricks.py
numpy/lib/tests/test_twodim_base.py
numpy/lib/tests/test_type_check.py
numpy/lib/tests/test_ufunclike.py
numpy/lib/twodim_base.py
numpy/lib/type_check.py
numpy/lib/user_array.py
numpy/lib/utils.py
numpy/linalg/lapack_lite/make_lite.py
numpy/linalg/linalg.py
numpy/linalg/setup.py
numpy/linalg/tests/test_gufuncs_linalg.py
numpy/linalg/tests/test_linalg.py
numpy/linalg/tests/test_regression.py
numpy/ma/bench.py
numpy/ma/setup.py
numpy/ma/tests/test_core.py
numpy/ma/tests/test_extras.py
numpy/ma/tests/test_mrecords.py
numpy/ma/tests/test_old_ma.py
numpy/ma/tests/test_regression.py
numpy/ma/tests/test_subclassing.py
numpy/ma/timer_comparison.py
numpy/matlib.py
numpy/matrixlib/defmatrix.py
numpy/matrixlib/tests/test_defmatrix.py
numpy/matrixlib/tests/test_multiarray.py
numpy/matrixlib/tests/test_numeric.py
numpy/matrixlib/tests/test_regression.py
numpy/numarray/alter_code1.py
numpy/numarray/alter_code2.py
numpy/numarray/functions.py
numpy/numarray/numerictypes.py
numpy/numarray/session.py
numpy/numarray/setup.py
numpy/oldnumeric/alter_code1.py
numpy/oldnumeric/alter_code2.py
numpy/oldnumeric/arrayfns.py
numpy/oldnumeric/fix_default_axis.py
numpy/oldnumeric/functions.py
numpy/oldnumeric/linear_algebra.py
numpy/oldnumeric/ma.py
numpy/oldnumeric/matrix.py
numpy/oldnumeric/mlab.py
numpy/oldnumeric/random_array.py
numpy/oldnumeric/rng.py
numpy/oldnumeric/rng_stats.py
numpy/oldnumeric/setup.py
numpy/oldnumeric/tests/test_oldnumeric.py
numpy/oldnumeric/tests/test_regression.py
numpy/polynomial/chebyshev.py
numpy/polynomial/hermite.py
numpy/polynomial/hermite_e.py
numpy/polynomial/laguerre.py
numpy/polynomial/legendre.py
numpy/polynomial/polynomial.py
numpy/polynomial/setup.py
numpy/polynomial/tests/test_chebyshev.py
numpy/polynomial/tests/test_classes.py
numpy/polynomial/tests/test_hermite.py
numpy/polynomial/tests/test_hermite_e.py
numpy/polynomial/tests/test_laguerre.py
numpy/polynomial/tests/test_legendre.py
numpy/polynomial/tests/test_polynomial.py
numpy/polynomial/tests/test_polyutils.py
numpy/polynomial/tests/test_printing.py
numpy/random/__init__.py
numpy/random/setup.py
numpy/random/tests/test_random.py
numpy/setup.py
numpy/testing/decorators.py
numpy/testing/noseclasses.py
numpy/testing/nosetester.py
numpy/testing/numpytest.py
numpy/testing/print_coercion_tables.py
numpy/testing/setup.py
numpy/testing/tests/test_decorators.py
numpy/testing/tests/test_utils.py
numpy/testing/utils.py
numpy/tests/test_ctypeslib.py
numpy/tests/test_matlib.py
tools/commitstats.py
tools/test-installed-numpy.py
==================
8ddb0ce;Charles Harris;2013-08-18 11:16:06 -0600;STY: Giant whitespace cleanup.
Now is as good a time as any with open PR's at a low.

==

BENTO_BUILD.txt
DEV_README.txt
README.txt
doc/CAPI.rst.txt
doc/DISTUTILS.rst.txt
doc/HOWTO_DOCUMENT.rst.txt
doc/Py3K.rst.txt
doc/TESTS.rst.txt
doc/cython/README.txt
doc/neps/datetime-proposal.rst
doc/neps/datetime-proposal3.rst
doc/neps/deferred-ufunc-evaluation.rst
doc/neps/generalized-ufuncs.rst
doc/neps/groupby_additions.rst
doc/neps/missing-data.rst
doc/neps/new-iterator-ufunc.rst
doc/neps/structured_array_extensions.txt
doc/neps/warnfix.txt
doc/newdtype_example/floatint/__init__.py
doc/postprocess.py
doc/records.rst.txt
doc/source/conf.py
doc/source/dev/gitwash/configure_git.rst
doc/source/dev/gitwash/development_workflow.rst
doc/source/dev/gitwash/git_development.rst
doc/source/dev/gitwash/git_resources.rst
doc/source/dev/gitwash/index.rst
doc/source/reference/arrays.datetime.rst
doc/source/reference/c-api.config.rst
doc/source/reference/c-api.coremath.rst
doc/source/reference/c-api.deprecations.rst
doc/source/reference/c-api.iterator.rst
doc/source/reference/routines.char.rst
doc/source/reference/routines.datetime.rst
doc/source/reference/routines.dual.rst
doc/source/reference/routines.emath.rst
doc/source/reference/routines.ma.rst
doc/source/reference/routines.numarray.rst
doc/source/reference/routines.oldnumeric.rst
doc/source/reference/swig.interface-file.rst
doc/source/reference/swig.testing.rst
doc/source/user/basics.io.rst
doc/ufuncs.rst.txt
numpy/__init__.py
numpy/add_newdocs.py
numpy/core/_methods.py
numpy/core/arrayprint.py
numpy/core/code_generators/ufunc_docstrings.py
numpy/core/fromnumeric.py
numpy/core/function_base.py
numpy/core/include/numpy/npy_common.h
numpy/core/shape_base.py
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/conversion_utils.c
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/flagsobject.c
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/multiarray/shape.c
numpy/core/src/npymath/halffloat.c
numpy/core/src/npymath/ieee754.c.src
numpy/core/src/npysort/selection.c.src
numpy/core/src/private/npy_partition.h
numpy/core/src/scalarmathmodule.c.src
numpy/core/src/umath/loops.h
numpy/core/src/umath/operand_flag_tests.c.src
numpy/core/src/umath/reduction.c
numpy/core/src/umath/ufunc_type_resolution.c
numpy/core/tests/test_api.py
numpy/core/tests/test_dtype.py
numpy/core/tests/test_function_base.py
numpy/core/tests/test_item_selection.py
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_shape_base.py
numpy/core/tests/test_ufunc.py
numpy/distutils/command/build_clib.py
numpy/distutils/command/config.py
numpy/distutils/conv_template.py
numpy/distutils/extension.py
numpy/doc/basics.py
numpy/doc/broadcasting.py
numpy/doc/byteswapping.py
numpy/doc/creation.py
numpy/doc/glossary.py
numpy/doc/howtofind.py
numpy/doc/indexing.py
numpy/doc/internals.py
numpy/doc/io.py
numpy/doc/jargon.py
numpy/doc/methods_vs_functions.py
numpy/doc/misc.py
numpy/doc/performance.py
numpy/doc/structured_arrays.py
numpy/doc/subclassing.py
numpy/doc/ufuncs.py
numpy/f2py/NEWS.txt
numpy/f2py/TODO.txt
numpy/f2py/crackfortran.py
numpy/f2py/doc/Release-2.x.txt
numpy/f2py/doc/Release-3.x.txt
numpy/f2py/doc/Release-4.x.txt
numpy/f2py/doc/f2python9-final/README.txt
numpy/f2py/doc/f2python9-final/src/examples/exp1mess.txt
numpy/f2py/doc/f2python9-final/src/examples/exp1session.txt
numpy/f2py/doc/multiarray/array_from_pyobj.c
numpy/f2py/doc/multiarray/fortran_array_from_pyobj.txt
numpy/f2py/doc/multiarray/transpose.txt
numpy/f2py/doc/multiarrays.txt
numpy/f2py/doc/using_F_compiler.txt
numpy/f2py/docs/FAQ.txt
numpy/f2py/docs/HISTORY.txt
numpy/f2py/docs/OLDNEWS.txt
numpy/f2py/docs/README.txt
numpy/f2py/docs/TESTING.txt
numpy/f2py/docs/THANKS.txt
numpy/f2py/docs/usersguide/index.txt
numpy/f2py/func2subr.py
numpy/fft/fftpack.py
numpy/fft/helper.py
numpy/lib/index_tricks.py
numpy/lib/tests/test_index_tricks.py
numpy/lib/type_check.py
numpy/lib/user_array.py
numpy/linalg/_gufuncs_linalg.py
numpy/linalg/lapack_lite/blas_lite.c
numpy/linalg/lapack_lite/dlamch.c
numpy/linalg/lapack_lite/dlapack_lite.c
numpy/linalg/lapack_lite/zlapack_lite.c
numpy/linalg/setup.py
numpy/linalg/tests/test_gufuncs_linalg.py
numpy/linalg/umath_linalg.c.src
numpy/ma/API_CHANGES.txt
numpy/ma/README.txt
numpy/matrixlib/tests/test_regression.py
numpy/numarray/include/numpy/cfunc.h
numpy/numarray/include/numpy/ieeespecial.h
numpy/oldnumeric/tests/test_regression.py
numpy/random/mtrand/distributions.c
numpy/random/mtrand/distributions.h
numpy/random/mtrand/mtrand.c
numpy/testing/noseclasses.py
numpy/testing/nosetester.py
numpy/testing/utils.py
tools/c_coverage/HOWTO_C_COVERAGE.txt
tools/commitstats.py
tools/win32build/doall.py
==================
13b0b27;Charles Harris;2013-08-18 09:15:00 -0700;Merge pull request #3633 from charris/update-release-notes
DOC: Update 1.8.0-notes.rst
==
==================
59eea0c;Charles Harris;2013-08-18 07:50:48 -0700;Merge pull request #3616 from seberg/buffer-pybuf_simple
BUG: Fix PyBUF_SIMPLE flag to GetBuffer.
==
==================
577183e;Charles Harris;2013-08-18 08:19:44 -0600;DOC: Update 1.8.0-notes.rst
Note that the numpydoc sphinx extensions now reside in their own
repository.

==

doc/release/1.8.0-notes.rst
==================
5c2dafb;Sebastian Berg;2013-08-14 16:35:00 +0200;BUG: Fix PyBUF_SIMPLE flag to GetBuffer.
When no strides are requested, the array must be C-contiguous,
not only if a shape was also requested.

Closes gh-3613

==

numpy/core/src/multiarray/buffer.c
numpy/core/src/multiarray/multiarray_tests.c.src
numpy/core/tests/test_multiarray.py
==================
c831298;Charles Harris;2013-08-18 05:42:12 -0700;Merge pull request #3631 from charris/fix-reference-leak
Fix reference leak
==
==================
0a6217d;seberg;2013-08-18 01:56:33 -0700;Merge pull request #3632 from charris/remove-commented-out-code
MAINT: Remove some commented out code in test_indexing.py.
==
==================
465b227;Charles Harris;2013-08-17 21:43:34 -0600;MAINT: Remove some commented out code in test_indexing.py.
The code was intended to check refcounting, and indeed, exposed a long
standing bug by failing, which is why it was commented out. That bug is
now fixed and tested by gh-3631, so the commented out code could
theoretically be made to work, but that requires enough del this and del
the other that I think it is too fragile to keep. So delete it.

==

numpy/core/tests/test_indexing.py
==================
d0bdae4;Charles Harris;2013-08-17 19:41:09 -0600;TST: Add test for reference leak in zeros, ones, empty, and full.
Check that the reference counts of the  passed dimensions do not
change.

==

numpy/core/tests/test_numeric.py
==================
7d01fe5;Charles Harris;2013-08-17 19:12:38 -0600;BUG: Fix reference leak in PyArray_IntpFromIndexSequence.
This caused {ones, zeros, empty}([1]*10) to increase the reference
count of 1 by 10. Same for other numbers in the list.

Closes #3589.

==

numpy/core/src/multiarray/conversion_utils.c
==================
fc5a0ba;Charles Harris;2013-08-17 12:40:51 -0600;Merge branch 'fast-mask'
* fast-mask:
  MAINT: Make setting mask values with scalars faster.

==
==================
0cc113c;Richard Hattersley;2012-11-22 16:02:05 +0000;MAINT: Make setting mask values with scalars faster.
The current implementation assigns the mask value to a.flat, where a is
the mask being updated. In the scalar case, that is slower than
assigning to a[...], so when a is an instance of int, float, np.bool_,
or np.number use that instead.

==

numpy/ma/core.py
==================
aeb13af;Charles Harris;2013-08-17 10:34:16 -0700;Merge pull request #3107 from MrBago/improve_searchsorted
Improve searchsorted
==
==================
4674b9e;Bago Amirbekian;2013-08-16 15:57:18 -0700;MAINT - update comments related to searchsorted to be consistent with code.

==

numpy/core/src/multiarray/item_selection.c
==================
bb925ed;Bago Amirbekian;2013-08-02 19:01:40 -0700;RF - have searchsorted copy haystack when the needle is bigger than the haystack

==

numpy/core/src/multiarray/item_selection.c
==================
a06b800;Bago Amirbekian;2013-05-16 21:57:51 -0700;BF - cast psorter pointer to intp

==

numpy/core/src/multiarray/item_selection.c
==================
ebcae1b;Bago Amirbekian;2013-05-16 16:57:41 -0700;TST - add testing of searchsorted on unaligned arrays

==

numpy/core/tests/test_multiarray.py
==================
77b3df0;Bago Amirbekian;2013-02-28 18:29:51 -0800;RF - allow ndarray.searchsorted to avoid making a copy for non-contiguous arrays

==

numpy/core/src/multiarray/item_selection.c
==================
4e16d97;Charles Harris;2013-08-17 09:11:21 -0700;Merge pull request #3630 from rgommers/fix-median
BUG: fix np.median so it accepts array_like input.  Clean up median test...
==
==================
d21a944;Charles Harris;2013-08-17 09:01:26 -0700;Merge pull request #3628 from seberg/issue-3589
BUG: MapIter leaked itself and arr and index objects
==
==================
759a4f9;Ralf Gommers;2013-08-17 16:17:39 +0200;BUG: fix np.median so it accepts array_like input.  Clean up median tests.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
cdbdaf1;seberg;2013-08-17 06:03:51 -0700;Merge pull request #3629 from charris/fix-out-of-order-declaration
MAINT: Move NPY_BEGIN_THREADS_DEF to end of declarations.
==
==================
6a63c7a;Charles Harris;2013-08-16 19:28:38 -0600;MAINT: Move NPY_BEGIN_THREADS_DEF to end of declarations.
The is an ';' at the end of the macro definition. When used and followed
by another ';', gcc thinks a statement has been made. An empty
statement, but still a statement. This causes compilation failure with
Python 3.4a.

The ';' should probably be removed, but that was undone in 1.7 to
maintain backward compatibility.

==

numpy/core/src/umath/ufunc_object.c
==================
d4af612;Charles Harris;2013-08-16 15:08:53 -0700;Merge pull request #2821 from ContinuumIO/ufunc-fancy-indexing3
in place fancy indexing for ufuncs
==
==================
acef718;Jay Bourque;2013-08-14 18:18:03 -0500;Change casting type for ufunc operands

==

numpy/core/src/umath/ufunc_object.c
==================
ec9d9cc;Jay Bourque;2013-08-13 17:01:51 -0500;Bail out of loop if python error occurs

==

numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_ufunc.py
==================
2ec4c94;Jay Bourque;2013-08-05 14:16:12 -0500;Check for python error when needs_api flag is set

==

numpy/core/src/umath/ufunc_object.c
==================
a04bb37;Jay Bourque;2013-08-05 13:49:06 -0500;Update docs

==

numpy/add_newdocs.py
==================
7c4eeea;Jay Bourque;2013-08-05 11:34:43 -0500;Update docs

==

numpy/add_newdocs.py
==================
79bc97c;Jay Bourque;2013-07-27 12:45:37 -0500;Update docs

==

numpy/add_newdocs.py
==================
336151e;Jay Bourque;2013-07-27 12:16:17 -0500;Fix memory leaks and inc dtype refs

==

numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_ufunc.py
==================
1e4d589;Jay Bourque;2013-07-24 15:46:39 -0500;Add decrefs at end of function and return None object

==

numpy/core/src/umath/ufunc_object.c
==================
5729685;Jay Bourque;2013-07-16 13:28:40 -0500;Move gil release/aquire outside of loop

==

numpy/core/src/umath/ufunc_object.c
==================
6c249cd;Jay Bourque;2013-07-15 17:56:59 -0500;Move NpyIter_IterNextFunc call outside of loop

==

numpy/core/src/umath/ufunc_object.c
==================
a4bb3bc;Jay Bourque;2013-07-15 17:55:58 -0500;Add test for non native bytetypes

==

numpy/core/tests/test_ufunc.py
==================
b440929;Jay Bourque;2013-07-13 16:39:27 -0500;Update docs

==

doc/release/1.8.0-notes.rst
doc/source/reference/ufuncs.rst
==================
2c37d3b;Jay Bourque;2013-07-13 16:35:29 -0500;Add test for empty subspace

==

numpy/core/tests/test_ufunc.py
==================
fcc891d;Jay Bourque;2013-07-13 16:21:21 -0500;Add NpyIter_Deallocate

==

numpy/core/src/umath/ufunc_object.c
==================
f917e38;Jay Bourque;2013-07-13 16:17:59 -0500;Use Py_XDECREF in fail section

==

numpy/core/src/umath/ufunc_object.c
==================
8f22733;Jay Bourque;2013-05-23 15:47:30 -0500;Fix deprecation warning

==

numpy/core/src/umath/ufunc_object.c
==================
c26e548;Jay Bourque;2013-05-23 15:26:35 -0500;Reverse commit 6ec51b3

==

numpy/core/src/multiarray/mapping.c
==================
ea2e1f5;Jay Bourque;2013-05-23 14:19:12 -0500;Remove unnecessary check

==

numpy/core/src/umath/ufunc_object.c
==================
9438a8f;Jay Bourque;2013-05-23 13:08:17 -0500;More clean up

==

numpy/core/src/umath/ufunc_object.c
==================
f899c19;Jay Bourque;2013-05-22 22:19:52 -0500;Clean up previous comment and add test for unary ufunc.

==

numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_ufunc.py
==================
3820cf3;Jay Bourque;2013-05-22 18:31:40 -0500;Use NpyIter object to buffer each input value
Use NpyIter object to buffer each input value in order to handle certain situations such as operands with mixed dtypes.

==

numpy/core/src/umath/ufunc_object.c
==================
b259cdc;Jay Bourque;2013-05-23 12:16:48 -0500;Revert "Call iterator_loop instead of directly calling ufunc."
This reverts commit 2a9d5577a087e664ee047b3e099c1355000d8661.

==

numpy/core/src/umath/ufunc_object.c
==================
d467d49;Jay Bourque;2013-04-03 15:03:39 -0500;Maybe this will fix the DeprecationWarning

==

numpy/core/tests/test_ufunc.py
==================
2e65204;Jay Bourque;2013-04-03 14:53:21 -0500;Another attempt at fixing DeprecationWarning

==

numpy/core/tests/test_ufunc.py
==================
4b33849;Jay Bourque;2013-04-03 14:44:08 -0500;Fix DeprecationWarning on python 3.3

==

numpy/core/tests/test_ufunc.py
==================
5dea4ca;Jay Bourque;2013-04-03 14:01:31 -0500;Add test for boolean indexing and boolean ufunc

==

numpy/core/tests/test_ufunc.py
==================
1e786ea;Jay Bourque;2013-04-03 13:26:02 -0500;Add test for mixed dtypes

==

numpy/core/tests/test_ufunc.py
==================
da3f8cb;Jay Bourque;2013-04-02 17:54:17 -0500;Call iterator_loop instead of directly calling ufunc.
Call iterator_loop which will call ufunc and handle any buffering for cases with mixed dtypes.

==

numpy/core/src/umath/ufunc_object.c
==================
e4cbcb2;Jay Bourque;2013-04-01 17:20:47 -0500;Just create an array object for second operand; don't cast to dtype of first operand.

==

numpy/core/src/umath/ufunc_object.c
==================
f9a3e17;Jay Bourque;2013-04-01 15:51:16 -0500;Add tests for 0-dim array

==

numpy/core/tests/test_ufunc.py
==================
6d7b51a;Jay Bourque;2013-03-28 12:16:34 -0500;Improve comment for creating iter object from second operand

==

numpy/core/src/umath/ufunc_object.c
==================
2a8c04b;Jay Bourque;2013-03-27 18:13:38 -0500;Let indexing code do error checking for arguments with mismatched dimensions

==

numpy/core/src/umath/ufunc_object.c
==================
2e2d99a;Jay Bourque;2013-03-27 17:53:01 -0500;Remove keyword support for required arguments

==

numpy/core/src/umath/ufunc_object.c
==================
45419ea;Jay Bourque;2013-03-27 17:32:03 -0500;Replace calls to New/Bind/Reset with MapIterArray

==

numpy/core/src/multiarray/mapping.c
numpy/core/src/umath/ufunc_object.c
==================
13c1847;Jay Bourque;2012-12-19 14:12:21 -0600;Reword some comments/documentation

==

numpy/add_newdocs.py
numpy/core/src/umath/ufunc_object.c
==================
1b81be7;Jay Bourque;2012-12-14 12:01:54 -0600;Add more comments

==

numpy/core/src/umath/ufunc_object.c
==================
d6fa103;Jay Bourque;2012-12-13 16:08:49 -0600;Fix for crash when PyArray_MapIterSwapAxes is called
Set up default iteraxes array values in call to MapIterBind().

==

numpy/core/src/multiarray/mapping.c
==================
0d087dc;Jay Bourque;2012-12-13 15:24:44 -0600;Fix build issue

==

numpy/core/src/multiarray/mapping.c
==================
f63eb17;Jay Bourque;2012-12-07 14:57:05 -0600;Add documentation for new 'at' ufunc method

==

doc/source/reference/ufuncs.rst
==================
5b7cda0;Jay Bourque;2012-11-15 15:54:57 -0600;Fix issue with 'at' method when indices are all slice objects

==

numpy/core/src/multiarray/mapping.c
numpy/core/tests/test_ufunc.py
==================
a8d13b8;Jay Bourque;2012-11-15 15:09:04 -0600;Add more unit tests for 'at' method

==

numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_ufunc.py
==================
cf9452f;Jay Bourque;2012-11-14 14:47:40 -0600;Code cleanup for 'at' method

==

numpy/core/src/umath/ufunc_object.c
==================
0eafea7;Jay Bourque;2012-11-14 14:37:32 -0600;Add more unit tests for 'at' method

==

numpy/core/tests/test_ufunc.py
==================
7dde42a;Jay Bourque;2012-11-14 12:39:34 -0600;Correct implementation of 'at' method that covers all corner cases

==

numpy/core/src/umath/ufunc_object.c
==================
d94cd57;Jay Bourque;2012-11-14 12:10:03 -0600;Only allow explicit index slicing in 'at' method

==

numpy/core/src/umath/ufunc_object.c
==================
56d74a4;Jay Bourque;2012-11-14 12:08:36 -0600;Add comment to 'at' method unit test

==

numpy/core/tests/test_ufunc.py
==================
04c341d;Jay Bourque;2012-11-14 12:08:17 -0600;Update documentation for 'at' method

==

doc/release/1.8.0-notes.rst
numpy/add_newdocs.py
==================
6bf50f1;Jay Bourque;2012-11-13 11:08:50 -0600;Update/expand unit tests

==

numpy/core/tests/test_ufunc.py
==================
7b551e9;Jay Bourque;2012-11-08 14:09:26 -0600;Rework 'at' method to fit customer's expectations.
'at' method should be functionally equivalent to op1[idx] += op2 (for add ufunc).

==

numpy/core/src/umath/ufunc_object.c
==================
dcea500;Jay Bourque;2012-11-07 13:34:07 -0600;Misc fixes
- Fix crash when bind for second map iter fails
- Accept array like object for second operand
- Fix memory leaks

==

numpy/core/src/umath/ufunc_object.c
==================
f79e56d;Jay Bourque;2012-10-30 17:51:09 -0500;Check for sucessful call to MapIterBind

==

numpy/core/src/umath/ufunc_object.c
==================
e1fa3d7;Jay Bourque;2012-10-30 17:50:50 -0500;Add unit tests
Conflicts:

	numpy/core/tests/test_ufunc.py

==

numpy/core/tests/test_ufunc.py
==================
99fa26c;Jay Bourque;2012-10-24 10:51:54 -0500;Change 'select' method name to 'at'

==

numpy/core/src/umath/ufunc_object.c
==================
025a056;Jay Bourque;2012-10-04 17:27:36 -0500;Add comments

==

numpy/core/src/umath/ufunc_object.c
==================
7191df0;Jay Bourque;2012-10-04 15:54:07 -0500;Add support for both unary and binary ufuncs

==

numpy/core/src/umath/ufunc_object.c
==================
925220b;Jay Bourque;2012-10-04 12:02:59 -0500;Proof-of-concept for ufunc fancy indexing
Conflicts:

	numpy/core/code_generators/numpy_api.py

==

numpy/core/src/multiarray/mapping.c
numpy/core/src/umath/ufunc_object.c
==================
281458b;Sebastian Berg;2013-08-08 20:24:21 +0200;BUG: MapIter leaked itself and arr and index objects
MapIterBind incorrectly behaved when failing, cleaning up most
but not everything. The callers have to decref the mapiter
object. Which basically means that MapIterBind does not even
have to decref the new fields (they are decrefed in the
mapiter dealloc anyway).

Note that trying to add tests checking the refcounting
failed, but the tests seem to fail at least in many cases
not because of the indexing.

Closes gh-3589

==

numpy/core/src/multiarray/mapping.c
numpy/core/tests/test_indexing.py
==================
ec41801;Charles Harris;2013-08-16 11:30:23 -0700;Merge pull request #3624 from charris/update-1.8-release-notes
DOC: Update 1.8.0 release notes.
==
==================
fb7bfd8;Charles Harris;2013-08-15 12:53:59 -0600;DOC: Update 1.8.0 release notes.
Add remarks on changes due in the next release and FutureWarnings.
Add notes on the new functions in the array C-API.
Add notes on the new function in th ufunc C-API.

==

doc/release/1.8.0-notes.rst
==================
3bc6b96;Charles Harris;2013-08-16 05:30:38 -0700;Merge pull request #3590 from juliantaylor/calloc
    use PyDataMem_NEW_ZERO (calloc) for PyArray_Zeros
==
==================
d271d97;Julian Taylor;2013-08-08 19:09:49 +0200;ENH: use PyDataMem_NEW_ZEROED for PyArray_Zeros
PyDataMem_NEW_ZEROED uses calloc which will take advantage of the fact
that most operating systems provide already zero initialized memory
blocks on larger allocations.
Additionally this memory can be sparse (= mapped to a single zero page)
on some systems (e.g. linux) reducing memory usage of applications
using sparse arrays.

==

numpy/core/src/multiarray/ctors.c
numpy/core/tests/test_multiarray.py
==================
afceb18;Julian Taylor;2013-08-08 19:04:40 +0200;ENH: add PyDataMem_NEW_ZEROED which allocates memory with calloc

==

numpy/core/code_generators/cversions.txt
numpy/core/code_generators/numpy_api.py
numpy/core/src/multiarray/multiarraymodule.c
==================
9b10a5f;Charles Harris;2013-08-15 18:13:35 -0700;Merge pull request #2721 from abalkin/master
Mistake in linalg.eig() documentation
==
==================
a18d7c4;Charles Harris;2013-08-15 18:00:48 -0700;Merge pull request #3626 from charris/gh-3397
gh-3397
==
==================
ebfccd2;Daniel;2013-06-06 00:42:55 +0200;TST: Test that savetxt works with objects having a write method.

==

numpy/lib/tests/test_io.py
==================
b82c1df;Daniel;2013-06-04 07:20:09 +0200;ENH: Make savetxt work with file like objects.
Accept any object with a "write" method as that is the only method
called by the code.

==

numpy/lib/npyio.py
==================
37b6baa;Ralf Gommers;2013-08-15 14:10:37 -0700;Merge pull request #3625 from charris/update-howtorelease
DOC: Update HOWTO_RELEASE.rst.txt.
==
==================
73db716;Charles Harris;2013-08-15 13:07:47 -0600;DOC: Update HOWTO_RELEASE.rst.txt.
The current version is out of date. Supported Python versions have
changed, the buildbot is no longer reachable, some links are dead,
etc.

==

doc/HOWTO_RELEASE.rst.txt
==================
a01738c;njsmith;2013-08-15 12:53:12 -0700;Merge pull request #3623 from charris/fix-postprocess-script
BUG: Use io.open instead of open for compatibility.
==
==================
ae13588;Ralf Gommers;2013-08-15 11:43:08 -0700;Merge pull request #3622 from charris/merge-1.8-docs
DOC: Merge doc updates from http://docs.scipy.org/numpy/patch/.
==
==================
871d079;Charles Harris;2013-08-15 12:20:11 -0600;BUG: Use io.open instead of open for compatibility.
The recent Python 3 fix adding encoding="utf-8" to the open function
fails on Python 2 because the encoding keyword is not defined. The
solution is to use io.open, which is available for Python 2.6 and 2.7
and is an alias for open when Python >= 3.0. It is reputed to be slow
when running in 2.6, but that should not be a problem.

==

doc/postprocess.py
==================
31f526e;Charles Harris;2013-08-15 11:31:08 -0600;DOC: Merge doc updates from http://docs.scipy.org/numpy/patch/.
Preparatory to 1.8.0 branch.

==

numpy/core/numeric.py
numpy/random/mtrand/mtrand.pyx
==================
3c9c31b;Charles Harris;2013-08-15 09:58:58 -0700;Merge pull request #3534 from charris/nan-stat-functions
Add nanmean, nanvar, and nanstd functions.
==
==================
580a3b6;Charles Harris;2013-08-15 09:55:41 -0700;Merge pull request #3608 from charris/remove-1.8-diagonal-refs
DOC: Remove references to diagonal changes in 1.8.
==
==================
4d6575b;Charles Harris;2013-08-15 09:53:55 -0700;Merge pull request #3601 from charris/document-npv-change
DOC: Note the new behavior of financial.npv in the 1.8.0 release notes.
==
==================
98e3a6c;Charles Harris;2013-08-11 18:05:00 -0600;DOC: Note the new behavior of financial.npv in the 1.8.0 release notes.
Closes #3389.

==

doc/release/1.8.0-notes.rst
==================
dc73e1b;Charles Harris;2013-08-12 23:31:47 -0600;DOC: Various fixes.
Fix typos and clarify some explanations. Document the changes in the return
values of nanargmin and nanargmax for all-NaN slices in the 1.8.0 release
notes.

==

doc/release/1.8.0-notes.rst
numpy/lib/nanfunctions.py
numpy/lib/tests/test_nanfunctions.py
==================
f9259c3;Ralf Gommers;2013-08-14 14:40:39 -0700;Merge pull request #3619 from charris/update-ABI-version-and-hash
Update abi version and hash
==
==================
50989f7;Charles Harris;2013-08-14 15:14:27 -0600;MAINT: Update API version and API hash.
In preparation for the 1.8 release, update the API version to
0x00000009 and the API hash to f99a02b75bd60205d1afe1eed080fd53.

==

numpy/core/code_generators/cversions.txt
numpy/core/code_generators/numpy_api.py
numpy/core/setup_common.py
==================
38d987d;Charles Harris;2013-08-14 15:10:40 -0600;BUG: Replace relative imports in cversions.py.
Scripts should not use relative imports as they won't work in a
non-package environment.

==

numpy/core/code_generators/cversions.py
==================
54cae69;Charles Harris;2013-08-14 08:26:44 -0700;Merge pull request #3617 from saschpe/master-postprocess-encoding
Explicitly set encoding to UTF-8 in postprocess.py
==
==================
5864961;Sascha Peilicke;2013-08-14 17:01:09 +0200;Explicitly set encoding to UTF-8 in postprocess.py
The default (ascii) encoding breaks:

python3.3 postprocess.py html build/html/*.html
Traceback (most recent call last):
  File "postprocess.py", line 59, in <module>
    main()
  File "postprocess.py", line 27, in main
    lines = process_html(fn, f.readlines())
  File "/usr/lib64/python3.3/encodings/ascii.py", line 26, in

    return codecs.ascii_decode(input, self.errors)[0]
UnicodeDecodeError: 'ascii' codec can't decode byte 0xc2 in
2309: ordinal not in range(128)

==

doc/postprocess.py
==================
d62f11d;njsmith;2013-08-13 02:02:25 -0700;Merge pull request #3612 from jnothman/patch-1
DOC fix legacy a.size() -> a.size in np.ravel docstring
==
==================
320a0ca;jnothman;2013-08-13 19:00:46 +1000;DOC fix legacy a.size() -> a.size in np.ravel docstring

==

numpy/core/fromnumeric.py
==================
a36ef7a;Charles Harris;2013-07-17 14:08:20 -0600;BUG: Regression test needs to ignore ComplexWarning.
This was raising a warning during tests.

==

numpy/core/tests/test_regression.py
==================
f8244a6;Charles Harris;2013-07-14 10:42:37 -0600;DOC: Document nanmean, nanvar, and nanstd in the 1.8.0 release notes.

==

doc/release/1.8.0-notes.rst
==================
eac46b4;Charles Harris;2013-07-13 18:11:03 -0600;TST: Add tests for the nansum, nanmean, nanvar, and nanstd.

==

numpy/lib/tests/test_nanfunctions.py
==================
c7dd1e5;Charles Harris;2013-06-23 15:47:59 -0600;MAINT: Refactor nanfunctions.
nanmax, nanmin
--------------
Add out and keepdims keywords.

nanargmin, nanargmax
--------------------
A NanWarning is raised if an all NaN slice detected. For all such
slices np.iingo(np.intp).min is returned as the index value.

nansum
------
The keywords dtype, out, and keepdims are added.

A FutureWarning is raised, as in the future the mean of an empty
slice after NaN replacement will be 0 instead of the current NaN.

nanmean, nanvar, nanstd
-----------------------
For all, if the input array is of inexact type then the dtype and out
parameters must be of inexact type if specified.  That insures that NaNs
can be returned when appropriate.

The nanmean function detects empty slices after NaN replacement and
raises a NanWarning. NaN is returned as the value for all such slices.

The nanmean and nanstd functions detect degrees of freedom <= 0 after
NaN replacement and raise a NanWarning. NaN is returned as the value for
all such slices.

==

doc/source/reference/routines.statistics.rst
numpy/lib/nanfunctions.py
numpy/testing/nosetester.py
==================
6a02d05;Charles Harris;2013-07-14 09:57:54 -0600;TST: Add more extensive tests for the mean, var, and std methods.
Test the mean, var, and std methods more extensively. In addition, add
tests that:

    Check that scalar return types ar what they should be.
    Check that ValueError is raised when ddof is too big.

==

numpy/core/tests/test_multiarray.py
numpy/core/tests/test_numeric.py
==================
02f5258;Charles Harris;2013-07-14 09:57:13 -0600;ENH: Make var and std methods raise error when ddof too big.
Currently the results may be infinite or negative. Instead, raise a
ValueError in this case.

==

numpy/core/_methods.py
==================
f16b12e;Charles Harris;2013-07-13 20:54:43 -0600;BUG: Make mean, sum, var, std methods return correct scalar type.
The return type could differ depending on whether or not the value
was a scalar.

==

numpy/core/_methods.py
==================
1b6b871;Charles Harris;2013-06-21 10:28:41 -0600;MAINT: Clean up core/_methods.py and core/fromnumeric.py
Use issubclass instead of issubdtype.
Add some blank lines.
Remove trailing whitespace.
Remove uneeded float casts since true_divide is default.
Clean up documentation a bit.

==

numpy/core/_methods.py
numpy/core/fromnumeric.py
==================
fcb0fef;Charles Harris;2013-06-20 20:44:54 -0600;MAINT: Separate nan functions into their own module.
New files lib/nanfunctions.py and lib/tests/test_nanfunctions.py are
added and both the previous and new nan functions and tests are moved
into them.

The existing nan functions moved from lib/function_base are:

    nansum, nanmin, nanmax, nanargmin, nanargmax

The added nan functions moved from core/numeric are:

    nanmean, nanvar, nanstd

==

numpy/core/_methods.py
numpy/core/fromnumeric.py
numpy/core/tests/test_numeric.py
numpy/lib/__init__.py
numpy/lib/function_base.py
numpy/lib/nanfunctions.py
numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_nanfunctions.py
==================
777b645;Benjamin Root;2013-05-15 22:09:23 -0400;TST: Added tests for nanmean(), nanvar(), nanstd()

==

numpy/core/_methods.py
numpy/core/tests/test_numeric.py
==================
aaac613;Benjamin Root;2013-05-02 00:50:39 -0400;ENH: Adding np.nanmean(), np.nanstd(), np.nanvar()

==

numpy/core/_methods.py
numpy/core/fromnumeric.py
==================
fc80023;Charles Harris;2013-08-12 18:24:06 -0700;Merge pull request #2893 from mwiebe/reduceat_empty
Reduceat regression fix
==
==================
b2bfdae;Mark Wiebe;2013-08-12 17:56:43 -0700;BUG: Fix additional zero-sized index case for ufunc.reduceat

==

numpy/core/src/umath/ufunc_object.c
==================
9b56a1d;Mark Wiebe;2013-08-12 16:56:38 -0700;TST: Add test for additional ufunc.reduceat empty parameter case

==

numpy/core/tests/test_umath.py
==================
3bd8e31;Mark Wiebe;2013-01-17 15:12:26 -0800;TST: Change reduceat empty test to use i4 indices
On 32-bit platforms, was failing in casting the test
i8 index to i4. It may be desirable to allow this
in reduceat, but that change is independent of this pull
request.

==

numpy/core/tests/test_umath.py
==================
e083cea;Mark Wiebe;2013-01-07 10:57:46 -0800;BUG: Fix ufunc.reduceat regression with empty index (gh-2892)

==

numpy/core/src/umath/ufunc_object.c
==================
2fe0783;Mark Wiebe;2013-01-07 09:04:18 -0800;TST: Add test for reduceat ufunc regression on zero-sized array

==

numpy/core/tests/test_umath.py
==================
dd2717f;Charles Harris;2013-08-12 17:27:57 -0700;Merge pull request #3609 from mwiebe/fill_struct_from_tuple
Bugfix: Regression when filling struct from tuple
==
==================
6cae185;Mark Wiebe;2013-08-12 17:09:01 -0700;BLD: Fix build on MSVC (no uint64_t, use npy_uint64)

==

numpy/core/src/umath/struct_ufunc_test.c.src
==================
8c0c775;Mark Wiebe;2013-01-07 16:15:57 -0800;BUG: Fix to allow x.fill(tuple) where x is a struct array

==

numpy/core/src/multiarray/convert.c
==================
66ad5a1;Mark Wiebe;2013-01-07 15:58:44 -0800;TST: Test for x.fill(tuple) where x is a struct array

==

numpy/core/tests/test_multiarray.py
==================
df1aa99;Charles Harris;2013-08-12 15:03:47 -0600;DOC: Remove references to diagonal changes in 1.8.
Not happening. Also remove reference to selecting multiple fields out of
an array returning a view from 1.8.0 release notes.

Closes #3228.

==

doc/release/1.8.0-notes.rst
numpy/core/fromnumeric.py
numpy/core/src/multiarray/arrayobject.c
==================
505dc05;Charles Harris;2013-08-12 09:58:02 -0700;Merge pull request #3607 from stefanv/select_doc_typos
DOC: Fix small typos in partition docstring.
==
==================
f9f58e9;Charles Harris;2013-08-12 09:56:57 -0700;Merge pull request #3606 from stefanv/selection_bento_fix
BUG: Fix typo in core bento file.
==
==================
9e9bdc5;Stefan van der Walt;2013-08-12 18:19:41 +0200;DOC: Fix small typos in partition docstring.

==

numpy/core/fromnumeric.py
==================
147c7ac;Stefan van der Walt;2013-08-12 18:14:13 +0200;BUG: Fix typo in core bento file.

==

numpy/core/bento.info
==================
f8efcb6;Charles Harris;2013-08-12 06:28:41 -0700;Merge pull request #3360 from juliantaylor/selection-algo
 add quickselect algorithm and expose it via partition
==
==================
028007e;Charles Harris;2013-08-12 06:13:32 -0700;Merge pull request #3600 from charris/fix-iso-c90-breakage
BUG: Fix variable declaration after statement.
==
==================
4d9cd69;Julian Taylor;2013-05-23 23:53:23 +0200;ENH: implement median in terms of partition
Partitioning is sufficient to obtain the median and is much faster.
In the case of overwrite_input=True the resulting array will not be
fully sorted anymore.

==

doc/release/1.8.0-notes.rst
numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
9c4c1c4;Julian Taylor;2013-05-18 07:45:04 +0200;ENH: add quickselect algorithm and expose it via partition
A partition sorts the kth element into its sorted order and moves all
smaller elements before the kth element and all equal or greater
elements behind it.
The ordering of all elements in the partitions is undefined.

It is implemented via the introselection algorithm which has worst case
linear complexity compared to a full sort that has linearithmic
complexity.
The introselect algorithm uses a quickselect with median of three pivot
and falls back to a quickselect with median of median of five pivot if
no sufficient progress is made.

The pivots used during the search for the wanted kth element can
optionally be stored and reused for further partitionings of the array.
This is used by the python interface if an array of kth is provided to
the partitions function. This improves the performance of median and
which need to select two elements if the size of the array is even. A
percentile function interpolating between values also profits from this.

String selection is implemented in terms of quicksort which has the same
properties as a selection for now.

==

doc/release/1.8.0-notes.rst
doc/source/reference/arrays.ndarray.rst
doc/source/reference/c-api.array.rst
numpy/add_newdocs.py
numpy/core/bento.info
numpy/core/code_generators/numpy_api.py
numpy/core/fromnumeric.py
numpy/core/include/numpy/ndarraytypes.h
numpy/core/setup.py
numpy/core/src/multiarray/conversion_utils.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/methods.c
numpy/core/src/npysort/selection.c.src
numpy/core/src/private/npy_partition.h
numpy/core/src/private/npy_partition.h.src
numpy/core/tests/test_multiarray.py
numpy/matrixlib/tests/test_defmatrix.py
==================
cb0a4f0;Charles Harris;2013-08-11 17:09:09 -0600;BUG: Fix variable declaration after statement.
Some declarations that are not at the beginning of a block have slipped
into the code. This breaks compilation on Python3.4a1. The Numpy coding
standard also disallows that construct.

Closes #3598.

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/umath/loops.c.src
numpy/core/src/umath/test_rational.c.src
==================
0a16937;Charles Harris;2013-08-11 14:27:38 -0700;Merge pull request #3599 from charris/fix-operand-flags-test
BUG: Fix test_operand_flags test.
==
==================
43a6c3d;Ralf Gommers;2013-08-11 23:22:09 +0200;Merge branch 'pr/3591' into master.
See https://github.com/numpy/numpy/pull/3591

==
==================
ed908c7;Ralf Gommers;2013-08-11 23:21:20 +0200;DOC: fix some minor issues with histogram2d docstring formatting.

==

numpy/lib/twodim_base.py
==================
f62522c;Frank Breitling;2013-08-06 00:55:11 +0200;DOC: update example of histogram2d to doctest format.

==

numpy/lib/twodim_base.py
==================
a23803e;Charles Harris;2013-08-11 14:06:13 -0700;Merge pull request #3594 from juliantaylor/is_aligned_maint
MAINT: move npy_is_aligned to common.h
==
==================
3e34afc;Charles Harris;2013-08-11 14:04:18 -0700;Merge pull request #3526 from zyv/fix_int_inheritance
BUG: Fix PyType_FastSubclass() check for numpy.int_ and Py3k inheritance
==
==================
d10832b;Charles Harris;2013-08-11 14:34:25 -0600;BUG: Fix test_operand_flags test.
The test tests an inner loop in operand_flag_tests.c.src that expects
a long type, but it is tested using 'i8'. This fails when long is not
'i8'.

Closes #3363.

==

numpy/core/tests/test_ufunc.py
==================
41e6f06;Yury V. Zaytsev;2013-07-17 16:48:57 +0200;TST: Add regression test to check numpy.int_ inheritance on Py2/Py3
Signed-off-by: Yury V. Zaytsev <yury@shurup.com>

==

numpy/core/src/multiarray/multiarray_tests.c.src
numpy/core/tests/test_multiarray.py
==================
83a3daf;Yury V. Zaytsev;2013-07-16 17:12:55 +0200;BUG: Document that numpy.int_ doesn't inherit from int on Py3k
Signed-off-by: Yury V. Zaytsev <yury@shurup.com>

==

doc/source/reference/arrays.scalars.rst
==================
1234688;Yury V. Zaytsev;2013-07-16 11:29:22 +0200;BUG: Fix PyType_FastSubclass() check for numpy.int_
Signed-off-by: Yury V. Zaytsev <yury@shurup.com>

==

numpy/core/src/multiarray/multiarraymodule.c
==================
c6da120;Charles Harris;2013-08-10 10:53:34 -0700;Merge pull request #3517 from juliantaylor/memchr-all-any
ENH: use memchr for unit stride all/any
==
==================
78801c5;Charles Harris;2013-08-10 05:02:45 -0700;Merge pull request #3596 from ecprice/a
Fix documentation description of loop spam in interactive interpreter
==
==================
b29519a;Charles Harris;2013-08-10 05:00:58 -0700;Merge pull request #3597 from rgommers/testing-module-cleanup
MAINT: remove unused and broken parts of numpy.testing
==
==================
d6e8c91;Ralf Gommers;2013-08-10 10:42:59 +0200;MAINT: remove unused and broken parts of numpy.testing
Deprecate np.testing.importall - it's pointless and partially broken.

==

numpy/testing/__init__.py
numpy/testing/decorators.py
numpy/testing/nosetester.py
numpy/testing/nulltester.py
numpy/testing/numpytest.py
numpy/testing/utils.py
==================
b2de377;Eric Price;2013-08-09 01:24:50 -0400;Fix documentation description of loop spam in interactive interpreter

==

doc/source/reference/arrays.nditer.rst
==================
18b5c7c;Arink Verma;2013-08-10 03:43:18 +0530;Added test case for size of long based of os

==

numpy/core/tests/test_scalarmath.py
==================
e91acdb;Julian Taylor;2013-08-09 19:30:53 +0200;ENH: add NPY_LIKELY and NPY_UNLIKELY macros for branching hints
Use it for npy_is_aligned expecting alignments of the power of two.
Cuts down the time spent in _IsAligned by the testsuite relative
to the rest of multiarray.so from 0.6% to 0.4%

==

numpy/core/include/numpy/npy_common.h
numpy/core/setup_common.py
numpy/core/src/multiarray/common.h
==================
433f896;Julian Taylor;2013-08-09 18:44:44 +0200;MAINT: move npy_is_aligned to common.h
also make it and some other alignment operators a bit faster by using
unsigned integers and bitwise and if possible.
Make use of npy_is_aligned in _IsAligned too.

==

numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/common.h
numpy/core/src/private/lowlevel_strided_loops.h
==================
7819817;Julian Taylor;2013-07-11 20:23:36 +0200;ENH: improve numpy.all()/any()
Unroll the loop once and use pminub/pmaxub to save a slow pmovmskb
instruction. Improves performance by 50% on some AMD chips.
Also add a pure libc path using memcmp and memchr for non amd64 systems.
The libc path can be faster with a very modern cpu and libc version,
e.g. an i7 with glibc 2.17 is about 20% faster than our code but many
other tested platforms are much slower (2.12 xeon, core2duo) or same
speed (2.17 phenom).
The numpy code can be removed in future when faster libc versions and
cpus are more commonly available.

==

numpy/core/src/umath/loops.c.src
numpy/core/src/umath/simd.inc.src
numpy/core/tests/test_numeric.py
==================
6ee3aba;Arink Verma;2013-08-09 01:57:17 +0530;ENH: Added test cases to ensure the behavior of integer as it is. There is a need to add test case which ensure and maintain the behaviour of integer. As per pr #3567, which speed up integer scalar's operations by avoiding the conversion of integer to NumPy Scalar.

==

numpy/core/tests/test_scalarmath.py
==================
928289b;Charles Harris;2013-08-05 12:08:39 -0700;Merge pull request #3513 from seberg/0d-linalg
ENH: inv/solve work with empty inner and others empty outer array
==
==================
75ac90e;Charles Harris;2013-08-05 11:58:15 -0700;Merge pull request #3565 from charris/documentation-fixes
Documentation fixes for `basics.io.genfromtxt.rst` and `creation.py`
==
==================
870d89e;Charles Harris;2013-08-05 11:45:39 -0700;Merge pull request #3521 from arinkverma/gsoc_performance
ENH: Avoiding NPY_BEGIN_THREADS for small arrays can speed-up trivial_three_operand_loop by 5%
==
==================
3f99247;Charles Harris;2013-08-05 11:40:51 -0700;Merge pull request #3575 from seberg/issue-3458
BUG: Boolean assignment allowed writing to 0-sized array
==
==================
ec81426;Charles Harris;2013-08-05 11:40:29 -0700;Merge pull request #3576 from mspacek/patch-3
MAINT: fix typo in npy-format.txt
==
==================
d03cd89;Martin Spacek;2013-08-05 11:16:35 -0700;MAINT: fix typo in npy-format.txt

==

doc/neps/npy-format.txt
==================
f0910a1;Sebastian Berg;2013-08-05 19:36:58 +0200;BUG: Boolean assignment allowed writing to 0-sized array
This was because of the assumption that broadcasting works
if the dimension is not > 1, but correct is != 1.

Adepted from a patch provided by prossahl.

Closes gh-3458.

==

numpy/core/src/multiarray/mapping.c
numpy/core/tests/test_indexing.py
==================
a0ef063;Charles Harris;2013-08-05 10:25:26 -0700;Merge pull request #3568 from mspacek/patch-1
Fix doc typo
==
==================
5a5e86f;Arink Verma;2013-07-12 17:50:00 +0530;ENH: For smaller array, added macro NPY_BEGIN_THREADS_THRESHOLDED in ndarraytypes.h Avoiding NPY_BEGIN_THREADS for small arrays, can speed-up trivial_three_operand_loop by 5%. As releases of GIL, then quickly restoring just after small operation doesn't benefit.

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/umath/ufunc_object.c
==================
bf87e26;njsmith;2013-08-05 03:51:11 -0700;Merge pull request #3572 from pv/fix-runtests
MAINT: runtests: make it work on Fedora
==
==================
46e1d87;Pauli Virtanen;2013-08-05 12:57:49 +0300;MAINT: runtests: make it work on Fedora

==

runtests.py
==================
fa55f4c;Sebastian Berg;2013-07-10 14:19:42 +0200;ENH: inv/solve work with empty inner and others empty outer array
This makes the inverse of a 0x0 array simply be 0x0 again. It
also modifies the no-empty array check in favor of a no-empty
*inner* array, since the gufuncs seem to handle the other case
fine.

==

numpy/linalg/linalg.py
numpy/linalg/tests/test_linalg.py
==================
4ea064b;Martin Spacek;2013-08-04 09:55:31 -0700;Fix doc typo

==

numpy/lib/format.py
==================
645b9f5;Charles Harris;2013-08-02 14:36:39 -0600;Merge pull request 'gh-3497'
* gh-3497:
  BUG: Make np.insert check for out of bounds axis arguments.
  TST: add test for negative axis values in np.insert.
  BUG: Fix bug in np.insert when axis=-1

==
==================
ea76873;Félix Hartmann;2013-07-09 15:49:32 +0200;BUG: Make np.insert check for out of bounds axis arguments.
Also add test for IndexError exception when axis is out of bounds.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
496813f;Félix Hartmann;2013-07-03 15:15:55 +0200;TST: add test for negative axis values in np.insert.

==

numpy/lib/tests/test_function_base.py
==================
cb6fe84;Félix Hartmann;2013-07-03 00:16:58 +0200;BUG: Fix bug in np.insert when axis=-1

==

numpy/lib/function_base.py
==================
196398f;Charles Harris;2013-08-01 15:56:43 -0700;Merge pull request #3527 from dmuellner/master
Fix for the NumPy C-API deprecation mechanism.
==
==================
62282a9;dmuellner;2013-08-01 15:22:38 -0700;More tiny changes according to Charles Harris' comments.

==

numpy/core/include/numpy/ndarraytypes.h
==================
fb416a0;Charles Harris;2013-08-01 11:55:42 -0600;MAINT: Cleanup doc/source/user/basics.io.genfromtxt.rst.
Remove trailing whitespace.
Break long lines.
Fix some indentation.
Use the `::` directive to indicate interactive examples.

==

doc/source/user/basics.io.genfromtxt.rst
==================
eacca11;Jesús Gómez;2013-07-17 09:23:16 -0430;DOC: Fixes for doc/source/user/basics.io.genfromtxt.rst.
Add missing part of usecols negative index explanation and other
minor redaction fixes.

==

doc/source/user/basics.io.genfromtxt.rst
numpy/doc/creation.py
==================
5635b68;Charles Harris;2013-08-01 08:09:32 -0700;Merge pull request #3564 from larsmans/master
DOC: np.char.startswith checks a prefix, not a suffix
==
==================
2462946;Lars Buitinck;2013-08-01 14:46:01 +0200;DOC: np.char.startswith checks a prefix, not a suffix

==

numpy/core/defchararray.py
==================
b5991e0;dmuellner;2013-07-29 23:02:37 -0700;Reflect file name change in setup.py.

==

numpy/core/setup.py
==================
c65472e;dmuellner;2013-07-29 22:52:10 -0700;Fixed typo.

==

numpy/core/include/numpy/ndarraytypes.h
==================
822b07c;dmuellner;2013-07-29 22:49:08 -0700;Changes according to Charles Harris' comments.

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/include/numpy/npy_1_7_deprecated_api.h
==================
713d045;dmuellner;2013-07-29 22:48:01 -0700;Changes according to Charles Harris' comments.

==

numpy/core/include/numpy/npy_1_7_deprecated_api.h
numpy/core/include/numpy/npy_deprecated_api.h
==================
b307a8a;Charles Harris;2013-07-29 18:26:55 -0600;Merge branch 'numpy-swig' into gh-3451
* numpy-swig:
  Added more mentions of the SuperTensor tests and corrected the number of typemaps and tests (currently 1427 unit tests passed with 'make test': 372+324+324+324+40+19+24)
  Added mention of the SuperTensor tests in the README file
  Removed 'static' keyword from pyfragments.swg altoghether. I've had the following errors In function ‘SWIG_AsVal_long’: error: initialiser element is not constant In function ‘SWIG_AsVal_unsigned_SS_long’: error: initialiser element is not constant, BOTH in Windows/MinGW and Linux when compiling with gcc
  Added tests for 4D tensors. Now using a consistant cubes,slices,rows,columns index order everywhere.
  cleaned-up loop indexes in Tensor.cxx
  cosmetic changes to numpy.i
  Fixed the capsule / cobject memory destructor. Added types to deal with lists of arrays and lists of tensors as input and inplace types.
  removed the note about testResize1 failing in testArray.py
  fixed the testResize1 test in testArray.py -- Changed order of the resize arguments in Array2.h and replaced len(XXXnumpyarray) with XXXnumpyarray.size
  Minor adjustments to numpy.i
  Updated numpy.i testing documentation
  Updated the numpy.i documentation
  Initialize all DATA_TYPE* data_temp variables to NULL
  Added Egor's ARGOUTVIEWM_ARRAY3 typemaps
  Re-instated a Python 3 fix
  Removed doc from list of sub-directories
  Upgrade numpy.i
  Got rid of a unit test

Conflicts:
	doc/sphinxext
	doc/swig/test/testFortran.py

==
==================
32206dd;Charles Harris;2013-07-29 10:35:43 -0700;Merge pull request #2941 from raulcota/avoid_create-kill_npscalars
Avoid conversion to NumPy Scalar
==
==================
f9c225f;Charles Harris;2013-07-29 09:28:10 -0700;Merge pull request #3559 from hklemm/patch-1
Update structured_arrays.py
==
==================
0f44fe4;Charles Harris;2013-07-29 10:09:16 -0600;MAINT: Remove extraneous remark.
In numpy/core/src/npymath/npy_math_private.h the /* my machine */
comment is not informative.

==

numpy/core/src/npymath/npy_math_private.h
==================
7bd1f13;Andreas Schwab;2012-01-11 14:47:58 +0100;ENH: Add support for Motorola extended float format

==

numpy/core/include/numpy/npy_cpu.h
numpy/core/include/numpy/npy_endian.h
numpy/core/setup.py
numpy/core/setup_common.py
numpy/core/src/npymath/npy_math_private.h
numpy/core/src/private/npy_fpmath.h
==================
7910692;Charles Harris;2013-07-29 09:44:42 -0600;STY: Break long lines in numpy/distutils/log.py.

==

numpy/distutils/log.py
==================
933000d;Tomas Tomecek;2013-07-25 15:57:09 +0200;MAINT: typo fix in logging message
The logging message in numpy.distutils.log.set_threshold
mispelled threshold.

==

numpy/distutils/log.py
==================
c0a61b2;hklemm;2013-07-28 23:07:23 +0200;Update structured_arrays.py
The behaviour documented did not match the actual behaviour of numpy. Explanation changed and the code example updated.
==

numpy/doc/structured_arrays.py
==================
895866d;njsmith;2013-07-26 08:42:27 -0700;Merge pull request #3550 from endolith/patch-1
DOC:Some minor proofreading of Tests introduction
==
==================
4259c4e;endolith;2013-07-25 12:49:16 -0400;DOC:Revert ``assert()`` back to ``assert`` (statement)

==

doc/TESTS.rst.txt
==================
dc9ff0d;Charles Harris;2013-07-25 09:24:40 -0700;Merge pull request #3547 from pv/numpydoc-move
Numpydoc move
==
==================
fab4c0e;Pauli Virtanen;2013-07-25 13:43:34 +0300;DOC: fix HOWTO_BUILD_DOCS.rst.txt

==

doc/HOWTO_BUILD_DOCS.rst.txt
==================
3903928;Pauli Virtanen;2013-07-24 19:27:02 +0300;Add Numpydoc as a git submodule

==

.gitmodules
doc/sphinxext
==================
f4f7c53;Pauli Virtanen;2013-07-24 19:10:16 +0300;Move numpydoc to a separate repository

==

doc/sphinxext/LICENSE.txt
doc/sphinxext/MANIFEST.in
doc/sphinxext/README.txt
doc/sphinxext/numpydoc/__init__.py
doc/sphinxext/numpydoc/comment_eater.py
doc/sphinxext/numpydoc/compiler_unparse.py
doc/sphinxext/numpydoc/docscrape.py
doc/sphinxext/numpydoc/docscrape_sphinx.py
doc/sphinxext/numpydoc/linkcode.py
doc/sphinxext/numpydoc/numpydoc.py
doc/sphinxext/numpydoc/phantom_import.py
doc/sphinxext/numpydoc/plot_directive.py
doc/sphinxext/numpydoc/tests/test_docscrape.py
doc/sphinxext/numpydoc/tests/test_linkcode.py
doc/sphinxext/numpydoc/tests/test_phantom_import.py
doc/sphinxext/numpydoc/tests/test_plot_directive.py
doc/sphinxext/numpydoc/tests/test_traitsdoc.py
doc/sphinxext/numpydoc/traitsdoc.py
doc/sphinxext/setup.py
==================
146eb6a;njsmith;2013-07-25 07:16:00 -0700;Merge pull request #3549 from pv/doc-theme
DOC: use the new scipy-sphinx-theme in the documentation
==
==================
1eea247;endolith;2013-07-25 09:48:32 -0400;DOC:Some minor proofreading of Tests introduction

==

doc/TESTS.rst.txt
==================
bf0134d;Pauli Virtanen;2013-07-25 15:04:28 +0300;DOC: put release notes in inverse order

==

doc/source/release.rst
==================
29d47bf;Pauli Virtanen;2013-07-25 13:51:49 +0300;MAINT: ensure the sphinx theme gets included in source tarballs

==

MANIFEST.in
==================
41eeed7;Pauli Virtanen;2013-07-24 18:49:27 +0300;DOC: update scipy.org doc build Makefile targets

==

doc/Makefile
==================
df21983;Pauli Virtanen;2013-07-24 18:43:41 +0300;DOC: use the new scipy-sphinx-theme in the documentation

==

.gitmodules
doc/scipy-sphinx-theme
doc/source/_static/scipy.css
doc/source/_templates/indexsidebar.html
doc/source/_templates/layout.html
doc/source/conf.py
doc/source/scipyshiny_small.png
==================
756dad2;njsmith;2013-07-24 12:56:24 -0700;Merge pull request #3541 from jeromekelleher/patch-1
BUG: make preprocessor tests consistent in halffloat.c
==
==================
8982c77;njsmith;2013-07-24 04:36:38 -0700;Merge pull request #3546 from nils-werner/cumsum-diff-link
Link cumsum and diff to one another...
==
==================
62e3e62;Nils Werner;2013-07-24 13:06:53 +0200;Link cumsum and diff to one another as theyre roughly the inverse of each other

==

numpy/core/fromnumeric.py
numpy/lib/function_base.py
==================
7b2f20b;Ralf Gommers;2013-07-23 23:16:16 -0700;Merge pull request #3538 from michaelaye/patch-1
Docstring: point to correct equivalent function (one word change)
==
==================
6352343;K.-Michael Aye;2013-07-23 18:15:10 -0700;Repaired my misunderstanding and added np.extract
I overlooked that np.compress and ndarray.compress are different things and wrongly assumed that it was a typo. I corrected that and added np.extract for equivalency for 1-D arrays.
==

numpy/core/fromnumeric.py
==================
e6a547b;jeromekelleher;2013-07-21 20:22:22 +0200;Update halffloat.c
Corrected preprocessor form.
==

numpy/core/src/npymath/halffloat.c
==================
90ececa;seberg;2013-07-20 14:16:03 -0700;Merge pull request #3539 from WarrenWeckesser/bug-norm-performance
BUG: linalg: norm was computing and then ignoring a product
==
==================
80bc690;Warren Weckesser;2013-07-20 08:12:27 -0400;MAINT: linalg: some more clean up in norm: 'nd' was defined but not used

==

numpy/linalg/linalg.py
==================
ffb45c5;Warren Weckesser;2013-07-19 21:09:45 -0400;BUG: linalg: norm was computing and then ignoring a product

==

numpy/linalg/linalg.py
==================
9c93f75;K.-Michael Aye;2013-07-19 15:21:09 -0700;Docstring: point to correct equivalent function
np.compress' "See also" pointed to itself instead to equivalent np.extract
==

numpy/core/fromnumeric.py
==================
c5694c5;njsmith;2013-07-18 05:41:46 -0700;Merge pull request #3531 from fkbreitl/master
Updated documentation for histogram2d() in twodim_base.py according to discussion
==
==================
fc95961;Frank Breitling;2013-07-17 18:33:18 +0200;Update twodim_base.py

==

numpy/lib/twodim_base.py
==================
3f8a986;Daniel;2013-07-17 00:31:42 +0200;Fix for the NumPy C-API deprecation mechanism.

==

numpy/core/include/numpy/npy_deprecated_api.h
==================
c067c15;Ralf Gommers;2013-07-16 12:28:18 -0700;Merge pull request #3520 from charris/replace-warningmanager
Replace use of WarningManager by warnings.catch_warnings and then deprecate it.
==
==================
5b10b1b;Frank Breitling;2013-07-13 15:44:49 +0200;Update twodim_base.py

==

numpy/lib/twodim_base.py
==================
b55f275;Charles Harris;2013-07-12 16:08:22 -0700;Merge pull request #3522 from charris/fix-test_api
MAINT: Fix Python version dependent test.
==
==================
cb2c887;Charles Harris;2013-07-10 18:06:55 -0600;MAINT: Fix Python version dependent test.
The buffer test in numpy/core/tests/test_api.py was apparently
testing for incorrect behavior that was corrected in Python 2.7.5.
This PR changes the test to check for the correct results and makes
running it depend on Python version.

Closes #3512.

==

numpy/core/tests/test_api.py
==================
05a15c8;Charles Harris;2013-07-11 20:29:08 -0600;MAINT: Remove uses of the WarningManager class.
WarningManager was a workaround for the lack of the with statement
in Python versions < 2.6. As those versions are no longer supported
it can be removed.

Deprecation notes are added to WarningManager and WarningMessage, but
to avoid a cascade of messages in third party apps, no warnings are
raised at this time, that can be done later.

Closes #3519.

==

numpy/core/tests/test_api.py
numpy/core/tests/test_einsum.py
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_regression.py
numpy/lib/tests/test_io.py
numpy/lib/utils.py
numpy/ma/tests/test_core.py
numpy/ma/tests/test_mrecords.py
numpy/random/__init__.py
numpy/testing/decorators.py
numpy/testing/nosetester.py
numpy/testing/utils.py
==================
a053a43;Charles Harris;2013-07-11 17:16:42 -0700;Merge pull request #3518 from charris/use-errstate-context-manager
MAINT: Use np.errstate context manager.
==
==================
e1c4806;njsmith;2013-07-11 15:54:49 -0700;Merge pull request #3516 from charris/remove-outdated-version-checks
MAINT: Remove outdated version checks.
==
==================
2f1174d;Charles Harris;2013-07-11 16:49:04 -0600;MAINT: Use np.errstate context manager.
Now that Python < 2.6 is no longer supported we can use the errstate
context manager in places where constructs like
```
    old = seterr(invalid='ignore')
    try:
        blah
    finally:
       seterr(**old)
```
were used.

==

numpy/core/arrayprint.py
numpy/core/machar.py
numpy/core/numeric.py
numpy/core/tests/test_half.py
numpy/core/tests/test_machar.py
numpy/core/tests/test_numeric.py
numpy/core/tests/test_regression.py
numpy/core/tests/test_scalarmath.py
numpy/core/tests/test_umath.py
numpy/core/tests/test_umath_complex.py
numpy/lib/financial.py
numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_type_check.py
numpy/linalg/linalg.py
numpy/ma/core.py
numpy/ma/tests/test_core.py
numpy/ma/tests/test_old_ma.py
numpy/ma/tests/test_subclassing.py
numpy/ma/timer_comparison.py
numpy/testing/utils.py
==================
28eadc0;Charles Harris;2013-07-11 12:08:49 -0600;MAINT: Remove outdated version checks.
Because Numpy 1.8.0 will no longer supports Python versions < 2.6 we
no longer need to check for that and can also remove the code that is
specific to those earlier versions.

To make this a bit safer, the toplevel setup.py file now contains a
check of the Python version number and raises an error when run by an
unsupported version.

==

doc/sphinxext/setup.py
numpy/core/blasdot/_dotblas.c
numpy/core/include/numpy/ndarrayobject.h
numpy/core/include/numpy/npy_common.h
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/buffer.c
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/datetime_busdaycal.c
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/flagsobject.c
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/mapping.h
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/nditer_pywrap.c
numpy/core/src/multiarray/number.c
numpy/core/src/multiarray/numpymemoryview.c
numpy/core/src/multiarray/numpymemoryview.h
numpy/core/src/multiarray/numpyos.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/multiarray/sequence.c
numpy/core/src/private/npy_pycompat.h
numpy/core/src/scalarmathmodule.c.src
numpy/core/src/umath/test_rational.c.src
numpy/core/src/umath/ufunc_object.c
numpy/f2py/src/fortranobject.h
numpy/lib/src/_compiled_base.c
numpy/numarray/_capi.c
setup.py
==================
12c5fc0;Charles Harris;2013-07-10 10:00:35 -0700;Merge pull request #3509 from arinkverma/gsoc_performance
ENH: added short path scalar array in get_ufunc_arguments from ufunc_object.c
==
==================
6815f86;Arink Verma;2013-07-10 20:53:47 +0530;ENH: check for the same object in can_cast_scalar_to from convert_datatype.c Check if two dtypes references to the same object in can_cast_scalar_to from convert_datatype.c, then the result is always OK

==

numpy/core/src/multiarray/convert_datatype.c
==================
4c3ad43;Arink Verma;2013-07-10 19:52:31 +0530;ENH: added check for scalar array in PyArray_FromArray from ctors.c Check if object is of array with newtype is NULL. If so return it directly instead of checking for casting.

==

numpy/core/src/multiarray/ctors.c
==================
49a587c;Charles Harris;2013-07-09 06:51:44 -0700;Merge pull request #3510 from mwtoews/master
Add regression tests for pickleable record arrays
==
==================
6eeb612;Charles Harris;2013-07-09 06:35:23 -0700;Merge pull request #3501 from inducer/master
Fix "numpy scalar * array-like == performance horror"
==
==================
64d5832;mwtoews;2013-07-09 22:45:46 +1200;Add regression tests for pickleable record arrays

==

numpy/core/tests/test_records.py
==================
4441bdd;Andreas Kloeckner;2013-07-08 23:11:03 -0400;BUG: Check earlier for higher priority in binary operators, add test
Fixes #3375

==

doc/release/1.8.0-notes.rst
numpy/core/src/multiarray/number.c
numpy/core/tests/test_ufunc.py
==================
884c403;Charles Harris;2013-07-08 15:30:20 -0700;Merge pull request #3491 from ContinuumIO/astype_fix2
Fix creation of string arrays from object types
==
==================
f1c7766;Charles Harris;2013-07-08 15:26:54 -0700;Merge pull request #3507 from juliantaylor/vectorize-cmp
ENH: vectorize boolean comparisons of floats
==
==================
01a9081;Julian Taylor;2013-06-29 17:02:53 +0200;ENH: vectorize boolean comparisons of floats
the new code will more often propagate the invalid floating point
exception if comparing against nan, so allclose now ignores it (but
still returns False)

==

numpy/core/numeric.py
numpy/core/src/umath/loops.c.src
numpy/core/src/umath/simd.inc.src
numpy/core/tests/test_numeric.py
==================
97372db;Jay Bourque;2013-07-08 12:24:24 -0500;STY: Formatting changes

==

numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/ctors.c
numpy/core/tests/test_api.py
==================
edd989e;Jay Bourque;2013-06-29 15:14:11 -0500;BUG: Fix creation of string arrays from object types

==

numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/ctors.c
numpy/core/tests/test_api.py
==================
021d52a;Arink Verma;2013-07-08 23:06:03 +0530;ENH: added check for scalar array in PyArray_FromArray from ctors.c Check if object is of array with newtype is NULL. If so return it directly instead of checking for casting.

==

numpy/core/src/multiarray/ctors.c
==================
cfe411b;njsmith;2013-07-08 09:16:56 -0700;Merge pull request #3500 from charris/fix-3592
Fix exceptions being swallowed by fromiter.
==
==================
9b3e719;Arink Verma;2013-07-08 15:13:01 +0530;ENH: added check for scalar array in PyArray_FromArray from ctors.c Check if object is of array dimension zero with newtype is NULL. If so return it directly instead of checking for casting.

==

numpy/core/src/umath/ufunc_type_resolution.c
==================
55bc296;Arink Verma;2013-07-08 15:00:00 +0530;ENH: added check for scalar array in PyArray_FromArray from ctors.c Check if object is of array dimension zero with newtype is NULL. If so return it directly instead of checking for casting.

==

numpy/core/src/multiarray/ctors.c
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/ufunc_type_resolution.c
==================
df041a9;Charles Harris;2013-07-07 16:15:55 -0700;Merge pull request #3506 from josteinbf/arraypad-padwidth-zero
Allow pad_width of zero in np.pad
==
==================
7c46223;Arink Verma;2013-07-06 18:40:38 +0530;ENH: added check for scalar array in get_ufunc_arguments from ufunc_object.c Check if object is of array dimension zero, then avoid heavy calls like PyArray_FromAny. Hence passing obj to out_op PyArrayObject unchanged. Also PyArray_FromAny(obj,NULL,0,0,0,NULL) calls PyArray_FromArray(obj,NULL,0) which return original obj

==

numpy/core/src/umath/ufunc_object.c
==================
ea45134;Jostein Bø Fløystad;2013-07-05 18:17:26 +0200;TST: New test to ensure np.pad allows pad_width of zero.

==

numpy/lib/tests/test_arraypad.py
==================
c6ce294;Jostein Bø Fløystad;2013-07-05 17:35:45 +0200;BUG: Allow to pad arrays by zero entries.
np.pad will now accept a pad_width containing zeros. The functionality
was already implemented, but validation of input was too strict.

==

numpy/lib/arraypad.py
==================
b0f4e77;Charles Harris;2013-07-03 12:12:17 -0600;STY: Fix trailing whitespace and replace test doctrings by comments.

==

numpy/core/tests/test_numeric.py
==================
f2bec65;Charles Harris;2013-07-03 12:10:48 -0600;BUG: Remove xrange that slipped into test_numeric.py.

==

numpy/core/tests/test_numeric.py
==================
fa9d813;Fernando Perez;2013-06-25 11:42:42 -0500;TST: Add tests for exceptions raised by fromiter.
This improves the testing of the edge cases.

Work done with @certik.

==

numpy/core/tests/test_numeric.py
==================
0c1f94d;Fernando Perez;2013-06-25 11:16:43 -0500;BUG: Fix exceptions being swallowed by fromiter.
All exceptions from underlying iterator were being collapsed into a
generic one. This allows the original exception to propagate.

Closes gh-2592.

==

numpy/core/src/multiarray/ctors.c
==================
79188b2;njsmith;2013-07-03 04:12:36 -0700;Merge pull request #3495 from charris/make-fromroots-return-monic
BUG: Fix failure to return monic polynomials from roots.
==
==================
0739b6b;Charles Harris;2013-07-02 18:30:06 -0600;BUG: Fix failure to return monic polynomials from roots.
This bug affected the various polynomial class methods fromroots due to
the ability to specify both window and domain. In that circumstance the
roots are mapped from the domain to the window by the substitution
`x = off + scl*x`. The polynomial that was being generated was monic in
the window before substitution, but if scl was not one it was not monic
considered as a function of the variable x in the domain. The fix is to
divide the generated coefficients by `scl ** deg` so that the scaling of
the highest degree term after substitution is canceled.

It might be better to make the scaling optional in the future, but this
fix makes the result match the documentation.

Closes #3467.

==

numpy/polynomial/polytemplate.py
numpy/polynomial/tests/test_classes.py
==================
966fb71;Charles Harris;2013-07-02 07:36:53 -0700;Merge pull request #3489 from dmuellner/master
Fix: Documentation bug for PyArray_GETPTR1
==
==================
cb7c7be;Daniel;2013-07-01 11:22:30 -0700;Corrected typos in documentation for PyArray_GETPTR1.

==

doc/source/reference/c-api.array.rst
==================
29dcc54;njsmith;2013-06-30 10:11:04 -0700;Merge pull request #2875 from ahojnnes/array-init
Add convenience functions nans, infs, nans_like, infs_like 
==
==================
70cb9e5;Johannes Schönberger;2013-06-30 12:31:39 +0200;Rename filled, filled_like to full, full_like

==

doc/release/1.8.0-notes.rst
numpy/core/numeric.py
numpy/core/tests/test_numeric.py
==================
24a0aa5;Charles Harris;2013-06-29 09:16:29 -0700;Merge pull request #3461 from charris/fix-load-resource-warning
BUG: Make np.load transfer file ownership to the returned NpzFile.
==
==================
d4e70cf;Robert Kern;2013-06-29 07:46:53 -0700;Merge pull request #3483 from HaroldMills/bugfix-binomial
BUG: numpy.random.binomial raised ValueError for n == 0
==
==================
1d67e26;Ralf Gommers;2013-06-29 03:29:37 -0700;Merge pull request #3468 from RelentlessIdiot/numpydoc_returns_unnamed
ENH: Allow unnamed return values in Returns section of doc string
==
==================
974d8e3;HaroldMills;2013-06-28 16:58:58 -0400;BUG: numpy.random.binomial raised ValueError for n == 0
Range test for n was incorrect.

Closes #3480

==

numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
numpy/random/tests/test_random.py
==================
069e9b0;Charles Harris;2013-06-25 15:17:14 -0700;Merge pull request #3472 from juliantaylor/load-lib
BUG: add module extensions to load_library search list
==
==================
6c433aa;Julian Taylor;2013-06-25 19:13:38 +0200;BUG: add module extensions to load_library search list
on mac, windows and linux (with >= py3.2) shared libraries and loadable
module have different extensions, so check both for all platforms.

==

numpy/ctypeslib.py
==================
2241e6c;Rob Ruana;2013-06-25 01:29:56 -0400;ENH: Allow unnamed return values in Returns section of doc string
Developers usually only need the type of a return value
followed by a brief description. However, in some cases
providing a name for a return value can make the documentation
clearer. This enhancement changes the format of the Returns
section such that the type is required, and the name is
optional:

    Returns
    -------
    int
        Description of anonymous integer return value.
    x : str
        Description of string return value named `x`.

With this change, if a colon is not present, then the entire
line is interpreted as the return type. In all other cases,
the Returns section is interpreted according to the current
rules.

Consistent with the current format, if a colon is present, then
the text to the left of the colon is interpreted as the name;
and the text to the right of the colon is interpreted as the
type. This makes the proposed change backwards compatible with
existing documentation.

==

doc/HOWTO_DOCUMENT.rst.txt
doc/example.py
doc/sphinxext/numpydoc/docscrape.py
doc/sphinxext/numpydoc/docscrape_sphinx.py
doc/sphinxext/numpydoc/tests/test_docscrape.py
==================
596795b;Charles Harris;2013-06-23 08:17:30 -0700;Merge pull request #3466 from juliantaylor/vectorize-bool
vectorize boolean reductions 
==
==================
f361c6b;Charles Harris;2013-06-23 06:14:04 -0700;Merge pull request #3429 from juliantaylor/copy-unroll
ENH: tell gcc to unroll strided copy loops
==
==================
1ae0622;Julian Taylor;2013-06-23 12:27:56 +0200;ENH: vectorize boolean reductions
Improves performance by a factor of 5 to 10 depending on the cpu.
These operations currently can't be autovectorized by gcc 4.8.

==

numpy/core/src/umath/loops.c.src
numpy/core/src/umath/simd.inc.src
==================
e2a74ee;Julian Taylor;2013-06-23 12:25:43 +0200;MAINT: make binary_scalar2 static and put __m128i into a template

==

numpy/core/src/umath/simd.inc.src
==================
2ea4cb3;Charles Harris;2013-06-21 16:20:04 -0600;BUG: Make np.load transfer file ownership to the returned NpzFile.
This assures that when the loaded file is closed it also closes the
file descriptor, avoiding a resource warning in Python3.

Closes #3457.

==

numpy/lib/npyio.py
numpy/lib/tests/test_io.py
==================
6dd20ff;Charles Harris;2013-06-20 19:53:42 -0700;Merge pull request #3460 from charris/fix-polynomial-companion-matrices
BUG: Campanion Matrix was scalar, not matrix for degree 1.
==
==================
12e06a2;Charles Harris;2013-06-20 16:49:49 -0600;BUG: Campanion Matrix was scalar, not matrix for degree 1.
The companion matrices returned by the various polynomial types was
a scalar in the degree one case instead of a 2-D array. Fix that and
add a test to check for that result.

Closes #3459.

==

numpy/polynomial/chebyshev.py
numpy/polynomial/hermite.py
numpy/polynomial/hermite_e.py
numpy/polynomial/laguerre.py
numpy/polynomial/legendre.py
numpy/polynomial/polynomial.py
numpy/polynomial/tests/test_chebyshev.py
numpy/polynomial/tests/test_hermite.py
numpy/polynomial/tests/test_hermite_e.py
numpy/polynomial/tests/test_laguerre.py
numpy/polynomial/tests/test_legendre.py
numpy/polynomial/tests/test_polynomial.py
==================
b375592;Charles Harris;2013-06-19 17:53:07 -0700;Merge pull request #3455 from Hoops/copy_and_swap_stride_dst
Possible memory overwrite in copy_and_swap
==
==================
006544a;Charles Harris;2013-06-19 13:37:42 -0700;Merge pull request #3456 from juliantaylor/uninitialized-use
BUG: fix uninitialized-use on invalid sort kind
==
==================
1b6926f;Julian Taylor;2013-06-19 21:53:57 +0200;BUG: fix uninitialized-use on invalid sort kind
orign is unset at that point but used in the fail goto,
can probably only be triggered by using the C-api wrong.

==

numpy/core/src/multiarray/item_selection.c
==================
074a40c;Charles Harris;2013-06-17 09:17:30 -0700;Merge pull request #3453 from seberg/fix-enhanced-dtype-detection
BUG: Fix failing python long behaviour and possible heisen bug
==
==================
ea0da13;Sebastian Berg;2013-06-17 15:08:00 +0200;BUG: Fix failing python long behaviour and possible heisen bug
The priority error fixes np.float_(64) + python_long not working
anymore. The second change reformats the
PyArray_GetAttrString_SuppressException to avoid a possible
heisenbug decrefing an object before use.

==

numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_regression.py
==================
8f547d3;Charles Harris;2013-06-16 17:40:58 -0700;Merge pull request #3448 from efiring/ma_compress
BUG: np.ma.compress treated inputs in wrong order; closes #2495
==
==================
5e977d8;Charles Harris;2013-06-16 17:39:13 -0700;Merge pull request #3447 from efiring/ma_mvoid_len
BUG: add __len__ method to ma.mvoid; closes #576
==
==================
f70632f;Egor Zindy;2013-06-16 22:50:40 +0100;Added more mentions of the SuperTensor tests and corrected the number of typemaps and tests (currently 1427 unit tests passed with 'make test': 372+324+324+324+40+19+24)

==

doc/source/reference/swig.interface-file.rst
doc/source/reference/swig.testing.rst
==================
f56411b;Egor Zindy;2013-06-16 21:59:27 +0100;Added mention of the SuperTensor tests in the README file

==

doc/swig/README
==================
1ed31cd;Egor Zindy;2013-06-16 21:46:36 +0100;Removed 'static' keyword from pyfragments.swg altoghether. I've had the following errors In function ‘SWIG_AsVal_long’: error: initialiser element is not constant In function ‘SWIG_AsVal_unsigned_SS_long’: error: initialiser element is not constant, BOTH in Windows/MinGW and Linux when compiling with gcc

==

doc/swig/pyfragments.swg
==================
216d8cb;Eric Firing;2013-06-15 15:31:52 -1000;BUG: add __len__ method to ma.mvoid; closes #576

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
c2465b6;Eric Firing;2013-06-15 16:47:55 -1000;BUG: np.ma.compress treated inputs in wrong order; closes #2495

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
c654c04;Andrew Horton;2013-06-16 18:48:58 +0100;Call to byte_swap_vector should use dst, not d1, because this is modified by the call to the strided memcpy and will end up pointing after the end of the destination buffer in that case.

==

numpy/core/src/multiarray/ctors.c
==================
2a5c2c8;Charles Harris;2013-06-16 06:48:13 -0700;Merge pull request #3436 from juliantaylor/vectorize-bool
ENH: vectorize boolean logical &&, ||, abs and not
==
==================
bb8c89d;Charles Harris;2013-06-16 06:17:53 -0700;Merge pull request #3449 from efiring/mvoid_setitem
BUG: field assignment in masked array did not reset mask; closes #2403
==
==================
8e5ed9a;Ralf Gommers;2013-06-16 09:42:14 +0200;Merge PR-3444 from 'jmozmoz:master' into master.
https://github.com/numpy/numpy/pull/3444
Fixed compilation with Cygwin.

==
==================
a111f60;jmozmoz;2013-06-15 20:55:30 +0200;MAINT: fix compilation issue gh-3443.

==

numpy/core/include/numpy/ufuncobject.h
==================
fb4edf7;Eric Firing;2013-06-15 21:33:17 -1000;BUG: field assignment in masked array did not reset mask; closes #2403
The previous behavior when setting a field after indexing to
select an element was suitable for the hard mask case, but
not for the default soft mask.  In addition, the _hardmask
value was not being set at all in the mvoid instance.  With
this changeset, the _hardmask is passed in and __setitem__
takes it into account.

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
7dc6576;Charles Harris;2013-06-15 15:39:39 -0700;Merge pull request #3445 from juliantaylor/revert-x86-unaligned-access
BUG: Revert "ENH: enable unaligned loads on x86"
==
==================
9871460;Julian Taylor;2013-06-16 00:18:12 +0200;BUG: Revert "ENH: enable unaligned loads on x86"
This reverts commit aef286debfd11a62f1c337dea55624cee7fd4d9e.
x86 platform works with unaligned access but the compiler is allowed to assume
all data is aligned to its size by the C standard. This means it can vectorize
instructions peeling only by the size of the type, if the data is not aligned
to this size one ends up with data not correctly aligned for SSE instructions
(16 byte).
So this flag can only be enabled if autovectorization is disabled.

==

numpy/core/src/multiarray/lowlevel_strided_loops.c.src
==================
e036deb;Charles Harris;2013-06-15 09:56:29 -0700;Merge pull request #3440 from WarrenWeckesser/bug-ma-average
BUG: ma: ma.average didn't handle complex arrays correctly (issue gh-2684)
==
==================
ace8ee7;Warren Weckesser;2013-06-15 11:22:05 -0400;BUG: ma: ma.average didn't handle complex arrays correctly (issue gh-2684)

==

numpy/ma/extras.py
numpy/ma/tests/test_extras.py
==================
4a7f2b7;Warren Weckesser;2013-06-15 01:42:36 -0400;MAINT: ma: clean up ma/test_extras.py: don't use 'import *'; PEP8 whitespace

==

numpy/ma/tests/test_extras.py
==================
fa5bc1c;Charles Harris;2013-06-15 06:51:20 -0700;Merge pull request #3438 from kumanna/master
Fix minor typos in Polynomial class documentation
==
==================
3e95144;Kumar Appaiah;2013-06-15 01:17:14 -0400;Fix minor typos in Polynomial class documentation
Signed-Off-By: Kumar Appaiah <a.kumar@alumni.iitm.ac.in>

==

doc/source/reference/routines.polynomials.classes.rst
==================
36d288b;Charles Harris;2013-06-14 16:21:24 -0700;Merge pull request #3432 from fhs/lstsq-doc
DOC: fix typo in linalg.lstsq doc string
==
==================
4b4a736;Julian Taylor;2013-06-14 20:23:18 +0200;ENH: vectorize boolean logical &&, ||, abs and not
The code ensures the result is identical to a boolean operation even
though this might be unnecessary if bools are used correctly everywhere.
The overhead doesn't matter much as vectorizing single byte operations
hits the memory bandwidth limit very quickly.

Improves performance by about a factor of 5 to 10 depending on the cpu.
These operations currently can't be autovectorized by gcc 4.8.

==

doc/release/1.8.0-notes.rst
numpy/core/src/umath/loops.c.src
numpy/core/src/umath/simd.inc.src
numpy/core/tests/test_numeric.py
==================
3b7d3ae;njsmith;2013-06-14 09:15:48 -0700;Merge pull request #3435 from zabbarob/patch-1
Updated info about sphinx.ext.autosummary.
==
==================
c6e4020;Robert Costa;2013-06-14 19:11:18 +0300;Updated info about sphinx.ext.autosummary.

==

doc/HOWTO_BUILD_DOCS.rst.txt
==================
7189c63;Fazlul Shahriar;2013-06-13 23:58:14 -0400;DOC: another minor tweak of linalg.lstsq doc string

==

numpy/linalg/linalg.py
==================
d596d6d;Fazlul Shahriar;2013-06-13 14:33:11 -0400;DOC: minor tweak of linalg.lstsq doc string

==

numpy/linalg/linalg.py
==================
75df68b;Julian Taylor;2013-06-10 23:02:36 +0200;ENH: tell gcc to unroll strided copy loops
The strided copy loops profit a lot from unrolling as the number of
operations executed is in each iterations very small.
GCC needs to be told explicitly to do unrolling even on O3.

Unrolling is only profitable if the move can be done in a single
instruction, else the increased code size makes it slower, thus the flag
is only used for operations on element sizes less equal the native
pointer size.

Tested to improve performance of by 20-50% on intel core2duo, xeon
5xxx/7xxx and amd phenom x4.

==

numpy/core/include/numpy/npy_common.h
numpy/core/setup.py
numpy/core/setup_common.py
numpy/core/src/multiarray/lowlevel_strided_loops.c.src
==================
65fe95c;seberg;2013-06-13 04:38:26 -0700;Merge pull request #3431 from WarrenWeckesser/mtrand-hypergeom-edge-case
ENH: random: Allow ngood=0 or nbad=0 in mtrand.hypergeometric.
==
==================
2220700;Warren Weckesser;2013-06-12 21:28:07 -0400;ENH: random: Allow ngood=0 or nbad=0 in mtrand.hypergeometric.
Also edited the 'Parameters' section of the docstring to comply
with the numpy docstring standard.

==

numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
numpy/random/tests/test_random.py
==================
486542a;Fazlul Shahriar;2013-06-13 03:02:37 -0400;DOC: fix typo in linalg.lstsq doc string

==

numpy/linalg/linalg.py
==================
266a968;njsmith;2013-06-12 08:50:30 -0700;Merge pull request #3410 from m-d-w/enh_np_array0.1
ENH: Optimize array creation by avoiding errors
==
==================
f7ea474;Charles Harris;2013-06-12 07:41:37 -0700;Merge pull request #2942 from btel/npz_optimize
BUG: Fix loading npz files >2GB on 64bit systems
==
==================
7c4e9e1;Bartosz Telenczuk;2013-01-31 15:21:14 +0100;adjust the optimal IO buffer size for npz files

==

doc/release/1.8.0-notes.rst
numpy/lib/format.py
numpy/lib/npyio.py
numpy/lib/tests/test_io.py
==================
b69c48d;Alex Ford;2013-01-30 19:44:14 -0800;Chunk reads in format.read_array.
Maximum data size limitations in the crc32 module cause errors when
reading more than 2 ** 32 bytes from gzip streams. Work around this
issue when reading large arrays from npz files by chunking reads to
256mb.

This appears to resolve bug #2922.

==

numpy/lib/format.py
==================
cfae014;Bartosz Telenczuk;2013-01-22 13:45:37 +0100;BUG: fix loading large npz files (fixes #2922)

==

numpy/lib/npyio.py
numpy/lib/tests/test_io.py
==================
d4b4ff0;Charles Harris;2013-06-11 15:50:25 -0700;Merge pull request #3421 from juliantaylor/complex-copy
Poor performance complex strided copies since 1.7
==
==================
e2dd429;Julian Taylor;2013-06-11 23:50:05 +0200;BUG: fix non-swapping strided copies in GetStridedCopySwap
Fixed PyArray_GetStridedCopySwap{Pair,}Fn returns paths that do not swap
the data.
It never triggered because the alignment requirement for complex data
was too low (4-8 bytes) and always fullfiled by the memory allocator.
As this is now fixed it caused failures on sparc with 16 byte long
doubles.

==

numpy/core/src/multiarray/lowlevel_strided_loops.c.src
==================
d0f5050;Charles Harris;2013-06-11 10:39:21 -0700;Merge pull request #3419 from juliantaylor/vectorize-rest
min/max and base math vectorization
==
==================
ffa0130;Julian Taylor;2013-06-11 19:00:47 +0200;DOC: use full ufunc names

==

doc/release/1.8.0-notes.rst
==================
88b459b;Julian Taylor;2013-06-11 18:21:36 +0200;MAINT: fix an uninitialized use in the no fenv fallback

==

numpy/core/src/umath/simd.inc.src
==================
15f2d60;Charles Harris;2013-06-10 16:13:27 -0700;Merge pull request #3422 from charris/deprecate-modules
DEP: Deprecate the oldnumeric and numarray modules.
==
==================
c20531c;Julian Taylor;2013-06-11 00:46:51 +0200;MAINT: guard prototypes with HAVE_EMMINTRIN_H
avoids declared but not defined warnings

==

numpy/core/src/umath/simd.inc.src
==================
a9a470c;Charles Harris;2013-06-09 21:44:06 -0600;DEP: Deprecate the oldnumeric and numarray modules.
The numarray and oldnumeric modules are deprecated. This is a bit tricky
as raising a DeprecationWarning on import causes an error when tests are
run. To deal with that, a ModuleDeprecationWarning class is added to
numpy and NoseTester is modified to ignore that warning during testing.

Closes #2905

==

numpy/__init__.py
numpy/numarray/__init__.py
numpy/oldnumeric/__init__.py
numpy/testing/nosetester.py
numpy/testing/utils.py
==================
4ed88a8;Charles Harris;2013-06-10 15:24:08 -0700;Merge pull request #3417 from seberg/subspace-decref
BUG: Decref subspace when subspace is 0-d in fancy indexing
==
==================
5c7d0b9;m-d-w;2013-06-10 18:18:19 -0400;Merge branch 'enh_np_array0.1' of https://github.com/m-d-w/numpy into enh_np_array0.1

==
==================
3abe4fd;m-d-w;2013-06-06 14:57:16 -0400;ENH: Optimize array creation by avoiding errors

==

numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/multiarraymodule.c
==================
37b55c0;m-d-w;2013-06-10 18:17:02 -0400;ENH: Optimize array creation by avoiding errors

==

numpy/core/src/multiarray/common.c
==================
794816b;m-d-w;2013-06-10 18:11:01 -0400;Merge branch 'enh_np_array0.1' of https://github.com/m-d-w/numpy into enh_np_array0.1

==
==================
cc149b2;m-d-w;2013-06-06 14:57:16 -0400;ENH: Optimize array creation by avoiding errors

==

numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/multiarraymodule.c
==================
fda333b;m-d-w;2013-06-10 18:07:30 -0400;ENH: Optimize array creation by avoiding errors

==

numpy/core/src/multiarray/common.c
==================
16c47cf;Sebastian Berg;2013-06-09 23:30:48 +0200;TST: Refactor some test_indexing doc strings

==

numpy/core/tests/test_indexing.py
==================
aef286d;Julian Taylor;2013-06-10 19:38:58 +0200;ENH: enable unaligned loads on x86
x86 can handle unaligned load and there is no hand vectorized code in
this file. It would be a serious compiler bug if it adds vectorization
without checking for alignment.
Enables fast complex128 copies which are unaligned on 32 bit gcc unless
compiled with -malign-double.

==

numpy/core/src/multiarray/lowlevel_strided_loops.c.src
==================
c9bf9b0;Julian Taylor;2013-06-10 19:06:44 +0200;ENH: properly fix unaligned load of complex types
the workaround of setting the aligned to false unconditionally makes
copying strided complex data extremely slow as it will always do
unaligned elementwise memmoves.
Instead set the alignment requirement for complex types correct in the
dtype to begin with.

Note that on 32 bit gcc complex double will still be aligned to 8 bytes
unless compiled with -malign-double.

It is possible this will introduce new segfaults on architectures
without unaligned loads, but this now indicates a missing alignment
check in the affected code as the array description is correct.

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/dtype_transfer.c
==================
3118f4f;m-d-w;2013-06-10 16:22:20 -0400;ENH: Optimize array creation by avoiding errors

==
==================
04add8e;m-d-w;2013-06-06 14:57:16 -0400;ENH: Optimize array creation by avoiding errors

==

numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/multiarraymodule.c
==================
1a252e6;m-d-w;2013-06-10 16:13:36 -0400;ENH: Optimize array creation by avoiding errors

==

numpy/core/src/multiarray/common.c
==================
a1cce4d;m-d-w;2013-06-10 16:08:38 -0400;ENH: Optimize array creation by avoiding errors

==

numpy/core/src/multiarray/common.c
==================
4e0f159;m-d-w;2013-06-10 16:07:00 -0400;ENH: Optimize array creation by avoiding errors

==
==================
7ebdaf2;m-d-w;2013-06-06 14:57:16 -0400;ENH: Optimize array creation by avoiding errors

==

numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/multiarraymodule.c
==================
6bcba96;Julian Taylor;2013-06-09 21:03:34 +0200;ENH: vectorize base math with SSE2
Improves performance by ~1.5/3.0 for float/double for inplace or cpu
cached operations

==

doc/release/1.8.0-notes.rst
numpy/core/src/umath/loops.c.src
numpy/core/src/umath/simd.inc.src
numpy/core/tests/test_scalarmath.py
==================
eb6cf4b;Julian Taylor;2013-06-09 19:03:07 +0200;ENH: Vectorize float min/max operation with sse2
Improves performance by ~1.5/3.0 for float/double.

==

doc/release/1.8.0-notes.rst
numpy/core/src/umath/loops.c.src
numpy/core/src/umath/simd.inc.src
numpy/core/tests/test_umath.py
==================
75cdf3d;Charles Harris;2013-06-09 11:54:49 -0700;Merge pull request #3418 from cgohlke/patch-4
MAINT: use PyOS_snprintf instead of snprintf
==
==================
f502acf;Christoph Gohlke;2013-06-09 12:33:15 -0600;MAINT: use PyOS_snprintf instead of snprintf
PyOS_snprintf is portable and more secure than snprintf.
==

numpy/linalg/lapack_lite/python_xerbla.c
==================
0a01586;Sebastian Berg;2013-06-09 19:14:39 +0200;BUG: Decref subspace when subspace is 0-d in fancy indexing
Not decrefing it causes a major memory leak. This adapts the
automated tests to cover this case as well and adds refcounting
to it. Replaces some 'skip' with 0s, but I believe the skip
tests are not that important. Added 1-d special case tests
using the same indices as the multi-dim test though.

Thanks to Julian Taylor for noting the bug.

==

numpy/core/src/multiarray/mapping.c
numpy/core/tests/test_indexing.py
==================
558cd20;Charles Harris;2013-06-09 08:11:02 -0700;Merge pull request #3243 from seberg/deprecate-non-integer-arguments-new
Deprecate non integer arguments
==
==================
163f6df;Sebastian Berg;2013-06-09 16:57:01 +0200;MAINT: Disallow np.bool_ being used as integer
This makes the deprecation of bools used as integers complete
from the numpy perspective. It would not be unsensible to move
the bool checks into indexing specific code though.

==

numpy/core/src/multiarray/conversion_utils.c
numpy/core/tests/test_deprecations.py
==================
e67269a;Sebastian Berg;2013-06-07 16:19:03 +0200;MAINT: Minor style fix and integer conversion optimizations

==

numpy/core/src/multiarray/conversion_utils.c
==================
a6a2c60;Sebastian Berg;2013-06-06 14:59:50 +0200;STY: Style fixes for integer deprecation changes
Also minor changes in the documentation.

==

numpy/core/src/multiarray/conversion_utils.c
numpy/core/tests/test_deprecations.py
numpy/lib/shape_base.py
numpy/random/tests/test_regression.py
==================
0e9dccd;Sebastian Berg;2013-05-31 20:52:56 +0200;MAINT: Use warnings context manager instead of doing it by hand

==

numpy/core/tests/test_deprecations.py
==================
187f128;Sebastian Berg;2013-05-31 19:55:43 +0200;DOC: Add integer deprecations to release notes
(also minor spelling fix in comments)

==

doc/release/1.8.0-notes.rst
numpy/core/tests/test_deprecations.py
==================
704b456;Charles Harris;2013-06-09 07:35:48 -0700;Merge pull request #3415 from charris/pull-2699-rebased
Pull 2699 rebased
==
==================
18e7f40;David Warde-Farley;2012-10-25 18:57:53 -0400;TST: expected behaviour of .copy()

==

numpy/core/tests/test_multiarray.py
==================
d661960;David Warde-Farley;2012-10-25 15:32:25 -0400;BUG: copy.(deep)copy should preserve F-contiguity
Currently, copy.deepcopy() on certain objects in scikit-learn results
in the copied object being broken, as underlying methods depend on
members being F-contiguous. I can think of no reason that F-contiguous
arrays should not remain F-contiguous through a copy.copy/copy.deepcopy,
therefore this alters the methods to use NPY_KEEPORDER when allocating
the copy.

==

numpy/core/src/multiarray/methods.c
numpy/core/tests/test_regression.py
==================
8dcf397;Charles Harris;2013-06-08 15:16:35 -0700;Merge pull request #3407 from mrjbq7/doc-fixes
DOC: fix comments in min and ptp.
==
==================
c113b0f;Charles Harris;2013-06-08 15:15:06 -0700;Merge pull request #3393 from seberg/clarify-integer-types
DOC: Clarify and add C-compatible integer types to list of dtypes
==
==================
a2bac9d;Egor Zindy;2013-06-08 23:02:15 +0100;Added tests for 4D tensors. Now using a consistant cubes,slices,rows,columns index order everywhere.

==

doc/swig/test/SuperTensor.cxx
doc/swig/test/SuperTensor.h
doc/swig/test/SuperTensor.i
doc/swig/test/testSuperTensor.py
==================
a21d825;Egor Zindy;2013-06-08 22:59:48 +0100;cleaned-up loop indexes in Tensor.cxx

==

doc/swig/test/Tensor.cxx
doc/swig/test/Tensor.h
doc/swig/test/Tensor.i
==================
3e47130;Charles Harris;2013-06-08 14:57:15 -0700;Merge pull request #3411 from juliantaylor/vectorize-fabs
ENH: Vectorize float absolute operation with sse2
==
==================
938f586;Egor Zindy;2013-06-08 22:52:53 +0100;cosmetic changes to numpy.i

==

doc/swig/numpy.i
==================
7720373;Egor Zindy;2013-06-08 22:50:12 +0100;Merge branch 'numpy-swig' of https://github.com/zindy/numpy into numpy-swig

==
==================
0caf9d7;zindy;2013-06-08 23:27:28 +0200;Fixed the capsule / cobject memory destructor. Added types to deal with lists of arrays and lists of tensors as input and inplace types.

==

doc/swig/numpy.i
==================
7fb8b71;Julian Taylor;2013-06-08 23:13:34 +0200;DOC: document isnan/bswap and SSE2 improvements

==

doc/release/1.8.0-notes.rst
==================
6312353;Julian Taylor;2013-06-07 22:44:27 +0200;MAINT: move simd functions to new file simd.inc.src
SIMD functions are called via a minimal dispatcher function.
Minizes extra code in loops.c.src and hopefully transparently allows to
simply enable more complex (runtime) dispatching rules.

==

numpy/core/bscript
numpy/core/setup.py
numpy/core/src/umath/loops.c.src
numpy/core/src/umath/simd.inc.src
==================
23a2757;Ralf Gommers;2013-06-08 11:53:22 -0700;Merge pull request #3414 from joonro/patch-1
A minor cleanup
==
==================
fe4c882;Julian Taylor;2013-06-07 20:43:33 +0200;MAINT: remove duplicate vtype template

==

numpy/core/src/umath/loops.c.src
==================
0defe6d;Julian Taylor;2013-06-07 19:49:23 +0200;MAINT: use @vpre@ for simd sqrt intrinsic prefix
allows simple extension to AVX

==

numpy/core/src/umath/loops.c.src
==================
564aa53;Julian Taylor;2013-06-07 19:44:41 +0200;MAINT: make the simd function signature more specific

==

numpy/core/src/umath/loops.c.src
==================
987dc32;Julian Taylor;2013-06-07 19:24:11 +0200;MAINT: fix shape mismatch issue in alignment data generator

==

numpy/testing/utils.py
==================
9d5884b;Julian Taylor;2013-06-07 19:22:51 +0200;ENH: Vectorize float absolute operation with sse2
fabs on x86 can be implemented by masking out the sign bit.
Obtaining such a bit pattern is best done by a bitwise not on the
negative zero.
This is the same operation the compiler will convert fabs to on amd64.

Improves performance by ~1.7/3.5 for float/double for cached data
and ~1.4/1.1 for non-cached data.

If one simplifies the loops gcc could also autovectorize it but with all
hints its almost the same code length and slightly worse assembly.

The code can easily be extended to support AVX by changing vpre and
vtype to 256.

==

numpy/core/src/umath/loops.c.src
numpy/core/tests/test_umath.py
==================
abad5e3;Julian Taylor;2013-06-07 19:21:03 +0200;MAINT: move vectorized sqrt to own static function

==

numpy/core/src/umath/loops.c.src
==================
7af95b0;Joon Ro;2013-06-08 12:33:15 -0500;A minor cleanup
- 4 indent instead of 2 for equation example
- Fixed Syntax::
==

doc/HOWTO_DOCUMENT.rst.txt
==================
ac8fad5;Charles Harris;2013-06-07 17:19:29 -0700;Merge pull request #3412 from juliantaylor/float128-i386
BUG: import longdouble instead of float128
==
==================
21350b7;m-d-w;2013-06-07 17:40:39 -0400;Merge branch 'enh_np_array0.1' of https://github.com/m-d-w/numpy into enh_np_array0.1

==
==================
6a2f920;m-d-w;2013-06-06 14:57:16 -0400;ENH: Optimize array creation by avoiding errors

==

numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/multiarraymodule.c
==================
e46c593;m-d-w;2013-06-07 17:30:53 -0400;ENH: Optimize array creation by avoiding errors

==

numpy/core/src/multiarray/multiarraymodule.c
==================
b4dc036;m-d-w;2013-06-07 16:07:45 -0400;Merge branch 'enh_np_array0.1' of https://github.com/m-d-w/numpy into enh_np_array0.1

==
==================
e174510;m-d-w;2013-06-06 14:57:16 -0400;ENH: Optimize array creation by avoiding errors

==

numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/ctors.c
==================
1beff0a;m-d-w;2013-06-07 15:42:41 -0400;ENH: Optimize array creation by avoiding errors

==

numpy/core/src/multiarray/ctors.c
==================
2017b3d;m-d-w;2013-06-07 15:31:46 -0400;ENH: Optimize array creation by avoiding errors

==
==================
5bdd643;m-d-w;2013-06-06 14:57:16 -0400;ENH: Optimize array creation by avoiding errors

==

numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/ctors.c
==================
fc922211;Julian Taylor;2013-06-07 00:12:13 +0200;BUG: import longdouble instead of float128
i386 does not have 16 byte long double by default (only 12 byte/float96)
so the import prevents numpy startup.
Introduced in 1.8.0dev 40000f508

==

numpy/linalg/linalg.py
==================
2a532bc;m-d-w;2013-06-07 11:54:18 -0400;Merge branch 'enh_np_array0.1' of https://github.com/m-d-w/numpy into enh_np_array0.1

==
==================
a6650e5;m-d-w;2013-06-06 14:57:16 -0400;ENH: Optimize array creation by avoiding errors

==

numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/ctors.c
==================
4b9d2a6;m-d-w;2013-06-07 11:32:03 -0400;ENH: Optimize array creation by avoiding errors

==

numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/ctors.c
==================
f0cd760;m-d-w;2013-06-06 17:18:42 -0400;ENH: Optimize array creation by avoiding errors

==

numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/ctors.c
==================
3f96717;m-d-w;2013-06-06 17:12:40 -0400;Merge branch 'enh_np_array0.1' of https://github.com/m-d-w/numpy into enh_np_array0.1

==
==================
a49d6a0;m-d-w;2013-06-06 14:57:16 -0400;ENH: Optimize array creation by avoiding errors

==

numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/ctors.c
==================
2ebf198;m-d-w;2013-06-06 16:39:05 -0400;ENH: Optimize array creation by avoiding errors

==

numpy/core/src/multiarray/common.h
==================
c9c20d4;m-d-w;2013-06-06 16:30:47 -0400;ENH: Optimize array creation by avoiding errors

==

numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/ctors.c
==================
7759766;Johannes Schönberger;2013-05-24 19:10:11 +0200;Update default dtype of filled function in doc string

==

numpy/core/numeric.py
==================
b4b20dc;Johannes Schönberger;2013-05-06 22:07:49 +0200;Add filled and filled_like to changelog of 1.8.0

==

doc/release/1.8.0-notes.rst
==================
8b6ccd9;Johannes Schönberger;2013-05-06 21:51:39 +0200;Rename fill value parameter for consistency across numpy+

==

numpy/core/numeric.py
numpy/core/tests/test_numeric.py
==================
91b1b99;Johannes Schönberger;2013-05-06 21:06:35 +0200;Add examples to doc string of filled and filled_like

==

numpy/core/numeric.py
==================
494fa21;Johannes Schönberger;2013-05-06 21:06:02 +0200;Add separate parameter description to filled, filled_like and ones

==

numpy/core/numeric.py
==================
8ed3733;Johannes Schönberger;2013-05-04 21:23:51 +0200;Fix Python 3 test cases for filled* functions

==

numpy/core/tests/test_numeric.py
==================
dbc3558;Johannes Schönberger;2013-01-14 15:53:15 +0100;Do not compare string or unicode values

==

numpy/core/tests/test_numeric.py
==================
781cb48;Johannes Schönberger;2013-01-13 20:54:19 +0100;Add doc string to creation test class

==

numpy/core/tests/test_numeric.py
==================
64d236c;Johannes Schönberger;2013-01-13 20:49:41 +0100;Comment test cases

==

numpy/core/tests/test_numeric.py
==================
5991bbe;Johannes Schönberger;2013-01-13 20:45:41 +0100;Add tests for zeros, ones, empty and filled

==

numpy/core/tests/test_numeric.py
==================
5be86a8;Johannes Schönberger;2013-01-13 20:05:40 +0100;Add filled_like to doc string of test class

==

numpy/core/tests/test_numeric.py
==================
587b092;Johannes Schönberger;2013-01-13 12:54:19 +0100;Use more idiomatic way of None-check

==

numpy/core/tests/test_numeric.py
==================
a677232;Johannes Schönberger;2013-01-13 12:53:36 +0100;Use commin method to compare array values

==

numpy/core/tests/test_numeric.py
==================
474ec48;Johannes Schönberger;2013-01-13 12:51:02 +0100;Add tests for filled_like function

==

numpy/core/numeric.py
numpy/core/tests/test_numeric.py
==================
27f0781;Johannes Schönberger;2013-01-13 12:14:13 +0100;Fix doc string

==

numpy/core/numeric.py
==================
17c6214;Johannes Schönberger;2013-01-13 12:13:01 +0100;Replace nans, nans_like, infs, infs_like with filled functions

==

numpy/core/numeric.py
==================
25f9d8c;Johannes Schönberger;2013-01-01 10:13:54 +0100;Fix typo in doc string

==

numpy/core/numeric.py
==================
0fe4df2;Johannes Schönberger;2013-01-01 10:13:03 +0100;Add short note in doc string about dtype for non-numbers

==

numpy/core/numeric.py
==================
6c5ef34;Johannes Schönberger;2013-01-01 10:10:18 +0100;Add more related functions

==

numpy/core/numeric.py
==================
87d884e;Johannes Schönberger;2013-01-01 10:02:50 +0100;Add nans, infs, nans_like, infs_like convenience functions

==

numpy/core/numeric.py
==================
5f5f4b1;m-d-w;2013-06-06 14:57:16 -0400;ENH: Optimize array creation by avoiding errors

==

numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/ctors.c
==================
16c55ba;m-d-w;2013-06-06 14:55:31 -0400;TST: Add basic tests for np.array

==

numpy/core/tests/test_api.py
==================
424d84b;John Benediktsson;2013-06-06 08:28:40 -0700;DOC: fix comments in min and ptp.

==

numpy/ma/core.py
==================
b5fd429;Ralf Gommers;2013-06-05 14:42:42 -0700;Merge pull request #3403 from juliantaylor/test-multi-dec
TST: fix some function name conflicts
==
==================
37723a5;Julian Taylor;2013-06-05 22:07:11 +0200;TST: fix some function name conflicts
enables a few extra tests

==

numpy/core/tests/test_multiarray.py
numpy/core/tests/test_umath.py
numpy/ma/tests/test_old_ma.py
numpy/ma/tests/test_subclassing.py
==================
41f6a89;Charles Harris;2013-06-05 09:13:14 -0700;Merge pull request #3402 from argriffing/patch-3
typo
==
==================
1d96fd3;argriffing;2013-06-05 12:55:05 -0300;typo

==

numpy/linalg/linalg.py
==================
d307ff6;njsmith;2013-06-05 08:36:40 -0700;Merge pull request #3387 from WarrenWeckesser/norm-axis
ENH: linalg: Add an `axis` argument to linalg.norm
==
==================
1d9607a;Warren Weckesser;2013-06-05 11:01:52 -0400;MAINT: linalg: simplify the computation of the svd-based matrix norms, and tweak the norm function's docstring.

==

numpy/linalg/linalg.py
==================
7e92df5;Charles Harris;2013-06-04 13:45:23 -0700;Merge pull request #3400 from WarrenWeckesser/test-blasdot-failure
TST: linalg: loosen the requirements of some tests in test_blasdot.py.  ...
==
==================
c2e531b;Charles Harris;2013-06-04 13:39:29 -0700;Merge pull request #3401 from rgommers/remove-module-index
Remove module index from docs, add missing release notes.
==
==================
0155f8d;Ralf Gommers;2013-06-04 21:31:10 +0200;DOC: add missing release notes to the reference guide.

==

doc/source/release.rst
==================
ab2741a;Ralf Gommers;2013-06-04 21:08:36 +0200;DOC: remove module index from reference guide.
It was broken, and after fixing it looked quite useless.
Update in conf.py is because `html_use_modindex` is deprecated.

==

doc/source/_templates/indexcontent.html
doc/source/conf.py
==================
a32335e;Warren Weckesser;2013-06-04 14:42:05 -0400;TST: linalg: loosen the requirements of some tests in test_blasdot.py.  Addresses part of gh-3399.

==

numpy/core/tests/test_blasdot.py
==================
8a170dc;Warren Weckesser;2013-06-04 09:30:47 -0400;STY: linalg: some PEP8 clean up.

==

numpy/linalg/linalg.py
numpy/linalg/tests/test_linalg.py
==================
a292614;Warren Weckesser;2013-06-04 09:21:13 -0400;ENH: linalg: allow the 'axis' argument of linalg.norm to be a 2-tuple, in which case matrix norms of the collection of 2-D matrices are computed.

==

numpy/linalg/linalg.py
numpy/linalg/tests/test_linalg.py
==================
7ece0dd;Sebastian Berg;2013-06-03 18:07:13 +0200;DOC: Clarify and add C-compatible integer types to list of dtypes
Also mention np.intp, which at least personally I think is not an
unimportant type.

==

numpy/doc/basics.py
==================
e9e490a;Ralf Gommers;2013-06-03 21:25:39 +0200;DOC: add to HOWTO_RELEASE to check that the benchmark suite runs.

==

doc/HOWTO_RELEASE.rst.txt
==================
8ab4e1a;Charles Harris;2013-06-03 10:36:43 -0700;Merge pull request #3394 from juliantaylor/incl-guard-fix
BUG: fix typo on npy_config.h include guard
==
==================
54c1471;Julian Taylor;2013-06-03 18:48:26 +0200;BUG: fix typo on npy_config.h include guard
Was overlooked as loops.c.src where np.isnan lives includes it directly.
Now all isnan calls in numpy profit from the improvement.

==

numpy/core/include/numpy/npy_math.h
numpy/core/src/umath/loops.c.src
==================
6eb57a7;Warren Weckesser;2013-06-02 13:38:11 -0400;DOC: linalg: Improve the docstring of the new norm function.

==

numpy/linalg/linalg.py
==================
3bdb609;Warren Weckesser;2013-06-01 18:38:48 -0400;MAINT: linalg: removed unused imports from linalg.py

==

numpy/linalg/linalg.py
==================
40000f5;Warren Weckesser;2013-06-01 17:51:51 -0400;ENH: linalg: Add the `axis` keyword to linalg.norm.
Also fixed a bug that occurred with integer arrays and negative ord.  For example,
norm([1, 3], -1) returned 1.0, but the correct value is 0.75.

==

numpy/linalg/linalg.py
numpy/linalg/tests/test_linalg.py
==================
3a340b0;Sebastian Berg;2013-05-31 16:39:32 +0200;MAINT: Create new function PyArray_IntpFromIndexSequence
This function uses npy_intp to in principle support larger then
int sequence lengths.

==

numpy/core/src/multiarray/conversion_utils.c
numpy/core/src/multiarray/conversion_utils.h
==================
c51f254;Sebastian Berg;2013-04-20 23:48:13 +0200;STY: style and small doc fixes for integer deprecations

==

numpy/core/src/multiarray/conversion_utils.c
numpy/core/src/multiarray/number.c
==================
399e55b;Sebastian Berg;2013-04-13 09:58:00 +0200;TST: Rework test_deprecations.py and add new tests.

==

numpy/core/tests/test_deprecations.py
numpy/core/tests/test_indexing.py
==================
482142c;Sebastian Berg;2013-04-13 09:57:11 +0200;MAINT: Remove non-integer deprecations which are now in PyIntAsIntp
Also removed old (commented) macro, the use of PyNumber_Index is
now actually implemented in PyIntAsIntp and not necessary here.

Removes PyIndex_Check compatibility macros, since we do not support
python < 2.5 anymore.

Change integer conversion error to IndexError, previously these
fell through and eventually became an IndexError.

==

numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/private/npy_pycompat.h
==================
a727f42;Sebastian Berg;2013-04-13 09:53:59 +0200;API: Deprecate __index__ for ndim > 0
For example NumPy indexing treats np.ones(()) very differently from
np.ones((1,)). It seems a bad idea to allow __index__ for arrays that
are not 0-d, as they cannot always be safely interpreted as integers.

==

numpy/core/src/multiarray/number.c
==================
8dfc25d;Sebastian Berg;2013-04-13 09:51:45 +0200;API: Deprecating the use of non-integers for indices arguments
This changes the conversion utils to give deprecations for a all
non-integers (this currently includes python bools). The biggest
change is PyArray_PyIntAsIntp in which the deprecation is done.
Some other conversions are then also pointed to it.

Uses the Index machinery even for numpy types, which is faster
then the current code.

==

numpy/core/src/multiarray/conversion_utils.c
==================
5c8d5c2;Sebastian Berg;2013-04-13 09:41:22 +0200;MAINT: adept divisions for truedivide
Following deprecations would cause problems otherwise.

==

numpy/core/defchararray.py
numpy/lib/index_tricks.py
numpy/lib/shape_base.py
numpy/random/tests/test_regression.py
==================
dff8c94;seberg;2013-05-31 09:59:29 -0700;Merge pull request #3385 from juliantaylor/memleak-3384
BUG: fix memory leak and double execution in dot
==
==================
ee2f7b4;Julian Taylor;2013-05-31 18:36:53 +0200;BUG: fix memory leak and double execution in dot
introduced in 1.8.0dev 914294a42a
closes gh-3384

==

numpy/core/src/multiarray/methods.c
==================
780d829;Charles Harris;2013-05-30 16:16:12 -0700;Merge pull request #3383 from WarrenWeckesser/howto-doc-wording
DOC: fix a word in HOWTO_DOCUMENT.rst.txt.
==
==================
900edb3;Warren Weckesser;2013-05-30 17:54:49 -0400;DOC: fix a word in HOWTO_DOCUMENT.rst.txt.

==

doc/HOWTO_DOCUMENT.rst.txt
==================
9303985;Charles Harris;2013-05-29 11:27:51 -0700;Merge pull request #3376 from juliantaylor/unaligned-access
Unaligned access
==
==================
0258a3e;Julian Taylor;2013-05-28 20:53:01 +0200;MAINT: use npy_is_aligned in a few more places

==

numpy/core/src/multiarray/array_assign.c
numpy/core/src/multiarray/array_assign_scalar.c
==================
80befa1;Julian Taylor;2013-05-28 20:45:59 +0200;BUG: check alignment before loading the data
some cpus don't support loads that are not aligned to the elementsize.
regression introduced in 99cb95f7379a9.

==

numpy/core/src/multiarray/ctors.c
==================
f52cc7d;Julian Taylor;2013-05-28 20:44:46 +0200;MAINT: move byteswap macros to inlines in header
removes some duplication and allows older gcc that can't detect the
byteswap pattern to use the faster swapping instructions.

==

numpy/core/src/multiarray/lowlevel_strided_loops.c.src
numpy/core/src/private/lowlevel_strided_loops.h
numpy/core/src/umath/loops.c.src
==================
d3a7c89;mwtoews;2013-05-26 23:28:50 +1200;BUG: Handle a version string from a custom-built mingw64.
The custom build compiler "GNU Fortran (rubenvb-4.8.0) 4.8.0" was
incorrectly parsed as version '-4.8.0' and the flag "-mno-cygwin" was
added to the compilation.

See http://cens.ioc.ee/pipermail/f2py-users/2010-October/002092.html.

==

numpy/distutils/fcompiler/gnu.py
numpy/distutils/tests/test_fcompiler_gnu.py
==================
e50475a;bebert218;2013-05-22 13:58:38 +0900;BUG: The npv function in financial.py was incorrectly implemented.
Correct the implementation of the npv function, its documentation, and
the mirr function that depends on it. The test_financial.py is also
corrected to take into account those modifications

The npv function behavior was contrary to what the documentation stated
as it summed indexes 1 to M instead of 0 to M-1. The mirr function used
a corrective factor to get the correct result in spite of that error so
that factor is removed.

Closes #649

==

numpy/lib/financial.py
numpy/lib/tests/test_financial.py
==================
1f11f22;Charles Harris;2013-05-29 06:57:00 -0700;Merge pull request #3358 from leonnnn/matrix-typeerror
ENH: Fix SyntaxError when matrix() is called with invalid string
==
==================
fc4ade2;Leon Weber;2013-05-23 19:24:28 +0200;ENH: Fix SyntaxError when matrix() is called with invalid string
The numpy.matrix constructor uses eval(str.translate(table)) to convert
input strings to numeric matrix contents. str.translate(table) will
return empty string if str consists only of invalid characters, causing
SyntaxError in eval(). This is confusing, as one would expect an
exception like TypeError when trying to construct a matrix from invalid
input.

This fix makes sure eval() is only called if str is not empty and
TypeError is raised otherwise.

==

numpy/matrixlib/defmatrix.py
numpy/matrixlib/tests/test_defmatrix.py
==================
aa1cfce;Charles Harris;2013-05-28 15:21:19 -0700;Merge pull request #3371 from juliantaylor/mmap-slice-improve
Mmap slice improve
==
==================
15c2d0d;Ralf Gommers;2013-05-28 14:25:21 -0700;Merge pull request #3378 from juliantaylor/sdist-mtrand-gen
BUG: include mtrand cython files in sdist
==
==================
db3b081;Julian Taylor;2013-05-28 23:00:11 +0200;BUG: include mtrand cython files in sdist
the files are required to do a full source rebuild.

==

MANIFEST.in
==================
5448d7f;Julian Taylor;2013-05-28 20:26:55 +0200;MAINT: remove duplicated array extent calculation

==

numpy/core/src/multiarray/array_assign.c
numpy/core/src/multiarray/common.c
==================
19e0562;Julian Taylor;2013-05-26 17:08:27 +0200;ENH: improve performance of byte_bounds for continous arrays

==

numpy/lib/utils.py
==================
fae8369;Julian Taylor;2013-05-26 17:03:51 +0200;ENH: implement may_share_memory in C
memmap needs to call it in __array_finalize__ to determine if it can
drop the references on copies.
The python version if may_share_memory caused significant slowdowns when
slicing these maps.

closes gh-3364

==

numpy/add_newdocs.py
numpy/core/numeric.py
numpy/core/src/multiarray/multiarraymodule.c
numpy/lib/tests/test_shape_base.py
numpy/lib/utils.py
==================
91ba6d6;Charles Harris;2013-05-27 18:23:30 -0700;Merge pull request #3373 from cgohlke/multivariate_normal-fix
multivariate_normal issue with 'size' argument
==
==================
420f609;Christoph Gohlke;2013-05-27 13:39:15 -0700;TST: remove docstrings from test_ functions
See doc/TESTS.rst.txt for the reason.

==

numpy/random/tests/test_regression.py
==================
cec1d41;Christoph Gohlke;2013-05-27 12:22:02 -0700;BUG: Fix multivariate_normal issue with 'size' argument
Ensure that the multivariate_normal size argument can be a numpy integer. Add regression test. Apply PEP8 to test_regression.py. Regenerate mtrand.c.

==

numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
numpy/random/tests/test_regression.py
==================
b98eefc;Charles Harris;2013-05-27 15:44:07 -0700;Merge pull request #3366 from dnmiller/doc-fix
DOC: Correcting docstring for asscalar
==
==================
6bc59a0;seberg;2013-05-27 14:06:11 -0700;Merge pull request #3374 from cgohlke/patch-4
TST: rename 2nd test_hypergeometric_range function
==
==================
96bb036;Christoph Gohlke;2013-05-27 14:42:33 -0600;TST: remove docstring from test_randint_range function
See doc/TESTS.rst.txt for the reason.
==

numpy/random/tests/test_regression.py
==================
14f83a6;Charles Harris;2013-05-27 13:13:53 -0700;Merge pull request #3372 from juliantaylor/datetime-leak
BUG: fix leak and possible use after free
==
==================
6f8b7c0;Christoph Gohlke;2013-05-27 13:37:35 -0600;TST: rename one test_hypergeometric_range function
There are two test functions named `test_hypergeometric_range`
==

numpy/random/tests/test_regression.py
==================
4eff7cb;Julian Taylor;2013-05-27 20:54:13 +0200;BUG: fix leak and possible null dereference

==

numpy/core/src/multiarray/arraytypes.c.src
==================
00b2d78;Robert Kern;2013-05-25 17:42:23 -0700;Merge pull request #3365 from juliantaylor/memmap-int-name
BUG: set filename to None for memmaps of unnamed files
==
==================
7475208;Dan Miller;2013-05-25 17:12:05 -0700;DOC: Correcting docstring for asscalar

==

numpy/lib/type_check.py
==================
5f1e731;Julian Taylor;2013-05-25 22:37:07 +0200;BUG: set filename to None for memmaps of unnamed files
Closes gh-3302

==

numpy/core/memmap.py
numpy/core/tests/test_memmap.py
==================
31a5501;Charles Harris;2013-05-25 08:49:23 -0700;Merge pull request #3341 from juliantaylor/sse2-sqrt
vectorize sqrt ufunc with SSE2
==
==================
fe69102;Julian Taylor;2013-05-19 17:44:13 +0200;MAINT: use sse header macros for einsum sse activation

==

numpy/core/setup_common.py
numpy/core/src/multiarray/einsum.c.src
==================
0adccaa;Julian Taylor;2013-05-19 17:04:27 +0200;ENH: vectorize sqrt ufunc using SSE2
specialize the sqrt ufunc for float and double and vectorize it using
SSE2.

improves performance by 4/2 for float/double if one is not memory bound
due to non-cached data.
performance is always better on all tested machines (amd phenom X2,
intel xeon 5xxx/7xxx, core2duo, corei7)

This version will not set errno on invalid input, but numpy only checks
the fpu flags so the behavior is the same.

In principle the compiler could autovectorize it when setting ffast-math
(for no errno) and specializing the loop for the vectorizable strides
and giving it some hints (restrict, __builtin_assume_aligned, etc.),
but its simpler and more reliable to simply vectorize it by hand.

==

numpy/core/code_generators/generate_umath.py
numpy/core/setup.py
numpy/core/setup_common.py
numpy/core/src/private/lowlevel_strided_loops.h
numpy/core/src/scalarmathmodule.c.src
numpy/core/src/umath/loops.c.src
numpy/core/src/umath/loops.h
numpy/core/src/umath/loops.h.src
numpy/core/tests/test_umath.py
numpy/testing/utils.py
==================
a02457f;Charles Harris;2013-05-25 08:08:13 -0700;Merge pull request #3362 from juliantaylor/compiler-warnings
MAINT: fix some compiler warnings
==
==================
cf57492;Julian Taylor;2013-05-25 10:28:07 +0200;MAINT: fix some compiler warnings
implicit declarations, wrong declarations, unused variables and fixes a
comparison typo bug in multiarraymodule.c

==

numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/calculation.c
numpy/core/src/multiarray/convert.h
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/nditer_constr.c
numpy/core/src/multiarray/ucsnarrow.c
numpy/core/src/scalarmathmodule.c.src
numpy/core/src/umath/test_rational.c.src
numpy/core/src/umath/ufunc_object.c
numpy/linalg/umath_linalg.c.src
==================
e11cd9b;Pauli Virtanen;2013-05-24 02:21:28 -0700;Merge pull request #3361 from dnmiller/master
DOC: Fix URL in documentation guide.
==
==================
4209975;Dan Miller;2013-05-24 02:16:56 -0700;DOC: Fix URL for "How to Build API/Reference Documentation"

==

doc/HOWTO_DOCUMENT.rst.txt
==================
56a878c;seberg;2013-05-23 14:03:26 -0700;Merge pull request #3324 from nouiz/prio_cmp
Make comparison function (gt, ge, ...) respect __array_priority__.
==
==================
8ff5e37;njsmith;2013-05-23 09:18:22 -0700;Merge pull request #3356 from cpelley/f2py_script
f2py executable script shebang
==
==================
e6a1ab9;Carwyn Pelley;2013-05-23 14:41:19 +0100;BUG: f2py script shebang may refer to wrong python
The f2py executable has a shebang which uses the default python, rather
than the python it was compiled for.  This causes issues for deployment
of numpy (+f2py) across systems which have different environments.

This fix uses sys.executable to determine the resulting hardcoded
python to use.

==

numpy/f2py/setup.py
==================
c098283;Frederic;2013-05-23 11:45:40 -0400;code clean up. Remove code that was never executed.
@seberg saw this.

==

numpy/core/src/multiarray/arrayobject.c
==================
daf4b40;Ralf Gommers;2013-05-22 13:45:28 -0700;Merge pull request #3349 from njsmith/remove-tools-osxbuild
MAINT: Remove tools/osxbuild
==
==================
339e901;Charles Harris;2013-05-22 07:33:49 -0700;Merge pull request #3344 from cgohlke/patch-1
Remove the msvc_on_amd64 function
==
==================
9f02103;Charles Harris;2013-05-22 07:21:55 -0700;Merge pull request #3350 from njsmith/tweak-README
DOC: Remove confusing comment about warnings from top-level README.
==
==================
af306bf;Nathaniel J. Smith;2013-05-22 11:49:26 +0100;MAINT: Remove tools/osxbuild
These scripts have been broken for years (build.py errors out
immediately if not running from an *svn* checkout), so I'm sure
no-one's using them, and they only attract pointless maintenance fixes
(py3 changes, keeping the pointless extra copy of the top-level
README.txt up to date as in #3288). Let's just remove them.

==

tools/osxbuild/README.txt
tools/osxbuild/build.py
tools/osxbuild/docs/README.txt
tools/osxbuild/install_and_test.py
==================
414983e;Nathaniel J. Smith;2013-05-22 11:39:22 +0100;DOC: Remove confusing comment about warnings from top-level README.

==

README.txt
==================
dea0fe5;Christoph Gohlke;2013-05-21 17:28:24 -0600;MAINT: Remove msvc_on_amd64 function
This function is no longer required for building with msvc on AMD64

==

numpy/distutils/ccompiler.py
numpy/distutils/misc_util.py
==================
074d303;Charles Harris;2013-05-20 16:05:29 -0700;Merge pull request #3342 from rgommers/easyinstall-issue
BLD: fix setuptools-specific easy_install issue.  Closes gh-3160.
==
==================
de166d3;Charles Harris;2013-05-20 08:11:00 -0700;Merge pull request #3339 from endolith/min_max_docstrings
DOC: Min max docstrings
==
==================
0a079b0;endolith;2013-05-19 21:50:35 -0400;DOC: add fmax/fmin to ufuncs list and math routines list

==

doc/source/reference/routines.math.rst
doc/source/reference/ufuncs.rst
==================
eec5e48;Ralf Gommers;2013-05-19 22:15:09 +0200;BLD: fix setuptools-specific easy_install issue.  Closes gh-3160.
An error is raised by setuptools when trying to write to /dev/null.  Was fixed
in distribute, but not in setuptools.

No multi-arch support with plain setuptools should be OK, because multi-arch is
Ubuntu specific (at least for now), and they ship distribute.

==

numpy/distutils/system_info.py
==================
7d188bf;Charles Harris;2013-05-19 12:50:28 -0700;Merge pull request #3329 from JDWarner/faster_arraypad
ENH: improved, faster algorithm for array padding
==
==================
246c06d;Josh Warner (Mac);2013-05-08 00:13:41 -0500;ENH: improved, faster algorithm for array padding
New padding method which scales much better with dimensionality.
This new implementation is fully vectorized, builds each abstracted
n-dimensional padding block in a single step, and takes advantage
of separability. The API is completely preserved, and the old
algorithm is used if a vector function is input for `mode`.

The new algorithm is faster for all tested combinations of inputs,
and scales much better with dimensionality. Execution time reductions
from ~25% for small rank 1 arrays to >99% for rank 4+ arrays observed.

==

doc/release/1.8.0-notes.rst
numpy/lib/arraypad.py
numpy/lib/tests/test_arraypad.py
==================
5b28d18;Charles Harris;2013-05-19 08:12:16 -0700;Merge pull request #3340 from rgommers/distutils-doc
DOC: update numpy.distutils documentation, remove info.py details.
==
==================
79904ac;Ralf Gommers;2013-05-19 12:16:38 +0200;DOC: update numpy.distutils documentation, remove info.py details.
Addresses https://github.com/scipy/scipy/issues/2492

==

doc/DISTUTILS.rst.txt
==================
87801b9;Frederic;2013-05-17 11:47:20 -0400;updated the comment.

==

numpy/core/src/multiarray/arrayobject.c
==================
1aca67f;Frederic;2013-05-17 11:45:16 -0400;use assert function instead of python keyword

==

numpy/core/tests/test_multiarray.py
==================
029060d;Charles Harris;2013-05-17 05:43:26 -0700;Merge pull request #3337 from seberg/issue-3336
BUG: Correctly pass on ddof paramter on inside np.ma.corrcoef
==
==================
4c291f3;Sebastian Berg;2013-05-16 18:06:30 +0200;BUG: Correctly pass on ddof paramter on inside np.ma.corrcoef
While ddof has basically no effect on corrcoef, it exists,
but it was not passed on correctly (instead only bias would
be passed on). Fixes gh-3336

==

numpy/ma/extras.py
numpy/ma/tests/test_regression.py
==================
ae30efd;njsmith;2013-05-17 00:58:32 -0700;Merge pull request #3309 from juliantaylor/optimize-byteswap
ENH: optimize byteswapping via intrinsics
==
==================
f40e9d5;endolith;2013-05-17 00:03:24 -0400;DOC: Harmonize max and min docstrings with each other

==

numpy/core/code_generators/ufunc_docstrings.py
numpy/core/fromnumeric.py
numpy/lib/function_base.py
==================
bb6eb76;endolith;2013-05-16 23:51:02 -0400;DOC: Mention all min/max functions from all others, clarify differences

==

numpy/core/code_generators/ufunc_docstrings.py
numpy/core/fromnumeric.py
numpy/lib/function_base.py
==================
1c0a8fb;Frederic;2013-05-16 16:51:12 -0400;Move computation inside an if to speed it up.

==

numpy/core/src/multiarray/arrayobject.c
==================
61977a3;Frederic;2013-05-16 16:38:52 -0400;remove comparison not needed as this is check above and we break in that case.

==

numpy/core/src/multiarray/arrayobject.c
==================
fa3919c;Frederic;2013-05-16 15:52:54 -0400;fix comment style.

==

numpy/core/src/multiarray/arrayobject.c
==================
90ea64b;Frederic;2013-05-16 14:49:43 -0400;reorder code to remove not needed computation in some cases.

==

numpy/core/src/multiarray/arrayobject.c
==================
1d3fa04;Frederic;2013-05-15 13:00:04 -0400;Add test for the array_priority for comparison function.

==

numpy/core/tests/test_multiarray.py
==================
5950221;Frederic;2013-05-15 12:59:14 -0400;Commit from @seberg to make comparison use respect __array_priority__

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/umath/ufunc_object.c
==================
99cb95f;Julian Taylor;2013-05-06 19:24:10 +0200;ENH: optimize byteswapping via intrinsics
Byteswapping is implemented in hardware on x86 cpus which is more than
double as fast than the existing implementation.
The masked version used for 32bit plays better with compiler pattern
matching so it can be optimized also by non-gcc/clang compilers.

==

numpy/core/setup_common.py
numpy/core/src/multiarray/ctors.c
==================
3a09d96;Frederic;2013-05-15 11:59:34 -0400;Revert "Make comparison function (gt, ge, ...) respect __array_priority__."
This reverts commit aa7a04741146c44ab1735782a89a60b038028bf2.

==

numpy/core/src/multiarray/arrayobject.c
==================
0337cf2;njsmith;2013-05-15 08:33:55 -0700;Merge pull request #3308 from juliantaylor/optimize-isnan
ENH: use intrinsics for isnan, isfinite and isinf
==
==================
c546a22;Charles Harris;2013-05-14 19:13:14 -0700;Merge pull request #462 from ContinuumIO/ufunc-struct
Create ufunc for struct array
==
==================
d85f7aa;Jay Bourque;2013-05-14 19:38:50 -0500;Another name change to RegisterLoopForDescr

==

doc/source/reference/c-api.ufunc.rst
doc/source/user/c-info.ufunc-tutorial.rst
numpy/core/code_generators/numpy_api.py
numpy/core/src/umath/struct_ufunc_test.c.src
numpy/core/src/umath/test_rational.c.src
numpy/core/src/umath/ufunc_object.c
==================
418c75e;Charles Harris;2013-05-14 16:29:50 -0700;Merge pull request #3335 from ContinuumIO/outer_steps_fix
Fix segfault on OS X 64 bit
==
==================
1987cae;Jay Bourque;2013-05-14 18:12:01 -0500;Code cleanup

==

numpy/core/src/umath/test_rational.c.src
==================
28f72e2;Jay Bourque;2013-05-13 11:22:58 -0500;Add test for RegisterLoopByDescr and custom dtypes

==

numpy/core/src/umath/test_rational.c.src
numpy/core/tests/test_ufunc.py
==================
c2f30f9;Jay Bourque;2013-05-13 10:50:55 -0500;Change name of RegisterLoopForStructType to RegisterLoopByDescr

==

doc/source/reference/c-api.ufunc.rst
doc/source/user/c-info.ufunc-tutorial.rst
numpy/core/code_generators/numpy_api.py
numpy/core/src/umath/struct_ufunc_test.c.src
numpy/core/src/umath/ufunc_object.c
==================
84fa184;Jay Bourque;2013-05-10 15:41:04 -0500;Add null check

==

numpy/core/src/umath/ufunc_object.c
==================
5904819;Jay Bourque;2013-05-10 15:00:31 -0500;Remove unneeded code

==

numpy/core/src/umath/struct_ufunc_test.c.src
==================
b9f5e8f;Jay Bourque;2013-05-10 14:58:24 -0500;Whitespace change

==

numpy/core/src/umath/ufunc_type_resolution.c
==================
d812c0d;Jay Bourque;2013-04-29 19:31:33 -0500;Change free to PyArray_free, and formatting changes

==

numpy/core/src/umath/ufunc_object.c
==================
0e4e930;Jay Bourque;2013-04-05 15:08:46 -0500;Update c-api documentation

==

doc/source/reference/c-api.ufunc.rst
doc/source/user/c-info.ufunc-tutorial.rst
numpy/core/src/umath/struct_ufunc_test.c.src
==================
1a75f77;Jay Bourque;2013-04-03 18:45:28 -0500;Add support for python 3

==

numpy/core/src/umath/struct_ufunc_test.c.src
==================
70e8f83;Jay Bourque;2013-04-03 18:19:50 -0500;Add test for struct array ufuncs

==

numpy/core/setup.py
numpy/core/src/umath/struct_ufunc_test.c.src
numpy/core/tests/test_ufunc.py
==================
88df73b;Jay Bourque;2013-04-03 16:08:26 -0500;Code cleanup

==

numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/ufunc_type_resolution.c
==================
a3e2214;Jay Bourque;2012-10-01 14:54:03 -0500;Fix build error

==

numpy/core/src/umath/ufunc_object.c
==================
8e642e6;Jay Bourque;2012-09-21 17:17:04 -0500;Add comments for new RegisterLoopForStructType API method

==

numpy/core/src/umath/ufunc_object.c
==================
10efdbb;Jay Bourque;2012-09-21 17:05:48 -0500;Add support for structured array ufuncs
- Add New api method PyUFunc_RegisterLoopForStructType for creating new ufunc for structured array
- Add arg_dtypes array to PyUFunc_Loop1d object. This keeps track of each struct dtype that the ufunc can handle.
- Add arg_dtypes parameter to ufunc_loop_matches function so that struct dtypes can be compared for NPY_VOID type num

==

numpy/core/code_generators/numpy_api.py
numpy/core/include/numpy/ufuncobject.h
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/ufunc_type_resolution.c
==================
e71e08c;Jay Bourque;2013-05-14 16:08:13 -0500;Fix segfault
outer_steps array should be size 4 since op_count can be either 2 or 4

==

numpy/linalg/umath_linalg.c.src
==================
3084618;njsmith;2013-05-13 16:37:06 -0700;Merge pull request #3333 from mwiebe/win32_compile
BLD: Fixes for building on win32 with MSVC 2008
==
==================
f7dd423;Mark Wiebe;2013-05-13 14:06:23 -0700;BLD: Fixes for building on win32 with MSVC 2008

==

numpy/core/src/umath/operand_flag_tests.c.src
numpy/core/src/umath/test_rational.c.src
numpy/core/src/umath/ufunc_type_resolution.c
numpy/linalg/umath_linalg.c.src
==================
458b099;Charles Harris;2013-05-13 08:50:54 -0700;Merge pull request #3322 from ContinuumIO/array_equal_fix
Fix array_equal and array_equiv issue
==
==================
92503a5;Jay Bourque;2013-05-13 10:24:51 -0500;Make sure comparison result is array

==

numpy/core/numeric.py
==================
44a7961;Charles Harris;2013-05-12 07:52:08 -0700;Merge pull request #3330 from pv/fix-xerbla-test
TST: linalg: make sure that running the xerbla test is safe
==
==================
a8dacf0;Pauli Virtanen;2013-05-12 15:07:22 +0300;TST: linalg: make sure that running the xerbla test is safe

==

numpy/linalg/tests/test_linalg.py
==================
85d8ba5;Charles Harris;2013-05-12 06:22:16 -0700;Merge pull request #3327 from pv/tox-fix
MAINT: remove unsupported Python versions from tox.ini
==
==================
273225c;Charles Harris;2013-05-12 06:17:14 -0700;Merge pull request #3328 from pv/runtests
ENH: Add a runtests.py script for running the test suite
==
==================
7f8aefc;Pauli Virtanen;2013-05-11 14:28:42 +0300;MAINT: update tox.ini
Remove unsupported Python versions, flip the NPY_SEPARATE_COMPILATION
flags, and add NPY_RELAXED_STRIDES, mirroring the travis configuration.

==

tox.ini
==================
19102b0;Pauli Virtanen;2013-05-12 11:45:34 +0300;DOC: mention runtests.py in release notes

==

doc/release/1.8.0-notes.rst
==================
4a1736a;seberg;2013-05-11 08:42:13 -0700;Merge pull request #2701 from seberg/indexing
Fancy Indexing enhancements and bug fixes
==
==================
21feedd;Pauli Virtanen;2013-05-11 14:24:45 +0300;ENH: Add a runtests.py script for running the test suite
The script builds Numpy and runs the test suite of the built version.
This is useful for development.

==

runtests.py
==================
c6fc9a2;njsmith;2013-05-10 16:25:08 -0700;Merge pull request #3316 from seberg/issue-3314
BUG: Fix 0-d array special case from reductions.
==
==================
f39df48;Charles Harris;2013-05-10 15:06:37 -0700;Merge pull request #3325 from seberg/remove-gh-356-special-case
MAINT: Remove unnecessary 0-d special case.
==
==================
6c8c22e;Charles Harris;2013-05-10 14:50:38 -0700;Merge pull request #3323 from ContinuumIO/broadcast_arrays_fix
Broadcast arrays fix
==
==================
2a2f91f;Sebastian Berg;2013-05-10 23:40:32 +0200;MAINT: Remove unnecessary 0-d special case.
This special case was made unnecessary by changes to the nditer.

==

numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_ufunc.py
==================
aa7a047;Frederic;2013-05-10 16:58:55 -0400;Make comparison function (gt, ge, ...) respect __array_priority__.

==

numpy/core/src/multiarray/arrayobject.c
==================
aac0e1b;Charles Harris;2013-05-10 13:52:14 -0700;Merge pull request #359 from jayvius/operand-flags
Allow ufunc operand flags to be set
==
==================
6dc709a;Jay Bourque;2013-05-10 15:32:24 -0500;Fix array_equal and array_equiv issue
array_equal() and array_equiv() don't work for string arrays and record arrays. This is because those methods use numpy.equals ufunc for comparison, and there are no equal ufuncs registered for strings and record arrays. Replace numpy.equals with '==' array operation, which handles strings and record arrays.

==

numpy/core/numeric.py
numpy/core/tests/test_numeric.py
==================
d6cef9f;Jay Bourque;2013-05-10 15:22:19 -0500;Add test

==

numpy/core/tests/test_api.py
==================
4d8e317;Jay Bourque;2013-05-10 15:14:35 -0500;Fix issue with broadcast_arrays() and user defined dtypes
broadcast_arrays() does not handle struct and custom dtypes correctly. Dtype of returned broadcasted arrays is always '|V8'. Fix broadcast_arrays() so that dtype of returned arrays is correct dtype for user defined dtypes.

==

numpy/lib/stride_tricks.py
==================
ec23d01;Jay Bourque;2013-05-10 11:47:51 -0500;Remove unneeded blank line

==

numpy/core/src/umath/ufunc_object.c
==================
c1bbf8f;Jay Bourque;2013-05-09 12:05:26 -0500;Add null check after allocating op_flags

==

numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/umathmodule.c
==================
876aec1;Jay Bourque;2013-05-09 11:26:40 -0500;Whitespace changes

==

numpy/core/src/umath/ufunc_object.c
==================
6b892cf;njsmith;2013-05-09 09:18:44 -0700;Merge pull request #3318 from pv/test-exe
BUG: testing: always enable --exe
==
==================
cdea31e;Pauli Virtanen;2013-05-09 18:09:44 +0300;BUG: testing: always enable --exe
Setuptools tends to set +x to the installed test scripts, which makes
numpy.test() to not run any tests. Having --exe always enabled is not
problematic because only files matching 'test_*.py' are looked into.

==

numpy/testing/nosetester.py
==================
ecdad49;Julian Taylor;2013-05-09 17:25:57 +0200;MAINT: document why OPTIONAL_INTRINSICS needs arguments

==

numpy/core/setup_common.py
==================
3e20690;Julian Taylor;2013-05-09 17:23:05 +0200;MAINT: document intrinsic macro guards

==

numpy/core/include/numpy/npy_math.h
==================
509bc25;Julian Taylor;2013-05-09 14:16:16 +0200;MAINT: mask npy_config.h include with HAVE_NPY_CONFIG_H

==

numpy/core/include/numpy/npy_math.h
numpy/core/setup.py
==================
b114d1e;Julian Taylor;2013-05-09 14:15:57 +0200;ENH: add possibility to add define_macros to extensions

==

numpy/distutils/misc_util.py
==================
b76df85;seberg;2013-05-09 03:13:13 -0700;Merge pull request #3313 from ecatmur/master
BUG: fix potentially infinite recursion in VOID_nonzero. Fixes #3312.
==
==================
c018cd8;Sebastian Berg;2013-05-08 19:39:16 +0200;BUG: Fix 0-d array special case from reductions.
This channels scalars through the usual reduction machinery and
modifies it slightly to correctly support scalar reductions of
identity-less ufuncs.

==

numpy/core/src/umath/reduction.c
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_ufunc.py
==================
b0ef6ae;Julian Taylor;2013-05-07 18:06:31 +0200;MAINT: check for intrinsics at configure time

==

numpy/core/include/numpy/npy_math.h
numpy/core/setup.py
numpy/core/setup_common.py
==================
09b25ce;Edward Catmur;2013-05-07 17:47:38 +0100;TST: add a test for issue #3312

==

numpy/core/tests/test_regression.py
==================
72ffc68;Edward Catmur;2013-05-07 16:49:39 +0100;BUG: fix potentially infinite recursion in VOID_nonzero. Fixes #3312.

==

numpy/core/src/multiarray/arraytypes.c.src
==================
0af5f87;Charles Harris;2013-05-07 08:16:46 -0700;Merge pull request #3310 from JDWarner/cleanup_arraypad
Cleanup arraypad.py (PEP8, PEP257) and correct docstrings
==
==================
f9c9555;Sebastian Berg;2013-05-04 14:48:42 +0200;MAINT: Remove unnecessary and wrong check for mapiterswap
With the slight modification of the MapIter API to allow newaxis
in fancy indexes, the MapIterObject consec field is already the
axis to transpose to, and with a leading newaxis, even if
iteraxes[0] is 0, consec may not be 0.

==

numpy/core/src/multiarray/multiarray_tests.c.src
==================
fcd9ef9;Josh Warner (Mac);2013-05-06 21:53:25 -0500;STY: pep8 and pep257 audit.
Audit numpy/lib/arraypad.py for pep8 and pep257 compliance.
Also fix a few minor docstring corrections converting ] into ) or
vice versa.

==

numpy/lib/arraypad.py
==================
4b4dc5f;Jay Bourque;2013-05-06 14:39:14 -0500;Fix formatting issues

==

numpy/core/include/numpy/ufuncobject.h
numpy/core/setup.py
numpy/core/src/umath/ufunc_object.c
==================
2ac1628;Jay Bourque;2013-05-06 14:38:48 -0500;Fix python 2/3 issues in operand_flag_tests module

==

numpy/core/src/umath/operand_flag_tests.c.src
==================
086ac27;Jay Bourque;2013-04-18 14:17:34 -0500;Add test for setting operand flags through c api

==

numpy/core/setup.py
numpy/core/src/umath/operand_flag_tests.c.src
numpy/core/tests/test_ufunc.py
==================
1a28542;Jay Bourque;2013-04-16 14:52:05 -0500;Update c api documentation

==

doc/release/1.8.0-notes.rst
doc/source/reference/c-api.types-and-structures.rst
==================
fdb42c4;Jay Bourque;2013-03-16 14:56:57 -0500;Remove guard against read+write output operands

==

numpy/core/src/umath/ufunc_object.c
==================
486a537;Jay Bourque;2012-07-17 23:57:45 -0500;correctly initialize op_flags and iter_flags in frompyfunc()

==

numpy/core/src/umath/umathmodule.c
==================
5792393;Jay Bourque;2012-07-17 16:23:06 -0500;initialize ufunc op_flags pointer in frompyfunc()

==

numpy/core/src/umath/umathmodule.c
==================
457ece1;jayvius;2012-07-12 16:51:07 -0500;minor fixes for previous ufunc operand flag change

==

numpy/core/src/umath/ufunc_object.c
==================
c5a406f;jayvius;2012-07-12 16:50:19 -0500;This change allows ufunc operand flags to be set in addition to the default operand flags set by the nditer object. For example, after calling PyUFunc_FromFuncAndData() to create a ufunc object, the first operand can be set to be read/write like so:
ufunc->op_flags[0] = NPY_ITER_READWRITE

Setting flags for output operands is not supported at this time and
will raise an exception.

This change also allows the global nditer flags to be set, so after
setting the read/write flag, the reduce ok flag could be set like so:

ufunc->iter_flags = NPY_ITER_REDUCE_OK

==

numpy/core/include/numpy/ufuncobject.h
numpy/core/src/umath/ufunc_object.c
==================
c822812;Julian Taylor;2013-05-06 18:09:44 +0200;ENH: use intrinsics for isnan, isfinite and isinf
Use of intrinsics avoids expensive function calls in tight loops on x86
cpus where these operations are implemented in hardware while still
retaining same portability.
More than doubles performance of np.isnan/isinf/isfinite.

==

numpy/core/include/numpy/npy_math.h
==================
7d76c74;Ralf Gommers;2013-05-05 04:13:04 -0700;Merge pull request #3182 from juliantaylor/debug-ext
get_shared_lib_extension(): strip debug extension from so ext
==
==================
dcf7cac;Charles Harris;2013-05-04 16:34:04 -0700;Merge pull request #3264 from endolith/patch-1
DOC: Change example to demonstrate function
==
==================
4c6cfab;Charles Harris;2013-05-04 16:28:20 -0700;Merge pull request #3289 from rkern/fix-numpy.org-links
BUG: Fix some README links to point to www.numpy.org
==
==================
94f3b30;Charles Harris;2013-05-04 13:25:16 -0700;Merge pull request #3307 from rgommers/fix-bento-build
BLD: fix Bento build after umath_linalg move from core to linalg module.
==
==================
3d431ab;Ralf Gommers;2013-05-04 19:28:09 +0200;BLD: fix Bento build after umath_linalg move from core to linalg module.

==

bscript
numpy/core/bscript
numpy/linalg/bento.info
numpy/linalg/bscript
==================
004ce27;Charles Harris;2013-05-03 16:14:33 -0700;Merge pull request #3303 from ContinuumIO/rational_fix
Fix clang build issue
==
==================
caa66a7;Jay Bourque;2013-05-03 14:56:56 -0500;Fix potential reference leak

==

numpy/core/src/umath/test_rational.c.src
==================
0a4c8ad;Charles Harris;2013-05-03 12:46:41 -0700;Merge pull request #3305 from arinkverma/master
MAINT: Remove unneeded version check from multiarray/common.c.
==
==================
7d80697;Arink Verma;2013-05-04 01:03:40 +0530;MAINT: Remove unneeded version check from multiarray/common.c.
A version check for Python >= 2.6 is no longer needed as versions < 2.6
are no longer supported.

==

numpy/core/src/multiarray/common.c
==================
b1ca509;Jay Bourque;2013-05-03 11:37:03 -0500;Refactor previous commit

==

numpy/core/src/umath/test_rational.c.src
==================
f2072a1;Jay Bourque;2013-05-03 11:17:20 -0500;Do not return anything for python 2

==

numpy/core/src/umath/test_rational.c.src
==================
f817e76;Charles Harris;2013-05-03 06:26:48 -0700;Merge pull request #3301 from charris/fix-test_rational
BUG: gh-3300, Fix missing return value in test_rational.c.src.
==
==================
88a9b6d;Charles Harris;2013-05-03 07:10:07 -0600;BUG: gh-3300, Fix missing return value in test_rational.c.src.
Some error returns were returning nothing rather than NULL.

Closes #3300.

==

numpy/core/src/umath/test_rational.c.src
==================
086721c;Charles Harris;2013-05-02 20:27:27 -0700;Merge pull request #3261 from keflavich/f77_ext_bugfix
bugfix in build_ext: check that ext has an attribute before trying to us it
==
==================
962f429;Charles Harris;2013-05-02 20:25:15 -0700;Merge pull request #3281 from charris/2to3-apply-idioms-fixer
MAINT: Apply 2to3 idioms fixer.
==
==================
dec4f4b;Charles Harris;2013-04-26 21:31:12 -0600;MAINT: Apply 2to3 idioms fixer.
The idioms fixer makes the following replacements.

1) int <- bool
2) comparison or identity of types <- isinstance
3) a.sort() <- sorted(a)

There were two problems that needed to be dealt with after the
application of the fixer. First, the replacement of comparison or
identity of types by isinstance was not always correct.  The isinstance
function returns true for subtypes whereas many of the places where the
fixer made a substitution needed to check for exact type equality.
Second, the sorted function was applied to arrays, but because it treats
them as iterators and constructs a sorted list from the result, that is
the wrong thing to do.

Closes #3062.

==

numpy/core/code_generators/generate_umath.py
numpy/core/fromnumeric.py
numpy/core/records.py
numpy/core/tests/test_api.py
numpy/core/tests/test_numeric.py
numpy/ctypeslib.py
numpy/distutils/ccompiler.py
numpy/distutils/conv_template.py
numpy/distutils/cpuinfo.py
numpy/distutils/fcompiler/ibm.py
numpy/distutils/from_template.py
numpy/doc/__init__.py
numpy/f2py/auxfuncs.py
numpy/f2py/cb_rules.py
numpy/f2py/cfuncs.py
numpy/f2py/common_rules.py
numpy/f2py/crackfortran.py
numpy/f2py/f2py2e.py
numpy/f2py/f90mod_rules.py
numpy/f2py/rules.py
numpy/lib/arrayterator.py
numpy/lib/format.py
numpy/lib/function_base.py
numpy/lib/index_tricks.py
numpy/lib/npyio.py
numpy/lib/polynomial.py
numpy/lib/shape_base.py
numpy/lib/type_check.py
numpy/lib/utils.py
numpy/linalg/lapack_lite/clapack_scrub.py
numpy/linalg/lapack_lite/make_lite.py
numpy/ma/extras.py
numpy/numarray/alter_code1.py
numpy/numarray/functions.py
numpy/numarray/session.py
numpy/oldnumeric/alter_code1.py
numpy/oldnumeric/alter_code2.py
numpy/oldnumeric/fix_default_axis.py
tools/c_coverage/c_coverage_report.py
==================
63a9f19;Charles Harris;2013-05-02 19:48:52 -0700;Merge pull request #3294 from matthew-brett/layout-order-docs
DOC: expanding documentation of index ordering
==
==================
8fa264a;Charles Harris;2013-05-02 19:40:38 -0700;Merge pull request #2822 from ContinuumIO/custom_output_operand_fix
Fix for ufuncs with built in input operands and custom output operands
==
==================
0330cae;Pauli Virtanen;2013-05-01 22:45:44 +0300;Merge pull request #379 from JonWaltman/doc-fix-duplicate-modindex
DOC: sphinxext: Fix np domain to avoid duplicate module indices in docs

==
==================
7738aed;Jonathan Waltman;2012-08-10 07:25:48 -0500;Fix np domain to avoid duplicate module indices in docs

==

doc/sphinxext/numpydoc/numpydoc.py
==================
5808c8a;njsmith;2013-05-01 06:56:53 -0700;Merge pull request #3296 from pv/fix-sphinxext
BUG: sphinxext: fix sphinx extensions broken recently
==
==================
54524cd;Pauli Virtanen;2013-05-01 15:26:23 +0300;BUG: sphinxext: fix sphinx extensions broken recently

==

doc/sphinxext/numpydoc/docscrape_sphinx.py
doc/sphinxext/numpydoc/tests/test_docscrape.py
doc/sphinxext/numpydoc/traitsdoc.py
==================
85e5042;Matthew Brett;2013-04-30 13:13:23 -0700;DOC: expanding documentation of index ordering
Trying to separate the ideas of index ordering and memory layout.

As discussed on the mailing list

==

numpy/core/fromnumeric.py
==================
6b0784b;Jay Bourque;2013-04-29 19:16:48 -0500;Formatting changes

==

numpy/core/src/umath/test_rational.c.src
numpy/core/tests/test_ufunc.py
==================
c7c4d40;Robert Kern;2013-04-29 16:27:25 +0100;BUG: Fix some README links to point to www.numpy.org
Fixes #3288

==

README.txt
tools/osxbuild/docs/README.txt
==================
fb6cfd7;Julian Taylor;2013-03-29 16:40:31 +0100;BUG: hardcode some known shared library extensions
the configuration variables are not a reliable mean to get the shared
library extension. darwin, windows and debug linux are wrong in these
variables.
SHLIB_SUFFIX is also wrong as of python 3.3.1
closes #3057

==

numpy/distutils/misc_util.py
numpy/distutils/tests/test_misc_util.py
==================
a8805f6;Charles Harris;2013-04-27 17:13:00 -0700;Merge pull request #3265 from jamestwebber/patch-2
Update masked array copy to preserve array order
==
==================
0d9eac4;seberg;2013-04-27 03:05:16 -0700;Merge pull request #3280 from seberg/issue-3279
BUG: np.insert must copy index array
==
==================
0a9da01;Sebastian Berg;2013-04-26 23:26:58 +0200;BUG: np.insert must copy index array
Otherwise it would do in-place changes to it. Fixes gh-3279.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
4682e00;Jay Bourque;2013-04-26 12:40:40 -0500;Rename rational module to test_rational

==

numpy/core/setup.py
numpy/core/src/umath/test_rational.c.src
numpy/core/tests/test_ufunc.py
==================
375d870;Jay Bourque;2013-04-26 12:26:40 -0500;Rename rational.c.src to test_rational.c.src

==

numpy/core/src/umath/rational.c.src
numpy/core/src/umath/test_rational.c.src
==================
d73fb73;Jay Bourque;2013-04-17 18:07:31 -0500;Add another test for ufunc custom output type

==

numpy/core/tests/test_ufunc.py
==================
ecb0416;Jay Bourque;2013-04-08 15:20:30 -0500;More updates for python 3

==

numpy/core/src/umath/rational.c.src
==================
55d55ec;Jay Bourque;2013-04-03 15:53:53 -0500;Fix build issues on python 3

==

numpy/core/src/umath/rational.c.src
==================
aa0b3cb;Jay Bourque;2012-12-19 15:17:22 -0600;Add unit test for ufunc with custom type
Add unit test for ufunc with built in input types and custom output type.
Also, borrow rational custom dtype code from numpy-dtypes projects so that numpy
has a custom dtype for testing purposes.

==

doc/release/1.8.0-notes.rst
numpy/core/setup.py
numpy/core/src/umath/rational.c.src
numpy/core/tests/test_ufunc.py
==================
877d047;Jay Bourque;2012-11-15 13:11:24 -0600;Fix for ufuncs with built in input operands and custom output operands

==

numpy/core/src/umath/ufunc_type_resolution.c
==================
f8a21ef;David Cournapeau;2013-04-26 07:13:25 -0700;Merge pull request #3272 from cournape/remove_obsolete_ifort_flags
ENH: remove obsolete ifort flags
==
==================
1d6ced7;Charles Harris;2013-04-25 16:23:33 -0700;Merge pull request #3270 from ContinuumIO/astype_fix
Fix for astype('S') string truncate issue
==
==================
1be5e62;njsmith;2013-04-25 15:24:47 -0700;Merge pull request #3271 from charris/maint-update-install-txt
MAINT: Update INSTALL.txt after dropping Python 2.4, 2.5.
==
==================
496f683;Jay Bourque;2013-04-25 17:00:06 -0500;Add tests for strings shorter than 64 characters

==

numpy/core/src/multiarray/convert_datatype.c
numpy/core/tests/test_api.py
==================
7019591;Charles Harris;2013-04-25 15:27:09 -0600;MAINT: Improve INSTALL.txt wording and wrap lines at 75 characters.

==

INSTALL.txt
==================
c6df6b1;Jay Bourque;2013-04-25 13:38:16 -0500;Add support for unicode strings

==

numpy/core/src/multiarray/convert_datatype.c
numpy/core/tests/test_api.py
==================
5866d03;Charles Harris;2013-04-25 10:25:47 -0600;MAINT: Update INSTALL.txt after dropping Python 2.4, 2.5.
Make the required Python versions >= 2.6 or 3.2. Remove text specific
to earlier Python versions.

==

INSTALL.txt
==================
0291896;njsmith;2013-04-25 06:20:09 -0700;Merge pull request #3268 from charris/maint-remove-unneeded-version-checks
MAINT: Remove unneeded version checks.
==
==================
65c172f;njsmith;2013-04-25 06:15:24 -0700;Merge pull request #3269 from charris/maint-remove-py3tool-file
MAINT: Remove the tools/py3tool.py file.
==
==================
f231558;Jay Bourque;2013-04-24 21:42:15 -0500;Fix for astype('S') string truncate issue
Calling astype('S') for an array of string objects results in a string array where dtype='S64', even if the original string objects are longer than 64 characters. Add call to GetParamsFromObject() to determine maximum string object length, and use that as string dtype size.

==

numpy/core/src/multiarray/convert_datatype.c
numpy/core/tests/test_api.py
==================
11b2fcf;Charles Harris;2013-04-24 19:42:52 -0600;MAINT: Remove the tools/py3tool.py file.
The tools/py3tool.py file was responsible for running 2to3. Now that
2to3 is no longer run it is not needed and can be removed.

==

tools/py3tool.py
==================
c92d924;Charles Harris;2013-04-21 22:52:15 -0600;MAINT: Remove unneeded version checks.
Now that only Python versions 2.6-2.7 and 3.2-3.3 are supported
some version checks are no longer needed. This patch removes them
so as to clean up the code.

==

numpy/core/code_generators/genapi.py
numpy/core/defchararray.py
numpy/core/memmap.py
numpy/core/setup.py
numpy/core/tests/test_defchararray.py
numpy/core/tests/test_deprecations.py
numpy/core/tests/test_dtype.py
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_print.py
numpy/core/tests/test_umath.py
numpy/lib/npyio.py
numpy/lib/utils.py
numpy/polynomial/polyutils.py
==================
d0d8d1c;Charles Harris;2013-04-24 18:26:47 -0700;Merge pull request #3266 from charris/2to3-remove-2to3-fixer
2to3 remove 2to3 fixer
==
==================
a09fc33;David Cournapeau;2013-04-23 19:48:00 +0100;ENH: remove obsolete ifort flags, ensure generated binaries work everywhere.

==

numpy/distutils/fcompiler/intel.py
==================
d6f6268;Charles Harris;2013-04-21 21:51:59 -0600;MAINT: Use from future_builtins zip and map.
For Python versions 2.6 and 2.7 the iterator forms of zip and map
can be imported from future_builtins. That is done here so as to
avoid using itertools.{izip, imap}.

==

numpy/lib/npyio.py
numpy/lib/recfunctions.py
==================
ede7dc4;Charles Harris;2013-04-21 21:42:43 -0600;DOC: Document that the 2to3 fixer is no longer used.

==

doc/release/1.8.0-notes.rst
==================
b4180e3;Charles Harris;2013-04-21 21:26:44 -0600;2to3: Stop using 2to3 and remove the tools/py3tool.py file.
The same code base now supports python versions 2.6-2.7 and 3.2-3.3.

Closes #3247.

==

setup.py
==================
ee19043;Charles Harris;2013-04-21 20:25:35 -0700;Merge pull request #3257 from charris/2to3-apply-unicode-fixer
2to3: Apply unicode fixer.
==
==================
211154e;Charles Harris;2013-04-17 18:27:54 -0600;BUG: Fix typo in docscrape_sphinx.py import.

==

doc/sphinxext/numpydoc/docscrape_sphinx.py
==================
3a5c547;Charles Harris;2013-04-17 00:04:46 -0600;2to3: Apply unicode fixer.
The unicode fixer strips the u from u'hi' and converts the unicode type
to str. The first won't work for Python 2 and instead we replace the u
prefix with the sixu function borrowed from the six compatibility
package. That function calls the unicode constructor with the
'unicode_escape' encoder so that the many tests using escaped unicode
characters like u'\u0900' will be handled correctly. That makes the
sixu function a bit different from the asunicode function currently in
numpy.compat and also provides a target that can be converted back to
the u prefix when support for Python 3.2 is dropped. Python 3.3
reintroduced the u prefix for compatibility.

The unicode fixer also replaces 'unicode' with 'str' as 'unicode' is no
longer a builtin in Python 3. For code compatibility, 'unicode' is
defined either as 'str' or 'unicode' in numpy.compat so that checks like

    if isinstance(x, unicode):
        ...

will work properly for all python versions.

Closes #3089.

==

doc/sphinxext/numpydoc/docscrape_sphinx.py
doc/sphinxext/numpydoc/numpydoc.py
doc/sphinxext/numpydoc/tests/test_docscrape.py
numpy/__init__.py
numpy/compat/py3k.py
numpy/core/numerictypes.py
numpy/core/tests/test_arrayprint.py
numpy/core/tests/test_defchararray.py
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_nditer.py
numpy/core/tests/test_regression.py
numpy/core/tests/test_unicode.py
numpy/lib/_iotools.py
numpy/lib/npyio.py
numpy/lib/tests/test_regression.py
numpy/ma/tests/test_regression.py
tools/py3tool.py
==================
56e806a;Charles Harris;2013-04-21 19:46:02 -0700;Merge pull request #3242 from charris/2to3-apply-types-fixer
2to3: Apply types fixer.
==
==================
63d9a9b;Adam Ginsburg;2013-04-21 12:04:28 -0600; reduces excess cleverness from 1/2 to 1/3

==

numpy/distutils/command/build_ext.py
==================
abaf953;jamestwebber;2013-04-20 12:40:22 -0700;Adding a test for #3265
Test to ensure that MaskedArray.filled() doesn't change the order of the array.

This test is a little messy because there are problems constructing an F-contiguous masked array in the first place. I had to explicitly pass in F-contiguous arrays for data and mask.
==

numpy/ma/tests/test_core.py
==================
4e6b48e;jamestwebber;2013-04-20 11:50:11 -0700;Update masked array copy to preserve array order
Using 'K' to try to match array order, fixes https://github.com/numpy/numpy/issues/3156
==

numpy/ma/core.py
==================
e3cd6a4;endolith;2013-04-19 22:37:01 -0300;DOC: Change example to demonstrate function
"a * 0.5" example might as well be new_func(a) directly, it doesn't demonstrate the purpose of apply_along_axis().
==

numpy/lib/shape_base.py
==================
9016aa4;Adam Ginsburg;2013-04-18 09:40:17 -0600;bugfix in build_ext: check that ext has an attribute before trying to use it

==

numpy/distutils/command/build_ext.py
==================
1975606;Charles Harris;2013-04-17 08:50:16 -0700;Merge pull request #3220 from pv/linalg-gu
Add generalized ufunc linalg functions and make numpy.linalg use them
==
==================
1a9aa5a;Charles Harris;2013-04-15 09:17:30 -0700;Merge pull request #3250 from charris/small-nditer-cleanup
MAINT: Style cleanup of numpy/core/src/multiarray/nditer_pywrap.c.
==
==================
724f081;Charles Harris;2013-04-15 09:37:12 -0600;MAINT: Style cleanup of numpy/core/src/multiarray/nditer_pywrap.c.
Small indentation cleanup bringing the method list into standard
Numpy form.

==

numpy/core/src/multiarray/nditer_pywrap.c
==================
9361471;Charles Harris;2013-04-15 08:35:10 -0700;Merge pull request #3249 from charris/2to3-apply-next-fixer
2to3: Apply next fixer.
==
==================
c6de097;Charles Harris;2013-04-06 11:46:39 -0600;2to3: Apply next fixer.
The next builtin has been available since Python 2.6 and allows
`it.next()` to be replaced by `next(it)`. In Python 3 the `next` method
is gone entirely, replaced entirely by the `__next__` method. The next
fixer changes all the `it.next()` calls to the new form and renames the
`next` methods to `__next__`. In order to keep  Numpy code backwards
compatible with Python 2, a `next` method was readded to all the Numpy
iterators after the fixer was run so they all contain both methods. The
presence of the appropriate method could have been made version
dependent, but that looked unduly complicated.

Closes #3072.

==

doc/sphinxext/numpydoc/comment_eater.py
numpy/core/tests/test_nditer.py
numpy/lib/index_tricks.py
numpy/lib/npyio.py
numpy/linalg/lapack_lite/fortran.py
numpy/ma/core.py
tools/py3tool.py
==================
a196d78;njsmith;2013-04-15 02:45:47 -0700;Merge pull request #3248 from charris/2to3-apply-urllib-fixer
2to3: Apply urllib fixer.
==
==================
c70025a;Charles Harris;2013-04-14 12:17:43 -0600;2to3: Apply urllib fixer.
Various functions have been moved around in the stdlib for Python 3,
this fixes that up so that the code is valid in both Python 2 and
Python 3.

Note: monkey patching the stlib urlopen for testing looks a bit hokey
to me, but I don't see an easier, more reliable way to do the test.

Closes #3090.

==

numpy/lib/_datasource.py
numpy/lib/tests/test__datasource.py
tools/py3tool.py
==================
6c47259;Charles Harris;2013-04-14 09:59:01 -0700;Merge pull request #3245 from charris/2to3-apply-isinstance-fixer
2to3: Skip isinstance fixer.
==
==================
3a31503;Charles Harris;2013-04-14 10:27:25 -0600;2to3: Skip isinstance fixer.
The isinstance fixer removes duplicate types in the second argument of
isinstance(). For example, isinstance(x, (int, int)) is converted to
isinstance(x, (int)). This would certainly apply if we let the long
fixer replace long by int, but as is it does nothing.

Duplicate entries are supposedly deprecated in Python 3, I'm not sure
why or how, but it does not seem to be a problem at this point. If it
ever becomes so, we can deal with it then.

Closes #3085

==

tools/py3tool.py
==================
c879ad8;Charles Harris;2013-04-13 12:21:42 -0600;2to3: Apply types fixer.
Python 3 removes the builtin types from the types module. The types
fixer replaces such references with the builtin types where possible
and also takes care of some special cases:

    types.TypeNone           <- type(None)
    types.NotImplementedType <- type(NotImplemented)
    types.EllipsisType       <- type(Ellipsis)

The only two tricky substitutions are

    types.StringType         <- bytes
    types.LongType           <- int

These are fixed up to support both Python 3 and Python 2 code by
importing the long and bytes types from numpy.compat.

Closes #3240.

==

numpy/compat/_inspect.py
numpy/core/fromnumeric.py
numpy/core/records.py
numpy/f2py/auxfuncs.py
numpy/f2py/cb_rules.py
numpy/f2py/cfuncs.py
numpy/f2py/crackfortran.py
numpy/f2py/f2py2e.py
numpy/f2py/rules.py
numpy/fft/helper.py
numpy/ma/tests/test_core.py
numpy/ma/tests/test_old_ma.py
numpy/oldnumeric/ma.py
numpy/testing/utils.py
tools/py3tool.py
==================
3f2c789;Charles Harris;2013-04-14 07:41:43 -0700;Merge pull request #3244 from charris/2to3-apply-zip-fixer
2to3: Apply zip fixer.
==
==================
61c5ac6;Charles Harris;2013-04-14 07:33:29 -0700;Merge pull request #3241 from charris/2to3-apply-nonzero-fixer
2to3: Apply nonzero fixer.
==
==================
ff464ef;Charles Harris;2013-04-14 07:29:22 -0700;Merge pull request #3238 from charris/2to3-apply-renames-fixer
2to3: Apply renames fixer.
==
==================
f62bc39;Charles Harris;2013-04-14 07:23:52 -0700;Merge pull request #3221 from seberg/document-relaxed-strides
DOC: Document NPY_RELAXED_STRIDES_CHECKING changes
==
==================
01ed88a;Charles Harris;2013-04-14 07:15:26 -0700;Merge pull request #3237 from charris/2to3-apply-basestring
2to3: Apply basestring fixer.
==
==================
0dfe67a;Charles Harris;2013-04-13 15:34:26 -0600;2to3: Apply zip fixer.
In Python 3 zip returns an iterator instead of a list. Consequently, in
places where an iterator won't do it must be enclosed in list(...).
Lists instead of iterators are also used in array constructors as using
iterators there usually results in an object array containing an
iterator object.

Closes #3094

==

doc/sphinxext/numpydoc/compiler_unparse.py
numpy/core/tests/test_getlimits.py
numpy/core/tests/test_nditer.py
numpy/core/tests/test_ufunc.py
numpy/lib/_iotools.py
numpy/lib/npyio.py
numpy/lib/tests/test_arraysetops.py
numpy/lib/tests/test_io.py
numpy/lib/tests/test_recfunctions.py
numpy/ma/mrecords.py
numpy/ma/tests/test_core.py
numpy/ma/tests/test_mrecords.py
tools/py3tool.py
==================
54ca3f2;Charles Harris;2013-04-13 11:17:54 -0600;2to3: Apply nonzero fixer.
In Python 3 the `__nonzero__` class method is replaced by `__bool__`.
This only affects the MaskedArray class in numpy/oldnumeric/ma.py file
and the simplest solution is to provide both methods. I have my doubts
that the fixed up Python 3 version was correct or even tested, but I
think the current solution should work for as long as oldnumeric stays
in numpy.

Closes #3073.

==

numpy/oldnumeric/ma.py
tools/py3tool.py
==================
e589c6e;Charles Harris;2013-04-13 09:44:11 -0700;Merge pull request #3239 from pv/skipif-lf
ENH: testing: remove an annoying line feed from skipif decorator
==
==================
9d849ed;Pauli Virtanen;2013-04-13 19:26:10 +0300;ENH: testing: remove an annoying line feed from skipif decorator
The line feed is annoying as it makes Nose's verbose test output not
print one line per one test.

==

numpy/testing/decorators.py
==================
ffdad17;Charles Harris;2013-04-13 09:36:36 -0600;2to3: Apply renames fixer.
Rename sys.maxint to sys.maxsize when the Python version is >= 3.  This
change was made in Python 3 because all integers are 'long' integers and
their maximum value bears no relationship to the C type that int used to
represent. The new sys.maxsize value is the maximum value of Py_ssize_t.
This change has not led to any reported problems since the numpy 1.5
release.

Closes #3082

==

numpy/core/arrayprint.py
numpy/oldnumeric/ma.py
tools/py3tool.py
==================
68338ee;Charles Harris;2013-04-13 09:05:31 -0600;2to3: Apply basestring fixer.
The basestring class is not defined in Python 3 and the fixer replaces
it with str. In order to have a common code base we define basestring in
numpy/compat/py3k.py to be str when the Python version is >= 3,
otherwise basestring and import it where needed.  That works for most
cases, but there are a few files where the version dependent define
needs to be in the file.

Closes #3042.

==

numpy/compat/py3k.py
numpy/core/memmap.py
numpy/core/numeric.py
numpy/distutils/extension.py
numpy/lib/_iotools.py
numpy/lib/format.py
numpy/lib/npyio.py
numpy/lib/recfunctions.py
numpy/ma/core.py
numpy/ma/mrecords.py
numpy/testing/nosetester.py
tools/py3tool.py
==================
688bc60;Charles Harris;2013-04-13 07:00:11 -0700;Merge pull request #3232 from charris/2to3-apply-numliterals-fixer
2to3: Apply the `numliterals` fixer and skip the `long` fixer.
==
==================
7f5af37;Charles Harris;2013-04-11 14:31:52 -0600;2to3: Apply the `numliterals` fixer and skip the `long` fixer.
The numliterals fixer replaces the old style octal number like '01' by
'0o1' removes the 'L' suffix.

Octal values were previously mistakenly specified in some dates, those
uses have been corrected by removing the leading zeros.

Simply Removing the 'L' suffix should not be a problem, but in some
testing code it looks neccesary, so in those places the Python long
constructor is used instead.

The 'long' type is no longer defined in Python 3. Because we need to
have it defined for Python 2 it is added to numpy/compat/np3k.py where
it is defined as 'int' for Python 3 and 'long' for Python 2. The `long`
fixer then needs to be skipped so that it doesn't undo the good work.

Closes #3074, #3067.

==

numpy/__init__.py
numpy/compat/py3k.py
numpy/core/defchararray.py
numpy/core/getlimits.py
numpy/core/memmap.py
numpy/core/numerictypes.py
numpy/core/records.py
numpy/core/tests/test_regression.py
numpy/core/tests/test_shape_base.py
numpy/f2py/tests/test_return_complex.py
numpy/f2py/tests/test_return_integer.py
numpy/f2py/tests/test_return_logical.py
numpy/f2py/tests/test_return_real.py
numpy/lib/_iotools.py
numpy/lib/arraypad.py
numpy/lib/arrayterator.py
numpy/lib/format.py
numpy/lib/function_base.py
numpy/lib/tests/test__datasource.py
numpy/lib/tests/test__iotools.py
numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_type_check.py
numpy/lib/user_array.py
numpy/linalg/tests/test_linalg.py
numpy/ma/core.py
numpy/numarray/functions.py
numpy/numarray/numerictypes.py
numpy/random/tests/test_regression.py
tools/py3tool.py
==================
8eebee8;Pauli Virtanen;2013-04-13 16:36:46 +0300;TST: linalg: add tests for xerbla functionality (with and without GIL)

==

numpy/linalg/lapack_litemodule.c
numpy/linalg/tests/test_linalg.py
==================
374e0b4;Pauli Virtanen;2013-04-13 16:35:57 +0300;BUG: linalg: fix LAPACK error handling in lapack_litemodule
If an exception is pending (raised from xerbla), the routines must
return NULL.

==

numpy/linalg/lapack_litemodule.c
==================
68c186d;Pauli Virtanen;2013-04-13 16:14:04 +0300;BUG: linalg: do not assume that GIL is enabled in xerbla_
With the new ufunc-based linalg, GIL is released in ufuncs, and needs to
be reacquired when raising errors in xerbla_.

==

numpy/linalg/lapack_lite/python_xerbla.c
==================
74b08b3;njsmith;2013-04-13 01:12:03 -0700;Merge pull request #3236 from charris/2to3-apply-itertools
2to3: Apply itertools fixer.
==
==================
5de56ef;Charles Harris;2013-04-12 20:10:58 -0600;2to3: Apply itertools fixer.
In Python 3 zip, map, and filter are all iterators, consequently the
itertools variants izip, imap, and ifilter have been removed and the
itertools fixer replaces them with the unprefixed names.

Because the places where the iterator variants are used in current look
like places where the iterator version might be useful, the approach
taken here is to define the prefixed versions to the unprefixed versions
for Python 3, but otherwise import them from itertools.

Closes #3233.

==

numpy/lib/npyio.py
numpy/lib/recfunctions.py
tools/py3tool.py
==================
06066cb;Charles Harris;2013-04-12 20:19:26 -0700;Merge pull request #3235 from charris/2to3-apply-itertools_imports
2to3: Skip itertools_imports fixer.
==
==================
7e6c3eb;Charles Harris;2013-04-12 21:01:00 -0600;2to3: Skip itertools_imports fixer.
No files are changed by the itertools_imports fixer so skip it.  What
the fixer does is rename imports of imap, ifilter, and izip to map,
filter, and zip since the latter are iterators in Python 3.

Closes #3234

==

tools/py3tool.py
==================
fb9b5bd;Pauli Virtanen;2013-04-12 18:51:04 +0300;TST: linalg: test return types of generalized linalg routines

==

numpy/linalg/tests/test_linalg.py
==================
aa8fde0;Pauli Virtanen;2013-04-12 18:32:52 +0300;ENH: linalg: use signature= for internal casting rather than astype in linalg ufuncs

==

numpy/linalg/linalg.py
==================
1b3834d;Pauli Virtanen;2013-04-12 18:16:31 +0300;BUG: linalg: make umath_linalg to track errors from all inner loop iterations
This ensures that the FP invalid flag always reflects the return code
from LAPACK. Fixes a bug in 63a8aef81 where umath_linalg raises a
warning only if the error occurs in the last iteration of the ufunc
inner loop.

==

numpy/linalg/tests/test_linalg.py
numpy/linalg/umath_linalg.c.src
==================
5b9da00;Sebastian Berg;2013-04-12 17:31:57 +0200;DOC: Advanced indexing using np.newaxes
Mention in release notes and remove documentation which may
give the idea it cannot be used with advanced indexing.

==

doc/release/1.8.0-notes.rst
doc/source/reference/arrays.indexing.rst
==================
5daaef7;Charles Harris;2013-04-12 08:41:20 -0700;Merge pull request #3231 from charris/2to3-skip-setliteral-fixer
2to3: Skip `setliteral` fixer.
==
==================
6115bba;Sebastian Berg;2012-11-01 18:25:15 +0100;TST: Add fancy indexing test for tuple indexing
This is a first version of fancy indexing tests by mimicing the
behavoir in python. Note that error messages are not tested.

==

numpy/core/tests/test_indexing.py
==================
d5bf8ac;Charles Harris;2013-04-12 09:00:24 -0600;2to3: Skip `setliteral` fixer.
Setliterals are not available in Python 2.6. Because the current usage
in numpy is forward compatible with Python 3 there is no need to run the
fixer.

When Python 2.6 support is dropped the fixer can be run, but that looks
to be several years off. RHEL 6 with Python 2.6 was released in 2010 and
will run for ten years.

==

tools/py3tool.py
==================
22fae03;Sebastian Berg;2012-11-01 18:24:50 +0100;MNT: Tiny cleanup for mapping.c and comments

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/mapping.c
==================
4bc6557;Sebastian Berg;2012-10-30 19:14:04 +0100;BUG: Do not ignore subspace unless it is true 0-d
This is  more important when allowing newaxis, but already before
lead to successful indexing when it should not be suspected.
Also some maintenance.

==

numpy/core/src/multiarray/mapping.c
==================
a35a7af;Sebastian Berg;2012-10-30 18:57:54 +0100;BUG: Check for maximum dimension for fancy indexing.

==

numpy/core/src/multiarray/mapping.c
==================
18ee645;Sebastian Berg;2012-10-30 18:36:04 +0100;ENH: Allow newaxis in combination with fancy indexing.
This commit allows the use of None when also using fancy indexing.
To achieve this mit->consec is used to note the denote the
transposition axis (which means that if its consecutive but at the
start, mit->consec==0, and no transposition is necessary).

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/mapping.c
==================
29c8ae8;Sebastian Berg;2012-10-30 12:45:39 +0100;BUG: Fix indexing 0-sized arrays using empty fancy-indexes
Due to subspace creation for fancy indexing selecting the 0s
element on every fancy dimension, this failed if the dimension
was empty. Propagating check_index to disable the unnecessary
check in this case.

==

numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/iterators.h
numpy/core/src/multiarray/mapping.c
==================
6ffa2ea;njsmith;2013-04-12 07:12:27 -0700;Merge pull request #3225 from seberg/cleanup_subscript-merge
Cleanup subscript rebased
==
==================
1f84437;Sebastian Berg;2013-04-12 15:14:02 +0200;TST: Clarify empty fancy index test

==

numpy/core/tests/test_indexing.py
==================
9466880;Sebastian Berg;2013-04-12 14:35:39 +0200;MAINT: Error type fixup and clearer error message
The first error types were changed to ValueError (or introduced)
newly. Python seems to normally use IndexError or TypeError here,
so changing back to IndexError.

The second is just a clarification to say when the error actually
occurs for the user.

==

numpy/core/src/multiarray/mapping.c
numpy/core/tests/test_indexing.py
==================
f1b20f9;njsmith;2013-04-12 05:07:12 -0700;Merge pull request #3229 from jdkloe/master
Fix for issue 3192
==
==================
07ed3a2;Sebastian Berg;2013-04-12 13:29:56 +0200;STY: Use PyArray_BYTES to get char*

==

numpy/core/src/multiarray/mapping.c
==================
f31f0fb;Jos de Kloe;2013-04-12 12:18:26 +0200;replace exec by eval to ensure the c variable is defined for all relevant python versions

==

numpy/f2py/crackfortran.py
==================
5cdf841;Sebastian Berg;2013-04-10 22:22:46 +0200;DOC: Add NPY_RELAXED_STRIDES_DOCUMENTATION doc to ndarry.flags

==

numpy/add_newdocs.py
==================
5c8b89c;Sebastian Berg;2013-04-10 21:53:44 +0200;DOC: Document NPY_RELAXED_STRIDES_CHECKING changes
This includes documentation in the release notes, as well as the
reference guide and smaller corrections. Thanks to Nathaniel
for major rewriting this.

==

doc/release/1.8.0-notes.rst
doc/source/reference/arrays.ndarray.rst
doc/source/reference/c-api.array.rst
doc/source/reference/ufuncs.rst
==================
2e4ad6e;Charles Harris;2013-04-11 12:59:42 -0700;Merge pull request #3227 from charris/2to3-apply-funcattrs
2to3: Skip `funcattrs` fixer.
==
==================
b9232f3;njsmith;2013-04-11 12:31:22 -0700;Merge pull request #452 from seberg/enhdel
ENH: delete and insert generalization and speed improvements
==
==================
d083c29;Charles Harris;2013-04-11 13:15:30 -0600;2to3: Skip `funcattrs` fixer.
In Python 3 the func.func_name attribute is replaced by the
func.__name__ attribute. The only file affected by this is
doc/sphinxext/numpydoc/phantom_import.py, and there its use
is already version dependent.

Closes #3054.

==

tools/py3tool.py
==================
b7053e8;Charles Harris;2013-04-11 12:29:18 -0700;Merge pull request #3226 from charris/2to3-apply-buffer-fixer
2to3: Skip buffer fixer.
==
==================
0cbe590;Charles Harris;2013-04-11 12:43:34 -0600;2to3: Skip buffer fixer.
The buffer object is replaced by memoryview in Python >= 3. The memory
view object has also been backported to Python 2.7. However, the only
use of `buffer1/1memoryview1 is in `numpy/core/tests/test_unicode.py`
and there it is already version dependent: `memoryview` is used if the
Python version is >= 3 and `buffer` is used otherwise.

Closes #3043.

==

tools/py3tool.py
==================
1675ad9;Sebastian Berg;2013-04-02 01:06:21 +0200;FIX: rename xrange to range in python 2
np.delete abuses range to calculate start/stop/step and len. This
would create potentially large intermediates if it was a list, so
for numpy/lib/function_base.py and python < 3, use range = xrange.

==

numpy/lib/function_base.py
==================
0350d5e;Sebastian Berg;2013-04-01 23:06:38 +0200;DOC: Fixup of delete/insert changes in release notes

==

doc/release/1.8.0-notes.rst
==================
6d305e4;Sebastian Berg;2013-03-07 19:09:31 +0100;MAINT: np.delete keep old out of bound/negative index behavior

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
f17e55d;Sebastian Berg;2013-01-27 20:58:49 +0100;TST: New tests for insert/delete covering warnings and corner cases

==

numpy/lib/tests/test_function_base.py
==================
b383686;Sebastian Berg;2013-01-27 20:57:44 +0100;FIX: insert/delete fixes and warnings for non-integer indices

==

numpy/lib/function_base.py
==================
908e06c;Sebastian Berg;2012-10-11 18:07:03 +0200;ENH: larger fixes for np.delete and np.insert functions
There were several smaller to larger problems for these two functions,
that this addresses:
  * delete did not handle out of bound values graciously (ignoring negative
    ones)
  * both were unnecessarily slow due to use of sets
  * insert did not handle unsorted indices correctly

Further changes:
  * Add FutureWarning for boolean obj, so it can be handled similar to a
    boolean mask with indexing.
  * Add FutureWarning to remove inconsistent special cases for 0-d arrays
    (neither insertion nor deletion along an axis make sense for a scalar)
  * Allow insertion of an array with more then one element along axis when
    obj is a sequence with a single item. (i.e. array([1])).
  * Reintroduce speed optimization for scalar in insert that existed in 1.6.

==

doc/release/1.8.0-notes.rst
numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
8468a75;Sebastian Berg;2013-04-11 17:14:30 +0200;MAINT: Add lost code to array_subscript_fromobject

==

numpy/core/src/multiarray/mapping.c
==================
5cfd384;Sebastian Berg;2013-04-11 17:03:00 +0200;MAINT: Fixup merge mistakes

==

numpy/core/src/multiarray/mapping.c
==================
d128fcb;Han Genuit;2012-09-14 11:11:29 +0200;ENH: Add exception to _nonzero_indices for zero-dim arrays
This function causes a crash otherwise, because it loops over the number
of dimensions to construct sub-iterators. If the number of dimensions is
zero, the sub-iterators will not be initialized, causing problems later on.

==

numpy/core/src/multiarray/mapping.c
==================
e7db8c0;Han Genuit;2012-09-14 01:26:59 +0200;BUG: Repair tests
Oops..

==

numpy/core/tests/test_indexing.py
==================
7e28af9;Han Genuit;2012-09-14 01:01:49 +0200;BUG: Fix failing subscript test cases
This fixes indexing with NumPy boolean scalar values, which caused
crashes before. Both Python and NumPy boolean scalars now behave the
same. This contains a few small changes to PyArrayMapIterNew, where
the PyArrayMapIterObject is memset to zero and a fix for the crash,
which was caused by _nonzero_indices, which did not initialize any
iterators because ndim is zero for scalars. *IterNew will now check
for scalars before running that part of the code.

==

numpy/core/src/multiarray/mapping.c
numpy/core/tests/test_indexing.py
==================
698f57f;Han Genuit;2012-09-11 23:58:23 +0200;DOC: Re-insert comment

==

numpy/core/src/multiarray/mapping.c
==================
fc52c28;Han Genuit;2012-09-04 00:29:46 +0200;BUG: Fix old case for boolean subscripts with non-matching shape.
Conflicts:
	numpy/core/src/multiarray/mapping.c

==

numpy/core/src/multiarray/mapping.c
==================
e3f01df;Han Genuit;2012-09-04 00:15:58 +0200;STY: Text changes.
Conflicts:
	numpy/core/src/multiarray/mapping.c

==

numpy/core/src/multiarray/mapping.c
==================
62dc28a;Han Genuit;2012-09-03 23:43:14 +0200;BUG: Multiple fixes from merging.

==

numpy/core/src/multiarray/mapping.c
==================
8a836c5;Han Genuit;2011-10-28 17:50:50 +0200;TST: Add more indexing tests.

==

numpy/core/tests/test_indexing.py
==================
bc92502;Han Genuit;2011-10-28 15:31:44 +0200;ENH: Change IndexError to ValueError for integer conversion errors.
Conflicts:
	numpy/core/src/multiarray/mapping.c

==

numpy/core/src/multiarray/mapping.c
==================
9442b91;87;2011-10-25 01:14:57 +0200;ENH: Optimize array_subscript by removing redundant error check.

==

numpy/core/src/multiarray/mapping.c
==================
2fc6673;87;2011-10-25 00:59:58 +0200;BUG: Tuple conversion may not propagate errors from int conversion.
Conflicts:
	numpy/core/src/multiarray/mapping.c

==

numpy/core/src/multiarray/mapping.c
==================
e813dae;87;2011-10-25 00:23:58 +0200;ENH: Small optimization for redundant PyArray_Check
Conflicts:
	numpy/core/src/multiarray/mapping.c

==

numpy/core/src/multiarray/mapping.c
==================
fd5ae99;87;2011-10-24 09:15:13 +0200;BLD: Declare array_ass_item_object before use.

==

numpy/core/src/multiarray/mapping.c
==================
9ae9872;Han;2011-10-17 16:18:33 +0200;ENH: Cleanup subscript assignment code.
Conflicts:
	numpy/core/src/multiarray/mapping.c

==

numpy/core/src/multiarray/mapping.c
==================
38c070d;Han;2011-10-17 15:00:25 +0200;ENH: Rename array_ass_big_item to array_ass_item_object

==

numpy/core/src/multiarray/mapping.c
==================
4b8ef72;Han;2011-10-17 12:21:10 +0200;ENH: Optimization in subscript_simple for arrays with size > 1

==

numpy/core/src/multiarray/mapping.c
==================
eab77ae;87;2011-10-17 00:29:21 +0200;ENH: Change silent integer conversion failure into index error.

==

numpy/core/src/multiarray/mapping.c
==================
7935952;87;2011-10-17 00:24:29 +0200;ENH: Rename array_subscript to array_subscipt_fromobject and refactor array_subscript_nice to array_subscript
Conflicts:
	numpy/core/src/multiarray/mapping.c

==

numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/mapping.h
==================
818e3eb;87;2011-10-17 00:09:34 +0200;ENH: Move Python related subscript code into array_subscript

==

numpy/core/src/multiarray/mapping.c
==================
796c274;87;2011-10-17 00:04:46 +0200;ENH: Use array_subscript_asarray to ensure an array type return value

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/mapping.h
==================
4fae90d;87;2011-10-16 23:28:25 +0200;ENH: Move fancy indexing code and ellipse check code into own functions.
Conflicts:
	numpy/core/src/multiarray/mapping.c

==

numpy/core/src/multiarray/mapping.c
==================
bde1a06;87;2011-10-03 23:35:19 +0200;ENH: Cleanup and simplify array_item code.
Rename array_big_item to array_item_asarray and move special case
for array_item_nice into array_item_asscalar. Also remove redundant
PyArray_Return and rename array_item_nice to array_item.

Conflicts:
	numpy/core/src/multiarray/mapping.c

==

numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/mapping.h
numpy/core/src/multiarray/sequence.c
==================
79126f1;Charles Harris;2013-04-10 18:48:23 -0700;Merge pull request #3223 from charris/2to3-skip-future-fixer
2to3: Skip `future` fixer.
==
==================
16f9761;Charles Harris;2013-04-10 18:25:55 -0600;2to3: Skip `future` fixer.
The `future` fixer removes the `from __future__ import ...` statements.
That is fine for Python 3, but we need to keep that statement if we are
shooting for a common code base for both Python 2 and Python 3.

==

tools/py3tool.py
==================
25d55b8;Charles Harris;2013-04-10 17:06:28 -0700;Merge pull request #3216 from charris/2to3-apply-map-fixer
2to3: Apply `map` fixer.
==
==================
a616479;Charles Harris;2013-04-09 12:44:24 -0600;2to3: Apply `map` fixer.
In Python 3 `map` is an iterator while in Python 2 it returns a list.
The simple fix applied by the fixer is to inclose all instances of map
with `list(...)`. This is not needed in all cases, and even where
appropriate list comprehensions may be preferred for their clarity.
Consequently, this patch attempts to use list comprehensions where it
makes sense.

When the mapped function has two arguments there is another problem that
can arise. In Python 3 map stops execution when the shortest argument
list is exhausted, while in Python 2 it stops when the longest argument
list is exhausted. Consequently the two argument case might need special
care. However, we have been running Python3 converted versions of numpy
since 1.5 without problems, so it is probably not something that affects
us.

Closes #3068

==

doc/summarize.py
numpy/compat/_inspect.py
numpy/core/numerictypes.py
numpy/core/shape_base.py
numpy/core/tests/test_scalarmath.py
numpy/core/tests/test_shape_base.py
numpy/f2py/auxfuncs.py
numpy/f2py/cfuncs.py
numpy/f2py/common_rules.py
numpy/f2py/crackfortran.py
numpy/f2py/f2py2e.py
numpy/f2py/f90mod_rules.py
numpy/f2py/tests/test_array_from_pyobj.py
numpy/lib/_iotools.py
numpy/lib/financial.py
numpy/lib/index_tricks.py
numpy/lib/npyio.py
numpy/lib/recfunctions.py
numpy/lib/shape_base.py
numpy/lib/stride_tricks.py
numpy/matrixlib/defmatrix.py
numpy/oldnumeric/matrix.py
numpy/testing/utils.py
tools/py3tool.py
==================
20cc77a;Pauli Virtanen;2013-04-10 22:51:00 +0300;BUG: linalg: fix Py3 syntax

==

numpy/linalg/_gufuncs_linalg.py
numpy/linalg/tests/test_gufuncs_linalg.py
==================
1b27cb0;Pauli Virtanen;2013-04-10 22:00:55 +0300;MAINT: move gufuncs_linalg_contents.rst to the docstring of the module

==

numpy/linalg/_gufuncs_linalg.py
numpy/linalg/gufuncs_linalg_contents.rst
==================
9c00887;Pauli Virtanen;2013-04-10 19:35:13 +0300;MAINT: move umath_linalg under numpy/linalg and use the same lapack_lite
Also, link umath_linalg against the system BLAS/LAPACK if available.

==

numpy/core/bento.info
numpy/core/bscript
numpy/core/setup.py
numpy/core/src/umath/_gufuncs_linalg.py
numpy/core/src/umath/gufuncs_linalg_contents.rst
numpy/core/src/umath/lapack_lite/blas_lite.c
numpy/core/src/umath/lapack_lite/dlamch.c
numpy/core/src/umath/lapack_lite/dlapack_lite.c
numpy/core/src/umath/lapack_lite/f2c.h
numpy/core/src/umath/lapack_lite/f2c_lite.c
numpy/core/src/umath/lapack_lite/python_xerbla.c
numpy/core/src/umath/lapack_lite/zlapack_lite.c
numpy/core/src/umath/umath_linalg.c.src
numpy/core/tests/test_gufuncs_linalg.py
numpy/linalg/_gufuncs_linalg.py
numpy/linalg/bento.info
numpy/linalg/blas_lite.c
numpy/linalg/bscript
numpy/linalg/dlamch.c
numpy/linalg/dlapack_lite.c
numpy/linalg/f2c.h
numpy/linalg/f2c_lite.c
numpy/linalg/gufuncs_linalg_contents.rst
numpy/linalg/lapack_lite/blas_lite.c
numpy/linalg/lapack_lite/dlamch.c
numpy/linalg/lapack_lite/dlapack_lite.c
numpy/linalg/lapack_lite/f2c.h
numpy/linalg/lapack_lite/f2c_lite.c
numpy/linalg/lapack_lite/python_xerbla.c
numpy/linalg/lapack_lite/zlapack_lite.c
numpy/linalg/linalg.py
numpy/linalg/python_xerbla.c
numpy/linalg/setup.py
numpy/linalg/tests/test_gufuncs_linalg.py
numpy/linalg/umath_linalg.c.src
numpy/linalg/zlapack_lite.c
==================
9bfa19b;Pauli Virtanen;2013-04-09 23:58:01 +0300;TST: linalg: add tests for generalized linalg functions

==

numpy/linalg/tests/test_linalg.py
==================
63a8aef;Pauli Virtanen;2013-04-09 22:56:47 +0300;BUG: core/umath_linalg: ensure FP error status reflects LAPACK error status

==

numpy/core/src/umath/umath_linalg.c.src
==================
bbdca51;Pauli Virtanen;2013-04-09 22:02:54 +0300;ENH: linalg: use _umath_linalg for svd()

==

numpy/linalg/linalg.py
==================
cc7b048;Pauli Virtanen;2013-04-09 23:22:11 +0300;ENH: linalg: use _umath_linalg for eigh()

==

numpy/linalg/linalg.py
==================
1253d57;Pauli Virtanen;2013-04-09 22:02:45 +0300;ENH: linalg: use _umath_linalg for eig()

==

numpy/linalg/linalg.py
==================
74e1477;Pauli Virtanen;2013-04-09 22:02:35 +0300;ENH: linalg: use _umath_linalg for eigvalsh()

==

numpy/linalg/linalg.py
==================
15a9c3b;Pauli Virtanen;2013-04-09 22:02:30 +0300;ENH: linalg: use _umath_linalg for eigvals()

==

numpy/linalg/linalg.py
==================
2dd6405;Pauli Virtanen;2013-04-09 22:02:22 +0300;ENH: linalg: use _umath_linalg for cholesky()

==

numpy/linalg/linalg.py
==================
04ad33e;Pauli Virtanen;2013-04-09 22:02:01 +0300;ENH: linalg: use _umath_linalg for solve()

==

numpy/linalg/linalg.py
==================
7d2fed6;Pauli Virtanen;2013-04-09 00:52:55 +0300;ENH: linalg: use _umath_linalg for inv()

==

numpy/linalg/linalg.py
==================
87dc3f6;Pauli Virtanen;2013-04-09 00:30:04 +0300;ENH: linalg: use _umath_linalg for slogdet()

==

numpy/linalg/linalg.py
==================
5b0fead;Pauli Virtanen;2013-04-08 23:46:59 +0300;ENH: linalg: use _umath_linalg for det()

==

numpy/linalg/linalg.py
==================
2e8b24e;Pauli Virtanen;2013-04-09 22:01:40 +0300;ENH: linalg: add helper routines for gufuncs

==

numpy/linalg/linalg.py
==================
f0a78c7;Pauli Virtanen;2013-04-08 23:56:05 +0300;DOC: document the behavior of generalized N-dim linear algebra functions

==

doc/source/reference/routines.linalg.rst
==================
35f4b17;Pauli Virtanen;2013-04-08 23:19:05 +0300;MAINT: mark gufuncs_linalg.py as a internal testing-only module

==

numpy/core/setup.py
numpy/core/src/umath/_gufuncs_linalg.py
numpy/core/src/umath/gufuncs_linalg.py
numpy/core/tests/test_gufuncs_linalg.py
==================
e7a54da;ovillellas;2013-04-05 13:05:35 +0200;BLD: reverted api version back to 8

==

numpy/core/code_generators/cversions.txt
numpy/core/setup_common.py
==================
1f8efc0;ovillellas;2013-04-05 12:43:59 +0200;MAINT: added from __future__ as suggested by charris

==

numpy/core/src/umath/gufuncs_linalg.py
==================
0afe276;ovillellas;2013-04-05 12:19:03 +0200;DOC: changed <NDIMS> to … in shape descriptions in docstrings

==

numpy/core/src/umath/gufuncs_linalg.py
==================
5dc27ac;ovillellas;2013-03-22 17:46:51 +0100;FIX: matrix_multiply now works when given a column matrix

==

numpy/core/src/umath/umath_linalg.c.src
numpy/core/tests/test_gufuncs_linalg.py
==================
60f54b6;ovillellas;2013-03-22 11:06:39 +0100;ENH: added complex version for inner1d. Also added dotc1d

==

numpy/core/src/umath/gufuncs_linalg.py
numpy/core/src/umath/umath_linalg.c.src
==================
ad8b29b;ovillellas;2013-03-01 16:42:44 +0100;FIX: problems with eig and eigvals. Enhanced tests.

==

numpy/core/src/umath/umath_linalg.c.src
numpy/core/tests/test_gufuncs_linalg.py
==================
7e3176f;ovillellas;2013-02-20 19:00:59 +0100;BUG: fixed a bug in eig for complex numbers. Eigenvector results are computed properly now.

==

numpy/core/src/umath/umath_linalg.c.src
==================
8e8f247;ovillellas;2013-02-20 15:54:57 +0100;DOC: fixed doctest in poinv so that the example matrix is positive-definite.

==

numpy/core/src/umath/gufuncs_linalg.py
==================
05ceb12;ovillellas;2013-02-20 15:18:06 +0100;DOC: changed doctests for eig and eigh to be more robust

==

numpy/core/src/umath/gufuncs_linalg.py
==================
cd6c20b;ovillellas;2013-02-14 19:15:29 +0100;DOC: added more doctests

==

numpy/core/src/umath/gufuncs_linalg.py
==================
8556374;ovillellas;2013-02-12 13:13:54 +0100;DOC: Added doctests to docstring for fused operations

==

numpy/core/src/umath/gufuncs_linalg.py
==================
fd435bc;ovillellas;2013-02-11 16:19:19 +0100;BLD: Python3 build problem fixed

==

numpy/core/src/umath/umath_linalg.c.src
==================
2eeddab;ovillellas;2013-02-11 15:39:48 +0100;BLD: python 3.x compile fix

==

numpy/core/src/umath/umath_linalg.c.src
==================
f48c134;ovillellas;2013-02-08 19:27:08 +0100;ENH: Added np.seterr handling of errors

==

numpy/core/src/umath/gufuncs_linalg.py
numpy/core/src/umath/umath_linalg.c.src
==================
a2afc85;ovillellas;2013-02-08 17:41:34 +0100;DOC: corrected documentation - arrays of functions -> arrays of matrices

==

numpy/core/src/umath/gufuncs_linalg.py
==================
1ec2024;ovillellas;2013-02-08 17:40:30 +0100;STY: PEP8

==

numpy/core/src/umath/gufuncs_linalg.py
==================
bbd674d;ovillellas;2013-01-30 19:39:50 +0100;MAINT: Rewrote the gufuncs_linalg_contents as a rst file and updated it.

==

numpy/core/src/umath/gufuncs_linalg_contents.rst
==================
e1c7ed4;ovillellas;2013-01-30 18:44:43 +0100;MAINT: renamed the file describing the gufuncs_linalg module

==

numpy/core/src/umath/gufuncs_linalg_contents.rst
numpy/core/src/umath/umath_linalg_content.txt
==================
24b727b;ovillellas;2013-01-30 18:34:55 +0100;MAINT: renamed umath_linalg module to _umath_linalg as it is internal.

==

numpy/core/setup.py
numpy/core/src/umath/gufuncs_linalg.py
numpy/core/src/umath/umath_linalg.c.src
==================
6e352ad;ovillellas;2013-01-30 16:52:34 +0100;DOC: Added notes on error handling.

==

numpy/core/src/umath/gufuncs_linalg.py
==================
bca1bbe;ovillellas;2013-01-30 16:33:43 +0100;DOC: added docstring for poinv

==

numpy/core/src/umath/gufuncs_linalg.py
==================
1f79b69;ovillellas;2013-01-30 16:20:51 +0100;DOC: Added docstring to chosolve

==

numpy/core/src/umath/gufuncs_linalg.py
==================
87cd05f;ovillellas;2013-01-30 16:08:33 +0100;DOC: added docstring for svd

==

numpy/core/src/umath/gufuncs_linalg.py
==================
b75a0cb;ovillellas;2013-01-30 14:59:13 +0100;DOC: added docstring to solve

==

numpy/core/src/umath/gufuncs_linalg.py
==================
82976c0;ovillellas;2013-01-30 13:20:07 +0100;DOC: Added docstring to eigvalsh

==

numpy/core/src/umath/gufuncs_linalg.py
==================
43c25bb;ovillellas;2013-01-30 13:04:08 +0100;DOC: Added docstring for eigh

==

numpy/core/src/umath/gufuncs_linalg.py
==================
170726c;ovillellas;2013-01-30 12:08:55 +0100;ENH: chosolve sets result to nan on LAPACK error (_potrf, _potrs)

==

numpy/core/src/umath/umath_linalg.c.src
==================
ec5020c;ovillellas;2013-01-30 12:02:43 +0100;ENH: svd sets results to nan on LAPACK error (_gesdd)

==

numpy/core/src/umath/umath_linalg.c.src
==================
7aa26c3;ovillellas;2013-01-30 11:51:50 +0100;ENH: inv sets result to nan on LAPACK error (_gesv)

==

numpy/core/src/umath/umath_linalg.c.src
==================
fb2270d;ovillellas;2013-01-30 11:48:13 +0100;ENH: solve sets result to nan on LAPACK error (_gesv)

==

numpy/core/src/umath/umath_linalg.c.src
==================
f2b0bdd;ovillellas;2013-01-30 11:28:17 +0100;ENH: eigh, eigvalsh set result to nan on LAPACK error (_ssyevd, _heevd)

==

numpy/core/src/umath/umath_linalg.c.src
==================
2cc6fb4;ovillellas;2013-01-30 11:19:34 +0100;ENH: cholesky handling of _potrf failures (set result to nan)

==

numpy/core/src/umath/umath_linalg.c.src
==================
e41e426;ovillellas;2013-01-28 19:44:58 +0100;TST: fixed test for gufuncs_linalg Det

==

numpy/core/tests/test_gufuncs_linalg.py
==================
76a1963;ovillellas;2013-01-28 13:23:07 +0100;fixed testdet test. It failed due to eigvails failing in single precision and notifying the failure as nans.

==

numpy/core/tests/test_gufuncs_linalg.py
==================
866d230;ovillellas;2013-01-28 13:21:52 +0100;updated api version, as one merge changed it.

==

numpy/core/code_generators/cversions.txt
numpy/core/setup_common.py
==================
d4945ea;ovillellas;2013-01-24 17:59:08 +0100;STY: made sure that split strings had \ at the end

==

numpy/core/src/umath/umath_linalg.c.src
==================
367f333;ovillellas;2013-01-23 17:12:21 +0100;BLD: Windows build fixes + some tabs removed

==

numpy/core/src/umath/umath_linalg.c.src
==================
0132755;ovillellas;2013-01-14 16:30:07 +0100;updated documentation

==

numpy/core/src/umath/gufuncs_linalg.py
numpy/core/src/umath/umath_linalg.c.src
==================
3e77076;ovillellas;2012-11-20 17:59:50 +0100;reverted matrix_dot in umath_gufuncs to matrix_multiply. added some type-tests on test_gufuncs_linalg.py

==

numpy/core/src/umath/gufuncs_linalg.py
numpy/core/src/umath/umath_linalg.c.src
numpy/core/tests/test_gufuncs_linalg.py
==================
a75fb9e;ovillellas;2012-11-19 15:39:29 +0100;added tests for ufuncs in gufuncs_linalg (the ones based on pdl). Added multiply4 in the wrapper, as it was missing

==

numpy/core/src/umath/gufuncs_linalg.py
numpy/core/tests/test_gufuncs_linalg.py
==================
2276eaa;ovillellas;2012-11-16 18:36:14 +0100;work in progress: proper tests for eig.

==

numpy/core/src/umath/umath_linalg.c.src
numpy/core/tests/test_gufuncs_linalg.py
==================
c355550;ovillellas;2012-11-15 18:08:37 +0100;fixed the problem in eigvals (apparently)

==

numpy/core/src/umath/umath_linalg.c.src
numpy/core/src/umath/umath_linalg_content.txt
numpy/core/tests/test_gufuncs_linalg.py
==================
f6aaecb;ovillellas;2012-11-15 13:16:17 +0100;fixed bug in matrix_multiply when using cdoubles

==

numpy/core/src/umath/umath_linalg.c.src
numpy/core/src/umath/umath_linalg_content.txt
numpy/core/tests/test_gufuncs_linalg.py
==================
8817773;ovillellas;2013-01-21 16:58:22 +0100;updated the umath_linalg_content.txt adding a mention to the wrapper code.

==

numpy/core/src/umath/umath_linalg_content.txt
==================
a0c09b8;ovillellas;2012-11-13 17:25:16 +0100;modified umath_linalg_content.txt to reflect changes.

==

numpy/core/src/umath/umath_linalg_content.txt
==================
f74546d;ovillellas;2012-11-13 17:07:04 +0100;removed some wrappers that weren't needed with the harness fix, just changed to assignment

==

numpy/core/src/umath/gufuncs_linalg.py
==================
814add8;ovillellas;2012-11-13 16:41:08 +0100;work on tests and related fixes. Getting things in shape to commit to de-shaw patch

==

numpy/core/src/umath/gufuncs_linalg.py
numpy/core/src/umath/umath_linalg.c.src
numpy/core/tests/test_gufuncs_linalg.py
==================
ecfb93c;ovillellas;2012-11-09 15:19:15 +0100;first iteration with tests. Incomplete and some failing. Just a start. Some bugs already fixed.

==

numpy/core/src/umath/gufuncs_linalg.py
numpy/core/src/umath/umath_linalg.c.src
numpy/core/tests/test_gufuncs_linalg.py
==================
747cd46;ovillellas;2012-11-02 15:25:37 +0100;wrote a wrapper module for umath_linalg. Named gufuncs_linalg (in python).

==

numpy/core/setup.py
numpy/core/src/umath/gufuncs_linalg.py
numpy/core/src/umath/umath_linalg.c.src
==================
861e694;ovillellas;2012-10-31 13:32:56 +0100;updated umath_linalg_content.txt

==

numpy/core/src/umath/umath_linalg_content.txt
==================
2bb6c8e;ovillellas;2012-10-31 13:02:22 +0100;poinv and chosolve working. Rebuilt lapack_lite to support them. Used also a patched f2c to remove warnings.

==

numpy/core/src/umath/lapack_lite/blas_lite.c
numpy/core/src/umath/lapack_lite/dlapack_lite.c
numpy/core/src/umath/lapack_lite/zlapack_lite.c
numpy/core/src/umath/umath_linalg.c.src
==================
95eef39;ovillellas;2012-10-29 19:02:24 +0100;fixed a warning in f2c_lite.c for umath/lapack_lite added chosolve and poinv, they need testing.

==

numpy/core/src/umath/lapack_lite/f2c_lite.c
numpy/core/src/umath/umath_linalg.c.src
==================
05f9401;ovillellas;2012-10-24 15:54:07 +0200;fixed gufuncs so that they use the proper signature (mwiebe fix present)

==

numpy/core/src/umath/umath_linalg.c.src
==================
c47ee06;ovillellas;2012-10-23 19:38:42 +0200;added information about the contents of umath-linalg module

==

numpy/core/src/umath/umath_linalg_content.txt
==================
26d6bef;ovillellas;2012-10-23 18:40:52 +0200;added plenty of simple functions (quadratic_form plus all the "inspired from PDL" ufuncs). Only missing from "inspired from PDL" is matrix_multiply3.

==

numpy/core/src/umath/umath_linalg.c.src
==================
c85e833;ovillellas;2012-10-17 17:47:37 +0200;added some single precision functions to f2c_lite.c that were missing and needed by out library. It seems to work now on Linux.

==

numpy/core/setup.py
numpy/core/src/umath/lapack_lite/f2c_lite.c
==================
c679f7b;ovillellas;2012-10-17 16:02:32 +0200;lapack_lite for builds of umath_linalg without an optimized lapack in the system.

==

numpy/core/setup.py
numpy/core/src/umath/lapack_lite/blas_lite.c
numpy/core/src/umath/lapack_lite/dlamch.c
numpy/core/src/umath/lapack_lite/dlapack_lite.c
numpy/core/src/umath/lapack_lite/f2c.h
numpy/core/src/umath/lapack_lite/f2c_lite.c
numpy/core/src/umath/lapack_lite/python_xerbla.c
numpy/core/src/umath/lapack_lite/zlapack_lite.c
numpy/core/src/umath/umath_linalg.c.src
==================
7f3afca;ovillellas;2012-10-12 04:22:35 -0500;modified the code so it just used external definitions of blas/lapack functions (as is made in linalg module). Changed some code so that it uses BLAS instead of cblas (the fortran functions) also in line with what it is done on linalg. Modified the matrix multiply code, made it simpler and adapted to use blas (it was using cblas with CblasRowMajor, that is not available in the fortran function.

==

numpy/core/src/umath/umath_linalg.c.src
==================
4c9f286;ovillellas;2012-10-11 15:53:31 -0500;svd implemented. Single output working. Multiple options not functional due to a bug in the harness.

==

numpy/core/src/umath/umath_linalg.c.src
==================
234523c;ovillellas;2012-10-09 16:24:58 -0500;working eig and eigvals priority 2 functions.

==

numpy/core/src/umath/umath_linalg.c.src
==================
c1efc48;ovillellas;2012-10-06 17:18:45 -0500;fixed possible issues with BLAS _copy (0 is not a valid incx/incy value and the functions are not guaranteed to work with them). also got cholesky working.

==

numpy/core/src/umath/umath_linalg.c.src
==================
67820dd;ovillellas;2012-10-05 14:59:42 -0500;solve1 and inv working

==

numpy/core/src/umath/umath_linalg.c.src
==================
2a6d450;ovillellas;2012-10-05 13:56:15 -0500;solve gufunc working

==

numpy/core/src/umath/umath_linalg.c.src
==================
cf94941;ovillellas;2012-10-04 17:07:54 -0500;eigh and eigvalsh working

==

numpy/core/src/umath/umath_linalg.c.src
==================
1db3f9b;ovillellas;2012-10-02 18:21:46 -0500;det and slogdet working

==

numpy/core/src/umath/umath_linalg.c.src
==================
65bb3e7;ovillellas;2012-09-24 18:34:43 -0500;refactored some code, make it cleaner overall and ready to reuse some code from the matrix_multiply in other gufuncs

==

numpy/core/src/umath/umath_linalg.c.src
==================
07c0237;ovillellas;2012-09-21 17:11:12 -0500;inner1d and mat_mult implemented using blas.

==

numpy/core/setup.py
numpy/core/src/umath/umath_linalg.c.src
==================
3ce193b;ovillellas;2013-01-21 16:05:00 +0100;created a new module to hold linalg ufuncs.

==

numpy/core/bento.info
numpy/core/bscript
numpy/core/setup.py
numpy/core/src/umath/umath_linalg.c.src
==================
230db77;Charles Harris;2013-04-09 07:02:05 -0700;Merge pull request #3005 from jphalip/in1d-inverse
ENH: add `inverse` parameter to numpy.in1d().
==
==================
a3f2e04;Julien Phalip;2013-02-20 06:44:50 +0000;ENH: add `invert` parameter to numpy.in1d().

==

doc/release/1.8.0-notes.rst
numpy/lib/arraysetops.py
numpy/lib/tests/test_arraysetops.py
numpy/ma/extras.py
numpy/ma/tests/test_extras.py
==================
d1b195d;Charles Harris;2013-04-08 18:40:33 -0700;Merge pull request #3210 from ivanov/github-issues-linked
DOC: point to the github issues page
==
==================
2f7de03;Paul Ivanov;2013-04-08 17:31:08 -0700;DOC: incorporate @charris' suggestions
* Trac no longer used
* Openining "new issue" on GitHub

==

doc/source/about.rst
doc/source/bugs.rst
==================
7fe071c;Paul Ivanov;2013-04-08 16:35:15 -0700;DOC: point to the github issues page

==

doc/source/about.rst
doc/source/bugs.rst
==================
f85bdf4;njsmith;2013-04-08 12:04:07 -0700;Merge pull request #3208 from charris/2to3-apply-repr-fixer
2to3: Apply `repr` fixer.
==
==================
011f8a2;Charles Harris;2013-04-08 11:34:24 -0600;2to3: Apply `repr` fixer.
This replaces python backtics with repr(...). The backtics were mostly
used to generate strings for printing with a string format and it is
tempting to replace `'%s' % repr(x)` with `'%r' % x`. That would work
except where `x` happened to be a tuple or a dictionary but, because it
would be significant work to guarantee that and because there are not
many places where backtics are used, the safe path is to let the repr
replacements stand.

Closes #3083.

==

numpy/_import_tools.py
numpy/core/records.py
numpy/distutils/tests/test_misc_util.py
numpy/f2py/auxfuncs.py
numpy/f2py/capi_maps.py
numpy/f2py/cfuncs.py
numpy/f2py/crackfortran.py
numpy/f2py/f2py2e.py
numpy/f2py/rules.py
numpy/f2py/tests/test_array_from_pyobj.py
numpy/f2py/tests/test_assumed_shape.py
numpy/f2py/tests/test_callback.py
numpy/f2py/tests/test_return_character.py
numpy/f2py/tests/test_return_complex.py
numpy/f2py/tests/test_return_integer.py
numpy/f2py/tests/test_return_logical.py
numpy/f2py/tests/test_return_real.py
numpy/f2py/tests/test_size.py
numpy/f2py/use_rules.py
numpy/ma/mrecords.py
numpy/testing/utils.py
tools/py3tool.py
==================
01aa27a;njsmith;2013-04-08 03:23:59 -0700;Merge pull request #3206 from charris/forward-port-1.7.1-notes
ENH: Forward port `1.7.1` release notes.
==
==================
4a669b1;Charles Harris;2013-04-07 20:49:32 -0600;ENH: Forward port `1.7.1` release notes.

==

doc/release/1.7.1-notes.rst
==================
1340fa6;Charles Harris;2013-04-07 15:33:46 -0700;Merge pull request #3205 from charris/2to3-apply-dict-fixer
2to3: apply `dict` fixer.
==
==================
756d134;Charles Harris;2013-04-07 12:20:31 -0700;Merge pull request #3188 from asford/master
Fixing numpy.void pickling.
==
==================
6339930;Charles Harris;2013-04-07 09:52:12 -0600;MAINT: Fixup more dictionary fixer fixes.
Most of these are places where an iterator will work as well as a
list, but two fix places where `iterkeys` was introduced which is
a bug.

==

numpy/core/_internal.py
numpy/core/code_generators/genapi.py
numpy/core/numerictypes.py
numpy/distutils/fcompiler/__init__.py
numpy/distutils/misc_util.py
==================
ef76d49;njsmith;2013-04-07 03:39:34 -0700;Merge pull request #3202 from charris/2to3-reduce-fixups
MAINT: Cleanup some imports involving reduce.
==
==================
a0a2e3c;Alex Ford;2013-04-06 11:18:45 -0700;Resolving void scalar PyArray_Scalar constructor style issues.

==

numpy/core/src/multiarray/scalarapi.c
numpy/core/tests/test_regression.py
==================
aab46a7;Charles Harris;2013-04-06 19:09:17 -0600;2to3: apply `dict` fixer.
In Python3 `dict.items()`, `dict.keys()`, and `dict.values()` are
iterators. This causes problems when a list is needed so the 2to3 fixer
explicitly constructs a list when is finds on of those functions.
However, that is usually not necessary, so a lot of the work here has
been cleaning up those places where the fix is not needed. The big
exception to that is the `numpy/f2py/crackfortran.py` file. The code
there makes extensive use of loops that modify the contents of the
dictionary being looped through, which raises an error. That together
with the obscurity of the code in that file made it safest to let the
`dict` fixer do its worst.

Closes #3050.

==

doc/summarize.py
numpy/core/_internal.py
numpy/core/code_generators/genapi.py
numpy/core/memmap.py
numpy/core/numerictypes.py
numpy/core/tests/test_blasdot.py
numpy/core/tests/test_multiarray.py
numpy/distutils/ccompiler.py
numpy/distutils/command/build_py.py
numpy/distutils/conv_template.py
numpy/distutils/exec_command.py
numpy/distutils/fcompiler/__init__.py
numpy/distutils/from_template.py
numpy/distutils/misc_util.py
numpy/distutils/npy_pkg_config.py
numpy/distutils/system_info.py
numpy/f2py/auxfuncs.py
numpy/f2py/capi_maps.py
numpy/f2py/crackfortran.py
numpy/f2py/f2py2e.py
numpy/lib/_datasource.py
numpy/lib/arraypad.py
numpy/lib/format.py
numpy/lib/npyio.py
numpy/lib/recfunctions.py
numpy/lib/tests/test_io.py
numpy/lib/utils.py
numpy/linalg/lapack_lite/make_lite.py
numpy/ma/core.py
numpy/numarray/session.py
tools/c_coverage/c_coverage_report.py
tools/py3tool.py
==================
3c70e20;njsmith;2013-04-06 14:14:28 -0700;Merge pull request #3203 from charris/2to3-apply-print-fixer
2to3: Apply `print` fixer.
==
==================
bb726ca;Charles Harris;2013-04-06 13:25:26 -0600;2to3: Apply `print` fixer.
Add `print_function` to all `from __future__ import ...` statements
and use the python3 print function syntax everywhere.

Closes #3078.

==

doc/cdoc/numpyfilter.py
doc/cython/run_test.py
doc/cython/setup.py
doc/example.py
doc/newdtype_example/example.py
doc/newdtype_example/floatint/__init__.py
doc/newdtype_example/setup.py
doc/numpybook/comparison/ctypes/filter.py
doc/numpybook/comparison/ctypes/interface.py
doc/numpybook/comparison/pyrex/setup.py
doc/numpybook/comparison/timing.py
doc/numpybook/comparison/weave/filter.py
doc/numpybook/comparison/weave/inline.py
doc/numpybook/runcode.py
doc/postprocess.py
doc/pyrex/run_test.py
doc/pyrex/setup.py
doc/source/conf.py
doc/sphinxext/numpydoc/__init__.py
doc/sphinxext/numpydoc/comment_eater.py
doc/sphinxext/numpydoc/compiler_unparse.py
doc/sphinxext/numpydoc/docscrape.py
doc/sphinxext/numpydoc/docscrape_sphinx.py
doc/sphinxext/numpydoc/linkcode.py
doc/sphinxext/numpydoc/numpydoc.py
doc/sphinxext/numpydoc/phantom_import.py
doc/sphinxext/numpydoc/plot_directive.py
doc/sphinxext/numpydoc/tests/test_docscrape.py
doc/sphinxext/numpydoc/tests/test_linkcode.py
doc/sphinxext/numpydoc/tests/test_phantom_import.py
doc/sphinxext/numpydoc/tests/test_plot_directive.py
doc/sphinxext/numpydoc/tests/test_traitsdoc.py
doc/sphinxext/numpydoc/traitsdoc.py
doc/sphinxext/setup.py
doc/summarize.py
doc/swig/test/setup.py
doc/swig/test/testArray.py
doc/swig/test/testFarray.py
doc/swig/test/testFortran.py
doc/swig/test/testMatrix.py
doc/swig/test/testTensor.py
doc/swig/test/testVector.py
numpy/__init__.py
numpy/_import_tools.py
numpy/add_newdocs.py
numpy/build_utils/__init__.py
numpy/build_utils/common.py
numpy/build_utils/waf.py
numpy/compat/__init__.py
numpy/compat/_inspect.py
numpy/compat/py3k.py
numpy/compat/setup.py
numpy/core/__init__.py
numpy/core/_internal.py
numpy/core/_methods.py
numpy/core/arrayprint.py
numpy/core/code_generators/__init__.py
numpy/core/code_generators/cversions.py
numpy/core/code_generators/genapi.py
numpy/core/code_generators/generate_numpy_api.py
numpy/core/code_generators/generate_ufunc_api.py
numpy/core/code_generators/generate_umath.py
numpy/core/code_generators/numpy_api.py
numpy/core/code_generators/ufunc_docstrings.py
numpy/core/defchararray.py
numpy/core/fromnumeric.py
numpy/core/function_base.py
numpy/core/getlimits.py
numpy/core/info.py
numpy/core/machar.py
numpy/core/memmap.py
numpy/core/numeric.py
numpy/core/numerictypes.py
numpy/core/records.py
numpy/core/setup.py
numpy/core/setup_common.py
numpy/core/shape_base.py
numpy/core/src/multiarray/testcalcs.py
numpy/core/tests/test_api.py
numpy/core/tests/test_arrayprint.py
numpy/core/tests/test_blasdot.py
numpy/core/tests/test_datetime.py
numpy/core/tests/test_defchararray.py
numpy/core/tests/test_deprecations.py
numpy/core/tests/test_dtype.py
numpy/core/tests/test_einsum.py
numpy/core/tests/test_errstate.py
numpy/core/tests/test_function_base.py
numpy/core/tests/test_getlimits.py
numpy/core/tests/test_half.py
numpy/core/tests/test_indexerrors.py
numpy/core/tests/test_indexing.py
numpy/core/tests/test_item_selection.py
numpy/core/tests/test_machar.py
numpy/core/tests/test_memmap.py
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_multiarray_assignment.py
numpy/core/tests/test_nditer.py
numpy/core/tests/test_numeric.py
numpy/core/tests/test_numerictypes.py
numpy/core/tests/test_print.py
numpy/core/tests/test_records.py
numpy/core/tests/test_regression.py
numpy/core/tests/test_scalarmath.py
numpy/core/tests/test_scalarprint.py
numpy/core/tests/test_shape_base.py
numpy/core/tests/test_ufunc.py
numpy/core/tests/test_umath.py
numpy/core/tests/test_umath_complex.py
numpy/core/tests/test_unicode.py
numpy/ctypeslib.py
numpy/distutils/__init__.py
numpy/distutils/__version__.py
numpy/distutils/ccompiler.py
numpy/distutils/command/__init__.py
numpy/distutils/command/autodist.py
numpy/distutils/command/bdist_rpm.py
numpy/distutils/command/build.py
numpy/distutils/command/build_clib.py
numpy/distutils/command/build_ext.py
numpy/distutils/command/build_py.py
numpy/distutils/command/build_scripts.py
numpy/distutils/command/build_src.py
numpy/distutils/command/config.py
numpy/distutils/command/config_compiler.py
numpy/distutils/command/develop.py
numpy/distutils/command/egg_info.py
numpy/distutils/command/install.py
numpy/distutils/command/install_clib.py
numpy/distutils/command/install_data.py
numpy/distutils/command/install_headers.py
numpy/distutils/command/sdist.py
numpy/distutils/compat.py
numpy/distutils/conv_template.py
numpy/distutils/core.py
numpy/distutils/cpuinfo.py
numpy/distutils/environment.py
numpy/distutils/exec_command.py
numpy/distutils/extension.py
numpy/distutils/fcompiler/__init__.py
numpy/distutils/fcompiler/absoft.py
numpy/distutils/fcompiler/compaq.py
numpy/distutils/fcompiler/g95.py
numpy/distutils/fcompiler/gnu.py
numpy/distutils/fcompiler/hpux.py
numpy/distutils/fcompiler/ibm.py
numpy/distutils/fcompiler/intel.py
numpy/distutils/fcompiler/lahey.py
numpy/distutils/fcompiler/mips.py
numpy/distutils/fcompiler/nag.py
numpy/distutils/fcompiler/none.py
numpy/distutils/fcompiler/pathf95.py
numpy/distutils/fcompiler/pg.py
numpy/distutils/fcompiler/sun.py
numpy/distutils/fcompiler/vast.py
numpy/distutils/from_template.py
numpy/distutils/info.py
numpy/distutils/intelccompiler.py
numpy/distutils/lib2def.py
numpy/distutils/line_endings.py
numpy/distutils/log.py
numpy/distutils/mingw32ccompiler.py
numpy/distutils/misc_util.py
numpy/distutils/npy_pkg_config.py
numpy/distutils/numpy_distribution.py
numpy/distutils/pathccompiler.py
numpy/distutils/setup.py
numpy/distutils/system_info.py
numpy/distutils/tests/f2py_ext/__init__.py
numpy/distutils/tests/f2py_ext/setup.py
numpy/distutils/tests/f2py_ext/tests/test_fib2.py
numpy/distutils/tests/f2py_f90_ext/__init__.py
numpy/distutils/tests/f2py_f90_ext/setup.py
numpy/distutils/tests/f2py_f90_ext/tests/test_foo.py
numpy/distutils/tests/gen_ext/__init__.py
numpy/distutils/tests/gen_ext/setup.py
numpy/distutils/tests/gen_ext/tests/test_fib3.py
numpy/distutils/tests/pyrex_ext/__init__.py
numpy/distutils/tests/pyrex_ext/setup.py
numpy/distutils/tests/pyrex_ext/tests/test_primes.py
numpy/distutils/tests/setup.py
numpy/distutils/tests/swig_ext/__init__.py
numpy/distutils/tests/swig_ext/setup.py
numpy/distutils/tests/swig_ext/tests/test_example.py
numpy/distutils/tests/swig_ext/tests/test_example2.py
numpy/distutils/tests/test_exec_command.py
numpy/distutils/tests/test_fcompiler_gnu.py
numpy/distutils/tests/test_fcompiler_intel.py
numpy/distutils/tests/test_misc_util.py
numpy/distutils/tests/test_npy_pkg_config.py
numpy/distutils/unixccompiler.py
numpy/doc/__init__.py
numpy/doc/basics.py
numpy/doc/broadcasting.py
numpy/doc/byteswapping.py
numpy/doc/constants.py
numpy/doc/creation.py
numpy/doc/glossary.py
numpy/doc/howtofind.py
numpy/doc/indexing.py
numpy/doc/internals.py
numpy/doc/io.py
numpy/doc/jargon.py
numpy/doc/methods_vs_functions.py
numpy/doc/misc.py
numpy/doc/performance.py
numpy/doc/structured_arrays.py
numpy/doc/subclassing.py
numpy/doc/ufuncs.py
numpy/dual.py
numpy/f2py/__init__.py
numpy/f2py/__version__.py
numpy/f2py/auxfuncs.py
numpy/f2py/capi_maps.py
numpy/f2py/cb_rules.py
numpy/f2py/cfuncs.py
numpy/f2py/common_rules.py
numpy/f2py/crackfortran.py
numpy/f2py/diagnose.py
numpy/f2py/doc/collectinput.py
numpy/f2py/docs/pytest.py
numpy/f2py/docs/usersguide/setup_example.py
numpy/f2py/f2py2e.py
numpy/f2py/f2py_testing.py
numpy/f2py/f90mod_rules.py
numpy/f2py/func2subr.py
numpy/f2py/info.py
numpy/f2py/rules.py
numpy/f2py/setup.py
numpy/f2py/tests/test_array_from_pyobj.py
numpy/f2py/tests/test_assumed_shape.py
numpy/f2py/tests/test_callback.py
numpy/f2py/tests/test_kind.py
numpy/f2py/tests/test_mixed.py
numpy/f2py/tests/test_return_character.py
numpy/f2py/tests/test_return_complex.py
numpy/f2py/tests/test_return_integer.py
numpy/f2py/tests/test_return_logical.py
numpy/f2py/tests/test_return_real.py
numpy/f2py/tests/test_size.py
numpy/f2py/tests/util.py
numpy/f2py/use_rules.py
numpy/fft/__init__.py
numpy/fft/fftpack.py
numpy/fft/helper.py
numpy/fft/info.py
numpy/fft/setup.py
numpy/fft/tests/test_fftpack.py
numpy/fft/tests/test_helper.py
numpy/lib/__init__.py
numpy/lib/_datasource.py
numpy/lib/_iotools.py
numpy/lib/arraypad.py
numpy/lib/arraysetops.py
numpy/lib/arrayterator.py
numpy/lib/financial.py
numpy/lib/format.py
numpy/lib/function_base.py
numpy/lib/index_tricks.py
numpy/lib/info.py
numpy/lib/npyio.py
numpy/lib/polynomial.py
numpy/lib/recfunctions.py
numpy/lib/scimath.py
numpy/lib/setup.py
numpy/lib/shape_base.py
numpy/lib/stride_tricks.py
numpy/lib/tests/test__datasource.py
numpy/lib/tests/test__iotools.py
numpy/lib/tests/test_arraypad.py
numpy/lib/tests/test_arraysetops.py
numpy/lib/tests/test_arrayterator.py
numpy/lib/tests/test_financial.py
numpy/lib/tests/test_format.py
numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_index_tricks.py
numpy/lib/tests/test_io.py
numpy/lib/tests/test_polynomial.py
numpy/lib/tests/test_recfunctions.py
numpy/lib/tests/test_regression.py
numpy/lib/tests/test_shape_base.py
numpy/lib/tests/test_stride_tricks.py
numpy/lib/tests/test_twodim_base.py
numpy/lib/tests/test_type_check.py
numpy/lib/tests/test_ufunclike.py
numpy/lib/tests/test_utils.py
numpy/lib/twodim_base.py
numpy/lib/type_check.py
numpy/lib/ufunclike.py
numpy/lib/user_array.py
numpy/lib/utils.py
numpy/linalg/__init__.py
numpy/linalg/info.py
numpy/linalg/lapack_lite/clapack_scrub.py
numpy/linalg/lapack_lite/fortran.py
numpy/linalg/lapack_lite/make_lite.py
numpy/linalg/linalg.py
numpy/linalg/setup.py
numpy/linalg/tests/test_build.py
numpy/linalg/tests/test_linalg.py
numpy/linalg/tests/test_regression.py
numpy/ma/__init__.py
numpy/ma/bench.py
numpy/ma/core.py
numpy/ma/extras.py
numpy/ma/mrecords.py
numpy/ma/setup.py
numpy/ma/tests/test_core.py
numpy/ma/tests/test_extras.py
numpy/ma/tests/test_mrecords.py
numpy/ma/tests/test_old_ma.py
numpy/ma/tests/test_regression.py
numpy/ma/tests/test_subclassing.py
numpy/ma/testutils.py
numpy/ma/timer_comparison.py
numpy/ma/version.py
numpy/matlib.py
numpy/matrixlib/__init__.py
numpy/matrixlib/defmatrix.py
numpy/matrixlib/setup.py
numpy/matrixlib/tests/test_defmatrix.py
numpy/matrixlib/tests/test_multiarray.py
numpy/matrixlib/tests/test_numeric.py
numpy/matrixlib/tests/test_regression.py
numpy/numarray/__init__.py
numpy/numarray/alter_code1.py
numpy/numarray/alter_code2.py
numpy/numarray/compat.py
numpy/numarray/convolve.py
numpy/numarray/fft.py
numpy/numarray/functions.py
numpy/numarray/image.py
numpy/numarray/linear_algebra.py
numpy/numarray/ma.py
numpy/numarray/matrix.py
numpy/numarray/mlab.py
numpy/numarray/nd_image.py
numpy/numarray/numerictypes.py
numpy/numarray/random_array.py
numpy/numarray/session.py
numpy/numarray/setup.py
numpy/numarray/ufuncs.py
numpy/numarray/util.py
numpy/oldnumeric/__init__.py
numpy/oldnumeric/alter_code1.py
numpy/oldnumeric/alter_code2.py
numpy/oldnumeric/array_printer.py
numpy/oldnumeric/arrayfns.py
numpy/oldnumeric/compat.py
numpy/oldnumeric/fft.py
numpy/oldnumeric/fix_default_axis.py
numpy/oldnumeric/functions.py
numpy/oldnumeric/linear_algebra.py
numpy/oldnumeric/ma.py
numpy/oldnumeric/matrix.py
numpy/oldnumeric/misc.py
numpy/oldnumeric/mlab.py
numpy/oldnumeric/precision.py
numpy/oldnumeric/random_array.py
numpy/oldnumeric/rng.py
numpy/oldnumeric/rng_stats.py
numpy/oldnumeric/setup.py
numpy/oldnumeric/tests/test_oldnumeric.py
numpy/oldnumeric/tests/test_regression.py
numpy/oldnumeric/typeconv.py
numpy/oldnumeric/ufuncs.py
numpy/oldnumeric/user_array.py
numpy/polynomial/__init__.py
numpy/polynomial/chebyshev.py
numpy/polynomial/hermite.py
numpy/polynomial/hermite_e.py
numpy/polynomial/laguerre.py
numpy/polynomial/legendre.py
numpy/polynomial/polynomial.py
numpy/polynomial/polytemplate.py
numpy/polynomial/polyutils.py
numpy/polynomial/setup.py
numpy/polynomial/tests/test_chebyshev.py
numpy/polynomial/tests/test_classes.py
numpy/polynomial/tests/test_hermite.py
numpy/polynomial/tests/test_hermite_e.py
numpy/polynomial/tests/test_laguerre.py
numpy/polynomial/tests/test_legendre.py
numpy/polynomial/tests/test_polynomial.py
numpy/polynomial/tests/test_polyutils.py
numpy/polynomial/tests/test_printing.py
numpy/random/__init__.py
numpy/random/info.py
numpy/random/mtrand/generate_mtrand_c.py
numpy/random/setup.py
numpy/random/tests/test_random.py
numpy/random/tests/test_regression.py
numpy/setup.py
numpy/testing/__init__.py
numpy/testing/decorators.py
numpy/testing/noseclasses.py
numpy/testing/nosetester.py
numpy/testing/nulltester.py
numpy/testing/numpytest.py
numpy/testing/print_coercion_tables.py
numpy/testing/setup.py
numpy/testing/tests/test_decorators.py
numpy/testing/tests/test_doctesting.py
numpy/testing/tests/test_utils.py
numpy/testing/utils.py
numpy/tests/test_ctypeslib.py
numpy/tests/test_matlib.py
pavement.py
setup.py
setupegg.py
tools/allocation_tracking/setup.py
tools/allocation_tracking/track_allocations.py
tools/c_coverage/c_coverage_report.py
tools/commitstats.py
tools/osxbuild/build.py
tools/osxbuild/install_and_test.py
tools/py3tool.py
tools/test-installed-numpy.py
tools/win32build/build.py
tools/win32build/doall.py
tools/win32build/misc/x86analysis.py
tools/win32build/prepare_bootstrap.py
==================
77e09f1;Charles Harris;2013-04-06 10:02:23 -0600;MAINT: Cleanup some imports involving reduce.
Because reduce has been available in functools since Python 2.6 we
can get rid of the version checks we currently have before we import
it.

Also removes some reduce related skips in tools/py3tool.py. We were
already skipping the reduce fixer so this has no effect other than
cleaning up the code.

==

numpy/core/arrayprint.py
numpy/distutils/system_info.py
numpy/f2py/auxfuncs.py
numpy/lib/arrayterator.py
numpy/lib/tests/test_arrayterator.py
numpy/ma/core.py
numpy/ma/tests/test_core.py
numpy/ma/tests/test_old_ma.py
numpy/ma/timer_comparison.py
numpy/oldnumeric/ma.py
tools/py3tool.py
==================
7441fa5;njsmith;2013-04-06 08:18:02 -0700;Merge pull request #3201 from charris/2to3-apply-imports2-fixer
2to3: Apply `imports2` fixer.
==
==================
37d6468;Charles Harris;2013-04-06 09:05:45 -0600;MAINT: Append comma to last item tools/py3tool.py skipped fixers.
Makes it easier to put in the next fixer.

==

tools/py3tool.py
==================
8d48c8f;Charles Harris;2013-04-06 08:54:25 -0600;2to3: Apply `imports2` fixer.
No files were changed by this fixer, so add it to the list of
fixers to be skipped by 2to3.

Closes #3181.

==

tools/py3tool.py
==================
49a8902;Charles Harris;2013-04-06 07:42:08 -0700;Merge pull request #3191 from charris/2to3-apply-imports-fixer
2to3: Apply `imports` fixer.
==
==================
3c8fc14;Charles Harris;2013-04-06 07:40:28 -0700;Merge pull request #3200 from njsmith/travis-full-tests
[BLD] Run 'full' test suite on Travis, including 'slow' tests
==
==================
190f7df;Charles Harris;2013-04-06 08:09:22 -0600;MAINT: Replace xrange by range.
A new use of xrange wriggled it's way in, this replaces it with range
for python3 compatibility.

==

numpy/core/tests/test_nditer.py
==================
129ae08;Nathaniel J. Smith;2013-04-06 14:46:20 +0100;[BLD] Run 'full' test suite on Travis, including 'slow' tests
There's no reason *not* to run the full test suite on Travis, so long
as we fit in under the time limit. And no way to find out if we fit
under the time limit except to try ;-).

==

.travis.yml
==================
6d26656;njsmith;2013-04-05 15:00:00 -0700;Merge pull request #3197 from charris/fix-release-notes-formatting
MAINT: Fix release notes formatting.
==
==================
6869053;Charles Harris;2013-04-04 19:18:01 -0600;MAINT: Fix release notes formatting.
Sphinx was complaining about the title/heading hierarchy. This
fixes those complaints.

==

doc/release/1.3.0-notes.rst
doc/release/1.4.0-notes.rst
doc/release/1.5.0-notes.rst
doc/release/1.6.0-notes.rst
doc/release/1.6.1-notes.rst
doc/release/1.6.2-notes.rst
doc/release/1.7.0-notes.rst
doc/release/1.8.0-notes.rst
==================
d310678;Charles Harris;2013-04-04 11:26:58 -0700;Merge pull request #2965 from charris/fix-qr-mode
Fix qr mode
==
==================
ca77e31;Charles Harris;2013-04-03 16:02:33 -0700;Merge pull request #460 from endolith/regex_formatting
DOC: Formatting fixes using regex
==
==================
961a28f;njsmith;2013-04-03 12:05:33 -0700;Merge pull request #3162 from seberg/unsafe-strides
Revert changes to contiguous flags definition while creating NPY_TEST_UNSAFE_STRIDES
==
==================
4394515;Charles Harris;2013-04-02 13:47:32 -0600;BUG: Fix stray '.' in import statement.
There was a stray period at the end of an import statement in
`doc/cdoc/numpyfilter.py`. Looks like a cut and paste error that
was fixed elsewhere but escaped there because the module isn't
tested. A search shows that this was the only spot in which the
error was still present.

==

doc/cdoc/numpyfilter.py
==================
507b09e;Sebastian Berg;2013-04-02 20:01:57 +0200;TST: Add NPY_RELAXED_STRIDES_CHECKING to Travis

==

.travis.yml
tools/test-installed-numpy.py
==================
09a52ed;Charles Harris;2013-03-28 17:13:53 -0600;2to3: Apply `imports` fixer.
The `imports` fixer deals with the standard packages that have been
renamed, removed, or methods that have moved.

cPickle      -- removed, use pickle
commands     -- removed, getoutput, getstatusoutput moved to subprocess
urlparse     -- removed, urlparse moved to urllib.parse
cStringIO    -- removed, use StringIO or io.StringIO
copy_reg     -- renamed copyreg
_winreg      -- renamed winreg
ConfigParser -- renamed configparser
__builtin__  -- renamed builtins

In the case of `cPickle`, it is imported as `pickle` when python < 3 and
performance may be a consideration, but otherwise plain old `pickle` is
used.

Dealing with `StringIO` is a bit tricky. There is an `io.StringIO`
function in the `io` module, available since Python 2.6, but it expects
unicode whereas `StringIO.StringIO` expects ascii. The Python 3
equivalent is then `io.BytesIO`. What I have done here is used BytesIO
for anything that is emulating a file for testing purposes. That is more
explicit than using a redefined StringIO as was done before we dropped
support for Python 2.4 and 2.5.

Closes #3180.

==

doc/cdoc/numpyfilter.py
doc/numpybook/runcode.py
doc/sphinxext/numpydoc/comment_eater.py
doc/sphinxext/numpydoc/compiler_unparse.py
doc/sphinxext/numpydoc/docscrape.py
doc/sphinxext/numpydoc/plot_directive.py
numpy/__init__.py
numpy/core/__init__.py
numpy/core/numeric.py
numpy/core/numerictypes.py
numpy/core/records.py
numpy/core/setup.py
numpy/core/tests/test_print.py
numpy/core/tests/test_regression.py
numpy/distutils/cpuinfo.py
numpy/distutils/mingw32ccompiler.py
numpy/distutils/misc_util.py
numpy/distutils/npy_pkg_config.py
numpy/distutils/system_info.py
numpy/distutils/tests/test_exec_command.py
numpy/f2py/__init__.py
numpy/f2py/doc/collectinput.py
numpy/lib/_datasource.py
numpy/lib/_iotools.py
numpy/lib/format.py
numpy/lib/npyio.py
numpy/lib/tests/test__datasource.py
numpy/lib/tests/test__iotools.py
numpy/lib/tests/test_format.py
numpy/lib/tests/test_io.py
numpy/lib/tests/test_regression.py
numpy/lib/tests/test_utils.py
numpy/lib/utils.py
numpy/linalg/lapack_lite/clapack_scrub.py
numpy/ma/core.py
numpy/ma/tests/test_core.py
numpy/ma/tests/test_mrecords.py
numpy/numarray/functions.py
numpy/oldnumeric/compat.py
numpy/oldnumeric/misc.py
numpy/testing/utils.py
setup.py
tools/py3tool.py
tools/win32build/build.py
==================
a939f2a;njsmith;2013-04-02 08:53:45 -0700;Merge pull request #3178 from charris/2to3-apply-import-fixer
2to3 apply import fixer
==
==================
5b74363;njsmith;2013-04-02 07:14:49 -0700;Merge pull request #3185 from charris/fix-pull-475
BUG: Raise immediate error in ctypes.load_library when library is bad.
==
==================
7dad2d3;Alex Ford;2013-04-01 22:52:20 -0700;Fixing void scalar PyArray_Scalar constructor when *base==null.
During call to `PyArray_scalar` a `PyVoidScalarObject` is created, and
it's `obval` field set to a newly allocated block of memory of the
correct item size. With a null `base` member, the subsequent call to
`copyswap` can not determine an item size and returns without copying.
Adding direct copy of input data if no `base` is provided, as no swap is
required.

Adding regression test for constructor and original pickle repro case.

Resolves numpy/numpy#1550.

==

numpy/core/src/multiarray/scalarapi.c
numpy/core/tests/test_regression.py
==================
7394fa6;Charles Harris;2013-04-01 19:46:55 -0600;DOC: Document the new qr modes in the 1.8 release notes.

==

doc/release/1.8.0-notes.rst
==================
d0b6a7a;Charles Harris;2013-04-01 19:13:45 -0600;TST: Add more tests for qr factorization.
The new tests cover the new modes 'complete' and 'raw'. The testing of
the 'reduced', aka 'full' mode is improved and tests are added for the
deprecation of the 'full' and 'economic' modes. A new file
`numpy/linalg/tests/test_deprecations.py` was added for the deprecation
tests.

==

numpy/linalg/tests/test_deprecations.py
numpy/linalg/tests/test_linalg.py
==================
e9dfb3b;Charles Harris;2013-04-01 19:04:22 -0600;ENH: Add `raw`, `reduced`, `complete` modes to qr factorization.
If K = min(M, N) where the matrix to be factored has dimensions MxN,
then

'reduced'  : returns q, r with dimensions (M, K), (K, N) (default)
'complete' : returns q, r with dimensions (M, M), (M, N)
'r'        : returns r only with dimensions (K, N)
'raw'      : returns h, tau with dimensions (N, M), (K,)
'full'     : alias of 'reduced', deprecated
'economic' : returns h from 'raw', deprecated.

The options 'reduced', 'complete, and 'raw' are new. The default is
'reduced' and to maintain backward compatibility with earlier versions
of numpy both it and the old default 'full' can be omitted. Note that
array `h` returned in 'raw' mode is transposed for calling Fortran. Both
the 'full' and 'economic' modes are deprecated. For backwards
compatibility the modes 'full', 'economic' may be passed using only the
first letter but all others must be spelled out.

==

numpy/linalg/linalg.py
==================
134bcb0;Charles Harris;2013-04-01 17:32:38 -0700;Merge pull request #349 from ericfode/float16pow
First attempt at BF for 2165 and added better tests for scalarmath pow function
==
==================
8b42156;Eric Fode;2013-04-01 17:19:07 -0700;Update scalarmathmodule.c.src
Got rid of some white space in scalarmathmodule.c.src
==

numpy/core/src/scalarmathmodule.c.src
==================
5819d28;Charles Harris;2013-04-01 17:23:53 -0600;BUG: Raise immediate error in ctypes.load_library when library is bad.
This is a fixup of PR #475 due to JeromeRoy. The problem addressed is
that when multiple errors were encountered attempting to import a
library file, only the last one was preserved. The proposed fix is to
raise an error immediately when a file of the correct name fails to
import, and raise a later error if no file is found but no errors are
raised in the search.

Closes #474, #475.

==

numpy/ctypeslib.py
==================
a6385b3;Charles Harris;2013-04-01 15:25:27 -0700;Merge pull request #273 from dlax/fix/roll
somes fixes for the roll function
==
==================
5ad97ea;Martin Teichmann;2013-02-01 14:36:18 +0100;Allow threads for FFT calculations
This patch adds lines to release the Global Interpreter Lock
while calculating an FFT with fftpack.

==

numpy/fft/fftpack_litemodule.c
==================
0563ebf;Charles Harris;2013-04-01 12:54:54 -0700;Merge pull request #3153 from seberg/issue-3142
BUG: Do not reuse nditer buffers when not filled enough.
==
==================
d3edb4e;Charles Harris;2013-04-01 12:53:36 -0700;Merge pull request #3104 from seberg/nditer-allow-0d
Make AdvancedNew iter more 0-d aware
==
==================
7af1c67;Sebastian Berg;2013-03-25 16:21:18 +0100;API: Implement new flags API with NPY_RELAXED_STRIDES_CHECKING
This largly reverts the changes to the flags setting api making the
newer preferable unsafe flags setting available through the
NPY_RELAXED_STRIDES_CHECKING eviroment variable. This variable is meant
for testing if code will stop working when the flags definition is changed.

The old definition is modified in some details to previously to enforce
safer strides (which was not the case before). This means that ndim==1
size==1 arrays are not necessarily considered contiguous. Also empty
arrays are not considered contiguous in some cases that were contiguous
before, and the rule that an array can only be both C and F-contiguous
if it is one (or zero) dimensional is relaxed, as it is incorrect for
size <= 1 arrays.

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/flagsobject.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/shape.c
numpy/core/tests/test_api.py
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_regression.py
==================
3a4ed02;Sebastian Berg;2013-03-21 16:34:44 +0100;ENH: Relax aligned flag for shape[i] <= 1
In this case, either the dimensions stride will never be used to
access an element, so that it does not matter to the data alignment,
or the array has a size of 0 and is thus never unaligned.

Relaxed align flag is only active if NPY_RELAXED_STRIDES_CHECKING
was set during compile time.

==

numpy/core/src/multiarray/common.c
==================
79d22dc;Sebastian Berg;2013-03-21 14:23:21 +0100;BLD: Add NPY_RELAXED_STRIDES_CHECKING flag
This flag will toggle to a new definition for the contiguous flags
where only the memory layout is forced to be correct. As a particular
example this means that np.ones((3,1)) can be both C and F-Contiguous
and its stride[-1] can be arbitrary but the array still contiguous.

The flag will also make most new arrays be created with MAX_INTP as
stride so that unsafe usage of the stride will surface more commonly.

==

numpy/core/bscript
numpy/core/setup.py
==================
fd6f038;njsmith;2013-03-29 02:14:01 -0700;Merge pull request #3179 from charris/fix-resource-warning
MAINT: Fix python3 ResourceWarning when running test_exec_command.py
==
==================
15b7f9b;Charles Harris;2013-03-28 10:48:45 -0600;MAINT: Fix python3 ResourceWarning when running test_exec_command.py
The tests in test_exec_command.py used with blocks with a context
manager that could redirect stderr and stdout to temporary files but
those files were not closed on exit from the block.

==

numpy/distutils/tests/test_exec_command.py
==================
670b126;Charles Harris;2013-03-28 10:03:43 -0600;2to3: Add `from __future__ import ...` to some files that were missed.
With the exception of numpy/distutils/tests/test_exec_command.py, all
of these files are script files in tools/osxbuild and tools/win32build.
The import in the  script files omits `absolute_import` as they are
not part of a package.

==

numpy/distutils/tests/test_exec_command.py
tools/osxbuild/build.py
tools/osxbuild/install_and_test.py
tools/win32build/build.py
tools/win32build/doall.py
tools/win32build/misc/x86analysis.py
tools/win32build/prepare_bootstrap.py
==================
25ec685;Charles Harris;2013-03-28 09:33:28 -0600;2to3: Add `from __future__ import ...` to new files.
The new files that came in when doc/sphinxext/numpydoc was restructured
as a package with test stubs did not have `from __future__ import ...`.
This fixes that omission.

==

doc/sphinxext/numpydoc/__init__.py
doc/sphinxext/numpydoc/tests/test_linkcode.py
doc/sphinxext/numpydoc/tests/test_phantom_import.py
doc/sphinxext/numpydoc/tests/test_plot_directive.py
doc/sphinxext/numpydoc/tests/test_traitsdoc.py
==================
d4b88c1;Charles Harris;2013-03-27 21:49:08 -0600;2to3: Use absolute imports.
The new import `absolute_import` is added the `from __future__ import`
statement and The 2to3 `import` fixer is run to make the imports
compatible. There are several things that need to be dealt with to make
this work.

1) Files meant to be run as scripts run in a different environment than
files imported as part of a package, and so changes to those files need
to be skipped. The affected script files are:

    * all setup.py files
    * numpy/core/code_generators/generate_umath.py
    * numpy/core/code_generators/generate_numpy_api.py
    * numpy/core/code_generators/generate_ufunc_api.py

2) Some imported modules are not available as they are created during
the build process and consequently 2to3 is unable to handle them
correctly. Files that import those modules need a bit of extra work.
The affected files are:

    * core/__init__.py,
    * core/numeric.py,
    * core/_internal.py,
    * core/arrayprint.py,
    * core/fromnumeric.py,
    * numpy/__init__.py,
    * lib/npyio.py,
    * lib/function_base.py,
    * fft/fftpack.py,
    * random/__init__.py

Closes #3172

==

doc/cdoc/numpyfilter.py
doc/cython/run_test.py
doc/example.py
doc/newdtype_example/example.py
doc/newdtype_example/floatint/__init__.py
doc/numpybook/comparison/ctypes/filter.py
doc/numpybook/comparison/ctypes/interface.py
doc/numpybook/comparison/timing.py
doc/numpybook/comparison/weave/filter.py
doc/numpybook/comparison/weave/inline.py
doc/numpybook/runcode.py
doc/postprocess.py
doc/pyrex/run_test.py
doc/source/conf.py
doc/sphinxext/numpydoc/comment_eater.py
doc/sphinxext/numpydoc/compiler_unparse.py
doc/sphinxext/numpydoc/docscrape.py
doc/sphinxext/numpydoc/docscrape_sphinx.py
doc/sphinxext/numpydoc/linkcode.py
doc/sphinxext/numpydoc/numpydoc.py
doc/sphinxext/numpydoc/phantom_import.py
doc/sphinxext/numpydoc/plot_directive.py
doc/sphinxext/numpydoc/tests/test_docscrape.py
doc/sphinxext/numpydoc/traitsdoc.py
doc/summarize.py
doc/swig/test/testArray.py
doc/swig/test/testFarray.py
doc/swig/test/testFortran.py
doc/swig/test/testMatrix.py
doc/swig/test/testTensor.py
doc/swig/test/testVector.py
numpy/__init__.py
numpy/_import_tools.py
numpy/add_newdocs.py
numpy/build_utils/__init__.py
numpy/build_utils/common.py
numpy/build_utils/waf.py
numpy/compat/__init__.py
numpy/compat/_inspect.py
numpy/compat/py3k.py
numpy/core/__init__.py
numpy/core/_internal.py
numpy/core/_methods.py
numpy/core/arrayprint.py
numpy/core/code_generators/__init__.py
numpy/core/code_generators/cversions.py
numpy/core/code_generators/genapi.py
numpy/core/code_generators/numpy_api.py
numpy/core/code_generators/ufunc_docstrings.py
numpy/core/defchararray.py
numpy/core/fromnumeric.py
numpy/core/function_base.py
numpy/core/getlimits.py
numpy/core/info.py
numpy/core/machar.py
numpy/core/memmap.py
numpy/core/numeric.py
numpy/core/numerictypes.py
numpy/core/records.py
numpy/core/setup_common.py
numpy/core/shape_base.py
numpy/core/src/multiarray/testcalcs.py
numpy/core/tests/test_api.py
numpy/core/tests/test_arrayprint.py
numpy/core/tests/test_blasdot.py
numpy/core/tests/test_datetime.py
numpy/core/tests/test_defchararray.py
numpy/core/tests/test_deprecations.py
numpy/core/tests/test_dtype.py
numpy/core/tests/test_einsum.py
numpy/core/tests/test_errstate.py
numpy/core/tests/test_function_base.py
numpy/core/tests/test_getlimits.py
numpy/core/tests/test_half.py
numpy/core/tests/test_indexerrors.py
numpy/core/tests/test_indexing.py
numpy/core/tests/test_item_selection.py
numpy/core/tests/test_machar.py
numpy/core/tests/test_memmap.py
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_multiarray_assignment.py
numpy/core/tests/test_nditer.py
numpy/core/tests/test_numeric.py
numpy/core/tests/test_numerictypes.py
numpy/core/tests/test_print.py
numpy/core/tests/test_records.py
numpy/core/tests/test_regression.py
numpy/core/tests/test_scalarmath.py
numpy/core/tests/test_scalarprint.py
numpy/core/tests/test_shape_base.py
numpy/core/tests/test_ufunc.py
numpy/core/tests/test_umath.py
numpy/core/tests/test_umath_complex.py
numpy/core/tests/test_unicode.py
numpy/ctypeslib.py
numpy/distutils/__init__.py
numpy/distutils/__version__.py
numpy/distutils/ccompiler.py
numpy/distutils/command/__init__.py
numpy/distutils/command/autodist.py
numpy/distutils/command/bdist_rpm.py
numpy/distutils/command/build.py
numpy/distutils/command/build_clib.py
numpy/distutils/command/build_ext.py
numpy/distutils/command/build_py.py
numpy/distutils/command/build_scripts.py
numpy/distutils/command/build_src.py
numpy/distutils/command/config.py
numpy/distutils/command/config_compiler.py
numpy/distutils/command/develop.py
numpy/distutils/command/egg_info.py
numpy/distutils/command/install.py
numpy/distutils/command/install_clib.py
numpy/distutils/command/install_data.py
numpy/distutils/command/install_headers.py
numpy/distutils/command/sdist.py
numpy/distutils/compat.py
numpy/distutils/conv_template.py
numpy/distutils/core.py
numpy/distutils/cpuinfo.py
numpy/distutils/environment.py
numpy/distutils/exec_command.py
numpy/distutils/extension.py
numpy/distutils/fcompiler/__init__.py
numpy/distutils/fcompiler/absoft.py
numpy/distutils/fcompiler/compaq.py
numpy/distutils/fcompiler/g95.py
numpy/distutils/fcompiler/gnu.py
numpy/distutils/fcompiler/hpux.py
numpy/distutils/fcompiler/ibm.py
numpy/distutils/fcompiler/intel.py
numpy/distutils/fcompiler/lahey.py
numpy/distutils/fcompiler/mips.py
numpy/distutils/fcompiler/nag.py
numpy/distutils/fcompiler/none.py
numpy/distutils/fcompiler/pathf95.py
numpy/distutils/fcompiler/pg.py
numpy/distutils/fcompiler/sun.py
numpy/distutils/fcompiler/vast.py
numpy/distutils/from_template.py
numpy/distutils/info.py
numpy/distutils/intelccompiler.py
numpy/distutils/lib2def.py
numpy/distutils/line_endings.py
numpy/distutils/log.py
numpy/distutils/mingw32ccompiler.py
numpy/distutils/misc_util.py
numpy/distutils/npy_pkg_config.py
numpy/distutils/numpy_distribution.py
numpy/distutils/pathccompiler.py
numpy/distutils/system_info.py
numpy/distutils/tests/f2py_ext/__init__.py
numpy/distutils/tests/f2py_ext/tests/test_fib2.py
numpy/distutils/tests/f2py_f90_ext/__init__.py
numpy/distutils/tests/f2py_f90_ext/tests/test_foo.py
numpy/distutils/tests/gen_ext/__init__.py
numpy/distutils/tests/gen_ext/tests/test_fib3.py
numpy/distutils/tests/pyrex_ext/__init__.py
numpy/distutils/tests/pyrex_ext/tests/test_primes.py
numpy/distutils/tests/swig_ext/__init__.py
numpy/distutils/tests/swig_ext/tests/test_example.py
numpy/distutils/tests/swig_ext/tests/test_example2.py
numpy/distutils/tests/test_fcompiler_gnu.py
numpy/distutils/tests/test_fcompiler_intel.py
numpy/distutils/tests/test_misc_util.py
numpy/distutils/tests/test_npy_pkg_config.py
numpy/distutils/unixccompiler.py
numpy/doc/__init__.py
numpy/doc/basics.py
numpy/doc/broadcasting.py
numpy/doc/byteswapping.py
numpy/doc/constants.py
numpy/doc/creation.py
numpy/doc/glossary.py
numpy/doc/howtofind.py
numpy/doc/indexing.py
numpy/doc/internals.py
numpy/doc/io.py
numpy/doc/jargon.py
numpy/doc/methods_vs_functions.py
numpy/doc/misc.py
numpy/doc/performance.py
numpy/doc/structured_arrays.py
numpy/doc/subclassing.py
numpy/doc/ufuncs.py
numpy/dual.py
numpy/f2py/__init__.py
numpy/f2py/__version__.py
numpy/f2py/auxfuncs.py
numpy/f2py/capi_maps.py
numpy/f2py/cb_rules.py
numpy/f2py/cfuncs.py
numpy/f2py/common_rules.py
numpy/f2py/crackfortran.py
numpy/f2py/diagnose.py
numpy/f2py/doc/collectinput.py
numpy/f2py/docs/pytest.py
numpy/f2py/docs/usersguide/setup_example.py
numpy/f2py/f2py2e.py
numpy/f2py/f2py_testing.py
numpy/f2py/f90mod_rules.py
numpy/f2py/func2subr.py
numpy/f2py/info.py
numpy/f2py/rules.py
numpy/f2py/tests/test_array_from_pyobj.py
numpy/f2py/tests/test_assumed_shape.py
numpy/f2py/tests/test_callback.py
numpy/f2py/tests/test_kind.py
numpy/f2py/tests/test_mixed.py
numpy/f2py/tests/test_return_character.py
numpy/f2py/tests/test_return_complex.py
numpy/f2py/tests/test_return_integer.py
numpy/f2py/tests/test_return_logical.py
numpy/f2py/tests/test_return_real.py
numpy/f2py/tests/test_size.py
numpy/f2py/tests/util.py
numpy/f2py/use_rules.py
numpy/fft/__init__.py
numpy/fft/fftpack.py
numpy/fft/helper.py
numpy/fft/info.py
numpy/fft/tests/test_fftpack.py
numpy/fft/tests/test_helper.py
numpy/lib/__init__.py
numpy/lib/_datasource.py
numpy/lib/_iotools.py
numpy/lib/arraypad.py
numpy/lib/arraysetops.py
numpy/lib/arrayterator.py
numpy/lib/financial.py
numpy/lib/format.py
numpy/lib/function_base.py
numpy/lib/index_tricks.py
numpy/lib/info.py
numpy/lib/npyio.py
numpy/lib/polynomial.py
numpy/lib/recfunctions.py
numpy/lib/scimath.py
numpy/lib/shape_base.py
numpy/lib/stride_tricks.py
numpy/lib/tests/test__datasource.py
numpy/lib/tests/test__iotools.py
numpy/lib/tests/test_arraypad.py
numpy/lib/tests/test_arraysetops.py
numpy/lib/tests/test_arrayterator.py
numpy/lib/tests/test_financial.py
numpy/lib/tests/test_format.py
numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_index_tricks.py
numpy/lib/tests/test_io.py
numpy/lib/tests/test_polynomial.py
numpy/lib/tests/test_recfunctions.py
numpy/lib/tests/test_regression.py
numpy/lib/tests/test_shape_base.py
numpy/lib/tests/test_stride_tricks.py
numpy/lib/tests/test_twodim_base.py
numpy/lib/tests/test_type_check.py
numpy/lib/tests/test_ufunclike.py
numpy/lib/tests/test_utils.py
numpy/lib/twodim_base.py
numpy/lib/type_check.py
numpy/lib/ufunclike.py
numpy/lib/user_array.py
numpy/lib/utils.py
numpy/linalg/__init__.py
numpy/linalg/info.py
numpy/linalg/lapack_lite/clapack_scrub.py
numpy/linalg/lapack_lite/fortran.py
numpy/linalg/lapack_lite/make_lite.py
numpy/linalg/linalg.py
numpy/linalg/tests/test_build.py
numpy/linalg/tests/test_linalg.py
numpy/linalg/tests/test_regression.py
numpy/ma/__init__.py
numpy/ma/bench.py
numpy/ma/core.py
numpy/ma/extras.py
numpy/ma/mrecords.py
numpy/ma/tests/test_core.py
numpy/ma/tests/test_extras.py
numpy/ma/tests/test_mrecords.py
numpy/ma/tests/test_old_ma.py
numpy/ma/tests/test_regression.py
numpy/ma/tests/test_subclassing.py
numpy/ma/testutils.py
numpy/ma/timer_comparison.py
numpy/ma/version.py
numpy/matlib.py
numpy/matrixlib/__init__.py
numpy/matrixlib/defmatrix.py
numpy/matrixlib/tests/test_defmatrix.py
numpy/matrixlib/tests/test_multiarray.py
numpy/matrixlib/tests/test_numeric.py
numpy/matrixlib/tests/test_regression.py
numpy/numarray/__init__.py
numpy/numarray/alter_code1.py
numpy/numarray/alter_code2.py
numpy/numarray/compat.py
numpy/numarray/convolve.py
numpy/numarray/fft.py
numpy/numarray/functions.py
numpy/numarray/image.py
numpy/numarray/linear_algebra.py
numpy/numarray/ma.py
numpy/numarray/matrix.py
numpy/numarray/mlab.py
numpy/numarray/nd_image.py
numpy/numarray/numerictypes.py
numpy/numarray/random_array.py
numpy/numarray/session.py
numpy/numarray/ufuncs.py
numpy/numarray/util.py
numpy/oldnumeric/__init__.py
numpy/oldnumeric/alter_code1.py
numpy/oldnumeric/alter_code2.py
numpy/oldnumeric/array_printer.py
numpy/oldnumeric/arrayfns.py
numpy/oldnumeric/compat.py
numpy/oldnumeric/fft.py
numpy/oldnumeric/fix_default_axis.py
numpy/oldnumeric/functions.py
numpy/oldnumeric/linear_algebra.py
numpy/oldnumeric/ma.py
numpy/oldnumeric/matrix.py
numpy/oldnumeric/misc.py
numpy/oldnumeric/mlab.py
numpy/oldnumeric/precision.py
numpy/oldnumeric/random_array.py
numpy/oldnumeric/rng.py
numpy/oldnumeric/rng_stats.py
numpy/oldnumeric/tests/test_oldnumeric.py
numpy/oldnumeric/tests/test_regression.py
numpy/oldnumeric/typeconv.py
numpy/oldnumeric/ufuncs.py
numpy/oldnumeric/user_array.py
numpy/polynomial/__init__.py
numpy/polynomial/chebyshev.py
numpy/polynomial/hermite.py
numpy/polynomial/hermite_e.py
numpy/polynomial/laguerre.py
numpy/polynomial/legendre.py
numpy/polynomial/polynomial.py
numpy/polynomial/polytemplate.py
numpy/polynomial/polyutils.py
numpy/polynomial/tests/test_chebyshev.py
numpy/polynomial/tests/test_classes.py
numpy/polynomial/tests/test_hermite.py
numpy/polynomial/tests/test_hermite_e.py
numpy/polynomial/tests/test_laguerre.py
numpy/polynomial/tests/test_legendre.py
numpy/polynomial/tests/test_polynomial.py
numpy/polynomial/tests/test_polyutils.py
numpy/polynomial/tests/test_printing.py
numpy/random/__init__.py
numpy/random/info.py
numpy/random/mtrand/generate_mtrand_c.py
numpy/random/tests/test_random.py
numpy/random/tests/test_regression.py
numpy/testing/__init__.py
numpy/testing/decorators.py
numpy/testing/noseclasses.py
numpy/testing/nosetester.py
numpy/testing/nulltester.py
numpy/testing/numpytest.py
numpy/testing/print_coercion_tables.py
numpy/testing/tests/test_decorators.py
numpy/testing/tests/test_doctesting.py
numpy/testing/tests/test_utils.py
numpy/testing/utils.py
numpy/tests/test_ctypeslib.py
numpy/tests/test_matlib.py
pavement.py
setupegg.py
tools/allocation_tracking/track_allocations.py
tools/c_coverage/c_coverage_report.py
tools/commitstats.py
tools/py3tool.py
tools/test-installed-numpy.py
==================
4074218;Charles Harris;2013-03-28 07:10:01 -0700;Merge pull request #3122 from charris/2to3-apply-xrange-fixer
2to3: Replace xrange by range and use list(range(...)) where needed
==
==================
db75eb4;njsmith;2013-03-28 05:34:05 -0700;Merge pull request #3168 from juliantaylor/numarray-fixes
fix undefined function and add integer divisions
==
==================
b1d093e;Charles Harris;2013-03-27 18:02:23 -0700;Merge pull request #3141 from ewmoore/test_fast_power
TST: test_umath: fix wrong indent in test_fast_power
==
==================
b995d00;Charles Harris;2013-03-27 18:49:12 -0600;BUG: Rebased tools/py3tool.py was missing `,` in list.

==

tools/py3tool.py
==================
91aa03f;Charles Harris;2013-03-05 21:43:22 -0700;2to3: Replace xrange by range and use list(range(...)) where needed
In python3 range is an iterator and `xrange` has been removed. This has
two consequence for code:

    1) Where a list is needed `list(range(...))` must be used.
    2) `xrange` must be replaced by `range`

Both of these changes also work in python2 and this patch makes both.

There are three places fixed that do not need it, but I left them in
so that the result would be `xrange` clean.

Closes #3092

==

doc/neps/missing-data.rst
doc/source/reference/arrays.classes.rst
numpy/add_newdocs.py
numpy/core/_internal.py
numpy/core/_methods.py
numpy/core/arrayprint.py
numpy/core/code_generators/genapi.py
numpy/core/machar.py
numpy/core/numeric.py
numpy/core/numerictypes.py
numpy/core/records.py
numpy/core/tests/test_blasdot.py
numpy/core/tests/test_item_selection.py
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_multiarray_assignment.py
numpy/core/tests/test_nditer.py
numpy/core/tests/test_numeric.py
numpy/core/tests/test_records.py
numpy/core/tests/test_regression.py
numpy/core/tests/test_shape_base.py
numpy/core/tests/test_ufunc.py
numpy/core/tests/test_umath_complex.py
numpy/distutils/misc_util.py
numpy/f2py/crackfortran.py
numpy/f2py/tests/util.py
numpy/fft/fftpack.py
numpy/fft/helper.py
numpy/lib/arraypad.py
numpy/lib/function_base.py
numpy/lib/index_tricks.py
numpy/lib/npyio.py
numpy/lib/shape_base.py
numpy/lib/tests/test_financial.py
numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_io.py
numpy/lib/tests/test_twodim_base.py
numpy/linalg/linalg.py
numpy/ma/extras.py
numpy/ma/tests/test_core.py
numpy/ma/tests/test_old_ma.py
numpy/matrixlib/tests/test_defmatrix.py
numpy/numarray/functions.py
numpy/oldnumeric/__init__.py
numpy/polynomial/tests/test_chebyshev.py
numpy/polynomial/tests/test_hermite.py
numpy/polynomial/tests/test_hermite_e.py
numpy/polynomial/tests/test_laguerre.py
numpy/polynomial/tests/test_legendre.py
numpy/polynomial/tests/test_polynomial.py
numpy/testing/tests/test_decorators.py
numpy/testing/tests/test_utils.py
tools/py3tool.py
==================
e272631;Julian Taylor;2013-03-26 19:35:06 +0100;fix undefined function and add integer divisions

==

numpy/numarray/functions.py
==================
1a816c7;Ondřej Čertík;2013-03-25 08:22:57 -0700;Merge pull request #3167 from certik/forwardport3165
TST: open the TemporaryFile in ASCII mode
==
==================
df813e5;Ondrej Certik;2013-03-25 10:54:22 +0100;TST: open the TemporaryFile in ASCII mode
This should fix gh-3165.

Conflicts:
	numpy/distutils/tests/test_exec_command.py

==

numpy/distutils/tests/test_exec_command.py
==================
c96c69b;Ondřej Čertík;2013-03-24 09:45:29 -0700;Merge pull request #3128 from certik/pull-request-3127
BUG: fix issue with distutils.exec_command introduced in 1.7.0.
==
==================
3830fcc;endolith;2013-03-19 20:39:03 -0400;merge conflict

==
==================
0d35127;endolith;2013-03-19 20:37:26 -0400;DOC: regex-assisted fixes of definition list formatting

==

numpy/core/arrayprint.py
numpy/lib/_iotools.py
numpy/lib/format.py
numpy/lib/npyio.py
numpy/lib/polynomial.py
numpy/ma/core.py
numpy/ma/extras.py
numpy/polynomial/polyutils.py
==================
653a6fd;endolith;2012-09-25 13:41:25 -0400;DOC: Used regex to find colons missing spaces which render wrong online, also other spacing or formatting mistakes

==

doc/sphinxext/numpydoc/tests/test_docscrape.py
numpy/add_newdocs.py
numpy/build_utils/common.py
numpy/core/code_generators/generate_umath.py
numpy/core/code_generators/ufunc_docstrings.py
numpy/core/fromnumeric.py
numpy/core/setup_common.py
numpy/distutils/command/config.py
numpy/distutils/mingw32ccompiler.py
numpy/distutils/misc_util.py
numpy/lib/arraypad.py
numpy/lib/function_base.py
numpy/lib/index_tricks.py
numpy/lib/shape_base.py
numpy/lib/utils.py
numpy/ma/core.py
numpy/matrixlib/defmatrix.py
numpy/polynomial/chebyshev.py
numpy/polynomial/hermite.py
numpy/polynomial/hermite_e.py
numpy/polynomial/laguerre.py
numpy/polynomial/legendre.py
numpy/polynomial/polynomial.py
numpy/random/mtrand/mtrand.pyx
numpy/testing/utils.py
==================
1e6d6e6;Sebastian Berg;2013-03-18 15:53:10 +0100;TST: test no reuse of non-existing buffers in nditer
This slightly changes the test to cover more cases including
the one where buffers are sometimes used and sometimes not.

==

numpy/core/tests/test_nditer.py
==================
793e83d;Sebastian Berg;2013-03-18 15:44:12 +0100;BUG: no buffer reuse in nditer, if there was no buffer previously
If the buffer is used or not can possible change during iteration.
In this case, the buffer cannot be reused if it never existed...

==

numpy/core/src/multiarray/nditer_api.c
==================
12dce71;Sebastian Berg;2013-03-17 16:50:01 +0100;TST: Add (slow) nditer reduce buffer reuse test

==

numpy/core/tests/test_nditer.py
==================
5e8b322;Sebastian Berg;2013-03-17 16:04:36 +0100;BUG: Do not reuse nditer buffers when not filled enough.
This checks if the previous time around, the buffers were filled
with as much data as they would be filled this time around. Since
This is difficult for the initial loop before reusing is activated
because in that case the buffer may be larger then just the
first outer reduce dimension. In that case do not allow reuse
unless the index along that dimension was 0.
When the inner reduce index is not 0, then also the reusing of
the buffer is dangerous.

==

numpy/core/src/multiarray/nditer_api.c
==================
1402d2c;Egor Zindy;2013-03-16 12:40:34 +0000;removed the note about testResize1 failing in testArray.py

==

doc/swig/test/Array.i
==================
91f083a;Egor Zindy;2013-03-16 12:31:39 +0000;fixed the testResize1 test in testArray.py -- Changed order of the resize arguments in Array2.h and replaced len(XXXnumpyarray) with XXXnumpyarray.size

==

doc/swig/test/Array2.h
doc/swig/test/testArray.py
==================
4dcb067;Bill Spotz;2013-03-14 15:50:32 -0600;Minor adjustments to numpy.i
This includes so formatting adjustments, the removal of two unused
arguments for the make_fortran() function, fixing the number of
supported typemap signatures, including the ARGOUT_ARRAY4 typemap
signature in the comments section, and renumbering the typemap
signatures.

==

doc/swig/numpy.i
==================
179985f;Bill Spotz;2013-03-14 15:47:17 -0600;Updated numpy.i testing documentation
Simple updates to include proper statistics on the number of typemap
signatures supported and the number of individual unit tests
implemented.

==

doc/source/reference/swig.testing.rst
==================
897f335;Bill Spotz;2013-03-14 15:45:09 -0600;Updated the numpy.i documentation
The RST documentation file is now consistent with the C macros, C
functions, and list of typemap signatures of the latest numpy.i file.

==

doc/source/reference/swig.interface-file.rst
==================
e58c22b;Eric Moore;2013-03-12 19:10:46 -0400;TST: test_umath: fix wrong indent in test_fast_power
Also, use assert_ instead of assert

==

numpy/core/tests/test_umath.py
==================
ed4c76b;Bill Spotz;2013-03-11 21:31:16 -0600;Initialize all DATA_TYPE* data_temp variables to NULL

==

doc/swig/numpy.i
==================
64d04cd;Bill Spotz;2013-03-11 21:16:42 -0600;Added Egor's ARGOUTVIEWM_ARRAY3 typemaps

==

doc/swig/numpy.i
==================
cdf04e9;Bill Spotz;2013-03-11 21:06:36 -0600;Re-instated a Python 3 fix

==

doc/swig/numpy.i
==================
37e75e6;Bill Spotz;2013-03-11 20:40:46 -0600;Removed doc from list of sub-directories
The doc directory has been moved elsewhere, so I removed the reference
to it in the Makefile.

==

doc/swig/Makefile
==================
671cde1;Bill Spotz;2013-03-11 20:39:27 -0600;Upgrade numpy.i
The numpy.i file is now compliant with version 1.7 deprecations, but
also works with previous versions of numpy.  I have tested back to
numpy 1.4.1.

Added 4D typemaps and memory-managed typemaps.  These were supplied by
Egor Zindy.

Fixed bugs in 3D typemaps.  I was referencing $3 when I should have
been referencing $4.  Thanks to Egor Zindy for catching this.

==

doc/swig/numpy.i
==================
c7fff1b;Bill Spotz;2013-03-11 20:38:18 -0600;Got rid of a unit test
This test fails after updating numpy.i to deal with deprecated code.
My investigation into the source of the failure is that the test never
should have passed, so I commented it out.  I could be wrong.

==

doc/swig/test/testFortran.py
==================
5099683;Ondrej Certik;2013-03-10 15:31:07 +0100;TST: skip general test on non-posix platforms
Add a comment explaining the issue.

==

numpy/distutils/tests/test_exec_command.py
==================
36c4321;Ondrej Certik;2013-03-10 15:21:45 +0100;TST: Redirect the other stream to temp. file
Now things behave the same if executed with either of:

nosetests
nosetests -s

==

numpy/distutils/tests/test_exec_command.py
==================
92770f4;Ondrej Certik;2013-03-09 12:22:08 +0100;Implement separate checking for stdout and stderr
And enable a test for this that was failing before.

==

numpy/distutils/exec_command.py
numpy/distutils/tests/test_exec_command.py
==================
2fbdd99;Ondrej Certik;2013-03-09 12:19:24 +0100;TST: add robust tests for exec_command()
First, we test both stdout and stderr.

Second, we now test both _exec_command_posix() and _exec_command(), see
numpy/distutils/exec_command.py. This reveals a bug in the implementation which
will be fixed in the next commit. For now the failing test is commented out so
that all tests still pass.

==

numpy/distutils/tests/test_exec_command.py
==================
bd7104c;Charles Harris;2013-03-07 18:35:26 -0800;Merge pull request #3130 from mwiebe/setbaseobj_doc
DOC: Add mention of PyArray_SetBaseObject stealing a reference
==
==================
5a3ecaf;Mark Wiebe;2013-03-07 17:19:24 -0800;DOC: Add mention of PyArray_SetBaseObject stealing a reference

==

doc/source/reference/c-api.array.rst
==================
6c6194a;Ondrej Certik;2013-03-07 16:10:27 +0100;PEP8: don't use \

==

numpy/distutils/exec_command.py
==================
7c3b6dd;Ondrej Certik;2013-03-07 15:40:10 +0100;FIX: add _supports_fileno() for testing fileno()
The new _supports_fileno() function works in all versions of Python.
The problem was that in Python 2.x, the fileno() method of StringIO() is
missing, while in Python 3.x, it is present, but raises an exception.

==

numpy/distutils/exec_command.py
==================
ff01555;Ralf Gommers;2013-03-06 21:41:01 +0100;BUG: fix issue with distutils.exec_command introduced in 1.7.0.
Closes gh-2999 and gh-2915.

There are several packages (nose, scipy.weave.inline, Sage inline Fortran) that
replace stdout, in which case it doesn't have a fileno method.  This method was
attempted to be used (change in gh-2766 to fix a py3k issue).

==

numpy/distutils/exec_command.py
numpy/distutils/tests/test_exec_command.py
==================
bbcfcf6;Charles Harris;2013-03-06 08:16:38 -0800;Merge pull request #3123 from maxalbert/master
Typo fix in FFT docs
==
==================
c3fedb3;Maximilian Albert;2013-03-06 09:00:53 +0000;DOC: Fix typo in fft docs (the indexing variable is 'm', not 'n').

==

numpy/fft/info.py
==================
e108e1c;Charles Harris;2013-03-05 13:10:41 -0800;Merge pull request #3121 from charris/2to3-fix-for-in-f_dot_readlines
2to3: Remove xreadlines and replace f.readlines() by f where valid.
==
==================
342f074;Charles Harris;2013-03-05 12:09:12 -0700;2to3: Remove xreadlines and replace f.readlines() by f where valid.
An open file `f` has been an iterator since python2.3 and
`f.xreadlines()` is no longer needed, so replace it with `f`. Also
replace `f.readlines()` with `f` where an iterator will do. The
replacement of `f.readlines()` is not critical because it is a list in
both python2 and python3, but the code is a bit cleaner.

Closes #3093

==

numpy/core/code_generators/genapi.py
numpy/core/setup.py
numpy/distutils/command/build_src.py
numpy/distutils/command/install.py
numpy/distutils/conv_template.py
numpy/distutils/fcompiler/__init__.py
numpy/distutils/fcompiler/ibm.py
numpy/distutils/from_template.py
numpy/distutils/misc_util.py
numpy/distutils/system_info.py
tools/c_coverage/c_coverage_report.py
tools/py3tool.py
tools/win32build/misc/x86analysis.py
==================
9311fb7;njsmith;2013-03-05 12:20:10 -0800;Merge pull request #3120 from charris/2to3-remove-raw_input
2to3:DEP: Remove interactive setup and gnu compiler configuration.
==
==================
baeaeac;Charles Harris;2013-03-04 22:47:03 -0700;2to3:DEP: Remove interactive setup and gnu compiler configuration.
These havn't been deprecated, but I think few have heard of them, much
less used them. Before this change, running setup.py without any
arguments would result in interactive help. This patch removes that
interactive help and lets setup print its usual list of commands and
options.

All the script uses of the numpy/distutils/fcompiler compilers look
quite broken to me, but I have tried to maintain compatibility with the
earlier version of gnu.py after the removal of `raw_input`.

These removals solve an incompatibility between Python3 and Python2.
The current interactive setup help uses `raw_input`, which has been
removed in python3 and replaced by `input`.  However, python2 already
has an `input` that has different semantics.  Rather than deal with
this, I think it simpler to keep both `raw_input` and `input` out of
numpy.

Closes #3063
Closes #3079

==

numpy/distutils/core.py
numpy/distutils/fcompiler/gnu.py
numpy/distutils/interactive.py
tools/py3tool.py
==================
3ba223e;njsmith;2013-03-04 11:06:44 -0800;Merge pull request #3114 from charris/fix-resource-warnings
Fix resource warnings
==
==================
e105586;seberg;2013-03-04 05:35:17 -0800;Merge pull request #2992 from seberg/choice-object-scalar
BUG: fix random.choice scalar object result and disallow 0-d arrays
==
==================
66ffc58;Sebastian Berg;2013-03-04 14:13:33 +0100;MAINT: regenerate mtrand.c

==

numpy/random/mtrand/mtrand.c
==================
a530098;Sebastian Berg;2013-02-15 22:11:48 +0100;BUG: fix random.choice scalar object result and disallow 0-d arrays
Object arrays failed due to bad check for finding out if the result should
be a scalar type and not an array when size=None. Also in this case the
creation of the new array was wrong. This should be fixed with this.

The second fix is to forbid 0-d arrays. Allowing 0-d arrays does not
make much sense. But it is dangerous because for example floats will
be interpreted as 1-d arrays, while one may expect that they are interpreted
as integers. This also saves the trouble of reliably detecting all integers...

==

numpy/random/mtrand/mtrand.pyx
numpy/random/tests/test_random.py
==================
31a68dd;Charles Harris;2013-03-03 15:23:02 -0700;TST: Get rid of a ResourceWarning.
I'm not sure this is the right fix, but test_closing_fid need to check
that garbage collection will close a file that goes through a bunch of
openings followed by dropping the reference. So the fix is to ignore
warnings during the test. I'd just ignore ResourceWarning, but it does
not look to be a built in warning in Python 2.7.

==

numpy/lib/tests/test_io.py
==================
96ea318;Charles Harris;2013-03-03 12:40:59 -0700;MAINT: Get rid of a ResourceWarning.
This one in numpy/distutils/system_info.py. Just keep an explicit
reference to a file, then close it.

==

numpy/distutils/system_info.py
==================
9a62d54;njsmith;2013-03-03 14:54:20 -0800;Merge pull request #3115 from charris/2to3-skip-fixers
ENH: Skip already applied fixers when running 2to3.
==
==================
9207b4c;Charles Harris;2013-03-03 12:20:00 -0700;ENH: Skip already applied fixers when running 2to3.
This is done in `tools/py3tool.py` by providing a list of fixers that
is passed in the call to 2to3 with with the `-x` option that tells
2to3 to skip them.

Closes #3113

==

tools/py3tool.py
==================
aa4d003;Sebastian Berg;2013-03-02 03:12:41 +0100;MAINT: Remove 0-d iterator special case from ufunc_object.c

==

numpy/core/src/umath/ufunc_object.c
==================
20f44ef;Sebastian Berg;2013-03-01 20:43:31 +0100;DOC: mention AdvancedNew iterator change in the release notes.

==

doc/release/1.8.0-notes.rst
==================
b66a15e;Sebastian Berg;2013-03-01 20:40:08 +0100;DOC: Add documentation clarifying the use of oa_ndim

==

doc/source/reference/c-api.iterator.rst
==================
22e1fe4;Sebastian Berg;2013-02-23 12:38:41 +0100;MAINT: Remove np.ndindex 0-d hack.

==

numpy/lib/index_tricks.py
==================
610faef;Sebastian Berg;2013-03-01 19:53:39 +0100;TST: Add test that einsum multiplies scalars fine

==

numpy/core/tests/test_einsum.py
==================
c11fa49;Sebastian Berg;2013-03-01 19:49:10 +0100;TST: Add basic tests for 0-d np.nditer/np.nested_iter support

==

numpy/core/tests/test_nditer.py
==================
acce195;Sebastian Berg;2013-02-26 22:04:42 +0100;ENH: Allow np.nditer to support scalar op_axes
Also uses oa_ndim == -1 to signal no op_axes were given. This is slightly
cleaner inside pywrap itself and is a cleaner signal for the iterator.

==

numpy/core/src/multiarray/nditer_pywrap.c
==================
2e8fcc0;Sebastian Berg;2013-02-23 12:32:58 +0100;API: Make nditer support ndim == 0 for 0-d iterations.
There are relatively few changes necessare here. However there is a
conceptionally there are no axes for the 0-d case, and no axesdata
needs to be used. This still uses the first axisdata. Which means that
in a few places ndim == 0 is special cased or special cased to act like
ndim == 1.
It would probably be a little cleaner to to use the base pointers directly
in the 0-d case and no axes iteration at all. That would require similar
special cases though.

This also makes oa_ndim == -1 the "correct" way to signal that no op_axes
are given with oa_ndim == 0 being, for the time being, dual use. Either
meaning that nothing may be given, or if something something was given
enforcing a 0-d iteration.

The necessary changes to the ufunc machinery are also done.

Documented that the dtype transfer functions do not handle the scalar
case unless even shape is set.

==

numpy/core/src/multiarray/nditer_api.c
numpy/core/src/multiarray/nditer_constr.c
numpy/core/src/multiarray/nditer_impl.h
numpy/core/src/private/lowlevel_strided_loops.h
numpy/core/src/umath/reduction.c
numpy/core/src/umath/ufunc_object.c
==================
e24e0d8;Charles Harris;2013-03-02 14:09:35 -0700;Rebase and merge pull request #330.
  Add texinfo build target for document

==
==================
b73eaab;Takafumi Arakaki;2012-07-04 18:42:13 +0200;Add texinfo build target for document

==

doc/Makefile
doc/source/conf.py
==================
6f23bce;Charles Harris;2013-03-02 08:37:42 -0800;Merge pull request #3109 from njsmith/travis-check-sys-info
Travis: record some basic information about the build platform
==
==================
1fa4cad;Nathaniel J. Smith;2013-03-02 11:36:03 +0000;Travis: record some basic information about the build platform
The question has come up sometimes about how much memory etc. we have available for Travis builds. Let's just log the relevant resource limits at the top of every build log.

==

.travis.yml
==================
b149cd5;Ralf Gommers;2013-03-02 03:19:15 -0800;Merge pull request #3024 from rgommers/fix-api-deprecation
BUG: fix NPY_NO_DEPRECATED_API mechanism.
==
==================
23b87a5;Ralf Gommers;2013-02-27 07:39:43 +0100;BUG: fix NPY_NO_DEPRECATED_API mechanism.

==

doc/HOWTO_RELEASE.rst.txt
numpy/core/code_generators/cversions.py
numpy/core/code_generators/cversions.txt
numpy/core/include/numpy/numpyconfig.h
==================
985b267;Charles Harris;2013-03-01 17:53:09 -0800;Merge pull request #2953 from ContinuumIO/gufunc-fix
generalized ufunc signature problem fix
==
==================
d21281a;Charles Harris;2013-03-01 17:48:38 -0800;Merge pull request #3014 from bfroehle/f2py_unque_symbol
BUG: Choose a more unique PY_ARRAY_UNIQUE_SYMBOL in f2py.
==
==================
2b71ffb;njsmith;2013-03-01 14:33:40 -0800;Merge pull request #3106 from seberg/remove-maskNA-nditer-doc
DOC: Remove documentation of non-existing advanced iter NA flags.
==
==================
398b076;Sebastian Berg;2013-03-01 20:39:23 +0100;DOC: Remove documentation of non-existing advanced iter NA flags.

==

doc/source/reference/c-api.iterator.rst
==================
d12dad4;Charles Harris;2013-03-01 10:43:49 -0800;Merge pull request #3026 from charris/2to3-fix-print
2to3: Put `from __future__ import division` in every python file.
==
==================
890ee94;Charles Harris;2013-03-01 10:37:43 -0800;Merge pull request #3102 from seberg/nditer-fix-op_axes-initialization
BUG: initialize op_axes when only itershape is given
==
==================
cabc07e;Charles Harris;2013-02-28 08:11:02 -0700;MAINT: Make numpy/f2py/crackfortran docstring read better.
The copyright and short summary were moved to the top of the
docstring with the usage description below.

==

numpy/f2py/crackfortran.py
==================
6aa264c;Charles Harris;2013-02-27 13:26:58 -0700;2to3: Put `from __future__ import division in every python file.
This should be harmless, as we already are division clean. However,
placement of this import takes some care. In the future a script
can be used to append new features without worry, at least until
such time as it exceeds a single line. Having that ability will
make it easier to deal with absolute imports and printing updates.

==

doc/cdoc/numpyfilter.py
doc/cython/run_test.py
doc/cython/setup.py
doc/example.py
doc/newdtype_example/example.py
doc/newdtype_example/floatint/__init__.py
doc/newdtype_example/setup.py
doc/numpybook/comparison/ctypes/filter.py
doc/numpybook/comparison/ctypes/interface.py
doc/numpybook/comparison/pyrex/setup.py
doc/numpybook/comparison/timing.py
doc/numpybook/comparison/weave/filter.py
doc/numpybook/comparison/weave/inline.py
doc/numpybook/runcode.py
doc/postprocess.py
doc/pyrex/run_test.py
doc/pyrex/setup.py
doc/source/conf.py
doc/sphinxext/numpydoc/comment_eater.py
doc/sphinxext/numpydoc/compiler_unparse.py
doc/sphinxext/numpydoc/docscrape.py
doc/sphinxext/numpydoc/docscrape_sphinx.py
doc/sphinxext/numpydoc/linkcode.py
doc/sphinxext/numpydoc/numpydoc.py
doc/sphinxext/numpydoc/phantom_import.py
doc/sphinxext/numpydoc/plot_directive.py
doc/sphinxext/numpydoc/tests/test_docscrape.py
doc/sphinxext/numpydoc/traitsdoc.py
doc/sphinxext/setup.py
doc/summarize.py
doc/swig/test/setup.py
doc/swig/test/testArray.py
doc/swig/test/testFarray.py
doc/swig/test/testFortran.py
doc/swig/test/testMatrix.py
doc/swig/test/testTensor.py
doc/swig/test/testVector.py
numpy/__init__.py
numpy/_import_tools.py
numpy/add_newdocs.py
numpy/build_utils/__init__.py
numpy/build_utils/common.py
numpy/build_utils/waf.py
numpy/compat/__init__.py
numpy/compat/_inspect.py
numpy/compat/py3k.py
numpy/compat/setup.py
numpy/core/__init__.py
numpy/core/_internal.py
numpy/core/_methods.py
numpy/core/arrayprint.py
numpy/core/code_generators/__init__.py
numpy/core/code_generators/cversions.py
numpy/core/code_generators/genapi.py
numpy/core/code_generators/generate_numpy_api.py
numpy/core/code_generators/generate_ufunc_api.py
numpy/core/code_generators/generate_umath.py
numpy/core/code_generators/numpy_api.py
numpy/core/code_generators/ufunc_docstrings.py
numpy/core/defchararray.py
numpy/core/fromnumeric.py
numpy/core/function_base.py
numpy/core/getlimits.py
numpy/core/info.py
numpy/core/machar.py
numpy/core/memmap.py
numpy/core/numeric.py
numpy/core/numerictypes.py
numpy/core/records.py
numpy/core/setup.py
numpy/core/setup_common.py
numpy/core/shape_base.py
numpy/core/src/multiarray/testcalcs.py
numpy/core/tests/test_api.py
numpy/core/tests/test_arrayprint.py
numpy/core/tests/test_blasdot.py
numpy/core/tests/test_datetime.py
numpy/core/tests/test_defchararray.py
numpy/core/tests/test_deprecations.py
numpy/core/tests/test_dtype.py
numpy/core/tests/test_einsum.py
numpy/core/tests/test_errstate.py
numpy/core/tests/test_function_base.py
numpy/core/tests/test_getlimits.py
numpy/core/tests/test_half.py
numpy/core/tests/test_indexerrors.py
numpy/core/tests/test_indexing.py
numpy/core/tests/test_item_selection.py
numpy/core/tests/test_machar.py
numpy/core/tests/test_memmap.py
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_multiarray_assignment.py
numpy/core/tests/test_nditer.py
numpy/core/tests/test_numeric.py
numpy/core/tests/test_numerictypes.py
numpy/core/tests/test_print.py
numpy/core/tests/test_records.py
numpy/core/tests/test_regression.py
numpy/core/tests/test_scalarmath.py
numpy/core/tests/test_scalarprint.py
numpy/core/tests/test_shape_base.py
numpy/core/tests/test_ufunc.py
numpy/core/tests/test_umath.py
numpy/core/tests/test_umath_complex.py
numpy/core/tests/test_unicode.py
numpy/ctypeslib.py
numpy/distutils/__init__.py
numpy/distutils/__version__.py
numpy/distutils/ccompiler.py
numpy/distutils/command/__init__.py
numpy/distutils/command/autodist.py
numpy/distutils/command/bdist_rpm.py
numpy/distutils/command/build.py
numpy/distutils/command/build_clib.py
numpy/distutils/command/build_ext.py
numpy/distutils/command/build_py.py
numpy/distutils/command/build_scripts.py
numpy/distutils/command/build_src.py
numpy/distutils/command/config.py
numpy/distutils/command/config_compiler.py
numpy/distutils/command/develop.py
numpy/distutils/command/egg_info.py
numpy/distutils/command/install.py
numpy/distutils/command/install_clib.py
numpy/distutils/command/install_data.py
numpy/distutils/command/install_headers.py
numpy/distutils/command/sdist.py
numpy/distutils/compat.py
numpy/distutils/conv_template.py
numpy/distutils/core.py
numpy/distutils/cpuinfo.py
numpy/distutils/environment.py
numpy/distutils/exec_command.py
numpy/distutils/extension.py
numpy/distutils/fcompiler/__init__.py
numpy/distutils/fcompiler/absoft.py
numpy/distutils/fcompiler/compaq.py
numpy/distutils/fcompiler/g95.py
numpy/distutils/fcompiler/gnu.py
numpy/distutils/fcompiler/hpux.py
numpy/distutils/fcompiler/ibm.py
numpy/distutils/fcompiler/intel.py
numpy/distutils/fcompiler/lahey.py
numpy/distutils/fcompiler/mips.py
numpy/distutils/fcompiler/nag.py
numpy/distutils/fcompiler/none.py
numpy/distutils/fcompiler/pathf95.py
numpy/distutils/fcompiler/pg.py
numpy/distutils/fcompiler/sun.py
numpy/distutils/fcompiler/vast.py
numpy/distutils/from_template.py
numpy/distutils/info.py
numpy/distutils/intelccompiler.py
numpy/distutils/interactive.py
numpy/distutils/lib2def.py
numpy/distutils/line_endings.py
numpy/distutils/log.py
numpy/distutils/mingw32ccompiler.py
numpy/distutils/misc_util.py
numpy/distutils/npy_pkg_config.py
numpy/distutils/numpy_distribution.py
numpy/distutils/pathccompiler.py
numpy/distutils/setup.py
numpy/distutils/system_info.py
numpy/distutils/tests/f2py_ext/__init__.py
numpy/distutils/tests/f2py_ext/setup.py
numpy/distutils/tests/f2py_ext/tests/test_fib2.py
numpy/distutils/tests/f2py_f90_ext/__init__.py
numpy/distutils/tests/f2py_f90_ext/setup.py
numpy/distutils/tests/f2py_f90_ext/tests/test_foo.py
numpy/distutils/tests/gen_ext/__init__.py
numpy/distutils/tests/gen_ext/setup.py
numpy/distutils/tests/gen_ext/tests/test_fib3.py
numpy/distutils/tests/pyrex_ext/__init__.py
numpy/distutils/tests/pyrex_ext/setup.py
numpy/distutils/tests/pyrex_ext/tests/test_primes.py
numpy/distutils/tests/setup.py
numpy/distutils/tests/swig_ext/__init__.py
numpy/distutils/tests/swig_ext/setup.py
numpy/distutils/tests/swig_ext/tests/test_example.py
numpy/distutils/tests/swig_ext/tests/test_example2.py
numpy/distutils/tests/test_fcompiler_gnu.py
numpy/distutils/tests/test_fcompiler_intel.py
numpy/distutils/tests/test_misc_util.py
numpy/distutils/tests/test_npy_pkg_config.py
numpy/distutils/unixccompiler.py
numpy/doc/__init__.py
numpy/doc/basics.py
numpy/doc/broadcasting.py
numpy/doc/byteswapping.py
numpy/doc/constants.py
numpy/doc/creation.py
numpy/doc/glossary.py
numpy/doc/howtofind.py
numpy/doc/indexing.py
numpy/doc/internals.py
numpy/doc/io.py
numpy/doc/jargon.py
numpy/doc/methods_vs_functions.py
numpy/doc/misc.py
numpy/doc/performance.py
numpy/doc/structured_arrays.py
numpy/doc/subclassing.py
numpy/doc/ufuncs.py
numpy/dual.py
numpy/f2py/__init__.py
numpy/f2py/__version__.py
numpy/f2py/auxfuncs.py
numpy/f2py/capi_maps.py
numpy/f2py/cb_rules.py
numpy/f2py/cfuncs.py
numpy/f2py/common_rules.py
numpy/f2py/crackfortran.py
numpy/f2py/diagnose.py
numpy/f2py/doc/collectinput.py
numpy/f2py/docs/pytest.py
numpy/f2py/docs/usersguide/setup_example.py
numpy/f2py/f2py2e.py
numpy/f2py/f2py_testing.py
numpy/f2py/f90mod_rules.py
numpy/f2py/func2subr.py
numpy/f2py/info.py
numpy/f2py/rules.py
numpy/f2py/setup.py
numpy/f2py/tests/test_array_from_pyobj.py
numpy/f2py/tests/test_assumed_shape.py
numpy/f2py/tests/test_callback.py
numpy/f2py/tests/test_kind.py
numpy/f2py/tests/test_mixed.py
numpy/f2py/tests/test_return_character.py
numpy/f2py/tests/test_return_complex.py
numpy/f2py/tests/test_return_integer.py
numpy/f2py/tests/test_return_logical.py
numpy/f2py/tests/test_return_real.py
numpy/f2py/tests/test_size.py
numpy/f2py/tests/util.py
numpy/f2py/use_rules.py
numpy/fft/__init__.py
numpy/fft/fftpack.py
numpy/fft/helper.py
numpy/fft/info.py
numpy/fft/setup.py
numpy/fft/tests/test_helper.py
numpy/lib/__init__.py
numpy/lib/_datasource.py
numpy/lib/_iotools.py
numpy/lib/arraypad.py
numpy/lib/arraysetops.py
numpy/lib/arrayterator.py
numpy/lib/financial.py
numpy/lib/format.py
numpy/lib/function_base.py
numpy/lib/index_tricks.py
numpy/lib/info.py
numpy/lib/npyio.py
numpy/lib/polynomial.py
numpy/lib/recfunctions.py
numpy/lib/scimath.py
numpy/lib/setup.py
numpy/lib/shape_base.py
numpy/lib/stride_tricks.py
numpy/lib/tests/test__datasource.py
numpy/lib/tests/test__iotools.py
numpy/lib/tests/test_arraypad.py
numpy/lib/tests/test_arraysetops.py
numpy/lib/tests/test_arrayterator.py
numpy/lib/tests/test_financial.py
numpy/lib/tests/test_format.py
numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_index_tricks.py
numpy/lib/tests/test_io.py
numpy/lib/tests/test_polynomial.py
numpy/lib/tests/test_recfunctions.py
numpy/lib/tests/test_regression.py
numpy/lib/tests/test_shape_base.py
numpy/lib/tests/test_stride_tricks.py
numpy/lib/tests/test_twodim_base.py
numpy/lib/tests/test_type_check.py
numpy/lib/tests/test_ufunclike.py
numpy/lib/tests/test_utils.py
numpy/lib/twodim_base.py
numpy/lib/type_check.py
numpy/lib/ufunclike.py
numpy/lib/user_array.py
numpy/lib/utils.py
numpy/linalg/__init__.py
numpy/linalg/info.py
numpy/linalg/lapack_lite/clapack_scrub.py
numpy/linalg/lapack_lite/fortran.py
numpy/linalg/lapack_lite/make_lite.py
numpy/linalg/linalg.py
numpy/linalg/setup.py
numpy/linalg/tests/test_build.py
numpy/linalg/tests/test_linalg.py
numpy/linalg/tests/test_regression.py
numpy/ma/__init__.py
numpy/ma/bench.py
numpy/ma/core.py
numpy/ma/extras.py
numpy/ma/mrecords.py
numpy/ma/setup.py
numpy/ma/tests/test_core.py
numpy/ma/tests/test_extras.py
numpy/ma/tests/test_mrecords.py
numpy/ma/tests/test_old_ma.py
numpy/ma/tests/test_regression.py
numpy/ma/tests/test_subclassing.py
numpy/ma/testutils.py
numpy/ma/timer_comparison.py
numpy/ma/version.py
numpy/matlib.py
numpy/matrixlib/__init__.py
numpy/matrixlib/defmatrix.py
numpy/matrixlib/setup.py
numpy/matrixlib/tests/test_defmatrix.py
numpy/matrixlib/tests/test_multiarray.py
numpy/matrixlib/tests/test_numeric.py
numpy/matrixlib/tests/test_regression.py
numpy/numarray/__init__.py
numpy/numarray/alter_code1.py
numpy/numarray/alter_code2.py
numpy/numarray/compat.py
numpy/numarray/convolve.py
numpy/numarray/fft.py
numpy/numarray/functions.py
numpy/numarray/image.py
numpy/numarray/linear_algebra.py
numpy/numarray/ma.py
numpy/numarray/matrix.py
numpy/numarray/mlab.py
numpy/numarray/nd_image.py
numpy/numarray/numerictypes.py
numpy/numarray/random_array.py
numpy/numarray/session.py
numpy/numarray/setup.py
numpy/numarray/ufuncs.py
numpy/numarray/util.py
numpy/oldnumeric/__init__.py
numpy/oldnumeric/alter_code1.py
numpy/oldnumeric/alter_code2.py
numpy/oldnumeric/array_printer.py
numpy/oldnumeric/arrayfns.py
numpy/oldnumeric/compat.py
numpy/oldnumeric/fft.py
numpy/oldnumeric/fix_default_axis.py
numpy/oldnumeric/functions.py
numpy/oldnumeric/linear_algebra.py
numpy/oldnumeric/ma.py
numpy/oldnumeric/matrix.py
numpy/oldnumeric/misc.py
numpy/oldnumeric/mlab.py
numpy/oldnumeric/precision.py
numpy/oldnumeric/random_array.py
numpy/oldnumeric/rng.py
numpy/oldnumeric/rng_stats.py
numpy/oldnumeric/setup.py
numpy/oldnumeric/tests/test_oldnumeric.py
numpy/oldnumeric/tests/test_regression.py
numpy/oldnumeric/typeconv.py
numpy/oldnumeric/ufuncs.py
numpy/oldnumeric/user_array.py
numpy/polynomial/__init__.py
numpy/polynomial/polytemplate.py
numpy/polynomial/setup.py
numpy/polynomial/tests/test_printing.py
numpy/random/__init__.py
numpy/random/info.py
numpy/random/mtrand/generate_mtrand_c.py
numpy/random/setup.py
numpy/random/tests/test_random.py
numpy/random/tests/test_regression.py
numpy/setup.py
numpy/testing/__init__.py
numpy/testing/decorators.py
numpy/testing/noseclasses.py
numpy/testing/nosetester.py
numpy/testing/nulltester.py
numpy/testing/numpytest.py
numpy/testing/print_coercion_tables.py
numpy/testing/setup.py
numpy/testing/tests/test_decorators.py
numpy/testing/tests/test_doctesting.py
numpy/testing/tests/test_utils.py
numpy/testing/utils.py
numpy/tests/test_ctypeslib.py
numpy/tests/test_matlib.py
pavement.py
setup.py
setupegg.py
tools/allocation_tracking/setup.py
tools/allocation_tracking/track_allocations.py
tools/c_coverage/c_coverage_report.py
tools/commitstats.py
tools/py3tool.py
tools/test-installed-numpy.py
==================
e12dc1c;Sebastian Berg;2013-02-24 21:51:04 +0100;BUG: initialize op_axes when only itershape is given
In this case, the initialization used the number of dimensions instead
of setting it to NULL for each operand, leading to possible segmentation
faults.

==

numpy/core/src/multiarray/nditer_pywrap.c
numpy/core/tests/test_nditer.py
==================
d111fbd;njsmith;2013-03-01 09:16:58 -0800;Merge pull request #3099 from charris/2to3-methodattrs
2to3: Apply `methodattrs` fixes.
==
==================
0a5746d;Charles Harris;2013-02-28 17:57:32 -0700;2to3: Apply `methodattrs` fixes.
Replaces old style `f.im_func` and `f.im_class` method attributes
with `f.__func__` and `f.__class__`. Closes #3070.

==

numpy/compat/_inspect.py
numpy/distutils/mingw32ccompiler.py
numpy/lib/utils.py
numpy/testing/noseclasses.py
==================
3c13c0a;Charles Harris;2013-03-01 07:55:38 -0800;Merge pull request #3056 from charris/2to3-filter
2to3: Apply `filter` fixes. Closes #3053.
==
==================
02cfcb9;Charles Harris;2013-03-01 08:36:46 -0700;Merge branch '2to3-raise'
Use modern raise syntax for python 3 compatibility.

* 2to3-raise:
  2to3: Apply `raise` fixes. Closes #3077.

==
==================
3655b73;Charles Harris;2013-02-28 17:23:13 -0700;2to3: Apply `raise` fixes. Closes #3077.
Replaces the

    raise Exception, msg:

form with

    raise Exception(msg):

==

doc/numpybook/comparison/weave/filter.py
doc/numpybook/comparison/weave/inline.py
numpy/core/code_generators/generate_numpy_api.py
numpy/core/records.py
numpy/f2py/auxfuncs.py
numpy/lib/polynomial.py
numpy/ma/extras.py
numpy/ma/mrecords.py
numpy/oldnumeric/arrayfns.py
numpy/oldnumeric/random_array.py
numpy/oldnumeric/rng.py
tools/osxbuild/install_and_test.py
==================
d1e692d;njsmith;2013-03-01 05:33:49 -0800;Merge pull request #3101 from charris/remove-benchmarks
REM: Remove benchmarks files.
==
==================
d1b5ea9;njsmith;2013-03-01 05:24:19 -0800;Merge pull request #3097 from charris/2to3-sys_exc
2to3: Apply `sys_exc` fixes. Closes #3086.
==
==================
48df796;Charles Harris;2013-02-28 19:34:59 -0800;Merge pull request #2967 from sbyrnes321/master
DOC -- add another paragraph note to ndarray.view docs
==
==================
5ce8e28;Charles Harris;2013-02-28 19:31:57 -0800;Merge pull request #2988 from ewmoore/methdot2697
BUG: gh-2687 make multiarray dot method accept out array and keyword args
==
==================
629a2d4;Charles Harris;2013-02-28 20:06:48 -0700;Merge branch 'enh-numpydoc'
There were some conflicts with the 2to3 work in numpy. I think I got the
fixes right.

* enh-numpydoc:
  DOC: fix doc/source/conf.py to work with Python 3
  BUG: numpydoc: check that it works with sub-classes
  TST: numpydoc: more class tests
  BUG: numpydoc: fix bugs in attribute docstring extraction + improve presentation
  TST: numpydoc: add stub test files, to check that files at least import
  MAINT: always use plot directive from Matplotlib, and prefer Sphinx linkcode
  ENH: numpydoc: Python 2 & 3 in single codebase, restructure as a package
  ENH: numpydoc: deal with duplicated signatures
  DOC: numpydoc/linkcode: mention that the extension will be in Sphinx upstream
  BUG: numpydoc/linkcode: do not detect linkcode config changes

Conflicts:
	doc/sphinxext/numpydoc/docscrape.py
	doc/sphinxext/numpydoc/docscrape_sphinx.py
	doc/sphinxext/numpydoc/linkcode.py
	doc/sphinxext/numpydoc/phantom_import.py
	doc/sphinxext/numpydoc/traitsdoc.py

==
==================
d1e6fc3;Charles Harris;2013-02-28 18:46:35 -0700;REM: Remove benchmarks files.
The files are very basic, old benchmarks testing numpy against numeric
and numarray. The competitors are almost defunct and, while benchmarks
are awesome, we really need a more polished and complete framework that
runs against the current competition. I think the early results from
these benchmarks were posted, maybe even presented, and could be found
in a search.

Closes #3088 ;) So old a tuple parameter was used.

==

benchmarks/benchmark.py
benchmarks/casting.py
benchmarks/creating.py
benchmarks/simpleindex.py
benchmarks/sorting.py
==================
9da706c;Charles Harris;2013-02-28 16:42:45 -0700;2to3: Apply `sys_exc` fixes. Closes #3086.
This uses sys.exc_info in place of sys.exc_value. The new function
goes back to at least 2002, so should be safe.

==

numpy/distutils/cpuinfo.py
numpy/f2py/diagnose.py
==================
0e4e508;Charles Harris;2013-02-28 13:56:11 -0700;BUG: Fix `not a in ...` to `a not in ...`.
Also break regular expression compiles out of the loop.

==

numpy/f2py/f2py2e.py
==================
9a73697;Charles Harris;2013-02-28 13:19:41 -0700;REF: Replace filters with list comprehensions.
2to3 does a lot of list(filter(...)) sort of thing which can be
avoided by using list comprehensions instead of filters. This
also seems to clarify the code to a considerable degree.

==

numpy/distutils/command/build_py.py
numpy/distutils/misc_util.py
numpy/distutils/system_info.py
numpy/f2py/f2py2e.py
numpy/testing/utils.py
==================
4b361f6;njsmith;2013-02-28 12:10:05 -0800;Merge pull request #3047 from charris/2to3-callable
2to3: Fix callable.
==
==================
e1c7c4d;njsmith;2013-02-28 11:15:09 -0800;Merge pull request #3059 from charris/2to3-funcattrs
2to3: Apply `funcattrs` fixer. Closes #3058.
==
==================
2cb5021;njsmith;2013-02-28 10:35:37 -0800;Merge pull request #3049 from charris/2to3-exec
2to3: apply exec fixer results.
==
==================
ceca28d;njsmith;2013-02-28 10:33:49 -0800;Merge pull request #3055 from charris/2to3-execfile
2to3: apply `execfile` fixer results.
==
==================
80af580;Charles Harris;2013-02-28 11:32:12 -0700;2to3: Apply `funcattrs` fixer. Closes #3058.
This replaces the `b.func_xxxx` with newer `__xxxx__` attribute names
For example, `f.__name__`  replaces `f.func_name`

==

doc/sphinxext/phantom_import.py
numpy/compat/_inspect.py
numpy/distutils/command/build_src.py
numpy/distutils/mingw32ccompiler.py
numpy/distutils/misc_util.py
numpy/lib/utils.py
numpy/testing/noseclasses.py
==================
b990ed5;Charles Harris;2013-02-28 10:58:40 -0700;2to3: Apply `filter` fixes. Closes #3053.
Generally, this involves using list comprehension, or explicit list
construction as `filter` is an iterator in Python 3.

==

numpy/_import_tools.py
numpy/distutils/command/build_py.py
numpy/distutils/command/build_src.py
numpy/distutils/misc_util.py
numpy/distutils/system_info.py
numpy/f2py/f2py2e.py
numpy/testing/utils.py
setup.py
==================
36e979c;Charles Harris;2013-02-28 10:23:42 -0700;2to3: apply `execfile` fixer results.
The execfile command is gone in Python 3. The fix is to read the file,
then compile and exec the result.

==

setupegg.py
==================
2429298;Charles Harris;2013-02-28 09:36:20 -0700;2to3: apply exec fixer results.
This changes the `exec` command to the `exec` function.

==

doc/numpybook/runcode.py
doc/sphinxext/plot_directive.py
numpy/_import_tools.py
numpy/f2py/tests/test_array_from_pyobj.py
numpy/lib/function_base.py
numpy/numarray/session.py
numpy/polynomial/chebyshev.py
numpy/polynomial/hermite.py
numpy/polynomial/hermite_e.py
numpy/polynomial/laguerre.py
numpy/polynomial/legendre.py
numpy/polynomial/polynomial.py
numpy/testing/numpytest.py
numpy/testing/utils.py
==================
dd13084;Charles Harris;2013-02-27 18:34:50 -0700;2to3: Fix callable.

==

doc/sphinxext/docscrape.py
doc/sphinxext/docscrape_sphinx.py
doc/sphinxext/linkcode.py
doc/sphinxext/numpydoc.py
doc/sphinxext/traitsdoc.py
doc/summarize.py
numpy/core/numeric.py
numpy/core/tests/test_records.py
numpy/lib/function_base.py
numpy/matrixlib/tests/test_defmatrix.py
numpy/testing/decorators.py
==================
0934653;njsmith;2013-02-28 06:40:03 -0800;Merge pull request #2950 from seberg/issue-2949
BUG: Fix strides of trailing 1s when reshaping
==
==================
22decf9;seberg;2013-02-27 14:38:46 -0800;Merge pull request #3027 from charris/2to3-remove-has_key-update
2to3: Remove `has_key` use that was missed.
==
==================
e84885a;seberg;2013-02-27 14:37:36 -0800;Merge pull request #3028 from charris/2to3-except-update
2to3: Update `except Exception, msg:` syntax in files not in numpy/ .
==
==================
046d057;Charles Harris;2013-02-27 14:43:38 -0700;2to3: Remove `has_key` use that was missed.
The files not in the numpy/ directory were missed. This gets them
all (I hope).

==

doc/sphinxext/docscrape.py
doc/sphinxext/plot_directive.py
==================
c6397ba;Charles Harris;2013-02-27 14:24:35 -0700;2to3: Updata `except Exception, msg:` syntax in files not in numpy/ .
This should finish the updating of the exception syntax.

==

benchmarks/benchmark.py
doc/sphinxext/docscrape.py
doc/sphinxext/plot_directive.py
pavement.py
tools/osxbuild/build.py
tools/win32build/build.py
tools/win32build/prepare_bootstrap.py
==================
208072f;Ralf Gommers;2013-02-27 11:32:29 -0800;Merge pull request #2943 from rgommers/bento-ini-files
BUG: npy-pkg-config ini files were missing after Bento build.
==
==================
9d8722b;Pauli Virtanen;2013-02-27 19:48:28 +0200;DOC: fix doc/source/conf.py to work with Python 3

==

doc/source/conf.py
==================
e1f0c1b;seberg;2013-02-27 08:46:16 -0800;Merge pull request #3020 from charris/2to3-remove-has_key
2to3: Change use 'has_key' to 'key in'.
==
==================
a369522;seberg;2013-02-27 08:44:48 -0800;Merge pull request #3023 from charris/2to3-except
2to3: Use modern exception syntax.
==
==================
705bf92;Charles Harris;2013-02-26 20:04:59 -0700;2to3: Use modern exception syntax.
Example:  except ValueError,msg: -> except ValueError as msg:

==

numpy/_import_tools.py
numpy/build_utils/waf.py
numpy/core/tests/test_half.py
numpy/core/tests/test_machar.py
numpy/core/tests/test_nditer.py
numpy/core/tests/test_numeric.py
numpy/core/tests/test_print.py
numpy/core/tests/test_regression.py
numpy/ctypeslib.py
numpy/distutils/interactive.py
numpy/distutils/system_info.py
numpy/f2py/capi_maps.py
numpy/f2py/crackfortran.py
numpy/f2py/diagnose.py
numpy/f2py/f2py2e.py
numpy/f2py/tests/test_array_from_pyobj.py
numpy/f2py/tests/util.py
numpy/lib/format.py
numpy/lib/tests/test__datasource.py
numpy/lib/tests/test_io.py
numpy/lib/utils.py
numpy/linalg/tests/test_linalg.py
numpy/ma/core.py
numpy/testing/numpytest.py
numpy/testing/utils.py
numpy/tests/test_ctypeslib.py
==================
93c4db0;Charles Harris;2013-02-26 19:20:29 -0700;2to3: Change use 'has_key' to 'key in'.
Part of the 2to3 project.

==

numpy/distutils/npy_pkg_config.py
==================
a226daa;Bradley M. Froehle;2013-02-24 21:31:28 -0800;BUG: Choose a more unique PY_ARRAY_UNIQUE_SYMBOL in f2py.
In a few exceptional cases where symbols are shared between different
Python modules the use of `PyArray_API` in f2py (fortranobject.h)
conflicts with the regular use of the same symbol in the multiarray
module. Generally the symptom of this conflicting use is a segfault
when importing a f2py'ed module. This occurs because the module init
code somehow overwrites the first element of `PyArray_API` with the
location of `PyArray_API`, causing a crash when
`PyArray_GetNDArrayCVersion` is called.

Closes gh-2521.

==

numpy/f2py/src/fortranobject.h
==================
6de7a4b;Charles Harris;2013-02-24 18:00:13 -0800;Merge pull request #3002 from seberg/issue-3001
BUG: Incref items in np.take on error as they are decrefed later
==
==================
230ee3a;Sebastian Berg;2013-02-19 16:52:32 +0100;BUG: non-empty takes on empty axes failed for clip/wrap logic
These did no checking for this special case. And thus, wrap would go
into infinite loops trying to adjust the index, and clip would (probably)
segfault. This raises IndexError explicitely beforehand.

==

numpy/core/src/multiarray/item_selection.c
numpy/core/tests/test_indexerrors.py
==================
58548e6;Sebastian Berg;2013-02-21 23:48:29 +0100;TST: Add test for np.take refcounting
Also make the testcase for take a class.

==

numpy/core/tests/test_item_selection.py
==================
b343f43;Sebastian Berg;2013-02-18 23:34:01 +0100;BUG: Incref items in np.take on error as they are decrefed later
When take fails during copying due to out of bound indices, then the already
copied items will be decref'd on array destruction. To avoid that, as well
as possible overlapping or already initialized object arrays, decref and
incref during the copy operation itself. Note that all basic types but
object use their own fasttake, so this does not change anything for them.

==

numpy/core/src/multiarray/item_selection.c
numpy/core/tests/test_item_selection.py
numpy/core/tests/test_regression.py
==================
17774a6;Charles Harris;2013-02-22 21:15:22 -0800;Merge pull request #3009 from daveydave400/fix_zeros_like_doc
Added 'subok' keyword documentation to zeros_like and ones_like functions.
==
==================
436b521;daveydave400;2013-02-22 12:38:42 -0600;Added 'subok' keyword documentation to zeros_like and ones_like functions.

==

numpy/core/numeric.py
==================
665a00a;Charles Harris;2013-02-20 06:28:45 -0800;Merge pull request #3006 from seberg/fix-empty-item
BUG: Fix regression of bad error/random behavior in item method
==
==================
04b89c6;Sebastian Berg;2013-02-20 15:04:33 +0100;BUG: Fix regression of bad error/random behavior in item method
Appearently .item() for arrays with size != 1 correctly returned an error
in 1.6., but failed to raise the error (due to missing return) in 1.7.

==

numpy/core/src/multiarray/methods.c
numpy/core/tests/test_regression.py
==================
b2ed8f7;Charles Harris;2013-02-17 16:48:05 -0800;Merge pull request #2996 from andreas-h/patch-1
Update numpy/lib/function_base.py
==
==================
c5478ef;Andreas Hilboll;2013-02-17 12:56:41 +0100;Update numpy/lib/function_base.py
fix percentile docstring
==

numpy/lib/function_base.py
==================
a3bc146;Pauli Virtanen;2013-02-16 16:42:46 +0200;BUG: numpydoc: check that it works with sub-classes

==

doc/sphinxext/numpydoc/docscrape.py
doc/sphinxext/numpydoc/tests/test_docscrape.py
==================
1b2e585;Pauli Virtanen;2013-02-16 16:28:58 +0200;TST: numpydoc: more class tests

==

doc/sphinxext/numpydoc/tests/test_docscrape.py
==================
fd9064f;Pauli Virtanen;2013-02-16 16:22:32 +0200;BUG: numpydoc: fix bugs in attribute docstring extraction + improve presentation

==

doc/sphinxext/numpydoc/docscrape.py
doc/sphinxext/numpydoc/docscrape_sphinx.py
==================
c5efee8;Pauli Virtanen;2013-02-16 15:54:23 +0200;TST: numpydoc: add stub test files, to check that files at least import

==

doc/sphinxext/numpydoc/tests/test_linkcode.py
doc/sphinxext/numpydoc/tests/test_phantom_import.py
doc/sphinxext/numpydoc/tests/test_plot_directive.py
doc/sphinxext/numpydoc/tests/test_traitsdoc.py
==================
cc83253;Pauli Virtanen;2013-02-16 15:46:10 +0200;MAINT: always use plot directive from Matplotlib, and prefer Sphinx linkcode

==

doc/source/conf.py
==================
7f2da39;Pauli Virtanen;2013-02-16 15:44:01 +0200;ENH: numpydoc: Python 2 & 3 in single codebase, restructure as a package

==

doc/sphinxext/MANIFEST.in
doc/sphinxext/__init__.py
doc/sphinxext/comment_eater.py
doc/sphinxext/compiler_unparse.py
doc/sphinxext/docscrape.py
doc/sphinxext/docscrape_sphinx.py
doc/sphinxext/linkcode.py
doc/sphinxext/numpydoc.py
doc/sphinxext/numpydoc/__init__.py
doc/sphinxext/numpydoc/comment_eater.py
doc/sphinxext/numpydoc/compiler_unparse.py
doc/sphinxext/numpydoc/docscrape.py
doc/sphinxext/numpydoc/docscrape_sphinx.py
doc/sphinxext/numpydoc/linkcode.py
doc/sphinxext/numpydoc/numpydoc.py
doc/sphinxext/numpydoc/phantom_import.py
doc/sphinxext/numpydoc/plot_directive.py
doc/sphinxext/numpydoc/tests/test_docscrape.py
doc/sphinxext/numpydoc/traitsdoc.py
doc/sphinxext/phantom_import.py
doc/sphinxext/plot_directive.py
doc/sphinxext/setup.py
doc/sphinxext/tests/test_docscrape.py
doc/sphinxext/traitsdoc.py
==================
a4cd4ff;Pauli Virtanen;2012-12-09 19:38:53 +0200;ENH: numpydoc: deal with duplicated signatures

==

doc/sphinxext/docscrape.py
doc/sphinxext/tests/test_docscrape.py
==================
c5cb18f;Pauli Virtanen;2012-12-09 19:31:21 +0200;DOC: numpydoc/linkcode: mention that the extension will be in Sphinx upstream

==

doc/sphinxext/linkcode.py
==================
cedba8e;Pauli Virtanen;2012-12-07 21:16:50 +0200;BUG: numpydoc/linkcode: do not detect linkcode config changes
Since the linkcode_resolve is a function, it triggers configuration
change on each rebuild, resulting to full rebuild always. It's better
to make it not do that.

==

doc/sphinxext/linkcode.py
==================
38a1648;David Cournapeau;2013-02-16 14:46:39 +0000;DOC: update bento docs (close #2993).

==

BENTO_BUILD.txt
==================
eb5de87;Eric Moore;2013-02-15 15:01:55 -0500;BUG: use the PyUString_FromString macro for Py3 compat instead.

==

numpy/core/src/multiarray/methods.c
==================
bc60223;Eric Moore;2013-02-15 11:53:21 -0500;BUG: PyString_FromString isn't py3 compatible.
Use PyUnicode_FromString instead.

==

numpy/core/src/multiarray/methods.c
==================
914294a;Eric Moore;2013-02-15 09:52:16 -0500;FIX: use PyObject_CallMethodObjArgs in array_dot
and make added comments in test_multiarray.py helpful.

==

numpy/core/src/multiarray/methods.c
numpy/core/tests/test_multiarray.py
==================
1d04300;Eric Moore;2013-02-14 22:45:39 -0500;BUG: gh-2687 make multiarray dot method accept out array and keyword args.

==

numpy/core/src/multiarray/methods.c
numpy/core/tests/test_multiarray.py
==================
4bf5a3f;Charles Harris;2013-02-12 14:50:28 -0800;Merge pull request #2974 from seberg/issue-427
Fix some large array sorts and memory error handling
==
==================
b859dae;seberg;2013-02-12 13:48:32 -0800;Merge pull request #2979 from charris/fix-nansum
BUG: Make nansum work with booleans.
==
==================
8552cd5;Charles Harris;2013-02-12 08:10:14 -0700;BUG: Make nansum work with booleans.
This broke when function_base._nannop tried to fill a boolean array with
integer zeros, raising a 'safe_casting' error. It looks like nanargmax and
nanargmin would also break, and were probably incorrect for booleans in any
case. The fix is not to use fill values for boolean and integer dtypes.
Previously that was only done for the integer dtypes.

==

numpy/lib/function_base.py
numpy/lib/tests/test_regression.py
==================
1ee8887;njsmith;2013-02-10 13:47:58 -0800;Merge pull request #2975 from bfroehle/tp_alloc
ENH: Use tp_basicsize, not NPY_SIZEOF_PYARRAYOBJECT, for allocation
==
==================
3f6aaa3;njsmith;2013-02-10 13:37:26 -0800;Merge pull request #2976 from bfroehle/memory_waste
BUG: PyArray_LexSort allocates too much temporary memory.
==
==================
91376d7;Bradley M. Froehle;2013-02-10 11:13:49 -0800;BUG: PyArray_LexSort allocates too much temporary memory.
PyArray_LexSort was allocating memory to hold actual PyArrayObject's
and PyArrayIterObject's, but only storing pointers to such objects
in the array.

==

numpy/core/src/multiarray/item_selection.c
==================
9254542;Bradley M. Froehle;2013-02-10 10:46:33 -0800;ENH: Use tp_basicsize, not NPY_SIZEOF_PYARRAYOBJECT, for memory allocation.
This change allows C-API level subtypes of PyArray_Type without forcing the
developer to rewrite the tp_alloc function and only change the amount of
memory allocated.

==

numpy/core/src/multiarray/arrayobject.c
==================
2b76da3;Sebastian Berg;2013-02-10 01:18:50 +0100;BUG: Fix reporting of memory error inside sorting
PyDataMem_NEW was not checked for error and the occurance of
errors not returned correctly in new_sort. Also for PyArray_LexSort
and new_argsort it should now raise MemoryError correctly.
This is done by setting PyErr_NoMemory() when no error is already
present, as the low level sorting can only fail for this reason.

==

numpy/core/src/multiarray/item_selection.c
numpy/core/src/npysort/mergesort.c.src
==================
7ccf530;Sebastian Berg;2013-01-25 19:36:35 +0100;BUG: Fix dtypes in sorting functions to npy_intp
Some of the iteration variables were int, causing sorts to fail for large
arrays. Fixes github issue 427.

==

numpy/core/src/multiarray/item_selection.c
==================
625f3cd;Ondřej Čertík;2013-02-06 11:47:42 -0800;DOC: update 1.7.0-notes.rst from release branch
There were some changes in the release branch that were not put into master.
After this commit, the file 1.7.0-notes.rst is synchronised with the release
branch.

==

doc/release/1.7.0-notes.rst
==================
83e3963;Steve;2013-02-05 20:12:29 -0500;DOC: Add example showing how a view of a slice can misbehave

==

numpy/add_newdocs.py
==================
c714dad;Steve;2013-02-05 10:07:42 -0500;DOC -- add another paragraph note to ndarray.view docs (cont'd)
More detail: Views are only sensitive to under-the-hood storage when
the dtype storage size has changed.

==

numpy/add_newdocs.py
numpy/ma/core.py
==================
b3f37ed;Frank B;2013-02-05 13:21:32 +0100;Fixed two typos.

==

numpy/lib/twodim_base.py
==================
5b52514;Frank B;2013-02-05 13:13:36 +0100;Added example for 2D-histogram with variable bin size.

==

numpy/lib/twodim_base.py
==================
637dbd8;Steve;2013-02-04 22:13:34 -0500;DOC -- add another paragraph note to ndarray.view docs
Since most numpy operations are not sensitive to underlying data
structure (C-ordered arrays vs fortran-ordered arrays, versus slices or
transposes of arrays, etc.), but structured-array views ARE sensitive to
that, it is worth saying it explicitly in the documentation.

==

numpy/add_newdocs.py
numpy/ma/core.py
==================
0a87823;Charles Harris;2013-02-04 00:39:37 -0800;Merge pull request #2947 from charris/fix-complex-polynomial-fit
Fix complex polynomial fit
==
==================
45920aa;Charles Harris;2013-02-01 16:01:07 -0800;Merge pull request #2960 from esc/doc/fix/ctypeslib
DOC/FIX: fix example in ctypeslib module documentation
==
==================
9118887;Valentin Haenel;2013-02-01 23:55:32 +0100;DOC/FIX: fix example in ctypeslib module documentation
Fix some inconsistencies in the example. The library is loaded as '_lib' not
'lib' in the rest of the example. Also, the function is called 'foo_func' not
'foo'

==

numpy/ctypeslib.py
==================
49bf204;Sebastian Berg;2013-01-24 22:54:47 +0100;BUG: Fix strides of trailing 1s when reshaping
When adding ones to the shape for non contiguous arrays reshapes
(i.e. either the first array is not contiguous or the the reshape
order does not match it). The strides of trailing ones were not
set. For example reshape of (6,) to (6,1,1). Previously this occured
rarely because of removed special handleing when only ones were
added or removed.

==

numpy/core/src/multiarray/shape.c
numpy/core/tests/test_regression.py
==================
4600b2f;David Cournapeau;2013-01-21 19:41:06 +0000;DOC: mention the change of default for separate compilation.

==

doc/release/1.8.0-notes.rst
==================
08dfe2f;David Cournapeau;2013-01-21 19:37:50 +0000;FEAT: use separate build by default.

==

.travis.yml
numpy/core/bscript
numpy/core/setup.py
==================
63cf49d;David Cournapeau;2013-01-21 19:33:11 +0000;REF: make the separate compilation env handling a tad simpler.

==

numpy/core/bscript
numpy/core/setup.py
==================
7c1435c;Charles Harris;2013-01-24 09:13:40 -0700;MAINT: Use a better method to detect complex arrays.
Instead of

    if lhs.dtype.char in np.typecodes['Complex']:

use

    if issubclass(lhs.dtype.type, np.complexfloating):

==

numpy/polynomial/chebyshev.py
numpy/polynomial/hermite.py
numpy/polynomial/hermite_e.py
numpy/polynomial/laguerre.py
numpy/polynomial/legendre.py
numpy/polynomial/polynomial.py
==================
2b4c9a6;Travis E. Oliphant;2013-01-23 20:21:18 -0800;Merge pull request #2940 from ContinuumIO/ndindex_fix_more
BUG: Fix logic in ndindex to match __init__ method.   Fixes bug in ndindex((3,)) 
==
==================
ccbbfd5;Charles Harris;2013-01-23 20:07:49 -0700;TST: Add Test for column scaling in the polynomial package fits.
The test uses the complex set of sample points [1, 1j, -1, -1j] whose
squared sum is exactly zero. This would fail before the column scaling
was fixed.

==

numpy/polynomial/tests/test_chebyshev.py
numpy/polynomial/tests/test_hermite.py
numpy/polynomial/tests/test_hermite_e.py
numpy/polynomial/tests/test_laguerre.py
numpy/polynomial/tests/test_legendre.py
numpy/polynomial/tests/test_polynomial.py
==================
855b66f;Charles Harris;2013-01-23 20:04:05 -0700;BUG: gh-2790, fix column scaling in polynomial package least squares.
The columns should be scaled using their 2-norm, but in the complex case
that was being incorrectly computed as the square root of the sum of the
squared elements rather than as the square root of the  sum of their squared
real and imaginary parts.

==

numpy/polynomial/chebyshev.py
numpy/polynomial/hermite.py
numpy/polynomial/hermite_e.py
numpy/polynomial/laguerre.py
numpy/polynomial/legendre.py
numpy/polynomial/polynomial.py
==================
dce1018;seberg;2013-01-23 02:09:35 -0800;Merge pull request #2725 from seberg/take_0d
ENH: Allow 0-d indexes in np.take
==
==================
dde7ea5;Raul Cota;2013-01-22 15:10:16 -0700;Fix indentation

==

numpy/core/src/scalarmathmodule.c.src
==================
af4b113;Ralf Gommers;2013-01-22 22:16:37 +0100;BUG: npy-pkg-config ini files were missing after Bento build.

==

numpy/core/bscript
==================
cc70e5a;Raul Cota;2013-01-22 11:32:26 -0700;Avoid conversion to NumPy Scalar
After profiling I noticed that a bottleneck for NumPy scalar operations
occurs when trying to extract the underlying C value from a Python float
because it first converts the Python scalar into its matching NumPy
scalar (e.g. PyFloat -> float64) and then it extracts the C value from
the NumPy scalar.

For some types, it is a lot faster to just extract the value directly
from the Python scalar.

I only did for PyFloat in this modified code but the code is laid out
such that it can be easily extended to other types such as Integers. I
did not do them because I was unsure if there was a special scenario to
handle across OS and/or between 32 and 64 bit platforms. The ratio of
speed to do different operations are listed below (Old time / New time
with modifications). In other words, the bigger the number, the bigger
the speed up we get.

Tested in Python 2.6 Windows

RATIO  TEST
1.1  Array * Array
1.1  PyFloat * Array
1.1  Float64 * Array
1.0  PyFloat + Array
1.3  Float64 + Array
1.1  PyFloat * PyFloat
1.0  Float64 * Float64
4.0  PyFloat * Float64
2.9  PyFloat * vector1[1]
3.9  PyFloat + Float64
9.8  PyFloat < Float64
9.9  PyFloat < Float64
1.0  Create array from list
1.0  Assign PyFloat to all
1.0  Assign Float64 to all
4.2  Float64 * pyFloat * pyFloat * pyFloat * pyFloat
1.0  pyFloat * pyFloat * pyFloat * pyFloat * pyFloat
1.0  Float64 * Float64 * Float64 * Float64 * Float64
1.0  Float64 ** 2
1.0  pyFloat ** 2

==

numpy/core/src/scalarmathmodule.c.src
==================
4c489f6;Travis E. Oliphant;2013-01-21 20:50:15 -0600;TST: Add a test for ndindex call.

==

numpy/lib/tests/test_index_tricks.py
==================
ce5506f;Travis E. Oliphant;2013-01-21 20:40:59 -0600;Fix-up logic for checking for zero-d arrays.

==

numpy/lib/index_tricks.py
==================
963c4e4;David Cournapeau;2013-01-21 19:32:27 +0000;BUG: fix separate compilation mode for bento build.

==

numpy/core/bscript
==================
26b2fc6;David Cournapeau;2013-01-21 18:41:46 +0000;BUG: fix inclusion of private hader in #d2122ea1f458e9429b692111238f7b9f4a852db2

==

numpy/core/src/private/npy_config.h
==================
f2c81b4;ovillellas;2013-01-21 17:52:30 +0100;compile fix on linux/mac

==

numpy/core/src/umath/ufunc_object.c
==================
ce289ab;Charles Harris;2013-01-20 17:14:11 -0800;Merge pull request #2923 from baeuml/swig-fix-python3
fix numpy.i for python 3
==
==================
e548eed;Charles Harris;2013-01-20 17:04:31 -0800;Merge pull request #2936 from charris/fix-print-negative-float-zero
Fix print negative float zero
==
==================
d55b5aa;Charles Harris;2013-01-20 13:16:51 -0700;TST: Add test for printing of scalar values.

==

numpy/core/tests/test_scalarprint.py
==================
e5f4f82;Charles Harris;2013-01-20 13:06:55 -0700;BUG: gh-2935, fix printing of scalar float -0.0.
The issue was that the string value of scalar floating types equal to -0.0
lacked a trailing ".0".

    >>> print np.float64(-0.0)
    -0

The problem resulted from using val < 0 to check for a leading negative
sign. That expression evaluates false when val = -0.0, and the need to
append ".0" was not detected.

==

numpy/core/src/multiarray/scalartypes.c.src
==================
56b06fe;Charles Harris;2013-01-19 16:54:26 -0800;Merge pull request #2933 from seberg/result_type-segfault
BUG: Fix segfault in np.result_type for None input.
==
==================
51495ff;Sebastian Berg;2013-01-19 23:33:16 +0100;BUG: Fix segfault in np.result_type for None input.
Makes behavior identical to np.dtype(None), which fits to how
the function works.

==

numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_numeric.py
==================
ee5fd94;njsmith;2013-01-18 10:08:35 -0800;Merge pull request #2928 from mwiebe/string_init_memleak
BUG: Fix memory leak in ndarray construction from strings (gh-2927)
==
==================
cac3de5;Mark Wiebe;2013-01-07 15:20:04 -0800;BUG: Fix for generalized ufunc zero-sized input case

==

numpy/core/src/umath/ufunc_object.c
==================
fa9dbef;Mark Wiebe;2013-01-07 11:17:18 -0800;TST: Test for a generalized ufunc bug, for zero-sized inputs

==

numpy/core/tests/test_ufunc.py
==================
12be5b7;Mark Wiebe;2012-11-07 12:42:16 -0800;BUG: Fix bug in gufunc scalar case

==

numpy/core/src/umath/ufunc_object.c
==================
b5c7733;Mark Wiebe;2012-11-07 11:41:29 -0800;TST: Add test for gufunc scalar case

==

numpy/core/tests/test_ufunc.py
==================
9a70cfd;Mark Wiebe;2012-10-24 09:59:12 -0700;BUG: Make sure the nditer doesn't complain when 0 broadcast dims

==

numpy/core/src/umath/ufunc_object.c
==================
be911e8;Mark Wiebe;2012-10-18 23:46:59 -0700;BUG: Missed case of broadcasting onto core dimensions in gufunc

==

numpy/core/src/umath/ufunc_object.c
==================
1613e09;Mark Wiebe;2012-10-18 23:10:56 -0700;BUG: Fix generalized ufunc so repeating labels in one input/output is ok

==

numpy/core/src/umath/ufunc_object.c
==================
1539b71;Mark Wiebe;2013-01-17 10:49:33 -0800;BUG: Fix memory leak in ndarray construction from strings (gh-2927)

==

numpy/core/src/multiarray/common.c
==================
18bcac0;Martin Baeuml;2013-01-16 21:57:50 +0100;fix numpy.i for python 3
PyFile_Check and PyInstance_Check have been removed from the C API
for python 3.  This removes calls to those two functions from
numpy.i for PY_MAJOR_VERSION >= 3 so that it builds with a
python 3 Python.h.

==

doc/swig/numpy.i
==================
27690e3;Charles Harris;2013-01-15 15:30:56 -0800;Merge pull request #2914 from charris/remove-scons-support
Remove scons support
==
==================
ee6c66a;njsmith;2013-01-15 13:19:31 -0800;Merge pull request #2897 from ContinuumIO/ndindex_fix
Fix for #2895 ndindex failing
==
==================
3af34a4;Charles Harris;2013-01-14 20:55:56 -0700;DEP: Remove more references to scons related files.
These references were in MANIFEST.in, doc/summarize.py, release.sh, and
numpy/testing/noseclasses.py and involved scons files that have been
removed, mostly setupscons.py and setupsconsegg.py that were in the top
level.

==

MANIFEST.in
doc/summarize.py
numpy/testing/noseclasses.py
release.sh
==================
eb109d2;njsmith;2013-01-13 16:09:51 -0800;Merge pull request #2907 from seberg/nonarray-assignment-master
Nonarray assignment regression for boolean indexing and 1d unsafe casting
==
==================
8f37ecc;Charles Harris;2013-01-13 14:24:26 -0700;BUG: Need to keep pointer to using scons in HOWTO_RELEASE.rst.txt.

==

doc/HOWTO_RELEASE.rst.txt
==================
7c286a4;Charles Harris;2013-01-13 13:57:48 -0700;BUG: Need to keep SCons support in cpucaps and cpuid.
These tools are not directly related to numpy builds.

==

tools/win32build/cpucaps/SConstruct
tools/win32build/cpuid/SConstruct
==================
89c7d59;Charles Harris;2013-01-13 11:00:57 -0700;DOC: Document removal of SCons support in doc/release/1.8-notes.rst.

==

doc/release/1.8.0-notes.rst
==================
df259db;Charles Harris;2013-01-13 10:04:44 -0700;DEP: Remove scons related files and code.
This removes files and code supporting scons builds. After this change
numpy will only support builds using distutils or bento. The removal of
scons has been discussed on the list several times and a decision has been
made that scons support is no longer needed. This was originally discussed
for numpy 1.7 and because the distutils and bento methods are still
available we are skipping the usual deprecation period.

==

doc/HOWTO_RELEASE.rst.txt
numpy/compat/setupscons.py
numpy/core/SConscript
numpy/core/SConstruct
numpy/core/scons_support.py
numpy/core/setup_common.py
numpy/core/setupscons.py
numpy/distutils/command/build_ext.py
numpy/distutils/command/scons.py
numpy/distutils/core.py
numpy/distutils/misc_util.py
numpy/distutils/setupscons.py
numpy/f2py/setupscons.py
numpy/fft/SConscript
numpy/fft/SConstruct
numpy/fft/setupscons.py
numpy/lib/SConscript
numpy/lib/SConstruct
numpy/lib/setupscons.py
numpy/linalg/SConscript
numpy/linalg/SConstruct
numpy/linalg/setupscons.py
numpy/ma/setupscons.py
numpy/matrixlib/setupscons.py
numpy/numarray/SConscript
numpy/numarray/SConstruct
numpy/numarray/setupscons.py
numpy/oldnumeric/setupscons.py
numpy/random/SConscript
numpy/random/SConstruct
numpy/random/setupscons.py
numpy/setupscons.py
numpy/testing/setupscons.py
setupscons.py
setupsconsegg.py
tools/win32build/cpucaps/SConstruct
tools/win32build/cpuid/SConstruct
==================
23e9f01;Charles Harris;2013-01-12 18:57:04 -0800;Merge pull request #2909 from argriffing/patch-2
remove a confusing docstring line
==
==================
24615f4;Sebastian Berg;2013-01-13 01:20:39 +0100;BUG: Make 1d fancy indexing special case use unsafe_casting
Also make sure right hand side is converted safely to the right
type if it is not an array though.

==

numpy/core/src/multiarray/iterators.c
numpy/core/tests/test_regression.py
==================
8362e08;Sebastian Berg;2013-01-13 01:19:13 +0100;BUG: Convert non-array rhs for boolean assignment with correct dtype
Enforcing the left hand side datatype for a non-array right hand side
argument in index assignments was the behavior before 1.7. and is the
general behaviour here. (note this means a non-array right hand side
checks for NaN, etc. if the left hand side is integer, but an array
right hand side does not)

==

numpy/core/src/multiarray/mapping.c
numpy/core/tests/test_regression.py
==================
109f426;njsmith;2013-01-12 12:07:08 -0800;Merge pull request #2910 from rutsky/doctest_svd_typo
Fix typo in SVD usage example
==
==================
75bef12;Vladimir Rutsky;2013-01-12 23:06:24 +0400;Fix typo in SVD usage example

==

numpy/linalg/linalg.py
==================
a66b412;Charles Harris;2013-01-11 17:36:52 -0800;Merge pull request #2908 from argriffing/patch-1
Update numpy/core/code_generators/ufunc_docstrings.py
==
==================
d4286f8;argriffing;2013-01-11 20:02:19 -0500;remove a confusing docstring line
ones_like:

"With default parameters, is equivalent to a.copy().fill(1)."

This is not technically true, because 'fill' returns None.

==

numpy/core/numeric.py
==================
c1059f2;argriffing;2013-01-11 18:59:15 -0500;Update numpy/core/code_generators/ufunc_docstrings.py

==

numpy/core/code_generators/ufunc_docstrings.py
==================
d1a055b;Travis E. Oliphant;2013-01-11 01:10:26 -0600;Fix 0-d ndincr to have correct return value.

==

numpy/lib/index_tricks.py
==================
aef2cf7;Travis E. Oliphant;2013-01-10 00:26:34 -0600;Fix the test for numpy.ndindex() Fix ndindex for 0-d arrays. Add tests for tuple arguments to ndindex

==

numpy/lib/index_tricks.py
numpy/lib/tests/test_index_tricks.py
==================
853eae4;Travis E. Oliphant;2013-01-10 18:13:45 -0600;Use super instead of direct access to inheritance.

==

numpy/lib/index_tricks.py
==================
00a8c0c;njsmith;2013-01-10 14:28:02 -0800;Merge pull request #2901 from hrw/master
Add support for AArch64 architecture
==
==================
ae0a504;Travis E. Oliphant;2013-01-10 15:09:45 -0600;Fix the 0-d patch so it doesn't change the non 0-d iterator

==

numpy/lib/index_tricks.py
==================
7d7a593;Marcin Juszkiewicz;2013-01-10 21:49:01 +0100;Added support for AArch64 architecture
Signed-off-by: Marcin Juszkiewicz <marcin.juszkiewicz@linaro.org>

==

numpy/core/include/numpy/npy_cpu.h
numpy/core/include/numpy/npy_endian.h
==================
6d980e7;Travis E. Oliphant;2013-01-10 12:07:06 -0600;Fix ndindex for 0-d arrays.

==

numpy/lib/index_tricks.py
==================
dd146b6;Travis E. Oliphant;2013-01-10 00:26:34 -0600;Fix the test for numpy.ndindex()

==

numpy/lib/tests/test_index_tricks.py
==================
4716137;Jay Bourque;2013-01-09 12:59:56 -0600;Add test for __array_interface__

==

numpy/core/tests/test_multiarray.py
==================
ffb8c41;Jay Bourque;2013-01-09 09:29:54 -0600;Add test for optional size argument for ndindex

==

numpy/lib/tests/test_index_tricks.py
==================
fda92e2;Jay Bourque;2013-01-08 18:12:58 -0600;Fix ndindex issue
Call to ndindex() with no arguments results in a ValueError exception, whereas before commit ca27396b, a call with no arguments was allowed.
Issue is due to unneeded check for shape tuple size.

==

numpy/core/src/multiarray/ctors.c
==================
849a8c5;Charles Harris;2013-01-06 14:50:07 -0800;Merge pull request #2838 from charris/test-numpy-constants
TST: Add tests for constants.
==
==================
cde76b4;Sebastian Berg;2012-11-13 00:20:24 +0100;ENH: Allow 0-d indexes in np.take
The TakeFrom already supported this. This removes the check which
made it not possible and adds some tests for take.

Also add documentation and information to the release notes.

==

doc/release/1.8.0-notes.rst
numpy/core/fromnumeric.py
numpy/core/src/multiarray/item_selection.c
numpy/core/tests/test_item_selection.py
==================
161bfe7;seberg;2013-01-06 02:40:54 -0800;Merge pull request #2882 from seberg/issue2503
BUG: Fix CheckStrides and strides setter checks for available memory
==
==================
22ad3ac;njsmith;2013-01-05 17:13:06 -0800;Merge pull request #2888 from charris/fix-headers
Fix headers
==
==================
fbda719;Charles Harris;2013-01-05 18:01:03 -0700;MAINT: Remove newly defined non-prefixed macros from noprefix.h.
There was a chance that they could conflict with user defined macros.

==

numpy/core/include/numpy/noprefix.h
==================
1981d06;Sebastian Berg;2013-01-04 23:13:30 +0100;MAINT: Minor cleanup
Adding const and removing old comment.

==

numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/getset.c
==================
ce8ece2;njsmith;2013-01-05 14:59:50 -0800;Merge pull request #2887 from charris/fix-unprefixed-sizeof-macros
BUG: Replace unprefixed SIZEOF_* macros with prefixed versions.
==
==================
1d6f543;Charles Harris;2013-01-05 15:15:44 -0700;BUG: Replace unprefixed SIZEOF_* macros with prefixed versions.
The sources don't define NPY_NO_PREFIX and consequently none of the
unprefixed macros are defined. Using them can lead to some unexpected
results.

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/conversion_utils.c
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/mapping.h
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/npymath/_signbit.c
numpy/core/src/scalarmathmodule.c.src
==================
d2122ea;Charles Harris;2013-01-05 15:01:45 -0700;BUG: Fixup use of undefined macros and remove redundant code.
The npy_config.h file used SIZEOF_DOUBLE and SIZEOF_LONG_DOUBLE, neither
of which was defined in the included config.h file. That was fixed by
including numpyconfig.h. Doing so made the code dealing with Apple type
sizes redundant as it is already present in numpyconfig.h, so it was
removed.

==

numpy/core/src/private/npy_config.h
==================
e6d6042;Charles Harris;2013-01-05 14:57:30 -0700;MAINT: Remove tabs from numpyconfig.h.

==

numpy/core/include/numpy/numpyconfig.h
==================
d0a54c4;Charles Harris;2013-01-05 14:54:15 -0700;MAINT: Gather NPY_SIZEOF* macros into one spot.

==

numpy/core/include/numpy/npy_common.h
==================
229979b;Charles Harris;2013-01-05 14:50:46 -0700;MAINT: Add some macros to noprefix.h
Some of these are probably new unprefixed macros, but adding them
makes for a bit more safety. The unprefixed macros will be deprecated
at some point, so this probably has no side effects.

==

numpy/core/include/numpy/noprefix.h
==================
cba2994;Charles Harris;2013-01-05 14:43:36 -0700;MAINT: Remove unneeded include from ndarraytypes.h.

==

numpy/core/include/numpy/ndarraytypes.h
==================
699c697;Charles Harris;2013-01-05 14:42:12 -0700;MAINT: Remove unneeded comment form arrayobject.h

==

numpy/core/include/numpy/arrayobject.h
==================
05dde0f;Charles Harris;2013-01-05 07:30:20 -0800;Merge pull request #2886 from seberg/complex256-byteswap
BUG: Fix byteswapping for complex scalars
==
==================
d2ca917;Sebastian Berg;2013-01-05 11:50:50 +0100;BUG: Fix byteswapping for complex scalars
During a cleanup, the fast paths were invalidated because SIZEOF_LONGDOUBLE
was not defined anymore and needs to be replaced with NPY_SIZEOF_LONGDOUBLE.
The other SIZEOF macros still existed however so only complex long double
broke because it switched to the already broken fast path.

This commit fixes the fast path, and replaces all SIZEOF_ macros within
arraytypes.c.src with their corresponding NPY_SIZEOF_ macros.

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/tests/test_regression.py
==================
5701c87;njsmith;2013-01-04 05:18:59 -0800;Merge pull request #2884 from Juanlu001/patch-1
Fixed choice docstring, wrong default size
==
==================
1899991;Juan Luis Cano Rodríguez;2013-01-04 12:31:51 +0100;Fixed choice docstring, wrong default size
Commit acf7421128b9d974d5153759650b7aaee3c2efec introduced a change in the handling of the `size` argument but the docstring wasn't updated accordingly. This commit fixes the issue.
==

numpy/random/mtrand/mtrand.pyx
==================
0aaf70b;Sebastian Berg;2013-01-03 23:49:55 +0100;MAINT: Move offset calculations into special function
Also adds a test to check offset calculation is correct when
setting strides for a base array with negative strides.

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/getset.c
numpy/core/tests/test_multiarray.py
==================
cce1c45;njsmith;2013-01-03 11:14:06 -0800;Merge pull request #2879 from rgommers/issue-413-arm-failures
Fix ARM failures (gh-413)
==
==================
2be873f;Sebastian Berg;2013-01-03 16:42:48 +0100;BUG: Fix CheckStrides and strides setter checks for available memory
This changes the logic of PyArray_CheckStrides to really check the
full extent the new array will have. It also changes the stride
setting to calculate the full real extent of the underlying array
without assuming (usually correctly) that the strides of the base
array are regular.

Add some tests for cases that previously failed.
This "closes Issue gh-2503"

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/getset.c
numpy/core/tests/test_multiarray.py
==================
8c05bdb;Ralf Gommers;2013-01-03 16:48:55 +0100;TST: remove Python 2.4 and 2.5 testing from Travis config.
Done because for 1.8 we're not supporting these Python versions anymore,
and this PR break 2.4 compatibility.

==

.travis-make-py24-virtualenv.sh
.travis.yml
==================
bcbfea4;Ralf Gommers;2013-01-02 20:41:00 +0100;MAINT: remove painful to look at exec statement from np.errstate test.

==

numpy/core/tests/test_errstate.py
==================
9ff6aed;Ralf Gommers;2013-01-02 20:36:31 +0100;TST: skip floating point warning test failures on ARM.  Closes gh-413.

==

numpy/core/tests/test_errstate.py
numpy/core/tests/test_half.py
numpy/core/tests/test_numeric.py
numpy/core/tests/test_umath_complex.py
==================
c745862;njsmith;2012-12-31 14:32:44 -0800;Merge pull request #2874 from certik/fixdoc
DOC: Add missing minus sign
==
==================
9e7f462;Ondřej Čertík;2012-12-31 13:35:05 -0800;DOC: Add missing minus sign
The int64 data type allows numbers from -9223372036854775808 to
9223372036854775807. The minus sign was missing.

==

numpy/doc/basics.py
==================
a457fd2;Ralf Gommers;2012-12-31 08:56:04 -0800;Merge pull request #2873 from sandrotosi/master-numpy.org
DOC: fix array interface documentation links
==
==================
e615890;Sandro Tosi;2012-12-30 20:38:53 +0100;fix array interface documentation links

==

doc/numpybook/numpybook.lyx
numpy/core/include/numpy/ndarraytypes.h
==================
c56826b;Ralf Gommers;2012-12-30 08:31:29 -0800;Merge pull request #2872 from sandrotosi/master-numpy.org
DOC: point links to www.numpy.org
==
==================
864353e;Sandro Tosi;2012-12-30 12:12:18 +0100;move to www.numpy.org

==

bento.info
doc/source/dev/gitwash/git_links.inc
doc/source/dev/gitwash_links.txt
setup.py
==================
4a3c347;Charles Harris;2012-12-28 12:05:15 -0800;Merge pull request #2863 from njsmith/remove-weird-type-check
FIX: remove a spurious check in get_cast_transfer_function
==
==================
6b788c8;Ondřej Čertík;2012-12-28 11:40:59 -0800;Merge pull request #2864 from certik/addpy3.3
BLD: Add support for Python 3.3 in paver
==
==================
e924692;Ondřej Čertík;2012-12-28 11:20:19 -0800;BLD: Add support for Python 3.3 in paver

==

pavement.py
==================
678ad43;Nathaniel J. Smith;2012-12-28 13:00:06 +0000;FIX: remove a spurious check in get_cast_transfer_function
At least, I hope it's spurious. Certainly it's creating a spurious
error message, is unexpected by callers (one of whom specifically
makes the *opposite* check before calling get_cast_transfer_function),
and even if it is a useful check for some reason I can't see, it
certainly doesn't belong in this function (which is otherwise just
taking care of byte-swapping and alignment issues and doesn't know
anything about dtypes). And worst case, we'll have turned an exception
into a crash; even if I'm wrong, this shouldn't cause any code to go
from working to not working, just from broken to slightly-more-broken.

Test and original diagnosis by @cgohlke.

Fixes gh-2798.

==

numpy/core/src/multiarray/dtype_transfer.c
numpy/core/tests/test_dtype.py
==================
ec8236e;Charles Harris;2012-12-27 15:57:39 -0800;Merge pull request #2858 from certik/document_datetime
DOC: Thoroughly document datetime issues
==
==================
8a99edc;Ondřej Čertík;2012-12-27 15:27:41 -0800;DOC: Add a blank line to multiline comments
Multiline comments should begin with a blank line. This patch fixes it.

==

numpy/core/src/multiarray/datetime_strings.c
==================
a8c641f;Ondřej Čertík;2012-12-27 09:45:26 -0800;DOC: document the change in .base
Forwardport gh-2737.

==

doc/release/1.7.0-notes.rst
==================
75bb79c;Ondřej Čertík;2012-12-27 09:13:26 -0800;DOC: Thoroughly document datetime issues
After understanding the issues with datetime (see gh-568), I have documented my
understanding as comments in the code, so that the next time there are problems
with datetime on some platform, one can quickly figure out what is going on
from the code + comments.

==

numpy/core/src/multiarray/datetime_strings.c
==================
7a0c495;Charles Harris;2012-12-26 22:46:19 -0800;Merge pull request #2856 from certik/fix568
FIX: Use the NPY_TIME_T macro everywhere
==
==================
15022cb;Ondřej Čertík;2012-12-26 20:35:16 -0800;FIX: Use the NPY_TIME_T macro everywhere
Previously, two (critical) parts of the code used `time_t` instead of
`NPY_TIME_T`. Due to the fact, that most of the time `NPY_TIME_T` was equal to
`time_t`, this bug didn't show up. But in mingw, `NPY_TIME_T` is actually equal
to `__time64_t` and then this causes 64 bit integers to be cast into 32 bit
integers (thus becoming negative), which causes localtime() to fail in mingw.

Fixes gh-568.

==

numpy/core/src/multiarray/datetime_strings.c
==================
db671db;njsmith;2012-12-26 09:57:10 -0800;Merge pull request #2850 from certik/travis_fix
TST: Replace Python 3.1 test with 3.3.
==
==================
8093d5a;Ondřej Čertík;2012-12-26 09:32:17 -0800;Merge pull request #2853 from certik/forwardport2797
Forwardports #2797
==
==================
1f1537e;Jay Bourque;2012-12-21 14:29:52 -0600;Add fix to unit test; remove debug logging
Add check to see if 12 bytes is a valid size for a long double

==

numpy/core/src/multiarray/conversion_utils.c
numpy/core/tests/test_dtype.py
==================
0f5afde;Jay Bourque;2012-12-21 13:39:19 -0600;Add debug logging to figure out why unit test fails on Travis

==

numpy/core/src/multiarray/conversion_utils.c
==================
83de7cd;Jay Bourque;2012-12-17 11:42:36 -0600;Refactor unit tests and add DECREF
- Refactor unit tests for invalid dtypes so that each test is on a separate line. This will make it easier to figure out which typestring is failing the unit test.
- Add Py_DECREF for temp variable

==

numpy/core/src/multiarray/conversion_utils.c
numpy/core/tests/test_dtype.py
==================
18e73ab;Jay Bourque;2012-12-14 14:09:29 -0600;Modify unit tests for 32 bit support

==

numpy/core/tests/test_dtype.py
==================
4237c6e;Jay Bourque;2012-12-11 13:54:56 -0600;Refactor to cover more cases; modify unit tests

==

numpy/core/src/multiarray/conversion_utils.c
numpy/core/tests/test_datetime.py
numpy/core/tests/test_dtype.py
==================
86dbd45;Jay Bourque;2012-12-07 11:12:38 -0600;Fix invalid typestring size
Revert to pre numpy 1.7 behavior where invalid typestring size was ignored and isplay deprecate warning. This warning should eventually be changed to an error in future numpy versions.

==

numpy/core/src/multiarray/conversion_utils.c
==================
9fba6c5;Ralf Gommers;2012-12-26 05:47:55 -0800;Merge pull request #2852 from matthew-brett/add-mailmap
ENH - .mailmap file to harmonize git shortlog
==
==================
8ea667d;Matthew Brett;2012-12-24 08:39:42 +0000;ENH - .mailmap file to harmonize git shortlog
Reduce duplicates in git shortlog

==

.mailmap
==================
3abd869;njsmith;2012-12-21 05:01:47 -0800;Merge pull request #2800 from seberg/issue2755
BUG: Fix regression for in1d with non-array input
==
==================
834d32b;Ondřej Čertík;2012-12-20 17:13:35 -0800;TST: Replace Python 3.1 test with 3.3.
Travis does not support 3.1 anymore, but supports 3.3. See:

https://groups.google.com/d/topic/travis-ci/02iRu6kmwY8/discussion

==

.travis.yml
==================
c932553;njsmith;2012-12-19 10:14:46 -0800;Merge pull request #2710 from jsalvatier/mapapi3
MapIter API 1d iteration fix and tests
==
==================
9d44aaa;Ralf Gommers;2012-12-17 11:36:32 -0800;Merge pull request #2836 from cgohlke/patch-2
Fix unicode tests for flexible string representation on Python 3.3
==
==================
ec11084;Charles Harris;2012-12-17 06:16:05 -0800;Merge pull request #2818 from juliantaylor/spelling
fix a spelling error
==
==================
7bc44a2;Charles Harris;2012-12-16 19:38:21 -0800;Merge pull request #2833 from charris/fix-deprecation-tests
MAINT: Refactor test_deprecations.py
==
==================
b0695a8;Ralf Gommers;2012-12-16 12:30:24 -0800;Merge pull request #2835 from charris/update-1.8.0-notes
MAINT: Cleanup 1.8.0-notes.rst.
==
==================
db52df0;Ondřej Čertík;2012-12-16 12:09:19 -0800;Merge pull request #2834 from charris/cleanup-1.7.0-notes
MAINT: Update and cleanup 1.7.0-notes.rst.
==
==================
36ea647;Charles Harris;2012-12-16 12:51:05 -0700;TST: Add tests for constants.
Test the values of np.pi, np.e, and np.euler_gamma to make sure
they are correct to relative tolerance 1e-15.

==

numpy/core/tests/test_umath.py
==================
2d2ae9c;cgohlke;2012-12-16 11:39:09 -0800;Fix unicode tests for flexible string representation on Python 3.3

==

numpy/core/tests/test_unicode.py
==================
f7555b9;Charles Harris;2012-12-16 11:13:50 -0800;Merge pull request #2779 from charris/add-euler
Expose the Euler-Mascheroni constant
==
==================
5cd7e76;Charles Harris;2012-12-16 11:55:28 -0700;DOC: Note that Euler's constant is exposed in numpy 1.8.0.

==

doc/release/1.8.0-notes.rst
==================
e610b2b;Charles Harris;2012-12-16 11:46:21 -0700;MAINT: Cleanup 1.8.0-notes.rst.
Remove contents of 1.7.0-notes that were left when it was copied,
note that support for Python 2.4 - 2.5 has been dropped, and note
deprecation of non-integer indices.

==

doc/release/1.8.0-notes.rst
==================
7f1f57d;Charles Harris;2012-12-16 11:11:36 -0700;MAINT: Update and cleanup 1.7.0-notes.rst.
The master branch version had diverged from the release branch.  This
brings them back into sync, adds a mention that Python 2.4 - 2.5 support
has been dropped, corrects spelling errors, does some reformatting, and
removes trailing whitespace.

==

doc/release/1.7.0-notes.rst
==================
b2ffc82;Charles Harris;2012-12-16 10:17:05 -0700;MAINT: test_deprecations.py cleanups.
Removed unneeded imports, corrected spelling, and put C function
references in double back-ticks.

==

numpy/core/tests/test_deprecations.py
==================
b0ac985;Sebastian Berg;2012-12-16 05:50:43 +0100;TST: Add test for in1d ravelling
The behavior of in1d is not really defined here, but it should
be at least consistent over different execution branches. This is
what it has been for most usages.

==

numpy/lib/tests/test_arraysetops.py
==================
6d7bcd9;Charles Harris;2012-12-15 18:10:28 -0700;MAINT: Refactor test_deprecations.py
Remove an unwanted print statement and make the verbose test output
more readable.

==

numpy/core/tests/test_deprecations.py
==================
afde23f;Travis E. Oliphant;2012-12-15 19:30:08 -0800;Merge pull request #2831 from certik/fix2738
FIX: Fixes the segfault in PyArray_FromScalar
==
==================
3c23c9f;Ondřej Čertík;2012-12-15 15:18:47 -0800;FIX: Fixes the segfault in PyArray_FromScalar
The problem was that PyArray_NewFromDescr() steals a reference to typecode and
so any further usage of it is undefined. Apparently this bug only appeared in
debug version of Python 3.2. The fix is to simply INCREF typecode and then
carefully DECREF it at each possible exit from the function.

Fixes gh-2738.

==

numpy/core/src/multiarray/scalarapi.c
==================
5f04dc8;njsmith;2012-12-15 04:28:50 -0800;Merge pull request #2823 from seberg/random-choice-state
BUG: internal call fix in random.choice
==
==================
7706227;Charles Harris;2012-12-14 18:15:49 -0800;Merge pull request #2812 from dwf/deprecate_scalar_float
Deprecate non-integer scalar indices and slice parameters
==
==================
bb0952d;David Warde-Farley;2012-12-14 21:08:03 -0500;DOC: Comments about deprecation timeframe.

==

numpy/core/tests/test_deprecations.py
==================
83d890e;Sebastian Berg;2012-12-15 00:31:14 +0100;BUG: internal call fix in random.choice
An random.random call from within mtrand was done by a call to
np.random.random instead of inside the class. This can possibly lead
to non-deterministic results after seeding.

==

numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
numpy/random/tests/test_regression.py
==================
45a7a06;Julian Taylor;2012-12-14 14:30:05 +0100;fix a spelling error

==

numpy/random/mtrand/mtrand.pyx
==================
8ff916a;David Warde-Farley;2012-12-14 05:09:46 -0500;DOC: Deprecation info for float-slicing.

==

numpy/core/tests/test_deprecations.py
==================
1515155;David Warde-Farley;2012-12-14 04:53:56 -0500;ENH: DeprecationWarning for non-int slice indices.

==

numpy/core/src/multiarray/iterators.c
==================
5de9999;David Warde-Farley;2012-12-14 04:52:13 -0500;TST: Add tests for non-int slice deprecation.

==

numpy/core/tests/test_deprecations.py
==================
3a0b66e;David Warde-Farley;2012-12-14 00:40:07 -0500;TST: disable DeprecationWarning tests in 2.4
These DeprecationWarnings use a Python 2.5+ feature (PyIndex_Check) and
don't fire for 2.4 (support for which will be dropped shortly anyway).

==

numpy/core/tests/test_deprecations.py
==================
5acc7df;David Warde-Farley;2012-12-14 00:27:45 -0500;REF: nested conditionals for readability.

==

numpy/core/src/multiarray/mapping.c
==================
4f7d3ff;Ondřej Čertík;2012-12-13 20:11:14 -0800;Merge pull request #2794 from mwiebe/complex_copy_misalignment
BUG: Attempt to fix sparc segfault (gh-2668)
==
==================
5db0088;Ondřej Čertík;2012-12-13 16:32:06 -0800;Merge pull request #2792 from certik/multi_arch
Add multiarch paths to the distutils' ones
==
==================
aa8c948;Ondřej Čertík;2012-12-06 14:06:58 -0800;FIX: Add multiarch paths to the distutils' ones
Thanks to Julian Taylor and Sandro Tosi from Debian for the original patch.
Ralf has posted a link to the patch here:

http://article.gmane.org/gmane.comp.python.numeric.general/51454

I have modified the patch to remove the bare except command only catch the
OSError. Also I suppress the stderr.

==

numpy/distutils/system_info.py
==================
2ca3a24;David Warde-Farley;2012-12-13 18:54:59 -0500;ENH: Add NPY_INLINE to _is_full_index.

==

numpy/core/src/multiarray/mapping.c
==================
484f876;David Warde-Farley;2012-12-13 18:48:18 -0500;REF: move tuple checks into function.

==

numpy/core/src/multiarray/mapping.c
==================
9c87855;David Warde-Farley;2012-12-13 18:37:12 -0500;STY: comment blank line/*'s.

==

numpy/core/src/multiarray/mapping.c
==================
ac749af;David Warde-Farley;2012-12-13 18:18:38 -0500;Fix typo in module-level comment.

==

numpy/core/tests/test_deprecations.py
==================
783130c;David Warde-Farley;2012-12-13 17:40:00 -0500;BUG: Bubble errors from _tuple_of_integers.
Refactors _tuple_of_integers a little bit in order to propagate error
state. Zero indicates failure of the test (given tuple is not a tuple of
integers), whereas non-zero indicates either success (positive) or
an exception during the warning (negative). This allows us to use
(ret = _tuple_of_integers(...)) as an if condition, and then put the
error handling inside the if body.

==

numpy/core/src/multiarray/mapping.c
==================
e5fce78;David Warde-Farley;2012-12-13 17:39:05 -0500;BUG: Explicitly bubble errors up, simple case.

==

numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/mapping.c
==================
0aa1a4b;David Warde-Farley;2012-12-13 17:38:10 -0500;TST: Add back failing tests + negative index.

==

numpy/core/tests/test_deprecations.py
==================
cdeb48b;Ondřej Čertík;2012-12-13 14:20:05 -0800;Merge pull request #2793 from certik/pull-request-2727
This is PR #2727, but rebased
==
==================
830126c;David Warde-Farley;2012-12-13 03:44:23 -0500;TST: Add tests for deprecation warnings.

==

numpy/core/tests/test_deprecations.py
==================
f354ade;David Warde-Farley;2012-12-13 00:05:39 -0500;STY: C code style.

==

numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/mapping.c
==================
5b1d7d6;David Warde-Farley;2012-12-12 20:39:11 -0500;DOC: Clarify a C code comment.

==

numpy/core/src/multiarray/mapping.c
==================
48a06cf;David Warde-Farley;2012-12-12 20:38:29 -0500;ENH: warning on silent truncation of indices

==

numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/private/npy_pycompat.h
==================
c95da7d;Mark Wiebe;2012-12-09 13:26:47 -0800;TST: Add a test for bug gh-2668
This is the test attached to the bug from Matthew Brett.
I tried to make a simpler test, but it didn't repro
the problem.

==

numpy/core/tests/test_regression.py
==================
35dc14b;Travis E. Oliphant;2012-12-11 11:16:49 -0800;Merge pull request #2772 from ContinuumIO/field_names
BUG: Fix bad call of internal function and fix usage of PyField_Names
==
==================
9c5a922;Ralf Gommers;2012-12-08 13:23:13 -0800;Merge pull request #2795 from d5h/issue_2551
Fix distutils build_src with 'c++' in swig_opts and a c++ comment in the...
==
==================
686bcfd;njsmith;2012-12-08 11:57:25 -0800;Merge pull request #2747 from mdboom/fix-masked-recarrays-with-objects
cannot access masked array rows with np.object dtype (Fixes #2432)
==
==================
6d3950c;Sebastian Berg;2012-12-08 14:07:46 +0100;BUG: Fix regression for in1d with non-array input
There was a regression introduced by the speed improvement in
commit 6441c2a. This fixes it, and generally ravels the arrays for
np.in1d. However it can be argued that at least the first array should
not be ravelled in the future.

Fixes "Issue gh-2755"

==

numpy/lib/arraysetops.py
numpy/lib/tests/test_arraysetops.py
==================
b7b54cd;Ralf Gommers;2012-12-08 03:21:46 -0800;Merge pull request #2791 from juliantaylor/ma-python
add platform specific python include directories to search paths
==
==================
761ba5d;Dan Hipschman;2012-12-06 21:01:43 -0800;Fix distutils build_src with 'c++' in swig_opts and a c++ comment in the .i file (issue #2551)

==

numpy/distutils/command/build_src.py
==================
e0dd41c;Mark Wiebe;2012-12-06 15:02:37 -0800;BUG: Attempt to fix sparc segfault (gh-2668)

==

numpy/core/src/multiarray/dtype_transfer.c
==================
c97f405;Mark Wiebe;2012-12-06 15:20:12 -0800;BLD: MSVC build fix for switch of PyArray_DATA to void*
Build errors because void* doesn't have a size, so
adding an offset to it is disallowed.

==

numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarray_tests.c.src
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/shape.c
==================
24a1bcd;Sebastian Berg;2012-11-17 12:35:30 +0100;MAINT: Regenerate mtrand.c

==

numpy/random/mtrand/mtrand.c
==================
7f9d7bc;Sebastian Berg;2012-11-13 17:48:55 +0100;TST: Add tests for new feature and fix in random.choice

==

numpy/random/tests/test_random.py
==================
3e5b9b2;Sebastian Berg;2012-11-13 17:46:54 +0100;BUG: Fix various problems in the previous commits.
Thanks to @alan-isaac for pointing out the 0-d vs. scalar issue.

==

numpy/random/mtrand/mtrand.pyx
==================
7b10fc9;Sebastian Berg;2012-11-13 01:44:33 +0100;BUG: Do not sort new indices in random.choice.
Random choice used np.unique to find new indices when replace
was False and p given. This is wrong since unique will sort the
indices. This solves the bug, but likely not ideal.

==

numpy/random/mtrand/mtrand.pyx
==================
2da0d22;Sebastian Berg;2012-11-13 01:43:06 +0100;ENH: make random.choice size argument default to None and allow tuple
The size argument to random.choice should work like it does for all
other functions in random as well.

==

numpy/random/mtrand/mtrand.pyx
==================
c6c95f4;Julian Taylor;2012-12-05 19:57:38 +0100;add platform specific python include directories to search paths
the generic and platform specific path diverge in python3.3 in ubuntu 13.04

==

numpy/distutils/system_info.py
==================
d8370da;Ondřej Čertík;2012-12-04 15:36:51 -0800;Merge pull request #2746 from GaelVaroquaux/fix-470
FIX: base always refers to the original subclass
==
==================
d0c0f14;endolith;2012-12-02 12:42:51 -0500;DOC: use bold for section names, monospace for variables in HOWTO_DOCUMENT.

==

doc/HOWTO_DOCUMENT.rst.txt
==================
7b75899;Ondřej Čertík;2012-12-03 17:36:05 -0800;Merge pull request #2745 from certik/fix_warnings
TST: Catch possible warnings
==
==================
b531ed2;Charles Harris;2012-12-03 16:03:04 -0800;Merge pull request #2780 from luispedro/pyarray-data-voidp
API Make PyArray_DATA return void*
==
==================
457b78f;Michael Droettboom;2012-12-03 09:29:02 -0500;Add a test

==

numpy/ma/tests/test_mrecords.py
==================
7855b26;Luis Pedro Coelho;2012-12-03 11:06:02 +0000;API Make PyArray_DATA return void*
PyArray_DATA is documented as returning void*. Changing it to return
char* breaks code such as (in C++)::

    float* my_floats = static_cast<float*>(PyArray_DATA(my_array));

PyArray_BYTES returns char*, but is otherwise the same function.

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/getset.c
==================
86d7845;Charles Harris;2012-12-02 11:12:15 -0700;MAINT: Use NPY_E to expose 'e'.
Previously 'e' was defined as exp(1.)

==

numpy/core/src/umath/umathmodule.c
==================
f8700f0;Charles Harris;2012-12-02 11:07:24 -0700;ENH: Expose Euler-Mascheroni constant.
This closes issue gh-2753.

==

numpy/core/src/umath/umathmodule.c
==================
7887c16;John Salvatier;2012-12-02 10:19:59 -0800;goto fail better

==
==================
3fcbdf8;John Salvatier;2012-12-01 16:42:24 -0800;removed fancy check and added more informative message

==

numpy/core/src/multiarray/mapping.c
==================
b3bf8ea;John Salvatier;2012-11-19 19:39:24 -0800;wrong error check

==

numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/mapping.h
==================
663b3ec;John Salvatier;2012-11-19 19:18:27 -0800;gave PyArray_MapIterBind an error code on exit

==

numpy/core/src/multiarray/mapping.c
==================
a82639f;John Salvatier;2012-11-09 17:49:50 -0800;tabs -> spaces

==

numpy/core/tests/test_multiarray.py
==================
da7770c;John Salvatier;2012-11-06 14:48:53 -0800;added a fix for 1d iteration which was failing and a test to test that case

==

numpy/core/src/multiarray/mapping.c
numpy/core/tests/test_multiarray.py
==================
a289be8;Charles Harris;2012-12-01 14:50:04 -0800;Merge pull request #2777 from seberg/issue2775
BUG: Fix bad memory access for 0-sized outputs in numpy dot
==
==================
300783c;Sebastian Berg;2012-12-01 21:44:49 +0100;BUG: Fix bad memory access for 0-sized outputs in numpy dot
This fixes a bug where bad memory was written to in non-blas
numpy if the output was a (0, N) array. Closes "Issue gh-2775".

==

numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_regression.py
==================
2e28619;Ralf Gommers;2012-11-30 11:21:49 -0800;Merge pull request #2774 from endolith/patch-3
Add note about definition list classifier format
==
==================
9c02535;endolith;2012-11-30 11:43:46 -0500;Add note about definition list classifier format
and some other small changes
==

doc/HOWTO_DOCUMENT.rst.txt
==================
e9beee6;Travis E. Oliphant;2012-11-29 02:20:58 -0600;BUG: Fix bad call of internal functionand fix usage of PyField_Names

==

numpy/core/src/multiarray/scalarapi.c
==================
09d82ea;Ralf Gommers;2012-11-27 12:24:16 -0800;Merge pull request #2703 from astrofrog/fix-masked-fill-view
Don't reset the fill_value of a MaskedArray when calling view() with no dtype
==
==================
b209e19;Ralf Gommers;2012-11-26 12:49:51 -0800;Merge pull request #2758 from rgommers/cython-warnings
TST: also filter Cython warnings in NoseTester.  See PR-432.
==
==================
f836638;Ralf Gommers;2012-11-26 12:18:32 -0800;Merge pull request #2691 from stefanv/histogram_2d_doc
DOC: Clarify confusing histogram2d docstring.
==
==================
83ca0fd;Ralf Gommers;2012-11-26 12:17:17 -0800;Merge pull request #484 from endolith/rfftfreq_and_fft_docstrings
ENH: add rfftfreq() and DOC: cleanup fft docstrings
==
==================
dcc2633;endolith;2012-11-26 14:16:30 -0500;DOC: remove "the" from description, single backticks are for variables only

==

numpy/fft/helper.py
==================
840cbbe;Stefan van der Walt;2012-11-26 11:19:17 -0800;DOC: Further tweaks to histogram2d docstring.

==

numpy/lib/twodim_base.py
==================
2596867;endolith;2012-11-26 13:40:21 -0500;DOC: Reword "Hermite symmetry", clarify units of sample spacing

==

numpy/fft/fftpack.py
numpy/fft/helper.py
==================
0244720;njsmith;2012-11-25 13:34:10 -0800;Merge pull request #2769 from njsmith/fix-travis-reinstall
FIX: Use 'pip' for travis build
==
==================
f3905dc;Nathaniel J. Smith;2012-11-25 21:09:13 +0000;FIX: Use 'pip' for travis build.
Closes gh-2768.

==

.travis.yml
==================
749e5c1;endolith;2012-11-25 13:44:40 -0500;DOC: Fix length mistake in docstring (rfft length is n//2+1, not n)

==

numpy/fft/helper.py
==================
b6ea9f4;endolith;2012-11-25 12:30:46 -0500;DOC: Add rfftfreq to Helper routines in fft module's docstring

==

numpy/fft/info.py
==================
0d593f2;Charles Harris;2012-11-25 09:25:05 -0800;Merge pull request #2765 from charris/fix-travis-heisenbug
Fix travis heisenbug
==
==================
625b426;endolith;2012-11-25 02:15:39 -0500;TST: Add a test for the rfftfreq() function

==

numpy/fft/tests/test_helper.py
==================
a3dbac2;endolith;2012-11-24 19:22:59 -0500;DOC: Clarify the frequencies of the rfft using fs, borrowing text from numpy.fft docstring

==

numpy/fft/fftpack.py
==================
089bfa5;Ralf Gommers;2012-11-24 02:54:48 -0800;Merge pull request #2766 from g2p/master
Assume we can use sys.stdout.fileno() and friends.
==
==================
1065cc5;Ralf Gommers;2012-11-24 02:22:30 -0800;Merge pull request #2767 from charris/fix-buglets
Maint: fix buglets
==
==================
df2958e;Gabriel;2012-11-24 01:49:39 +0100;Code cleanup

==

numpy/distutils/exec_command.py
==================
da5ee65;Charles Harris;2012-11-23 17:16:35 -0700;BUG: Remove print statement in test_endian_recarray.
This print statement was responsible for the annoying 1 that
showed up in the test output stream.

==

numpy/core/tests/test_regression.py
==================
e33dbfc;Charles Harris;2012-11-23 16:44:05 -0700;BUG: Import run_module_suite in test_matlib.py
This is needed so test_matlib.py can be run by python.

==

numpy/tests/test_matlib.py
==================
649c908;Gabriel;2012-11-23 23:48:47 +0100;Assume we can use sys.stdout.fileno() and friends.
The workaround shouldn't be necessary in a recent python shell.
Tested in python, ipython.

In fact, distutils is almost never imported and run manually from an
interactive shell.

This removes the use of `sys.__stdout__`, which broke with distribute
0.6.30 on Python 3.

==

numpy/distutils/exec_command.py
==================
1871820;Charles Harris;2012-11-23 10:19:24 -0700;MAINT: In test_varstd_specialcases out parameters should be 0-d.
The original worked, but that is because the masked array methods
are not properly checking dimensions in this case. That should
also be fixed at some point.

==

numpy/ma/tests/test_core.py
==================
65ed5eb;Charles Harris;2012-11-23 10:14:39 -0700;MAINT: Avoid unneeded call in masked array std method.
The square root of the variance was taken twice when the out parameter
was specified.

==

numpy/ma/core.py
==================
7678c98;Charles Harris;2012-11-23 09:46:40 -0700;TST: Add test for gh-2757.

==

numpy/ma/tests/test_regression.py
==================
38c150c;Charles Harris;2012-11-23 09:33:05 -0700;BUG: gh-2757, masked array var method should zero masked out parameter.
When a is a 1-d masked array with all values masked and b is a 0-d masked
array, then a.var(out=b) fails to set the underlying masked value of b,
causing an invalid value warning to be raised in a.std(out=b) whenever b
contained a masked negative number. This fix sets the underlying value to
0, which is consistent with the n-d case. A better fix might be to add an
out parameter to the masked array ufuncs, but that is a bigger project.

==

numpy/ma/core.py
==================
dadf5b9;Thomas Robitaille;2012-11-22 20:56:35 +0100;Minor fix to fill_view test

==

numpy/ma/tests/test_core.py
==================
dba2499;Thomas Robitaille;2012-11-22 20:51:41 +0100;Improvements to ndarray.view docstring

==

numpy/add_newdocs.py
numpy/ma/core.py
==================
ab66c25;Thomas Robitaille;2012-11-22 18:57:34 +0100;Clarified MaskedArray.view documentation, and added more tests

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
9f1b872;Ralf Gommers;2012-11-21 22:08:52 +0100;TST: also filter Cython warnings in NoseTester.  See PR-432.
There a resetwarnings() call, so need to add back these filters.

==

numpy/testing/nosetester.py
==================
20224ea;Ralf Gommers;2012-11-21 12:07:10 -0800;Merge pull request #2733 from astrofrog/fix-fill-value-python3
Fix setting of fill_value for string columns in Python 3
==
==================
069323d;Charles Harris;2012-11-21 07:53:25 -0800;Merge pull request #2754 from seberg/reshape_segfault_issue
BUG: Incorrect type in _attempt_nocopy_reshape
==
==================
bdfae97;Sebastian Berg;2012-11-21 15:33:32 +0100;BUG: Incorrect type in _attempt_nocopy_reshape
This caused a segmentation fault for some large reshapes as reported
by Terry J. Ligocki on the mailing list.

==

numpy/core/src/multiarray/shape.c
==================
4bacc46;Thomas Robitaille;2012-11-20 12:17:56 +0100;Added test for fill_value behavior in MaskedArray.view, and use fill_value to set the fill value, rather than _fill_value, since using fill_value takes care of setting _fill_value to an array.

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
2a43ed3;Thomas Robitaille;2012-11-20 11:51:59 +0100;Added a `fill_value` keyword to `MaskedArray.view`, and clarify the behavior in the docstring.

==

numpy/ma/core.py
==================
15d1aa3;Thomas Robitaille;2012-11-20 11:44:12 +0100;Change test to use np.testing.assert_

==

numpy/ma/tests/test_regression.py
==================
14c7faa;John Salvatier;2012-11-19 19:39:24 -0800;wrong error check

==

numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/mapping.h
==================
b86deb7;John Salvatier;2012-11-19 19:18:27 -0800;gave PyArray_MapIterBind an error code on exit

==

numpy/core/src/multiarray/mapping.c
==================
724da61;Ralf Gommers;2012-11-19 12:26:36 -0800;Merge pull request #2726 from peterjc/msvc10
Cope with MSVC v10 aka 2010
==
==================
9bd89e4;endolith;2012-11-18 17:19:46 -0500;MAINT: Don't use assert to check variable type

==

numpy/fft/helper.py
==================
277a01e;Charles Harris;2012-11-17 11:57:53 -0800;Merge pull request #2749 from pv/f2py-docstring
ENH: f2py: generate docstrings in Numpy docstring format
==
==================
7b3e6fa;Pauli Virtanen;2012-11-17 20:52:08 +0200;TST: f2py: rewrite strings to be easier to read

==

numpy/f2py/tests/test_callback.py
numpy/f2py/tests/test_mixed.py
==================
4b500dd;Pauli Virtanen;2012-11-17 20:24:37 +0200;ENH: f2py: add 'Wrapper for ...' text to the docstring

==

numpy/f2py/rules.py
numpy/f2py/tests/test_callback.py
numpy/f2py/tests/test_mixed.py
==================
ab13a65;Pauli Virtanen;2012-11-17 19:31:19 +0200;ENH: f2py: generate docstrings in Numpy docstring format

==

numpy/f2py/capi_maps.py
numpy/f2py/rules.py
numpy/f2py/src/fortranobject.c
numpy/f2py/tests/test_callback.py
numpy/f2py/tests/test_mixed.py
==================
2a5f8ca;njsmith;2012-11-17 05:23:08 -0800;Merge pull request #2748 from pv/npymath-extern
BUG: core: wrap npy_math.h into extern "C" so that it works correctly in C++
==
==================
e1a67c3;Pauli Virtanen;2012-11-17 14:28:47 +0200;BUG: core: wrap npy_math.h into extern "C" so that it works correctly in C++

==

numpy/core/include/numpy/npy_math.h
==================
0196aed;Michael Droettboom;2012-11-15 13:45:45 -0500;Fixes #2432.  Rather than creating a new data array and assigning to it (which doesn't work when it is a recarray containing object fields), just create a copy with the np.array constructor.

==

numpy/ma/core.py
==================
69d57d0;GaelVaroquaux;2012-11-15 14:21:52 +0100;MISC: fix whitespace in C file

==

numpy/core/src/multiarray/arrayobject.c
==================
b3bcda2;GaelVaroquaux;2012-11-15 13:40:19 +0100;COMMENT: fix grammar in comment

==

numpy/core/src/multiarray/arrayobject.c
==================
e4fe789;GaelVaroquaux;2012-11-15 11:32:14 +0100;FIX: base always refers to the original subclass
Closes #470

The use case is that if b is a memmap, 'np.asarray(b).base' should be a
memmap, and thus we put is to b in such a situation.

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/tests/test_memmap.py
==================
2d841a8;Ondřej Čertík;2012-11-14 15:04:55 -0800;TST: Catch possible warnings
Previously the test sometimes fails with the following error:

======================================================================
ERROR: Test a special case for var
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/travis/virtualenv/python3.2/lib/python3.2/site-packages/numpy/ma/tests/test_core.py", line 2731, in test_varstd_specialcases
    _ = method(out=mout)
  File "/home/travis/virtualenv/python3.2/lib/python3.2/site-packages/numpy/ma/core.py", line 4778, in std
    np.power(out, 0.5, out=out, casting='unsafe')
RuntimeWarning: invalid value encountered in power

----------------------------------------------------------------------

Now we catch it, as recommended by the thread:

http://old.nabble.com/Should-abs(-nan-)-be-supported--td34389839.html

==

numpy/ma/tests/test_core.py
==================
3418ffc;Ondřej Čertík;2012-11-14 14:55:27 -0800;Merge pull request #2744 from stefanv/setup_etal
PKG: Fix minor typo in setup.py.
==
==================
ddbb4bd;Stefan van der Walt;2012-11-14 13:56:24 -0800;PKG: Fix minor typo in setup.py.

==

setup.py
==================
067b5f8;Ralf Gommers;2012-11-14 12:28:15 -0800;Merge pull request #2707 from rgommers/ticket-2243-downloadlink
BUG: fix download link in setup.py (which is shown on PyPi).
==
==================
9f1ee24;Ralf Gommers;2012-11-14 12:06:41 -0800;Merge pull request #2736 from certik/fix415
FIX: Mark a tests knownfail on Hurd
==
==================
40d0291;Ondřej Čertík;2012-11-13 17:56:34 -0800;Merge pull request #2708 from ContinuumIO/base_traversal
Update base-traversal algorithm to stop at sub-class boundary
==
==================
f6cab0a;Ondřej Čertík;2012-11-13 17:37:50 -0800;FIX: Mark a tests knownfail on Hurd
Fixes gh-415. This test raises "Function not implemented" on Hurd:

======================================================================
ERROR: test_flush (test_memmap.TestMemmap)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/build/buildd-python-numpy_1.7.0~b2-1-hurd-i386-Ws9GSv/python-numpy-1.7.0~b2/debian/tmp/usr/lib/python3/dist-packages/numpy/core/tests/test_memmap.py", line 72, in test_flush
    fp.flush()
  File "/build/buildd-python-numpy_1.7.0~b2-1-hurd-i386-Ws9GSv/python-numpy-1.7.0~b2/debian/tmp/usr/lib/python3/dist-packages/numpy/core/memmap.py", line 301, in flush
    self.base.flush()
mmap.error: [Errno 1073741902] Function not implemented

Which seems like a Hurd issue:

http://web.archiveorange.com/archive/v/dpz3Spjqy0ESHmXKVt7c

http://lists.gnu.org/archive/html/bug-hurd/2002-11/msg00243.html

So we mark it as knownfail on that platform.

==

numpy/core/tests/test_memmap.py
==================
ddb7156;Ondřej Čertík;2012-11-13 16:53:32 -0800;Merge pull request #2734 from certik/fix2731
FIX: Python 3.2 debug assertion
==
==================
2654ede;Ondřej Čertík;2012-11-13 08:35:59 -0800;FIX: Python 3.2 debug assertion
Fixes gh-646, gh-2731. The patch was originally attached to gh-646 by "skrah".

==

numpy/core/src/multiarray/common.c
==================
4171e50;Thomas Robitaille;2012-11-13 15:51:08 +0100;Fix setting of fill_value for string columns in Python 3

==

numpy/ma/core.py
numpy/ma/tests/test_regression.py
==================
780c1a6;Charles Harris;2012-11-12 21:57:40 -0800;Merge pull request #2730 from leschef/faster_dot
ENH: Remove the need for temporary copies in numpy.dot
==
==================
e31eb4b;Nicolas Scheffer;2012-11-12 21:40:38 -0800;Removed trailing printf statement

==

numpy/core/blasdot/_dotblas.c
==================
ea03777;Nicolas Scheffer;2012-11-12 12:00:28 -0800;ENH: Remove the need for temporary copies in numpy.dot
in numpy core, modified the blas function call to handle
C and F order arrays without the need for copy.
This brings a significant speed up for matrix multiplication
Added a full test for matrix multiplication in test_blasdot

==

numpy/core/blasdot/_dotblas.c
numpy/core/tests/test_blasdot.py
==================
2452356;peterjc;2012-11-12 12:16:59 +0000;Handle MSVC v10 in _MSVCRVER_TO_FULLVER

==

numpy/distutils/mingw32ccompiler.py
==================
1d498f5;peterjc;2012-11-12 11:55:05 +0000;Cope with two digit major number in MSCV v10

==

numpy/distutils/mingw32ccompiler.py
==================
d8ead4c;peterjc;2012-11-12 11:50:18 +0000;Include msvcr100 (MSVC v10 aka 2010) in msvc_runtime_library()

==

numpy/distutils/misc_util.py
==================
cb41689;njsmith;2012-11-12 00:21:55 -0800;Merge pull request #2722 from seberg/stride_set
BUG: Update aligned flag when setting strides attribute.
==
==================
c479200;Charles Harris;2012-11-11 15:29:56 -0800;Merge pull request #2723 from pv/py24-fix
BUG: fix Python 2.4 build with NPY_SEPARATE_COMPILATION
==
==================
bee8c4d;Pauli Virtanen;2012-11-11 21:54:53 +0200;BUG: fix Python 2.4 build with NPY_SEPARATE_COMPILATION

==

numpy/core/src/umath/reduction.c
==================
0db7a4a;John Salvatier;2012-11-09 17:49:50 -0800;tabs -> spaces

==

numpy/core/tests/test_multiarray.py
==================
7c90615;Sebastian Berg;2012-11-09 23:33:55 +0100;BUG: Update aligned flag when setting strides attribute.

==

numpy/core/src/multiarray/getset.c
numpy/core/tests/test_regression.py
==================
c6f27b0;Alexander Belopolsky;2012-11-09 14:23:49 -0500;Fixed a mistake in linalg.eig() documentation.

==

numpy/linalg/linalg.py
==================
75b8119;Charles Harris;2012-11-09 00:03:04 -0800;Merge pull request #2693 from glyg/master
DOC: more reproducible example in linalg.solve docstring
==
==================
5cddd6d;Charles Harris;2012-11-08 23:49:12 -0800;Merge pull request #2717 from cbrueffer/cleanup
Looks good to me. Thanks
==
==================
6c948c5;Christian Brueffer;2012-11-09 15:00:06 +0800;Fix typos.

==

INSTALL.txt
==================
82c0bb8;Charles Harris;2012-11-06 19:03:28 -0700;Fixes that let PyArray_DATA and PyArray_BYTES be used as lvalues.
* pull-2709:
  BUG: Remove pointer cast from the PyArray_DATA macro.
  BUG: Remove pointer cast from the PyArray_BYTES macro.

==
==================
e614443;Charles Harris;2012-11-06 18:33:32 -0700;BUG: Remove pointer cast from the PyArray_DATA macro.
This lets PyArray_DATA be used as an lvalue as some compilers raised an
error with the previous version. The type is now determined by the type of
the struct member and is char*.  PyArray_BYTES had the same problem when
used as an lvalue in Theano and the same fix is used here.  This problem
needs a bigger fix at some point as the function equivalent of the macro
does not return an lvalue.

==

numpy/core/include/numpy/ndarraytypes.h
==================
cf0f985;Frederic;2012-11-06 14:18:12 -0500;BUG: Remove pointer cast from the PyArray_BYTES macro.
This fixes a compilation problem encountered with numpy 1.7 when the
PyArray_BYTES macro was used as an lvalue in Theano. The macro worked as an
lvalue in 1.6 and in 1.7 only the struct name was changed, which makes the
problem a bit of a mystery, but Theano compiles with this fix.

==

numpy/core/include/numpy/ndarraytypes.h
==================
93be7c0;Stefan van der Walt;2012-11-06 17:00:07 -0800;Merge pull request #2702 from seberg/issue2700
BUG: Reshape of 0-sized arrays failed to work without copy.
==
==================
3b559fd;John Salvatier;2012-11-06 14:48:53 -0800;added a fix for 1d iteration which was failing and a test to test that case

==

numpy/core/src/multiarray/mapping.c
numpy/core/tests/test_multiarray.py
==================
88124ae;Travis E. Oliphant;2012-11-06 00:02:27 -0600;BUG: Update base-traversal algorithm for array sub-classes so as to stop the base-traversal when the new base would not be an instance of the sub-class.

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/tests/test_memmap.py
==================
58c1bf7;Ralf Gommers;2012-11-05 20:47:23 +0100;BUG: fix download link in setup.py (which is shown on PyPi).
Closes Trac ticket 2243.

==

setup.py
==================
0d275f1;Sebastian Berg;2012-11-01 23:43:31 +0100;MNT: Remove _check_zeros from NewShape
_attempt_nocopy_reshape already handles this case fine. The only
purpose would be to slightly speed up this special case.

==

numpy/core/src/multiarray/shape.c
==================
237e816;Sebastian Berg;2012-11-01 23:42:55 +0100;BUG: Reshape of 0-sized arrays failed to work without copy
This also adds a check for order=Keeporder which is not supported.
"closes Issue #2700"

==

numpy/core/src/multiarray/shape.c
numpy/core/tests/test_regression.py
==================
3e99f32;Thomas Robitaille;2012-10-31 19:57:15 +0100;Don't reset the fill_value of a MaskedArray when calling view() with no dtype

==

numpy/ma/core.py
==================
526b764;njsmith;2012-10-31 11:40:35 -0700;Merge pull request #483 from astrofrog/fix-masked-getitem
When accessing MaskedArray rows, always return an mvoid object
==
==================
a890a85;njsmith;2012-10-25 15:16:11 -0700;Merge pull request #2694 from seberg/cflags2
ENH: Make 1-dimensional axes not matter for contiguous flags
==
==================
02ebf8b;Sebastian Berg;2012-10-23 14:32:30 +0200;MNT: Remove unnecessary special cases in _UpdateContiguousFlags
Remove unnecessary special cases for 0 and 1-d arrays as suggested
by njsmith.

==

numpy/core/src/multiarray/flagsobject.c
==================
25f5363;Guillaume Gay;2012-10-22 19:03:27 +0300;Fixed parenthesis typo

==

numpy/linalg/linalg.py
==================
f88e07a;Guillaume Gay;2012-10-22 19:00:57 +0300;Taking njsmith comment into account

==

numpy/linalg/linalg.py
==================
4d741d2;Sebastian Berg;2012-10-22 14:10:40 +0200;MNT: Minor cleanups in comments and lowlevel_strided_loops.

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/flagsobject.c
numpy/core/src/private/lowlevel_strided_loops.h
==================
dbe4468;Sebastian Berg;2012-10-22 13:25:41 +0200;TST: Check if contiguous flags are correct in various situations

==

numpy/core/tests/test_api.py
==================
dc2e3b7;Guillaume Gay;2012-10-22 12:50:56 +0300;Correct `linalg.solve` doc string
Fixes issue 2692
==

numpy/linalg/linalg.py
==================
c5ccca9;Travis E. Oliphant;2012-10-21 21:19:10 -0700;Merge pull request #482 from ContinuumIO/void_scalar_hash
BUG: Fix void_scalar hash function to use the elements of the record in ...
==
==================
dc4e38b;Sebastian Berg;2012-10-21 23:18:27 +0200;BUG: Fix bug with size 1-dims in CreateSortedStridePerm
This reverts changes done to CreateSortedStridePerm in commit
9194b3af. The problem is that it would fail for 3x1x3 Fortran order
array for example. And special handleing seems unnecessary at least
after 1-dim axis not mattering for contiguous flags.
This "closes Issue #434"

==

numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/shape.c
numpy/core/src/umath/reduction.c
numpy/core/tests/test_api.py
==================
a0891ab;Sebastian Berg;2012-10-21 19:03:35 +0200;MNT: Remove unnecessary stride/flags cleanup.
This code is unnecessary with changed flags behavior. It would
only serve the purpose of making strides look nicer for the
user.
The UpdateFlags was only required since 1-dim axis being removed
might change contiguous flags. But this cannot happen now.

==

numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/shape.c
==================
8daf144;Sebastian Berg;2012-10-21 18:53:23 +0200;API: ctors changed so that contiguous flags ignore 1-dim axis
This changes ctors.c so that new arrays are created in such a way
that they are both C- and F-contiguous if possible. Also fixes
some corner cases for 0-sized arrays.

==

numpy/core/src/multiarray/ctors.c
==================
c48156d;Sebastian Berg;2012-10-21 18:50:28 +0200;API: Change Flags Updateing to allow C-/F-contiguous arrays
This changes UpdateFlags to ignore 1-dimensional axis when
setting C-/F-contiguous flags. Updates both flags always now.

==

numpy/core/src/multiarray/flagsobject.c
==================
44f83e2;Sebastian Berg;2012-10-21 18:39:29 +0200;TST: Test order='F' combined with C/F-contiguous arrays.
Both ravel and asarray misbehaved on 1D (or more generally
C and F-contiguous arrays if order='F' was specified. Speed
test for .tostring seems not feasably.

==

numpy/core/tests/test_regression.py
==================
0e10f55;Sebastian Berg;2012-10-21 18:38:34 +0200;BUG: Replace ISFORTRAN by IS_F_CONTIGUOUS.
In a few places ISFORTRAN was used to check for f-contiguouity.
This is incorrect, since ISFORTRAN never evaluated to True if
the array was also c-contiguous.

==

numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/shape.c
==================
4b28147;Sebastian Berg;2012-10-21 18:34:04 +0200;API: Change isfortran to f-contig and not c-contig
This was a check for 1-d arrays, this is the generalization to
higher dimension if we allow higher dimensioal arrays to be both
f- and c-contiguous.

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/numeric.py
==================
fb64bbf;Sebastian Berg;2012-10-21 17:56:36 +0200;TST: Update ctypes tests for changed contiguous flags setting.
This is unrelated to what is actually tested here.

==

numpy/tests/test_ctypeslib.py
==================
b46f589;Sebastian Berg;2012-10-21 17:48:14 +0200;ENH: Do not rely on clean strides for loops.
In lowlevel_strided_loops.h, do not rely that the strides for
contiguous arrays are set nicely since they can be considered not
important if an axis dimensions is zero.

==

numpy/core/src/private/lowlevel_strided_loops.h
==================
1895b15;Travis E. Oliphant;2012-10-19 23:08:41 -0500;FIX: Update release notes.

==

doc/release/1.8.0-notes.rst
==================
2e2f452;endolith;2012-10-13 17:36:31 -0400;DOC: Clarify size of odd-length FFTs, default `d` for fftfreq, and some PEP8 style fixes

==

numpy/fft/fftpack.py
numpy/fft/helper.py
==================
4ddb4df;endolith;2012-10-13 17:32:37 -0400;ENH: Add rfftfreq() for numpy's rfft(), which behaves differently from scipy's rfft()/rfftfreq().

==

numpy/fft/helper.py
==================
184c8d0;Travis E. Oliphant;2012-10-13 14:03:27 -0500;BUG: Ensure that writeable records are not hashed.

==

numpy/core/src/multiarray/scalartypes.c.src
numpy/core/tests/test_multiarray.py
==================
8d83ae9;Denis Laxalde;2012-10-13 15:46:43 +0200;STY: drop some else clauses in roll

==

numpy/core/numeric.py
==================
1532b7c;Thomas Robitaille;2012-10-11 16:44:49 -0400;Fixed failing tests

==

numpy/ma/tests/test_core.py
==================
7caac2e;Thomas Robitaille;2012-10-11 14:00:02 -0400;When accessing MaskedArray rows, always return an mvoid object

==

numpy/ma/core.py
==================
fe6f42c;Travis E. Oliphant;2012-10-09 22:49:06 -0700;Merge pull request #480 from matthew-brett/fix-distutils-log-warning
FIX: remove log line causing warning from disutils
==
==================
ebc9bbb;Travis E. Oliphant;2012-10-09 22:31:25 -0700;Merge pull request #476 from njsmith/copy-memory-order
[FIX] preserve memory order in np.copy()
==
==================
87930c4;Travis E. Oliphant;2012-10-09 22:29:53 -0700;Merge pull request #466 from seberg/issue465
BUG: Fill correct strides for ndmin in array creation
==
==================
96abba1;Travis E. Oliphant;2012-10-09 22:23:39 -0700;Merge pull request #454 from seberg/issue380
FIX: Issue #380
==
==================
ca27396;Travis E. Oliphant;2012-10-09 21:56:53 -0700;Merge pull request #444 from 87/fix_array_iface
Fix for issue #291
==
==================
a0a1863;Travis E. Oliphant;2012-10-09 23:49:17 -0500;TST: Add one more test.

==

numpy/core/tests/test_multiarray.py
==================
8b80043;Travis E. Oliphant;2012-10-09 23:35:37 -0500;BUG: Fix void_scalar hash function to use the elements of the record in the hash computation just like the tuple hash

==

numpy/core/src/multiarray/scalartypes.c.src
numpy/core/tests/test_multiarray.py
==================
fd9ee73;David Cournapeau;2012-10-09 22:10:54 +0100;REF: move blas/lapack check into bento.

==

bscript
==================
8be8ce8;David Cournapeau;2012-10-09 22:10:42 +0100;BUG: fix in-place build.

==

numpy/core/bscript
==================
eed2372;David Cournapeau;2012-09-09 22:19:05 +0100;FEAT: blas/lapack can be configured from command line.

==

bscript
==================
20825a9;David Cournapeau;2012-09-09 17:53:22 +0100;ENH: add support for arch autodetection.

==

bscript
==================
926c5ad;Charles Harris;2012-10-08 15:41:16 -0600;Merge PR 377: expose Mapiter in the numpy API.
* PR-377:
  inplace passes tests
  fixed tests
  added initial mapiter tests
  eliminated oned and fancy arguments to MapIterArray
  changed error handling for clarity
  removed expsure of mapiter type
  changed the name of _swap_axes
  gave MapIter an API

==
==================
65bd91d;John Salvatier;2012-10-07 10:17:18 -0700;inplace passes tests

==

numpy/core/code_generators/numpy_api.py
numpy/core/tests/test_multiarray.py
==================
d05d999;John Salvatier;2012-10-07 09:54:41 -0700;fixed tests

==

numpy/core/src/multiarray/multiarray_tests.c.src
numpy/core/tests/test_multiarray.py
==================
f9f9498;John Salvatier;2012-08-13 13:08:06 -0700;added initial mapiter tests

==

numpy/core/src/multiarray/multiarray_tests.c.src
numpy/core/tests/test_multiarray.py
==================
9194042;John Salvatier;2012-08-13 11:46:39 -0700;eliminated oned and fancy arguments to MapIterArray

==

numpy/core/src/multiarray/mapping.c
==================
2626101;John Salvatier;2012-08-10 16:23:05 -0700;changed error handling for clarity

==

numpy/core/src/multiarray/mapping.c
==================
7c64889;John Salvatier;2012-08-10 16:21:16 -0700;removed expsure of mapiter type

==

numpy/core/code_generators/numpy_api.py
==================
860a1f7;John Salvatier;2012-08-06 18:52:04 -0700;changed the name of _swap_axes

==

numpy/core/code_generators/cversions.txt
numpy/core/code_generators/numpy_api.py
numpy/core/src/multiarray/mapping.c
==================
471dde9;John Salvatier;2012-08-06 18:11:02 -0700;gave MapIter an API

==

numpy/core/code_generators/cversions.txt
numpy/core/code_generators/genapi.py
numpy/core/code_generators/numpy_api.py
numpy/core/setup_common.py
numpy/core/src/multiarray/mapping.c
==================
7078f01;Matthew Brett;2012-10-06 12:05:10 +0100;FIX: remove log line causing warning from disutils
Using numpy.distutils through easy_install caused a RuntimeWarning
because of a failed import of numpy.distutils.

Discussion here:
http://thread.gmane.org/gmane.comp.python.numeric.general/51719

The conclusion seemed to be that the safest fix is to remove the one
line of logging in the relevant callback.

Thanks to Ralf Gommers for the suggestion.

==

numpy/distutils/misc_util.py
==================
3f10c36;Charles Harris;2012-10-03 17:31:35 -0700;Merge pull request #477 from seberg/ticket2218
BUG: Fix complex to bool conversion in lowlevel_strided_loops
==
==================
0022325;Charles Harris;2012-10-03 13:15:06 -0700;Merge pull request #455 from rgommers/devguide-update
Devguide update
==
==================
43f1d5c;njsmith;2012-10-03 08:29:59 -0700;Merge pull request #459 from jseabold/fix-unicode-repr-object
Fix unicode repr object
==
==================
a8ffb48;Sebastian Berg;2012-10-01 19:32:26 +0200;TST: Complex to bool conversion (Ticket 2218)

==

numpy/core/tests/test_regression.py
==================
f085bc2;Sebastian Berg;2012-10-01 19:24:41 +0200;BUG: Fix complex to bool conversion in lowlevel_strided_loops
Closes "Ticket 2218".

==

numpy/core/src/multiarray/lowlevel_strided_loops.c.src
==================
1a71edc;Nathaniel J. Smith;2012-10-01 17:36:01 +0100;[FIX] preserve memory order in np.copy()
This switches us back to the behaviour seen in numpy 1.6 and earlier,
which it turns out that scikit-learn (and probably others) relied on.

==

numpy/add_newdocs.py
numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
e18e744;Ondřej Čertík;2012-09-30 21:28:56 -0700;DOC: fix a typo in a comment

==

numpy/core/tests/test_shape_base.py
==================
92ecbdd;Han Genuit;2012-09-30 21:09:19 +0200;TST: Add more tests.

==

numpy/core/tests/test_multiarray.py
==================
de3075f;Han Genuit;2012-09-30 21:05:57 +0200;BUG: Disallow shapesize > 1 when coercing scalar to array

==

numpy/core/src/multiarray/ctors.c
==================
097e823;Han Genuit;2012-09-30 20:09:24 +0200;ENH: Assume object is scalar if no shape and data attribute are given

==

numpy/core/src/multiarray/ctors.c
==================
acdf49b;Han Genuit;2012-09-30 19:28:17 +0200;BUG: Handle scalars correctly.

==

numpy/core/src/multiarray/ctors.c
==================
78d0272;njsmith;2012-09-30 03:06:33 -0700;Merge pull request #449 from seberg/setobjref
FIX: PyErr_SetObject does not steal reference (Ticket 2216)
==
==================
c5e8990;Sebastian Berg;2012-09-29 18:26:13 +0200;TST: Test that ndmin honors requested and original order.

==

numpy/core/tests/test_regression.py
==================
095534f;Sebastian Berg;2012-09-29 17:48:09 +0200;BUG: Fill correct strides for ndmin in array creation
Closes "Issue #465", strides need to be set according
to the requested contiguous flags.

==

numpy/core/src/multiarray/multiarraymodule.c
==================
1ea1592;njsmith;2012-09-27 10:31:41 -0700;Merge pull request #461 from nouiz/doc
small doc update
==
==================
c006f61;Frederic;2012-09-26 14:44:23 -0400;Add doc to {empty,zeros,ones}_like that tell in witch version their dtype and order parameter was added

==

numpy/add_newdocs.py
numpy/core/numeric.py
==================
a3e883a;endolith;2012-09-25 13:41:25 -0400;DOC: Used regex to find colons missing spaces which render wrong online, also other spacing or formatting mistakes

==

doc/sphinxext/tests/test_docscrape.py
numpy/add_newdocs.py
numpy/build_utils/common.py
numpy/core/code_generators/generate_umath.py
numpy/core/code_generators/ufunc_docstrings.py
numpy/core/fromnumeric.py
numpy/core/numeric.py
numpy/core/setup_common.py
numpy/distutils/command/config.py
numpy/distutils/mingw32ccompiler.py
numpy/distutils/misc_util.py
numpy/lib/arraypad.py
numpy/lib/function_base.py
numpy/lib/index_tricks.py
numpy/lib/shape_base.py
numpy/lib/utils.py
numpy/ma/core.py
numpy/matrixlib/defmatrix.py
numpy/polynomial/chebyshev.py
numpy/polynomial/hermite.py
numpy/polynomial/hermite_e.py
numpy/polynomial/laguerre.py
numpy/polynomial/legendre.py
numpy/polynomial/polynomial.py
numpy/random/mtrand/mtrand.pyx
numpy/testing/utils.py
==================
0f5bbfa;Skipper Seabold;2012-09-26 09:27:37 -0400;TST: Change expected output for Python 3.

==

numpy/core/tests/test_arrayprint.py
==================
4134859;njsmith;2012-09-26 02:49:01 -0700;Merge pull request #457 from njsmith/fix-diagonal-refcounting
BUG: Fix memory leak in PyArray_Diagonal
==
==================
8e0a542;Skipper Seabold;2012-09-25 18:41:27 -0400;BUG: Use numpystr for arrayprint fallback instead of str

==

numpy/core/arrayprint.py
==================
04fddc0;Skipper Seabold;2012-09-25 18:41:12 -0400;TST: Add failing test for unicode array with object dtype

==

numpy/core/tests/test_arrayprint.py
==================
80b3a34;Nathaniel J. Smith;2012-09-24 19:57:23 +0100;BUG: Fix memory leak in PyArray_Diagonal
Thanks to Gael Varoquaux for the catch.

==

numpy/core/src/multiarray/item_selection.c
numpy/core/tests/test_multiarray.py
==================
622045a;Sebastian Berg;2012-09-24 19:13:16 +0200;TST: reshaping of zero strided array (Issue #380)

==

numpy/core/tests/test_regression.py
==================
6a847ef;njsmith;2012-09-24 09:32:50 -0700;Merge pull request #440 from matthew-brett/crazy-axis-concat-warning
BUG: allow any axis for np.concatenate for 1D
==
==================
7a5a8ad;Sebastian Berg;2012-09-21 17:55:27 +0200;BUG: strides should only be changed if dimensions==1
This fixes Issue #380".

==

numpy/core/src/multiarray/shape.c
==================
c8010d0;njsmith;2012-09-24 08:31:43 -0700;Merge pull request #451 from njsmith/unsafe-cast-deprecation
Unsafe cast deprecation
==
==================
c906fdc;Ralf Gommers;2012-09-23 11:56:38 +0200;DOC: expand sections on commit messages and merging/rebasing in the devguide.
This commit address comments from Charles on PR #455.

==

doc/source/dev/gitwash/development_workflow.rst
==================
12e8079;Sebastian Berg;2012-09-18 18:39:25 +0200;BUG: PyErr_SetObject does not steal reference.
Closes "Ticket #2125" and "Ticket #2216"

==

numpy/core/src/multiarray/array_assign.c
numpy/core/src/multiarray/array_assign_array.c
numpy/core/src/multiarray/array_assign_scalar.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/nditer_constr.c
numpy/core/src/umath/ufunc_type_resolution.c
==================
0dd5a76;Ralf Gommers;2012-09-22 17:28:19 +0200;DOC: one more edit to the dev-guide.
Recommend to update master before creating your feature branch.
Thanks to Nicky van Foreest for feedback on the dev-guide.

==

doc/source/dev/gitwash/development_workflow.rst
==================
936fb7c;Ralf Gommers;2012-09-22 17:11:29 +0200;DOC: remove section "Patching" from dev-guide.
This section is outdated, and following it pretty much ensures that your
patches will languish in Trac.

==

doc/source/dev/gitwash/development_setup.rst
doc/source/dev/gitwash/following_latest.rst
doc/source/dev/gitwash/index.rst
doc/source/dev/gitwash/patching.rst
==================
32d13f6;Ralf Gommers;2012-09-22 16:52:02 +0200;DOC: a few edits to make "Development Workflow" in the dev guide clearer.

==

doc/source/dev/gitwash/development_workflow.rst
==================
5a6601a;Ralf Gommers;2012-09-22 16:39:02 +0200;DOC: document in dev-guide how to write a good commit message.

==

doc/source/dev/gitwash/development_workflow.rst
==================
fd63e8f;njsmith;2012-09-21 07:46:37 -0700;Merge pull request #420 from seberg/contig
Reset flags when Axes are removed. Array might now be 1D, or removed axe...
==
==================
c8ed8ba;njsmith;2012-09-21 06:51:26 -0700;Merge pull request #365 from bfroehle/static_f2py_size
BUG: Exported f2py_size symbol prevents linking multiple f2py modules.
==
==================
f18987a;Nathaniel J. Smith;2012-09-21 00:25:11 +0100;STY: another wording tweak (thanks to @charris)

==

numpy/core/tests/test_ufunc.py
==================
c038fe5;Nathaniel J. Smith;2012-09-20 23:30:29 +0100;STY: fix up style and a few wordings on previous commit

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/convert_datatype.c
numpy/core/tests/test_ufunc.py
==================
cea0a20;Nathaniel J. Smith;2012-09-20 22:03:31 +0100;FIX: Transition scheme for safer in-place ufunc operations
In numpy 1.6 and earlier, if you do
  np.add(int_arr, float_arr, out=int_arr)
or
  int_arr += float_arr
then the result will be silently truncated to integer values. This
often produces bugs, because it's easy to accidentally end up with an
integer array and not realize it.

Therefore, there seems to be consensus that we should switch to using
same_kind casting by default for in-place ufunc operations. However,
just switching this (as was done initially during the 1.7 development
cycle) breaks a lot of code, which is rude and violates our
deprecation policy.

This commit instead adds a special temporary casting rule which acts
like "unsafe", but also checks whether each operation would be allowed
under "same_kind" rules and issues a DeprecationWarning if not.

It also moves NPY_DEFAULT_ASSIGN_CASTING into the formal API instead
of leaving it as a #define. This way we can change it later, and any
code which references it and is compiled against this version of numpy
will automatically switch to whatever we change it too. This avoids
the situation where we want to remove the temporary magic value we're
using to create DeprecationWarnings now, but can't because it would be
an ABI break.

==

doc/release/1.7.0-notes.rst
doc/source/reference/ufuncs.rst
numpy/core/code_generators/numpy_api.py
numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/convert_datatype.c
numpy/core/tests/test_ufunc.py
==================
4708615;Nathaniel J. Smith;2012-09-20 22:02:18 +0100;ENH: More capable test functions for warnings
1) New function assert_no_warnings
2) Make assert_warns and assert_no_warnings pass through the
   function's return value on success, so that it can be checked as
   well.

==

numpy/testing/tests/test_utils.py
numpy/testing/utils.py
==================
32b1e64;Han Genuit;2012-09-20 00:58:36 +0200;BUG: Fixes for Python 3.x

==

numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/ctors.c
==================
9597b1f;njsmith;2012-09-17 09:25:43 -0700;Merge pull request #419 from stefanv/modinit
Use PyMODINIT_FUNC and update docs accordingly.
==
==================
58aefff;njsmith;2012-09-17 09:17:47 -0700;Merge pull request #446 from cgohlke/patch-1
Style: consistently use spaces instead of tabs in .py files
==
==================
ccbf5cf;endolith;2012-09-16 21:01:28 -0300;MAINT: Use linspace instead of arange in some examples.
The original code used arange with offsets and scaling to generate
sample points. Using linspace simplifies the code and clarifies
the intent.

==

numpy/lib/function_base.py
==================
0ab86f0;cgohlke;2012-09-16 16:15:15 -0700;Style: consistently use spaces instead of tabs

==

numpy/build_utils/waf.py
==================
d721541;cgohlke;2012-09-16 16:10:23 -0700;Style: use 4 spaces per indentation level as per PEP8

==

numpy/distutils/fcompiler/pathf95.py
==================
44381b8;cgohlke;2012-09-16 16:05:52 -0700;Fix whitespace formatting
Use spaces instead of tabs
==

numpy/distutils/fcompiler/gnu.py
==================
54b4dc7;Han Genuit;2012-09-16 22:03:49 +0200;BUG: Make sure empty shapes are disallowed when data is specified

==

numpy/core/src/multiarray/ctors.c
==================
bfceb53;Han Genuit;2012-09-16 20:50:04 +0200;TST: Add test for special case in array interface

==

numpy/core/tests/test_multiarray.py
==================
9e7a766;Han Genuit;2012-09-16 20:45:24 +0200;BUG: Make shape check for special case a bit stricter

==

numpy/core/src/multiarray/ctors.c
==================
fa967ee;Han Genuit;2012-09-16 20:19:11 +0200;ENH: Allow objects to use the array interface without specifying data

==

numpy/core/src/multiarray/ctors.c
==================
69afd27;Matthew Brett;2012-09-13 15:40:25 +0100;TST: test DeprecationWarning raised by concatenate
From review by Nathaniel - thanks.

==

numpy/core/tests/test_shape_base.py
==================
4475ead;Matthew Brett;2012-09-13 15:21:10 +0100;BUG: change FutureWarning to DeprecationWarning
Use of PyErr_WarnEx causing failure for Python 2.4.

==

numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_shape_base.py
==================
21a1d73;Matthew Brett;2012-09-13 11:26:26 +0100;BUG: allow any axis for np.concatenate for 1D
Previous numpies allowed the user to pass any integer as axis argument
to np.concatenate, when the input arrays were 1D.  At some point we
tightened up on this, raising an error for axis values other than 0.
This raises a FutureWarning for axis numbers != 0, but allows them, for
backwards compatibility.

==

numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_shape_base.py
==================
d8988ab;Travis E. Oliphant;2012-09-15 09:24:47 -0700;Merge pull request #441 from matthew-brett/astype-doc
DOC: describe output from astype method
==
==================
93cbc83;Travis E. Oliphant;2012-09-15 09:15:43 -0700;Merge pull request #443 from 87/fix_concat
Fix for issue #442
==
==================
7c183a5;Han Genuit;2012-09-15 17:47:22 +0200;TST: Add test for concatenate with None-axis

==

numpy/core/tests/test_shape_base.py
==================
027c3d9;Han Genuit;2012-09-15 16:48:53 +0200;BUG: Concatenate with axis None should work regardless of matching array shapes

==

numpy/core/src/multiarray/multiarraymodule.c
==================
9ff9c0a;njsmith;2012-09-13 06:15:48 -0700;Merge pull request #433 from rgommers/intel-fortran-flags
MAINT: update Intel Fortran compiler flags for the 21st century.
==
==================
5bfd65a;Matthew Brett;2012-09-13 13:55:16 +0100;DOC: describe output from astype method
Expand docstring for ``astype`` method.

==

numpy/add_newdocs.py
==================
a17875b;njsmith;2012-09-11 11:12:12 -0700;Merge pull request #432 from rgommers/silence-cython-warnings
MAINT: silence Cython warnings about changes dtype/ufunc size.
==
==================
aed8fc5;njsmith;2012-09-11 11:07:32 -0700;Merge pull request #429 from 87/fix_insert
Fix for issues #392 and #378
==
==================
b6a1acd;njsmith;2012-09-11 11:07:13 -0700;Merge pull request #431 from njsmith/fix-travis-py24-build
FIX: use py24-compatible version of virtualenv on Travis
==
==================
6315567;njsmith;2012-09-11 11:06:09 -0700;Merge pull request #430 from njsmith/test_pareto-fix
FIX: loosen numerical tolerance in test_pareto()
==
==================
854f67f;Ralf Gommers;2012-09-09 09:33:29 +0200;MAINT: update Intel Fortran compiler flags for the 21st century.
Thanks to Intel for this contribution.
Note that there's also an MKL application note which recommends these flags:
http://software.intel.com/en-us/articles/numpyscipy-with-intel-mkl

==

numpy/distutils/fcompiler/intel.py
==================
170ed4e;Ralf Gommers;2012-09-08 21:56:23 +0200;MAINT: silence Cython warnings about changes dtype/ufunc size.
These warnings are visible whenever you import scipy (or another package) that
was compiled against an older numpy than is installed.  For example compiled
against 1.5.1, like current scipy binaries are, and used with 1.7.0.

These warnings aren't useful; if numpy would really break its ABI it would be
noticed in no time without these warnings.

==

numpy/__init__.py
==================
9c9d4bc;Nathaniel J. Smith;2012-09-07 10:57:05 +0100;FIX: use py24-compatible version of virtualenv on Travis
Travis recently upgraded to virtualenv 1.8, which has dropped support
for Python 2.4. So, in our Python 2.4 setup script, we need to
explicitly fetch and use virtualenv 1.7. Likewise for pip 1.1.

File imported from the already-fixed version for patsy:
  https://github.com/pydata/patsy/blob/0316d2901f4195db06e8091c15f37d9fe4ad09de/.travis-make-py24-virtualenv.sh

==

.travis-make-py24-virtualenv.sh
==================
a16f387;Nathaniel J. Smith;2012-09-07 10:49:45 +0100;FIX: loosen numerical tolerance in test_pareto()
The problem was that in 32bit Ubuntu 12.04, one gets the following:

>
/home/njs/numpy/.tox/py27/local/lib/python2.7/site-packages/numpy/random/tests/test_random.py(363)test_pareto()
-> np.testing.assert_array_almost_equal(actual, desired, decimal=15)
(Pdb) actual[1, 0]
52828779.702948704
(Pdb) desired[1, 0]
52828779.702948518

and the test was comparing the numbers to 1e-14, which obviously
failed.

Fixes #424.

==

numpy/random/tests/test_random.py
==================
1688b29;Han Genuit;2012-09-07 09:06:38 +0200;TST: Add test for boolean insert

==

numpy/lib/tests/test_function_base.py
==================
1e6f7a7;Han Genuit;2012-09-07 01:57:24 +0200;TST: Add extra test for multidimensional inserts.

==

numpy/lib/tests/test_function_base.py
==================
926564c;Han Genuit;2012-09-07 01:27:58 +0200;BUG: Fix for issues #378 and #392 This should fix the problems with numpy.insert(), where the input values were not checked for all scalar types and where values did not get inserted properly, but got duplicated by default.

==

numpy/lib/function_base.py
==================
a744f3c;David Cournapeau;2012-09-03 10:45:55 +0100;BUG: fix npymath install location.

==

numpy/core/bento.info
numpy/core/bscript
==================
ef61260;David Cournapeau;2012-08-27 15:01:34 +0200;BUG: fix custom post_check.

==

numpy/build_utils/waf.py
==================
2d48841;David Cournapeau;2012-08-26 08:55:00 +0200;BUG: forgot to build _dotblas in bento build.

==

numpy/core/bento.info
numpy/core/bscript
==================
cdd8095;David Cournapeau;2012-08-26 08:54:32 +0200;REF: remove unused imports in bscript.

==

bscript
==================
a72ce7e;njsmith;2012-09-04 11:37:37 +0200;Update numpy/core/code_generators/ufunc_docstrings.py
Revert PR #423 (which was based on a misunderstanding).
==

numpy/core/code_generators/ufunc_docstrings.py
==================
4c73e7c;njsmith;2012-09-04 02:16:41 -0700;Merge pull request #423 from adamlwgriffiths/master
Fix typo in documentation (101 instead of 10). 
==
==================
0f1d2d9;Adam Griffiths;2012-09-04 15:22:24 +1000;Fix typo in documentation (101 instead of 10).
Examples demonstrate using an array with (-10, 0, 10),
but this specific example has a typo that lists the
last number as 101.
This is reflected in the diagrams having axis labeled
from -10:+10.

==

numpy/core/code_generators/ufunc_docstrings.py
==================
380ce94;Sebastian Berg;2012-09-04 02:00:47 +0200;Tests related to Issue #387

==

numpy/core/tests/test_regression.py
==================
e4bafb2;Sebastian Berg;2012-09-03 16:22:06 +0200;Reset flags when Axes are removed. Array might now be 1D, or removed axes of size 1 destroy contiguousity.

==

numpy/core/src/multiarray/shape.c
==================
ead9e09;cgohlke;2012-08-05 14:17:30 -0700;Use PyMODINIT_FUNC and update docs accordingly.
See https://github.com/scipy/scipy/pull/279

==

doc/source/user/c-info.ufunc-tutorial.rst
numpy/core/blasdot/_dotblas.c
numpy/core/src/dummymodule.c
numpy/core/src/multiarray/multiarray_tests.c.src
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/scalarmathmodule.c.src
numpy/core/src/umath/umath_tests.c.src
numpy/core/src/umath/umathmodule.c
numpy/f2py/rules.py
numpy/f2py/tests/src/array_from_pyobj/wrapmodule.c
numpy/fft/fftpack_litemodule.c
numpy/lib/src/_compiled_base.c
numpy/linalg/lapack_litemodule.c
numpy/numarray/_capi.c
==================
cd9092a;Ondřej Čertík;2012-09-02 12:20:25 -0700;Merge pull request #417 from certik/fix416
FIX: Regenerate mtrand.c with Cython 0.17
==
==================
727cbc4;Ondřej Čertík;2012-09-02 09:47:35 -0700;FIX: Regenerate mtrand.c with Cython 0.17
Fixes #416

==

numpy/random/mtrand/mtrand.c
==================
7d30cad;Ondřej Čertík;2012-09-02 09:35:43 -0700;Merge pull request #397 from certik/fix2189
BUG: Add a test for Ticket #2189
==
==================
9652574;Ondřej Čertík;2012-09-02 09:33:53 -0700;Merge pull request #376 from cgohlke/patch-2
Allow long numbers in numpy.rec.array formats string
==
==================
fab65b7;Ondřej Čertík;2012-09-02 09:33:40 -0700;Merge pull request #404 from certik/pr401_fix
FIX: simplify the import statement
==
==================
84698e3;njsmith;2012-09-02 08:54:22 -0700;Merge pull request #393 from stefanv/ndindex
Improve ndindex execution speed.
==
==================
bb0e4f3;Stefan van der Walt;2012-09-02 08:03:42 -0700;Retain backward compatibility. Enforce C order.

==

numpy/lib/index_tricks.py
==================
942bdb2;Stefan van der Walt;2012-08-27 09:24:59 -0700;Improve ndindex execution speed.

==

numpy/lib/index_tricks.py
numpy/lib/tests/test_index_tricks.py
==================
0713354;Ondřej Čertík;2012-08-31 16:02:50 -0700;FIX: Add a test for Ticket #2066

==

numpy/core/tests/test_regression.py
==================
cb5a27e;Ondřej Čertík;2012-08-30 19:52:48 -0700;BUG: Add a test for Ticket #2189

==

numpy/core/tests/test_regression.py
==================
e60c70d;Ondřej Čertík;2012-08-31 15:46:41 -0700;Merge pull request #405 from certik/pr400_fix
BUG: Fix ticket #1588/gh issue #398, refcount error in clip
==
==================
1039880;Ondřej Čertík;2012-08-31 15:27:13 -0700;BUG: Add a test for Ticket #1588
The bug was fixed by the previous patch.

==

numpy/core/tests/test_regression.py
==================
8b2e6be;Mark Wiebe;2012-08-31 00:44:19 -0700;BUG: Fix ticket #1588/gh issue #398, refcount error in clip
This patch enforces a strict dichotomy for the variables 'indescr'
and 'newdescr', so they are either NULL, or they own a reference.
Following the consequences of this allowed the reference error
to be tracked down.

==

numpy/core/src/multiarray/calculation.c
==================
8c75aa0;Ondřej Čertík;2012-08-31 15:04:29 -0700;Merge pull request #395 from certik/fix369
FIX: bug in np.where and recarray swapping
==
==================
0086bbc;Ondřej Čertík;2012-08-31 14:46:26 -0700;FIX: simplify the import statement

==

numpy/core/_internal.py
==================
c6d8734;Ondřej Čertík;2012-08-31 14:45:39 -0700;Merge pull request #401 from jayvius/get-view-fix
BUG: Fix Ticket #2187
==
==================
93100c9;Jay Bourque;2012-08-31 12:51:44 -0500;Fix returned copy
Fix returned copy so that copy of view with offsets copies only fields in view, not all the fields from original array. Also add unit tests to make sure this doesn't break when copy is fully deprecated in favor of returning a view.

==

numpy/core/_internal.py
numpy/core/tests/test_multiarray.py
==================
68320a1;njsmith;2012-08-31 05:52:28 -0700;Merge pull request #390 from rgommers/silence-deprecation-warning
MAINT: silence DeprecationWarning in np.safe_eval().
==
==================
ecbd938;Ondřej Čertík;2012-08-29 17:36:02 -0700;FIX: bug in np.where and recarray swapping
Fixes #369 and the Ticket 2185

Thanks to @seberg for providing the patch.

==

numpy/core/src/multiarray/scalarapi.c
numpy/core/tests/test_regression.py
==================
5c944b9;David Cournapeau;2012-08-22 06:05:52 -0700;Merge pull request #386 from certik/yop_atlas
pavement.py: rename "yop" to "atlas"
==
==================
132b373;Ralf Gommers;2012-08-22 10:33:38 +0200;MAINT: silence DeprecationWarning in np.safe_eval().
It comes from the Python compiler package, which isn't available on Python 3.x.
We already handle that issue by instead importing the ast module.

==

numpy/lib/utils.py
==================
fb2df76;Ondrej Certik;2012-08-14 07:40:01 -0700;pavement.py: rename "yop" to "atlas"

==

pavement.py
==================
63cd8f3;David Cournapeau;2012-08-11 00:23:41 +0100;BUG: fix bento build.

==

numpy/core/bscript
==================
1e7979f;cgohlke;2012-08-07 19:15:08 -0700;Remove test_recarray_from_long_formats

==

numpy/core/tests/test_records.py
==================
e391a44;cgohlke;2012-08-07 19:13:33 -0700;Add test for long number in shape specifier of dtype string

==

numpy/core/tests/test_dtype.py
==================
1079fa4;cgohlke;2012-08-06 17:04:33 -0700;Add test for long numbers in numpy.rec.array formats string

==

numpy/core/tests/test_records.py
==================
d009f0f;cgohlke;2012-08-06 16:05:41 -0700;Allow long numbers in numpy.rec.array formats string

==

numpy/core/_internal.py
==================
fcdbcac;Charles Harris;2012-08-04 05:35:48 -0700;Merge pull request #373 from cianci/concatenate_leak_fix
Fix memory leak in concatenate.
==
==================
4676f33;Travis E. Oliphant;2012-08-03 22:46:21 -0700;Merge pull request #372 from certik/py3.3-cleaner
A fix for the PyUnicodeObject Python 3.3
==
==================
f2ac38f;Ondrej Certik;2012-08-03 10:39:25 -0700;Use PyUnicode_DecodeUTF32()
This function handles the swapping automatically and it returns a unicode
object in one of: UCS1, UCS2 or UCS4 internal Python format.

==

numpy/core/src/multiarray/scalarapi.c
==================
09d2c51;Ondrej Certik;2012-08-03 09:36:46 -0700;Follow the C guidelines

==

numpy/core/src/multiarray/scalarapi.c
==================
8a4e0f5;Chris;2012-07-30 13:12:31 -0700;Fix memory leak in concatenate.
Temporary array was not being freed after use.

==

numpy/core/src/multiarray/multiarraymodule.c
==================
4234b6b;Ondrej Certik;2012-08-03 07:27:42 -0700;FIX: Make sure the tests produce valid unicode
The tests are testing byte order for unicode, so we can only use such unicode
data, so that both versions (swapped and unswapped) are valid unicode.

==

numpy/core/tests/test_unicode.py
==================
a9d58ab;Ondrej Certik;2012-07-27 12:16:12 -0700;FIX: Fixes the PyUnicodeObject problem in py-3.3
Previously NumPy did not compile in Python 3.3 due to the changes in PEP 393.
This patch simply calls PyUnicode_FromKindAndData() from the new Python 3.3 API
and possibly swaps the data before calling it if needed. The data in NumPy is always UCS4 and the PyUnicode_FromKindAndData() internally converts it to UCS1, UCS2 or UCS4 depending on the maximum code point.

The following tests now fail, because they produce invalid unicode in the
process (will be fixed in the next patch):

======================================================================
ERROR: Check byteorder of 0-dimensional objects
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/ondrej/py33/lib/python3.3/site-packages/numpy/core/tests/test_unicode.py", line 277, in test_values0D
    self.assertTrue(ua[()] != ua2[()])
SystemError: invalid maximum character passed to PyUnicode_New

======================================================================
ERROR: Check byteorder of multi-dimensional objects
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/ondrej/py33/lib/python3.3/site-packages/numpy/core/tests/test_unicode.py", line 297, in test_valuesMD
    self.assertTrue(ua[0,0,0] != ua2[0,0,0])
SystemError: invalid maximum character passed to PyUnicode_New

======================================================================
ERROR: Check byteorder of single-dimensional objects
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/ondrej/py33/lib/python3.3/site-packages/numpy/core/tests/test_unicode.py", line 286, in test_valuesSD
    self.assertTrue(ua[0] != ua2[0])
SystemError: invalid maximum character passed to PyUnicode_New

======================================================================
ERROR: Check byteorder of 0-dimensional objects
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/ondrej/py33/lib/python3.3/site-packages/numpy/core/tests/test_unicode.py", line 277, in test_values0D
    self.assertTrue(ua[()] != ua2[()])
SystemError: invalid maximum character passed to PyUnicode_New

======================================================================
ERROR: Check byteorder of multi-dimensional objects
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/ondrej/py33/lib/python3.3/site-packages/numpy/core/tests/test_unicode.py", line 297, in test_valuesMD
    self.assertTrue(ua[0,0,0] != ua2[0,0,0])
SystemError: invalid maximum character passed to PyUnicode_New

======================================================================
ERROR: Check byteorder of single-dimensional objects
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/ondrej/py33/lib/python3.3/site-packages/numpy/core/tests/test_unicode.py", line 286, in test_valuesSD
    self.assertTrue(ua[0] != ua2[0])
SystemError: invalid maximum character passed to PyUnicode_New

==

numpy/core/src/multiarray/scalarapi.c
numpy/core/src/multiarray/scalartypes.c.src
==================
fd15162;Travis E. Oliphant;2012-08-02 20:52:39 -0700;Merge pull request #371 from rlamy/bytes-pickle
Copy bytes object for small arrays when unpickling an array
==
==================
d183928;Ronan Lamy;2012-08-03 03:44:47 +0100;Re-enable unpickling optimization for large py3k bytes objects.
Mutating a bytes object is theoretically unsafe, but doesn't cause any
problem in any existing version of CPython.

==

numpy/core/src/multiarray/methods.c
==================
339c35f;Ronan Lamy;2012-07-31 05:40:51 +0100;Copy bytes object when unpickling an array

==

numpy/core/src/multiarray/methods.c
numpy/core/tests/test_regression.py
==================
e0457eb;Bradley M. Froehle;2012-07-24 15:59:53 -0700;BUG: Exported f2py_size symbol prevents linking multiple f2py modules.

==

numpy/f2py/cfuncs.py
==================
26fed25;Charles Harris;2012-07-29 05:36:39 -0700;Merge pull request #367 from cgohlke/patch-1
Fix tests for empty shape, strides and suboffsets on Python 3.3
==
==================
02f3d1f;cgohlke;2012-07-28 23:19:55 -0700;Fix tests for empty shape, strides and suboffsets on Python 3.3

==

numpy/core/tests/test_multiarray.py
==================
b74c6be;njsmith;2012-07-26 09:12:41 -0700;Merge pull request #362 from njsmith/missing-header
[FIX] Add missing header so separate compilation works again
==
==================
f2f0ac0;Ralf Gommers;2012-07-20 08:59:56 -0700;Merge pull request #364 from jiffyclub/update-testing-reference-docs
Update Testing Reference Docs
==
==================
bc9c0a9;Matt Davis;2012-07-20 10:11:57 -0500;Added entries for assert_allclose, assert_array_almost_equal_nulp, and assert_array_max_ulp into the numpy testing reference documentation.

==

doc/source/reference/routines.testing.rst
==================
eebd7b2;Nathaniel J. Smith;2012-07-18 21:20:27 +0100;[FIX] Add missing header so separate compilation works again
(Broken by PR #350.)

Should be applied to maintenance/1.7.x as well.

==

numpy/core/src/multiarray/mapping.c
==================
9cb8c3b;Travis E. Oliphant;2012-07-18 01:19:25 -0500;Merge remote-tracking branch 'upstream/master'

==
==================
efcb8bf;Travis E. Oliphant;2012-07-18 01:18:27 -0500;Update release notes.

==

doc/release/1.8.0-notes.rst
doc/release/2.0.0-notes.rst
==================
a806876;Travis E. Oliphant;2012-07-17 22:25:37 -0700;Merge pull request #325 from ahmadia/patch-2
prefer gfortran (gnu95) over vendor compilers, g77, g95 on OSX & Linux
==
==================
5b4e61b;Travis E. Oliphant;2012-07-17 22:47:06 -0500;BUG: Fix some tests in PR #192

==

numpy/lib/tests/test_function_base.py
==================
88cf94d;Travis E. Oliphant;2012-07-17 21:55:08 -0500;Fix-up logic so that it is more readable.

==

numpy/core/src/multiarray/common.c
==================
7b8d30b;Travis E. Oliphant;2012-07-17 21:45:48 -0500;Merge remote-tracking branch 'hackerschool/2028fix'

==
==================
bc10053;Travis E. Oliphant;2012-07-17 19:37:09 -0700;Merge pull request #350 from jayvius/get-view2
Add transition code for returning view when selecting subset of fields
==
==================
578a419;Travis E. Oliphant;2012-07-17 19:26:39 -0700;Merge pull request #352 from HackerSchool12/bugfix808
BF bug #808
==
==================
0b2bfa9;Travis E. Oliphant;2012-07-17 19:25:56 -0700;Merge pull request #192 from rgommers/meshgrid3d
Meshgrid enhancements (>2-D, sparse grids, matrix indexing)
==
==================
c83e5b6;Travis E. Oliphant;2012-07-17 19:22:28 -0700;Merge pull request #327 from teoliphant/restore_api
Restore ability to not include semi-colons.
==
==================
bf2c101;njsmith;2012-07-17 16:36:05 -0700;Merge pull request #348 from njsmith/fix-shuffle
[FIX] Make np.random.shuffle less brain-dead
==
==================
2d4a1cf;Aron Ahmadia;2012-07-17 17:06:13 -0500;prefer gfortran over g77 and vendor compilers on OS X and Linux

==

numpy/distutils/fcompiler/__init__.py
==================
a419a30;Aron Ahmadia;2012-07-17 16:59:50 -0500;Merge branch 'master' of https://github.com/numpy/numpy into patch-2

==
==================
a03e8b4;Jay Bourque;2012-07-17 16:03:41 -0500;change DeprecationWarning to FutureWarning

==

doc/release/1.7.0-notes.rst
doc/source/reference/arrays.indexing.rst
numpy/core/tests/test_multiarray.py
==================
2eb9610;Jay Bourque;2012-07-17 15:42:01 -0500;Add tests for record array indexing
- add tests for record array indexing with multiple field names
- add tests for DeprecationWarning when writing to array returned
  by record array indexing with multiple field names

==

numpy/core/tests/test_multiarray.py
==================
bf58296;Jay Bourque;2012-07-17 13:43:18 -0500;update 1.7 release notes

==

doc/release/1.7.0-notes.rst
==================
781468b;Jay Bourque;2012-07-17 11:59:56 -0500;Updated reference docs for DeprecationWarning

==

doc/source/reference/arrays.indexing.rst
numpy/core/src/multiarray/arrayobject.c
==================
a32325d;jayvius;2012-07-12 13:39:19 -0500;Call view object's copy method

==

numpy/core/_internal.py
==================
91cb088;jayvius;2012-07-12 13:38:17 -0500;Change WARN_ON_WRITE Deprecation Warning
Change WARN_ON_WRITE Deprecation Warning to include returning a copy
when selecting muultiple fields of a structured array.

==

numpy/core/src/multiarray/arrayobject.c
==================
0c09e1f;jayvius;2012-07-12 13:37:28 -0500;fix previous commit to return copy of view instead of view

==

numpy/core/_internal.py
numpy/core/src/multiarray/mapping.c
==================
6363bb7;jayvius;2012-07-12 13:35:52 -0500;Add ability to get view when selecting subset of fields.
Add ability to get view when selecting subset of fields in a struct array,
for numpy 1.8.0. Currently a copy is still returned - set WARN_ON_WRITE flag
which will be removed in a future version of numpy.

==

numpy/core/_internal.py
numpy/core/src/multiarray/mapping.c
==================
6c772fa;Travis E. Oliphant;2012-07-17 13:51:34 -0700;Merge pull request #361 from njsmith/warn-on-write-futurewarning
Switch WARN_ON_WRITE to issuing FutureWarnings instead of DeprecationWarnings
==
==================
b8a2ea7;Travis E. Oliphant;2012-07-17 15:03:05 -0500;DOC: Update API description with suggestions from charris.

==

doc/source/reference/c-api.deprecations.rst
==================
b798f12;Nathaniel J. Smith;2012-07-17 16:56:04 +0100;Switch WARN_ON_WRITE to issuing FutureWarnings instead of DeprecationWarnings
FutureWarnings are displayed by default, so they should be used
whenever a future change will change the semantics of existing code
(as opposed to making existing code simply stop working).

List discussion:
  http://www.mail-archive.com/numpy-discussion@scipy.org/msg37500.html

==

doc/release/1.7.0-notes.rst
numpy/core/fromnumeric.py
numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/multiarray/arrayobject.c
numpy/core/tests/test_multiarray.py
==================
b26c675;Nathaniel J. Smith;2012-07-12 13:20:20 +0100;[FIX] Make np.random.shuffle less brain-dead
The logic in np.random.shuffle was... not very sensible. Fixes trac
ticket #2074.

This patch also exposes a completely unrelated issue in
numpy.testing. Filed as Github issue #347 and marked as knownfail for
now.

==

numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
numpy/random/tests/test_random.py
numpy/random/tests/test_regression.py
numpy/testing/tests/test_utils.py
==================
93e42dd;Travis E. Oliphant;2012-07-17 03:03:46 -0500;DOC: update language of C-API deprecations.

==

doc/source/reference/c-api.deprecations.rst
==================
1234d1c;Charles Harris;2012-07-16 14:09:24 -0700;Merge pull request #360 from cgohlke/patch-3
Fix `WindowsError: [Error 32]` in test_not_closing_opened_fid (test_io.T...
==
==================
08c507b;cgohlke;2012-07-16 13:48:47 -0700;Fix `WindowsError: [Error 32]` in test_not_closing_opened_fid (test_io.TestSavezLoad)

==

numpy/lib/tests/test_io.py
==================
f369ed6;Charles Harris;2012-07-16 12:56:29 -0700;Merge pull request #332 from nouiz/fillwbyte_doc
Add doc for PyArray_FILLWBYTE to tell the ndarray must be c contiguous.
==
==================
0d59c78;Frederic;2012-07-16 15:51:25 -0400;better new doc sentence following code review.

==

doc/source/reference/c-api.array.rst
==================
4d37169;Ralf Gommers;2012-07-15 18:01:13 +0200;DOC: add info on docstrings in test functions/methods.  Also fix a typo.
Reviewed by @charris in combination with PR-358.

==

doc/TESTS.rst.txt
==================
78f6672;Eric Fode;2012-07-15 12:00:41 -0400;Added cast to error check, and fixed indentation.

==

numpy/core/src/multiarray/common.c
==================
4a2295d;njsmith;2012-07-15 08:37:05 -0700;Merge pull request #358 from rgommers/howto-generator-tests
DOC: add details on how to use generator tests to documentation.
==
==================
23dba57;Ralf Gommers;2012-07-15 17:30:22 +0200;DOC: add details on how to use generator tests to documentation.
Thanks to Pauli Virtanen for this useful suggestion.

==

doc/TESTS.rst.txt
==================
120c6bd;Eric Fode;2012-07-15 01:31:25 -0400;more tabs removed (hunting for c formatter to take care of this next time)

==

numpy/core/src/multiarray/common.c
==================
2c04244;Loftie Ellis;2012-07-10 17:20:53 -0400;BUG: Ticket #808: Insert was not performing properly when an integer was the argument passed to be used as the item to be insterted, and a list was passed as the positions. This was fixed by simply duplicating the item to be inserted so that it was a list of equal length and then control was passed to the already exsisting code to handel this case

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
681bceb;Eric Fode;2012-07-14 23:57:51 -0400;Tab Fix

==

numpy/core/src/multiarray/common.c
==================
3d31029;Eric Fode;2012-07-14 23:55:31 -0400;Style Fix

==

numpy/core/src/multiarray/common.c
==================
f9c6867;Charles Harris;2012-07-14 19:35:19 -0600;Merge branch 'pull-357'
* pull-357:
  BUG: change default threshold for matrix_rank

==
==================
78b7693;Matthew Brett;2012-07-14 17:53:10 -0700;BUG: change default threshold for matrix_rank
The default tolerance threshold for matrix_rank was passing as full rank
some matrices that were numerically rank deficient.  This commit changes
the default tolerance to match the algorithm in MATLAB and Numerical
recipes.

==

numpy/linalg/linalg.py
numpy/linalg/tests/test_linalg.py
==================
6966bdc;Eric Fode;2012-07-10 14:09:44 -0400;BUG: ticket #2028: When min_scalar was not checking to see if numbers could fit into unsigned long longs. This was fixed by adding an extra case to function to check if the passed number could fit into a unsigned long long if it could not fit into anything else. Additionaly, regression tests were added.

==

numpy/core/src/multiarray/common.c
numpy/core/tests/test_multiarray.py
==================
6a1ab03;Charles Harris;2012-07-14 08:51:48 -0700;Merge pull request #355 from charris/updated-pull-307
Put PyIndex_Check in a private include file.
==
==================
9e5efde;Charles Harris;2012-07-14 09:36:52 -0600;STY: Remove duplicate #include.

==

numpy/core/src/multiarray/nditer_pywrap.c
==================
6123625;Eric Fode;2012-07-13 13:58:13 -0400;fixed some style problems

==

numpy/core/src/scalarmathmodule.c.src
numpy/core/tests/test_scalarmath.py
==================
423ddfb;Pauli Virtanen;2012-06-11 22:21:30 +0200;STY: core: move non-Py3 specific stuff out from npy_3kcompat.h to private npy_pycompat.h
npy_3kcompat.h is semi-private, so this can be done.

==

numpy/core/include/numpy/npy_3kcompat.h
numpy/core/src/dummymodule.c
numpy/core/src/multiarray/array_assign.c
numpy/core/src/multiarray/array_assign_array.c
numpy/core/src/multiarray/array_assign_scalar.c
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/buffer.c
numpy/core/src/multiarray/calculation.c
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/conversion_utils.c
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/datetime_busday.c
numpy/core/src/multiarray/datetime_busdaycal.c
numpy/core/src/multiarray/datetime_strings.c
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/einsum.c.src
numpy/core/src/multiarray/flagsobject.c
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/hashdescr.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarray_tests.c.src
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/nditer_impl.h
numpy/core/src/multiarray/nditer_pywrap.c
numpy/core/src/multiarray/number.c
numpy/core/src/multiarray/numpymemoryview.c
numpy/core/src/multiarray/numpyos.c
numpy/core/src/multiarray/refcount.c
numpy/core/src/multiarray/scalarapi.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/multiarray/sequence.c
numpy/core/src/multiarray/shape.c
numpy/core/src/multiarray/ucsnarrow.c
numpy/core/src/multiarray/usertypes.c
numpy/core/src/private/npy_pycompat.h
numpy/core/src/scalarmathmodule.c.src
numpy/core/src/umath/funcs.inc.src
numpy/core/src/umath/loops.c.src
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/ufunc_type_resolution.c
numpy/core/src/umath/umath_tests.c.src
numpy/lib/src/_compiled_base.c
==================
ce0a791;Pauli Virtanen;2012-06-11 22:09:47 +0200;BUG: core: don't pollute public namespace with PyIndex_Check on Python 2.4
Public numpy headers shouldn't define a replacement PyIndex_Check.  This
causes unexpected behavior in Python2.4 in 3rd party code.

==

numpy/core/include/numpy/npy_3kcompat.h
numpy/core/include/numpy/npy_common.h
==================
afcc4cd;Charles Harris;2012-07-13 08:37:49 -0700;Merge pull request #354 from cgohlke/patch-2
Add numpy specific fseek, ftell to avoid potential problems with windows and amd64.
==
==================
4e74a93;cgohlke;2012-07-12 20:58:35 -0700;Use npy_ftell and npy_fseek

==

numpy/core/src/multiarray/ctors.c
==================
2ee97d6;cgohlke;2012-07-12 20:57:02 -0700;Use npy_ftell and npy_fseek

==

numpy/core/include/numpy/npy_3kcompat.h
==================
7a060fe;cgohlke;2012-07-12 20:54:39 -0700;define npy_fseek and npy_ftell

==

numpy/core/include/numpy/npy_common.h
==================
24b74a2;Charles Harris;2012-07-12 16:41:58 -0700;Merge pull request #353 from bfroehle/py3k_raise
ENH: np.testing.decorators: Use Py3k compatible raise syntax
==
==================
18d6b8f;Bradley M. Froehle;2012-07-12 16:11:46 -0700;ENH: np.testing.decorators: Use Py3k compatible raise syntax

==

numpy/testing/decorators.py
==================
a77a7cd;Eric Fode;2012-07-12 15:35:44 -0400;First attempt at BF for 2028 and added better tests for scalarmath pow function

==

numpy/core/src/scalarmathmodule.c.src
numpy/core/tests/test_scalarmath.py
==================
143fb18;Charles Harris;2012-07-11 17:17:00 -0600;DOC: Forward port 1.7.0 release notes

==

doc/release/1.7.0-notes.rst
==================
7eec4e3;Charles Harris;2012-07-11 16:58:31 -0700;Merge pull request #344 from HackerSchool12/gitignoreupdate
added generated c files to gitignore
==
==================
09c1e40;Travis E. Oliphant;2012-07-11 15:48:37 -0700;Merge pull request #345 from rgommers/ticket-1664-powerpc-failure
TST: mark longdouble tests for spacing/nextafter as knownfail on PPC.
==
==================
817e897;Eric Fode;2012-07-11 18:40:01 -0400;requested filetypes and dirs to gitignore

==

.gitignore
==================
7bd9185;rgommers;2010-11-08 21:24:59 +0800;TST: mark longdouble tests for spacing/nextafter as knownfail on PPC.
See #1664.
Thanks to Matthew Brett for suggesting this improved detection of PPC.

==

numpy/core/tests/test_umath.py
==================
149dede;Eric Fode;2012-07-11 18:01:44 -0400;added generated c files to gitignore

==

.gitignore
==================
e50d16e;Ralf Gommers;2012-07-11 14:36:54 -0700;Merge pull request #337 from rgommers/pull-335-genfromtxt
BUG: make genfromtxt work with comments=None.  Closes Github issue 329.
==
==================
0920bed;njsmith;2012-07-11 13:59:43 -0700;Merge pull request #324 from walshb/fix_memcpy_overlap
Use memmove instead of memcpy for strided copies, since src and dst can overlap.
==
==================
f4c47a5;Charles Harris;2012-07-11 13:53:27 -0700;Merge pull request #339 from charris/generic-sorts
Add generic versions of heapsort and mergesort so that those sorts will be available to all numpy types. The generic versions are probably not as fast as the type specific versions, but they will always be there.
==
==================
76d5ae8;Charles Harris;2012-07-11 13:12:12 -0600;UPD: Replace PyDataMem_{NEW,FREE} by malloc and free.
PyDataMem_{NEW,FREE} are part of the numpy api after 8ecb4b23
and that fits poorly with the sort library. This means a fair
amount of memory usage may go untracked due to the work array
needed by mergesort.

==

numpy/core/src/npysort/mergesort.c.src
==================
895ed81;Charles Harris;2012-07-11 12:43:04 -0600;BUG: test_unique needs to test bigger arrays.
Small arrays are sorted with insertion sort, which is a stable
sort.  Consequently larger arrays are needed to check that the
sort used is properly stable.

The test was also refactored to make it more compact.

==

numpy/lib/tests/test_arraysetops.py
==================
5a929a4;Charles Harris;2012-07-11 11:54:57 -0600;TST: Improve type coverage in test_unique.

==

numpy/lib/tests/test_arraysetops.py
==================
cd3e1e2;Charles Harris;2012-07-10 21:49:08 -0600;BUG: Add include needed for separate compilation.

==

numpy/core/src/multiarray/item_selection.c
==================
591ed4e;Charles Harris;2012-07-10 20:29:24 -0600;ENH: Refactor mergesort so that the code is more consistent.
One small step on the way to a template to rule them all.

==

numpy/core/src/npysort/mergesort.c.src
==================
7036fb3;Charles Harris;2012-07-10 16:55:52 -0600;ENH: Make sort tests use prime number of elements.

==

numpy/core/tests/test_multiarray.py
==================
5be7e01;Charles Harris;2012-07-09 21:26:31 -0600;ENH: Add generic sorts for quicksort, heapsort, and mergesort.
These all have the same signature as the c qsort apart from an
error return that is needed for memory allocation errors.  With
these functions the different kinds of sorts are made available
for types that don't have type specific sorts.

This fixes the np.unique bug introduced in 1.6.2 where record
arrays and such didn't have mergesort. It also allows lexsort to
work with all array types.

==

numpy/core/src/multiarray/item_selection.c
numpy/core/src/npysort/heapsort.c.src
numpy/core/src/npysort/mergesort.c.src
numpy/core/src/npysort/npysort_common.h
numpy/core/src/npysort/quicksort.c.src
numpy/core/src/private/npy_sort.h
numpy/core/tests/test_multiarray.py
==================
286a15f;Charles Harris;2012-07-07 21:36:23 -0600;ENH: Add tests for object and structured array sorts.
The tests only cover quicksort at this time. This is preparation
for adding type specific sorts of object and structured arrays.

==

numpy/core/tests/test_multiarray.py
==================
d619a0d;Charles Harris;2012-07-07 20:40:12 -0600;ENH: Split sort source file by sort kind.
The different sort kinds are now located in

    quicksort.c.src
    mergesort.c.src
    heapsort.c.src

Both direct and indirect sorts are included in each file. This cleanup
was done so that additional sorts or quickselect could be added without
undue clutter.

==

numpy/core/SConscript
numpy/core/bento.info
numpy/core/setup.py
numpy/core/src/npysort/heapsort.c.src
numpy/core/src/npysort/mergesort.c.src
numpy/core/src/npysort/quicksort.c.src
numpy/core/src/npysort/sort.c.src
==================
6f335e0;Travis E. Oliphant;2012-07-11 13:24:23 -0500;Fix-up deprecations language.

==

doc/source/reference/c-api.deprecations.rst
==================
9a4ef17;Travis E. Oliphant;2012-07-11 13:13:53 -0500;Fix the deprecations language.

==

doc/source/reference/c-api.deprecations.rst
==================
3556a2b;Ralf Gommers;2012-07-11 18:49:32 +0200;BUG: genfromtxt: make comments=None work with spaces in strings.

==

numpy/lib/_iotools.py
numpy/lib/tests/test_io.py
==================
8ecb4b2;njsmith;2012-07-11 06:53:45 -0700;Merge pull request #309 from thouis/malloc_hooks
ENH: expose PyDataMem_NEW/FREE/RENEW as numpy API functions with an event hook.
==
==================
64c3a8f;Nathaniel J. Smith;2012-07-11 14:26:33 +0100;Add separate-build tests to tox.ini

==

tox.ini
==================
1a70875;martingoodson;2012-07-10 16:31:03 +0200;BUG: make genfromtxt work with comments=None.  Closes Github issue 329.

==

numpy/lib/npyio.py
numpy/lib/tests/test_io.py
==================
436a28f;Ralf Gommers;2012-07-07 16:07:39 +0200;Merge branch 'merge-wiki-edits' into master.

==
==================
ffca058;Ralf Gommers;2012-07-07 15:06:30 +0200;GEN: regenerate mtrand.c to make doc changes show up.

==

numpy/random/mtrand/mtrand.c
==================
0e9e107;Ralf Gommers;2012-07-07 15:03:31 +0200;DOC: merge doc wiki edits.  A number of small edits in linalg and lib.

==

numpy/lib/arraysetops.py
numpy/lib/function_base.py
numpy/lib/type_check.py
numpy/linalg/linalg.py
==================
2c9981b;Ralf Gommers;2012-05-05 21:16:13 +0200;DOC: merge wiki edits.  Add percentile to statistics routines (ML suggestion).

==

doc/source/reference/index.rst
doc/source/reference/routines.statistics.rst
numpy/add_newdocs.py
numpy/core/numeric.py
numpy/core/shape_base.py
numpy/lib/function_base.py
numpy/lib/npyio.py
numpy/random/mtrand/mtrand.pyx
numpy/testing/nosetester.py
==================
3445712;Ralf Gommers;2012-07-07 14:37:02 +0200;DOC: merge wiki edits for chararray.  Thanks to Tim Cera.

==

numpy/core/defchararray.py
==================
5df8f24;Ralf Gommers;2012-07-07 14:29:45 +0200;DOC: merge wiki docs - edits under doc/.

==

doc/source/dev/gitwash/development_setup.rst
doc/source/reference/index.rst
doc/source/reference/routines.matlib.rst
doc/source/reference/routines.polynomials.rst
doc/source/reference/routines.random.rst
doc/source/reference/routines.statistics.rst
==================
b426539;Thouis (Ray) Jones;2012-07-06 23:43:50 +0200;Update C-API version hash

==

numpy/core/code_generators/cversions.txt
==================
aeff403;Thouis (Ray) Jones;2012-07-06 23:42:57 +0200;Merge remote-tracking branch 'upstream/master' into malloc_hooks

==
==================
3b9a0fe;njsmith;2012-07-06 14:01:54 -0700;Merge pull request #328 from yarikoptic/master
fix ticket #2178: "own" (to close) file handles in load() only if they were not opened before
==
==================
613589e;Yaroslav Halchenko;2012-07-06 15:26:26 -0400;BF(PY3): open file handles in tests in binary mode
otherwise zipfile of python3 gets confused to receive bytes for the header
whenever handle is opened for a text (unicode) file

==

numpy/lib/tests/test_io.py
==================
dd86cb3;njsmith;2012-07-06 09:35:07 -0700;Merge pull request #323 from njsmith/zero-size-reductions
BUG: handle length-0 axes correctly in ufunc.reduce without identity
==
==================
b009f97;Frederic;2012-07-06 10:28:40 -0400;Add doc for PyArray_FILLWBYTE to tell the ndarray must be c contiguous.

==

doc/source/reference/c-api.array.rst
==================
c35c83c;Yaroslav Halchenko;2012-07-05 10:18:09 -0400;BF: removed too much -- own_fid should be False while working with .npz

==

numpy/lib/npyio.py
==================
81a03cf;Yaroslav Halchenko;2012-07-05 09:56:26 -0400;ENH: added a rudimentary test for having #1517 (too many open files) fixed

==

numpy/lib/tests/test_io.py
==================
153f764;Yaroslav Halchenko;2012-07-05 09:34:42 -0400;ENH: Since file handle could not be reopened (during load()) -- no need for "isclosed" logic

==

numpy/lib/npyio.py
==================
731cf3a;Sveinung Gundersen;2012-07-03 11:31:40 +0200;BUG: fix incorrect references to parents in memmap children.

==

numpy/core/memmap.py
numpy/core/tests/test_memmap.py
==================
4219824;Yaroslav Halchenko;2012-07-02 19:00:14 -0400;BF: PY3 and PY2 < 2.7 compatibility fixes for prev 2 commits

==

numpy/lib/npyio.py
==================
0e3a3d9;Yaroslav Halchenko;2012-07-02 16:38:09 -0400;ENH: unittest for preceeding commit fixing #2178

==

numpy/lib/tests/test_io.py
==================
4df2444;Yaroslav Halchenko;2012-07-02 16:03:53 -0400;BUG: do not "own" the FID for GzipFile and file if provided to load already opened (ticket #2178)
Also made all assignments of own_file go in pair with assignments to fid to make things clearer

==

numpy/lib/npyio.py
==================
d2c8843;Ben Walsh;2012-06-30 09:57:01 +0100;Removed misleading comment.

==

numpy/core/tests/test_multiarray_assignment.py
==================
4f03448;Ben Walsh;2012-06-30 09:17:30 +0100;Added test for overlapping array assignments.

==

numpy/core/tests/test_multiarray_assignment.py
==================
85a6607;Ben Walsh;2012-06-30 09:16:28 +0100;Replaced all instances of memcpy with memmove.

==

numpy/core/src/multiarray/lowlevel_strided_loops.c.src
==================
1d4decd;Travis E. Oliphant;2012-06-28 10:42:11 -0500;API: Restore ability to not use semicolons.

==

numpy/core/include/numpy/ufuncobject.h
==================
7316499;ahmadia;2012-06-28 00:21:25 +0300;prefer gfortran (g95) over vendor compilers, g77 and g95 on OSX and Linux.
Retain preference for g77 on Windows and vendor compilers on other platforms. 
==

numpy/distutils/fcompiler/__init__.py
==================
2014f27;Ben Walsh;2012-06-27 20:58:37 +0100;Fix two instances of memcpy with overlapping source and destination.

==

numpy/core/src/multiarray/lowlevel_strided_loops.c.src
==================
15738e1;Nathaniel J. Smith;2012-05-20 18:18:13 +0100;BUG: handle length-0 axes correctly in ufunc.reduce without identity
In numpy 1.6, reduction operations with no identity
(e.g. numpy.maximum) gave an error iff they were asked to reduce a
0-element dimension. This regressed during the 1.7 development cycle,
so that they started giving an error if *any* dimension had 0
elements, even ones that were not reduced over. Fixes bug #2078.

==

numpy/core/src/umath/reduction.c
numpy/core/tests/test_ufunc.py
==================
e15d0bd;Travis E. Oliphant;2012-06-26 19:59:09 -0700;Merge pull request #322 from stefanv/fix_np_core_bscript
PKG: Fix numpy core bscript.
==
==================
56183d7;Stefan van der Walt;2012-06-26 18:23:14 -0700;PKG: Fix numpy core bscript.

==

numpy/core/bscript
==================
da3da3d;Stefan van der Walt;2012-06-26 15:53:01 -0700;Merge pull request #321 from rgommers/update-howto-release
DOC: update HOWTO_RELEASE document.
==
==================
5639414;Ralf Gommers;2012-06-26 23:53:15 +0200;DOC: update HOWTO_RELEASE document.

==

doc/HOWTO_RELEASE.rst.txt
==================
8006fd4;Travis E. Oliphant;2012-06-25 13:33:14 -0500;Restore ability to not include semi-colons.

==

numpy/core/include/numpy/ndarraytypes.h
==================
6a06466;njsmith;2012-06-25 02:22:38 -0700;Merge pull request #317 from cournape/travis_ci_separate_compilation
Travis ci separate compilation
==
==================
465c2f4;David Cournapeau;2012-06-24 23:15:29 +0100;BUG: fix separate compilation (with distutils only for now).

==

numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/datetime_busdaycal.h
numpy/core/src/umath/reduction.c
==================
6bb3ef6;David Cournapeau;2012-06-24 23:15:08 +0100;TST: fix .travis.yml to re-enable python 2.4 builds.

==

.travis.yml
==================
e57266c;David Cournapeau;2012-06-24 22:29:53 +0100;TST: fix matrix def in travis to avoid unwanted builds.

==

.travis.yml
==================
e29dc43;David Cournapeau;2012-06-24 22:27:16 +0100;ENH: handle separate compilation in bento as in setup.py.

==

numpy/core/bscript
==================
6e1e61d;David Cournapeau;2012-06-24 22:13:32 +0100;TST: add separate compilation to travis-ci matrix.
We only test 2.7 and 3.2 for now. If NumFocus does a donation, maybe we
can reasonably expand to all the versions we care about.

==

.travis.yml
==================
9982831;David Cournapeau;2012-06-24 22:11:46 +0100;ENH: allow NPY_SEPARATE_COMPILATION to be set to 0 to disallow separate build.

==

numpy/core/setup.py
==================
699c2f3;Ralf Gommers;2012-06-21 21:44:25 +0200;BLD: fix Bento and Numscons builds, that were broken in b272bc60.

==

numpy/core/SConscript
numpy/core/bscript
==================
eee4651;Travis E. Oliphant;2012-06-21 05:10:10 -0500;Change version number on master to 1.8

==

setup.py
==================
db1701b;Travis E. Oliphant;2012-06-21 04:56:49 -0500;BUG: Fix boolean indexing to previous behavior by adding an additional check before using the new code path.  Add tests.

==

doc/release/2.0.0-notes.rst
numpy/core/src/multiarray/mapping.c
numpy/core/tests/test_multiarray.py
==================
134174c;Travis E. Oliphant;2012-06-21 01:37:01 -0700;Merge pull request #297 from njsmith/separate-maskna
Split maskna support out of mainline into a branch
==
==================
651ef74;njsmith;2012-06-20 08:45:09 -0700;Merge pull request #313 from endolith/patch-1
fix typos
==
==================
493f23d;endolith;2012-06-20 12:24:39 -0300;fix typos

==

numpy/core/function_base.py
==================
5b5a0f4;Thouis (Ray) Jones;2012-06-18 11:50:28 +0200;Wrap hook functions with GIL, add example.
Wraps the SetHook and calls to the hook with the GIL, to prevent races.
Adds an example of using the interface for callbacks into python code.

==

numpy/core/src/multiarray/multiarraymodule.c
tools/allocation_tracking/alloc_hook.pyx
tools/allocation_tracking/setup.py
tools/allocation_tracking/sorttable.js
tools/allocation_tracking/track_allocations.py
==================
36681eb;Nathaniel J. Smith;2012-06-16 18:08:50 +0100;travis-ci: add python 3.1 to the list of tested versions.

==

.travis.yml
==================
d129a54;Nathaniel J. Smith;2012-06-16 17:33:41 +0100;Disable email notifications from travis-ci for now

==

.travis.yml
==================
27c7526;Nathaniel J. Smith;2012-06-16 17:29:22 +0100;Merge remote-tracking branch 'msabramo/travis'

==
==================
9e2c5af;Marc Abramowitz;2012-06-16 02:59:36 -0700;Simpler .travis.yml to test everything from py2.4 to py3.2
Uses Travis's new "matrix: include:" feature which makes
"the 2.4 hack" more straightforward.

==

.travis.yml
==================
7d841f3;njsmith;2012-06-16 03:54:37 -0700;Merge pull request #310 from njsmith/remove-print-statement
[enh] Remove a print statement in datetime.c
==
==================
5dbd76a;Nathaniel J. Smith;2012-06-16 11:48:23 +0100;[enh] Remove a print statement in datetime.c
This removes a distracting "'xxx'" printed while running the test suite.

==

numpy/core/src/multiarray/datetime.c
==================
3626d0c;Nathaniel J. Smith;2012-05-19 16:27:01 +0100;Remove PyArray_ReduceWrapper from public API
There are two reasons to want to keep PyArray_ReduceWrapper out of the
public multiarray API:
 - Its signature is likely to change if/when masked arrays are added
 - It is essentially a wrapper for array->scalar transformations
   (*not* just reductions as its name implies -- the whole reason it
   is in multiarray.so in the first place is to support count_nonzero,
   which is not actually a reduction!). It provides some nice
   conveniences (like making it easy to apply such functions to
   multiple axes simultaneously), but, we already have a general
   mechanism for writing array->scalar transformations -- generalized
   ufuncs. We do not want to have two independent, redundant
   implementations of this functionality, one in multiarray and one in
   umath! So in the long run we should add these nice features to the
   generalized ufunc machinery. And in the short run, we shouldn't add
   it to the public API and commit ourselves to supporting it.

However, simply removing it from numpy_api.py is not easy, because
this code was used in both multiarray and umath. This commit:
 - Moves ReduceWrapper and supporting code to umath/, and makes
   appropriate changes (e.g. renaming it to PyUFunc_ReduceWrapper and
   cleaning up the header files).
 - Reverts numpy.count_nonzero to its previous implementation, so that
   it loses the new axis= and keepdims= arguments. This is
   unfortunate, but this change isn't so urgent that it's worth tying
   our APIs in knots forever. (Perhaps in the future it can become a
   generalized ufunc.)

==

numpy/add_newdocs.py
numpy/core/SConscript
numpy/core/code_generators/cversions.txt
numpy/core/code_generators/genapi.py
numpy/core/code_generators/numpy_api.py
numpy/core/include/numpy/ndarraytypes.h
numpy/core/setup.py
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/item_selection.h
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/multiarraymodule_onefile.c
numpy/core/src/umath/reduction.c
numpy/core/src/umath/reduction.h
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/umathmodule_onefile.c
numpy/core/tests/test_numeric.py
==================
605c2b4;Nathaniel J. Smith;2012-05-19 15:58:43 +0100;Move reduction.{c,h} from multiarray/ to umath/
This is done as a separate commit to make sure git can track the
change. This commit will not build. See next commit for actual changes
and rationale.

==

numpy/core/src/multiarray/reduction.c
numpy/core/src/multiarray/reduction.h
numpy/core/src/umath/reduction.c
numpy/core/src/umath/reduction.h
==================
b272bc6;Nathaniel J. Smith;2012-05-11 14:31:50 +0100;Remove maskna API from ndarray, and all (and only) the code supporting it
The original masked-NA-NEP branch contained a large number of changes
in addition to the core NA support. For example:
 - ufunc.__call__ support for where= argument
 - nditer support for arbitrary masks (in support of where=)
 - ufunc.reduce support for simultaneous reduction over multiple axes
 - a new "array assignment API"
 - ndarray.diagonal() returning a view in all cases
 - bug-fixes in __array_priority__ handling
 - datetime test changes
etc. There's no consensus yet on what should be done with the
maskna-related part of this branch, but the rest is generally useful
and uncontroversial, so the goal of this branch is to identify exactly
which code changes are involved in maskna support.

The basic strategy used to create this patch was:
 - Remove the new masking-related fields from ndarray, so no arrays
   are masked
 - Go through and remove all the code that this makes
   dead/inaccessible/irrelevant, in a largely mechanical fashion. So
   for example, if I saw 'if (PyArray_HASMASK(a)) { ... }' then that
   whole block was obviously just dead code if no arrays have masks,
   and I removed it. Likewise for function arguments like skipna that
   are useless if there aren't any NAs to skip.

This changed the signature of a number of functions that were newly
exposed in the numpy public API. I've removed all such functions from
the public API, since releasing them with the NA-less signature in 1.7
would create pointless compatibility hassles later if and when we add
back the NA-related functionality. Most such functions are removed by
this commit; the exception is PyArray_ReduceWrapper, which requires
more extensive surgery, and will be handled in followup commits.

I also removed the new ndarray.setasflat method. Reason: a comment
noted that the only reason this was added was to allow easier testing
of one branch of PyArray_CopyAsFlat. That branch is now the main
branch, so that isn't an issue. Nonetheless this function is arguably
useful, so perhaps it should have remained, but I judged that since
numpy's API is already hairier than we would like, it's not a good
idea to add extra hair "just in case". (Also AFAICT the test for this
method in test_maskna was actually incorrect, as noted here:
   https://github.com/njsmith/numpyNEP/blob/master/numpyNEP.py
so I'm not confident that it ever worked in master, though I haven't
had a chance to follow-up on this.)

I also removed numpy.count_reduce_items, since without skipna it
became trivial.

I believe that these are the only exceptions to the "remove dead code"
strategy.

==

doc/source/reference/arrays.maskna.rst
doc/source/reference/arrays.rst
doc/source/reference/c-api.array.rst
doc/source/reference/c-api.maskna.rst
doc/source/reference/c-api.rst
doc/source/reference/routines.polynomials.classes.rst
doc/source/reference/routines.rst
numpy/add_newdocs.py
numpy/core/_methods.py
numpy/core/arrayprint.py
numpy/core/code_generators/genapi.py
numpy/core/code_generators/numpy_api.py
numpy/core/fromnumeric.py
numpy/core/function_base.py
numpy/core/include/numpy/ndarraytypes.h
numpy/core/include/numpy/ufuncobject.h
numpy/core/numeric.py
numpy/core/numerictypes.py
numpy/core/setup.py
numpy/core/src/multiarray/array_assign.h
numpy/core/src/multiarray/array_assign_array.c
numpy/core/src/multiarray/array_assign_scalar.c
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/boolean_ops.c.src
numpy/core/src/multiarray/boolean_ops.h
numpy/core/src/multiarray/buffer.c
numpy/core/src/multiarray/calculation.c
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/conversion_utils.c
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/ctors.h
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/einsum.c.src
numpy/core/src/multiarray/flagsobject.c
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/item_selection.h
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/iterators.h
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/multiarraymodule_onefile.c
numpy/core/src/multiarray/na_mask.c
numpy/core/src/multiarray/na_mask.h
numpy/core/src/multiarray/na_object.c
numpy/core/src/multiarray/na_object.h
numpy/core/src/multiarray/nditer_api.c
numpy/core/src/multiarray/nditer_constr.c
numpy/core/src/multiarray/nditer_impl.h
numpy/core/src/multiarray/nditer_pywrap.c
numpy/core/src/multiarray/reduction.c
numpy/core/src/multiarray/reduction.h
numpy/core/src/multiarray/scalarapi.c
numpy/core/src/multiarray/sequence.c
numpy/core/src/multiarray/shape.c
numpy/core/src/private/lowlevel_strided_loops.h
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/ufunc_type_resolution.c
numpy/core/tests/test_api.py
numpy/core/tests/test_indexerrors.py
numpy/core/tests/test_maskna.py
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_na.py
numpy/core/tests/test_nditer.py
numpy/core/tests/test_numeric.py
numpy/core/tests/test_regression.py
numpy/lib/function_base.py
numpy/lib/twodim_base.py
numpy/polynomial/chebyshev.py
numpy/polynomial/hermite.py
numpy/polynomial/hermite_e.py
numpy/polynomial/laguerre.py
numpy/polynomial/legendre.py
numpy/polynomial/polynomial.py
numpy/polynomial/tests/test_chebyshev.py
numpy/polynomial/tests/test_hermite.py
numpy/polynomial/tests/test_hermite_e.py
numpy/polynomial/tests/test_laguerre.py
numpy/polynomial/tests/test_legendre.py
numpy/polynomial/tests/test_polynomial.py
numpy/testing/utils.py
==================
3237093;Thouis (Ray) Jones;2012-06-15 15:50:15 +0200;Add void *user_data to EventHookFunc and SetEventHook

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/multiarray_tests.c.src
numpy/core/src/multiarray/multiarraymodule.c
==================
be294ab;Thouis (Ray) Jones;2012-05-25 09:59:43 +0200;ENH: expose PyDataMem_NEW/FREE/RENEW as numpy API functions with an event hook.
Moves PyDataMem_NEW/FREE/RENEW to the external API.
Fixes PyDataMem_NEW/RENEW to return void* instead of char*.
Replaces PyDataMem_NEW/FREE with NpySortArray_malloc/free in sort.c.src
  (should be reverted if npysort is moved to be part of multiarraymodule).
Adds PyDataMem_SetEventHook which takes a (PyDataMem_EventHookFunc *) as an argument,
  with signature:
       void hook(void *old, void *new, size_t size).
  When not NULL, hook will be called at the end of each PyDataMem_NEW/FREE/RENEW:
   result = PyDataMem_NEW(size)        -> (*hook(NULL, result, size)
   PyDataMem_FREE(ptr)                 -> (*hook(ptr, NULL, 0)
   result = PyDataMem_RENEW(ptr, size) -> (*hook)(ptr, result, size)
Adds tests in multiarray_tests.c.src, driven by tests/test_multiarray.py.

==

numpy/core/code_generators/numpy_api.py
numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/multiarray_tests.c.src
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/npysort/sort.c.src
numpy/core/tests/test_multiarray.py
numpy/lib/src/_compiled_base.c
==================
1b6582d;Nathaniel J. Smith;2012-06-15 12:05:50 +0100;Merge branch 'index_error_info'

==
==================
004082c;Nathaniel J. Smith;2012-06-14 19:02:23 +0100;Tweak out-of-bounds exception message based on list feedback

==

numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/common.h
==================
a83e212;Thouis (Ray) Jones;2012-06-15 11:36:05 +0200;Work around Python 2.4's Py_ssize_t not being the same as npyint_p

==

numpy/core/src/multiarray/mapping.c
==================
6fe584f;David Cournapeau;2012-06-11 11:14:58 +0100;ENH: use new metadata registration for version and config.

==

bento.info
bscript
numpy/__config__.py.in
numpy/version.py.in
==================
53e49df;David Cournapeau;2012-06-09 13:24:13 +0800;REF: remove unused import.

==

bscript
==================
cf72f82;Travis E. Oliphant;2012-06-12 01:00:00 -0700;Merge pull request #287 from ahmadia/patch-1
Fix dirty handling of internal compiler variable 
==
==================
c8beafd;Travis E. Oliphant;2012-06-12 00:58:30 -0700;Merge pull request #290 from mforbes/new-vectorize-clean
ENH: Add kwarg support for vectorize (tickets #2100, #1156, and #1487) (clean)
==
==================
f2a7464;Travis E. Oliphant;2012-06-12 00:51:23 -0700;Merge pull request #295 from mwiebe/datetime_unit_16compat
BUG: Add a gap in NPY_DATETIMEUNIT enum where 1.6 had the busday unit
==
==================
db5168b;Travis E. Oliphant;2012-06-12 00:40:18 -0700;Merge pull request #305 from r0k3/picklemaskedconstant
Fix for the error while pickling MaskedConstant.
==
==================
a8f1612;Travis E. Oliphant;2012-06-12 00:39:40 -0700;Merge pull request #306 from nouiz/fill_diagonal
fix the wrapping problem of fill_diagonal with tall matrix.
==
==================
637fa62;Travis E. Oliphant;2012-06-12 00:38:49 -0700;Merge pull request #308 from jakevdp/histogram_fix
Remove unused declarations
==
==================
6cb0266;Jake Vanderplas;2012-06-11 14:07:47 -0700;remove unused variables from histogramdd

==

numpy/lib/function_base.py
==================
e909e4e;Frederic;2012-06-11 16:37:27 -0400;add the warp parameter to fill_diagonal for people that could want the old behavior.

==

numpy/lib/index_tricks.py
numpy/lib/tests/test_index_tricks.py
==================
69c33bf;Frederic;2012-06-11 16:23:17 -0400;fix the wrapping problem of fill_diagonal with tall matrix.

==

numpy/lib/index_tricks.py
numpy/lib/tests/test_index_tricks.py
==================
a11aab3;Robert Kende;2012-06-11 15:42:38 +0200;BUG: fix pickling MaskedConstant

==

numpy/ma/core.py
==================
e2ec1ea;Robert Kende;2012-06-11 15:42:00 +0200;TST: pickling MaskedConstant

==

numpy/ma/tests/test_core.py
==================
a0d1a96;njsmith;2012-06-10 04:33:24 -0700;Merge pull request #304 from thouis/datetime_refcnt
fix previous patch: c_metadata should match metadata before DECREF
==
==================
3dbfaa0;Thouis (Ray) Jones;2012-06-10 09:11:30 +0200;fix previous patch: c_metdata should match metadata before DECREF

==

numpy/core/src/multiarray/descriptor.c
==================
d0f520a;Thouis (Ray) Jones;2012-06-08 17:53:30 +0200;make sure self->metadata is valid before calling DECREF

==

numpy/core/src/multiarray/descriptor.c
==================
db50690;Thouis (Ray) Jones;2012-06-08 17:41:28 +0200;More careful checking of datetime metadata in dtype __setstate__()

==

numpy/core/src/multiarray/descriptor.c
numpy/core/tests/test_datetime.py
==================
7953c01;Thouis (Ray) Jones;2012-06-08 14:28:48 +0200;BUG: missing incref for metadata of datetime dtypes.

==

numpy/core/src/multiarray/descriptor.c
==================
5013093;Travis E. Oliphant;2012-06-08 04:33:12 -0700;Merge pull request #299 from teoliphant/fixup_flat
Fix flat arrays so they cannot be used to write to read-only memory.
==
==================
87a445e;Travis E. Oliphant;2012-06-08 05:09:37 -0500;BUG: Disallow writing to flat iterators for readonly arrays. Ensure __array__ does not create UPDATEIFCOPY if underlying array on iterator is readonly.   Plus some tests.

==

numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/iterators.c
numpy/core/tests/test_multiarray.py
==================
ac94777;Travis E. Oliphant;2012-06-08 03:06:20 -0700;Merge pull request #298 from dlaxalde/sphinxext/cleanup
sphinxext cleanup
==
==================
263c877;Denis Laxalde;2012-06-06 17:16:27 -0400;sphinxext: remove mention of old files in LICENSE.txt

==

doc/sphinxext/LICENSE.txt
==================
adddbc7;Denis Laxalde;2012-06-06 17:13:38 -0400;sphinxext: some cleanup in setup.py
- remove obsolete entry_points (the corresponding code was removed in
  08e85c1820f8502e2a5009da4d3d89c6462a911b).
- drop setuptools import
- adjust setup() argument to conform with distutils format

==

doc/sphinxext/setup.py
==================
85b6828;Nathaniel J. Smith;2012-06-06 19:51:10 +0100;Merge branch 'master' into clean-up-diagonal

==
==================
330468f;Thouis (Ray) Jones;2012-06-06 16:43:17 +0200;Add coverage tests for IndexErrors, fix one bug, clean up two checks
Adds numpy/core/tests/test_indexerrors.py with tests to cover failure cases in indexing not covered
by other tests.

Added a missing check for invalid index in multiarray/iterators.c:iter_ass_sub_int().
Used the new checking code in multiarray/iterators.c:iter_ass_subscript().
Changed a ValueError to an IndexError in multiarray/mapping.c:PyArray_MapIterBind().

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/mapping.c
numpy/core/tests/test_indexerrors.py
==================
56f8659;Thouis (Ray) Jones;2012-06-06 10:32:35 +0200;Add check_and_adjust_index(), and replace most index checks with it.
This commit adds a check_and_adjust_index(npy_intp *index, npy_intp max, int axis) function
which checks index against max, setting an IndexError and returning -1 if it's not valid,
and otherwise adjusting index in-place to handle Python's negative indexing, and returning 0.

It also changes most places in the code where indexes were being checked and adjusted with a
call to this function.

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarraymodule.c
==================
4c68a33;Thouis (Ray) Jones;2012-06-04 22:41:18 +0200;ENH: report bad value and dimenion to IndexError exceptions

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/mapping.c
==================
1a050bb;Marc Abramowitz;2012-06-04 21:24:46 -0700;Add .travis.yml for Travis CI (http://travis-ci.org/)

==

.travis-make-py24-virtualenv.sh
.travis.yml
==================
de8c536;Nathaniel J. Smith;2012-06-05 20:24:27 +0100;Merge remote-tracking branch 'mwiebe/nditer_buffer_flag' into merge-293

==
==================
ee60711;Mark Wiebe;2012-06-05 11:56:53 -0500;BUG: Add a gap in NPY_DATETIMEUNIT enum where 1.6 had the busday unit
1.7 doesn't have the business day unit, but instead provides
a separate business day API. For binary compatibility, as
experienced in Pandas use of datetime64, it's a good idea for
the numbers to stay the same.

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/scalartypes.c.src
==================
127ae2f;Michael McNeil Forbes;2012-04-06 14:52:56 -0700;ENH: Add kwarg support for vectorize (tickets #2100, #1156, and #1487)
  This is a substantial rewrite of vectorize to remove all introspection and
  caching behaviour.  This greatly simplifies the logic of the code, and allows
  for much more generalized behaviour, simultaneously fixing tickets #1156,
  #1487, and #2100.  There will probably be a performance hit because caching is
  no longer used (but should be able to be reinstated if needed).
  As vectorize is a convenience function with poor performance in general,
  perhaps this is okay.  Rather than trying to inspect the function to determine
  the number of arguments, defaults, and argument names, we just use the
  arguments passed on the call to determine the behaviour on each call.

  All tests pass and code is fully covered

Fixes:
Ticket #2100: kwarg support for vectorize
- API: Optional excluded argument to exclude some args from vectorization.
- Added documentation, examples, and coverage tests
- Added additional coverage test and base case for functions with no args
- Factored original behaviour into _vectorize_call
- Some minor documentation and error message corrections

Ticket #1156: Support vectorizing over instance methods
- No longer an issue since everything is determined by the call.

Ticket: #1487: result depends on execution order
- No longer caching, so the behaviour is as was expected.

ENH: Simple cache for vectorize

- Added simple cache to prevent vectorize from calling pyfunc twice on the first
  argument when determining the output types and added regression test.
- Added documentation for excluded positional arguments.
- Documentation cleanups.
- Cleaned up variable names.

ENH: Performance improvements for backward compatibility of vectorize.

After some simple profiling, I found that the wrapping used to
support the caching of the previous commit wasted more time than
it saved, so I added a flag to allow the user to toggle.  Moral:
caching makes sense only if the function is expensive and is off
by default.

I also compared performance with the original vectorize and opted
for keeping a cache of _ufunc if otypes is specified and there are
no kwargs/excluded vars.  This case is easy to implement, and allows
users to reproduce (almost) the old performance characteristics if
needed. (The new version is about 5% slower in this case).

It would be much more complicated to add a similar cache in the case
where kwargs are used, and since a wrapper is used here, the
performance gain would be negligible (profiling showed that wrapping
was a more significant slowdown than the extra call to frompyfunc).

- API: Added cache kwarg which allows the user to toggle caching
       of the first result.
- DOC: Added Notes section with a discussion of performance and a
       warning that vectorize should not be used for performance.
- Added private _ufunc member to implement old-style of cache for
  special case with no kwargs, excluded, and with otypes specified.
- Modified test case.

Partially address ticket #1982
- I tried to use hasattr(outputs, '__len__') rather than
  isinstance(outputs, tuple) in order to allow for functions to return
  lists.  This, however, means that strings will get vectorized over
  each character which breaks previous behaviour.  Keeping old
  behaviour for now.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
fd78546;David Cournapeau;2012-06-01 00:14:14 +0900;BUG: fix CBLAS/LAPACK detection logic.

==

bscript
==================
7ec6cf4;David Cournapeau;2012-05-31 19:26:13 +0900;REF: simplify extension customization.
We are using the new tweak_* bento API wherever possible.

==

numpy/core/bscript
numpy/fft/bscript
numpy/lib/bscript
==================
87295b3;David Cournapeau;2012-05-31 18:25:20 +0900;REF: use simpler API in top bscript.
We use the new register_outputs_simple + remove some redundant code.

==

bscript
numpy/core/bscript
numpy/random/bscript
==================
fc466d4;David Cournapeau;2012-05-21 23:27:37 +0100;BUG: add missing umath_tests extension to bento build.

==

numpy/core/bento.info
numpy/core/bscript
==================
d258928;David Cournapeau;2012-05-21 19:08:39 +0100;BUG: install required generated headers.

==

bento.info
numpy/core/bscript
==================
42cb791;David Cournapeau;2012-05-21 09:35:42 +0100;BUG: add missing f2py files in bento build.

==

bento.info
==================
6890263;David Cournapeau;2012-05-21 09:35:07 +0100;BUG: add missing test data in bento build.

==

bento.info
==================
1fa15b0;Robert Kern;2012-05-30 23:40:21 +0100;BUG: '-framework Python' is not needed and can interfere.

==

numpy/distutils/fcompiler/intel.py
==================
c6b67ff;Stefan van der Walt;2012-05-30 00:32:30 -0700;DOC: Remove duplicate unique links in HOWTO_DOCUMENT.

==

doc/HOWTO_DOCUMENT.rst.txt
==================
4542c43;Mark Wiebe;2012-05-28 14:14:41 -0500;BUG: Add a new flag to nditer to indicate when op uses buffering
Thouis tracked down an intermittently occurring bug in
ticket #2144, where a reduction under certain situations
would produce wrong results. This occurs when the array
data and the nditer's buffer happen to be adjacent in
memory.

This fixes it by replacing the "clever" trick of checking if
the iterator's pointer is in the buffer with an explicit
flag to signal buffer usage. The reason this can't be reliably
handled via the pointer/buffer check is that the pointer updates
are handled by the consumer of the iterator, who may update
them in place or may use local variables instead. Thus, the
pointer could still point to the beginning of the buffer, or
could point at the byte immediately after the buffer. Using
a flag avoids all of this and should be reliable.

==

numpy/core/src/multiarray/nditer_api.c
numpy/core/src/multiarray/nditer_impl.h
==================
dabe9ab;Mark Wiebe;2012-05-28 13:35:21 -0500;ENH: Make internal per-op nditer flags type a typedef
There are 8 flags now, so to add another one requires
bumping up the size. This change makes that easy.
Also, because the internal structure of nditer is
not exposed to the ABI, we can change it at will.

==

numpy/core/src/multiarray/nditer_api.c
numpy/core/src/multiarray/nditer_constr.c
numpy/core/src/multiarray/nditer_impl.h
==================
f2f306d;Aron Ahmadia;2012-05-28 20:44:55 +0300;LDBL_TRUE_MIN falls back to __LDBL_DENORM_MIN__ if not defined

==

numpy/core/src/npymath/ieee754.c.src
==================
470c857;Travis E. Oliphant;2012-05-28 09:42:28 -0700;Merge pull request #285 from njsmith/add-tox
Add a little command-line tool for running tests, plus tox support
==
==================
fce322d;Travis E. Oliphant;2012-05-28 09:39:19 -0700;Merge pull request #286 from yarikoptic/master
Explicit import of modules into the space in core/__init__.py
==
==================
e3862fe;ahmadia;2012-05-25 00:42:59 +0300;Fix dirty handling of internal compiler variable __LDBL_DENORM_MIN__ with C11 LDBL_TRUE_MIN (with help from @jedbrown)

==

numpy/core/src/npymath/ieee754.c.src
==================
51616c9;Nathaniel J. Smith;2012-05-22 11:16:48 +0100;Rename PyArray_RequireWriteable to PyArray_FailUnlessWriteable
Also clean up its API slightly so that the caller passes in a name
describing the array being checked which is used to generate an error
message, rather than writing an error message from scratch.

==

numpy/core/code_generators/cversions.txt
numpy/core/code_generators/numpy_api.py
numpy/core/src/multiarray/array_assign_array.c
numpy/core/src/multiarray/array_assign_scalar.c
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/buffer.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/nditer_constr.c
numpy/core/src/multiarray/sequence.c
numpy/core/src/umath/ufunc_object.c
numpy/numarray/_capi.c
==================
baaf181;Nathaniel J. Smith;2012-05-22 09:41:18 +0100;Move internal NPY_ARRAY_WARN_ON_WRITE flag into an internal header.

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/arrayobject.h
==================
b7e76c1;Yaroslav Halchenko;2012-05-21 22:14:43 -0400;ENH: Explicit import of modules into the space in core/__init__.py
Otherwise there is no strict guarantee that they would be available
later on during population of __all__.

This issue was ran into while opening a python file in emacs with python-mode
and ropemacs:

Loading pymacs...done
Pymacs loading ropemacs...
File mode specification error: (error "Python: Traceback (most recent call last):
  File \"/usr/lib/python2.7/dist-packages/Pymacs/pymacs.py\", line 146, in loop
    value = eval(text)
  File \"<string>\", line 1, in <module>
  File \"/usr/lib/python2.7/dist-packages/Pymacs/pymacs.py\", line 246, in pymacs_load_helper
    object = __import__(module_name)
  File \"/usr/lib/python2.7/dist-packages/ropemacs/__init__.py\", line 4, in <module>
    import ropemode.interface
  File \"/usr/lib/python2.7/dist-packages/ropemode/interface.py\", line 3, in <module>
    import rope.base.change
  File \"/usr/lib/python2.7/dist-packages/rope/base/change.py\", line 2, in <module>
    import difflib
  File \"/usr/lib/python2.7/difflib.py\", line 36, in <module>
    from collections import namedtuple as _namedtuple
  File \"collections.py\", line 16, in <module>
    import numpy as np
  File \"/usr/lib/pymodules/python2.7/numpy/__init__.py\", line 137, in <module>
    import add_newdocs
  File \"/usr/lib/pymodules/python2.7/numpy/add_newdocs.py\", line 9, in <module>
    from numpy.lib import add_newdoc
  File \"/usr/lib/pymodules/python2.7/numpy/lib/__init__.py\", line 4, in <module>
    from type_check import *
  File \"/usr/lib/pymodules/python2.7/numpy/lib/type_check.py\", line 8, in <module>
    import numpy.core.numeric as _nx
  File \"/usr/lib/pymodules/python2.7/numpy/core/__init__.py\", line 30, in <module>
    __all__ += numeric.__all__
NameError: name numeric is not defined
")

==

numpy/core/__init__.py
==================
e3e5028;Nathaniel J. Smith;2012-05-21 23:33:19 +0100;Add a little command-line tool for running tests, plus tox support
Tox is a handy little tool to make it easier than not to run proper
tests that exercise the build system and are run against multiple
Python versions: http://pypi.python.org/pypi/tox
See comment at the top of tox.ini for hints.

==

.gitignore
tools/test-installed-numpy.py
tox.ini
==================
ac4ce7b;Nathaniel J. Smith;2012-05-21 22:33:44 +0100;Fix diagonal-related warnings and tests on Python 3

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/buffer.c
numpy/core/src/multiarray/getset.c
numpy/core/tests/test_multiarray.py
==================
58392b0;Nathaniel J. Smith;2012-05-21 15:39:02 +0100;Don't assume ctypes is available, it's not true on Python 2.4

==

numpy/core/tests/test_multiarray.py
==================
6d36127;Nathaniel J. Smith;2012-05-21 15:28:54 +0100;Clean up PyArray_Diagonal changes based on Chuck's feedback
- NPY_ARRAY_WARN_ON_WRITE flag definition is protected by #ifdef
  _MULTIARRAYMODULE, to make totally sure that we can recycle the flag
  bit later.
- Improve docs for PyArray_SetUpdateIfCopyBase.
- Make the deprecation warning for writes to the diagonal array
  somewhat more terse.
- Use DEPRECATE macro instead of calling PyErr_Warn/PyErr_WarnEx
  directly.
- Comment formatting fixed.

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/arrayobject.c
==================
3f45eaa;Nathaniel J. Smith;2012-05-16 18:45:20 +0100;Fix numpy.distutils to find atlas BLAS on Ubuntu
As per discussion here:
  http://mail.scipy.org/pipermail/numpy-discussion/2012-May/062363.html
numpy.distutils was failing to find BLAS on my Ubuntu 11.04 system.

The problem is that _check_libs looks for libraries in several
directories, and it turns out that the "atlas" library was found in
both /usr/lib64/atlas-base *and* in /usr/lib64, which confused
_check_libs into thinking that it couldn't be found at all.

With this fix, scipy now builds against numpy master for me.

==

numpy/distutils/system_info.py
==================
ebffab2;Tim Cera;2012-04-29 02:38:50 -0400;BUG: Changed ipmt to accept array_like arguments.
The ipmt function was also fixed to handle broadcasting. The tests
were improved and extended to cover the broadcasting capability.

==

numpy/lib/financial.py
numpy/lib/tests/test_financial.py
==================
b081857;Ralf Gommers;2012-05-20 12:06:12 +0200;MAINT: port release notes and release script changes from 1.6.x.

==

doc/release/1.6.1-notes.rst
doc/release/1.6.2-notes.rst
doc/source/release.rst
release.sh
==================
e41267b;Travis E. Oliphant;2012-05-19 19:08:43 -0700;Merge pull request #283 from rgommers/ticket-1755-knownfail
TST: mark test for floating point exceptions as knownfail.  See #1755.
==
==================
977878a;Ralf Gommers;2012-05-19 15:47:39 +0200;TST: mark test for floating point exceptions as knownfail.  See #1755.
Note that this test was marked as knownfail in 1.5.x and 1.6.x; it is reported
as failing on many different platforms.

==

numpy/core/tests/test_numeric.py
==================
53d99f2;Nathaniel J. Smith;2012-05-19 12:39:13 +0100;Add a missing guard for Python versions <2.6

==

numpy/core/tests/test_multiarray.py
==================
da9bf05;Nathaniel J. Smith;2012-05-19 10:07:10 +0100;Fix a C90 compatibility error

==

numpy/core/src/multiarray/arrayobject.c
==================
83f6abe;Nathaniel J. Smith;2012-05-19 09:53:57 +0100;Un-KNOWNFAIL the nditer test after merging Mark's fix from master

==

numpy/core/tests/test_nditer.py
==================
412c8a6;Nathaniel J. Smith;2012-05-19 09:49:27 +0100;Merge branch 'master' into clean-up-diagonal

==
==================
6c88395;Mark Wiebe;2012-05-18 16:17:10 -0500;TST: Fix memoryview 2.6/2.7 compatibiliy in maskna pep3118 test

==

numpy/core/tests/test_maskna.py
==================
a169c98;Charles Harris;2012-05-02 08:44:18 -0600;TST: ticket #1878, test argmin with minimum signed integers.
The bug in ticket #1878 has been fixed in 1.7 but it still needs a test.
Thanks to tlatorre.

==

numpy/core/tests/test_multiarray.py
==================
5c96ec6;Mark;2012-05-18 14:00:03 -0700;Merge pull request #268 from FrancescAlted/master
The docs should stress that functions that create arrays actually steals a reference to dtype descriptor
==
==================
6594f47;Mark;2012-05-18 13:56:31 -0700;Merge pull request #278 from mwiebe/NA_buffer_errorcheck
BUG: maskna: PEP3118 code wasn't raising an error on NA-masked arrays
==
==================
5a86e25;Mark Wiebe;2012-05-18 15:14:58 -0500;BUG: nditer: Memory leak from setting 'base' attribute two ways
Numpy uses its 'base' attribute in two different ways, both
to manage the memory of an external data buffer, and to track
an array for 'UPDATEIFCOPY' purposes. The nditer was creating
a temporary view with negative strides to match the strides of
input arrays, but then also wanted to use UPDATEIFCOPY. Unfortunately
this choice to overload 'base' for both purposes prevents that
from working, and the result was a memory leak.

This bug has been fixed by choosing instead to retain positive
strides and not fully match the order of input memory when
doing the UPDATEIFCOPY.

==

numpy/core/src/multiarray/nditer_constr.c
numpy/core/tests/test_nditer.py
==================
4fce387;David Cournapeau;2012-05-18 14:02:47 +0100;ENH: use custom_python instead of built-in waf tool.

==

bscript
==================
35f735d;David Cournapeau;2012-05-18 14:02:18 +0100;BUG: fix typo in bscript.

==

numpy/core/bscript
==================
c247305;Nathaniel J. Smith;2012-05-17 12:47:42 +0100;Typo fix
Thanks to Travis for catching it.

==

doc/release/2.0.0-notes.rst
==================
0812564;Nathaniel J. Smith;2012-05-16 14:29:34 +0100;Document the PyArray_Diagonal transition scheme.

==

doc/release/2.0.0-notes.rst
numpy/core/fromnumeric.py
numpy/lib/twodim_base.py
==================
bea52bf;Nathaniel J. Smith;2012-05-15 22:12:41 +0100;Transition scheme for allowing PyArray_Diagonal to return a view
PyArray_Diagonal is changed to return a copy of the diagonal (as in
numpy 1.6 and earlier), but with a new (hidden) WARN_ON_WRITE flag
set. Writes to this array (or views thereof) will continue to work as
normal, but the first write will trigger a DeprecationWarning.

We also issue this warning if someone extracts a non-numpy writeable
view of the array (e.g., by accessing the Python-level .data
attribute). There are likely still places where the data buffer is
exposed that I've missed -- review welcome!

New known-fail test: eye() for maskna arrays was only implemented by
exploiting ndarray.diagonal's view-ness, so it is now unimplemented
again, and the corresponding test is marked known-fail.

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/numeric.py
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/arrayobject.h
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/buffer.c
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/item_selection.c
numpy/core/tests/test_maskna.py
numpy/core/tests/test_multiarray.py
numpy/lib/twodim_base.py
==================
d403fed;Nathaniel J. Smith;2012-05-11 15:55:32 +0100;Add a test for ndarray.diagonal()
All 'expected' values were computed using numpy 1.5.1, so we can be
pretty sure that the recent rewrite didn't change any results.

==

numpy/core/tests/test_multiarray.py
==================
6a90ada;Nathaniel J. Smith;2012-05-15 18:32:14 +0100;Funnel all assignments to PyArrayObject->base through a single point
This patch removes all direct assignments of non-NULL values to the
'base' field on PyArrayObjects. A new utility function was created to
set up UPDATEIFCOPY arrays, and all assignments to 'base' were
adjusted to use either PyArray_SetBaseObject or the new
PyArray_SetUpdateIfCopyBase.

One advantage of this is that it produces more consistent error
handling. This error handling revealed a bug in the nditer code,
which this patch does *not* yet fix.

The bug is that npyiter_new_temp_array sometimes (when dealing with
reversed axes) creates an array and then returns a view onto it. But,
npyiter_allocate_arrays assumes that the array returned by
npyiter_new_temp_array can have UPDATEIFCOPY set, which requires
reassigning its 'base' field. Previously, this meant that the
temporary array leaked. Now, it produces a ValueError.

This code path doesn't seem to actually be hit very often; only one of
the nditer tests fails because of the change. See
   numpy/core/tests/test_nditer.py:test_iter_array_cast_buggy

==

numpy/core/code_generators/cversions.txt
numpy/core/code_generators/numpy_api.py
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/nditer_constr.c
numpy/core/tests/test_nditer.py
numpy/numarray/_capi.c
==================
cbce4e6;Nathaniel J. Smith;2012-05-14 23:43:45 +0100;Consolidate all array writeability checking in new PyArray_RequireWriteable
This is mostly a code cleanup, but it does have a user-visible effect
in that attempting to write to a unwriteable array now consistently
raises ValueError. (It used to randomly raise either ValueError or
RuntimeError.)

Passes numpy.test("full").

==

doc/release/2.0.0-notes.rst
numpy/core/code_generators/numpy_api.py
numpy/core/src/multiarray/array_assign_array.c
numpy/core/src/multiarray/array_assign_scalar.c
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/buffer.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/nditer_constr.c
numpy/core/src/multiarray/sequence.c
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_multiarray.py
numpy/numarray/_capi.c
==================
3bbbbd4;Mark Wiebe;2012-05-10 17:11:50 -0500;NEP: Add some details about how existing C-API access interacts with NA

==

doc/neps/missing-data.rst
==================
65fdf09;Stefan van der Walt;2012-05-10 14:33:54 -0700;Merge pull request #276 from charris/fix-format-variable-mismatch
BUG: Fix format/variable incompatibility.
==
==================
bfa66da;Mark Wiebe;2012-05-10 16:22:27 -0500;BUG: maskna: PEP3118 code wasn't raising an error on NA-masked arrays

==

numpy/core/src/multiarray/buffer.c
numpy/core/tests/test_maskna.py
==================
bfaaefe;Ralf Gommers;2012-05-07 18:05:24 +0200;BUG: fix running tests with coverage=True.
The --cover-inclusive argument means that coverage.py tries to include every
single .py file in the source tree in the coverage report. This leads to test
errors, because it tries to import files like setupscons.py (which will of
course directly fail for anyone not having numscons installed).

==

numpy/testing/nosetester.py
==================
5a64b00;Ralf Gommers;2012-05-10 12:35:31 -0700;Merge pull request #277 from dlaxalde/doc/test-verbose
DOC: verbosity -> verbose in testing guidelines
==
==================
8669d3f;Denis Laxalde;2012-05-10 13:42:47 -0400;DOC: verbosity -> verbose in testing guidelines

==

doc/TESTS.rst.txt
==================
7939c20;Charles Harris;2012-05-10 02:11:14 -0600;BUG: Fix format/variable incompatibility.
This shows up in python 2.4 where Py_ssize_t is an int.
Also remove unused variable.

==

numpy/core/src/multiarray/descriptor.c
==================
bb162a2;Charles Harris;2012-05-10 01:43:30 -0600;Merge branch 'pull-274'
* pull-274:
  BUG: Fix datetime 1.6 pickle compatibility test for Python 3.
  STY: Elaborate comment about cloning dtype's c_metadata
  DOC: Improve documentation comment from PR 274 comment
  ENH: Change NPY_AUXDATA_FREE macro based on PR feedback
  BUG: Output the datetime64 dtype to the pickle format from 1.6
  ENH: Change datetime64 to use c_metadata instead of metadata
  ENH: Add a NpyAuxData c_metadata to PyArray_Descr

==
==================
ddc944e;Charles Harris;2012-05-10 01:26:38 -0600;BUG: Fix datetime 1.6 pickle compatibility test for Python 3.
In Python 3 the pickle.loads function expects a bytes argument, so
convert the test strings.

==

numpy/core/tests/test_datetime.py
==================
dc468d1;Mark Wiebe;2012-05-09 13:50:19 -0500;STY: Elaborate comment about cloning dtype's c_metadata

==

numpy/core/src/multiarray/descriptor.c
==================
2c4f794;Mark Wiebe;2012-05-09 13:45:45 -0500;DOC: Improve documentation comment from PR 274 comment

==

numpy/core/src/multiarray/descriptor.c
==================
9d63dae;Mark Wiebe;2012-05-09 13:42:53 -0500;ENH: Change NPY_AUXDATA_FREE macro based on PR feedback

==

numpy/core/include/numpy/ndarraytypes.h
==================
b7cb21a;Mark Wiebe;2012-05-08 16:28:55 -0500;BUG: Output the datetime64 dtype to the pickle format from 1.6

==

numpy/core/src/multiarray/descriptor.c
==================
e686b36;Mark Wiebe;2012-04-27 13:44:24 -0500;ENH: Change datetime64 to use c_metadata instead of metadata

==

numpy/core/_internal.py
numpy/core/include/numpy/ndarraytypes.h
numpy/core/include/numpy/npy_deprecated_api.h
numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/datetime_strings.c
numpy/core/src/multiarray/datetime_strings.h
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/scalarapi.c
numpy/core/src/umath/ufunc_type_resolution.c
numpy/core/tests/test_datetime.py
numpy/lib/type_check.py
==================
eb40102;Mark Wiebe;2012-04-27 11:43:57 -0500;ENH: Add a NpyAuxData c_metadata to PyArray_Descr
The purpose of this is to allow dtypes with metadata to
have faster C-level performance. With this, datetime64
metadata lookup can become a single C pointer dereference,
compared to a C-string to Python-string conversion +
a Python dict lookup as it is presently.

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/descriptor.c
==================
be90de8;Denis Laxalde;2012-05-08 15:23:42 -0400;FIX: handle empty arrays in roll

==

numpy/core/numeric.py
==================
37fab7a;Denis Laxalde;2012-05-08 15:20:29 -0400;FIX: roll raises a ValueError is axis > ndim

==

numpy/core/numeric.py
==================
5bc0a84;Denis Laxalde;2012-05-08 15:06:29 -0400;TST: add tests for roll function

==

numpy/core/tests/test_numeric.py
==================
c869d12;Mark Wiebe;2012-05-07 16:23:56 -0500;BUG: ufunc: The refactored reduction code didn't work with object arrays

==

numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_ufunc.py
==================
084eed7;Stefan van der Walt;2012-05-07 16:19:47 -0700;Merge pull request #272 from mwiebe/datetime64_compare
BUG: umath: greater_equal ufunc was using the wrong type resolver
==
==================
6c95a00;Mark Wiebe;2012-05-07 17:06:16 -0500;BUG: umath: greater_equal ufunc was using the wrong type resolver, failed with datetime64
This bug was found by running the pandas master against numpy master.

==

numpy/core/code_generators/generate_umath.py
numpy/core/tests/test_datetime.py
==================
d609dff;Ralf Gommers;2012-05-04 21:49:27 +0200;REL: change Sphinx version in release script to 1.1.3.
Version 1.0.4 was used till now, but has become too old.  New version gives far
fewer warnings and thereby increases the reference guide with O(100) pages that
previously got lost.

Also update current Cython version number.

==

doc/HOWTO_RELEASE.rst.txt
pavement.py
==================
d7d6b6c;Francesc Alted;2012-05-04 00:00:54 -0500;Stress that all array creation C functions steals a reference to descr.

==

doc/source/reference/c-api.array.rst
==================
259fff8;Charles Harris;2012-05-02 21:06:06 -0600;BUG: Fix some test bugs.
Fix incorrect python version checks in test_print.py.
Fix missing build_err_msg import and wrong variable in test_io.py.

==

numpy/core/tests/test_print.py
numpy/lib/tests/test_io.py
==================
0b99c90;Charles Harris;2012-05-01 12:03:47 -0600;DOC: Add datetime to the changed items in the release notes.

==

doc/release/2.0.0-notes.rst
==================
bb50db6;Mark Wiebe;2012-04-30 13:56:21 -0500;DOC: Add a section documenting 1.6/1.7 datetime64 differences

==

doc/source/reference/arrays.datetime.rst
==================
3cb783e;David Cournapeau;2012-04-16 19:31:44 +0100;REF: simplify top bscript file.

==

bscript
==================
caf3b9e;Charles Harris;2012-04-21 12:31:37 -0600;STY: Whitespace cleanups.

==

numpy/core/src/multiarray/array_assign_array.c
numpy/core/src/multiarray/number.c
numpy/core/src/multiarray/ucsnarrow.c
==================
4929eba;Charles Harris;2012-04-16 13:39:05 -0600;WRN: Remove unused function prototype from ctors.h.

==

numpy/core/src/multiarray/ctors.h
==================
7bf8286;Charles Harris;2012-04-15 22:32:35 -0600;WRN: Fix unused variable compiler warnings in scalarmathmodule.c.src.
Two templates were broken up and specialized. The corresponding
substitution loops could also be specialized, but this wasn't
done this time through. Breaking up the templates clarifies the
code at the expense of extra text, but I think the improved
clarity is a good tradeoff.

==

numpy/core/src/scalarmathmodule.c.src
==================
e96ed36;Charles Harris;2012-04-15 22:28:22 -0600;WRN: Fixed some unused variable compiler warnings in arraytypes.c.src.
Also break templated @from@_to_@to@ functions into two templates
to simplify the code a bit.

==

numpy/core/src/multiarray/arraytypes.c.src
==================
1dba433;Charles Harris;2012-04-21 00:06:19 -0600;STY: Remove unused functions.
MyPyUnicode_Resize and MyPyUnicode_New are no longer used, so remove them.

==

numpy/core/src/multiarray/ucsnarrow.c
numpy/core/src/multiarray/ucsnarrow.h
==================
3277506;Charles Harris;2012-04-20 22:24:06 -0600;BUG: ticket #1578, fix PyArray_Scalar.
PyArray_Scalar needed to use PyObject_* memory management since the numpy
unicode object inherits tp_alloc from PyUnicode_Type.

Observation: realloc returns null on error and that isn't always checked in
Numpy.

==

numpy/core/src/multiarray/scalarapi.c
==================
d78746b;Charles Harris;2012-04-17 19:52:01 -0600;BUG: ticket #1578, fix UNICODE_getitem.
Use PyUnicode_FromUCS4 in UNICODE_getitime so that the same memory
management is used for all parts of the returned PyUnicodeObject.

==

numpy/core/src/multiarray/arraytypes.c.src
==================
321a014;Charles Harris;2012-04-17 19:49:50 -0600;ENH: Add PyUnicode_FromUCS4 to ucsnarrow.

==

numpy/core/src/multiarray/ucsnarrow.c
numpy/core/src/multiarray/ucsnarrow.h
==================
8330e6f;Charles Harris;2012-04-16 19:54:38 -0600;ENH: Always include ucsnarray.h and ucsnarray.c
This removes the include dependency on PY_UNICODE_WIDE in preparation
for defining more general unicode functions in the ucsnarray.c file.

==

numpy/core/SConscript
numpy/core/setup.py
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/multiarraymodule_onefile.c
numpy/core/src/multiarray/ucsnarrow.h
==================
243ab1e;Charles Harris;2012-04-16 19:57:43 -0600;ENH: Fix bento script to always include ucsnarray.h and ucsnarrow.c.
This fix is kept separate to facilitate cherry picking for a backport.

==

numpy/core/bscript
==================
416e1ab;Ralf Gommers;2012-04-17 23:04:59 +0200;DOC: fix link and add explanation on how to run examples.

==

doc/HOWTO_DOCUMENT.rst.txt
==================
dafb2dd;Ralf Gommers;2012-04-15 14:04:53 -0700;Merge pull request #253 from charris/fix-filter-importwarnings
Fix filter importwarnings

This PR fixes the issue left over from merging PR-251.
==
==================
b86dc69;Charles Harris;2012-04-15 14:49:35 -0600;FIX: Implement Ralph's suggestion of removing category.

==

numpy/testing/nosetester.py
==================
cb9d359;Charles Harris;2012-04-15 14:41:27 -0600;BUG: Fix testing failure on missing ImportWarning in Python 2.4.

==

numpy/testing/nosetester.py
==================
4872cac;Ralf Gommers;2011-07-17 18:14:27 +0200;BLD: fix build error on Windows with MSVC9. Thanks to Christoph Gohlke.

==

numpy/core/setup_common.py
==================
c17738a;Han Genuit;2012-02-21 16:24:58 +0100;BUG: Find only platform-specific dlls in winsxs directory.

==

numpy/distutils/mingw32ccompiler.py
==================
b0b4afc;Han Genuit;2012-02-21 14:26:36 +0100;ENH: Use get_mktime as wrapper for mktime.

==

numpy/core/src/multiarray/datetime_strings.c
==================
bc6159a;hangenuit@gmail.com;2012-02-20 23:18:30 +0100;ENH: Add get_mktime function to support multiple platforms.

==

numpy/core/src/multiarray/datetime_strings.c
==================
5d0e0aa;Han Genuit;2012-02-20 13:43:01 +0100;BUG: Force MinGW to use 64-bits time type.

==

numpy/core/src/multiarray/datetime_strings.c
==================
913e55d;Charles Harris;2012-04-15 10:10:27 -0700;Merge pull request #251 from rgommers/no-importwarnings
TST: filter ImportWarnings in NoseTester.
==
==================
9dfda59;Charles Harris;2012-04-15 08:51:02 -0700;Merge pull request #252 from rgommers/ticket-2103-cython-warning
Fix some test warnings
==
==================
12fe3d1;Ralf Gommers;2012-04-15 13:00:48 +0200;TST: remove spurious warning for optional dependency pytz.

==

numpy/core/tests/test_datetime.py
==================
0574e05;Ralf Gommers;2012-04-15 12:48:48 +0200;TST: filter Cython warning on import of random module.  Closes #2103.

==

numpy/random/__init__.py
==================
0679842;Charles Harris;2012-04-14 20:21:30 -0600;Revert "BUG: ticket #1578, Fix python-debug warning for python >= 2.7."
This reverts commit 0a3a954c3750419552c076aa444563ac20def14a. The fix
caused segfaults for python built using the default ucs2 unicode size. It
looks like the cause is memory corruption in the PyObject pooled memory. In
particular, the routines in ucsnarrow.c lack the checks and fallbacks
present in the original Python source code in Objects/unicodeobject.c. I
think the best fix is to rewrite the relevant bits of numpy code so that
they don't use the MyPyUnicode_* routines at all, but rather the routines
present in Python.

==

numpy/core/src/multiarray/scalarapi.c
numpy/core/src/multiarray/ucsnarrow.c
==================
08c20a2;Ralf Gommers;2012-04-14 20:18:20 +0200;TST: filter ImportWarnings in NoseTester.
Warnings show up when a directory with the same name as a Python file or
compiled extension is seen which doesn't have an __init__.py file in it.  This
situation is very common, for example in SciPy where many extensions are
created from source files located under a directory with the same name.

This filter is located within a context manager, so only filters when running
tests.

==

numpy/testing/nosetester.py
==================
59019f1;David Cournapeau;2012-04-13 11:26:45 +0100;FEAT: update to last bento+waf.

==

bento.info
bscript
numpy/build_utils/waf.py
==================
0c5f480;Travis E. Oliphant;2012-04-11 22:50:50 -0700;Merge pull request #250 from charris/fix-debug-crash
BUG: Fix segfault when tests are run with python 2.7 debug.
==
==================
fc4784a;Charles Harris;2012-04-11 12:22:34 -0600;BUG: Fix segfault when tests are run with python 2.7 debug.
I don't know that the crash is python2.7 specific, it may also occur
in earlier versions of python. The cause was mismatched memory
allocation/deallocation of maskna data.

==

numpy/core/src/multiarray/na_mask.c
numpy/core/tests/test_regression.py
==================
d50f961;Charles Harris;2012-04-11 12:43:34 -0600;TST: Add test for ticket #1578
The usefullness of this test is questionable, as it only shows up
as a core dump when run under python-debug for python versions >= 2.7,
and then it will only fail if run before other failing tests. It is
included as it may be useful as a record.

==

numpy/core/tests/test_regression.py
==================
9aac543;Charles Harris;2012-04-11 08:04:22 -0600;STY: Small style fixes.

==

numpy/core/src/multiarray/ucsnarrow.c
==================
0a3a954;Charles Harris;2012-04-11 07:51:53 -0600;BUG: ticket #1578, Fix python-debug warning for python >= 2.7.
In Python >= 2.7 the memory management of unicode objects changed from
PyMem_* to PyObject_*. Numpy had its own modified copy of some of the
Python code for handling unicode objects and it needed to be updated
to deal with the change. Thanks to Joseph Miessner for tracking this down
and finding the fix.

==

numpy/core/src/multiarray/scalarapi.c
numpy/core/src/multiarray/ucsnarrow.c
==================
0dac136;Ralf Gommers;2012-04-10 13:52:17 -0700;Merge pull request #249 from tonysyu/fix-split-doc
DOC: Fix outdated docstring for `split` and `array_split`.
==
==================
905335b;Tony S Yu;2012-04-09 23:01:54 -0400;DOC: Fix outdated docstring.
Equal and nearly-equal size requirement is not true when passing a 1-D array of indices.

==

numpy/lib/shape_base.py
==================
b6b5ba1;Ralf Gommers;2012-04-05 21:40:49 +0200;BUG: fix regression for indexing chararrays with empty list. Closes #1948.

==

numpy/core/defchararray.py
numpy/core/tests/test_defchararray.py
==================
1e89ff5;Charles Harris;2012-04-06 15:41:12 -0600;WRN: Fix some compiler warnings.

==

numpy/core/blasdot/_dotblas.c
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/nditer_pywrap.c
numpy/core/src/multiarray/number.c
numpy/linalg/lapack_litemodule.c
==================
032bcf0;Charles Harris;2012-02-11 18:40:34 -0700;BUG: old_defines.h needs a guard.

==

numpy/core/include/numpy/old_defines.h
==================
f047010;Charles Harris;2012-02-11 18:32:44 -0700;ENH: Check that npy_no_deprecated_api.h is included before it is needed.

==

numpy/core/include/numpy/npy_no_deprecated_api.h
==================
40cba31;Charles Harris;2012-04-01 22:35:38 -0600;STY: Remove trailing whitespace.

==

numpy/random/mtrand/initarray.h
==================
b0b2015;Charles Harris;2012-04-01 22:34:57 -0600;UPD: Regenerate mtrand.c

==

numpy/random/mtrand/mtrand.c
==================
3ddf3e1;Charles Harris;2012-04-06 15:17:36 -0600;UPD: Make _dotblas.c use non-deprecated macros/functions.

==

numpy/core/blasdot/_dotblas.c
==================
ca0a3e1;Charles Harris;2012-04-06 10:41:27 -0600;UPD: Make sort functions use non-deprecated macros/functions.

==

numpy/core/src/npysort/sort.c.src
==================
c5eee11;Charles Harris;2012-04-01 22:33:19 -0600;UPD: Add NPY_NO_DEPRECATED_API to some more files.
_dotblas needs more work to remove direct access to ndarray internals.

==

numpy/core/blasdot/_dotblas.c
numpy/core/src/multiarray/nditer_api.c
numpy/core/src/multiarray/nditer_constr.c
numpy/random/mtrand/initarray.c
==================
c993797;Charles Harris;2012-04-01 21:58:17 -0600;UPD: Update files for versioned deprecation.

==

numpy/core/include/numpy/npy_no_deprecated_api.h
numpy/core/include/numpy/old_defines.h
numpy/core/src/umath/funcs.inc.src
numpy/core/src/umath/umath_tests.c.src
numpy/fft/fftpack_litemodule.c
numpy/linalg/lapack_litemodule.c
==================
4a2de4b;Charles Harris;2012-02-10 16:50:08 -0700;UPD: Make numpy.pxd and mtrand.pyx use non-deprecated macros/functions.
The non-deprecated macros and functions were defined for Cython in
numpy.pxd and mtrand was fixed to use them. In particular, direct
access to structure internals in mtrand.pyx needed to be replaced
by the new access functions.

==

numpy/random/mtrand/mtrand.pyx
numpy/random/mtrand/numpy.pxd
==================
d47578d;Charles Harris;2012-02-10 16:29:34 -0700;ENH: Add npy_no_deprecated_api.h
This is to provide a file defining the NPY_NO_DEPRECATED_API macro that
can be included in Cython *.pxd file.

==

numpy/core/include/numpy/npy_no_deprecated_api.h
==================
b40c262;Charles Harris;2012-02-10 16:43:15 -0700;MOV: Rename numpy.pxi to numpy.pxd to conform to current Cython.

==

numpy/random/mtrand/numpy.pxd
numpy/random/mtrand/numpy.pxi
==================
d9cdd04;Charles Harris;2012-02-10 17:00:01 -0700;UPD: Make fftpack_litemodule.c use non-deprecated macros/functions.

==

numpy/fft/fftpack_litemodule.c
==================
3fe4045;Charles Harris;2012-02-10 17:41:10 -0700;UPD: Make lapack_litemodule.c use non-deprecated macros/functions.

==

numpy/linalg/lapack_litemodule.c
==================
475cc40;Charles Harris;2012-04-01 19:51:58 -0600;API: Update c_api_version hash.

==

numpy/core/code_generators/cversions.txt
==================
d73c036;Mark Wiebe;2012-02-04 17:28:58 -0800;DOC: Update documentation and release notes about C-API deprecations

==

doc/release/2.0.0-notes.rst
doc/source/reference/c-api.deprecations.rst
doc/source/reference/c-api.rst
==================
64c3be0;Mark Wiebe;2012-02-04 16:51:44 -0800;DEP: Update NPY_NO_DEPRECATED_API to be version-based

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/include/numpy/npy_deprecated_api.h
==================
e1218cc;Mark Wiebe;2012-02-04 16:28:28 -0800;DEP: Update all the '#define NPY_NO_DEPRECATED_API' instances to be versioned

==

numpy/core/src/dummymodule.c
numpy/core/src/multiarray/array_assign.c
numpy/core/src/multiarray/array_assign_array.c
numpy/core/src/multiarray/array_assign_scalar.c
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/boolean_ops.c.src
numpy/core/src/multiarray/buffer.c
numpy/core/src/multiarray/calculation.c
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/conversion_utils.c
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/datetime_busday.c
numpy/core/src/multiarray/datetime_busdaycal.c
numpy/core/src/multiarray/datetime_strings.c
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/einsum.c.src
numpy/core/src/multiarray/flagsobject.c
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/hashdescr.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/lowlevel_strided_loops.c.src
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarray_tests.c.src
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/na_mask.c
numpy/core/src/multiarray/na_object.c
numpy/core/src/multiarray/nditer_impl.h
numpy/core/src/multiarray/nditer_pywrap.c
numpy/core/src/multiarray/number.c
numpy/core/src/multiarray/numpymemoryview.c
numpy/core/src/multiarray/numpyos.c
numpy/core/src/multiarray/reduction.c
numpy/core/src/multiarray/refcount.c
numpy/core/src/multiarray/scalarapi.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/multiarray/sequence.c
numpy/core/src/multiarray/shape.c
numpy/core/src/multiarray/ucsnarrow.c
numpy/core/src/multiarray/usertypes.c
numpy/core/src/npymath/halffloat.c
numpy/core/src/npysort/sort.c.src
numpy/core/src/scalarmathmodule.c.src
numpy/core/src/umath/loops.c.src
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/ufunc_type_resolution.c
numpy/core/src/umath/umathmodule.c
numpy/lib/src/_compiled_base.c
numpy/numarray/_capi.c
==================
5ede7c7;Mark Wiebe;2012-02-04 16:23:39 -0800;VER: Bump up NPY_API_VERSION from 6 (Used by 1.6) to 7
Also added NPY_1_7_API_VERSION to numpyconfig.h to help with
NPY_NO_DEPRECATED_API macro usage.

==

numpy/core/code_generators/cversions.txt
numpy/core/include/numpy/numpyconfig.h
numpy/core/setup_common.py
==================
8e8a4ca;Charles Harris;2012-04-05 09:27:13 -0600;BUG: Fix missing np prefix in test_function_base.py.

==

numpy/lib/tests/test_function_base.py
==================
11859c0;Charles Harris;2012-04-04 17:10:05 -0600;BUG: ticket #2097, fix bounds checking in searchsorted when sorter invoked.
The bounds are checked on the fly. This won't always raise an error if
there is an out of bounds index, but only when that index is used in the
binary search. Since we don't check that the sorter actually sorts the
array, this seems reasonable. Only safety is ensured, not correctness.

==

numpy/core/src/multiarray/item_selection.c
numpy/core/tests/test_multiarray.py
==================
b35eacc;Travis E. Oliphant;2012-04-04 14:02:44 -0700;Merge pull request #245 from jseabold/digitize-open-right
ENH: Give digitize left or right open interval option
==
==================
168a55e;Charles Harris;2012-04-04 13:26:10 -0600;STY: Touch up documentation in arraypad.py
Rearrange some of the documentation and shorten lines. A few long
lines of code were also broken.

==

numpy/lib/arraypad.py
==================
7270d9e;tim cera;2012-02-06 12:51:14 -0500;ENH: Add module containing functions for padding n-dimensional arrays.
The various padding functions are exposed as options to a public 'pad'
function.  Example:

    pad(a, 5, mode='mean')

Current modes are 'constant', 'edge', 'linear_ramp', 'maximum', 'mean',
'median', 'minimum', 'reflect', 'symmetric', 'wrap', and <function>

This commit includes unit tests and doctests and is based on feature
request ticket #655.

==

doc/release/2.0.0-notes.rst
doc/source/reference/routines.padding.rst
doc/source/reference/routines.rst
numpy/lib/__init__.py
numpy/lib/arraypad.py
numpy/lib/tests/test_arraypad.py
==================
313fe46;Bryan Van de Ven;2012-03-22 10:24:52 -0500;ENH: Add 'sorter' argument to searchsorted.
The new argument allows one to search an argsorted array by passing
in the result of argsorting the array as the 'sorter' argument. For
example

    searchsorted(a, sorter=a.argsort)

==

doc/release/2.0.0-notes.rst
numpy/add_newdocs.py
numpy/core/fromnumeric.py
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/methods.c
numpy/core/tests/test_multiarray.py
==================
5474684;Skipper Seabold;2012-04-03 23:00:25 -0400;TST: Add namespaces to digitize tests + one more test

==

numpy/lib/tests/test_function_base.py
==================
d1d7a15;Skipper Seabold;2012-04-03 22:52:11 -0400;DOC: Clarify digitize docs and add example

==

numpy/add_newdocs.py
==================
0488f85;Skipper Seabold;2012-04-03 20:00:58 -0400;ENH: Give digitize left or right open interval option

==

numpy/add_newdocs.py
numpy/lib/src/_compiled_base.c
numpy/lib/tests/test_function_base.py
==================
0d1b601;Charles Harris;2012-04-02 19:31:02 -0600;BUG: Fix .gitignore again, using github suggestions.
http://help.github.com/ignore-files/

==

.gitignore
==================
ec78cc7;Charles Harris;2012-04-02 19:08:57 -0600;ENH: Add some filenames to .gitignore, fix .DS_Store entry.

==

.gitignore
==================
044c7a6;Charles Harris;2012-04-01 10:06:46 -0600;WRN: Fix compiler warnings in _compiled_base.c.

==

numpy/lib/src/_compiled_base.c
==================
1957cb3;Charles Harris;2012-04-01 09:40:12 -0600;STY: Style cleanups in numpy/lib/tests/test_function_base.
Make imports from numpy.testing explicit.
Use np namespace.

==

numpy/lib/tests/test_function_base.py
==================
b9576ed;Timo Kluck;2011-12-29 18:42:26 +0100;ENH: improve interp() speed in some cases.
The interp function was computing slopes for all intervals, even when there
were only a few points to be interpolated. Now it only does so when the
number of interpolation points exceeds the number of sample points.

==

numpy/lib/src/_compiled_base.c
numpy/lib/tests/test_function_base.py
==================
72185d3;Charles Harris;2012-03-31 10:36:38 -0600;STY: Style fixes to numpy/core/tests/test_regression.
Make imports from numpy.testing explicit.
Make test_unique_stable check against specific results.

==

numpy/core/tests/test_regression.py
==================
7c5d239;Charles Harris;2012-03-31 09:50:56 -0600;STY: Style fixes to test_multiarray.
Make imports from numpy.testing explicit.
Break some long lines.

==

numpy/core/tests/test_multiarray.py
==================
d959ab9;Charles Harris;2012-03-31 08:35:34 -0600;STY: Cleanup test_half.py a bit.
Make imports from numpy.testing explicit.
Make module runnable from command line.

==

numpy/core/tests/test_half.py
==================
6ecc58c;Nicolas Pinto;2012-03-14 19:10:42 -0400;TST: Test float16 __array_interface__.

==

numpy/core/tests/test_half.py
==================
372666a;Nicolas Pinto;2012-03-14 19:11:37 -0400;BUG: ticket #2073, fix float16 __array_interface__ bug.

==

numpy/core/src/multiarray/common.c
==================
dbf2351;Bryan Van de Ven;2012-03-19 10:08:33 -0500;BUG: ticket #2063, make unique return consistent index.
Make unique use  mergesort when return_index is true. This quarantees that
the returned indices are of the first occurrence of the unique elements and
makes the behavior better defined and consistent.

==

numpy/core/tests/test_regression.py
numpy/lib/arraysetops.py
==================
960a86b;Charles Harris;2012-03-24 14:49:07 -0600;BUG: ticket #2086, make datetime and timedelta recognize byte order.
The descriptor construction of these types was ignoring the byteorder
character.

==

numpy/core/src/multiarray/descriptor.c
numpy/core/tests/test_datetime.py
==================
2dc81ff;Charles Harris;2012-03-24 14:48:51 -0600;STY: Bit of style cleanup.

==

numpy/core/src/multiarray/descriptor.c
==================
0168296;Ralf Gommers;2012-03-25 14:54:03 +0200;DOC: label datetime support as experimental. Closes #2072.

==

doc/release/2.0.0-notes.rst
doc/source/reference/arrays.datetime.rst
==================
41f7d21;Ralf Gommers;2012-03-25 14:44:23 +0200;DOC: label the current NA implementation as experimental in 1.7.x
This has been extensively discussed on the mailing list.  See #2072.

==

doc/release/2.0.0-notes.rst
doc/source/reference/arrays.maskna.rst
numpy/add_newdocs.py
==================
f84ac77;Thouis (Ray) Jones;2012-03-30 10:11:06 +0200;Use sizeof(npy_ucs4) instead of hardcoded shift, and make test py3k compatible.

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/tests/test_multiarray.py
==================
5c7086a;Thouis (Ray) Jones;2012-03-29 12:14:47 +0200;Fix unicode string length computation in UNICODE_compare and add test.

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/tests/test_multiarray.py
==================
caa0883;Ralf Gommers;2012-03-26 22:08:06 +0200;MAINT: port few missing changes to 1.6.0 release notes from 1.6.x branch.

==

doc/release/1.6.0-notes.rst
==================
aea76b8;Ralf Gommers;2012-03-25 17:01:36 +0200;DOC: allclose: document better what happens when Infs or NaNs are present.

==

numpy/core/numeric.py
==================
81aa8f2;Ralf Gommers;2012-03-25 13:38:25 +0200;MAINT: explicitly check for NaNs in allclose(). Closes #1905.
Also clean up the logic behind handling infs.

The removed seterr call becomes unnecessary when explicitly checking for NaNs.
It was introduced only recently in c4c0e985.

==

numpy/core/numeric.py
==================
3503c5f;Ralf Gommers;2012-03-19 14:01:51 -0700;Merge pull request #236 from charris/fixes-2.4
Fixes all tests with Python 2.4 and closes #2071.
==
==================
88da562;Charles Harris;2012-03-18 17:16:27 -0600;DOC: Fix documentation misstatement

==

numpy/core/tests/test_regression.py
==================
c4c0e98;Charles Harris;2012-03-18 16:42:10 -0600;PY24: Ignore invalid in allclose and isclose.
I'm sure this is the right fix. Later versions of python don't need this
fix and it may be that there is a better knob to turn.

==

numpy/core/numeric.py
==================
850e2ab;Charles Harris;2012-03-18 15:01:14 -0600;PY24: Use TypeError instead of AttributeError.
Python 2.4 raises TypeError instead of AttributeError when an
attempt is made to delete a non-writable attribute.

==

numpy/core/tests/test_dtype.py
numpy/core/tests/test_nditer.py
==================
933465a;Charles Harris;2012-03-18 14:59:06 -0600;PY24: Use sys.version_info[0] instead of sys.version_info.major.

==

numpy/core/tests/test_regression.py
==================
8e4756c;Ralf Gommers;2012-03-17 10:06:51 +0100;BUG: BLD: fix OS X build issue introduced in the PEP8 cleanup in 72c6fbd.

==

numpy/distutils/system_info.py
==================
6fd716c;Charles Harris;2012-03-18 00:00:57 -0600;BUG: Fix test for Python version < 2.6.
Copied python implementation of combinations from python 2.7
itertools.combinations documentation into test_maskna. Combinations
wasn't part of itertools before Python 2.6.

==

numpy/core/tests/test_maskna.py
==================
dc4fd64;Charles Harris;2012-03-17 23:42:13 -0600;BUG: Fix f2py test_kind.py test.
Newer Fortran compilers for Intel may support quad precision, so
_selected_real_kind_func needs to report that for precisions >= 19.

==

numpy/f2py/crackfortran.py
==================
32a4a7d;Charles Harris;2012-03-17 13:27:57 -0600;BUG: Fix ticket #2081.
Need to double the return value of PyUnicode_GetSize when computing
the elsize of unicode strings if python is compiled with 2 byte unicode.

==

numpy/core/src/multiarray/common.c
numpy/core/tests/test_regression.py
==================
016ad9f;Matthew Brett;2012-03-17 01:32:40 -0700;BUG: native but not '=' byte order error in lapack
The check_object call in lapack_litemodule was checking if the passed
array was of byteorder '=' or '|', but this check failed for arrays of
specified native byte order ('<' on little-endian).

==

numpy/linalg/lapack_litemodule.c
numpy/linalg/tests/test_linalg.py
==================
83480b6;Ralf Gommers;2012-03-16 19:15:43 +0100;BUG: BLD: add missing line in distutils/system_info.py
This was incorrectly refactored in commit 1e8e5154, causing the build to break
on some systems.

==

numpy/distutils/system_info.py
==================
0258f19;Mark Wiebe;2012-03-15 11:43:46 -0500;BUG: Fix build error in third-party plugins

==

numpy/core/include/numpy/ndarraytypes.h
==================
a4dbfc1;Ralf Gommers;2012-03-14 23:19:47 +0100;Merge pull request #229 from npinto/system_info_lib_dirs.
Closes ticket 993.  Review: https://github.com/numpy/numpy/pull/229

There's some concern about future maintainability (by David C.), but overall
the benefits seem to outweigh the possible drawbacks.

==
==================
72c6fbd;Nicolas Pinto;2012-03-06 01:32:33 -0500;MISC: cosmetic changes to distutils/system_info, PEP8 safe.

==

numpy/distutils/system_info.py
==================
1e8e515;Nicolas Pinto;2012-03-06 01:20:37 -0500;ENH: support for detecting libraries in several directories simultaneously, see http://projects.scipy.org/numpy/ticket/993

==

numpy/distutils/system_info.py
==================
89d11fc;Stefan van der Walt;2012-03-13 14:06:33 -0700;Test commit to trigger buildbot -- ignore.

==

TEST_COMMIT
==================
32f8807;Ralf Gommers;2012-03-13 23:54:28 +0100;Last buildbot test of the day.

==

TEST_COMMIT
==================
8f304c6;Ralf Gommers;2012-03-13 22:37:40 +0100;Trigger buildbot again.

==

TEST_COMMIT
==================
8bdfce6;Ralf Gommers;2012-03-13 22:21:41 +0100;Testing buildbot, please ignore.

==

TEST_COMMIT
==================
cfee94e;Charles Harris;2012-03-12 12:40:22 -0600;BUG: Fix npy_PyFile_CloseFile return type.
Also make npy_PyFile_OpenFile mode argument const char*.

==

numpy/core/include/numpy/npy_3kcompat.h
==================
737f690;Charles Harris;2012-03-11 12:49:04 -0600;BUG: In Python 3K PyComplex can't convert byte strings.
This may be more a workaround for a Python 3K inconsistency or bug,
but it is probably better to use unicode for these sorts of calls.

The fix itself is a bit of a hack, but so is the *_to_* function.
It really needs a rewrite.

==

numpy/core/src/multiarray/arraytypes.c.src
==================
95a52ab;Charles Harris;2012-03-10 23:29:14 -0700;STY: Put some comments in standard form.

==

numpy/core/src/multiarray/scalartypes.c.src
==================
c1c0668;Charles Harris;2012-03-10 18:23:54 -0700;BUG: Use byte string instead of string in python3 buffer test.
The python3 unicode strings don't have the __buffer__ interface.

==

numpy/core/tests/test_multiarray.py
==================
84f324a;Charles Harris;2012-03-10 14:38:52 -0700;PY3: Fix FindDependenciesLdd "ResourceWarning: unclosed file".

==

numpy/linalg/tests/test_build.py
==================
1a643b7;Charles Harris;2012-03-10 14:37:38 -0700;PY3: Fix test, "ResourceWarning: unclosed file".

==

numpy/core/tests/test_records.py
==================
2d9ef04;Charles Harris;2012-03-10 13:57:07 -0700;PY3: Fix test "ResourceWarning: unclosed file".

==

numpy/core/tests/test_regression.py
==================
a76f0ed;Charles Harris;2012-03-10 13:30:04 -0700;PY3: Fix fromtextfile "ResourceWarning: unclosed file".

==

numpy/ma/mrecords.py
==================
2655a68;Charles Harris;2012-03-10 13:28:32 -0700;PY3: Fix memmap "ResourceWarning: unclosed file".

==

numpy/core/memmap.py
==================
b379fd7;Charles Harris;2012-03-10 13:27:57 -0700;PY3: Fix tofile "ResourceWarning: unclosed file".

==

numpy/core/src/multiarray/methods.c
==================
5eab544;Charles Harris;2012-03-10 13:27:03 -0700;PY3: Fix fromfile "ResourceWarning: unclosed file".

==

numpy/core/include/numpy/npy_3kcompat.h
numpy/core/src/multiarray/multiarraymodule.c
==================
bb7e5e2;David Cournapeau;2012-03-07 08:47:20 -0500;BUG: fix flags type when exposed to python.

==

numpy/core/src/multiarray/descriptor.c
==================
5268fe6;David Cournapeau;2012-03-05 22:43:56 -0500;BUG: fix #2017 by ignoring type_num in the hash input.
Since type_num is not considered in PyArray_EquivTypes (for dtype
equality comparison), seems reasonable to ignore it for hashing as
well.

==

numpy/core/src/multiarray/hashdescr.c
numpy/core/tests/test_dtype.py
==================
e4f9764;David Cournapeau;2012-03-06 22:12:32 -0500;BUG: fix inconsistencies in dtype flag type at the C level.

==

numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/hashdescr.c
==================
1513a98;David Cournapeau;2012-03-04 09:46:02 -0800;STY: cleanup hashdesc.c to follow our C conventions.

==

numpy/core/src/multiarray/hashdescr.c
==================
39029f5;Pauli Virtanen;2012-03-11 18:19:36 +0100;DOC: generate links to source code

==

doc/source/conf.py
doc/sphinxext/linkcode.py
==================
56f66bb;Charles Harris;2012-03-10 09:55:13 -0700;GEN: Regenerate mtrand.c from modified mtrand.pyx.

==

numpy/random/mtrand/mtrand.c
==================
6fae463;cgohlke;2012-03-05 15:22:24 -0800;BUG: Use npy_intp instead of long in mtrand.
This fixes a problem on 64 bit Windows where a 64 bit index is
needed but long is only 32 bits.

==

numpy/random/mtrand/initarray.c
numpy/random/mtrand/initarray.h
numpy/random/mtrand/mtrand.pyx
numpy/random/mtrand/mtrand_py_helper.h
==================
aae5b0a;Ralf Gommers;2012-03-04 16:51:21 +0100;TST: fix string comparison test failures on Windows for Python 2.5.
This is caused by the inconsistent floating point handling of Python itself.
On Windows with 2.5:
>>> "%s" % 1e-6
'1e-006'

With 2.6:
>>> "%s" % 1e-6
'1e-06'

Reviewed as PR-225.

==

numpy/core/tests/test_getlimits.py
numpy/lib/tests/test_io.py
==================
8670ca3;Ralf Gommers;2012-03-06 14:36:03 -0800;Merge pull request #219 from mwiebe/test_warn_param
Add parameters in NoseTester constructor as well as in NoseTester.test() to control which warnings raise an error.  An explicit difference is made between the master branch and release branches.

This was mentioned on the ML: http://thread.gmane.org/gmane.comp.python.numeric.general/48210

==
==================
7c07089;Mark Wiebe;2012-03-05 19:52:04 -0800;BUG: Fix alignment bug in data copy routine
Thanks to Matthew Brett for tracking this down on a 64-bit SPARC
running Debian.

==

numpy/core/src/multiarray/dtype_transfer.c
==================
7d225bb;Charles Harris;2012-03-05 08:11:32 -0700;STY: Code cleanups.
Don't do from numpy.testing import *, put spaces after commas, etc.

==

numpy/fft/tests/test_fftpack.py
numpy/fft/tests/test_helper.py
==================
88a0292;Henry Gomersall;2012-02-26 14:57:35 +0000;BUG: Fix bug in irfftn.

==

numpy/fft/fftpack.py
numpy/fft/tests/test_helper.py
==================
2c53bfa;Charles Harris;2012-03-04 15:28:03 -0700;Merge branch 'add-isclose-function'
* add-isclose-function:
  ENH: Made "isclose()" NA-aware, added release note and versionadded.
  TST: Test that isclose().all() == allclose() for all test cases.
  TST: Added masked array and scalar tests for "isclose()".
  ENH: Allow "isclose()" to work with subclasses of ndarray (such as masked arrays).
  ENH: Added "isclose()".

==
==================
b9f0f1f;Joe Kington;2012-03-04 14:18:27 -0600;ENH: Made "isclose()" NA-aware, added release note and versionadded.

==

doc/release/2.0.0-notes.rst
numpy/core/numeric.py
numpy/core/tests/test_numeric.py
==================
07e640c;Joe Kington;2012-03-04 12:08:55 -0600;TST: Test that isclose().all() == allclose() for all test cases.

==

numpy/core/tests/test_numeric.py
==================
d292acd;Joe Kington;2012-03-04 11:34:35 -0600;TST: Added masked array and scalar tests for "isclose()".

==

numpy/core/tests/test_numeric.py
==================
56e3e52;Joe Kington;2012-03-03 22:45:15 -0600;ENH: Allow "isclose()" to work with subclasses of ndarray (such as masked arrays).

==

numpy/core/numeric.py
numpy/core/tests/test_numeric.py
==================
6339427;Joe Kington;2012-03-03 17:17:19 -0600;ENH: Added "isclose()".

==

numpy/core/numeric.py
numpy/core/tests/test_numeric.py
==================
723303d;Ralf Gommers;2012-03-04 21:49:36 +0100;DOC: minor correction to NoseTester doc.

==

numpy/testing/nosetester.py
==================
8df4e67;Ralf Gommers;2012-03-04 20:40:31 +0100;TST: add some string kw options to simplify switching NoseTester behavior.

==

doc/HOWTO_RELEASE.rst.txt
numpy/testing/nosetester.py
==================
7961e1f;Ralf Gommers;2012-03-04 14:09:48 +0100;TST: add "raise on warning" behavior to NoseTester constructor.
Also document that behavior has to be switched for a release, and remove
comments on turning on deprecation warnings that don't apply anymore.

==

doc/HOWTO_RELEASE.rst.txt
doc/TESTS.rst.txt
numpy/testing/nosetester.py
==================
e692a75;Mark Wiebe;2012-02-25 10:24:28 -0800;WRN: A small tweak to make deprecation warnings always at least print

==

numpy/testing/nosetester.py
==================
eec299b;Mark Wiebe;2012-02-25 10:17:02 -0800;TST,WRN: Add a parameter to control which warnings raise during testing
The default is set to (RuntimeWarning, DeprecationWarning), and
the intent is to leave it as this on master, but change it to ()
immediately after branching for 1.7 in that branch.

==

numpy/testing/nosetester.py
==================
1857ee3;Charles Harris;2012-03-04 13:46:06 -0700;DOC: Change versionadded from 2.0.0 to 1.7.0 where needed.

==

numpy/lib/npyio.py
==================
40f0844;Skipper Seabold;2011-06-02 12:44:44 -0400;ENH: Allow bincount to accept empty arrays.

==

numpy/lib/src/_compiled_base.c
numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_regression.py
==================
0b400cb;Jason Grout;2012-03-03 17:04:29 -0600;Fix typo (all ready -> already)

==

doc/TESTS.rst.txt
==================
f4dd54a;Ralf Gommers;2012-03-03 21:20:13 +0100;DOC: merge wiki doc edits.

==

doc/source/dev/gitwash/following_latest.rst
doc/source/reference/arrays.interface.rst
doc/source/reference/swig.interface-file.rst
numpy/add_newdocs.py
numpy/core/code_generators/ufunc_docstrings.py
numpy/core/defchararray.py
numpy/core/fromnumeric.py
numpy/core/memmap.py
numpy/core/numeric.py
numpy/fft/info.py
numpy/lib/function_base.py
numpy/lib/npyio.py
numpy/lib/shape_base.py
numpy/lib/twodim_base.py
numpy/linalg/linalg.py
numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
==================
91f87e1;Bryan Van de Ven;2012-02-20 11:32:57 -0600;BUG: Fix ticket #1990.
When an array is created from a sequence of numeric (boolean, int, float,
complex) and string (bytes, str, unicode) values, the resulting array type
is string, but only the string values were being used to choose the string
length, leading to truncation of data.

==

numpy/compat/py3k.py
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/common.h
numpy/core/tests/test_regression.py
==================
d878ad9;Charles Harris;2012-03-03 12:02:50 -0700;BUG: Fix test_umath tests for python 3k.
The problem was:

TypeError: Cannot create a consistent method resolution
order (MRO) for bases object, _FilterInvalids

Fixed by explicitly deriving _FilterInvalids from object.

==

numpy/core/tests/test_umath.py
==================
879536e;Charles Harris;2012-02-26 12:45:34 -0700;DOC: Add a C style guide.

==

doc/C_STYLE_GUIDE.rst.txt
==================
0abb5ed;Ralf Gommers;2012-03-03 18:17:14 +0100;BUG: fix some Python 2.4 compatibility issues.

==

numpy/core/tests/test_umath.py
numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
==================
09f01d8;Bryan Van de Ven;2012-02-24 16:21:57 -0600;BUG: fix ticket #2029.
The fix is to disallow views of masked arrays if the element size
of the view is different than that of the original.

==

numpy/core/src/multiarray/getset.c
numpy/core/tests/test_maskna.py
==================
b9872b4;Ralf Gommers;2012-03-02 20:24:45 +0100;Merge pull request #215 from rgommers/windows-runtime-warnings.
This PR fixes a number of warnings, that were converted to test errors in
master.  Some of them were only visible with MSVC.

==
==================
e962f6b;Ralf Gommers;2012-02-21 22:43:21 +0100;TST: filter one more printed warning.
This one wasn't actually converted to a test error, because it's not a
RuntimeWarning.  Maybe need to add an option to raise on UserWarning too.

==

numpy/lib/tests/test_io.py
==================
955f471;Ralf Gommers;2012-02-20 22:20:48 +0100;TST: filter RuntimeWarnings for invalids from some more test files.
This should fix the test errors seen on both MinGW and MSVC9 related to this.

==

numpy/core/tests/test_numeric.py
numpy/core/tests/test_regression.py
numpy/core/tests/test_umath.py
numpy/lib/tests/test_function_base.py
==================
da0054c;Ralf Gommers;2012-02-20 22:02:57 +0100;TST: fix RuntimeWarnings due to invalid values in umath tests.

==

numpy/core/tests/test_umath.py
numpy/core/tests/test_umath_complex.py
==================
ba40918;Ralf Gommers;2012-02-29 23:23:18 +0100;BLD: fix Cygwin build error.  Closes #1944.  Thanks to Sebastian Sohr.

==

numpy/core/src/npymath/ieee754.c.src
==================
3f685a1;Travis E. Oliphant;2012-02-23 14:10:14 -0600;Change version number to 1.7.0

==

setup.py
==================
e57c2ba;Travis E. Oliphant;2012-02-22 18:39:04 -0800;Merge pull request #217 from mwiebe/nditer_arraydtype
BUG: Allow nditer object to be created with array-dtypes
==
==================
4c35609;Eric Firing;2012-02-18 22:06:44 -1000;ENH: add angle() function to ma

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
50e50fa;Mark Wiebe;2012-02-21 14:54:13 -0800;BUG: Allow nditer object to be created with array-dtypes
There was an error-check which prevented this for scalar inputs,
but otherwise it already worked. Added a test as well.

==

numpy/core/src/multiarray/nditer_constr.c
numpy/core/tests/test_nditer.py
==================
0c1c499;Mark;2012-02-20 12:48:52 -0800;Merge pull request #213 from mwiebe/datetime-win
BUG: datetime: Restrict 'local' timezone print to >= 1970
==
==================
d5962f4;Mark;2012-02-20 12:47:25 -0800;Merge pull request #212 from mwiebe/cache-fortran-detect
BLD: Avoid repeatedly testing for the Fortran compiler when it is missing
==
==================
1ef79b7;Mark Wiebe;2012-02-19 14:49:36 -0800;BUG: datetime: Restrict 'local' timezone print to >= 1970
On the Windows platform, the library calls fail before 1970.
For NumPy consistency across platforms, we have chosen to
apply this in every case.

==

numpy/core/src/multiarray/datetime_strings.c
==================
ad2ce59;Mark Wiebe;2012-01-22 00:27:49 -0800;BLD: Avoid repeatedly testing for the Fortran compiler when it is missing

==

numpy/distutils/fcompiler/__init__.py
==================
16d49fd;Charles Harris;2012-02-16 20:44:21 -0700;DEP: Fix some functions now deprecated in Python 3.
The functions are assertEquals and assert_ (Python's TestCase, not ours).

==

numpy/core/tests/test_memmap.py
numpy/tests/test_ctypeslib.py
==================
c4482f5;Pauli Virtanen;2012-02-12 11:14:34 +0100;ENH: lib: break reference cycle in NpzFile (#2048)
This allows these objects to be freed by refcount, rather than requiring
the gc, which can be useful in some situations.

==

numpy/lib/npyio.py
numpy/lib/tests/test_io.py
==================
56a5472;Charles Harris;2012-02-11 19:18:18 -0700;ENH: Add const qualifier to some arguments in ndarraytypes.h functions.
Some of the new access functions in ndarraytypes.h can use the const
qualifier. In particular, this avoids a lot of warnings when the code in
f2py is updated to use non-deprecated means of accessing ndarray internals.

==

numpy/core/include/numpy/ndarraytypes.h
==================
b20a013;Charles Harris;2012-02-16 19:23:48 -0700;Merge branch 'fix-attribute-delete'
* fix-attribute-delete:
  TST: Test attempted deletion of attributes/iterator_elements.
  BUG: Make attempted attribute/iterator_element deletions not segfault.

==
==================
4ba819a;Charles Harris;2012-02-13 19:12:33 -0700;TST: Test attempted deletion of attributes/iterator_elements.
The attributes without getters are also tested. They raise the same
error as the mutable attributes when deletion is attempted but they
are tested separately.

==

numpy/core/tests/test_dtype.py
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_na.py
numpy/core/tests/test_nditer.py
==================
56dde5f;Charles Harris;2012-02-13 19:08:38 -0700;BUG: Make attempted attribute/iterator_element deletions not segfault.
Attempted attribute deletion raises an Attribute error. Deleting
an iterator index or slice raises a TypeError. This is a change for
nditer, which used to raise ValueError when deletes were attempted.

==

numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/flagsobject.c
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/na_object.c
numpy/core/src/multiarray/nditer_pywrap.c
==================
ae3dd33;Travis E. Oliphant;2012-02-13 21:46:24 -0800;Merge pull request #207 from teoliphant/2033-fast-power-fix
BUG: Fix Ticket #2033 and fix fast_power behavior for integer arrays.
==
==================
d4ec909;Travis E. Oliphant;2012-02-13 10:41:01 -0600;Add comment.

==

numpy/core/src/multiarray/number.c
==================
aa2b608;Travis E. Oliphant;2012-02-12 20:53:37 -0600;BUG: Fix Ticket #2033 and fix fast_power behavior for integer arrays.

==

numpy/core/src/multiarray/number.c
numpy/core/tests/test_umath.py
==================
7e202a2;Charles Harris;2012-02-12 19:22:12 -0700;BUG: ticket #2046, deleting array attributes causes segfault.
Add check for NULL in setter functions and return Attribute error
if found.

==

numpy/core/src/multiarray/getset.c
numpy/core/tests/test_multiarray.py
==================
015cada;tim cera;2012-01-28 21:09:03 -0500;Added ipmt (interest portion of payment) and ppmt (principal portion of payment) functions. Added doctests and unit tests.

==

numpy/lib/financial.py
numpy/lib/tests/test_financial.py
==================
ca258fc;Charles Harris;2012-02-09 17:27:34 -0700;Merge branch 'replace-noprefix'
* replace-noprefix: (30 commits)
  BUG: Fix typo npydouble.
  UPD: Remove now redundant typedef.
  UPD: Fix a few more spots missing prefixes.
  BUG: Fix scons build script so it works with umathmodule.c.
  STY: Cleanup some prefixing that crept into comments.
  UPD: Various fixes, Remove #define NPY_NO_PREFIX from files in core.
  ENH: Add some needed macros to include files.
  UPD: Use prefixed types in scalartypes.c.src.
  UPD: Make multiarray *.c files use prefixed macros.
  UPD: Use prefixed types in arraytypes.c.src.
  ENH: Add a few needed macros to npy_common.h.
  UPD: Include ndarrayobject.h instead of arrayobject.h in boolean_ops.c.src.
  UPD: Use prefixed types in lowlevel_strided_loops.c.src template headers.
  UPD: Use explicit prefixed types in einsum.c.src template headers.
  UPD: Use prefixed versions of double and int in multiarray_tests.c.src.
  UPD: Remove includes of noprefix.h in ufunc_object.c and _compiled_base.c.
  BUG: Fix unprefixed reference to cdouble in ndarrayobject.h.
  UPD: Use prefixed macros in numpy/core/src/scalarmathmodule.c.src.
  UPD: Use prefixed macros in numpy/core/src/umath/funcs.inc.src.
  MOV: Rename umathmodule.c.src umathmodule.c since it has no templates.
  ...

==
==================
096b436;Mark;2012-02-08 19:54:55 -0800;Merge pull request #201 from mwiebe/tests_dep_error
TST: Make deprecation warnings raise exceptions during test run
==
==================
a2bb1cc;Mark Wiebe;2012-02-08 19:51:45 -0800;BUG: Fix improper usage of warning filters in the tests

==

numpy/core/tests/test_maskna.py
numpy/core/tests/test_memmap.py
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_regression.py
numpy/lib/tests/test_io.py
numpy/ma/tests/test_core.py
numpy/ma/tests/test_mrecords.py
==================
c8c2082;Mark Wiebe;2012-02-08 19:49:53 -0800;TST: Make RuntimeWarning raise an error during tests, same as RegressionWarning

==

numpy/testing/nosetester.py
==================
26802c9;Travis E. Oliphant;2012-02-08 16:21:59 -0600;Use asbytes for Python 3 compatibility.

==

numpy/core/tests/test_ufunc.py
==================
4c0576f;Travis E. Oliphant;2012-02-06 17:15:01 -0600;ENH: Add ability to pickle ufuncs as requested in ticket #1743

==

numpy/core/__init__.py
numpy/core/tests/test_ufunc.py
==================
87214fb;Charles Harris;2012-02-07 16:36:06 -0700;BUG: Fix typo npydouble.

==

numpy/core/src/npymath/npy_math_complex.c.src
==================
089fe5b;Charles Harris;2012-02-07 15:35:30 -0700;UPD: Remove now redundant typedef.

==

numpy/core/src/umath/umath_tests.c.src
==================
ff6c887;Charles Harris;2012-02-07 15:01:48 -0700;UPD: Fix a few more spots missing prefixes.

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/scalartypes.c.src
==================
d93d021;Mark Wiebe;2012-02-07 13:05:22 -0800;TST: Make deprecation warnings raise exceptions during test run

==

README.txt
numpy/testing/nosetester.py
==================
27befc8;Mark;2012-02-07 12:46:12 -0800;Merge pull request #193 from mwiebe/O8_O4_depr_fix
DEP: Fix up handling of the O4/O8 deprecation
==
==================
0c77beb;Charles Harris;2012-02-06 13:18:12 -0700;BUG: Fix scons build script so it works with umathmodule.c.

==

numpy/core/SConscript
==================
8d1b91e;Ralf Gommers;2012-02-05 09:50:28 +0100;MAINT: remove empty file.

==

numpy/core/code_generators/genapi2.py
==================
58d883a;Ralf Gommers;2012-02-05 09:49:39 +0100;DOC: add to release HOWTO that the C API version should be updated.

==

doc/HOWTO_RELEASE.rst.txt
==================
794e9c3;Charles Harris;2012-01-31 20:43:46 -0700;STY: Code cleanup in polynomial [*]fromroots functions.
Use divmod instead of // and % separately.

==

numpy/polynomial/chebyshev.py
numpy/polynomial/hermite.py
numpy/polynomial/hermite_e.py
numpy/polynomial/laguerre.py
numpy/polynomial/legendre.py
numpy/polynomial/polynomial.py
==================
ef767a5;Charles Harris;2012-01-30 20:10:52 -0700;ENH: Improve the computation of polynomials from roots.
The original method was overly sensitive to roundoff. Of the two
approaches considered, gauss integration or binary subdivision of
the roots, the latter is more compatible with using other number
representations such as mpmath. No method is going to be suitable
for large numbers of arbitrary zeros but the current method is a
significant improvement.

==

numpy/polynomial/chebyshev.py
numpy/polynomial/hermite.py
numpy/polynomial/hermite_e.py
numpy/polynomial/laguerre.py
numpy/polynomial/legendre.py
numpy/polynomial/polynomial.py
==================
5203d72;Charles Harris;2012-02-05 15:43:51 -0700;STY: Cleanup some prefixing that crept into comments.

==

numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/ucsnarrow.c
==================
1d90743;Mark Wiebe;2012-02-04 15:05:31 -0800;DEP: Fix up handling of the O4/O8 deprecation
First issue was that the deprecation warning was still
being raised even when an error was being raised (like for 'O3').

Second issue was that unpickling of legacy pickles which have 'O8'
or 'O4' should not raise the deprecation warning. To handle this
required introduction of a global variable, which has been named
and commented to make it clear this was a necessary evil for this
specific case, not a standard NumPy practice.

==

numpy/core/src/multiarray/conversion_utils.c
numpy/core/src/multiarray/conversion_utils.h
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_multiarray.py
==================
13010c7;Mark;2012-02-05 12:37:15 -0800;Merge pull request #194 from m-paradox/dtype_names_depr
DEP: Remove dtype names immutability deprecation for 1.7
==
==================
6bde534;Charles Harris;2012-02-05 13:05:30 -0700;UPD: Various fixes, Remove #define NPY_NO_PREFIX from files in core.

==

numpy/core/blasdot/_dotblas.c
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/boolean_ops.c.src
numpy/core/src/multiarray/buffer.c
numpy/core/src/multiarray/calculation.c
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/conversion_utils.c
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/datetime_busday.c
numpy/core/src/multiarray/datetime_busdaycal.c
numpy/core/src/multiarray/datetime_strings.c
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/einsum.c.src
numpy/core/src/multiarray/flagsobject.c
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/hashdescr.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/lowlevel_strided_loops.c.src
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarray_tests.c.src
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/na_mask.c
numpy/core/src/multiarray/na_object.c
numpy/core/src/multiarray/nditer_impl.h
numpy/core/src/multiarray/nditer_pywrap.c
numpy/core/src/multiarray/number.c
numpy/core/src/multiarray/numpymemoryview.c
numpy/core/src/multiarray/numpyos.c
numpy/core/src/multiarray/reduction.c
numpy/core/src/multiarray/refcount.c
numpy/core/src/multiarray/scalarapi.c
numpy/core/src/multiarray/sequence.c
numpy/core/src/multiarray/shape.c
numpy/core/src/multiarray/ucsnarrow.c
numpy/core/src/multiarray/usertypes.c
numpy/core/src/scalarmathmodule.c.src
numpy/core/src/umath/loops.c.src
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/umath_tests.c.src
numpy/core/src/umath/umathmodule.c
numpy/lib/src/_compiled_base.c
numpy/linalg/lapack_litemodule.c
==================
f6a2c7c;Charles Harris;2012-02-05 12:55:20 -0700;ENH: Add some needed macros to include files.
The unprefixed macros in interrupt.h were prefixed with NPY_,
The unprefixed macros in interrupt.h were added to noprefix.h.
The arrayobject.h file was fixed to work with the new interrupt.h.
Some needed macros were added to npy_common.h.

==

numpy/core/include/numpy/arrayobject.h
numpy/core/include/numpy/noprefix.h
numpy/core/include/numpy/npy_common.h
numpy/core/include/numpy/npy_interrupt.h
==================
9897d95;Charles Harris;2012-02-05 09:52:20 -0700;UPD: Use prefixed types in scalartypes.c.src.

==

numpy/core/src/multiarray/scalartypes.c.src
==================
d48b756;Ralf Gommers;2012-02-05 15:57:00 +0100;STY: meshgrid: some minor changes to address review comments.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
b2c1a1c;Charles Harris;2012-02-04 23:32:32 -0700;UPD: Make multiarray *.c files use prefixed macros.
This consists of removing the #define NPY_NO_PREFIX and
including numpy/ndarrayobject.h instead of numpy/arrayobject.h.

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/buffer.c
numpy/core/src/multiarray/calculation.c
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/conversion_utils.c
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/datetime_busday.c
numpy/core/src/multiarray/datetime_busdaycal.c
numpy/core/src/multiarray/datetime_strings.c
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/flagsobject.c
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/na_mask.c
numpy/core/src/multiarray/na_object.c
numpy/core/src/multiarray/number.c
numpy/core/src/multiarray/numpymemoryview.c
numpy/core/src/multiarray/numpyos.c
numpy/core/src/multiarray/reduction.c
numpy/core/src/multiarray/refcount.c
numpy/core/src/multiarray/scalarapi.c
numpy/core/src/multiarray/sequence.c
numpy/core/src/multiarray/shape.c
numpy/core/src/multiarray/ucsnarrow.c
numpy/core/src/multiarray/usertypes.c
==================
f332b6f;Charles Harris;2012-02-04 19:40:08 -0700;UPD: Use prefixed types in arraytypes.c.src.
Almost all of these are in the template headers, but there are a few spots
where the current structure made it easier to use NPY_ or npy_ in the
template itself.

==

numpy/core/src/multiarray/arraytypes.c.src
==================
1dec213;Charles Harris;2012-02-04 23:12:04 -0700;ENH: Add a few needed macros to npy_common.h.

==

numpy/core/include/numpy/noprefix.h
numpy/core/include/numpy/npy_common.h
==================
d4cfc64;Charles Harris;2012-02-04 18:02:13 -0700;UPD: Include ndarrayobject.h instead of arrayobject.h in boolean_ops.c.src.

==

numpy/core/src/multiarray/boolean_ops.c.src
==================
fc85a46;Charles Harris;2012-02-04 16:07:44 -0700;UPD: Use prefixed types in lowlevel_strided_loops.c.src template headers.
The rational for this is that everything is explicit in the template
header and easily accessed there. I also think it better to keep the
names and types independent, but that is arguable. The file was
otherwise in no need of updating.

==

numpy/core/src/multiarray/lowlevel_strided_loops.c.src
==================
41a41f1;Charles Harris;2012-02-04 14:53:01 -0700;UPD: Use explicit prefixed types in einsum.c.src template headers.
The rational for this is that everything is explicit in the template
header and easily accessed there. I also think it better to keep the
names and types independent, but that is arguable. The file was
otherwise in no need of updating.

==

numpy/core/src/multiarray/einsum.c.src
==================
1099bdc;Charles Harris;2012-02-04 14:04:01 -0700;UPD: Use prefixed versions of double and int in multiarray_tests.c.src.
Just for consistency. Also a few exception style changes.

==

numpy/core/src/multiarray/multiarray_tests.c.src
==================
1941ed6;Charles Harris;2012-02-03 21:24:51 -0700;UPD: Remove includes of noprefix.h in ufunc_object.c and _compiled_base.c.

==

numpy/core/src/umath/ufunc_object.c
numpy/lib/src/_compiled_base.c
==================
265b1fb;Charles Harris;2012-02-03 21:20:56 -0700;BUG: Fix unprefixed reference to cdouble in ndarrayobject.h.

==

numpy/core/include/numpy/ndarraytypes.h
==================
77caaaf;Charles Harris;2012-02-03 20:57:03 -0700;UPD: Use prefixed macros in numpy/core/src/scalarmathmodule.c.src.
Also a fair amount of stylistic cleanups. This module lives in a
state of stylistic sin and needs an intervention.

==

numpy/core/src/scalarmathmodule.c.src
==================
93c2a70;Charles Harris;2012-02-03 15:49:03 -0700;UPD: Use prefixed macros in numpy/core/src/umath/funcs.inc.src.
Also make the templated stuff a bit simpler.

==

numpy/core/src/umath/funcs.inc.src
numpy/core/src/umath/umathmodule.c.src
==================
91eed7a;Charles Harris;2012-02-03 15:29:18 -0700;MOV: Rename umathmodule.c.src umathmodule.c since it has no templates.
Update core/bscript and core/setup.py to reflect the name change and
remove umathmodule.c.src as a template file that needs to be converted.

==

numpy/core/bscript
numpy/core/setup.py
numpy/core/src/umath/umathmodule.c
==================
585d6ea;Charles Harris;2012-02-03 14:59:47 -0700;UPD: include ndarrayobject.h instead of noprefix.h in umathmodule.c.src.

==

numpy/core/src/umath/umathmodule.c.src
==================
9599dde;Charles Harris;2012-02-03 13:41:36 -0700;UPD: Use prefixed macros in numpy/core/src/umath/loops.c.src templates.
Also include ndarrayobject.h instead of noprefix.h.

==

numpy/core/src/umath/loops.c.src
==================
89bd21b;Charles Harris;2012-02-03 13:16:46 -0700;STY: Simplify template logic in numpy/core/src/umath/loops.c.src.
This consists of removing constructs like @s@@type@ so that
substituting prefixed types works better. It has the side effect
of making the types more explicit in the template headers.

==

numpy/core/src/umath/loops.c.src
==================
debd122;Charles Harris;2012-02-03 11:29:06 -0700;UPD: Use prefixed macros in numpy/core/src/umath/*.src, skip templates.
Don't do the template headers yet. Affects
numpy/core/src/umath/funcs.inc.src
numpy/core/src/umath/loops.c.src

==

numpy/core/src/umath/funcs.inc.src
numpy/core/src/umath/loops.c.src
==================
fb0ca36;Charles Harris;2012-02-03 10:40:07 -0700;UPD: Use prefixed macros in numpy/core/src/npymath/*.src files.

==

numpy/core/src/npymath/ieee754.c.src
numpy/core/src/npymath/npy_math.c.src
numpy/core/src/npymath/npy_math_complex.c.src
==================
040061d;Charles Harris;2012-02-03 09:48:26 -0700;UPD: Use prefixed macros in umath_tests.c.src.

==

numpy/core/src/umath/umath_tests.c.src
==================
38b0a6e;Charles Harris;2012-02-03 01:24:58 -0700;UPD: Use prefixed macros in lapack_litemodule.c.
Also included ndarrayobject.h instead of noprefix.h.

==

numpy/linalg/lapack_litemodule.c
==================
acad872;Charles Harris;2012-02-03 00:11:51 -0700;UPD: Use prefixed macros in *.c files except numarray and linalg.

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/buffer.c
numpy/core/src/multiarray/calculation.c
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/conversion_utils.c
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/flagsobject.c
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/number.c
numpy/core/src/multiarray/refcount.c
numpy/core/src/multiarray/scalarapi.c
numpy/core/src/multiarray/sequence.c
numpy/core/src/multiarray/shape.c
numpy/core/src/multiarray/ucsnarrow.c
numpy/core/src/multiarray/usertypes.c
numpy/core/src/umath/ufunc_object.c
numpy/f2py/doc/multiarray/array_from_pyobj.c
numpy/lib/src/_compiled_base.c
==================
12fb59e;Charles Harris;2012-02-02 23:40:04 -0700;UPD: Use prefixed macros in *.h files except in numpy/numarray.

==

numpy/core/src/multiarray/conversion_utils.h
numpy/core/src/multiarray/ctors.h
numpy/core/src/multiarray/iterators.h
numpy/core/src/multiarray/mapping.h
numpy/core/src/multiarray/scalartypes.h
==================
2371a5f;Charles Harris;2012-02-02 23:22:22 -0700;UPD: Use prefixed macros in loops.h.src and regenerate loops.h

==

numpy/core/src/umath/loops.h
numpy/core/src/umath/loops.h.src
==================
ff4aef4;Mark Wiebe;2012-02-04 15:30:40 -0800;DEP: Remove dtype names immutability deprecation for 1.7
To be added back after the 1.7 release is branched.

==

numpy/core/src/multiarray/descriptor.c
==================
5b59ae2;Charles Harris;2012-02-04 16:12:10 -0700;Merge branch 'replace-old-defines'
* replace-old-defines:
  DOC: clarify numpy version for removal, document sed script better.
  STY: Fix up the 2.0 (1.7) release notes.
  DEP: Deprecate the old_defines.h header and the macros therein.
  UPDATE: Replace macros in old_defines.h by new.
  DOC: numpybook - Replace macro names in old_defines.h with new.
  DOC: Replace references to macros in old_defines with new.
  STY: Replace more found macros in old_defines.h with new.
  ENH: Add sed script that replaces macros in old_defines.h.
  STY: f2py - replace macros in old_defines.h with new.
  STY: linalg - replace macros in old_defines.h with new.
  STY: fft - replace macros in old_defines.h with new.
  STY: lib/src - replace macros in old_defines.h with new.
  STY: core/src - replace macros in old_defines.h with new versions.

==
==================
bbf49fc;Charles Harris;2012-02-04 10:53:05 -0700;DOC: clarify numpy version for removal, document sed script better.

==

doc/release/2.0.0-notes.rst
tools/replace_old_macros.sed
==================
cceb8f6;Charles Harris;2012-02-02 18:08:23 -0700;STY: Fix up the 2.0 (1.7) release notes.

==

doc/release/2.0.0-notes.rst
==================
8886322;Charles Harris;2012-02-01 18:52:59 -0700;DEP: Deprecate the old_defines.h header and the macros therein.
The old_defines.h file is no longer included in ndarrayobject.h, but
instead in the npy_deprecated_api.h file. It is no longer part of the numpy
build and its deprecation is noted in the release notes.

==

doc/release/2.0.0-notes.rst
numpy/core/include/numpy/ndarrayobject.h
numpy/core/include/numpy/npy_deprecated_api.h
numpy/core/include/numpy/old_defines.h
numpy/core/setup.py
==================
8a0e7cd;Charles Harris;2012-02-01 18:42:25 -0700;UPDATE: Replace macros in old_defines.h by new.
With the exception of the numarray fixups these were all instances
that were results of code generation.

==

numpy/core/code_generators/generate_umath.py
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/scalarmathmodule.c.src
numpy/numarray/_capi.c
numpy/numarray/include/numpy/arraybase.h
==================
c4b92ea;Charles Harris;2012-02-01 16:37:28 -0700;DOC: numpybook - Replace macro names in old_defines.h with new.

==

doc/numpybook/capi.lyx
==================
28214cf;Charles Harris;2012-02-01 16:24:45 -0700;DOC: Replace references to macros in old_defines with new.
Also remove swig support for numpy < 1 from numpy.i since it expects
the old macros.

==

doc/source/reference/c-api.array.rst
doc/source/reference/c-api.types-and-structures.rst
doc/source/user/c-info.beyond-basics.rst
doc/source/user/c-info.how-to-extend.rst
doc/swig/numpy.i
doc/swig/pyfragments.swg
==================
95e2e15;Charles Harris;2012-02-01 15:29:14 -0700;STY: Replace more found macros in old_defines.h with new.

==

doc/numpybook/comparison/f2py/filtermodule.c
numpy/core/blasdot/_dotblas.c
==================
08338bd;Charles Harris;2012-01-31 12:00:06 -0700;ENH: Add sed script that replaces macros in old_defines.h.

==

tools/replace_old_macros.sed
==================
b63f91e;Charles Harris;2012-01-28 18:40:19 -0700;STY: f2py - replace macros in old_defines.h with new.

==

numpy/core/include/numpy/oldnumeric.h
numpy/f2py/capi_maps.py
numpy/f2py/cfuncs.py
numpy/f2py/doc/fortranobject.tex
numpy/f2py/docs/HISTORY.txt
numpy/f2py/src/fortranobject.c
numpy/f2py/src/test/foomodule.c
numpy/f2py/tests/src/array_from_pyobj/wrapmodule.c
numpy/f2py/tests/test_array_from_pyobj.py
==================
6f9a3ce;Charles Harris;2012-01-28 12:37:37 -0700;STY: linalg - replace macros in old_defines.h with new.

==

numpy/linalg/lapack_litemodule.c
==================
33726b1;Charles Harris;2012-01-28 12:31:23 -0700;STY: fft - replace macros in old_defines.h with new.

==

numpy/fft/fftpack_litemodule.c
==================
9b12b1d;Charles Harris;2012-01-28 12:21:55 -0700;STY: lib/src - replace macros in old_defines.h with new.

==

numpy/lib/src/_compiled_base.c
==================
215a91a;Charles Harris;2012-01-28 12:18:36 -0700;STY: core/src - replace macros in old_defines.h with new versions.

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/buffer.c
numpy/core/src/multiarray/calculation.c
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/conversion_utils.c
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/number.c
numpy/core/src/multiarray/refcount.c
numpy/core/src/multiarray/scalarapi.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/multiarray/shape.c
numpy/core/src/multiarray/ucsnarrow.c
numpy/core/src/multiarray/ucsnarrow.h
numpy/core/src/multiarray/usertypes.c
numpy/core/src/scalarmathmodule.c.src
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/umath_tests.c.src
numpy/core/src/umath/umathmodule.c.src
==================
48d6edb;Ralf Gommers;2012-02-04 12:08:13 +0100;BUG: fix incorrect exception handling in arrayprint.  Closes ticket 2038.

==

numpy/core/arrayprint.py
==================
b8bfcd0;Charles Harris;2012-02-01 07:41:21 -0700;DOC: Fix another detail in randn documentation.

==

numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
==================
7a6239e;Mark Wiebe;2012-01-27 23:52:36 -0600;STY: Add comment and rename monotonic_ functino to be more descriptive

==

numpy/lib/src/_compiled_base.c
==================
3a86a97;Mark Wiebe;2012-01-27 23:39:37 -0600;Merge remote-tracking branch 'dwf/release_gil_in_libfunctions'

==
==================
9e2fd10;Ben Root;2012-01-21 22:22:02 -0600;TST: Test gradient(...) of datetime64 and timedelta64 arrays.

==

numpy/lib/tests/test_function_base.py
==================
06d947c;Ben Root;2011-09-27 09:52:38 -0500;ENH: Support datetime64, timedelta64 in gradient. Allow array-like input.

==

numpy/lib/function_base.py
==================
7bb277b;Charles Harris;2012-01-27 19:24:25 -0700;DOC: Document macro changes in release notes.

==

doc/release/2.0.0-notes.rst
==================
0858831;Alok Singhal;2012-01-15 23:07:29 -0800;STY, BUG: Cleanup some macros and move a NULL check.
Some macros are changed into statements with the {...}do while(0)
construction, while a few others have had the trailing semicolon
removed. This makes the macro usage a bit safer and more consistent,
but it is possible some third party code will be affected.

A NULL check was moved ahead of the spot where the variable is
first used.

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/numpyos.c
==================
b5959b6;Charles Harris;2012-01-27 18:47:40 -0700;DOC: Fix docstrings of rand and randn a bit more and regenerate.

==

numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
==================
5547a9b;Charles Harris;2012-01-27 18:31:25 -0700;STY: Merge some error strings into single lines.

==

numpy/core/src/multiarray/methods.c
==================
da2962c;Warren Weckesser;2012-01-22 19:56:53 -0600;TST: add a test that itemset raises an exception when the array is not writeable

==

numpy/core/tests/test_multiarray.py
==================
b95db7f;Warren Weckesser;2012-01-22 19:37:26 -0600;BUG: multiarray: in array_setscalar, check that the array is writeable (ticket #1622)

==

numpy/core/src/multiarray/methods.c
==================
67ba287;David Warde-Farley;2012-01-25 11:49:43 -0500;DOC: add a high-level comment for arr_insert_loop

==

numpy/lib/src/_compiled_base.c
==================
aad737e;Travis E. Oliphant;2012-01-24 22:56:57 -0800;Merge pull request #188 from dwf/getmap_counter_precision_bug
BUG: PyArray_{Get,Set}Map counter types are "int", should be "npy_intp"
==
==================
65d3005;David Warde-Farley;2012-01-24 22:09:08 -0500;BUG: Fix identical int->npy_intp in PyArray_SetMap
Thanks to Christoph Gohlke for pointing this out.

==

numpy/core/src/multiarray/mapping.c
==================
178bd8b;David Warde-Farley;2012-01-24 17:27:07 -0500;BUG: PyArray_GetMap using low-precision counter
Should be using npy_intp rather than int.

==

numpy/core/src/multiarray/mapping.c
==================
4fcb53e;Mark Wiebe;2012-01-21 18:16:25 -0800;Merge branch 'ticket_2027'

==
==================
e74585d;Mark Wiebe;2012-01-21 18:12:41 -0800;TST: Add a test for ticket #2027

==

numpy/core/tests/test_einsum.py
==================
7d909e3;Mark Wiebe;2012-01-21 18:03:17 -0800;BUG: einsum: Fix issue #2027, inner loop 3rd data pointer was not being incremented

==

numpy/core/src/multiarray/einsum.c.src
==================
aea993c;Mark Wiebe;2012-01-21 18:01:23 -0800;BUG: Change nditer to match documentation about grow_inner flag

==

numpy/core/src/multiarray/nditer_pywrap.c
==================
2f9ed8d;Charles Harris;2012-01-21 11:30:04 -0700;PYX: Regenerate mtrand.c

==

numpy/random/mtrand/mtrand.c
==================
d389db5;Joonas Paalasmaa;2012-01-08 12:48:55 +0200;Fixed RandomState docstrings.

==

numpy/random/mtrand/mtrand.pyx
==================
d36e076;Charles Harris;2012-01-18 17:06:20 -0700;BUG: Fix ticket #2021.
The return from PyArray_DescrFromObject PyArray_SearchSorted needed
to be checked for NULL. Also added checks in other spots where
PyArray_DescrFromObject was called. Added regression test for same.
Made a few small code cleanups along the way.

All the checks may not be necessary, but
1) No one should have to waste brain cycles figuring that out.
2) Bugs happen.
3) Things change.

==

numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/item_selection.c
numpy/core/tests/test_regression.py
==================
6666eec;Charles Harris;2012-01-14 15:07:04 -0700;STY: Double space between main test functions.

==

numpy/core/tests/test_maskna.py
==================
8a4ebf4;Charles Harris;2012-01-14 15:01:39 -0700;TST: Test that 'astype' method works for maskna arrays with masked values.

==

numpy/core/tests/test_maskna.py
==================
d3cef4f;Charles Harris;2012-01-14 14:59:19 -0700;BUG: Make output of 'astype' method a maskna array if source array is.

==

numpy/core/src/multiarray/methods.c
==================
55472ca;Charles Harris;2012-01-09 11:10:50 -0700;Merge branch 'pull-181'
* pull-181: (39 commits)
  TST: Remove docstring from test_class_methods.
  DOC: Fix bogus output in polyval example.
  DOC: Improve numpy reference documentation of polynomial classes.
  DOC: Clarify the column order of 2-D and 3-D Vandermonde matrices.
  DOC: Fix cut and paste error, derivative <- integral.
  SPELL: Spellcheck the modules. Clarify an example.
  DOC: Move removing deprecated imports note to deprecation section.
  ENH: Modify test classes to produce more informative test messages.
  WHT: Whitespace cleanup.
  REM: Remove deprecated imports from polynomial package.
  DOC: Document new polynomial package functionality in the release notes.
  DOC: Document the use of the polynomial convenience classes.
  TST: Add tests for NA support in the polynomial fitting functions.
  ENH: Add support for NA to the least squares fitting routines.
  TST: Add tests for mismatched types, domains, and windows.
  BUG: The polynomial convenience classes let different types interact.
  DOC: Lower toc number of levels.
  DOC: Finish documenting new functions in the polynomial package.
  DOC: Document xxxfit functions in the polynomial package modules.
  DOC: Add version added to some of the polynomial package modules.
  ...

==
==================
356537c;Charles Harris;2012-01-03 14:02:56 -0700;TST: Remove docstring from test_class_methods.
And don't use the 'exec' statement to write the tests.

==

numpy/polynomial/tests/test_classes.py
==================
b7a5b17;Charles Harris;2012-01-03 12:28:43 -0700;DOC: Fix bogus output in polyval example.

==

numpy/polynomial/polynomial.py
==================
4364975;Charles Harris;2012-01-03 11:44:02 -0700;DOC: Improve numpy reference documentation of polynomial classes.
Add more explanation of what happens in polynomial substitution and also of
its use in casting between types. Clean up some rst glitches.

==

doc/source/reference/routines.polynomials.classes.rst
doc/source/reference/routines.polynomials.hermite.rst
doc/source/reference/routines.polynomials.hermite_e.rst
==================
894d93e;Charles Harris;2012-01-03 10:40:49 -0700;DOC: Clarify the column order of 2-D and 3-D Vandermonde matrices.

==

numpy/polynomial/chebyshev.py
numpy/polynomial/hermite.py
numpy/polynomial/hermite_e.py
numpy/polynomial/laguerre.py
numpy/polynomial/legendre.py
numpy/polynomial/polynomial.py
==================
0402e1c;Charles Harris;2012-01-03 08:25:55 -0700;DOC: Fix cut and paste error, derivative <- integral.

==

numpy/polynomial/chebyshev.py
numpy/polynomial/hermite.py
numpy/polynomial/hermite_e.py
numpy/polynomial/laguerre.py
numpy/polynomial/legendre.py
==================
a4e99a7;Charles Harris;2012-01-03 08:05:45 -0700;SPELL: Spellcheck the modules. Clarify an example.

==

numpy/polynomial/chebyshev.py
numpy/polynomial/hermite.py
numpy/polynomial/hermite_e.py
numpy/polynomial/laguerre.py
numpy/polynomial/legendre.py
numpy/polynomial/polynomial.py
numpy/polynomial/polytemplate.py
numpy/polynomial/polyutils.py
==================
88163cb;Charles Harris;2012-01-03 06:34:26 -0700;DOC: Move removing deprecated imports note to deprecation section.

==

doc/release/2.0.0-notes.rst
==================
77b8a26;Charles Harris;2012-01-02 19:45:18 -0700;ENH: Modify test classes to produce more informative test messages.
The tests were all generator based and that produced the same message
for all the tests when they were run in verbose mode. The quick fix
was to use the generator to write named test functions for all the tests.

==

numpy/polynomial/tests/test_classes.py
==================
cb19ab6;Charles Harris;2012-01-01 19:35:33 -0700;WHT: Whitespace cleanup.

==

numpy/polynomial/polynomial.py
==================
d41fc4d;Charles Harris;2012-01-01 19:33:24 -0700;REM: Remove deprecated imports from polynomial package.

==

numpy/polynomial/__init__.py
==================
9e2fbab;Charles Harris;2012-01-01 19:19:51 -0700;DOC: Document new polynomial package functionality in the release notes.

==

doc/release/2.0.0-notes.rst
==================
d3ac8f7;Charles Harris;2012-01-01 18:57:08 -0700;DOC: Document the use of the polynomial convenience classes.

==

doc/source/reference/routines.polynomials.classes.rst
==================
d305119;Charles Harris;2012-01-01 16:02:06 -0700;TST: Add tests for NA support in the polynomial fitting functions.

==

numpy/polynomial/tests/test_chebyshev.py
numpy/polynomial/tests/test_hermite.py
numpy/polynomial/tests/test_hermite_e.py
numpy/polynomial/tests/test_laguerre.py
numpy/polynomial/tests/test_legendre.py
numpy/polynomial/tests/test_polynomial.py
==================
cd8f59d;Charles Harris;2012-01-01 13:43:26 -0700;ENH: Add support for NA to the least squares fitting routines.

==

numpy/polynomial/chebyshev.py
numpy/polynomial/hermite.py
numpy/polynomial/hermite_e.py
numpy/polynomial/laguerre.py
numpy/polynomial/legendre.py
numpy/polynomial/polynomial.py
numpy/polynomial/polytemplate.py
==================
4e84ece;Charles Harris;2012-01-01 14:35:28 -0700;TST: Add tests for mismatched types, domains, and windows.
Test that those combinations raise ValueError for the arithmetic operations
of the convenience classes.

==

numpy/polynomial/tests/test_classes.py
==================
a0319da;Charles Harris;2011-12-31 22:21:01 -0700;BUG: The polynomial convenience classes let different types interact.
In particular for arithmetic where one could end up with a Polynomial
type with Chebyshev coefficients after an addition. It is unlikely that
that would be done on purpose.

The PolyDomain error message was also replaced by a TypeError with
an appropriate message. That seems like a better choice.

==

numpy/polynomial/polytemplate.py
==================
9d40c7c;Charles Harris;2011-12-28 20:45:59 -0700;DOC: Lower toc number of levels.

==

doc/source/reference/routines.polynomials.rst
==================
dc7719f;Charles Harris;2011-12-28 18:43:17 -0700;DOC: Finish documenting new functions in the polynomial package.
The old functions could use a review, but that isn't pressing.

==

numpy/polynomial/chebyshev.py
numpy/polynomial/hermite.py
numpy/polynomial/hermite_e.py
numpy/polynomial/laguerre.py
numpy/polynomial/legendre.py
numpy/polynomial/polynomial.py
==================
c462637;Charles Harris;2011-12-27 17:54:09 -0700;DOC: Document xxxfit functions in the polynomial package modules.

==

numpy/polynomial/chebyshev.py
numpy/polynomial/hermite.py
numpy/polynomial/hermite_e.py
numpy/polynomial/laguerre.py
numpy/polynomial/legendre.py
numpy/polynomial/polynomial.py
==================
08c8c54;Charles Harris;2011-12-27 17:53:15 -0700;DOC: Add version added to some of the polynomial package modules.

==

doc/source/reference/routines.polynomials.chebyshev.rst
doc/source/reference/routines.polynomials.hermite.rst
doc/source/reference/routines.polynomials.hermite_e.rst
doc/source/reference/routines.polynomials.laguerre.rst
doc/source/reference/routines.polynomials.legendre.rst
doc/source/reference/routines.polynomials.package.rst
doc/source/reference/routines.polynomials.polynomial.rst
==================
175d90a;Charles Harris;2011-12-27 12:41:17 -0700;DOC: Revise documentation for the basic functions.
Step 1 in the polynomial package documentation revisions.

==

numpy/polynomial/chebyshev.py
numpy/polynomial/hermite.py
numpy/polynomial/hermite_e.py
numpy/polynomial/laguerre.py
numpy/polynomial/legendre.py
numpy/polynomial/polynomial.py
==================
6bc4374;Charles Harris;2011-12-27 12:38:02 -0700;BUG: Fix up links to classes.
The Sphinx markup was incorrect the documentation to the polynomial
convenience classes wasn't being generated.

==

doc/source/reference/routines.polynomials.chebyshev.rst
doc/source/reference/routines.polynomials.hermite.rst
doc/source/reference/routines.polynomials.hermite_e.rst
doc/source/reference/routines.polynomials.laguerre.rst
doc/source/reference/routines.polynomials.legendre.rst
doc/source/reference/routines.polynomials.polynomial.rst
==================
2e6ef35;Charles Harris;2011-12-24 22:14:18 -0700;DOC: Rearrange the polynomial documents.
This is the first step in cleaning up the polynomial documentation
and writing an instructional section on the convenience classes.

==

doc/source/reference/routines.polynomials.chebyshev.rst
doc/source/reference/routines.polynomials.classes.rst
doc/source/reference/routines.polynomials.hermite.rst
doc/source/reference/routines.polynomials.hermite_e.rst
doc/source/reference/routines.polynomials.laguerre.rst
doc/source/reference/routines.polynomials.legendre.rst
doc/source/reference/routines.polynomials.package.rst
doc/source/reference/routines.polynomials.polynomial.rst
doc/source/reference/routines.polynomials.rst
numpy/polynomial/legendre.py
==================
3c2603f;Charles Harris;2011-12-24 16:08:22 -0700;HACK: Make __array_priority__ = 1000.
This works around changes in the treatment of __array_priority__ that
were part of commit 32b32c2. Previously the rop's of the right hand
object were called whenever it had the __array_priority__ attribute
and was not an ndarray or derived thereof.  After the change the
object needed to have greater priority, in this case > 0. It isn't
clear that the new behavior is the correct one and if it is reverted
then setting __array_priority__ back to 0 will provide a test for that
decision.

==

numpy/polynomial/polytemplate.py
==================
2986478;Charles Harris;2011-12-24 16:03:37 -0700;TST: Finish moving class tests into test_classes.
There are currently errors that will be fixed if pull #178 goes in.
The tests were also changed to use generators, which makes them
run noticeably slower but give better error messages and makes the
tests a bit cleaner.

==

numpy/polynomial/tests/test_chebyshev.py
numpy/polynomial/tests/test_classes.py
numpy/polynomial/tests/test_hermite.py
numpy/polynomial/tests/test_hermite_e.py
numpy/polynomial/tests/test_laguerre.py
numpy/polynomial/tests/test_legendre.py
numpy/polynomial/tests/test_polynomial.py
==================
855ced2;Charles Harris;2011-12-23 20:00:03 -0700;TST: Move more tests into numpy/polynomial/tests/test_classes.py

==

numpy/polynomial/tests/test_chebyshev.py
numpy/polynomial/tests/test_classes.py
numpy/polynomial/tests/test_hermite.py
numpy/polynomial/tests/test_hermite_e.py
numpy/polynomial/tests/test_laguerre.py
numpy/polynomial/tests/test_legendre.py
numpy/polynomial/tests/test_polynomial.py
==================
8ad18ab;Charles Harris;2011-12-23 15:33:59 -0700;TST: Add tests for basis and cast static class methods.
A new test file, test_classes, has been added so that conversions
between all the class types can be tested. Several tests common to
all the classes were also moved to this file. Ideally all the common
tests will be moved, but that isn't done yet.

==

numpy/polynomial/tests/test_chebyshev.py
numpy/polynomial/tests/test_classes.py
numpy/polynomial/tests/test_hermite.py
numpy/polynomial/tests/test_hermite_e.py
numpy/polynomial/tests/test_laguerre.py
numpy/polynomial/tests/test_legendre.py
numpy/polynomial/tests/test_polynomial.py
==================
a76c333;Charles Harris;2011-12-22 17:27:47 -0700;ENH: Add static methods basis and cast to the polynomial classes.
The new basis method is a convenient way to return an instance of the basis
function of given degree for the class. It is intended mostly for
pedagogical purposes.

The new cast method provides an alternate way to convert an instance of one
polynomial class to another. It complements the convert instance method.

==

numpy/polynomial/polytemplate.py
==================
1c7d73c;Charles Harris;2011-12-22 17:26:20 -0700;TST: Add tests for Gauss quadrature and weight functions.

==

numpy/polynomial/tests/test_chebyshev.py
numpy/polynomial/tests/test_hermite.py
numpy/polynomial/tests/test_hermite_e.py
numpy/polynomial/tests/test_laguerre.py
numpy/polynomial/tests/test_legendre.py
==================
c936d86;Charles Harris;2011-12-22 17:18:01 -0700;ENH: Add functions for Gauss quadrature and associated weight functions.
The new functions for Gauss quadrature  are of the form xxxgauss, where xxx
is any of cheb, leg, lag, herm, herme. They return the Gauss points and
weights for Gauss quadrature of the various orthogonal polynomial types
given the degree. They are tested to work up to degree 100.

The new functions for the weight are of the form xxxweight, where xxx is
any of cheb, leg, lag, herm, herme. They return the value of the weight
function for the various orthogonal polynomial types given and array of
points.

==

numpy/polynomial/chebyshev.py
numpy/polynomial/hermite.py
numpy/polynomial/hermite_e.py
numpy/polynomial/laguerre.py
numpy/polynomial/legendre.py
==================
9906d6d;Charles Harris;2011-12-20 18:44:34 -0700;BUG: Fix test that was in wrong spot.

==

numpy/polynomial/tests/test_hermite.py
==================
4dbae53;Charles Harris;2011-07-17 13:53:35 -0600;ENH: Add companion matrix functions.
The new companion matrices are related to the old by a
similarity transformation that makes them better conditioned
for root finding. In particular, the companion matrices for
the orthogonal polynomials are symmetric when the zeros of a
single polynomial term is wanted. This produces better zeros
for use in Gauss quadrature.

==

numpy/polynomial/chebyshev.py
numpy/polynomial/hermite.py
numpy/polynomial/hermite_e.py
numpy/polynomial/laguerre.py
numpy/polynomial/legendre.py
numpy/polynomial/polynomial.py
numpy/polynomial/tests/test_hermite_e.py
==================
00ff295;Charles Harris;2011-12-20 18:07:45 -0700;TST: Add tests for multidimensional coefficient array functionality.
Test the multi-dimensional coefficient array functionality.
Reorganize and cleanup some previous tests.

==

numpy/polynomial/tests/test_chebyshev.py
numpy/polynomial/tests/test_hermite.py
numpy/polynomial/tests/test_hermite_e.py
numpy/polynomial/tests/test_laguerre.py
numpy/polynomial/tests/test_legendre.py
numpy/polynomial/tests/test_polynomial.py
==================
266915b;Charles Harris;2011-12-20 18:00:39 -0700;BUG: Small fixes and additions
Where xxx is one of poly, cheb, leg, lag, herm, herme:

Refactor  xxxval2d, xxxval3d, xxxgrid2d, and xxxgrid3d for clarity.
Check that coordinate arrays are compatible in xxxval2d, xxxval3d.
Work around einsum bug that affected xxxvander3d.

==

numpy/polynomial/chebyshev.py
numpy/polynomial/hermite.py
numpy/polynomial/hermite_e.py
numpy/polynomial/laguerre.py
numpy/polynomial/legendre.py
numpy/polynomial/polynomial.py
==================
26e2ae4;Charles Harris;2011-12-18 17:43:10 -0700;BUG: The derivative tests were using incorrect test coefficients.
The coefficients used were [1] + [0]*i instead of [0]*i + [1].

==

numpy/polynomial/tests/test_chebyshev.py
numpy/polynomial/tests/test_hermite.py
numpy/polynomial/tests/test_hermite_e.py
numpy/polynomial/tests/test_laguerre.py
numpy/polynomial/tests/test_legendre.py
numpy/polynomial/tests/test_polynomial.py
==================
8e8b85d;Charles Harris;2011-12-16 20:34:01 -0700;ENH: Make derivatives and integrals work on multidimensional array.
An axis keyword was added to the function signatures of xxxder and
xxxint, where xxx is any of poly, cheb, leg, lag, herm, herme. The
evaluation method for the Chebeshev series was also changed to avoid
using z_series and to more closely resemble the other implementations.

At some point the z_series will be removed from the chebyshev module
and only used for trigonometric series.

==

numpy/polynomial/chebyshev.py
numpy/polynomial/hermite.py
numpy/polynomial/hermite_e.py
numpy/polynomial/laguerre.py
numpy/polynomial/legendre.py
numpy/polynomial/polynomial.py
==================
a4f51d7;Charles Harris;2011-12-15 21:25:53 -0700;ENH: Add functions for producing 2D and 3D pseudo Vandermonde matrices that are useful for least squares fits to data depending on two or three variables using the various polynomial basis.
The new functions have names polyvander2d, and polyvander3d,
where 'poly' can be replaced by any of 'leg', 'cheb', 'lag',
'herm', or 'herme'.

==

numpy/polynomial/chebyshev.py
numpy/polynomial/hermite.py
numpy/polynomial/hermite_e.py
numpy/polynomial/laguerre.py
numpy/polynomial/legendre.py
numpy/polynomial/polynomial.py
==================
58d9618;Charles Harris;2011-12-10 11:47:05 -0700;ENH: Modify the various polynomial series so that multidimensional coefficient arrays can be used. Add functions for evaluation of 2D and 3D polynomial series evaluated either on a specified set of points or on a cartesian product of 1D points.
The new functions have names polyval2d, polygrid2d, polyval3d, and
polygrid3d, where 'poly' can be replaced by any of 'leg', 'cheb', 'lag',
'herm', or 'herme'. These additional functions should cover the common
multidimensional cases and provide examples for anyone who wants to go to
higher dimensions.

==

numpy/polynomial/chebyshev.py
numpy/polynomial/hermite.py
numpy/polynomial/hermite_e.py
numpy/polynomial/laguerre.py
numpy/polynomial/legendre.py
numpy/polynomial/polynomial.py
==================
0a17ccb;Charles Harris;2011-12-10 08:35:29 -0700;STY: Whitespace cleanup and double space between function definitions.

==

numpy/polynomial/chebyshev.py
numpy/polynomial/hermite.py
numpy/polynomial/hermite_e.py
numpy/polynomial/laguerre.py
numpy/polynomial/legendre.py
numpy/polynomial/polynomial.py
==================
b817938;Lars Buitinck;2011-11-10 14:28:13 +0100;BUG raise TypeError instead of NotImplementedError for wrong types

==

numpy/core/src/umath/ufunc_object.c
==================
3d9bedb;Ralf Gommers;2011-12-29 18:21:05 +0100;DOC: putmask: mention copyto is NA-aware, and recommend to switch to it.

==

numpy/add_newdocs.py
==================
8c11349;Ralf Gommers;2011-12-28 13:16:50 +0100;DEP: undeprecate putmask. Used a lot, no need to deprecate it.

==

numpy/add_newdocs.py
numpy/core/src/multiarray/item_selection.c
==================
825efdb;Charles Harris;2011-12-24 10:35:00 -0700;BUG: array_divmod did not check for Py_NotImplemented.
The consequence of this bug was the __rdivmod__ wasn't called for user
classes that defined __array_priority__.

==

numpy/core/src/multiarray/number.c
==================
1475319;Paul Anton Letnes;2011-11-27 14:35:59 +0100;BUG: savetxt now handles complex arrays.  Closes #1573.

==

numpy/lib/npyio.py
numpy/lib/tests/test_io.py
==================
3fb541e;Ralf Gommers;2011-12-28 10:30:08 +0100;TST: meshgrid: test expected shapes for Cartesian and matrix indexing.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
4e57117;Ralf Gommers;2011-12-28 10:01:42 +0100;BUG: meshgrid: raise error on single input.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
166d081;Geoffrey Irving;2011-12-04 23:21:04 -0800;REV: Revert check for NULL pointer in NpyCapsule_Check
Essentially all functions in the Python C API require nonnull arguments,
and crash if given nulls.  PyCapsule_Check is no exception, and numpy
should probably mirror the standard behavior.  As of change e873d58492,
we don't need this check for null, so revert.

Specifically, this reverts commit e9c42cab112d94dbcade9f1afc64b26af0521e14.

==

numpy/core/include/numpy/npy_3kcompat.h
==================
31eccab;Geoffrey Irving;2011-12-04 22:57:50 -0800;BUG: ufunc_type_resolution.c: Fix another user defined type ufunc bug

==

numpy/core/src/umath/ufunc_type_resolution.c
==================
1b7673d;Geoffrey Irving;2011-12-04 17:47:38 -0800;BUG: ufunc_object.c: Fix a bug in user-defined loop resolution

==

numpy/core/src/umath/ufunc_type_resolution.c
==================
de51560;Geoffrey Irving;2011-12-04 17:44:43 -0800;convert_datatype.c: Check for null pointer before calling NpyCapsule_Check

==

numpy/core/src/multiarray/convert_datatype.c
==================
3b3735d;Charles Harris;2011-12-17 10:16:10 -0700;BUG: Fix dimension checks in random.choice. Make sure last entry in cdf is exactly 1.0.

==

numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
==================
2988b0e;Charles Harris;2011-12-17 09:17:52 -0700;Merge branch 'pull-151'
* pull-151:
  FIX: Add release notes, use inverse cdf method for non-uniform sampling with replacement, change searchsorted to use side='right', and regenerate mtrand.c.
  FIX: Changed named to choice, reverted other changes.
  ENH: New sample function, bugs in tests fixed

==
==================
26195cf;Chris Jordan-Squire;2011-12-16 17:49:59 -0800;FIX: Add release notes, use inverse cdf method for non-uniform sampling with replacement, change searchsorted to use side='right', and regenerate mtrand.c.

==

doc/release/2.0.0-notes.rst
numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
numpy/random/tests/test_random.py
==================
67f24e8;Chris Jordan-Squire;2011-09-02 12:09:48 -0500;FIX: Changed named to choice, reverted other changes.

==

doc/source/reference/routines.random.rst
numpy/core/tests/test_multiarray.py
numpy/fft/tests/test_fftpack.py
numpy/lib/tests/test_index_tricks.py
numpy/lib/tests/test_io.py
numpy/lib/tests/test_regression.py
numpy/random/__init__.py
numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
numpy/random/tests/test_random.py
==================
8b6c850;Chris Jordan-Squire;2011-09-01 15:14:05 -0500;ENH: New sample function, bugs in tests fixed

==

doc/source/reference/routines.random.rst
numpy/core/tests/test_multiarray.py
numpy/fft/tests/test_fftpack.py
numpy/lib/tests/test_index_tricks.py
numpy/lib/tests/test_io.py
numpy/lib/tests/test_regression.py
numpy/random/__init__.py
numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
numpy/random/tests/test_random.py
==================
3d0b348;Charles Harris;2011-12-15 09:15:28 -0700;Merge branch 'pull-176'
* pull-176:
  TST: Add test for weight modification.
  BUG: Handle weight correctly and don't modify the original.
  MAINT: Make masked ma.polyfit match current polyfit.

==
==================
008e5e9;Charles Harris;2011-12-06 21:53:45 -0700;TST: Add test for weight modification.

==

numpy/ma/tests/test_extras.py
==================
eb042bf;Charles Harris;2011-12-06 21:37:47 -0700;BUG: Handle weight correctly and don't modify the original.

==

numpy/ma/extras.py
==================
3096486;Charles Harris;2011-12-06 20:41:03 -0700;MAINT: Make masked ma.polyfit match current polyfit.

==

numpy/ma/extras.py
numpy/ma/tests/test_extras.py
==================
37d723c;Ralf Gommers;2011-12-13 23:24:47 +0100;MAINT: clean up docstring and some minor items in meshgrid.  Remove ndgrid.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
e37a90c;Per A. Brodtkorb;2011-12-13 23:01:22 +0100;ENH: enhance meshgrid to generate 3D grids, sparse grids, matrix indexing.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
5a68394;Carlos Valiente;2011-12-05 13:23:03 +0000;MAINT: update version match regexp for IBM AIX Fortran compilers.
The patched version correctly matches the output of ``xlf -qversion`` on my AIX platform:

  $ uname -a
  AIX c1t0101 3 5 00CF49B14C00
  $ xlf -qversion
  IBM XL Fortran for AIX, V12.1
  Version: 12.01.0000.0000
  $

==

numpy/distutils/fcompiler/ibm.py
==================
059334c;Charles Harris;2011-12-04 12:10:01 -0700;STY: Small coding style cleanups.

==

numpy/core/src/multiarray/convert_datatype.c
==================
e9c42ca;Charles Harris;2011-12-04 12:01:25 -0700;BUG: Check for NULL pointer before calling PyCObject_Check or PyCapsule_CheckExact. This may be a Python bug but we might as well check anyway. Reported by Geoffrey Irving.

==

numpy/core/include/numpy/npy_3kcompat.h
==================
eb46577;Stefan van der Walt;2011-11-09 11:21:14 -0800;BUG: Do not segfault on dot between sparse matrices.

==

numpy/core/src/multiarray/multiarraymodule.c
==================
04d225a;David Cournapeau;2011-11-25 08:12:20 +0000;BUG: forgot to add numpy template.

==

numpy/version.py.in
==================
7f302cc;David Cournapeau;2011-11-21 06:03:44 +0000;BUG: fix #1984 (generate correct version.py).

==

bscript
==================
7297785;Raymond Roberts;2011-10-10 22:10:50 -0400;BLD: add support for the new X11 directory structure on Ubuntu & co.

==

numpy/distutils/system_info.py
==================
4daf949;Charles Harris;2011-10-23 13:32:54 -0600;BUG: Fix maximum/minimum for object arrays in Python 3. Use PyObject_RichCompareBool instead of PyObject_Cmp.

==

numpy/core/src/umath/funcs.inc.src
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_umath.py
==================
d7b59fe;Charles Harris;2011-10-23 10:48:20 -0600;STY: Some coding style fixups.

==

numpy/core/src/multiarray/calculation.c
==================
6fc0737;Ben Root;2011-09-15 19:37:48 -0500;ENH: Explicitly coded argmin for timedelta

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/calculation.c
numpy/core/src/multiarray/usertypes.c
numpy/core/tests/test_multiarray.py
==================
31c2902;tim cera;2011-10-20 15:47:05 -0400;ENH: Add 'pgfortran' as a valid compiler in the Portland Group suite of fortran compilers. Adjust the version string command.

==

numpy/distutils/fcompiler/pg.py
==================
ec56ee1;Ralf Gommers;2011-10-17 22:54:18 +0200;BLD: fix up detection of Intel CPU on OS X in system_info.py.

==

numpy/distutils/system_info.py
==================
1dc1877;David Cournapeau;2011-10-10 09:10:28 +0100;ENH: add context manager for NpzFile class.

==

numpy/lib/npyio.py
==================
efe04c8;David Cournapeau;2011-10-10 09:09:45 +0100;DOC: mention that NpzFile instances must be closed.

==

numpy/lib/npyio.py
==================
fcae1ed;Pauli Virtanen;2011-10-08 15:09:41 +0200;BUG: core: fix compilation for UCS-narrow

==

numpy/core/include/numpy/noprefix.h
numpy/core/include/numpy/old_defines.h
==================
35952aa;Ralf Gommers;2011-10-04 22:45:22 +0200;DOC: describe required version of GCC in MinGW on Windows in release doc.

==

doc/HOWTO_RELEASE.rst.txt
==================
909010a;Han;2011-10-04 14:14:07 +0200;BUG: Fix version comparison bug on Py25.

==

numpy/distutils/mingw32ccompiler.py
==================
9ba2d53;hangenuit@gmail.com;2011-09-17 20:09:23 +0200;BUG: Fixes for Python3 and some further enhancements.

==

numpy/distutils/mingw32ccompiler.py
==================
33dec5f;hangenuit@gmail.com;2011-09-17 18:26:16 +0200;ENH: Incorporated review advice and changed macro hack to MinGW hint.
When doing the typedef change, it conflicted with existing typedefs.
I realized that MinGW did not know which MSVC runtime it would link with,
but it had conditional definitions for MSVC 8 and up, which can be activated
by defining __MSVCRT_VERSION__. So I added it to the compiler macros, which
made the fallback hack and extra typedef unnecessary.

==

numpy/core/src/multiarray/datetime_strings.c
numpy/distutils/mingw32ccompiler.py
==================
ab23371;hangenuit@gmail.com;2011-09-15 09:32:41 +0200;BUG: Add another preprocessor statement for 64-bits fallback mechanism.

==

numpy/core/src/multiarray/datetime_strings.c
numpy/distutils/mingw32ccompiler.py
==================
a069994;hangenuit@gmail.com;2011-09-14 23:45:28 +0200;BUG: DLL finder should also look in WinSxS directory.

==

numpy/distutils/mingw32ccompiler.py
==================
f8e3834;hangenuit@gmail.com;2011-09-14 23:15:25 +0200;BUG: Also build MSVC debug library if MINGW_USE_CUSTOM_MSVCR is defined (best effort).

==

numpy/distutils/mingw32ccompiler.py
==================
be07051;Han;2011-09-14 15:19:07 +0200;ENH: In debug mode, do not use customized MSVC runtime library.

==

numpy/distutils/mingw32ccompiler.py
==================
1fa57b6;Han;2011-09-14 15:02:25 +0200;ENH: Clean up symbol definition file.

==

numpy/distutils/mingw32ccompiler.py
==================
d7eafb0;Han;2011-09-14 14:56:31 +0200;ENH: Some commments. Skip customization for MSVC < 8.0.

==

numpy/distutils/mingw32ccompiler.py
==================
c763301;Han;2011-09-14 14:40:53 +0200;ENH: Use customized MSVC runtime library if present.

==

numpy/core/src/multiarray/datetime_strings.c
==================
2b248e5;Han;2011-09-14 14:39:12 +0200;ENH: Generate custom MSCV runtime library for mingw32.

==

numpy/distutils/mingw32ccompiler.py
==================
2e899dd;Christopher L. Farrow;2011-08-23 07:57:30 -0500;BUG: Fixing reference counting bug in array comparison

==

numpy/core/src/multiarray/arrayobject.c
==================
8e60617;Christopher L. Farrow;2011-08-04 15:45:53 -0500;BUG: fixing reference leak from the numpy refactor @ 4c21144

==

numpy/core/src/multiarray/ctors.c
==================
7471adc;Christopher L. Farrow;2011-08-04 17:14:21 -0500;BUG: porting bugfix from refactor @ 708d6be

==

numpy/core/src/multiarray/iterators.c
==================
3927c3a;Christopher L. Farrow;2011-08-04 17:47:04 -0500;BUG: porting bugfix from refactor @ 3da77df

==

numpy/core/src/multiarray/ctors.c
==================
3a7e61c;Christopher L. Farrow;2011-08-05 20:43:10 -0500;BUG: Fixed reference count bug where scalar value assignment by field to an array would increment the reference count of the scalar.

==

numpy/core/src/multiarray/arrayobject.c
==================
be52978;Christopher L. Farrow;2011-08-10 12:52:21 -0500;BUG: Fixing reference leak in datetime metadata retrieval

==

numpy/core/src/multiarray/datetime.c
==================
1f20595;Christopher L. Farrow;2011-08-26 21:21:04 -0500;BUG: fixed reference leak when new record dtype squashed old one in sort

==

numpy/core/src/multiarray/methods.c
==================
63dff6b;Christopher L. Farrow;2011-08-26 22:39:55 -0500;BUG: fixed reference counting bug in PyArray_FromScalar that occurs when using an extended dtype

==

numpy/core/src/multiarray/scalarapi.c
==================
b331af1;Christopher L. Farrow;2011-08-30 21:03:06 -0500;BUG: Fixed reference leak when gen_arraytype_subscript fails

==

numpy/core/src/multiarray/scalartypes.c.src
==================
943f2b1;Christopher L. Farrow;2011-08-04 17:33:09 -0500;BUG: fixing reference leak in OBJECT_fill

==

numpy/core/src/multiarray/arraytypes.c.src
==================
dadf7ed;Hrvoje Niksic;2011-09-19 14:31:03 +0200;PyArray_FromBuffer: Allow creating arrays from empty buffers or empty slices.

==

numpy/core/src/multiarray/ctors.c
numpy/core/tests/test_multiarray.py
==================
10ed90c;Charles Harris;2011-10-01 09:49:11 -0600;Merge branch 'pull-161'
* pull-161:
  BUG: Attempt Y2038 fix, and restrict local timezone parsing to 1970 and later, because of Win32
  BUG: Attempt to fix the Y2038 problem parsing dates >= 2038
  TST: Add tests for the Y2038 problem
  BUG: Remove floor_divide support for timedelta64 // timedelta64
  DOC: Update year range in LICENSE.txt copyright
  TST: Add true_divide and floor_divide tests for the mm_d timedelta case
  STY: Fix a few cases of spaces not following conventions
  BUG: Add %lld exception for Python 3.1 as well
  WRN: Remove many warnings when building at a higher warning level
  BUG: datetime: Fix timedelta / timedelta -> float64 on Python 3
  BUG: datetime: Fix str() function of datetime arrays
  BUG: datetime: Make datetime_as_string produce a UNICODE array instead of STRING array on Python3

==
==================
55df3c6;Mark Wiebe;2011-09-30 15:12:15 -0700;BUG: Attempt Y2038 fix, and restrict local timezone parsing to 1970 and later, because of Win32
On MS Windows, dates earlier than 1970 cause mktime to error. This patch
also applies to parsing the same Y2038 hack that was done for printing.

==

numpy/core/src/multiarray/datetime_strings.c
==================
b1e5fa0;Mark Wiebe;2011-09-30 14:55:58 -0700;BUG: Attempt to fix the Y2038 problem parsing dates >= 2038
Also incorporated part of Han Genuit's pull request #23, to try
and reduce the difficulty dealing with the merge conflict that
will result from these concurrent changes

==

numpy/core/src/multiarray/datetime_strings.c
==================
6a3ca96;Mark Wiebe;2011-09-30 14:04:06 -0700;TST: Add tests for the Y2038 problem
This only seems to be cropping up on 32-bit Linux, where time_t is 32 bits,
and there appears to be no 64-bit time_t extension like on Windows.

==

numpy/core/tests/test_datetime.py
==================
90a54f4;Mark Wiebe;2011-09-30 13:40:43 -0700;BUG: Remove floor_divide support for timedelta64 // timedelta64

==

numpy/core/code_generators/generate_umath.py
numpy/core/src/umath/loops.h.src
numpy/core/tests/test_datetime.py
==================
d4160e3;Mark Wiebe;2011-09-30 11:58:25 -0700;DOC: Update year range in LICENSE.txt copyright

==

LICENSE.txt
==================
0d23198;Mark Wiebe;2011-09-17 18:12:43 -0700;TST: Add true_divide and floor_divide tests for the mm_d timedelta case

==

numpy/core/tests/test_datetime.py
==================
ee33440;Mark Wiebe;2011-09-17 18:03:19 -0700;STY: Fix a few cases of spaces not following conventions

==

numpy/core/src/multiarray/number.c
numpy/core/src/multiarray/sequence.c
==================
d81a85c;Mark Wiebe;2011-09-17 16:55:37 -0700;BUG: Add %lld exception for Python 3.1 as well

==

numpy/core/src/multiarray/scalartypes.c.src
==================
231b96a;Mark Wiebe;2011-09-17 16:22:26 -0700;WRN: Remove many warnings when building at a higher warning level
This includes warnings about shadowed variables, some bad casts,
and others. Fixing these warnings also fixed a memory leak in one instance.

==

numpy/core/include/numpy/npy_3kcompat.h
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/buffer.c
numpy/core/src/multiarray/calculation.c
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/datetime_strings.c
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/nditer_pywrap.c
numpy/core/src/multiarray/number.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/multiarray/sequence.c
numpy/core/src/multiarray/shape.c
numpy/core/tests/test_datetime.py
==================
e1a66b6;Mark Wiebe;2011-09-07 18:30:59 -0700;BUG: datetime: Fix timedelta / timedelta -> float64 on Python 3

==

numpy/core/code_generators/generate_umath.py
numpy/core/src/umath/loops.h
numpy/core/src/umath/loops.h.src
==================
f0d8fed;Mark Wiebe;2011-09-07 18:22:54 -0700;BUG: datetime: Fix str() function of datetime arrays
Done by making the unit given by datetime_data be a string instead of
bytes in Python 3.

==

numpy/core/src/multiarray/datetime.c
==================
a1b9a1a;Mark Wiebe;2011-09-07 18:06:38 -0700;BUG: datetime: Make datetime_as_string produce a UNICODE array instead of STRING array on Python3

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/datetime_busdaycal.c
numpy/core/src/multiarray/datetime_strings.c
numpy/core/src/multiarray/shape.c
==================
fac8674;Ralf Gommers;2011-09-27 21:59:22 +0200;DOC: add note on formatting math to HOWTO_DOCUMENT.

==

doc/HOWTO_DOCUMENT.rst.txt
==================
214134f;David Warde-Farley;2011-09-20 17:27:53 -0400;REF: simplify multi-loop breaking with a goto.

==

numpy/lib/src/_compiled_base.c
==================
7d6ceb5;David Warde-Farley;2011-09-20 16:59:59 -0400;ENH: release the GIL for arr_insert inner loop.
Releases it only conditionally, as object arrays require refcounting to
be performed within the inner loop, making GIL release impractical.

==

numpy/lib/src/_compiled_base.c
==================
e6696cb;David Warde-Farley;2011-09-20 16:55:53 -0400;REF: factor out inner loop of arr_insert.
This makes subsequent thread-friendly modification easier.

==

numpy/lib/src/_compiled_base.c
==================
6231955;David Warde-Farley;2011-09-19 03:29:23 -0400;ENH: release GIL for C loops in ravel/unravel.

==

numpy/lib/src/_compiled_base.c
==================
a526815;David Warde-Farley;2011-09-19 01:44:12 -0400;ENH: Use char instead of int for error flag.

==

numpy/lib/src/_compiled_base.c
==================
0d95803;David Warde-Farley;2011-09-18 13:46:04 -0400;ENH: less fine-grained GIL management in digitize.

==

numpy/lib/src/_compiled_base.c
==================
6e4016f;David Warde-Farley;2011-09-18 03:29:03 -0400;ENH: release the GIL in some C library functions.
Sandwich certain potentially long running for loops that don't touch any
Python objects between NPY_BEGIN_ALLOW_THREADS and NPY_END_ALLOW_THREADS
so that the interpreter can potentially schedule another Python thread.

==

numpy/lib/src/_compiled_base.c
==================
aded70c;Charles Harris;2011-09-17 09:19:52 -0600;STY: Fix spelling and reword text.

==

doc/HOWTO_DOCUMENT.rst.txt
==================
d6ccaca;Valentin Haenel;2011-09-14 15:27:16 +0100;DOC: numpydoc.py was still using old, scipy trac url in docstring

==

doc/sphinxext/numpydoc.py
==================
81bf485;Valentin Haenel;2011-09-14 15:15:55 +0100;DOC: mention numpydoc in numpy conventions
Explain why it's good to use numpydoc and link to both numpydoc and some
installation and usage instructions.

==

doc/HOWTO_DOCUMENT.rst.txt
==================
a2a9dfb;Stefan van der Walt;2011-09-14 17:01:14 -0700;BUG: Fix polynomial tests.

==

numpy/lib/tests/test_polynomial.py
==================
af22fc4;Travis E. Oliphant;2011-09-13 00:11:32 -0500;ENH: Add weights and covariance estimate to standard polyfit.

==

numpy/lib/polynomial.py
numpy/lib/tests/test_polynomial.py
==================
073bc39;Rui Pereira;2011-09-08 09:06:52 +0200;TST: skip umath complex tests on all platforms except linux.  Closes #1926.

==

numpy/core/tests/test_umath_complex.py
==================
d07f062;Mark;2011-09-08 10:26:09 -0700;Merge pull request #152 from 87/ref-fix
BUG: Fix reference leak in PyArray_DTypeFromObject
==
==================
ebb582f;Han;2011-09-08 18:48:41 +0200;BUG: Fix reference leak in PyArray_DTypeFromObject

==

numpy/core/src/multiarray/common.c
==================
da2af08;David Cournapeau;2011-09-08 11:31:12 -0400;DOC: update bento instructions.

==

BENTO_BUILD.txt
bscript
==================
c44c532;David Cournapeau;2011-09-08 11:27:32 -0400;MISC: cloadable is not useful anymore.

==

numpy/core/bscript
==================
900d82e;Mark Wiebe;2011-08-31 11:42:02 -0700;DOC: Add note about <ufunc>.reduce evaluation order

==

doc/release/2.0.0-notes.rst
==================
98ccad6;Mark;2011-08-31 11:20:52 -0700;Merge pull request #149 from 87/ref-fix
Bugfix in PyArray_SetBaseObject
==
==================
1af2f37;Fabian Pedregosa;2011-08-31 18:16:26 +0200;FIX: Make tril/triu return the same dtype as the original array.
This should fix:

    * http://projects.scipy.org/numpy/ticket/1848
    * http://projects.scipy.org/scipy/ticket/1449

==

numpy/lib/tests/test_twodim_base.py
numpy/lib/twodim_base.py
==================
e411631;87;2011-08-30 21:44:54 +0200;BUG: PyArray_SetBaseObject didn't set proper base when collapsing views

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/tests/test_maskna.py
==================
f3e70d9;Charles Harris;2011-08-29 20:08:52 -0600;STY: Some style cleanups.

==

numpy/core/src/umath/ufunc_object.c
numpy/lib/src/_compiled_base.c
==================
180750b;Chris Jordan-Squire;2011-08-05 10:43:51 -0500;ENH: Add function for adding docstrings to ufuncs.

==

numpy/add_newdocs.py
numpy/core/code_generators/ufunc_docstrings.py
numpy/core/src/umath/ufunc_object.c
numpy/lib/function_base.py
numpy/lib/src/_compiled_base.c
numpy/lib/tests/test_function_base.py
==================
d91521e;Fabian Pedregosa;2011-08-28 14:32:09 +0200;FIX: add ufsparse to the libraries search path.
Fixes a build failure on macports when it detected umfpack but was
unable to build the extension module. Equivalent to the
'/usr/include/suitesparse' path under Debian.

==

numpy/distutils/system_info.py
==================
f73ced2;David Cournapeau;2011-08-29 00:36:53 +0200;BUG: update bento script for boolean_ops.c.src.

==

numpy/core/bscript
==================
857ef85;David Cournapeau;2011-08-28 00:32:48 +0200;ENH: no need to hardcode gcc anymore.

==

bscript
==================
3763b57;David Cournapeau;2011-08-28 00:25:14 +0200;MISC: add cavead on top bscript.

==

bscript
==================
322c67e;David Cournapeau;2011-08-28 00:12:25 +0200;MISC: warn about numscons scripts being deprecated.

==

setupscons.py
==================
a458b11;David Cournapeau;2011-08-27 16:22:50 +0200;BUG: fix non-mandatory win32-specific check.

==

numpy/random/bscript
==================
7129d90;David Cournapeau;2011-08-26 13:43:38 +0200;ENH: add example to link against MKL on win32.

==

bscript
==================
85ea48b;David Cournapeau;2011-08-26 13:43:21 +0200;BUG: only add gcc-specific flag if actually using it.

==

bscript
==================
f31b401;David Cournapeau;2011-08-21 19:50:05 +0200;BUG: forgot to add long double check.

==

numpy/build_utils/common.py
==================
3eda301;David Cournapeau;2011-08-21 19:26:54 +0200;BUG: temp hack to circumvent a waf bug on win32 ?

==

numpy/core/bscript
==================
512df8b;David Cournapeau;2011-08-21 18:54:44 +0200;BUG: check for missing win32-specific format stuff.

==

numpy/core/bscript
==================
5e1cdb6;David Cournapeau;2011-08-21 18:54:09 +0200;BUG: complex.h is not mandatory.

==

numpy/core/bscript
==================
f92e0f4;David Cournapeau;2011-08-21 18:53:50 +0200;BUG: temp hack to fix some function checks.

==

numpy/core/bscript
==================
94fab36;David Cournapeau;2011-08-21 18:51:49 +0200;FEAT: add check_ldouble for bento build.

==

numpy/build_utils/waf.py
==================
1220e44;David Cournapeau;2011-08-21 18:50:10 +0200;FEAT: fix numpy.random build issues with MSVC.

==

numpy/random/bscript
==================
ec59e5a;David Cournapeau;2011-08-21 16:47:20 +0200;ENH: update bento build to recent changes in numpy.core.

==

numpy/core/bento.info
numpy/core/bscript
==================
4ed5624;David Cournapeau;2011-08-20 23:48:33 +0200;BUG: make sure autoconf macros are set to 1, not True.

==

numpy/build_utils/waf.py
==================
6b17837;David Cournapeau;2011-08-20 23:47:48 +0200;ENH: write conf defines comments when test failed as well.

==

numpy/build_utils/waf.py
==================
9346bc6;David Cournapeau;2011-08-20 23:46:16 +0200;STY: tweak configure comments to match autoconf more closely.
This makes comparison easier.

==

numpy/build_utils/waf.py
==================
d3f13af;David Cournapeau;2011-08-18 14:16:41 +0200;ENH: remove custom fixes for mac osx now integrated in waf.

==

bscript
==================
dfafdcd;David Cournapeau;2011-08-18 14:11:43 +0200;REF: use new API for higher level builder reuse.

==

bscript
numpy/core/bscript
numpy/fft/bscript
numpy/lib/bscript
numpy/linalg/bscript
numpy/random/bscript
==================
0d8b636;David Cournapeau;2011-06-15 08:40:26 +0900;REF: use new hook signature.

==

bscript
numpy/core/bscript
numpy/fft/bscript
numpy/lib/bscript
numpy/linalg/bscript
numpy/random/bscript
==================
dab6ffc;David Cournapeau;2011-06-14 23:19:19 +0900;REF: use new recursive hook file support.

==

bento.info
numpy/bento.info
==================
e00b158;David Cournapeau;2011-06-14 23:06:50 +0900;REF: define hook file locally.

==

bento.info
numpy/core/bento.info
numpy/fft/bento.info
numpy/lib/bento.info
numpy/linalg/bento.info
numpy/random/bento.info
==================
d247f01;David Cournapeau;2011-05-30 09:11:12 +0900;ENH: register waf-specific options.

==

bscript
==================
7847043;David Cournapeau;2011-05-30 09:10:35 +0900;ENH: update to last bento.

==

bscript
numpy/core/bscript
numpy/fft/bscript
numpy/lib/bscript
numpy/linalg/bscript
numpy/random/bscript
==================
d73761d;David Cournapeau;2011-04-10 12:11:05 +0900;ENH: remove unneeded waf recursive context path magic.

==

numpy/core/bscript
==================
a654ec7;David Cournapeau;2011-04-06 22:50:13 +0900;ENH: workaround for waf python tool bug.

==

bscript
==================
313e00e;David Cournapeau;2011-04-06 22:49:44 +0900;BUG: fix more separate-compilation issues.

==

numpy/core/bscript
==================
6e47f14;David Cournapeau;2011-04-06 09:55:51 +0900;STY: fix ws in bento.info

==

bento.info
==================
ff50dde;David Cournapeau;2011-04-06 09:55:37 +0900;BUG: fix renaming of new iterator source file.

==

numpy/core/bscript
==================
26403b6;David Cournapeau;2011-04-06 08:52:44 +0900;BUG: build waf build utils in separate module to avoid 'spurious' imports.

==

numpy/build_utils/__init__.py
numpy/build_utils/waf.py
numpy/core/bscript
==================
c334fbb;David Cournapeau;2011-04-05 09:17:31 +0900;ENH: add support for separate compilation of multiarray (still does not work though).

==

numpy/core/bscript
==================
28dc101;David Cournapeau;2011-04-05 09:16:48 +0900;BUG: fix unicode config checks.

==

numpy/core/bscript
==================
499f9b0;David Cournapeau;2011-04-05 09:15:14 +0900;BUG: use 1/0 instead of booleans in config.h

==

numpy/build_utils/__init__.py
==================
de71afe;David Cournapeau;2011-04-04 08:23:41 +0900;HACK: temporary deal with bugs in waf python tool.

==

bscript
==================
07cf7f4;David Cournapeau;2011-04-06 09:21:40 +0900;FEAT: add wide unicode detection.

==

numpy/core/bscript
==================
f673607;David Cournapeau;2011-04-06 09:19:13 +0900;FEAT: add basics for separate build.

==

numpy/core/bscript
==================
a52f88f;David Cournapeau;2011-04-06 09:18:04 +0900;STY: better name for top hooks.

==

bscript
==================
c615391;David Cournapeau;2011-04-06 09:17:11 +0900;BUG: remove unnecessary header inclusion which breaks builds.

==

numpy/core/include/numpy/halffloat.h
==================
1566df7;David Cournapeau;2011-03-16 05:51:50 -0700;ENH: remove temporary hacks for recurse path settings.

==

numpy/core/bscript
numpy/fft/bscript
numpy/lib/bscript
numpy/linalg/bscript
numpy/random/bscript
==================
37396fc;David Cournapeau;2011-03-16 01:27:40 -0400;BUG: build _dotblas as callback.

==

numpy/core/bscript
==================
75fedf0;David Cournapeau;2011-03-16 01:26:56 -0400;BUG: extra source files section.

==

bento.info
==================
fd59c83;David Cournapeau;2011-03-16 01:26:34 -0400;BUG: only handle python files in in-place customization.

==

bscript
==================
69af3d0;David Cournapeau;2011-03-15 13:23:26 -0400;ENH: add fft/random support.

==

bento.info
numpy/fft/bento.info
numpy/fft/bscript
numpy/linalg/bscript
numpy/random/bento.info
numpy/random/bscript
==================
b6aeed3;David Cournapeau;2011-03-15 12:40:42 -0400;FEAT: add numpy.linalg.

==

bento.info
numpy/linalg/bento.info
numpy/linalg/bscript
==================
aa7e9bd;David Cournapeau;2011-03-15 11:39:15 -0400;FEAT: numpy.core and numpy.lib both build

==

bento.info
bscript
numpy/core/bento.info
numpy/core/bscript
numpy/lib/bento.info
numpy/lib/bscript
==================
992b4a7;David Cournapeau;2011-03-07 20:56:52 +0900;BENTO: add complex checks.

==

numpy/build_utils/__init__.py
numpy/core/bscript
==================
12c538f;David Cournapeau;2011-03-07 20:54:35 +0900;BENTO: check for inline support.

==

numpy/build_utils/__init__.py
numpy/core/bscript
==================
f5f821a;David Cournapeau;2011-03-07 20:41:51 +0900;BENTO: add math runtime checks.

==

numpy/build_utils/__init__.py
numpy/core/bscript
==================
54788a3;David Cournapeau;2011-03-07 20:27:53 +0900;BENTO: add signal/smp stuff in configure.

==

numpy/core/bscript
==================
6fd71ae;David Cournapeau;2011-03-07 20:26:04 +0900;BENTO: add basic type checks.

==

numpy/build_utils/__init__.py
numpy/core/bscript
==================
096aa37;David Cournapeau;2011-03-07 20:25:50 +0900;BENTO: workaround for waf bug on darwin.

==

bscript
==================
f110ad2;David Cournapeau;2011-03-07 20:19:59 +0900;BENTO: check for C99 formats + add check_declaration.

==

numpy/build_utils/__init__.py
numpy/core/bscript
==================
0268760;David Cournapeau;2011-03-07 20:14:23 +0900;BENTO: start support for numpyconfig.

==

bscript
numpy/core/bscript
==================
0461be7;David Cournapeau;2011-03-07 09:31:40 +0900;BENTO: start numpy.core configuration + waf_utils helpers.

==

numpy/build_utils/__init__.py
numpy/waf_utils/__init__.py
==================
0c7af4b;David Cournapeau;2011-03-07 09:30:42 +0900;BENTO: start numpy.core configuration
We also add configuration helpers in numpy.build_utils.

==

bento.info
bscript
numpy/core/bento.info
numpy/core/bscript
numpy/waf_utils/__init__.py
==================
d2f648a;David Cournapeau;2011-03-07 09:02:32 +0900;BENTO: start bento packaging using waf.

==

bento.info
bscript
==================
9ecd91b;Charles Harris;2011-08-27 21:46:08 -0600;Merge branch 'pull-141'
* pull-141: (167 commits)
  ENH: missingdata: Make PyArray_Converter and PyArray_OutputConverter safer for legacy code
  DOC: missingdata: Add a mention of the design NEP, and masks vs bitpatterns
  DOC: missingdata: Updates from pull request feedback
  DOC: missingdata: Updates based on pull request feedback
  ENH: nditer: Change the Python nditer exposure to automatically add NPY_ITER_USE_MASKNA
  ENH: missingdata: Make comparisons with NA return NA(dtype='bool')
  BLD: core: onefile build fix and Python3 compatibility change
  DOC: Mention the update to np.all and np.any in the release notes
  TST: dtype: Adjust void dtype test to pass without raising a zero-size exception
  STY: Remove trailing whitespace
  TST: missingdata: Write some tests for the np.any and np.all NA behavior
  ENH: missingdata: Make numpy.all follow the NA && False == False rule
  ENH: missingdata: Make numpy.all follow the NA || True == True rule
  DOC: missingdata: Also show what assigning a non-NA value does in each case
  DOC: missingdata: Add introductory documentation for NA-masked arrays
  ENH: core: Rename PyArrayObject_fieldaccess to PyArrayObject_fields
  DOC: missingdata: Some tweaks to the NA mask documentation
  DOC: missingdata: Add example of a C-API function supporting NA masks
  DOC: missingdata: Documenting C API for NA-masked arrays
  ENH: missingdata: Finish adding C-API access to the NpyNA object
  ...

==
==================
10fac98;Mark Wiebe;2011-08-26 15:44:14 -0700;ENH: missingdata: Make PyArray_Converter and PyArray_OutputConverter safer for legacy code
These functions now reject inputs with NA, and there are alternative
functions PyArray_AllowNAConverter and PyArray_OutputAllowNAConverter
that functions should use when they intend to support NA.

==

doc/source/reference/arrays.maskna.rst
doc/source/reference/c-api.array.rst
doc/source/reference/c-api.maskna.rst
numpy/core/code_generators/numpy_api.py
numpy/core/src/multiarray/conversion_utils.c
numpy/core/src/multiarray/conversion_utils.h
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/umath/ufunc_object.c
==================
f818910;Mark Wiebe;2011-08-26 13:35:20 -0700;DOC: missingdata: Add a mention of the design NEP, and masks vs bitpatterns

==

doc/source/reference/arrays.maskna.rst
==================
e4a1c55;Mark Wiebe;2011-08-26 12:59:27 -0700;DOC: missingdata: Updates from pull request feedback
From Chris Jordan-Squire

==

doc/source/reference/arrays.maskna.rst
doc/source/reference/c-api.maskna.rst
==================
0bfefe3;Mark Wiebe;2011-08-26 10:22:48 -0700;DOC: missingdata: Updates based on pull request feedback
From github users xscript and 87.

==

doc/source/reference/arrays.maskna.rst
==================
858ee47;Mark Wiebe;2011-08-26 10:22:20 -0700;ENH: nditer: Change the Python nditer exposure to automatically add NPY_ITER_USE_MASKNA

==

numpy/core/src/multiarray/nditer_pywrap.c
numpy/core/tests/test_nditer.py
==================
99774be;Mark Wiebe;2011-08-26 09:53:13 -0700;ENH: missingdata: Make comparisons with NA return NA(dtype='bool')

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/na_object.c
numpy/core/tests/test_na.py
==================
5c7b9bb;Mark Wiebe;2011-08-26 09:02:00 -0700;BLD: core: onefile build fix and Python3 compatibility change

==

numpy/core/_methods.py
numpy/core/src/multiarray/multiarraymodule_onefile.c
==================
159bfbc;Mark Wiebe;2011-08-25 23:24:31 -0700;DOC: Mention the update to np.all and np.any in the release notes

==

doc/release/2.0.0-notes.rst
==================
73d41dd;Mark Wiebe;2011-08-25 23:22:24 -0700;TST: dtype: Adjust void dtype test to pass without raising a zero-size exception

==

numpy/core/tests/test_multiarray.py
==================
ea622f3;Mark Wiebe;2011-08-25 23:14:11 -0700;STY: Remove trailing whitespace

==
==================
b94f43d;Mark Wiebe;2011-08-25 22:54:20 -0700;TST: missingdata: Write some tests for the np.any and np.all NA behavior

==

numpy/core/src/multiarray/boolean_ops.c.src
numpy/core/tests/test_maskna.py
==================
cc32630;Mark Wiebe;2011-08-25 21:47:27 -0700;ENH: missingdata: Make numpy.all follow the NA && False == False rule

==

doc/neps/missing-data.rst
numpy/core/_methods.py
numpy/core/fromnumeric.py
numpy/core/numeric.py
numpy/core/src/multiarray/boolean_ops.c.src
numpy/core/src/multiarray/boolean_ops.h
numpy/core/src/multiarray/conversion_utils.c
numpy/core/src/multiarray/methods.c
numpy/core/tests/test_ufunc.py
numpy/lib/tests/test_recfunctions.py
==================
a43d255;Mark Wiebe;2011-08-25 17:48:26 -0700;ENH: missingdata: Make numpy.all follow the NA || True == True rule

==

numpy/core/SConscript
numpy/core/setup.py
numpy/core/src/multiarray/boolean_ops.c.src
numpy/core/src/multiarray/boolean_ops.h
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/reduction.c
numpy/core/src/multiarray/reduction.h
numpy/core/src/umath/ufunc_object.c
numpy/matrixlib/defmatrix.py
==================
6706908;Mark Wiebe;2011-08-25 12:05:16 -0700;DOC: missingdata: Also show what assigning a non-NA value does in each case
Thanks to chebee7i for the feedback

==

doc/source/reference/arrays.maskna.rst
==================
b64ace5;Mark Wiebe;2011-08-25 10:21:32 -0700;DOC: missingdata: Add introductory documentation for NA-masked arrays

==

doc/release/2.0.0-notes.rst
doc/source/reference/arrays.maskna.rst
doc/source/reference/arrays.rst
doc/source/reference/routines.maskna.rst
doc/source/reference/routines.rst
numpy/add_newdocs.py
==================
0949926;Mark Wiebe;2011-08-24 18:57:01 -0700;ENH: core: Rename PyArrayObject_fieldaccess to PyArrayObject_fields
Because it's shorter and seems like a decent name.

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/na_mask.c
numpy/core/src/multiarray/nditer_api.c
numpy/core/src/multiarray/nditer_constr.c
numpy/core/src/multiarray/nditer_pywrap.c
numpy/core/src/multiarray/reduction.c
numpy/core/src/multiarray/sequence.c
numpy/core/src/multiarray/shape.c
==================
3e32ef2;Mark Wiebe;2011-08-24 17:04:03 -0700;DOC: missingdata: Some tweaks to the NA mask documentation

==

doc/source/reference/c-api.maskna.rst
==================
770c94e;Mark Wiebe;2011-08-24 16:24:52 -0700;DOC: missingdata: Add example of a C-API function supporting NA masks

==

doc/source/reference/c-api.array.rst
doc/source/reference/c-api.iterator.rst
doc/source/reference/c-api.maskna.rst
doc/source/reference/c-api.rst
numpy/core/src/multiarray/conversion_utils.c
==================
847404a;Mark Wiebe;2011-08-24 14:03:16 -0700;DOC: missingdata: Documenting C API for NA-masked arrays

==

doc/source/reference/c-api.array.rst
doc/source/reference/c-api.iterator.rst
doc/source/reference/c-api.maskna.rst
==================
5459e09;Mark Wiebe;2011-08-24 13:56:40 -0700;ENH: missingdata: Finish adding C-API access to the NpyNA object

==

numpy/core/code_generators/genapi.py
numpy/core/code_generators/numpy_api.py
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/na_object.c
numpy/core/src/multiarray/na_object.h
==================
68de5aa;Mark Wiebe;2011-08-24 13:23:25 -0700;ENH: missingdata: Expose Npy_NA as a global singleton, same as Py_None

==

numpy/core/code_generators/numpy_api.py
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/na_object.c
numpy/core/src/multiarray/na_object.h
==================
c15ac7e;Mark Wiebe;2011-08-24 13:07:53 -0700;ENH: missingdata: Rename na_singleton.[ch] to na_object.[ch]

==

numpy/core/SConscript
numpy/core/setup.py
numpy/core/src/multiarray/array_assign_array.c
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/multiarraymodule_onefile.c
numpy/core/src/multiarray/na_mask.c
numpy/core/src/multiarray/na_object.c
numpy/core/src/multiarray/na_object.h
numpy/core/src/multiarray/na_singleton.c
numpy/core/src/multiarray/na_singleton.h
numpy/core/src/multiarray/scalarapi.c
==================
e2d06e9;Mark Wiebe;2011-08-23 21:50:37 -0700;BUG: missingdata: Add support for NA masks to the order='K' case of np.ravel

==

numpy/core/src/multiarray/shape.c
numpy/core/tests/test_maskna.py
==================
6c0ad59;Mark Wiebe;2011-08-23 21:31:09 -0700;ENH: missingdata: Add maskna= and ownmaskna= parameters to np.asarray and friends
Also fix some array() NA mask construction issues and make sure the
base object doesn't collapse past the owner of the NA mask being
viewed in addition to the data.

==

numpy/add_newdocs.py
numpy/core/numeric.py
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/ctors.c
numpy/core/tests/test_maskna.py
==================
f9c1d41;Mark Wiebe;2011-08-23 18:05:39 -0700;ENH: missingdata: Add maskna= flag to np.identity constructor

==

numpy/core/numeric.py
numpy/core/tests/test_maskna.py
==================
e0b8c5c;Mark Wiebe;2011-08-23 17:58:35 -0700;ENH: missingdata: Add maskna= flag to np.eye constructor

==

doc/release/2.0.0-notes.rst
numpy/core/_methods.py
numpy/core/tests/test_maskna.py
numpy/lib/twodim_base.py
==================
32b32c2;Mark Wiebe;2011-08-23 17:40:43 -0700;BUG: umath: Make the ufunc follow the actual priority for __r<op>__
Previously it returned not implemented just based on the existence
of the array priority, it didn't actually check the priority value.

==

numpy/core/src/umath/ufunc_object.c
==================
4b15793;Mark Wiebe;2011-08-23 16:57:06 -0700;ENH: core: Add static caching of the callables for C to core._method calls

==

numpy/core/_methods.py
numpy/core/src/multiarray/methods.c
==================
64e30a7;Mark Wiebe;2011-08-23 16:38:31 -0700;ENH: missingdata: Add skipna=, keepdims= parameters to methods
Also fix some memory leaks, improve some type resolution code. The
methods still have some issues with array subtypes that needs working
through.

==

doc/release/2.0.0-notes.rst
numpy/core/fromnumeric.py
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/reduction.c
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/ufunc_type_resolution.c
numpy/core/tests/test_regression.py
==================
6d9a2a1;Mark Wiebe;2011-08-23 11:44:00 -0700;ENH: missingdata: Add support for identity-less skipna reductions with ndim > 1

==

numpy/core/src/multiarray/reduction.c
numpy/core/src/umath/ufunc_type_resolution.c
numpy/core/tests/test_maskna.py
==================
c9764c1;Mark Wiebe;2011-08-22 23:22:42 -0700;ENH: missingdata: Future-proof AssignNA and AssignMaskNA for later multi-NA support

==

numpy/core/src/multiarray/array_assign_array.c
numpy/core/src/multiarray/array_assign_scalar.c
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/na_mask.c
numpy/core/src/multiarray/na_mask.h
numpy/core/src/umath/ufunc_object.c
==================
6282b55;Mark Wiebe;2011-08-22 23:04:30 -0700;ENH: missingdata: Move ReduceMaskNAArray out of the public API
Keep this function private, to keep flexibility open for longer.
Also added what will likely be the necessary parameters for future
where mask and multi-NA expansion.

==

numpy/core/code_generators/numpy_api.py
numpy/core/src/multiarray/na_mask.c
numpy/core/src/multiarray/na_mask.h
numpy/core/src/multiarray/reduction.c
==================
9ca27ae;Mark Wiebe;2011-08-22 22:27:01 -0700;ENH: missingdata: Add wheremask to PyArray_ContainsNA
Use this to make masked assignment just check the elements its copying
for NA, so that the source array can have NAs, just not where the mask
says.

==

doc/release/2.0.0-notes.rst
numpy/core/src/multiarray/array_assign_array.c
numpy/core/src/multiarray/array_assign_scalar.c
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/na_mask.c
numpy/core/src/multiarray/reduction.c
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_maskna.py
==================
c8c262a;Mark Wiebe;2011-08-22 15:32:00 -0700;ENH: ufunc: Remove CreateReduceResult and InitializeReduceResult from the API
Keep them internal longer, to let the details bake some more.
PyArray_ReduceWrapper is in the API so both multiarray and umath can
use it.

==

numpy/core/code_generators/numpy_api.py
numpy/core/src/multiarray/reduction.c
numpy/core/src/multiarray/reduction.h
==================
4b79354;Mark Wiebe;2011-08-22 14:20:08 -0700;BUG: dtype: Mitigate crash bug for some kinds of dtype inputs
This doesn't fix it in general, but does for the specific case.
The particular code in question is calling from C into Python
to do parsing. I think this is a bad idea, and should be converted
to straightforward C code instead.

==

numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/methods.c
numpy/core/tests/test_dtype.py
==================
d7076dc;Mark Wiebe;2011-08-22 14:08:41 -0700;ENH: missingdata: Make ndarray.view validate the maskna= parameter better

==

numpy/core/src/multiarray/methods.c
numpy/core/tests/test_maskna.py
==================
0e1a4e9;Mark Wiebe;2011-08-22 14:01:55 -0700;ENH: missingdata: Add maskna= parameter to np.copy and ndarray.copy

==

numpy/add_newdocs.py
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_api.py
numpy/core/tests/test_maskna.py
numpy/lib/function_base.py
==================
9764760;Mark Wiebe;2011-08-22 11:45:45 -0700;DOC: Add info to the release notes about the full boolean indexing change

==

doc/release/2.0.0-notes.rst
==================
447d55d;Mark Wiebe;2011-08-22 11:44:47 -0700;ENH: ufunc: Add a mask dtype parameter to the masked ufunc loop selector
This is to allow for future expansion to multi-NA and struct-NA.

==

numpy/core/include/numpy/ufuncobject.h
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/ufunc_type_resolution.c
numpy/core/src/umath/ufunc_type_resolution.h
==================
da2c9e4;Mark Wiebe;2011-08-22 11:11:53 -0700;ENH: umath: Switch PyUFunc_Reduce to call PyArray_ReduceWrapper to simplify code

==

numpy/core/code_generators/generate_umath.py
numpy/core/code_generators/numpy_api.py
numpy/core/include/numpy/ndarraytypes.h
numpy/core/include/numpy/ufuncobject.h
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/reduction.c
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/ufunc_type_resolution.c
numpy/core/src/umath/ufunc_type_resolution.h
numpy/core/src/umath/umathmodule.c.src
==================
9a9f08e;Mark Wiebe;2011-08-21 11:46:52 -0700;ENH: umath: Add checking for reorderable ufuncs, add PyArray_ReduceWrapper to API
np.divide, for instance, isn't commutative, so the computation should
not change the order of computation. The reduce function disables
multiple-axis reductions on ufuncs which are not reorderable.

==

numpy/core/code_generators/generate_umath.py
numpy/core/code_generators/numpy_api.py
numpy/core/include/numpy/ndarraytypes.h
numpy/core/include/numpy/ufuncobject.h
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/reduction.c
numpy/core/src/multiarray/reduction.h
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_ufunc.py
==================
f3d60f9;Mark Wiebe;2011-08-21 00:28:20 -0700;ENH: ufunc: Separate type resolution from loop selection
This change sets the stage for being able to produce much higher
performance loops by specializing based on any fixed strides. To do
this, type resolution must happen first to determine the dtypes,
then the iterator needs to be created, then finally the loop needs
to be selected for the given dtypes and the strides that will be
fixed throughout the iteration.

The way type resolution and loop selection where tied together before
precluded this possibility, but with the backwards-compatible design
change in this commit, such specializations will be possible in the future.

==

numpy/core/code_generators/numpy_api.py
numpy/core/include/numpy/ufuncobject.h
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/ufunc_type_resolution.c
numpy/core/src/umath/ufunc_type_resolution.h
numpy/core/src/umath/umathmodule.c.src
==================
4c88ab3;Mark Wiebe;2011-08-20 10:13:07 -0700;BUG: missingdata: Fix long double printing of NAs

==

numpy/core/arrayprint.py
==================
9ecf721;Mark Wiebe;2011-08-19 20:58:28 -0700;BUG: missingdata: np.isna function wasn't accepting object arrays

==

numpy/core/src/multiarray/na_mask.c
==================
48ce84d;Mark Wiebe;2011-08-19 20:53:23 -0700;ENH: missingdata: Improve error message when assigning NA to non-NA-masked arrays

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/na_singleton.h
==================
ade350e;Mark Wiebe;2011-08-19 19:58:59 -0700;BUG: repr: Make NA line up in the float array repr like inf and nan

==

numpy/core/arrayprint.py
numpy/core/tests/test_maskna.py
==================
32a8d7a;Mark Wiebe;2011-08-19 19:53:18 -0700;ENH: missingdata: Change NA repr to use strings like the dtype repr does

==

numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/descriptor.h
numpy/core/src/multiarray/na_singleton.c
numpy/core/src/multiarray/nditer_api.c
numpy/core/tests/test_na.py
==================
3710f2b;Mark Wiebe;2011-08-19 18:42:09 -0700;DOC: nditer: Document NpyIter_IsFirstVisit function

==

doc/source/reference/c-api.iterator.rst
==================
a686aef;Mark Wiebe;2011-08-19 17:48:16 -0700;ENH: missingdata: Add maskna= parameter to np.linspace and np.logspace

==

numpy/core/function_base.py
numpy/core/tests/test_maskna.py
==================
3fec8d3;Mark Wiebe;2011-08-19 17:32:07 -0700;ENH: missingdata: Add the maskna= parameter to np.ones and np.ones_like

==

numpy/core/code_generators/generate_umath.py
numpy/core/code_generators/ufunc_docstrings.py
numpy/core/numeric.py
numpy/core/src/multiarray/number.c
numpy/core/src/multiarray/number.h
numpy/core/src/umath/loops.c.src
numpy/core/src/umath/loops.h
numpy/core/src/umath/loops.h.src
numpy/core/tests/test_maskna.py
numpy/core/tests/test_numeric.py
==================
840323e;Mark Wiebe;2011-08-19 17:02:39 -0700;STY: core: Move some misc converters into conversion_utils.c to clean things up

==

numpy/core/src/multiarray/conversion_utils.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/nditer_pywrap.c
==================
c3fafa4;Mark Wiebe;2011-08-19 16:47:07 -0700;BUG: ufunc: Missed a small update for the unitless reduction case

==

numpy/core/src/multiarray/reduction.h
numpy/core/src/umath/ufunc_object.c
==================
1848be6;Mark Wiebe;2011-08-19 16:45:15 -0700;NEP: missingdata: Some fixes and updates to the NEP

==

doc/neps/missing-data.rst
==================
eb21e24;Mark Wiebe;2011-08-19 15:31:45 -0700;DOC: nditer: Improve the comment doc about the new NpyIter_IsFirstVisit function

==

numpy/core/src/multiarray/nditer_api.c
==================
3941e5a;Mark Wiebe;2011-08-19 15:24:34 -0700;BUG: ufunc: Fix bug in multi-dimensional reduction without a unit

==

doc/release/2.0.0-notes.rst
numpy/core/code_generators/numpy_api.py
numpy/core/src/multiarray/array_assign_array.c
numpy/core/src/multiarray/array_assign_scalar.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/nditer_api.c
numpy/core/src/multiarray/reduction.c
numpy/core/src/multiarray/reduction.h
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_ufunc.py
==================
4838339;Han;2011-08-19 16:58:02 +0200;BUG: fix crash in test_datetime_as_string

==

numpy/core/src/multiarray/datetime_strings.c
==================
630c99a;Han;2011-08-19 16:55:02 +0200;BLD: keep VC happy by moving inlined variable definitions to top

==

numpy/core/src/multiarray/mapping.c
numpy/core/src/umath/ufunc_object.c
==================
6d72420;Han;2011-08-19 16:49:09 +0200;BLD: keep VC compiler happy by moving the threading macros after variable definition

==

numpy/core/src/multiarray/array_assign_array.c
numpy/core/src/multiarray/array_assign_scalar.c
==================
e5b2073;Mark Wiebe;2011-08-19 09:59:21 -0700;DOC: Tweak to the release notes

==

doc/release/2.0.0-notes.rst
==================
2b72d06;Mark Wiebe;2011-08-19 08:41:19 -0700;BLD: missingdata: Fixes for Python 3

==

numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/na_singleton.c
numpy/core/tests/test_na.py
==================
066f095;Mark Wiebe;2011-08-19 08:19:06 -0700;TST: datetime: Change pytz warning message about skipping pytz tests

==

numpy/core/tests/test_datetime.py
==================
df907e6;Mark Wiebe;2011-08-18 22:22:06 -0700;BLD: Failure in single file build mode because of a static function in two separate files

==

numpy/core/src/multiarray/multiarraymodule_onefile.c
numpy/core/src/multiarray/reduction.c
numpy/core/src/multiarray/shape.c
numpy/core/src/umath/ufunc_object.c
==================
01b200b;Mark Wiebe;2011-08-18 16:23:24 -0700;BUG: nditer: The nditer was reusing the reduce loop inappropriately (#1938)

==

numpy/core/src/multiarray/nditer_api.c
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_nditer.py
==================
f45fd67;Mark Wiebe;2011-08-18 14:01:08 -0700;DOC: Small tweak to release notes

==

doc/release/2.0.0-notes.rst
==================
73be11d;Mark Wiebe;2011-08-18 12:40:49 -0700;BUG: Some bugs in squeeze and concatenate found by testing SciPy

==

numpy/core/fromnumeric.py
numpy/core/src/multiarray/multiarraymodule.c
numpy/lib/tests/test_index_tricks.py
numpy/lib/tests/test_shape_base.py
==================
c873295;Mark Wiebe;2011-08-18 12:04:49 -0700;TST: missingdata: Finish up NA mask tests for np.std and np.var

==

doc/release/2.0.0-notes.rst
numpy/core/tests/test_maskna.py
==================
e15712c;Mark Wiebe;2011-08-18 11:10:01 -0700;BUG: nditer: NA masks in arrays with leading 1 dimensions had an issue

==

numpy/core/code_generators/numpy_api.py
numpy/core/fromnumeric.py
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/arrayobject.h
numpy/core/src/multiarray/nditer_constr.c
numpy/core/tests/test_maskna.py
==================
ded81ae;Mark Wiebe;2011-08-18 00:40:06 -0700;ENH: missingdata: Implement tests for np.std, add skipna= and keepdims= parameters to more functions

==

numpy/core/fromnumeric.py
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/shape.c
numpy/core/tests/test_maskna.py
==================
a112fc4;Mark Wiebe;2011-08-17 23:07:58 -0700;ENH: missingdata: Implement skipna= support for np.std and np.var

==

numpy/add_newdocs.py
numpy/core/fromnumeric.py
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/shape.c
numpy/core/src/multiarray/shape.h
==================
0fa4f22;Mark Wiebe;2011-08-17 22:03:06 -0700;ENH: missingdata: Support 'skipna=' parameter in np.mean
Also add 'keepdims=' parameter to reductions, to support writing of
the np.std function.

==

numpy/add_newdocs.py
numpy/core/fromnumeric.py
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/item_selection.h
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/reduction.c
numpy/core/src/multiarray/reduction.h
numpy/core/src/umath/ufunc_object.c
==================
bfda229;Mark Wiebe;2011-08-17 19:18:56 -0700;ENH: missingdata: Create count_reduce_items function
This function either cheaply returns the product of the sizes of
all the reduction axes, or counts the number of items which will
be used in a reduction operation when skipna is True. Its purpose
is to make it easy to do functions like np.mean and np.std.

==

doc/source/reference/routines.sort.rst
numpy/add_newdocs.py
numpy/core/code_generators/numpy_api.py
numpy/core/numeric.py
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/reduction.c
numpy/core/src/multiarray/reduction.h
numpy/core/tests/test_maskna.py
==================
d9b3f90;Mark Wiebe;2011-08-17 16:50:17 -0700;ENH: missingdata: Move the Reduce boilerplate into a function PyArray_ReduceWrapper

==

numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/reduction.c
numpy/core/src/multiarray/reduction.h
==================
67ece6b;Mark Wiebe;2011-08-17 15:45:52 -0700;ENH: missingdata: Finish count_nonzero as a full-fledged reduction operation

==

numpy/core/src/multiarray/conversion_utils.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/item_selection.h
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_maskna.py
numpy/core/tests/test_numeric.py
numpy/testing/utils.py
==================
6bfd819;Mark Wiebe;2011-08-17 14:05:38 -0700;ENH: missingdata: Towards making count_nonzero a full-featured reduction operation

==

numpy/core/src/multiarray/conversion_utils.c
numpy/core/src/multiarray/conversion_utils.h
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/na_mask.c
numpy/core/src/umath/ufunc_object.c
==================
a1faa1b;Mark Wiebe;2011-08-17 10:25:40 -0700;ENH: missingdata: Move some of the refactored reduction code into the API
Doing this so that it can be used both in multiarray and umath, to make
writing new reduction operations generally easier.

Also made PyArray_Squeeze work with NA-masked arrays.

==

doc/release/2.0.0-notes.rst
numpy/core/SConscript
numpy/core/code_generators/genapi.py
numpy/core/code_generators/numpy_api.py
numpy/core/setup.py
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/ctors.h
numpy/core/src/multiarray/reduction.c
numpy/core/src/multiarray/reduction.h
numpy/core/src/multiarray/shape.c
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_maskna.py
==================
f597374;Mark Wiebe;2011-08-16 21:01:34 -0700;ENH: missingdata: Change default to create NA-mask when NAs are in lists
Also adjust the repr to drop maskna=True when this rule will enable it
automatically.

==

doc/neps/missing-data.rst
numpy/core/numeric.py
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/ctors.c
numpy/core/tests/test_maskna.py
==================
965e4cf;Mark Wiebe;2011-08-16 20:03:22 -0700;ENH: missingdata: trying some more functions to see how they treat NAs

==

doc/neps/missing-data.rst
doc/release/2.0.0-notes.rst
numpy/lib/function_base.py
==================
b1cb211;Mark Wiebe;2011-08-16 19:28:32 -0700;ENH: missingdata: Add nastr= parameter to np.set_printoptions()

==

doc/neps/missing-data.rst
numpy/core/arrayprint.py
==================
ba4d116;Mark Wiebe;2011-08-16 19:11:22 -0700;BUG: missingdata: Fix mask usage in PyArray_TakeFrom, add tests for it

==

doc/neps/missing-data.rst
doc/release/2.0.0-notes.rst
numpy/core/arrayprint.py
numpy/core/src/multiarray/item_selection.c
numpy/core/tests/test_maskna.py
==================
a3a0ee8;Mark Wiebe;2011-08-16 17:17:05 -0700;BUG: missingdata: The ndmin parameter to np.array wasn't respecting NA masks

==

numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_maskna.py
==================
9194b3a;Mark Wiebe;2011-08-16 16:54:16 -0700;ENH: missingdata: Rewrite PyArray_Concatenate to work with NA masks
It should also have less memory usage for heterogeneous inputs,
because it no longer makes extra copies in that case.

==

doc/release/2.0.0-notes.rst
doc/source/reference/c-api.array.rst
numpy/add_newdocs.py
numpy/core/shape_base.py
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/na_mask.c
numpy/core/src/multiarray/nditer_constr.c
numpy/core/src/multiarray/shape.c
numpy/core/src/multiarray/shape.h
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_maskna.py
numpy/core/tests/test_shape_base.py
==================
99a21ef;Mark Wiebe;2011-08-16 09:07:16 -0700;ENH: missingdata: Add NA support to np.diagonal, change np.diagonal to always return a view

==

doc/release/2.0.0-notes.rst
numpy/add_newdocs.py
numpy/core/fromnumeric.py
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/methods.c
numpy/core/tests/test_maskna.py
numpy/lib/twodim_base.py
==================
91e94e9;Mark Wiebe;2011-08-16 07:42:18 -0700;ENH: ufunc: Move the default SAME_KIND casting rule out of the ufunc code
Also, start to use it for some other out= parameters in non-ufuncs.

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/calculation.c
numpy/core/src/umath/ufunc_object.c
==================
c0a0e78;Mark Wiebe;2011-08-16 07:14:09 -0700;BUG: missingdata: Fix src_itemsize in USE_MASKNA copy to buffer
This was causing some memory corruption that was difficult to track down.

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/arrayobject.h
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/nditer_api.c
numpy/core/src/multiarray/nditer_constr.c
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_maskna.py
==================
f1d685a;Mark Wiebe;2011-08-15 17:55:38 -0700;ENH: missingdata: Move the new MultiIndex Get/Set Item functions into item_selection.c

==

numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/item_selection.h
numpy/core/src/multiarray/methods.c
==================
c6261db;Mark Wiebe;2011-08-15 17:38:54 -0700;ENH: missingdata: Make arr.item() and arr.itemset() work with NA masks

==

numpy/core/arrayprint.py
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/nditer_pywrap.c
numpy/core/tests/test_maskna.py
==================
c7c080a;Mark Wiebe;2011-08-15 14:56:43 -0700;DOC: missingdata: Add some NA mask info to the documentation

==

doc/source/reference/c-api.array.rst
doc/source/reference/c-api.iterator.rst
numpy/core/include/numpy/ndarraytypes.h
==================
7fc4021;Mark Wiebe;2011-08-12 13:22:39 -0700;BUG: missingdata: Fleshing things out, tracking down a memory corruption

==

doc/release/2.0.0-notes.rst
numpy/core/src/multiarray/calculation.c
numpy/core/src/multiarray/scalarapi.c
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_maskna.py
==================
1c86dcf;Mark Wiebe;2011-08-07 21:26:47 -0700;ENH: umath: Fix reduce with NAs for ufuncs that have no unit

==

numpy/core/code_generators/genapi.py
numpy/core/code_generators/numpy_api.py
numpy/core/src/multiarray/array_assign.h
numpy/core/src/multiarray/array_assign_array.c
numpy/core/src/multiarray/array_assign_scalar.c
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_api.py
==================
1c9724b;Mark Wiebe;2011-08-07 21:03:16 -0700;ENH: core: Add tests for copyto function with new array_assign_array features

==

numpy/core/src/multiarray/array_assign_array.c
numpy/core/tests/test_api.py
==================
ef875ee;Mark Wiebe;2011-08-07 19:27:06 -0700;ENH: core: Make PyArray_CopyInto and PyArray_MoveInto be calls to array_assign_array

==

numpy/core/code_generators/numpy_api.py
numpy/core/src/multiarray/array_assign_array.c
numpy/core/src/multiarray/ctors.c
==================
51c9d7c;Mark Wiebe;2011-08-07 18:43:23 -0700;ENH: core: Make the array assignment routine handle overlapping arrays

==

numpy/core/src/multiarray/array_assign.c
numpy/core/src/multiarray/array_assign.h
numpy/core/src/multiarray/array_assign_array.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/ctors.h
numpy/core/src/multiarray/multiarraymodule.c
==================
42b9c84;Mark Wiebe;2011-08-07 18:09:11 -0700;ENH: missingdata: Implement routine for array to array assignment

==

numpy/core/SConscript
numpy/core/setup.py
numpy/core/src/multiarray/array_assign.c
numpy/core/src/multiarray/array_assign_array.c
numpy/core/src/multiarray/array_assign_scalar.c
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/na_mask.c
numpy/core/src/multiarray/na_mask.h
numpy/core/src/private/lowlevel_strided_loops.h
==================
d5ef961;Mark Wiebe;2011-08-07 15:11:37 -0700;ENH: core: Make 1-byte low level loops use memset

==

numpy/core/src/multiarray/lowlevel_strided_loops.c.src
==================
c1ebc15;Mark Wiebe;2011-08-07 14:08:34 -0700;ENH: core: Rewrite PyArray_FillWithScalar to use array_assign_scalar

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/na_mask.c
numpy/core/src/multiarray/na_mask.h
==================
20cdef1;Mark Wiebe;2011-08-07 13:14:13 -0700;ENH: missingdata: Change FillWithZero/One to AssignZero/One, add parameters
These functions now use the array_assign_scalar function to assign zero
or one, and also have 'wheremask' and 'preservena' parameters. This change
also exposed some bugs in array_assign_scalar, which were fixed.

==

numpy/core/code_generators/numpy_api.py
numpy/core/src/multiarray/array_assign_scalar.c
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/convert.h
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/einsum.c.src
numpy/core/src/multiarray/na_mask.c
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_einsum.py
==================
9acbfb3;Mark Wiebe;2011-08-07 11:45:04 -0700;ENH: missingdata: Fix remaining issues in scalar -> array assignment function

==

numpy/core/src/multiarray/array_assign.c
numpy/core/src/multiarray/array_assign.h
numpy/core/src/multiarray/array_assign_scalar.c
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/na_mask.c
numpy/core/src/multiarray/na_mask.h
numpy/core/src/multiarray/sequence.c
numpy/core/src/multiarray/shape.c
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_api.py
numpy/core/tests/test_maskna.py
numpy/testing/utils.py
==================
0d9f27d;Mark Wiebe;2011-08-07 09:07:45 -0700;ENH: missingdata: Finish implementation of scalar to array assignment
This still does not support a 'wheremask' which contains NA values,
but that can always be added later.

==

numpy/core/src/multiarray/array_assign.h
numpy/core/src/multiarray/array_assign_scalar.c
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/na_mask.c
numpy/core/src/multiarray/na_mask.h
numpy/core/src/private/lowlevel_strided_loops.h
==================
c57efbc;Mark Wiebe;2011-08-07 07:26:53 -0700;ENH: missingdata: Implement wheremasked scalar assignment with overwritena=True

==

numpy/core/SConscript
numpy/core/setup.py
numpy/core/src/multiarray/array_assign.c
numpy/core/src/multiarray/array_assign.h
numpy/core/src/multiarray/array_assign_scalar.c
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/lowlevel_strided_loops.c.src
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/na_mask.c
numpy/core/src/multiarray/na_mask.h
numpy/core/src/multiarray/nditer_api.c
numpy/core/src/multiarray/nditer_constr.c
numpy/core/src/multiarray/nditer_impl.h
numpy/core/src/private/lowlevel_strided_loops.h
==================
b769df7;Mark Wiebe;2011-08-06 09:43:09 -0700;ENH: missingdata: Use a static buffer in scalar assignment for small dtypes

==

numpy/core/src/multiarray/array_assign.c
==================
b9a4508;Mark Wiebe;2011-08-06 09:08:10 -0700;ENH: missingata: Move the alignment check out of the assignment functions

==

numpy/core/src/multiarray/array_assign.c
==================
1f91c53;Mark Wiebe;2011-08-05 22:00:10 -0700;ENH: missingdata: Implement wheremask scalar assignment

==

numpy/core/src/multiarray/array_assign.c
numpy/core/src/multiarray/shape.c
numpy/core/src/multiarray/shape.h
==================
92d7bca;Mark Wiebe;2011-08-05 21:20:19 -0700;ENH: missingdata: Writing some low level general array assignment routines
Some bugs in the NA reductions got tracked back to a need for an
assignment operation which doesn't overwrite NA values. Making a decent
array assignment API seems like a good aproach to deal with that.

==

numpy/core/SConscript
numpy/core/setup.py
numpy/core/src/multiarray/array_assign.c
numpy/core/src/multiarray/array_assign.h
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/convert_datatype.h
numpy/core/src/multiarray/na_mask.c
numpy/core/src/umath/ufunc_object.c
==================
5e8b9ac;Mark Wiebe;2011-08-05 15:02:17 -0500;WIP: fixing reduce NA bug

==

doc/release/2.0.0-notes.rst
numpy/core/src/multiarray/na_mask.c
numpy/core/tests/test_maskna.py
==================
d54c93d;Mark Wiebe;2011-08-05 14:31:04 -0500;ENH: missingdata: Adding NA support to various methods

==

doc/release/2.0.0-notes.rst
numpy/core/src/multiarray/calculation.c
numpy/core/tests/test_maskna.py
==================
79f0dd9;Mark Wiebe;2011-08-04 19:10:54 -0500;BUG: missingdata: Negative strides bug in USE_MASKNA nditer mode

==

numpy/core/src/multiarray/nditer_constr.c
numpy/core/tests/test_maskna.py
==================
61d1e2d;Mark Wiebe;2011-08-04 17:28:43 -0500;ENH: missingdata: Make NA ufuncs work with output parameters properly

==

numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_maskna.py
==================
a7ef22a;Mark Wiebe;2011-08-04 16:40:59 -0500;BUG: missingdata: Was adding MASKNA even when not desired currently

==

numpy/core/src/multiarray/ctors.c
numpy/core/tests/test_maskna.py
==================
9061b0e;Mark Wiebe;2011-08-04 16:35:54 -0500;ENH: missingdata: Add skipna parameters to sum, prod, etc

==

numpy/core/fromnumeric.py
numpy/core/src/multiarray/ctors.c
numpy/core/tests/test_maskna.py
==================
1992ee2;Mark Wiebe;2011-08-04 16:21:07 -0500;ENH: missingdata: Another NA array formatting tweak

==

numpy/core/arrayprint.py
==================
2bf8b66;Mark Wiebe;2011-08-04 16:04:21 -0500;ENH: missingdata: Try to get basic NA printing to be ok

==

numpy/core/arrayprint.py
==================
5c7e14a;Mark Wiebe;2011-08-04 15:48:34 -0500;ENH: missingdata: Make the ndarray.take function work with NA masks

==

numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_maskna.py
==================
2b05fad;Mark Wiebe;2011-08-04 11:39:25 -0500;ENH: missingdata: Fix construction of maskna array with all NAs

==

numpy/core/src/multiarray/ctors.c
numpy/core/tests/test_maskna.py
==================
ecadc64;Mark Wiebe;2011-08-04 11:01:29 -0500;ENH: missingdata: Make reduction with skipna=True work better in some cases
In particular, this allows it for ufuncs without a unit, where the
array has just one dimension.

==

numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_maskna.py
==================
8fff78d;Mark Wiebe;2011-08-04 09:45:49 -0500;ENH: missingdata: Some tests/fixes for reduce method with skipna=True

==

numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_maskna.py
==================
6eccea6;Mark Wiebe;2011-08-03 17:15:52 -0500;ENH: missingdata: Get ufunc reduce skipna=False working better

==

numpy/core/src/multiarray/nditer_constr.c
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_maskna.py
==================
fb2f8d2;Mark Wiebe;2011-08-03 16:29:11 -0500;ENH: missingdata: Fix an iterator MASKNA bug, fill in more missing stuff

==

numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/na_mask.c
numpy/core/src/multiarray/na_singleton.c
numpy/core/src/multiarray/na_singleton.h
numpy/core/src/multiarray/nditer_constr.c
numpy/core/src/multiarray/shape.c
numpy/core/tests/test_maskna.py
==================
de1feee;Mark Wiebe;2011-08-03 13:57:13 -0500;ENH: missingdata: Fix the remaining scipy errors
Except for 4 iterative convergence errors I always see in scipy anyway.

==

numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_ufunc.py
==================
0e5fb25;Mark Wiebe;2011-08-03 12:27:54 -0500;ENH: missingdata: Change things to help scipy pass its tests
Improving the NumPy tests a bit to catch these errors better...

==

numpy/core/fromnumeric.py
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/shape.c
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_indexing.py
numpy/core/tests/test_ufunc.py
numpy/matrixlib/tests/test_defmatrix.py
==================
b471b5a;Mark Wiebe;2011-08-03 09:53:51 -0500;ENH: missingdata: Change boolean indexing to broadcast to the left manually
I've also restricted it just to allow one-dimensional masks or masks
which match the number of dimensions of the array with the data. This
will require further discussion on the list at some point.

==

numpy/core/arrayprint.py
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/nditer_constr.c
numpy/core/src/multiarray/shape.c
numpy/core/src/umath/ufunc_object.c
==================
ae79b71;Mark Wiebe;2011-08-03 02:26:12 -0500;ENH: missingdata: Fix up more NA mask indexing, make things work in 2D

==

numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/na_singleton.c
numpy/core/src/multiarray/na_singleton.h
numpy/core/src/multiarray/shape.c
numpy/core/tests/test_maskna.py
==================
0163eb8;Mark Wiebe;2011-08-02 20:37:42 -0500;ENH: Work in progress on arr.reshape, other misc changes

==

numpy/core/arrayprint.py
numpy/core/code_generators/numpy_api.py
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/na_mask.c
numpy/core/src/multiarray/shape.c
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_maskna.py
==================
ea5dcd7;Mark Wiebe;2011-08-02 17:25:11 -0500;DOC: ufunc: Document the 'axis=' improvments to reduction functions

==

numpy/add_newdocs.py
numpy/core/fromnumeric.py
==================
90c6172;Mark Wiebe;2011-08-02 17:15:56 -0500;ENH: ufunc: Add tests for zero-sized array reductions

==

numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_ufunc.py
==================
00dff15;Mark Wiebe;2011-08-02 17:06:20 -0500;ENH: umath: Make sum, prod, any, or functions use the .reduce method directly
This required some extensive changes, like:
 * Making logical_or, logical_and, and logical_not on object arrays behave
   like their Python equivalents instead of calling methods on the objects
 * Changing the units for a fair number of the binary operations to
   None, so they don't get initialized to their unit values at the start

A consequence of this is that multi-dimensional reductions like sum, prod,
any, or all no longer need to make copies, so are faster in some cases.

==

numpy/core/code_generators/generate_umath.py
numpy/core/fromnumeric.py
numpy/core/src/multiarray/nditer_api.c
numpy/core/src/umath/funcs.inc.src
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_ufunc.py
numpy/lib/tests/test_function_base.py
numpy/ma/tests/test_core.py
==================
0375181;Mark Wiebe;2011-08-02 14:20:29 -0500;TST: ufunc: Tweak ma test to have a good output parameter, disable crashing NA test temporarily

==

numpy/core/tests/test_maskna.py
numpy/ma/tests/test_core.py
==================
aed9925;Mark Wiebe;2011-08-02 13:34:13 -0500;ENH: ufunc: Rewrite PyUFunc_Reduce to be more general and easier to adapt to NA masks
This generalizes the 'axis' parameter to accept None or a list of
axes on which to do the reduction.

==

numpy/core/code_generators/generate_umath.py
numpy/core/code_generators/numpy_api.py
numpy/core/include/numpy/halffloat.h
numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/convert.h
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/na_mask.c
numpy/core/src/multiarray/shape.c
numpy/core/src/multiarray/shape.h
numpy/core/src/umath/ufunc_object.c
==================
2f0bb5d;Mark Wiebe;2011-08-02 09:16:38 -0500;API: nditer: Rename NpyIter_GetMaskNAIndices to NpyIter_GetMaskNAIndexArray

==

numpy/core/code_generators/numpy_api.py
numpy/core/src/multiarray/nditer_api.c
numpy/core/src/multiarray/nditer_pywrap.c
==================
0c269ed;Mark Wiebe;2011-08-01 12:18:46 -0500;ENH: ufunc: Split Reduce and Accumulate apart so that adding NA support is easier

==

numpy/core/src/multiarray/na_mask.c
numpy/core/src/umath/ufunc_object.c
==================
9aa599c;Mark Wiebe;2011-08-01 11:50:56 -0500;ENH: missingdata: Write function for reducing the NA mask array

==

numpy/core/code_generators/numpy_api.py
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/na_mask.c
numpy/core/src/private/lowlevel_strided_loops.h
==================
3441a3e;Mark Wiebe;2011-07-31 23:12:03 -0500;ENH: missingdata: Improve some raw iteration methods

==

numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/na_mask.c
numpy/core/src/private/lowlevel_strided_loops.h
numpy/core/src/umath/ufunc_object.c
==================
e73dd6a;Mark Wiebe;2011-07-31 09:24:03 -0500;ENH: missingdata: Progress towards supporting ufunc reduce with NA masks

==

numpy/add_newdocs.py
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/na_mask.c
numpy/core/src/multiarray/na_mask.h
numpy/core/src/private/lowlevel_strided_loops.h
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_maskna.py
numpy/core/tests/test_nditer.py
==================
61d45ee;Mark Wiebe;2011-07-30 19:35:29 -0500;ENH: missingdata: Got masked element-wise ufuncs working in preliminary fashion

==

numpy/core/include/numpy/ufuncobject.h
numpy/core/src/multiarray/nditer_api.c
numpy/core/src/multiarray/nditer_constr.c
numpy/core/src/multiarray/nditer_pywrap.c
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/ufunc_type_resolution.c
numpy/core/tests/test_nditer.py
==================
682e21e;Mark Wiebe;2011-07-30 16:50:01 -0500;ENH: nditer: Allow a virtual mask of ones for non-masked USE_MASKNA operands

==

numpy/core/src/multiarray/nditer_constr.c
numpy/core/src/multiarray/nditer_pywrap.c
numpy/core/tests/test_nditer.py
==================
5908170;Mark Wiebe;2011-07-30 13:48:57 -0500;ENH: missingdata: Make the nditer USE_MASKNA mode work with buffering

==

numpy/core/src/multiarray/nditer_api.c
numpy/core/src/multiarray/nditer_constr.c
numpy/core/tests/test_nditer.py
==================
1a58505;Mark Wiebe;2011-07-29 19:00:58 -0500;TST: missingdata: Add test for buffered MASKNA iteration

==

numpy/core/tests/test_nditer.py
==================
f5140c1;Mark Wiebe;2011-07-29 18:52:44 -0500;ENH: missingdata: Some tests for MASKNA iteration in Python

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/nditer_constr.c
numpy/core/src/multiarray/nditer_pywrap.c
numpy/core/tests/test_maskna.py
numpy/core/tests/test_nditer.py
==================
c626f19;Mark Wiebe;2011-07-29 17:57:46 -0500;ENH: missingdata: Fill in buffered NAMASK nditer, add maskna= to zeros, empty, and empty_like

==

numpy/add_newdocs.py
numpy/core/numeric.py
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/flagsobject.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/na_mask.c
numpy/core/src/multiarray/nditer_constr.c
numpy/core/src/multiarray/nditer_pywrap.c
numpy/core/tests/test_maskna.py
numpy/core/tests/test_nditer.py
==================
aef8779;Mark Wiebe;2011-07-29 16:28:32 -0500;TST: missingdata: Move maskna array tests to their own file

==

numpy/core/tests/test_maskna.py
numpy/core/tests/test_na.py
==================
987611d;Mark Wiebe;2011-07-29 16:23:42 -0500;TST: missingdata: Cover some more unmasking assignment cases

==

numpy/core/tests/test_na.py
==================
9bc5528;Mark Wiebe;2011-07-29 16:10:25 -0500;BUG: missingdata: Add deallocation of the NA mask

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/na_mask.c
==================
6e99d50;Mark Wiebe;2011-07-29 14:26:13 -0500;ENH: missingdata: Fill in view function, add many tests for NA view functions

==

numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/flagsobject.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_na.py
==================
d0d73c2;Mark Wiebe;2011-07-29 11:55:00 -0500;ENH: missingdata: Write NA mask support into PyArray_CopyInto

==

numpy/core/src/multiarray/conversion_utils.c
numpy/core/src/multiarray/ctors.c
==================
4839dfa;Mark Wiebe;2011-07-29 10:27:43 -0500;ENH: core: Revert optimistic use of PyNumber_Index for indexing
SciPy and other code has come to depend on the truncation behavior
of floating point indexing. This would be nice to fix for 2.0, however.

==

numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/methods.c
==================
f82acc7;Mark Wiebe;2011-07-28 17:12:10 -0500;TST: core: Regression test of boolean indexing was invalid, fixed it
The test made sure you couldn't assign a scalar to an empty array,
something which is perfectly fine generally in NumPy. I've changed
the test to make sure you can't assign off-size arrays with
boolean indexing.

==

numpy/core/src/multiarray/mapping.c
numpy/core/tests/test_regression.py
==================
a6e869b;Mark Wiebe;2011-07-28 17:07:44 -0500;BUG: ma: Fix a bug in numpy.ma hardmasks, exposed by the boolean indexing rewrite

==

numpy/core/src/multiarray/mapping.c
numpy/ma/core.py
==================
6269494;Mark Wiebe;2011-07-28 16:48:26 -0500;ENH: missingdata: Implemented boolean assignment, working with NA masks

==

numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/nditer_constr.c
numpy/core/tests/test_na.py
numpy/core/tests/test_numeric.py
numpy/lib/arraysetops.py
numpy/ma/extras.py
==================
69e0ed8;Mark Wiebe;2011-07-28 12:19:16 -0500;ENH: missingdata: Rewrote boolean indexing to support NA masks
Note I haven't hooked it up to the arr[] operator yet...

==

doc/neps/missing-data.rst
numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/item_selection.h
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/na_mask.c
numpy/core/src/private/lowlevel_strided_loops.h
numpy/core/tests/test_na.py
==================
30bb488;Mark Wiebe;2011-07-27 19:03:15 -0500;ENH: missingdata: Get the NA mask working with slice indexing

==

numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/iterators.h
numpy/core/src/multiarray/mapping.c
numpy/core/tests/test_na.py
==================
f9ad427;Mark Wiebe;2011-07-27 16:05:22 -0500;ENH: missingdata: In progress making slicing work with NA masks

==

numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/sequence.c
numpy/core/tests/test_na.py
==================
95dc61b;Mark Wiebe;2011-07-27 14:49:34 -0500;ENH: missingdata: Finish the initial implementation of numpy.isna

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/numeric.py
numpy/core/src/multiarray/na_mask.c
==================
dc365a0;Mark Wiebe;2011-07-27 11:59:09 -0500;ENH: missingdata: In progress exposing USE_MASKNA to Python numpy.nditer

==

numpy/core/code_generators/numpy_api.py
numpy/core/src/multiarray/nditer_api.c
numpy/core/src/multiarray/nditer_constr.c
numpy/core/src/multiarray/nditer_pywrap.c
==================
c788fe3;Mark Wiebe;2011-07-26 17:50:26 -0500;ENH: missingdata: More progress towards NPY_ITER_USE_MASKNA flag support

==

numpy/core/numeric.py
numpy/core/src/multiarray/na_mask.c
numpy/core/src/multiarray/nditer_constr.c
==================
91861a9;Mark Wiebe;2011-07-26 17:07:03 -0500;ENH: missingdata: Part way through supporting the NPY_ITER_USE_MASKNA flag

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/numeric.py
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/nditer_api.c
numpy/core/src/multiarray/nditer_constr.c
numpy/core/src/multiarray/nditer_impl.h
numpy/core/tests/test_na.py
==================
25a64c8;Mark Wiebe;2011-07-26 12:27:34 -0500;BLD: missingdata: Signature of arraydescr_short_construction_repr changed

==

numpy/core/src/multiarray/na_singleton.c
numpy/core/tests/test_na.py
==================
0cc2e75;Mark Wiebe;2011-07-26 11:58:43 -0500;ENH: missingdata: Get printing of NAs to work a little bit better

==

numpy/core/arrayprint.py
numpy/core/numeric.py
==================
5e6d038;Mark Wiebe;2011-07-26 11:18:42 -0500;ENH: missingdata: Clean up object dtype detection to work with NAs properly

==

numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_na.py
==================
f3d05b6;Mark Wiebe;2011-07-25 18:33:53 -0500;ENH: missingdata: Really simple printing with NA works in some cases now too

==

numpy/core/arrayprint.py
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/na_mask.c
numpy/core/src/multiarray/na_mask.h
==================
02b42b5;Mark Wiebe;2011-07-25 18:07:53 -0500;ENH: missingdata: Have some basic assignment and indexing with NA working

==

doc/neps/missing-data.rst
numpy/core/arrayprint.py
numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/ctors.h
numpy/core/src/multiarray/flagsobject.c
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/na_mask.c
numpy/core/src/multiarray/na_singleton.c
numpy/core/src/multiarray/na_singleton.h
numpy/core/src/multiarray/scalarapi.c
numpy/core/src/multiarray/shape.c
numpy/core/tests/test_na.py
==================
b2e8328;Mark Wiebe;2011-07-25 12:49:28 -0500;ENH: missingdata: Add (untested) functions for creating the NA mask

==

numpy/core/code_generators/numpy_api.py
numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/flagsobject.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/na_mask.c
numpy/core/src/multiarray/nditer_api.c
numpy/core/src/multiarray/shape.c
numpy/core/src/multiarray/shape.h
numpy/core/src/private/lowlevel_strided_loops.h
==================
fecb761;Mark Wiebe;2011-07-22 15:29:13 -0500;ENH: missingdata: Use NPY_NA_NOPAYLOAD instead of constant 255 everywhere

==

numpy/core/src/multiarray/na_singleton.c
==================
47b8640;Mark Wiebe;2011-07-22 15:15:44 -0500;ENH: missingdata: Define the standard Python arithmetic operations for NA

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/na_singleton.c
numpy/core/src/multiarray/na_singleton.h
numpy/core/tests/test_na.py
==================
61caa71;Mark Wiebe;2011-07-22 12:24:15 -0500;ENH: missingdata: Make comparisons with NA return NA, raise on 'if np.NA: ...'

==

numpy/core/code_generators/numpy_api.py
numpy/core/numerictypes.py
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/na_singleton.c
numpy/core/src/multiarray/na_singleton.h
==================
867cabe;Mark Wiebe;2011-07-22 10:24:14 -0500;ENH: missingdata: Write NA repr function

==

numpy/core/src/multiarray/na_singleton.c
==================
321b8bf;Mark Wiebe;2011-07-22 10:04:25 -0500;ENH: missingdata: Add boilerplate for NA singleton type

==

numpy/core/SConscript
numpy/core/include/numpy/ndarraytypes.h
numpy/core/setup.py
numpy/core/src/multiarray/multiarraymodule_onefile.c
numpy/core/src/multiarray/na_singleton.c
numpy/core/src/multiarray/na_singleton.h
numpy/core/src/multiarray/nditer_pywrap.c
==================
6d946cd;Mark Wiebe;2011-07-21 15:50:38 -0500;ENH: Create NA singleton file

==

numpy/core/src/multiarray/na_singleton.c
==================
263df0c;Mark Wiebe;2011-07-19 17:06:08 -0500;ENH: missingdata: Add the NA mask members to PyArrayObject

==

doc/neps/missing-data.rst
numpy/core/SConscript
numpy/core/code_generators/genapi.py
numpy/core/code_generators/numpy_api.py
numpy/core/include/numpy/ndarraytypes.h
numpy/core/include/numpy/npy_deprecated_api.h
numpy/core/setup.py
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/na_mask.c
numpy/core/src/umath/ufunc_type_resolution.c
==================
aa55ba7;Matthew Brett;2011-08-26 19:18:40 -0700;BUG: stray brackets at end of define for macro

==

numpy/core/include/numpy/noprefix.h
==================
4fb84e7;Charles Harris;2011-08-25 20:20:49 -0600;Merge branch 'pull-138'
* pull-138:
  DOC: nditer: Add details about why 'readonly' is the operand default
  DOC: nditer: Tweaks to the tutorial based on feedback from Chris
  DOC: nditer: Add links to the nditer introductory doc to make it more discoverable
  DOC: nditer: Finish up the nditer walkthrough with a Cython example
  DOC: nditer: Add tutorial-style material covering more than one operand
  DOC: nditer: Write tutorial-style introduction covering single-array iteration

==
==================
e7786bd;Mark Wiebe;2011-08-24 17:42:19 -0700;DOC: nditer: Add details about why 'readonly' is the operand default

==

doc/source/reference/arrays.nditer.rst
==================
62c5688;Mark Wiebe;2011-08-19 10:16:30 -0700;DOC: nditer: Tweaks to the tutorial based on feedback from Chris

==

doc/source/reference/arrays.nditer.rst
==================
09a750c;Mark Wiebe;2011-08-15 11:31:39 -0700;DOC: nditer: Add links to the nditer introductory doc to make it more discoverable

==

doc/source/reference/arrays.nditer.rst
doc/source/reference/c-api.iterator.rst
numpy/add_newdocs.py
==================
02b1c20;Mark Wiebe;2011-08-13 13:58:28 -0700;DOC: nditer: Finish up the nditer walkthrough with a Cython example

==

doc/source/reference/arrays.nditer.rst
doc/source/reference/arrays.rst
==================
8464c96;Mark Wiebe;2011-08-13 12:19:57 -0700;DOC: nditer: Add tutorial-style material covering more than one operand

==

doc/source/reference/arrays.nditer.rst
==================
f993216;Mark Wiebe;2011-08-12 23:10:42 -0700;DOC: nditer: Write tutorial-style introduction covering single-array iteration

==

doc/source/reference/arrays.nditer.rst
==================
e53c055;Chris Jordan-Squire;2011-08-22 13:18:53 -0500;DOC: Add tutorial for writing numpy ufunc extensions.

==

doc/source/user/c-info.ufunc-tutorial.rst
==================
aeda026;Chris Jordan-Squire;2011-08-22 10:46:34 -0500;Py3K compliant, extra comments added

==

doc/source/user/c-info.ufunc-tutorial.rst
==================
e2c4bb1;Chris Jordan-Squire;2011-08-17 01:31:31 -0400;style changes and bugs removed from docs

==

doc/source/user/c-info.ufunc-tutorial.rst
==================
7959374;Chris Jordan-Squire;2011-08-15 17:36:29 -0500;ENH: Docs now Py3k compliant

==

doc/source/user/c-info.ufunc-tutorial.rst
==================
2695ada;Chris Jordan-Squire;2011-08-15 11:30:16 -0500;Changed to follow PEP 7

==

doc/source/user/c-info.ufunc-tutorial.rst
numpy/testing/utils.py
==================
83a5503;Chris Jordan-Squire;2011-08-03 16:11:06 -0500;DOCS: New ufunc creation docs

==

doc/source/reference/c-api.coremath.rst
doc/source/user/c-info.beyond-basics.rst
doc/source/user/c-info.rst
doc/source/user/c-info.ufunc-tutorial.rst
numpy/testing/utils.py
==================
d7b12a3;Ben Walsh;2011-08-21 13:51:40 -0600;BUG: Fix segfault when PyArray_VOID and no minitype in _array_find_type. The segfault showed up in numpy/testing/print_coercion_tables.py and 'lookfor'.

==

numpy/core/src/multiarray/common.c
numpy/core/tests/test_multiarray.py
==================
04741c0;David Cournapeau;2011-08-21 17:03:35 +0200;BUG: use npy_isnan, not isnan.

==

numpy/core/src/umath/loops.c.src
==================
065b349;David Cournapeau;2011-08-21 17:03:12 +0200;BUG: fix dummy module build.

==

numpy/core/src/dummymodule.c
==================
70d9f67;David Cournapeau;2011-08-21 12:02:36 +0200;STY: define all config.h macro to value 1 to match autoheader convention.

==

numpy/core/setup.py
==================
a90754d;Pearu Peterson;2011-08-16 23:33:32 +0300;ENH: Introduce new options extra_f77_compile_args and extra_f90_compile_args to Configuration.add_extension. Configuration.add_library, and Extension. These options allow specifying extra compile options for compiling Fortran sources within a setup.py file.

==

doc/DISTUTILS.rst.txt
numpy/distutils/command/build_clib.py
numpy/distutils/command/build_ext.py
numpy/distutils/extension.py
numpy/distutils/fcompiler/__init__.py
numpy/distutils/misc_util.py
==================
ea529d4;Charles Harris;2011-08-20 11:13:08 -0600;BUG: Revert commit that causes many tests not to run.
Revert "Introduce new options extra_f77_compiler_args and extra_f90_compiler_args to Configuration.add_extension. Configuration.add_library, and Extension. These options allow specifying extra compile options for compiling Fortran sources within a setup.py file."

This reverts commit 43862759384a86cb4a95e8adb4d39fa1522acb28.

==

doc/DISTUTILS.rst.txt
numpy/distutils/command/build_clib.py
numpy/distutils/command/build_ext.py
numpy/distutils/extension.py
numpy/distutils/fcompiler/__init__.py
numpy/distutils/misc_util.py
==================
cdf1ff1;Charles Harris;2011-08-20 10:15:17 -0600;Merge branch 'pull-140'
* pull-140:
  BUG: loadtxt: There was some extra nesting for subarray dtypes (Ticket #1936)

==
==================
a54a0bd;Mark Wiebe;2011-08-18 20:37:36 -0700;BUG: loadtxt: There was some extra nesting for subarray dtypes (Ticket #1936)

==

numpy/lib/npyio.py
numpy/lib/tests/test_regression.py
==================
9aac3a5;Pearu Peterson;2011-08-19 14:57:02 +0300;BLD: follow build_ext coding convention in build_clib to catch strange fcompiler value reported in ml.

==

numpy/distutils/command/build_clib.py
==================
00962c4;Brent Pedersen;2011-08-16 16:41:48 -0600;ENH: add useful repr's for finfo, iinfo.

==

numpy/core/getlimits.py
numpy/core/tests/test_getlimits.py
==================
4386275;Pearu Peterson;2011-08-16 23:33:32 +0300;Introduce new options extra_f77_compiler_args and extra_f90_compiler_args to Configuration.add_extension. Configuration.add_library, and Extension. These options allow specifying extra compile options for compiling Fortran sources within a setup.py file.

==

doc/DISTUTILS.rst.txt
numpy/distutils/command/build_clib.py
numpy/distutils/command/build_ext.py
numpy/distutils/extension.py
numpy/distutils/fcompiler/__init__.py
numpy/distutils/misc_util.py
==================
78f7542;Matthew Brett;2011-08-15 21:02:37 -0700;ENH: refactor doctest plugin to help subclassing
Move numpy-specific parts of the plugin into their own methods, or into
class-level defines.  This makes it easier to subclass the plugin.  This
in turn may help keep more eyes on the code.

==

numpy/testing/noseclasses.py
==================
31aecd9;Matthew Brett;2011-08-15 20:30:17 -0700;ENH: remove unused class definition
NumpyDocTestCase definition overwritten further down the file.

The deleted class only redefined the ``id`` method with the same code
as that in the parent class since before nose 0.10.

==

numpy/testing/noseclasses.py
==================
57747fc;Matthew Brett;2011-08-15 14:37:10 -0700;ENH: skip doctests for tests
There are various docstrings show examples of how to run the tests, and
give example test output.  Obviously the test output changes, and
running the doctests for the testing package:

import numpy.testing as npt
npt.test(doctests=True)

will cause several large sets of tests to be run in the rest of the
tree.  So I skipped these.

==

numpy/testing/nosetester.py
numpy/testing/utils.py
==================
316d1f4;Matthew Brett;2011-08-15 12:58:03 -0700;FIX: fix doctest error with empty output
The numpy doctest extension generates an error with empty doctest output;
this most often comes about with the +SKIP option.

The numpy doctest plugin exposed a nose bug because it accidentally used
a different default for the 'doctest-result-variable'.

nose bug report here:
http://code.google.com/p/python-nose/issues/detail?id=445

==

numpy/testing/noseclasses.py
numpy/testing/tests/test_doctesting.py
==================
199535c;Matthew Brett;2011-08-15 12:38:13 -0700;ENH: move doctest tests to own file with ifmain
The doctesting tests were in the code file, and (for me) rather
difficult to run without running lots of other tests.  With this change
you can run the doctest tests in isolation by executing the
test_doctesting.py file.

==

numpy/testing/nosetester.py
numpy/testing/tests/test_doctesting.py
==================
8eba1ef;Matthew Brett;2011-08-11 15:25:47 -0700;ENH: refactor testing to improve subclass support
Refactor ``prepare_test_args`` method to make it easier for subclasses
to adapt its behavior.  This should make it easier for nipy and other
projects to use the numpy testing machinery without wholesale copies
into their source trees.

==

numpy/testing/nosetester.py
==================
b0c1f6b;Matthew Brett;2011-08-10 19:06:48 -0700;ENH: refactor of docteset plugin management
We previously had a baroque inheritance scheme to deal with the case
where the user had normal nose doctests enabled in their environment.
However, this scheme didn't deal with bench() routine, and was
complicated. This commit uses a null Unplugger plugin to pull the
doctest plugin off the nose configuration after it has been initialized.
We can use this for bench() and test(), and it allows the doctest module
to be enabled (by the user environment) and then thrown away.

Also rejigged the docstrings and removed the automated docstring
addition as the docstrings have already been copied and adapted in the
code.

==

numpy/testing/noseclasses.py
numpy/testing/nosetester.py
==================
5cf0a07;Paul Anton Letnes;2011-07-31 21:04:59 +0200;ENH: Add provision for headers and footers to savetxt, fixes ticket 1236. I suggest using a separate keyword argument for structured arrays. It might also be nice to be able to add a manual header.

==

numpy/lib/npyio.py
numpy/lib/tests/test_io.py
==================
730b861;Alok Singhal;2011-08-02 19:14:24 -0700;BUG: print format fix for datetime/timedelta

==

numpy/core/src/multiarray/scalartypes.c.src
==================
418f070;Charles Harris;2011-08-13 17:38:20 -0600;STY: Rewrite some macros to look better. This code could probably use a bigger refactor.

==

numpy/core/code_generators/generate_ufunc_api.py
==================
4dac50b;Arfrever Frehtes Taifersar Arahesis;2011-08-13 17:05:11 -0600;BUG: Fix import_umath macro to work with python 3.

==

numpy/core/code_generators/generate_ufunc_api.py
==================
51a096b;Chris Jordan-Squire;2011-08-01 10:58:35 -0500;ENH: Faster asarray_chkfinite

==

numpy/lib/function_base.py
==================
dba98cc;Ralf Gommers;2011-08-02 17:34:38 +0200;BLD: fix build for py3k + pip. Closes #1857. Thanks to Erik Bray.
Also works inside a virtualenv.

==

numpy/distutils/ccompiler.py
setup.py
==================
57b56bc;Ralf Gommers;2011-08-10 22:59:09 +0200;BUG: fix failing npyio test under py3k.  Thanks to Derek Homeier. Closes #1793.

==

numpy/lib/npyio.py
numpy/lib/tests/test_io.py
==================
26aa3cf;Pauli Virtanen;2011-07-31 13:23:23 +0200;BUG: lib: use Py_TYPE to access ob_type, so it works also on Py3

==

numpy/lib/src/_compiled_base.c
==================
72ab385;Paul Anton Letnes;2011-07-28 22:50:58 +0200;ENH: let genfromtxt return empty array for empty input file instead of an error.
A warning for empty files is issued, including file name.  Closes #1793.

==

numpy/lib/npyio.py
numpy/lib/tests/test_io.py
==================
2acb928;Mark Wiebe;2011-07-29 11:00:44 -0500;BUG: core: Fix memory leak, add a test which catches it (Ticket #1917)

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/tests/test_regression.py
==================
0ed0532;Mark;2011-07-29 07:13:46 -0700;Merge pull request #122 from gandalf013/dtype_repr_fix
BUG: don't use quotes in "dtype=name" when printing "simple" arrays
==
==================
16e7905;Alok Singhal;2011-07-28 09:54:00 -0700;BUG: don't use quotes in "dtype=name" when printing arrays for "simple" dtypes'
See: http://mail.scipy.org/pipermail/numpy-discussion/2011-July/057797.html

==

numpy/core/numeric.py
==================
d5b29c4;Mark;2011-07-27 09:55:02 -0700;Merge pull request #121 from mdboom/PyArray_DATA-cast
Fix PyArray_BYTES return type.
==
==================
7b34e36;Michael Droettboom;2011-07-27 12:44:30 -0400;In the old API, PyArray_DATA and PyArray_BYTES differ in that DATA returns a (void *) and BYTES returns a (char *).
matplotlib builds were failing because PyArray_BYTES was returning a (void *).

==

numpy/core/include/numpy/ndarraytypes.h
==================
9163993;Mark Wiebe;2011-07-26 12:14:21 -0500;Merge branch 'deprecate_array_field_access'

==
==================
affea42;Mark Wiebe;2011-07-26 12:07:14 -0500;STY: Remove trailing whitespace

==

numpy/core/_internal.py
numpy/core/code_generators/generate_umath.py
numpy/core/include/numpy/ndarraytypes.h
numpy/core/include/numpy/npy_common.h
numpy/core/include/numpy/numpyconfig.h
numpy/core/include/numpy/ufuncobject.h
numpy/core/src/npymath/halffloat.c
numpy/core/src/npymath/ieee754.c.src
numpy/core/src/private/lowlevel_strided_loops.h
numpy/core/src/private/npy_config.h
numpy/core/src/umath/ufunc_type_resolution.c
numpy/core/tests/test_datetime.py
numpy/core/tests/test_half.py
numpy/core/tests/test_ufunc.py
numpy/f2py/doc/multiarray/array_from_pyobj.c
numpy/lib/npyio.py
numpy/lib/tests/test_index_tricks.py
numpy/numarray/include/numpy/arraybase.h
numpy/numarray/include/numpy/cfunc.h
numpy/numarray/include/numpy/numcomplex.h
numpy/numarray/include/numpy/nummacro.h
==================
1b62bdf;David Huard;2011-07-20 14:36:35 -0400;BUG: fixed histogramdd bug with empty inputs.  Closes #1899.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_twodim_base.py
==================
694a383;Mark Wiebe;2011-07-22 15:48:22 -0500;DOC: core: Document the PyArray_SetBaseObject function

==

doc/source/reference/c-api.array.rst
==================
a2ed62a;Mark Wiebe;2011-07-22 15:40:28 -0500;ENH: core: Rename PyArray_SetBase to PyArray_SetBaseObject to be more clear

==

numpy/core/code_generators/numpy_api.py
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/einsum.c.src
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/nditer_api.c
numpy/core/src/multiarray/nditer_constr.c
numpy/core/src/multiarray/nditer_pywrap.c
numpy/core/src/multiarray/scalarapi.c
numpy/core/src/multiarray/sequence.c
numpy/core/src/multiarray/shape.c
numpy/lib/src/_compiled_base.c
numpy/numarray/_capi.c
==================
dc81482;Mark Wiebe;2011-07-22 11:06:21 -0500;ENH: dtype: Make handling of struct dtype align= flag more rigorous (also fixes ticket #1912)
This adds an 'aligned'= property to the format dict, which gets put
in the str() representation when necessary to preserve it.

==

numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/descriptor.h
numpy/core/tests/test_dtype.py
==================
e2af7b7;Ralf Gommers;2011-07-20 22:43:49 +0200;REL: forward port changes to release scripts from 1.6.x branch.

==

pavement.py
release.sh
==================
a059979;Mark Wiebe;2011-07-20 10:01:46 -0500;STY: Updates for pull request feedback from Chuck and Ben

==

doc/neps/missing-data.rst
numpy/core/_internal.py
==================
6dcc6e4;Mark Wiebe;2011-07-19 15:42:04 -0500;MRG: Merge branch 'gandalf013/businessday2'
Changes busday_count to return negative values instead of clamping
to zero.

==
==================
559095d;Mark Wiebe;2011-07-19 15:41:23 -0500;TST: datetime: Test that busday_count returns negative values when needed

==

numpy/core/tests/test_datetime.py
==================
7e1c4b0;Mark Wiebe;2011-07-19 15:38:56 -0500;DOC: datetime: Update the docs to reflect busday_count change

==

doc/source/reference/arrays.datetime.rst
numpy/add_newdocs.py
==================
bd77886;Alok Singhal;2011-07-16 11:08:41 -0500;ENH: datetime: make np.busday_count return negative values when the start date is after end date

==

numpy/core/src/multiarray/datetime_busday.c
==================
d6c3b44;Mark Wiebe;2011-07-19 14:55:30 -0500;MRG: Merge branch 'walshb/datetime_array_fixes'

==
==================
9164657;Ben Walsh;2011-07-12 17:50:48 +0100;ENH: datetime: Masked arrays now use NaT as default filler value.

==

numpy/ma/core.py
==================
1dd8eb7;Ben Walsh;2011-07-12 16:47:12 +0100;BUG: datetime: Various fixes for datetime arrays.

==

numpy/core/_internal.py
numpy/lib/_iotools.py
numpy/lib/tests/test_io.py
numpy/ma/core.py
==================
ecaf1e1;Mark Wiebe;2011-07-19 14:45:59 -0500;MRG: Merge branch 'steveha/datetime64_doc'

==
==================
1d3add6;Mark Wiebe;2011-07-19 14:45:16 -0500;DOC: datetime: hyperlink busday_count and is_busday functions in datetime doc

==

doc/source/reference/arrays.datetime.rst
==================
4af5237;Steve R. Hastings;2011-07-16 18:12:36 -0500;DOC: datetime: Update docstrings for busdays code.
The previous checkin has examples for working with datetime64 objects and
the busdays functions.  Edit the docstrings for busdays to harmonize them
with the language used in the examples.

Instead of saying "business days", now say "valid days".  The default
valid days are Monday through Friday, business days, but other sets of
valid days are possible.

==

numpy/add_newdocs.py
==================
17d5ecd;Steve R. Hastings;2011-07-16 16:28:49 -0500;DOC: datetime: Add additional tutorial information.

==

doc/source/reference/arrays.datetime.rst
==================
a5391a3;Steve R. Hastings;2011-07-15 17:27:56 -0500;ENH: datetime: Allow whitespace in weekday mask.
Add code to allow white space in a weekday mask:

"Sun Mon Tue"

Also add additional test cases to the unit tests.

==

numpy/core/src/multiarray/datetime_busdaycal.c
numpy/core/tests/test_datetime.py
==================
5590809;Mark Wiebe;2011-07-19 13:59:06 -0500;ENH: core: Add access macros back in conditionally, for backwards compatibilities
Sticking with inline functions when NPY_NO_DEPRECATED_API is defined.

==

numpy/core/include/numpy/ndarraytypes.h
==================
dcc355a;Mark Wiebe;2011-07-19 12:56:53 -0500;BUG: mmap: Make the memmap subclass rely on the Python mmap's destructor being correct
There was some fishy code flushing and closing the _mmap property,
which looked as if it was paranoid in not trusting mmap.mmap to
behave properly. This was done in a way which assumed the .base
attribute isn't collapsed, something which I've changed in the refactoring.

The easiest way to fix this is to trust mmap.mmap - if this is incorrect,
the specific platform on which this fails should have been already
documented in the comments!

==

numpy/core/memmap.py
numpy/core/tests/test_memmap.py
==================
57aa914;Mark Wiebe;2011-07-19 12:15:38 -0500;BUG: core: Needed to initialize 'obj' to NULL for Py_XDECREF_ERR in fail section

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/multiarray/item_selection.c
==================
405fc9e;Mark Wiebe;2011-07-19 12:04:33 -0500;TST: rec: DType in join_by test was inconsistent

==

numpy/lib/tests/test_recfunctions.py
==================
5771857;Mark Wiebe;2011-07-19 11:39:46 -0500;BUG: core: PyArray_GetArrayParamsFromObject was treating __array_interface__ incorrectly
I'm not sure why this came up after the arrayobject field access
changes, since it looks like the bug was in there before already.

==

numpy/core/src/multiarray/ctors.c
==================
f8ff0e3;Mark Wiebe;2011-07-18 18:48:44 -0500;BUG: dtype: comma-list dtype formats didn't accept M8[] parameterized dtypes

==

numpy/core/_internal.py
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/item_selection.c
numpy/core/tests/test_dtype.py
==================
c9f0f29;Mark Wiebe;2011-07-18 18:08:57 -0500;ENH: core: Fix more test failures post-field access deprecation

==

numpy/core/src/multiarray/calculation.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/nditer_constr.c
numpy/core/tests/test_einsum.py
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_ufunc.py
==================
0a7156f;Mark Wiebe;2011-07-18 16:09:33 -0500;ENH: core: Got the tests running after the ArrayObject field access deprecation

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/ctors.h
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/sequence.c
numpy/core/src/multiarray/shape.c
==================
57d6b5b;Mark Wiebe;2011-07-18 12:47:39 -0500;ENH: core: More cleanups removing direct PyArrayObject field access

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/multiarray_tests.c.src
numpy/core/src/multiarray/nditer_pywrap.c
numpy/core/src/npysort/sort.c.src
numpy/core/src/umath/ufunc_object.c
numpy/lib/src/_compiled_base.c
numpy/numarray/_capi.c
numpy/numarray/include/numpy/nummacro.h
==================
db90bf5;Mark Wiebe;2011-07-18 12:02:27 -0500;WRN: nditer: remove some warnings

==

numpy/core/src/multiarray/nditer_pywrap.c
==================
09debad;Mark Wiebe;2011-07-16 16:44:57 -0500;ENH: core: Get it fully building without direct field access

==

numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/nditer_pywrap.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/umath/ufunc_object.c
==================
67c1098;Mark Wiebe;2011-07-16 15:58:46 -0500;ENH: core: more progress removing direct ArrayObject field access

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/calculation.c
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/flagsobject.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/nditer_api.c
numpy/core/src/multiarray/nditer_constr.c
numpy/core/src/multiarray/number.c
numpy/core/src/multiarray/scalarapi.c
numpy/core/src/private/lowlevel_strided_loops.h
==================
d88bfeb;Mark Wiebe;2011-07-16 12:58:50 -0500;ENH: core: More cleanup towards deprecating direct arrayobject field access

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/buffer.c
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/datetime_busdaycal.c
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/refcount.c
numpy/core/src/multiarray/sequence.c
numpy/core/src/multiarray/shape.c
==================
bff2e51;Mark Wiebe;2011-07-15 16:30:39 -0500;ENH: core: Some fixes, change some tests to not use yield

==

numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/flagsobject.c
numpy/lib/tests/test_stride_tricks.py
==================
2bb06a5;Mark Wiebe;2011-07-15 01:35:39 -0500;ENH: core: Progress getting NumPy building without direct field access

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/include/numpy/npy_deprecated_api.h
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/multiarray_tests.c.src
numpy/core/src/multiarray/nditer_api.c
numpy/core/src/multiarray/shape.c
numpy/core/src/umath/ufunc_object.c
numpy/numarray/_capi.c
==================
4dce9c0;Mark Wiebe;2011-07-13 15:28:00 -0500;ENH: core: More progress refactoring code to not use PyArrayObject fields directly

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/multiarray/calculation.c
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/conversion_utils.c
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/einsum.c.src
numpy/core/src/multiarray/flagsobject.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/number.c
numpy/core/src/multiarray/scalarapi.c
==================
c135371;Mark Wiebe;2011-07-13 12:30:30 -0500;ENH: core: Work in progress making things work without direct field access

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/nditer_constr.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/multiarray/shape.c
==================
b7cc20a;Mark Wiebe;2011-07-12 18:14:33 -0500;ENH: core: Deprecating direct access to the PyArrayObject fields
NOTE: WIP, code doesn't build

==

doc/neps/missing-data.rst
numpy/core/code_generators/generate_numpy_api.py
numpy/core/code_generators/numpy_api.py
numpy/core/include/numpy/ndarraytypes.h
numpy/core/include/numpy/npy_deprecated_api.h
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/item_selection.c
==================
c625ee0;Mark Wiebe;2011-07-12 14:36:14 -0500;NEP: missingdata: Rename 'namask' to 'maskna', which looks better

==

doc/neps/missing-data.rst
==================
84ee545;Mark Wiebe;2011-07-11 14:44:24 -0500;ENH: core: Improve casting failure message produced by PyArray_FromArray

==

numpy/core/src/multiarray/ctors.c
==================
c649139;Lars Buitinck;2011-07-19 15:40:33 +0200;Regression test for missing dtype and order args in asarray_chkfinite

==

numpy/lib/tests/test_function_base.py
==================
a468b2e;Lars Buitinck;2011-07-19 11:16:29 +0200;BUG: fix asarray_chkfinite to take dtype and order args, as advertised
Includes a doctest for dtype.

==

numpy/lib/function_base.py
==================
64fce7c;Charles Harris;2011-07-15 14:01:36 -0600;ENH: Add some tests for polynomial printing.

==

numpy/polynomial/tests/test_printing.py
==================
cdfe3b5;Charles Harris;2011-07-15 14:00:35 -0600;BUG: Fix regression in printing polynomials.

==

numpy/polynomial/polytemplate.py
==================
1451b41;Pauli Virtanen;2011-07-15 22:25:08 +0200;DOC: fix build issues (with latex or newest sphinx)

==

doc/source/_static/scipy.css
doc/source/glossary.rst
doc/source/reference/arrays.datetime.rst
numpy/doc/glossary.py
==================
23b7244;Ralf Gommers;2011-07-15 09:08:06 +0200;BUG: defer numpy.distutils import in ctypeslib.
Numpy.distutils was imported together with numpy due to the change in commit
025c8c77; this is unwanted.

==

numpy/ctypeslib.py
==================
6fdfd9c;Ben Walsh;2011-07-12 14:52:01 +0100;TST: Added more tests for datetime array construction.

==

numpy/core/tests/test_datetime.py
==================
feb8079;Ben Walsh;2011-07-10 12:52:52 +0100;BUT: Stop _array_find_type trying to make every list element a subtype of bool.

==

numpy/core/src/multiarray/common.c
numpy/core/tests/test_datetime.py
==================
2ad4a71;Mark Wiebe;2011-07-11 13:57:43 -0500;DOC: core: Improve some documentation of internal functions

==

numpy/core/src/multiarray/lowlevel_strided_loops.c.src
numpy/core/src/private/lowlevel_strided_loops.h
==================
92ede9c;Charles Harris;2011-07-11 09:25:03 -0600;Merge branch 'pull-108'
* pull-108:
  STY: Put some spaces around '&'.
  DOC: core: Document the mask-based nditer flags and new inline mask functions
  ENH: core: Performance optimization in CopyInto, when both casting and broadcasting
  ENH: umath: Use masked iteration to allow buffered 'where=' output operands
  ENH: nditer: Add tests for writemasked iteration, also some small fixes
  STY: Rename test_iterator.py to test_nditer.py for consistency
  ENH: core: Add a typedef, macro, and inline functions for dealing with masks
  ENH: nditer: Finish implementation of masked iteration

==
==================
fb0f252;Charles Harris;2011-07-11 09:21:03 -0600;STY: Put some spaces around '&'.

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/nditer_api.c
==================
789d98f;Mark Wiebe;2011-07-10 14:45:28 -0500;DOC: core: Document the mask-based nditer flags and new inline mask functions

==

doc/source/reference/c-api.array.rst
doc/source/reference/c-api.dtype.rst
doc/source/reference/c-api.iterator.rst
==================
a99a194;Mark Wiebe;2011-07-10 11:45:53 -0500;ENH: core: Performance optimization in CopyInto, when both casting and broadcasting
When both casting and broadcasting are occurring, and the total size of
'src' is smaller than the default NumPy buffersize, this tells the iterator
to make a copy with the 'dst' dtype so most of the operations are simple
copies with no cast.

==

numpy/core/src/multiarray/ctors.c
numpy/core/tests/test_api.py
==================
0ce8c51;Mark Wiebe;2011-07-10 11:10:13 -0500;ENH: umath: Use masked iteration to allow buffered 'where=' output operands

==

numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_ufunc.py
==================
d3172da;Mark Wiebe;2011-07-10 10:54:25 -0500;ENH: nditer: Add tests for writemasked iteration, also some small fixes

==

numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/nditer_api.c
numpy/core/src/multiarray/nditer_constr.c
numpy/core/tests/test_nditer.py
==================
62d5414;Mark Wiebe;2011-07-10 09:48:40 -0500;STY: Rename test_iterator.py to test_nditer.py for consistency

==

numpy/core/tests/test_iterator.py
numpy/core/tests/test_nditer.py
==================
7afa5d8;Mark Wiebe;2011-07-10 09:43:28 -0500;ENH: core: Add a typedef, macro, and inline functions for dealing with masks
This was suggested by Eric and Nathaniel on the mailing list.

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/private/lowlevel_strided_loops.h
numpy/core/src/umath/ufunc_type_resolution.c
==================
ad6d8f2;Mark Wiebe;2011-07-09 23:48:55 -0500;ENH: nditer: Finish implementation of masked iteration
This still needs tests, I've only validated that it doesn't break
anything already in the tests.

==

numpy/core/src/multiarray/lowlevel_strided_loops.c.src
numpy/core/src/multiarray/nditer_api.c
numpy/core/src/multiarray/nditer_constr.c
numpy/core/src/private/lowlevel_strided_loops.h
==================
b5cdaee;Charles Harris;2011-07-09 10:57:39 -0600;ENH: Fix some functions to use copyto instead of the deprecated putmask.

==

numpy/lib/function_base.py
numpy/ma/core.py
==================
f35015c;Charles Harris;2011-07-09 10:57:21 -0600;STY: Put some spaces in.

==

numpy/core/tests/test_multiarray.py
==================
98d0c8f;Charles Harris;2011-07-09 09:25:53 -0600;Merge branch 'pull-105'
* pull-105:
  STY: Put spaces around the '&' and '|' operators.
  STY: Fix 'copy' 'copyto' typo and remove some trailing whitespace.
  ENH: Use np.copyto instead of np.fill in some places
  ENH: core: Add np.copyto, PyArray_MaskedMoveInto, PyArray_MaskedCopyInto
  ENH: core: Add support for masked strided transfer functions
  NEP: missingdata: Add a small note about single NA vs multi-NA
  NEP: missingdata: Describe a possible way multi-NA could be added in the future
  NEP: missingdata: Change the mask definition
  STY: Some small stylistic changes
  ENH: nditer: Add the basic checking and input of the MASK-related flags
  NEP: missingdata: Design the mask binary format so it's extensible with a payload
  DEP: core: Move 'fortran' macro into the deprecated header
  ENH: nditer: Add the per-operand masked iteration flags
  WRN: Get rid of some of the deprecation warnings about 'O4'
  DEP: core: Move NPY_AO into the deprecated API header

==
==================
a26bb0d;Charles Harris;2011-07-09 09:24:45 -0600;STY: Put spaces around the '&' and '|' operators.

==

numpy/core/src/multiarray/nditer_constr.c
==================
ff80343;Charles Harris;2011-07-09 08:45:54 -0600;STY: Fix 'copy' 'copyto' typo and remove some trailing whitespace.

==

numpy/add_newdocs.py
numpy/core/src/multiarray/ctors.c
==================
9788626;Skipper Seabold;2011-06-29 22:19:52 -0400;BUG: Fixed bugs in join_by and added tests

==

numpy/lib/recfunctions.py
numpy/lib/tests/test_recfunctions.py
==================
76f9e50;Mark Wiebe;2011-07-08 18:11:24 -0500;ENH: Use np.copyto instead of np.fill in some places
This should allow one to create struct dtype arrays with np.ones
and np.zeros_like.

==

numpy/add_newdocs.py
numpy/core/numeric.py
==================
75a2c03;Mark Wiebe;2011-07-08 17:47:21 -0500;ENH: core: Add np.copyto, PyArray_MaskedMoveInto, PyArray_MaskedCopyInto
These functions expose masked copying routines, with and without
handling of overlapping data. Also deprecated the np.putmask and
PyArray_PutMask functions, because np.copyto supercedes their
functionality. This will need to be discussed on the list during
the pull request review.

==

doc/source/reference/c-api.array.rst
doc/source/reference/routines.array-manipulation.rst
numpy/add_newdocs.py
numpy/core/code_generators/numpy_api.py
numpy/core/numeric.py
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/umath/ufunc_type_resolution.c
numpy/core/tests/test_api.py
==================
5f03b15;Mark Wiebe;2011-07-08 11:51:41 -0500;ENH: core: Add support for masked strided transfer functions
This implementation has no optimization whatsoever in it yet,
it just wraps the unmasked strided transfer functions. It also
does not handle struct masks yet.

==

numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/nditer_constr.c
numpy/core/src/private/lowlevel_strided_loops.h
numpy/core/src/umath/ufunc_type_resolution.c
==================
9910b0d;Mark Wiebe;2011-07-08 10:23:28 -0500;NEP: missingdata: Add a small note about single NA vs multi-NA

==

doc/neps/missing-data.rst
==================
7561f85;Mark Wiebe;2011-07-08 09:55:23 -0500;NEP: missingdata: Describe a possible way multi-NA could be added in the future

==

doc/neps/missing-data.rst
==================
233453a;Mark Wiebe;2011-07-08 09:27:39 -0500;NEP: missingdata: Change the mask definition
This change allows npy_bool to be a mask which always has payload
zero. This doesn't let combining masks with payloads to be a simple
'min' operation as the previous design, but allowing npy_bool as
the mask appears to be a very worthwhile tradeoff.

==

doc/neps/missing-data.rst
==================
cf8c0a0;Mark Wiebe;2011-07-07 17:56:29 -0500;STY: Some small stylistic changes

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/nditer_constr.c
==================
8f2ca28;Mark Wiebe;2011-07-07 17:09:29 -0500;ENH: nditer: Add the basic checking and input of the MASK-related flags

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/nditer_api.c
numpy/core/src/multiarray/nditer_constr.c
numpy/core/src/multiarray/nditer_impl.h
numpy/core/src/multiarray/nditer_pywrap.c
==================
e8b6065;Mark Wiebe;2011-07-07 17:08:28 -0500;NEP: missingdata: Design the mask binary format so it's extensible with a payload

==

doc/neps/missing-data.rst
==================
b1de8aa;Mark Wiebe;2011-07-07 15:44:41 -0500;DEP: core: Move 'fortran' macro into the deprecated header
This was presumably there so that variables could be called 'fortran'
without choking up an obscure unmentioned compiler. I've also gone
through and renamed any variables from 'fortran' to something else.

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/include/numpy/ndarraytypes.h
numpy/core/include/numpy/npy_deprecated_api.h
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/nditer_constr.c
numpy/core/src/multiarray/shape.c
==================
b414305;Mark Wiebe;2011-07-07 15:16:37 -0500;ENH: nditer: Add the per-operand masked iteration flags

==

doc/neps/missing-data.rst
numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/nditer_api.c
numpy/core/src/multiarray/nditer_constr.c
numpy/core/src/multiarray/nditer_impl.h
numpy/core/src/multiarray/nditer_pywrap.c
==================
cd92423;Mark Wiebe;2011-07-07 14:36:10 -0500;WRN: Get rid of some of the deprecation warnings about 'O4'

==

numpy/lib/tests/test_format.py
==================
5817570;Mark Wiebe;2011-07-07 14:25:52 -0500;DEP: core: Move NPY_AO into the deprecated API header
This kind of shortcut is inappropriate for the default public API.

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/include/numpy/npy_deprecated_api.h
numpy/core/src/multiarray/calculation.c
numpy/core/src/multiarray/scalartypes.c.src
==================
834b5bf;Charles Harris;2011-07-07 18:27:33 -0600;BUG: Fix onefile compilation of multiarraymodule_onefile. Thanks to Dirk Ullrich for the report and fix.

==

numpy/core/src/multiarray/multiarraymodule_onefile.c
==================
1b2ca74;Charles Harris;2011-07-07 12:07:06 -0600;STY: Cleanup trailing whitespace.

==

numpy/core/SConscript
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/datetime_busdaycal.c
numpy/core/src/multiarray/datetime_strings.c
numpy/core/src/multiarray/dtype_transfer.c
==================
c5c1a48;Mark Wiebe;2011-07-07 12:32:41 -0500;ENH: nditer: Rename nditer.c.src to indicate it has just the templated bits

==

numpy/core/SConscript
numpy/core/code_generators/genapi.py
numpy/core/setup.py
numpy/core/src/multiarray/nditer.c.src
numpy/core/src/multiarray/nditer_templ.c.src
==================
62a5ce1;Mark Wiebe;2011-07-07 12:28:00 -0500;ENH: nditer: Move the non-templated API into its own file

==

numpy/core/SConscript
numpy/core/code_generators/genapi.py
numpy/core/setup.py
numpy/core/src/multiarray/nditer.c.src
numpy/core/src/multiarray/nditer_api.c
numpy/core/src/multiarray/nditer_constr.c
==================
36f4bdf;Mark Wiebe;2011-07-07 12:04:53 -0500;ENH: nditer: Move construction/copy/destruction to its own implementation file

==

numpy/core/SConscript
numpy/core/code_generators/genapi.py
numpy/core/setup.py
numpy/core/src/multiarray/nditer.c.src
numpy/core/src/multiarray/nditer_constr.c
numpy/core/src/multiarray/nditer_impl.h
==================
e124ac5;Mark Wiebe;2011-07-07 12:04:28 -0500;NEP: missingdata: Adjust the parenthetical part of the NA/IGNORE defn

==

doc/neps/missing-data.rst
==================
98dfd7b;Mark Wiebe;2011-07-07 11:20:08 -0500;BUG: core: Missed a use of NPY_WRITEABLE in Py3 code when cleaning API

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/getset.c
==================
17d056e;Mark Wiebe;2011-07-07 10:47:11 -0500;NEP: missingdata: Add copyright info, some more NAMASK iterator clarification

==

doc/neps/missing-data.rst
==================
0d81192;Mark Wiebe;2011-07-06 19:13:24 -0500;NEP: missingdata: Add more C API details

==

doc/neps/missing-data.rst
==================
28a2955;Mark Wiebe;2011-07-06 18:45:32 -0500;NEP: missingdata: Start some details about masked iteration

==

doc/neps/missing-data.rst
==================
ddbe1d5;Charles Harris;2011-07-06 16:28:34 -0600;Merge branch 'pull-99'
* pull-99: (24 commits)
  TST: ufunc: Disable where= buffering test temporarily
  DOC: c-api: Update to reflect array flag namespace change
  NEP: missing-data: Add Peter to the Acknowledgments
  NEP: missing-data: Add "Python API" and "C API" definitions
  NEP: missing-data: Add numpy.ma to the glossary
  NEP: missing-data: Add glossary of terms, try to clarify them better
  NEP: missing-data: Fix copy/paste/edit typo for np.all example
  NEP: missing-data: Incorporate Ben's feedback, add section on 'shared masks'
  TST: umath: Add tests for casting output parameters
  ENH: core: Deprecate some bad namespace-polluting macros
  NEP: missingdata: Rename 'hasmask' and friends to 'hasnamask' and friends
  NEP: missing-data: Add name to acknowledgments
  NEP: missingdata: Various improvements
  TST: ma: Feedback from Derek about Python 3 failures in ma tests
  NEP: Trying to make the NEP's position on missing values and masks vs bit patterns more clear
  DOC: Document the ufunc 'where=' parameter and the NpyAuxData C API mechanism
  ENH: umath: Add tests, work out kinks in ufunc 'where=' parameter
  ENH: umath: Write the function to call the masked inner loop
  ENH: umath: Add parsing of a 'where=' parameter in the element-wise ufunc
  ENH: umath: Implement the default type resolution for masked loops
  ...

==
==================
4703dd0;Mark Wiebe;2011-07-06 17:04:10 -0500;TST: ufunc: Disable where= buffering test temporarily
Will reenable it once masking iteration features are done.

==

numpy/core/tests/test_ufunc.py
==================
bcdc5b5;Mark Wiebe;2011-07-06 17:00:13 -0500;DOC: c-api: Update to reflect array flag namespace change

==

doc/source/reference/c-api.array.rst
doc/source/reference/c-api.types-and-structures.rst
doc/source/reference/internals.code-explanations.rst
doc/source/user/c-info.how-to-extend.rst
==================
ce78b81;Mark Wiebe;2011-07-06 14:37:05 -0500;NEP: missing-data: Add Peter to the Acknowledgments

==

doc/neps/missing-data.rst
==================
43b83d6;Mark Wiebe;2011-07-06 13:35:36 -0500;NEP: missing-data: Add "Python API" and "C API" definitions

==

doc/neps/missing-data.rst
==================
e76ddf9;Mark Wiebe;2011-07-06 10:28:57 -0500;NEP: missing-data: Add numpy.ma to the glossary

==

doc/neps/missing-data.rst
==================
a9be5a1;Mark Wiebe;2011-07-06 10:16:08 -0500;NEP: missing-data: Add glossary of terms, try to clarify them better
This is a step towards having everyone on the list use the same
vocabulary with specific nailed-down definitions for the terms.

==

doc/neps/missing-data.rst
==================
f2f7bd6;Mark Wiebe;2011-07-05 12:25:50 -0500;NEP: missing-data: Fix copy/paste/edit typo for np.all example

==

doc/neps/missing-data.rst
==================
bc0a862;Mark Wiebe;2011-07-05 12:04:12 -0500;NEP: missing-data: Incorporate Ben's feedback, add section on 'shared masks'
This includes an email comment from Ben about 'np.any' and 'np.all'.

==

doc/neps/missing-data.rst
==================
ced013e;Mark Wiebe;2011-07-01 19:05:09 -0500;TST: umath: Add tests for casting output parameters

==

numpy/core/tests/test_ufunc.py
==================
8b506a2;Mark Wiebe;2011-06-30 17:39:52 -0500;ENH: core: Deprecate some bad namespace-polluting macros
This one handles PyArray_DEFAULT -> NPY_DEFAULT_TYPE and
the NPY_* array flags -> NPY_ARRAY_*. The PyArray_DEFAULT vs NPY_DEFAULT
confusion was particularly egregious here.

==

numpy/core/src/umath/ufunc_type_resolution.c
==================
423b1e4;Mark Wiebe;2011-06-30 15:27:50 -0500;NEP: missingdata: Rename 'hasmask' and friends to 'hasnamask' and friends
This is an attempt to reduce potential confusion between the existing
numpy.ma and the NA-supporting built-in mask.

==

doc/neps/missing-data.rst
==================
396ee78;Mark Wiebe;2011-06-30 11:15:46 -0500;NEP: missing-data: Add name to acknowledgments

==

doc/neps/missing-data.rst
==================
6a6f8f5;Mark Wiebe;2011-06-29 18:17:54 -0500;NEP: missingdata: Various improvements

==

doc/neps/missing-data.rst
==================
3d9db9b;Mark Wiebe;2011-06-29 18:07:27 -0500;TST: ma: Feedback from Derek about Python 3 failures in ma tests

==

numpy/ma/tests/test_core.py
numpy/ma/tests/test_old_ma.py
==================
5fdb6ba;Mark Wiebe;2011-06-29 16:35:25 -0500;NEP: Trying to make the NEP's position on missing values and masks vs bit patterns more clear

==

doc/neps/missing-data.rst
==================
b48c7c1;Mark Wiebe;2011-06-29 11:54:48 -0500;DOC: Document the ufunc 'where=' parameter and the NpyAuxData C API mechanism

==

doc/source/reference/c-api.array.rst
doc/source/reference/ufuncs.rst
==================
f308fcb;Mark Wiebe;2011-06-29 11:13:41 -0500;ENH: umath: Add tests, work out kinks in ufunc 'where=' parameter

==

doc/neps/missing-data.rst
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_ufunc.py
==================
d9aaf6f;Mark Wiebe;2011-06-28 17:49:32 -0500;ENH: umath: Write the function to call the masked inner loop

==

numpy/core/include/numpy/ufuncobject.h
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/ufunc_type_resolution.c
==================
bbec4c4;Mark Wiebe;2011-06-28 17:10:53 -0500;ENH: umath: Add parsing of a 'where=' parameter in the element-wise ufunc

==

doc/neps/missing-data.rst
numpy/core/src/umath/ufunc_object.c
==================
e4b2e4b;Mark Wiebe;2011-06-28 09:45:54 -0500;ENH: umath: Implement the default type resolution for masked loops
This function returns a loop which calls the unmasked loop on runs
of unmasked data.

==

numpy/core/code_generators/numpy_api.py
numpy/core/include/numpy/ufuncobject.h
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/ufunc_type_resolution.c
==================
b2ac4ad;Mark Wiebe;2011-06-27 17:59:34 -0500;ENH: umath: Move the type resolution functions into their own file

==

numpy/core/SConscript
numpy/core/code_generators/genapi.py
numpy/core/setup.py
numpy/core/src/umath/loops.c.src
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/ufunc_object.h
numpy/core/src/umath/ufunc_type_resolution.c
numpy/core/src/umath/ufunc_type_resolution.h
numpy/core/src/umath/umathmodule.c.src
numpy/core/src/umath/umathmodule_onefile.c
==================
e720993;Mark Wiebe;2011-06-27 16:16:02 -0500;ENH: missingdata: Move getting the masked ufunc inner loop to a different function
This is so that backwards compatibility can be retained with denying
regular ufuncs from supporting dynamic auxiliary data, but allowing
it for the masked inner loops so that the default masked loop can store the
regular inner loop it proxies calls to.

==

doc/neps/missing-data.rst
numpy/core/include/numpy/ufuncobject.h
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/ufunc_object.h
numpy/core/src/umath/umathmodule.c.src
==================
30d59c1;Mark Wiebe;2011-06-27 15:34:48 -0500;ENH: core: Create a new NpyAuxData mechanism for working with inner loop auxiliary data
There already was such a mechanism in the low level copying and casting
mechanism created for the iterator, so this mechanism has been refactored
into a form suitable for general purpose use.

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/lowlevel_strided_loops.c.src
numpy/core/src/multiarray/nditer.c.src
numpy/core/src/private/lowlevel_strided_loops.h
==================
59cdc32;Mark Wiebe;2011-06-27 13:13:57 -0500;ENH: missingdata: Add a mechanism to get masked versions of ufunc inner loops

==

doc/neps/missing-data.rst
numpy/core/include/numpy/ufuncobject.h
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/ufunc_object.h
numpy/core/src/umath/umathmodule.c.src
==================
a842575;Charles Harris;2011-07-06 09:04:11 -0600;ENH: Disallow deprecated macros in more files.

==

numpy/core/src/dummymodule.c
numpy/core/src/npymath/halffloat.c
numpy/core/src/npysort/sort.c.src
==================
bc51f3b;Mark Wiebe;2011-07-01 19:05:44 -0500;ENH: core: Make scalar math module leave out the deprecated header

==

numpy/core/src/scalarmathmodule.c.src
==================
b00beab;Mark Wiebe;2011-06-30 17:39:52 -0500;ENH: core: Deprecate some bad namespace-polluting macros
This one handles PyArray_DEFAULT -> NPY_DEFAULT_TYPE and
the NPY_* array flags -> NPY_ARRAY_*. The PyArray_DEFAULT vs NPY_DEFAULT
confusion was particularly egregious here.

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/include/numpy/ndarraytypes.h
numpy/core/include/numpy/npy_deprecated_api.h
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/buffer.c
numpy/core/src/multiarray/calculation.c
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/conversion_utils.c
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/datetime_busday.c
numpy/core/src/multiarray/datetime_busdaycal.c
numpy/core/src/multiarray/datetime_strings.c
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/einsum.c.src
numpy/core/src/multiarray/flagsobject.c
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/hashdescr.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/lowlevel_strided_loops.c.src
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/nditer.c.src
numpy/core/src/multiarray/nditer_pywrap.c
numpy/core/src/multiarray/number.c
numpy/core/src/multiarray/numpymemoryview.c
numpy/core/src/multiarray/numpyos.c
numpy/core/src/multiarray/refcount.c
numpy/core/src/multiarray/scalarapi.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/multiarray/sequence.c
numpy/core/src/multiarray/shape.c
numpy/core/src/multiarray/ucsnarrow.c
numpy/core/src/multiarray/usertypes.c
numpy/core/src/private/lowlevel_strided_loops.h
numpy/core/src/umath/loops.c.src
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/umathmodule.c.src
==================
d0160c6;Mark Wiebe;2011-06-30 15:22:59 -0500;ENH: core: Create a header in which to move deprecated API

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/include/numpy/npy_deprecated_api.h
==================
8e94868;Mark Wiebe;2011-07-06 15:29:15 -0500;BUG: iter: writeonly operands weren't always being buffered correctly (Ticket #1895/1896)
This interacted with the NPY_ITER_GROWINNER flag which would incorrectly
grow the length because it thought nothing was being buffered.

==

numpy/core/src/multiarray/nditer.c.src
numpy/core/tests/test_ufunc.py
==================
5e4a407;Ralf Gommers;2011-06-22 23:09:16 +0200;BUG:py3k: fix error with recarry. Patch by C. Gohlke. Closes #1843.

==

numpy/compat/py3k.py
numpy/core/tests/test_records.py
==================
494cc99;Mark Wiebe;2011-07-01 09:29:00 -0500;DOC: datetime: Split the date/time units into two separate tables

==

doc/source/reference/arrays.datetime.rst
==================
6cf29e5;Mark Wiebe;2011-06-30 18:03:15 -0500;DOC: datetime: Updates based on Chuck's feedback

==

doc/source/reference/arrays.datetime.rst
==================
401d048;Mark Wiebe;2011-06-30 11:06:55 -0500;DOC: datetime: Start a draft of introductory datetime documentation

==

doc/source/reference/arrays.datetime.rst
doc/source/reference/arrays.rst
==================
e3a8bce;Mark Wiebe;2011-06-29 18:36:12 -0500;ENH: datetime: Remove np.datetime_ so autocomplete will find np.datetime64
This is from user feedback, indicating that always having to type the
'6' was very annoying. Unfortunately, there are still the functions
datetime_as_date and datetime_data which prevent the autocomplete from
working right.

==

numpy/core/numerictypes.py
numpy/core/tests/test_regression.py
==================
861e227;Pauli Virtanen;2011-06-29 23:00:07 +0200;DOC: adjust html css, and stub file generation

==

doc/source/_static/scipy.css
doc/source/_templates/autosummary/class.rst
==================
192ac74;Mark Wiebe;2011-06-28 22:40:06 -0500;BUG: nditer: Error in detecting double reduction loop (Fixes #1885)
This bug was in the double reduction loop optimization used during
buffering, and was triggered by the bug report example because it
reduced everything to a single value.

==

numpy/core/src/multiarray/nditer.c.src
numpy/core/tests/test_einsum.py
numpy/core/tests/test_iterator.py
==================
78ff5e0;Mark;2011-06-27 11:36:13 -0700;Merge pull request #98 from kwgoodman/master
A few typos in the missing data NEP
==
==================
a97de6a;Keith Goodman;2011-06-27 11:21:43 -0700;DOC: A few typos in the missing data NEP.

==

doc/neps/missing-data.rst
==================
5becc38;Mark Wiebe;2011-06-27 10:09:49 -0500;NEP: missing-data: Rename the NEP as it now describes more generality than just masks

==

doc/neps/c-masked-array.rst
doc/neps/missing-data.rst
==================
b911992;Mark Wiebe;2011-06-27 10:08:31 -0500;NEP: c-masked-array: Add idea about np.NA __call__ method

==

doc/neps/c-masked-array.rst
==================
54a2431;Mark Wiebe;2011-06-26 18:02:29 -0500;NEP: c-masked-array: Add examples for missing value reductions

==

doc/neps/c-masked-array.rst
==================
0857948;Mark Wiebe;2011-06-26 16:47:32 -0500;NEP: c-masked-array: Lots of edits to reflect NA-based interface

==

doc/neps/c-masked-array.rst
==================
f61537d;Mark Wiebe;2011-06-25 16:13:17 -0500;NEP: c-masked-array: More tweaks

==

doc/neps/c-masked-array.rst
==================
08caab1;Mark Wiebe;2011-06-25 16:01:46 -0500;NEP: cmaskedarray: Some more tweaks

==

doc/neps/c-masked-array.rst
==================
5f41846;Mark Wiebe;2011-06-25 15:52:46 -0500;NEP: c-masked-array: Add example to clarify some masking semantics

==

doc/neps/c-masked-array.rst
==================
8d74430;Mark Wiebe;2011-06-25 15:45:48 -0500;NEP: c-masked-array: Typo feedback from WeatherGod

==

doc/neps/c-masked-array.rst
==================
95bb76a;Mark Wiebe;2011-06-25 13:37:58 -0500;NEP: c-masked-array: Idea for a parameterized dtype with an NA bit pattern

==

doc/neps/c-masked-array.rst
==================
63c9d87;Mark Wiebe;2011-06-24 19:13:30 -0500;NEP: c-masked-array: Add a global np.NA singleton, many more changes

==

doc/neps/c-masked-array.rst
==================
ff71c88;Mark Wiebe;2011-06-23 19:15:22 -0500;NEP: c-masked-array: Refining and adding things based on feedback

==

doc/neps/c-masked-array.rst
==================
0a858a6;Mark Wiebe;2011-06-23 15:38:25 -0500;NEP: c-masked-array: Some small improvements and clarifications

==

doc/neps/c-masked-array.rst
==================
b52abe1;Mark Wiebe;2011-06-23 14:49:37 -0500;NEP: c-masked-array: Add section about ufuncs

==

doc/neps/c-masked-array.rst
==================
9ec5557;Mark Wiebe;2011-06-23 12:54:52 -0500;NEP: Design document for adding a mask to the core ndarray

==

doc/neps/c-masked-array.rst
==================
79a1db5;Pauli Virtanen;2011-06-25 21:05:35 +0200;DOC: list routines for dealing with raw binary files

==

doc/source/reference/routines.io.rst
==================
c6dfbde;Pauli Virtanen;2011-06-25 18:52:32 +0200;DOC: minor documentation fixes

==

numpy/add_newdocs.py
numpy/linalg/linalg.py
numpy/matrixlib/defmatrix.py
==================
7a57dc1;Pauli Virtanen;2011-06-25 18:23:22 +0200;sphinxext: expose __call__ in the documentation, if it is present

==

doc/sphinxext/docscrape.py
==================
9a287ba;rgommers;2011-06-19 11:49:13 +0200;BUG: deal with shared lib extension in a single place. Fix ctypes.load_library.
This is related to PEP 3149, tags in shared library extensions.  Only applies
to Linux (for now).  See also #1749.

==

numpy/ctypeslib.py
numpy/distutils/fcompiler/__init__.py
numpy/distutils/misc_util.py
numpy/distutils/system_info.py
numpy/tests/test_ctypeslib.py
==================
8d451bc;Mark Wiebe;2011-06-23 10:28:46 -0500;Merge branch 'struct_cleanup'

==
==================
ddf8d42;Mark Wiebe;2011-06-23 10:25:45 -0500;ENH: dtype-struct: Tweaks based on Chucks feedback
Now the dict repr mode for struct dtypes always includes the itemsize=
parameter, so that it will always produce the exact same memory layout.

==

numpy/core/src/multiarray/descriptor.c
numpy/core/tests/test_dtype.py
==================
2e9e8aa;Mark Wiebe;2011-06-23 09:05:53 -0500;Merge branch 'tighten_casting'

==
==================
8b29cac;Mark Wiebe;2011-06-22 16:05:26 -0500;BUG: datetime-print: str() and repr() weren't handling the local tz properly

==

numpy/core/arrayprint.py
numpy/core/tests/test_datetime.py
==================
b233379;Mark Wiebe;2011-06-22 12:11:36 -0500;DOC: dtype-struct: Document the changes to struct dtypes

==

doc/source/reference/arrays.dtypes.rst
numpy/add_newdocs.py
numpy/core/src/multiarray/descriptor.c
==================
5382d24;Mark Wiebe;2011-06-22 11:29:03 -0500;ENH: dtype-struct: Some tweaks based on Chuck's feedback

==

numpy/core/src/multiarray/descriptor.c
==================
1827b68;Mark Wiebe;2011-06-22 11:17:56 -0500;ENH: dtype-struct: Move the 'itemsize' from a parameter into the struct descriptor

==

numpy/core/src/multiarray/descriptor.c
numpy/core/tests/test_dtype.py
==================
7ab154b;Mark Wiebe;2011-06-22 10:42:22 -0500;ENH: dtype-struct: Ensure alignment of nested struct dtypes

==

numpy/core/_internal.py
numpy/core/tests/test_dtype.py
==================
5484bb6;Mark Wiebe;2011-06-22 10:16:17 -0500;ENH: dtype-struct: Add validation that object fields have no overlap

==

numpy/core/src/multiarray/descriptor.c
numpy/core/tests/test_dtype.py
==================
09f6a8c;Mark Wiebe;2011-06-22 09:20:42 -0500;TST: datetime: Fix the tests to respect the date unit/time unit boundary

==

numpy/core/tests/test_datetime.py
==================
a72132d;Mark Wiebe;2011-06-06 11:44:08 -0500;ENH: ma: Fix up ma and its tests to work with default same_kind casting

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
c149545;Mark Wiebe;2011-06-06 11:42:31 -0500;ENH: core: Change the ones_like ufunc so it doesn't do type checking
Since ones_like is a ufunc (unlike zeros_like and empty_like), it by
default checks the casting rule. This disables that check completely.

==

numpy/core/code_generators/generate_umath.py
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/ufunc_object.h
==================
bd85dff;Mark Wiebe;2011-06-03 18:57:35 -0500;BUG: core: Make slow clip use casting='unsafe' for compatibility

==

numpy/core/src/multiarray/calculation.c
==================
eb6c051;Mark Wiebe;2011-06-03 18:30:10 -0500;ENH: core: Change the default casting rule from 'unsafe' to 'same_kind'
This is an experimental change, to see what kind of ripple effects
tightening up the semantics of NumPy just a little bit produce.

==

numpy/core/src/umath/ufunc_object.c
==================
d4ea04b;Mark Wiebe;2011-06-22 09:05:27 -0500;ENH: Merge branch 'datetime_dev'
Highlights:

* Tighten up date unit vs time unit casting rules,
  and integrate the NPY_CASTING enum deeper into the datetime conversions
* Determine a unit when converting from a string array,
  similar to when converting from lists of strings
* Switch local/utc handling to a timezone= parameter,
  which also accepts a datetime.tzinfo object. This, for
  example, enables the use of the pytz library with numpy.datetime64
* Remove the events metadata, make the old API functions raise
  exceptions, and rename the "frequency" metadata name to "timeunit"
* Abstract the flexible dtype mechanism into a function,
  so that it can be more easily changed without having to
  add code to many places

==
==================
81f156a;Mark Wiebe;2011-06-21 19:54:34 -0500;ENH: dtype: Allow unions and out-of-order fields
This will require validation that object dtypes don't overlap with
other fields in a follow-on commit.

==

numpy/core/src/multiarray/descriptor.c
numpy/core/tests/test_dtype.py
==================
f57f1ef;Mark Wiebe;2011-06-21 19:07:58 -0500;BUG: dtype: Struct dtype size wasn't being padded for alignment (Ticket #1790)
In the case referenced in ticket #1790, the itemsize was set before
the padded size was calculated, so the intent was clearly that it
should have been aligned.

==

numpy/core/src/multiarray/descriptor.c
numpy/core/tests/test_dtype.py
==================
6cc9613;Mark Wiebe;2011-06-21 18:26:33 -0500;ENH: dtype: Add an itemsize= keyword parameter to the dtype constructor
The 'struct'-based repr adds this parameter, as the general way to
be able to reconstruct the dtype.

==

numpy/core/src/multiarray/descriptor.c
numpy/core/tests/test_dtype.py
numpy/core/tests/test_regression.py
==================
e11a510;Mark Wiebe;2011-06-21 17:36:26 -0500;BUG: dtype: Fix up the list-based struct dtype string representation

==

numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/hashdescr.c
numpy/core/tests/test_regression.py
==================
935c5b0;Mark Wiebe;2011-06-21 17:02:53 -0500;ENH: dtype: Fix repr of structured dtypes (Fixes #1619)
This includes preserving the 'align=True' parameter through the
new NPY_ALIGNED_STRUCT dtype flag. The code now detects whether
the list version of structured dtype construction would match
the data layout, to choose between list and struct based construction.

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/descriptor.h
==================
adab903;Ralf Gommers;2011-06-21 21:46:49 +0200;TST: fix py3k failure for arrayprint. Closes #1875. Thanks to Derek Homeier.

==

numpy/core/tests/test_arrayprint.py
==================
70de35b;Mark Wiebe;2011-06-21 13:07:40 -0500;ENH: dtype: Use PyDataType_HASFIELDS, add a flag constant for aligned struct

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/scalarapi.c
numpy/core/src/multiarray/scalartypes.c.src
==================
7c1c7a8;Mark Wiebe;2011-06-21 10:06:40 -0500;ENH: datetime: Applying changes for Chuck and Derek's feedback

==

numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/datetime_strings.c
==================
d82752c;Pearu Peterson;2011-06-21 14:12:32 +0300;BUG[f2py]: fix --include_paths bug. Deprecated --include_paths in favor of --include-paths. Updated docs.

==

numpy/f2py/crackfortran.py
numpy/f2py/f2py2e.py
==================
db691b6;Charles Harris;2011-06-20 19:35:03 -0600;Merge branch 'sortlib'
* sortlib:
  STY: Delete commented out lines and add some comments.
  ENH: Generate the npysort library for linking during build, but do not install it.
  ENH: Make npy_sort.h private until the proper interface gets sorted out.
  ENH: Remove the _sort module.
  ENH: Directly initialize arraytypes with the sorting functions in the sort library.
  STY: Rename sort functions again, omit the npy_ bit from the suffix.
  ENH: Rename the sort functions using lower case suffix instead of upper case prefix. The name are now of the form <sortkind>_<npy_type>.
  ENH: Make scons build the npysort library.
  ENH: Move sorting functions into a library.
  STY: Move npy_intp definitions and associated formats into npy_common.h.
  STY: Reorganize core/setup.py a bit.
  ENH: Break out the sort functions into a separate file.
  ENH: Rename the sorting directory to npysort.
  ENH: Move comparison functions into an include file. Make include file for the future sorting library. Use prefixed numpy types.
  ENH: Rename _sortmodule.c.src and move it into a new sorting directory. Fix the build to deal with the new name and location.

==
==================
c60425a;Charles Harris;2011-06-20 19:32:08 -0600;STY: Delete commented out lines and add some comments.

==

numpy/core/setup.py
numpy/core/src/npysort/npysort_common.h
==================
675a20f;Derek Homeier;2011-06-18 00:14:57 +0200;BUG: on Apple platforms changed long long format from "%Ld" to "%lld"

==

numpy/core/include/numpy/npy_common.h
==================
46c91af;Mark Wiebe;2011-06-20 19:09:29 -0500;ENH: datetime-strings: Support casting to/from unicode arrays

==

numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/convert_datatype.h
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/nditer.c.src
numpy/core/tests/test_datetime.py
==================
9f99d86;Mark Wiebe;2011-06-20 16:45:56 -0500;ENH: dtype-loops: Move the dtype copy/swap function factory into a function

==

numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/lowlevel_strided_loops.c.src
numpy/core/src/private/lowlevel_strided_loops.h
numpy/core/src/umath/umathmodule.c.src
==================
253d886;Mark Wiebe;2011-06-20 15:55:44 -0500;BUG: datetime: Mac OS X doesn't support strnlen, working around that

==

numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/dtype_transfer.c
==================
008c931;Charles Harris;2011-06-18 13:22:06 -0600;ENH: Add the polynomial module to the documentation.
Also:
1. Note that the polynomial package is preferred over poly1d.

2. Remove deprecation of mapparms in __init__.py as it interferes with the
   documention of the method of the same name. This is probably safe as it
   is unlikely to be used yet.

3. Make some improvements to the documentation in polytemplate.

==

doc/source/reference/routines.poly.rst
doc/source/reference/routines.polynomials.poly1d.rst
doc/source/reference/routines.polynomials.polynomial.rst
doc/source/reference/routines.polynomials.rst
doc/source/reference/routines.rst
numpy/polynomial/__init__.py
numpy/polynomial/polytemplate.py
==================
e4d790f;Charles Harris;2011-06-19 19:26:32 -0600;ENH: Generate the npysort library for linking during build, but do not install it.

==

numpy/core/SConscript
numpy/core/npysort.ini.in
numpy/core/setup.py
==================
4e52c48;Mark Wiebe;2011-06-19 17:41:40 -0500;BUG: core: Fix corner case of object array assignment (#1870)
This general aspect of object arrays is fraught with errors, for
example, eval(repr(x)) produces a 2 instead of 1 dimensional array
when given the x in the first example of the bug. This fix at least
makes the result requested in the bug report work.

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/ctors.c
numpy/core/tests/test_regression.py
==================
bdb5ed8;Charles Harris;2011-06-17 19:30:09 -0600;ENH: Make npy_sort.h private until the proper interface gets sorted out.

==

numpy/core/include/numpy/npy_sort.h
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/npysort/sort.c.src
numpy/core/src/private/npy_sort.h
==================
9fa48ed;Mark Wiebe;2011-06-17 19:13:38 -0500;ENH: convert-dtype: Abstract the flexible dtype mechanism into a function
Since the datetime adds a new flexible dtype (datetime with generic units),
updating all the places where flexible dtypes are adjusted was error-prone.
Thus, this has been moved to a single place.

At the same time, I've added sizes for the various number types, so
they don't produce size-one strings by default anymore

==

numpy/core/arrayprint.py
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/convert_datatype.h
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/datetime_strings.c
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/nditer.c.src
numpy/core/tests/test_datetime.py
==================
e834cd4;Mark Wiebe;2011-06-17 17:40:57 -0500;ENH: datetime-meta: Rename the metadata from frequency to timeunit

==

numpy/core/include/numpy/ndarraytypes.h
==================
4d2ee35;Mark Wiebe;2011-06-17 15:31:09 -0500;DEP: datetime-api: Make the old API functions in datetime.c raise exceptions

==

numpy/core/src/multiarray/datetime.c
==================
2ea5255;Mark Wiebe;2011-06-17 13:15:37 -0500;ENH: datetime-casting: Add casting parameter to 'datetime_as_string'
The default is 'same_kind', which allows data loss, but prevents
crossing the date unit/time unit boundary. As a special case,
printing dates with a timezone specified requires 'unsafe' casting.

==

numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/datetime_strings.c
numpy/core/src/multiarray/datetime_strings.h
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/tests/test_datetime.py
==================
cb45456;Mark Wiebe;2011-06-17 11:46:12 -0500;ENH: datetime-meta: Remove 'events' from the datetime metadata
The events don't fit well within the datetime, causing many special
cases and complicating the datetime code. A better way to proceed,
which received approval from Travis with regard to the reason events
were introduced in the first place, is to do the following:

* Generalize the structured arrays so they work with ufuncs
* Either use NPY_UBYTE, or introduce a new integer modulo N type
* The structured dtype [('date', 'M8[D]'), ('event', 'u8')], then
  will operate identically to the design of events in datetime.

These other changes will have much use elsewhere as well.

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/datetime_busday.c
numpy/core/src/multiarray/datetime_strings.c
numpy/core/src/multiarray/datetime_strings.h
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/tests/test_datetime.py
==================
c15a807;Mark Wiebe;2011-06-17 10:52:23 -0500;ENH: datetime-casting: Add casting parameters to more conversion functions
Also clean up the tests to work with the stricter date unit vs time unit
boundary that has been added.

==

numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/datetime_strings.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/tests/test_datetime.py
==================
4c7f8df;Charles Harris;2011-06-16 19:57:29 -0600;ENH: Remove the _sort module.

==

numpy/core/SConscript
numpy/core/__init__.py
numpy/core/setup.py
numpy/core/src/npysort/npy_sort_common.h
numpy/core/src/npysort/npysort_common.h
numpy/core/src/npysort/sort.c.src
numpy/core/src/npysort/sortmodule.c.src
==================
165c087;Charles Harris;2011-06-16 19:39:34 -0600;ENH: Directly initialize arraytypes with the sorting functions in the sort library.

==

numpy/core/__init__.py
numpy/core/setup.py
numpy/core/src/multiarray/arraytypes.c.src
==================
1c3671c;Charles Harris;2011-06-16 18:59:40 -0600;STY: Rename sort functions again, omit the npy_ bit from the suffix.

==

numpy/core/include/numpy/npy_sort.h
numpy/core/src/npysort/sort.c.src
numpy/core/src/npysort/sortmodule.c.src
==================
7efe96f;Charles Harris;2011-06-14 22:33:58 -0600;ENH: Rename the sort functions using lower case suffix instead of upper case prefix. The name are now of the form <sortkind>_<npy_type>.

==

numpy/core/include/numpy/npy_common.h
numpy/core/include/numpy/npy_sort.h
numpy/core/src/npysort/sort.c.src
numpy/core/src/npysort/sortmodule.c.src
==================
16704fd;Charles Harris;2011-06-14 14:27:59 -0600;ENH: Make scons build the npysort library.

==

numpy/core/SConscript
==================
d1155a3;Charles Harris;2011-06-14 13:26:09 -0600;ENH: Move sorting functions into a library.

==

numpy/core/include/numpy/npy_sort.h
numpy/core/npysort.ini.in
numpy/core/setup.py
numpy/core/src/dummymodule.c
numpy/core/src/npysort/npy_sort_common.h
numpy/core/src/npysort/sort.c.src
numpy/core/src/npysort/sortmodule.c
numpy/core/src/npysort/sortmodule.c.src
==================
527bedd;Charles Harris;2011-06-12 22:39:56 -0600;STY: Move npy_intp definitions and associated formats into npy_common.h.

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/include/numpy/npy_common.h
numpy/core/include/numpy/npy_sort.h
numpy/core/setup.py
numpy/core/src/npysort/sortmodule.c
==================
39a420c;Charles Harris;2011-06-09 11:20:14 -0600;STY: Reorganize core/setup.py a bit.

==

numpy/core/setup.py
==================
8343f38;Charles Harris;2011-06-07 21:28:42 -0600;ENH: Break out the sort functions into a separate file.

==

numpy/core/SConscript
numpy/core/setup.py
numpy/core/src/npysort/sort.c.src
numpy/core/src/npysort/sortmodule.c
numpy/core/src/npysort/sortmodule.c.src
==================
aa6f11d;Charles Harris;2011-06-07 13:48:02 -0600;ENH: Rename the sorting directory to npysort.

==

numpy/core/SConscript
numpy/core/setup.py
numpy/core/src/npysort/npy_sort_common.h
numpy/core/src/npysort/sortmodule.c.src
numpy/core/src/sorting/npy_sort_common.h
numpy/core/src/sorting/sortmodule.c.src
==================
60054e3;Charles Harris;2011-06-05 23:03:17 -0600;ENH: Move comparison functions into an include file. Make include file for the future sorting library. Use prefixed numpy types.

==

numpy/core/include/numpy/npy_sort.h
numpy/core/setup.py
numpy/core/src/sorting/npy_sort_common.h
numpy/core/src/sorting/sortmodule.c.src
==================
f4ba3ed;Charles Harris;2011-06-04 12:06:24 -0600;ENH: Rename _sortmodule.c.src and move it into a new sorting directory. Fix the build to deal with the new name and location.

==

numpy/core/SConscript
numpy/core/setup.py
numpy/core/src/_sortmodule.c.src
numpy/core/src/sorting/sortmodule.c.src
==================
a212542;Mark Wiebe;2011-06-16 18:52:54 -0500;ENH: datetime-string: Add support for datetime.tzinfo in datetime_as_string
Also add some tests using the pytz library.

==

numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/datetime_strings.c
numpy/core/src/multiarray/datetime_strings.h
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_datetime.py
==================
4df8499;Mark Wiebe;2011-06-16 17:36:45 -0500;ENH: datetime-autounit: Detect unit from string arrays as well
Also move datetime string functions to their own source file.

==

numpy/core/SConscript
numpy/core/code_generators/genapi.py
numpy/core/setup.py
numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/datetime_strings.c
numpy/core/src/multiarray/datetime_strings.h
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/multiarraymodule_onefile.c
numpy/core/src/multiarray/scalartypes.c.src
==================
5cb956e;Derek Homeier;2011-06-16 15:20:03 +0200;BUG: made PyErr_Warn[Ex] in conversion_utils.c python2.4-safe
CH: I removed trailing whitespace and moved the trailing comment
to the next line.

==

numpy/core/src/multiarray/conversion_utils.c
==================
382233c;Mark Wiebe;2011-06-16 16:40:35 -0500;ENH: datetime-parsing: Apply the datetime unit casting rules to string parsing

==

numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/methods.h
==================
06ef6b7;Mark Wiebe;2011-06-16 16:02:20 -0500;ENH: datetime-casting: Refine the casting rules with a date vs time unit barrier

==

numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/datetime.c
numpy/core/tests/test_datetime.py
==================
2d7d59a;Mark Wiebe;2011-06-16 14:49:56 -0500;ENH: datetime-ufunc: Add m8 / m8 -> f8 case to the datetime ufunc operations

==

numpy/core/code_generators/generate_umath.py
numpy/core/src/umath/loops.c.src
numpy/core/src/umath/loops.h
numpy/core/src/umath/loops.h.src
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_datetime.py
==================
e9f4e75;Derek Homeier;2011-06-13 16:59:50 +0200;BUG: Py3k: some of the string type-related failures in numpy/core/tests
MW: I've removed the asbytes part and changed 'S5' to 'S0' from
    Derek's original commit.

==

numpy/core/tests/test_arrayprint.py
numpy/core/tests/test_datetime.py
numpy/core/tests/test_regression.py
==================
afe25c1;Mark Wiebe;2011-06-16 12:42:32 -0500;BUG: ufunc: Type promotion output must always be in NBO (fixes #1867)

==

numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_ufunc.py
==================
8019d91;Mark Wiebe;2011-06-16 12:27:35 -0500;BUG: core: promote_types wasn't always returning NBO data types

==

numpy/core/src/multiarray/convert_datatype.c
numpy/core/tests/test_numeric.py
==================
e6bffff;Mark Wiebe;2011-06-16 12:02:29 -0500;BUG: dtype: Cleanups and fix parsing datetime dtypes with an endian specifier
One fairly major improvement is that parsing with kind and a size now
makes sure there isn't any garbage after the size.

==

numpy/core/include/numpy/ufuncobject.h
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/descriptor.c
numpy/core/tests/test_datetime.py
==================
abfec95;Mark Wiebe;2011-06-16 10:08:33 -0500;STY: datetime-feedback: Expand some comments and adjust spacing based on Chuck's feedback

==

numpy/core/src/multiarray/datetime_busday.c
numpy/core/src/multiarray/datetime_busdaycal.c
==================
31056d4;Mark Wiebe;2011-06-15 16:11:38 -0500;DOC: datetime-feedback: Applying Ralf's feedback for the parameter conventions

==

numpy/add_newdocs.py
==================
d117335;Mark Wiebe;2011-06-15 10:58:48 -0500;STY: datetime-feedback: Rename np.busdaydef -> np.busdaycalendar
Also rename the busdaydef parameters to busdaycal parameters. This
change was motivated by Chuck's code review feedback.

==

doc/source/reference/routines.datetime.rst
numpy/add_newdocs.py
numpy/core/SConscript
numpy/core/code_generators/genapi.py
numpy/core/numerictypes.py
numpy/core/setup.py
numpy/core/src/multiarray/datetime_busday.c
numpy/core/src/multiarray/datetime_busdaycal.c
numpy/core/src/multiarray/datetime_busdaycal.h
numpy/core/src/multiarray/datetime_busdaydef.c
numpy/core/src/multiarray/datetime_busdaydef.h
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/multiarraymodule_onefile.c
numpy/core/tests/test_datetime.py
==================
6376ba8;Mark Wiebe;2011-06-15 10:34:54 -0500;DOC: datetime-feedback: Various comment/documentation tweaks from Chuck's review feedback

==

numpy/add_newdocs.py
numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/datetime.c
==================
6b5a42a;Mark Wiebe;2011-06-14 15:28:59 -0500;DOC: datetime-bday: Document the datetime business day functions

==

doc/source/reference/routines.datetime.rst
doc/source/reference/routines.rst
numpy/add_newdocs.py
numpy/core/src/multiarray/datetime_busday.c
==================
84e1f7d;Mark Wiebe;2011-06-14 11:21:57 -0500;ENH: datetime-bday: Got is_busday function working, completed business day API

==

numpy/core/numerictypes.py
numpy/core/src/multiarray/datetime_busday.c
numpy/core/src/multiarray/datetime_busday.h
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_datetime.py
==================
0418574;Mark Wiebe;2011-06-14 10:55:54 -0500;ENH: datetime-bday: Got busday_count function working

==

numpy/core/numerictypes.py
numpy/core/src/multiarray/datetime_busday.c
numpy/core/src/multiarray/datetime_busday.h
numpy/core/src/multiarray/datetime_busdaydef.h
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_datetime.py
==================
f7ae666;Mark Wiebe;2011-06-14 09:52:24 -0500;ENH: datetime-bday: Move the weekmask and holidays list convertors to busdaydef

==

numpy/core/src/multiarray/datetime_busday.c
numpy/core/src/multiarray/datetime_busday.h
numpy/core/src/multiarray/datetime_busdaydef.c
numpy/core/src/multiarray/datetime_busdaydef.h
==================
e164d94;Mark Wiebe;2011-06-14 09:47:35 -0500;ENH: datetime-bday: Cache the business day count in the weekmask in busdaydef

==

numpy/core/src/multiarray/datetime_busday.c
numpy/core/src/multiarray/datetime_busdaydef.c
numpy/core/src/multiarray/datetime_busdaydef.h
numpy/core/tests/test_datetime.py
==================
68f1cf2;Mark Wiebe;2011-06-13 18:11:20 -0500;ENH: datetime-bday: Create the np.busdaydef business day definition object

==

numpy/core/SConscript
numpy/core/code_generators/genapi.py
numpy/core/numerictypes.py
numpy/core/setup.py
numpy/core/src/multiarray/datetime_busday.c
numpy/core/src/multiarray/datetime_busday.h
numpy/core/src/multiarray/datetime_busdaydef.c
numpy/core/src/multiarray/datetime_busdaydef.h
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/multiarraymodule_onefile.c
numpy/core/src/multiarray/nditer_pywrap.c
numpy/core/tests/test_datetime.py
==================
b90d182;Mark Wiebe;2011-06-13 16:21:16 -0500;ENH: datetime-bday: Get holidays working with busday_offset

==

numpy/core/src/multiarray/datetime_busday.c
numpy/core/tests/test_datetime.py
==================
3d8fda5;Mark Wiebe;2011-06-13 11:23:20 -0500;ENH: datetime-bday: Functions to get and normalize a list of holidays

==

numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/datetime_busday.c
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/private/lowlevel_strided_loops.h
==================
29a3ceb;Mark Wiebe;2011-06-10 17:45:17 -0500;TST: datetime-bday: Write some tests for busday_offset

==

numpy/core/tests/test_datetime.py
==================
db62c35;Mark Wiebe;2011-06-10 17:09:39 -0500;ENH: datetime-autounit: Unit detection working with arrays, fix ufunc reductions
The default NPY_DATETIME type was still in microseconds, because it
wasn't using the NPY_DATETIME_DEFAULTUNIT macro as it should have been.
The reduction functions in ufuncs didn't respect the metadata appropriately.

==

numpy/core/arrayprint.py
numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/datetime_busday.c
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_datetime.py
==================
8a8a84a;Mark Wiebe;2011-06-10 14:36:51 -0500;ENH: datetime-bday: Connect busday_offset so it can be called from Python

==

numpy/core/numerictypes.py
numpy/core/src/multiarray/datetime_busday.c
numpy/core/src/multiarray/datetime_busday.h
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/nditer.c.src
==================
4fced4a;Mark Wiebe;2011-06-10 12:55:14 -0500;ENH: datetime-bday: Implement the weekmask part of the busday_offset algorithm

==

numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/datetime_busday.c
==================
e24e9d4;Mark Wiebe;2011-06-10 10:49:39 -0500;ENH: datetime-bday: Add datetime_busday.c/.h, start busday_offset function

==

numpy/core/SConscript
numpy/core/code_generators/genapi.py
numpy/core/include/numpy/ndarraytypes.h
numpy/core/setup.py
numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/datetime_busday.c
numpy/core/src/multiarray/datetime_busday.h
numpy/core/src/multiarray/multiarraymodule_onefile.c
==================
c3f963e;Mark Wiebe;2011-06-09 17:57:15 -0500;ENH: datetime-bday: Remove business days as a datetime metadata unit
The complexity of the operations desired for business days is such
that expressing it as a unit in the datetime doesn't fit naturally.
Instead, an API operating on day-based datetimes appears to be
a superior approach.

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/tests/test_datetime.py
==================
dadf6c2;Mark Wiebe;2011-06-09 14:36:32 -0500;ENH: datetime-arange: Move the unit metadata promotion to a separate function
This cleans up the implementation of arange a lot, and makes the
promotion rules behave consistently.

==

numpy/core/src/multiarray/datetime.c
numpy/core/tests/test_datetime.py
==================
98b4c38;Mark Wiebe;2011-06-09 12:02:04 -0500;ENH: datetime-arange: Detect the unit when a dtype with generic units is given

==

numpy/core/src/multiarray/datetime.c
numpy/core/tests/test_datetime.py
==================
53ab0c1;Mark Wiebe;2011-06-09 11:39:13 -0500;ENH: datetime-arange: The arange function largely works now

==

numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/datetime.c
numpy/core/tests/test_datetime.py
==================
5c16411;Mark Wiebe;2011-06-09 09:50:40 -0500;ENH: datetime-arange: Use the generic units for parameter conversion

==

numpy/core/src/multiarray/datetime.c
==================
d6c63e3;Mark Wiebe;2011-06-08 17:56:25 -0500;ENH: datetime-meta: Add generic units as a datetime unit type
This allows integers to convert into timedeltas without binding
to a default unit, so that later when it's combined with another
data type it adopts that type instead of overriding it haphazardly.
This makes things generally more intuitive.

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/tests/test_datetime.py
==================
50261be;Mark Wiebe;2011-06-08 15:51:00 -0500;ENH: datetime-arange: Filling in the datetime-specific arange function
Here I've realized that default 'microsecond' units isn't very good,
and would like to make a default 'generic' unit instead.

==

numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/datetime.c
==================
487874a;Mark Wiebe;2011-06-08 11:44:37 -0500;ENH: datetime-arange: Add boilerplate for the specialized datetime_arange

==

numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/datetime.c
==================
fdb4190;Mark Wiebe;2011-06-08 16:41:21 -0500;BUG: datetime: Had int instead of Py_ssize_t for an AsStringAndSize call

==

numpy/core/src/multiarray/datetime.c
==================
ab2ac7c;Mark Wiebe;2011-06-07 16:37:01 -0500;ENH: datetime-promotion: Unify datetime/timedelta type promotion
Now it always goes to the more precise unit.

==

numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/datetime.c
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_datetime.py
==================
6395979;Mark Wiebe;2011-06-07 15:37:26 -0500;ENH: datetime-autounit: Make 'now' and 'today' only parse with appropriate units
In particular, 'now' needs time-like units, and 'today' needs
date-like units.

==

numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/datetime.c
numpy/core/tests/test_datetime.py
==================
e64b6f1;Mark Wiebe;2011-06-07 15:22:38 -0500;ENH: datetime-autounit: Automatically detect the unit for scalar construction

==

numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/tests/test_datetime.py
==================
a1e7be3;Mark Wiebe;2011-06-09 10:01:35 -0500;BUG: core: PyArray_NewFromDescr needs to update flags when strides != NULL (fixes #1863
This appears to have been a longstanding bug, but has come to the
surface because PyArray_NewLikeArray uses the function with a non-NULL
strides parameter and is used more frequently then other such uses.

==

numpy/core/src/multiarray/ctors.c
numpy/core/tests/test_numeric.py
==================
76ca55f;Mark Wiebe;2011-06-08 09:35:18 -0500;BLD: Fix the date-time related error on 64-bit Linux
This is yet another problem stemming from using the C types as
the basis for NumPy data types instead of sized types.

==

numpy/core/code_generators/generate_umath.py
numpy/core/src/umath/ufunc_object.c
==================
f986fd4;Mark Wiebe;2011-06-07 16:50:18 -0500;BLD: Fix build in single-file build mode

==

numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/scalartypes.c.src
==================
a827436;Mark Wiebe;2011-06-07 13:21:12 -0500;Merge branch 'datetime-fixes'

==
==================
fd9ef72;Mark Wiebe;2011-06-07 11:43:00 -0500;BUG: Broadcast error message was displaying a garbled shape (fixes #1859)

==

numpy/core/src/multiarray/nditer.c.src
numpy/core/tests/test_iterator.py
==================
a265c2e;Mark;2011-06-03 16:17:19 -0700;Merge pull request #82 from m-paradox/generalize_astype
ENH: core: Generalize ndarray.astype to take new standard keyword argumen
==
==================
283b2e7;Mark Wiebe;2011-06-03 18:15:04 -0500;ENH: datetime: Finish fixing up datetime printing, add datetime to string function with several options

==

numpy/core/arrayprint.py
numpy/core/include/numpy/ndarraytypes.h
numpy/core/numerictypes.py
numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/tests/test_datetime.py
==================
de71993;Mark Wiebe;2011-06-03 12:20:52 -0500;ENH: datetime: Remove TimeInteger, partially fix up datetime array printing
The TimeInteger seemed like the wrong abstraction to me. Timedelta
is reasonable as an integer, and in fact if NumPy supported arbitrary
unit metadata, Timedelta could be removed and that mechanism used
instead. Datetime, however, doesn't represent an integer. Datetime
has no zero (barring big bang, God's creation, or some other choice...),
something which integers definitely have.

==

numpy/core/arrayprint.py
numpy/core/numeric.py
numpy/core/numerictypes.py
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/scalarapi.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/tests/test_arrayprint.py
numpy/core/tests/test_regression.py
==================
681adf0;Mark Wiebe;2011-06-03 10:52:13 -0500;ENH: datetime: Got repr and str for datetime scalars working

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/tests/test_datetime.py
==================
8f35cd7;Mark Wiebe;2011-06-02 17:08:38 -0500;WRN: Eliminate a number of compiler warnings

==

numpy/core/include/numpy/npy_3kcompat.h
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/lowlevel_strided_loops.c.src
==================
6c2c90c;Mark Wiebe;2011-06-02 16:49:25 -0500;ENH: datetime: Eliminate use of npy_timedeltastruct, an unnecessary abstraction

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/datetime.c
numpy/core/tests/test_datetime.py
==================
bf1e6f3;rgommers;2011-06-02 18:48:26 +0200;ENH: distutils: do the correct thing when swig_opts is a string in setup.py
It should be a list, but until numpy 1.5.1 a string was accepted. This broke in
1.6.0, this commit unbreaks things.

Closes #1851.

==

numpy/distutils/extension.py
==================
e08fbd0;Mark Wiebe;2011-06-02 14:43:15 -0500;ENH: datetime: Add timedelta -> timedelta scalar casting

==

numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/datetime.c
numpy/core/tests/test_datetime.py
==================
13bafaa;Mark Wiebe;2011-06-02 14:27:15 -0500;TST: datetime: Extend the tests for the NumPy scalars as well

==

numpy/core/tests/test_datetime.py
==================
f2d9812;Mark Wiebe;2011-06-02 14:04:00 -0500;ENH: datetime: Generalize the unit parser so datetime scalar can take more general units

==

numpy/core/src/multiarray/datetime.c
numpy/core/tests/test_datetime.py
==================
b0a6e39;Mark Wiebe;2011-06-02 12:33:49 -0500;ENH: datetime: Fix up creation of datetime scalar

==

numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/tests/test_datetime.py
==================
7eb97b5;Mark Wiebe;2011-06-01 18:36:08 -0500;ENH: datetime: Allow metadata parameter in datetime scalar constructors

==

numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/scalartypes.c.src
==================
653c645;Mark Wiebe;2011-06-01 16:47:49 -0500;ENH: Remove dead code in PyArray_SetDatetimeParseFunction

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/scalartypes.c.src
==================
3dd1018;Mark Wiebe;2011-06-01 14:06:13 -0500;ENH: datetime: Remove logical operations from timedelta
I think the right way to handle the logical operations is to
reduce them to have just a single loop with all booleans, then
use casting to get the inputs to those types. This change requires
adding custom type resolution to the reduction ufunc methods as well,
which is beyond the scope of datetime.

==

numpy/core/src/umath/loops.c.src
numpy/core/src/umath/loops.h
numpy/core/src/umath/loops.h.src
==================
33babc9;Mark Wiebe;2011-06-01 13:54:13 -0500;ENH: datetime: Add more tests and type resolution for datetime

==

numpy/core/code_generators/generate_umath.py
numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/ufunc_object.h
numpy/core/tests/test_datetime.py
==================
7d5b355;Mark Wiebe;2011-06-01 09:31:20 -0500;ENH: core: Rename forcecopy= to copy= in ndarray.astype
This makes it match the parameter in the array constructor with
the same meaning.

==

numpy/add_newdocs.py
numpy/core/src/multiarray/methods.c
numpy/core/tests/test_api.py
==================
da6391a;Mark Wiebe;2011-05-31 18:28:57 -0500;ENH: Handle NaT in most operations, some progress towards proper casting rules

==

numpy/core/code_generators/generate_umath.py
numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/umath/loops.c.src
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_datetime.py
==================
a17a499;Mark Wiebe;2011-05-31 15:36:59 -0500;ENH: core: Generalize ndarray.astype to take new standard keyword arguments
These include order=, casting=, subok=. Also added a forcecopy=
parameter to allow skipping of the copy when possible.

==

numpy/add_newdocs.py
numpy/core/src/multiarray/methods.c
numpy/core/tests/test_api.py
==================
7444e85;Mark Wiebe;2011-05-31 12:58:20 -0500;ENH: datetime: Add min/max type resolution, implement tests for datetime ufuncs

==

numpy/core/code_generators/generate_umath.py
numpy/core/code_generators/numpy_api.py
numpy/core/src/umath/loops.c.src
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/ufunc_object.h
numpy/core/tests/test_datetime.py
==================
a3a4e5a;Mark Wiebe;2011-05-31 11:47:14 -0500;ENH: datetime: Implement the multiply and divide DATETIME ufunc loops

==

numpy/core/code_generators/generate_umath.py
numpy/core/src/umath/loops.c.src
numpy/core/src/umath/loops.h
numpy/core/src/umath/loops.h.src
==================
6441c2a;rgommers;2011-05-29 15:38:06 +0200;ENH: speed up in1d() in the case of ar1 >> ar2. Closes #1603.
A timing script justifying the switching criterion is attached to ticket 1603.

Thanks to Neil Crighton.

==

numpy/lib/arraysetops.py
numpy/lib/tests/test_arraysetops.py
==================
7fa5c2a;Mark Wiebe;2011-05-27 18:41:40 -0500;ENH: Add ufunc datetime-aware type resolution functions for multiply and divide

==

numpy/core/code_generators/generate_umath.py
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/ufunc_object.h
==================
9f2b299;Mark Wiebe;2011-05-27 18:16:27 -0500;ENH: Add custom type resolution function for the subtract ufunc with datetime support

==

numpy/core/code_generators/generate_umath.py
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/ufunc_object.h
==================
cb21fd9;Mark Wiebe;2011-05-27 15:40:22 -0500;ENH: Create type resolution function for 'add' with special datetime rules

==

numpy/core/code_generators/generate_umath.py
numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/datetime.c
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/ufunc_object.h
==================
4f2a2d9;Mark Wiebe;2011-05-27 12:35:30 -0500;ENH: datetime: Got datetime interunit comparisons working

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_datetime.py
==================
3456676;Mark Wiebe;2011-05-26 15:45:28 -0500;BUG: Fix datetime metadata comparison

==

numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/umath/ufunc_object.c
==================
cbfec87;Mark Wiebe;2011-05-26 15:23:53 -0500;ENH: datetime: Some work towards getting datetime casting between units working

==

numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/tests/test_datetime.py
==================
5bb9157;Mark Wiebe;2011-05-26 12:22:40 -0500;ENH: ufunc: Hook up the binary comparison type resolution

==

numpy/core/code_generators/generate_umath.py
numpy/core/src/umath/ufunc_object.c
==================
3729edf;Mark Wiebe;2011-05-26 11:53:10 -0500;ENH: umath: Add a binary comparison type resolution function
Also remove some DATETIME ufuncs that didn't make sense (since
the datetime type has no zero, these functions still make sense
for TIMEDELTA).

==

numpy/core/code_generators/generate_umath.py
numpy/core/code_generators/numpy_api.py
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/datetime.c
numpy/core/src/umath/loops.c.src
numpy/core/src/umath/ufunc_object.c
==================
a12f0d1;Mark Wiebe;2011-05-25 18:05:16 -0500;ENH: Generalize ufunc type resolution to be a replaceable function
The datetime64 is a parameterized type, something which can't be handled
with the simple linear list search the ufuncs currently do. This patch
adds a function pointer to the end of the ufunc object (should be
ABI compatible similar to the metadata addition in 1.4.1), which handles
type resolution. This function is set by default to a function which
executes the preexisting type resolution functionality.

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/include/numpy/ufuncobject.h
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/datetime.c
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/umathmodule.c.src
numpy/core/tests/test_datetime.py
==================
a106c29;Mark Wiebe;2011-05-25 10:21:17 -0500;ENH: datetime: Tests and fixes for datetime64 <-> object roundtripping

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/methods.c
numpy/core/tests/test_datetime.py
==================
6b8ad91;Mark Wiebe;2011-05-24 19:05:22 -0500;ENH: Cleaning up object <-> datetime conversions

==

numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/datetime.c
numpy/core/tests/test_datetime.py
==================
feb6c2c;Mark Wiebe;2011-05-24 18:15:17 -0500;ENH: Refactored DATETIME_getitem and the function it calls

==

numpy/core/_mx_datetime_parser.py
numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_datetime.py
==================
6d960a6;Mark Wiebe;2011-05-24 15:51:54 -0500;BUG: Was incorrectly using month and day in npy_datetimestruct

==

numpy/core/src/multiarray/datetime.c
==================
81c37aa;Mark Wiebe;2011-05-24 15:39:42 -0500;ENH: Refactor datetime conversion from PyObject* into its own function

==

numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/datetime.c
numpy/core/tests/test_datetime.py
==================
442096d;Mark Wiebe;2011-05-23 18:25:13 -0500;ENH: Got the ISO date parser working in DATETIME_setitem
Also added support for parsing events as an integer after
the time portion of the string.

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/datetime.c
numpy/core/tests/test_datetime.py
==================
44855ca;Mark Wiebe;2011-05-23 17:13:46 -0500;ENH: Wrote (close to an) ISO date parser, partially modified TIMEVALUE_setitem
It turns out that the date-time API for converting the
npy_datetimestruct to an npy_datetime takes just the
NPY_DATETIMEUNIT, not a datetime metadata struct, but
I wanted to commit here as a checkpoint before adding
what's needed there.

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/datetime.c
numpy/core/tests/test_datetime.py
==================
77b9d3e;Mark Wiebe;2011-05-23 10:29:28 -0500;BUG: Restore pickling functionality, incorporate Chuck's feedback
It turned out pickle roundtripping wasn't being tested, and the
changes I did broke that. This restores that functionality and
improves some error checking and formatting as suggested by Chuck.

==

numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/descriptor.c
numpy/core/tests/test_datetime.py
==================
3071eab;Mark Wiebe;2011-05-21 15:04:05 -0500;BUG: Regression of object <-> structured array data copying (ticket #1838)

==

numpy/core/src/multiarray/dtype_transfer.c
numpy/core/tests/test_iterator.py
numpy/core/tests/test_regression.py
==================
4a2ad9e;Mark Wiebe;2011-05-21 12:01:33 -0500;BUG: Iterator reduction buffering bug when the inner loop is bigger than the buffer size (ticket #1837)
The symptoms of this bug were showing up only for a greater number of operands
because einsum runs specialized loops for fewer operands and dimensions.

==

numpy/core/src/multiarray/nditer.c.src
numpy/core/tests/test_einsum.py
==================
19b71ad;Mark Wiebe;2011-05-20 17:45:12 -0500;ENH: promote_types applies the datetime promotion rules

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/datetime.c
numpy/core/tests/test_datetime.py
==================
8727a80;Mark Wiebe;2011-05-20 15:41:27 -0500;ENH: Remove 'den' datetime metadata, move datetime_data to a C function
The 'den' metadata was always 1, except during construction, so there
is no reason for it to exist. The variable is kept in the struct
for 1.6 ABI compatibility, however.

The datetime_data function used ctypes. Moving the function to C is
no more difficult, and a bit cleaner in my opinion.

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/numerictypes.py
numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_datetime.py
numpy/lib/tests/test_type_check.py
numpy/lib/type_check.py
==================
6ab9c73;Mark Wiebe;2011-05-20 14:33:05 -0500;ENH: Start implementing the datetime type promotion rules, clean up datetime
Doing the type promotion rules requires some datetime utility functions
which aren't written yet. In the process of setting the stage for those,
I've moved a number of functions from descriptor.c to datetime.c and
renamed them trying to more descriptively.

==

numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/descriptor.c
numpy/core/tests/test_datetime.py
==================
8949fe2;Mark Wiebe;2011-05-20 11:40:40 -0500;ENH: Tighten up dtype parsing in general, to catch some more invalid datetime results
There is also a problem with 'O4' and 'O8', which are platform-specific.
I changed it to still accept both, but produce a deprecation warning.

==

numpy/core/numerictypes.py
numpy/core/src/multiarray/conversion_utils.c
numpy/core/src/multiarray/descriptor.c
numpy/core/tests/test_datetime.py
numpy/core/tests/test_dtype.py
numpy/ma/core.py
==================
7045cbc;Mark Wiebe;2011-05-19 17:09:10 -0500;ENH: Reimplement datetime dtype string parser (with error checking)
The previous implementation returned the default datetime type in
many cases instead of raising an exception. I also changed the
hybrid C + Python implementation to be purely in C.

==

numpy/core/_internal.py
numpy/core/src/multiarray/descriptor.c
numpy/core/tests/test_datetime.py
==================
25bcc65;Mark Wiebe;2011-05-19 09:31:52 -0500;ENH: Small changes towards datetime type promotion

==

numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/scalartypes.c.src
==================
026bc92;Pearu Peterson;2011-05-18 23:46:45 +0300;BUG: fix f2py size variadic macro for Visual C++ 2008 compiler. Also be verbose on unspecified use modules.

==

numpy/f2py/cfuncs.py
numpy/f2py/crackfortran.py
==================
651a942;Mark Wiebe;2011-05-18 09:40:32 -0500;BUG: PyArray_FillWithZero didn't work in the general case
The call to the stransfer function had incorrect arguments. This
didn't show up because all the tests of einsum, the only current
user of the function, produced contiguous arrays which are special
cased.

==

numpy/core/src/multiarray/convert.c
numpy/core/tests/test_einsum.py
==================
9fb8922;Mark Wiebe;2011-05-18 06:31:51 -0500;BUG: Fix buffered reduction case in nditer (ticket #1834)

==

numpy/core/src/multiarray/einsum.c.src
numpy/core/src/multiarray/nditer.c.src
numpy/core/tests/test_iterator.py
==================
cbca245;Mark Wiebe;2011-05-18 05:42:32 -0500;TST: Reduced test case for ticket #1834
The ticket's bug is visible in einsum, but is caused by an error in how
the reduction double loop interacts with buffering in the nditer. This
test case directly tests the nditer triggering the bad code.

==

numpy/core/tests/test_iterator.py
==================
5c4efaa;Charles Harris;2011-05-10 08:04:54 -0600;STY: Cleanup test_linalg a bit.

==

numpy/linalg/tests/test_linalg.py
==================
eab959b;Skipper Seabold;2011-05-09 17:15:53 -0400;TST: Add test for QR on empty array

==

numpy/linalg/tests/test_linalg.py
==================
1802219;Skipper Seabold;2011-05-08 14:16:25 -0400;BUG: Add not empty check to linalg.qr

==

numpy/linalg/linalg.py
==================
b233716;Derek Homeier;2011-05-06 12:07:32 +0200;use np.atleast_Nd() to boost dimensions to ndmin

==

numpy/lib/npyio.py
numpy/lib/tests/test_io.py
==================
607d2b3;Derek Homeier;2011-05-05 01:01:08 +0200;changed ndmin option in loadtxt to return shape (1, X.size) for single-row inputs

==

numpy/lib/npyio.py
numpy/lib/tests/test_io.py
==================
6df2ac2;Pearu Peterson;2011-05-07 00:21:30 +0300;BUG: Fix the order of declaring variables in f2py generated code. The bug was noticable with ifort but not with gfortran.

==

numpy/f2py/func2subr.py
==================
1f2e751;Pearu Peterson;2011-05-06 21:14:29 +0300;DOC: Updated f2py size support note.

==

doc/release/1.6.0-notes.rst
==================
a859492;Pearu Peterson;2011-05-06 21:03:07 +0300;BUG: Fix two argument size support for Fortran module routines. Reverted size-to-shape mapping patch and implemented two argument size function in C.

==

numpy/f2py/cfuncs.py
numpy/f2py/crackfortran.py
numpy/f2py/tests/src/size/foo.f90
numpy/f2py/tests/test_size.py
==================
f393b60;Pearu Peterson;2011-05-06 01:30:03 +0300;BUG: Fix assumed shape support for module routines.

==

numpy/f2py/f90mod_rules.py
numpy/f2py/func2subr.py
numpy/f2py/tests/src/assumed_shape/foo_mod.f90
numpy/f2py/tests/test_assumed_shape.py
==================
516d50c;Michael Droettboom;2011-05-02 11:03:13 -0400;BUG: Cleanup in PyUFunc_FromFuncAndDataAndSignature error case.

==

numpy/core/src/umath/ufunc_object.c
==================
ded703d;Michael Droettboom;2011-05-02 10:27:04 -0400;BUG: Fix a bug where memory was being read after being freed.
On my system (Python 2.7, RHEL5), the call to func.__name__
returns a temporary Python string object with only a single
reference.  Dereferencing it before copying out its contents
results in reading freed memory.

==

numpy/core/src/umath/umathmodule.c.src
==================
26c957b;Michael Droettboom;2011-05-02 10:18:07 -0400;BUG: Fix reference counting leaks in C-based multiarray_tests

==

numpy/core/src/multiarray/multiarray_tests.c.src
==================
2797647;Michael Droettboom;2011-05-02 10:16:01 -0400;BUG: Fix memory leak in UMath_Tests_test_signature test

==

numpy/core/src/umath/umath_tests.c.src
==================
5626f31;Michael Droettboom;2011-05-02 10:15:14 -0400;BUG: Fix memory leak in f2py_rout_wrap_call test.

==

numpy/f2py/tests/src/array_from_pyobj/wrapmodule.c
==================
1611da9;Mark Wiebe;2011-05-01 19:44:01 -0700;BUG: Fix 1.6rc1 crash in result_type on 32-bit Windows MKL builds
Thanks to Christoph Gohlke for tracking down the error. It appears to
stem from the C preprocessor making the use of an undefined symbol
become arbitrary behavior rather than a compile error.

==

numpy/core/src/multiarray/convert_datatype.c
==================
26405fd;Ralf Gommers;2011-04-30 19:37:43 +0200;TST: fix test due to recent change for large arrays (ValueError / MemoryError).

==

numpy/core/tests/test_multiarray.py
==================
5aa3603;Ralf Gommers;2011-04-29 19:23:59 +0200;DOC:BUG: fix percentile examples. Closes #1813.

==

numpy/lib/function_base.py
==================
9992479;Charles Harris;2011-04-27 20:19:06 -0600;BUG: Remove buggy test for error trying to allocate too large array.

==

numpy/core/tests/test_regression.py
==================
f7eda58;Ralf Gommers;2011-04-27 21:29:55 +0200;TST: fix test for too large array, raises ValueError, not MemoryError.
Closes #1811.

==

numpy/core/tests/test_regression.py
==================
1c24f2d;Ralf Gommers;2011-04-27 21:22:02 +0200;TST: fix forgotten import in core/test_regression.py

==

numpy/core/tests/test_regression.py
==================
433b02a;Charles Harris;2011-04-26 17:33:06 -0600;ENH: Put line ending on message to stderr.

==

numpy/__init__.py
==================
a994cf3;Charles Harris;2011-04-26 17:04:59 -0600;BUG: Make some variables npy_int8 instead of char.

==

numpy/core/src/multiarray/nditer.c.src
==================
cc0c0cb;Jason Grout;2011-04-26 10:18:50 -0500;BUG: linalg: Update the rwork size in the call to zgesdd to reflect a documentation bugfix in Lapack SVN revision 729.
See http://icl.cs.utk.edu/lapack-forum/viewtopic.php?f=2&t=1779

==

numpy/linalg/linalg.py
==================
9752349;Charles Harris;2011-04-24 11:51:51 -0600;DOC: Add note about the danger of integer overflow when computing array sizes by multiplying the dimensions together.

==

numpy/core/src/multiarray/ctors.c
==================
d8de71d;Ralf Gommers;2011-04-03 14:59:36 +0200;ENH: Ticket #1218, allow use of custom formatters in array2string and set_printoptions. Add tests for the new functionality.

==

doc/release/2.0.0-notes.rst
numpy/core/arrayprint.py
numpy/core/tests/test_arrayprint.py
==================
be364f7;Mark Wiebe;2011-04-23 21:37:38 -0700;BUG: Switch char to npy_byte/npy_ubyte in min_scalar_type

==

numpy/core/src/multiarray/convert_datatype.c
==================
c518d07;Charles Harris;2011-04-23 17:04:55 -0600;TST: Try to make the test for checking array size from dimensions a bit more successful.

==

numpy/core/tests/test_regression.py
==================
a2e8173;Christolph Gohlke;2011-04-23 16:52:18 -0600;BUG: Fix regression in checking array size from dimensions.

==

numpy/core/src/multiarray/ctors.c
numpy/core/tests/test_regression.py
==================
ad76bb5;Charles Harris;2011-04-23 13:15:43 -0600;BUG: Fix another cast to char.

==

numpy/core/src/multiarray/nditer.c.src
==================
5eae1f4;Mark Wiebe;2011-04-23 13:06:12 -0700;BUG: Fix signed char assumption in einsum label parsing

==

numpy/core/src/multiarray/einsum.c.src
==================
566ace2;Mark Wiebe;2011-04-23 12:26:59 -0700;WRN: Fix gcc warnings (4.6.0 with "-Wall -Wno-unused-function")

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/nditer.c.src
numpy/core/src/multiarray/nditer_pywrap.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/umath/ufunc_object.c
==================
7f5130a;Charles Harris;2011-04-23 10:57:43 -0600;STY: Make include flag name match file name.

==

numpy/core/src/multiarray/nditer_pywrap.h
==================
4ec659c;Charles Harris;2011-04-23 10:55:58 -0600;BUG: Change some char variables to npy_int8 so that they are always signed types.

==

numpy/core/src/multiarray/nditer.c.src
==================
dea352c;Charles Harris;2011-04-21 20:30:41 -0600;BUG: ticket #1805, replace type char by signed char for tables.

==

numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/multiarray/scalartypes.h
==================
700dc69;Mark Wiebe;2011-04-22 17:25:27 -0700;BUG: PyArray_FromString failed to disallow object arrays

==

numpy/core/src/multiarray/ctors.c
==================
deb2903;Mark Wiebe;2011-04-22 14:34:49 -0700;STY: Add comment about errobj reference ownership

==

numpy/core/src/umath/ufunc_object.c
==================
0a0ff69;Michael Droettboom;2011-04-19 12:16:20 -0400;BUG: Fix memory leak in reduction ufuncs -- the error object was not being dereferenced in the non-error case.

==

numpy/core/src/umath/ufunc_object.c
==================
fbdc4b7;Mark Wiebe;2011-04-22 13:37:18 -0700;TST: Add some specific desirable type-promotion use cases to the tests

==

numpy/core/tests/test_numeric.py
==================
58b77b2;Mark Wiebe;2011-04-13 15:04:17 -0700;DOC: Document the new keyword arguments for ufuncs

==

doc/source/reference/ufuncs.rst
numpy/add_newdocs.py
==================
d97a5e3;Mark Wiebe;2011-04-13 14:44:42 -0700;DOC: Improve the documentation about type promotion

==

doc/source/reference/c-api.array.rst
doc/source/reference/ufuncs.rst
numpy/add_newdocs.py
==================
973b112;Mark Wiebe;2011-04-13 13:19:27 -0700;BUG: Fix type promotion regression for ufuncs (Ticket #1798)

==

numpy/core/src/umath/ufunc_object.c
==================
492ae11;Mark Wiebe;2011-04-13 12:56:30 -0700;BUG: Fix type promotion regression for the result_type function (Ticket #1798)

==

numpy/core/src/multiarray/convert_datatype.c
==================
ffa8786;Mark Wiebe;2011-04-12 21:32:51 -0700;TST: Add tests for scalar*array type promotion
In particular, where the kind of the scalar is greater than the kind
of the array.

==

numpy/core/tests/test_numeric.py
numpy/core/tests/test_regression.py
==================
137ec8e;Ralf Gommers;2011-04-22 19:52:39 +0200;BUG: fix random.test_noncentral_f issue under win64 + MSVC9. Closes #1801.
Thanks to Christoph Gohlke for the patch.

==

numpy/random/mtrand/distributions.c
==================
9fc9db1;Ralf Gommers;2011-04-22 19:29:29 +0200;BUG: numpy doesn't compile anymore with ifort using -O3, changing to -O1.
Closes #1378. Thanks to Burkhard Neinhues and Christoph Gohlke.

==

numpy/distutils/fcompiler/intel.py
==================
cd6d53f;Ralf Gommers;2011-04-17 16:04:11 +0200;BLD: raise a clearer warning in case of building without cleaning up first.
Occurs only on Python 3.x when a version.py file is already present, due to
copying the whole tree into build/pyk3/.

==

setup.py
==================
f98ffb5;Ralf Gommers;2011-04-17 16:56:22 +0200;TST: fix regression on 64-bit Windows.

==

numpy/core/tests/test_regression.py
==================
7ad8fef;Ralf Gommers;2011-04-17 16:15:53 +0200;ENH: do not make backup copies when running 2to3.
Copied from scipy commit f7dae4f2.

==

tools/py3tool.py
==================
fe3852f;Matthew Brett;2011-04-05 11:17:30 -0700;TST: test for different line endings in genfromtxt input file. Note that the test for '\r' is skipped for python 3k since it is known to fail.

==

numpy/lib/tests/test_io.py
==================
966038e;Charles Harris;2011-04-05 21:00:10 -0600;STY: Replace assert by assert_ in tests. There remain 124 uses of assert in non-testing files that should be checked for correctness.

==

numpy/core/tests/test_datetime.py
numpy/core/tests/test_defchararray.py
numpy/core/tests/test_errstate.py
numpy/core/tests/test_function_base.py
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_numerictypes.py
numpy/core/tests/test_regression.py
numpy/core/tests/test_scalarmath.py
numpy/core/tests/test_shape_base.py
numpy/core/tests/test_ufunc.py
numpy/core/tests/test_umath.py
numpy/distutils/tests/test_fcompiler_gnu.py
numpy/distutils/tests/test_misc_util.py
numpy/lib/tests/test__iotools.py
numpy/lib/tests/test_arrayterator.py
numpy/lib/tests/test_format.py
numpy/lib/tests/test_index_tricks.py
numpy/lib/tests/test_io.py
numpy/lib/tests/test_polynomial.py
numpy/lib/tests/test_recfunctions.py
numpy/lib/tests/test_shape_base.py
numpy/lib/tests/test_stride_tricks.py
numpy/lib/tests/test_type_check.py
numpy/lib/tests/test_utils.py
numpy/linalg/tests/test_linalg.py
numpy/ma/tests/test_core.py
numpy/ma/tests/test_extras.py
numpy/ma/tests/test_mrecords.py
numpy/ma/tests/test_old_ma.py
numpy/ma/testutils.py
numpy/matrixlib/tests/test_defmatrix.py
numpy/matrixlib/tests/test_multiarray.py
numpy/matrixlib/tests/test_regression.py
numpy/testing/nosetester.py
numpy/testing/utils.py
==================
4cb2eb4;Mark Wiebe;2011-04-05 18:43:13 -0700;BUG: Fix Python version comparison in last patch

==

numpy/core/include/numpy/ndarraytypes.h
==================
49882c4;Mark Wiebe;2011-04-05 18:34:43 -0700;BUG: Work around the fact that Python 2.6 doesn't support %lld in PyString_Format
See ticket #1795.

==

numpy/core/include/numpy/ndarraytypes.h
==================
fd26303;Charles Harris;2011-04-05 17:10:31 -0600;STY: Fix up some remaining old-style exceptions. I think that is the end of it.

==

numpy/core/_mx_datetime_parser.py
numpy/core/getlimits.py
numpy/core/machar.py
numpy/core/numeric.py
numpy/distutils/mingw32ccompiler.py
numpy/lib/_datasource.py
numpy/lib/npyio.py
numpy/lib/polynomial.py
numpy/ma/core.py
numpy/oldnumeric/ma.py
numpy/oldnumeric/precision.py
numpy/oldnumeric/random_array.py
numpy/testing/nulltester.py
==================
b2793ea;Charles Harris;2011-04-05 16:10:44 -0600;STY: Fix up some two line old-style exceptions.

==

numpy/core/machar.py
numpy/core/memmap.py
numpy/core/records.py
numpy/ctypeslib.py
numpy/lib/index_tricks.py
numpy/lib/shape_base.py
numpy/linalg/linalg.py
numpy/oldnumeric/mlab.py
==================
e1a9692;Charles Harris;2011-04-05 15:08:23 -0600;STY: Update exception styles, trickier ones.

==

numpy/core/_mx_datetime_parser.py
numpy/core/getlimits.py
numpy/core/numeric.py
numpy/core/records.py
numpy/core/src/multiarray/testcalcs.py
numpy/ctypeslib.py
numpy/dual.py
numpy/f2py/crackfortran.py
numpy/f2py/f2py2e.py
numpy/lib/npyio.py
numpy/linalg/linalg.py
numpy/ma/mrecords.py
numpy/matrixlib/defmatrix.py
numpy/oldnumeric/ma.py
==================
cfd7664;Charles Harris;2011-04-05 15:01:52 -0600;STY: Update exception style, easy ones.

==

numpy/core/defchararray.py
numpy/core/memmap.py
numpy/core/numeric.py
numpy/core/numerictypes.py
numpy/core/records.py
numpy/ctypeslib.py
numpy/f2py/tests/test_array_from_pyobj.py
numpy/fft/fftpack.py
numpy/lib/function_base.py
numpy/lib/index_tricks.py
numpy/lib/npyio.py
numpy/lib/polynomial.py
numpy/lib/shape_base.py
numpy/lib/type_check.py
numpy/lib/user_array.py
numpy/linalg/linalg.py
numpy/ma/core.py
numpy/ma/extras.py
numpy/ma/mrecords.py
numpy/matrixlib/defmatrix.py
numpy/oldnumeric/arrayfns.py
numpy/oldnumeric/compat.py
numpy/oldnumeric/functions.py
numpy/oldnumeric/ma.py
numpy/oldnumeric/matrix.py
numpy/oldnumeric/random_array.py
numpy/polynomial/chebyshev.py
numpy/polynomial/hermite.py
numpy/polynomial/hermite_e.py
numpy/polynomial/laguerre.py
numpy/polynomial/legendre.py
numpy/polynomial/polynomial.py
numpy/testing/nosetester.py
==================
a4100ba;Mark Wiebe;2011-04-05 15:58:08 -0700;BUG: Fix INTP printf formatting string on 64-bit windows

==

numpy/core/include/numpy/ndarraytypes.h
==================
85ed5d0;Charles Harris;2011-04-05 14:12:16 -0600;STY: Change one more old-style class to a new-style class.

==

numpy/core/tests/test_ufunc.py
==================
2812406;Charles Harris;2011-04-05 13:28:50 -0600;STY: Replace remaining old style classes with classes subclassing object.

==

numpy/_import_tools.py
numpy/core/code_generators/genapi.py
numpy/core/getlimits.py
numpy/distutils/environment.py
numpy/distutils/misc_util.py
numpy/lib/_iotools.py
numpy/linalg/lapack_lite/make_lite.py
numpy/ma/timer_comparison.py
numpy/numarray/numerictypes.py
numpy/testing/print_coercion_tables.py
numpy/testing/utils.py
==================
06dc702;Charles Harris;2011-04-05 13:27:24 -0600;STY: Replace old style classes in tests with classes subclassing object.

==

numpy/core/tests/test_multiarray.py
numpy/core/tests/test_numeric.py
numpy/core/tests/test_regression.py
numpy/core/tests/test_scalarmath.py
numpy/f2py/tests/test_array_from_pyobj.py
numpy/f2py/tests/test_callback.py
numpy/lib/tests/test_twodim_base.py
numpy/lib/tests/test_type_check.py
numpy/linalg/tests/test_build.py
numpy/linalg/tests/test_linalg.py
==================
cff9ccb;Charles Harris;2011-04-05 10:05:40 -0600;BUG: Workaround for the fact the Python 2.4 doesn't accept 'Ub' as a file mode, but does accept 'rbU'. Note that with either of these modes Python 3 fails to split files with '\r' line endings on linux. This is either a bug in Python 3 or something that requires more extensive modifications to genfromtxt. Because genfromtxt now accepts generators it should be possible to write a generator that opens files in text mode and encodes the lines as byte streams, and this should provide a workaround.

==

numpy/lib/npyio.py
==================
b48b2d5;Charles Harris;2011-04-05 09:30:14 -0600;BUG: Python 2.4 doesn't accept the construction class foo():

==

numpy/core/tests/test_multiarray.py
numpy/core/tests/test_numeric.py
numpy/core/tests/test_scalarmath.py
numpy/lib/tests/test_twodim_base.py
numpy/linalg/tests/test_linalg.py
==================
3c338cb;Paul Anton Letnes;2011-04-04 16:55:16 +0200;moved import statement in npyio.py for ease of reading

==

numpy/lib/npyio.py
==================
ce0019c;Derek Homeir;2011-04-04 08:13:54 -0600;BUG: ticket #1071, fix loadtxt to handle tab delimited data with missing values in the last column and add test for same.

==

numpy/lib/npyio.py
numpy/lib/tests/test_io.py
==================
a528b98;Charles Harris;2011-04-03 17:45:51 -0600;ENH: Let genfromtxt accept generators as text sources. Add test for that case.

==

numpy/lib/npyio.py
numpy/lib/tests/test_io.py
==================
9445a3d;Charles Harris;2011-04-03 14:44:07 -0600;BUG: Fix strings for Python 3k.

==

numpy/lib/tests/test_io.py
==================
d51f8d8;Charles Harris;2011-04-03 14:42:39 -0600;BUG: Fix integer division for python 3k.

==

numpy/core/tests/test_regression.py
==================
75bbdce;Ralf Gommers;2011-04-03 11:33:34 +0200;BUG: fix fromstring segfault with dtype=bool. Closes #1689. Thanks to Justin Peel.

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/tests/test_multiarray.py
==================
0a6be6e;Charles Harris;2011-04-03 12:55:26 -0600;ENH: ticket #1616, let loadtxt accept generators in additions to file names and file like objects. Add test for for new functionality.

==

numpy/lib/npyio.py
numpy/lib/tests/test_io.py
==================
6b6edfd;Ralf Gommers;2011-04-03 16:36:16 +0200;BUG: fix tests in test_linalg.py. Do not subclass from TestCase.

==

numpy/linalg/tests/test_linalg.py
==================
841a9a8;Ralf Gommers;2011-04-03 16:32:44 +0200;BUG: fix test issues in test_twodim_base.py. Simplify and make tests run.

==

numpy/lib/tests/test_twodim_base.py
==================
0d6fee5;Ralf Gommers;2011-04-03 16:19:13 +0200;BUG: fix test_scalarmath.py, don't use TestCase subclass for geenrator test.

==

numpy/core/tests/test_scalarmath.py
==================
7aa887c;Ralf Gommers;2011-04-03 16:14:35 +0200;BUG: do not subclass TestCase for generator tests. Runs ~80 more tests now.

==

numpy/core/tests/test_multiarray.py
==================
7497d60;Ralf Gommers;2011-04-03 16:01:47 +0200;BUG: fix allclose to work for scalar inf. Also actually runs tests.
Tests were not run before because the allclose test class was a subclass of
TestCase and used generators. This is not supported by nose, tests will be
skipped.

Also changes plain asserts to assert_().

Closes #1672. Thanks to Justin Peel for the allclose inf fix.

==

numpy/core/numeric.py
numpy/core/tests/test_numeric.py
==================
f944e32;Ralf Gommers;2011-04-03 13:19:46 +0200;TST: silence some harmless test warnings introduced by 65b77ee9.

==

numpy/core/tests/test_scalarmath.py
numpy/core/tests/test_umath.py
==================
a311969;Ralf Gommers;2011-04-03 12:33:07 +0200;ENH: add ndmin keyword to loadtxt. Closes #1562.
Thanks to Paul Anton Letnes and Derek Homeier.

==

numpy/lib/npyio.py
numpy/lib/tests/test_io.py
==================
e340e66;Ralf Gommers;2011-04-03 12:04:35 +0200;ENH: return empty array from loadtxt for an empty file. Closes #1752.
Thanks to Paul Anton Letnes and Derek Homeier.

==

numpy/lib/npyio.py
numpy/lib/tests/test_io.py
==================
a15b605;Charles Harris;2011-04-02 20:19:55 -0600;TST: add test for ticket #1458.

==

numpy/lib/tests/test_io.py
==================
3d61227;Derek Homier;2011-04-02 20:16:32 -0600;ENH: ticket #1458, make loadtxt(..., unpack=True) unpack structured array fields.

==

numpy/lib/npyio.py
==================
9b354f4;Charles Harris;2011-04-02 17:08:34 -0600;TST: Add test for ticket #1559.

==

numpy/ma/tests/test_regression.py
==================
abaaeec;weathergod;2010-11-21 19:06:26 -0700;BUG: Fix atleast_1d and atleast_2d to work with masked arrays.

==

numpy/core/shape_base.py
==================
49320e8;Pauli Virtanen;2011-04-03 00:35:00 +0200;STY: core/buffer: handle also cases where descr->subarray->shape is not a tuple
Currently, Numpy does not create such dtypes, but this is a sanity check
for 3rd party code that might.

==

numpy/core/src/multiarray/buffer.c
==================
7b39b9e;Pauli Virtanen;2011-04-02 22:56:41 +0200;BUG: core/pickle: use only non-interned strings as buffer in unpickled arrays (#1708)
Using strings as mutable buffers is "evil" (since strings are
immutable), but it should "work" for non-interned strings.  On Python 3,
bytes are never interned, and so should also work.

==

numpy/core/src/multiarray/methods.c
numpy/core/tests/test_regression.py
==================
4a43e74;Pauli Virtanen;2011-04-02 22:57:31 +0200;STY: core/pickle: fix minor refcount issues in array_setstate

==

numpy/core/src/multiarray/methods.c
==================
5e8e8ed;Charles Harris;2011-04-02 14:36:14 -0600;BUG: ticket #1428, allow int64 and uint64 integer types to be specified in genfromtxt.

==

numpy/lib/_iotools.py
numpy/lib/tests/test__iotools.py
==================
5d5266c;Christoph Gohlke;2011-04-02 12:39:29 -0600;BUG: ticket #1565, fix conversion of int64 and uint64 types by loadtxt. Add some tests for these types.

==

numpy/lib/npyio.py
numpy/lib/tests/test_io.py
==================
e05da9e;Charles Harris;2011-04-02 13:08:29 -0600;WHT: Cleanup trailing whitespace.

==

numpy/lib/_iotools.py
numpy/lib/financial.py
numpy/lib/polynomial.py
numpy/lib/twodim_base.py
numpy/lib/type_check.py
==================
f9c7bde;Eli Stevens;2011-03-24 21:50:27 -0700;ENH: Changes (and tests) to allow exporting half-floats through the buffer interface. (#1789)
Code:
Added NPY_HALF to switch (descr->type_num) in _buffer_format_string.
Added 'e' keys to the _pep3118_native_map and _pep3118_standard_map.

Tests:
Added entries to the generic round-trip tests.
Added specialized half-float test that round-trips example values from the wikipedia page.

http://en.wikipedia.org/wiki/Half_precision_floating-point_format
http://mail.scipy.org/pipermail/numpy-discussion/2011-March/055795.html

==

numpy/core/_internal.py
numpy/core/src/multiarray/buffer.c
numpy/core/tests/test_multiarray.py
==================
65b77ee;Pauli Virtanen;2011-04-02 19:54:04 +0200;BUG: core: make complex division by zero to yield inf properly (#1776)

==

numpy/core/src/scalarmathmodule.c.src
numpy/core/src/umath/loops.c.src
numpy/core/tests/test_scalarmath.py
numpy/core/tests/test_umath.py
==================
b8101c9;Ralf Gommers;2011-04-02 13:23:30 +0200;BLD: do not install swig/cython/pyrex files. See #1791.
This is not a complete fix yet. Should be handled correctly in binary
installers.

==

MANIFEST.in
setup.py
==================
250245d;Ralf Gommers;2011-04-02 15:48:58 +0200;DOC: improve clarity of window function docs.
Thanks to Yury Zaytsev for the suggestion.

==

numpy/lib/function_base.py
==================
857e191;Michael Droettboom;2011-03-31 15:47:54 -0400;DOC: Changes required to the configuration to start building docs with matplotlib's plot_directive.  Requires that matplotlib have the new "merged" plot_directive. (#1074)

==

doc/source/conf.py
==================
1dcf0c9;Ralf Gommers;2011-03-29 20:02:13 +0200;BUG: handle empty inputs in cov and corrcoef. Closes #1773.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
89db53b;Pauli Virtanen;2011-04-02 10:18:29 +0200;BUG: core/buffer: fix another offset counting bug in pep-3118 format string generation

==

numpy/core/src/multiarray/buffer.c
numpy/core/tests/test_multiarray.py
==================
f04bacb;Charles Harris;2011-04-01 20:55:18 -0600;DOC: Document the changed default error handling for the 1.6.x release.

==

doc/release/1.6.0-notes.rst
==================
d44e74d;Robert Kern;2011-04-01 17:48:39 -0500;DOC: Remove the advice to 'import scipy as sp' from the documentation. Correct a statement about how doctest namespaces are initialized in scipy.

==

doc/HOWTO_DOCUMENT.rst.txt
doc/TESTS.rst.txt
doc/example.py
==================
99836f3;Charles Harris;2011-04-01 19:55:15 -0600;Merge branch 'warnings'

==
==================
23ccc33;Robert Kern;2011-04-01 18:41:42 -0500;BUG: Move the default errstate test over to the right place. Fix the seterr test case to take the new defaults into account.

==

numpy/core/tests/test_errstate.py
numpy/core/tests/test_numeric.py
==================
7129ec3;Robert Kern;2011-04-01 17:37:02 -0500;BUG: Add test for the default error state.

==

numpy/core/tests/test_errstate.py
==================
dc22394;Robert Kern;2011-03-30 17:48:43 -0500;ENH: Change the default error handling to warn instead of print, except for underflow, which remains ignored.

==

numpy/core/include/numpy/ufuncobject.h
numpy/core/numeric.py
numpy/doc/misc.py
==================
ef46a09;Pauli Virtanen;2011-04-01 23:11:17 +0200;BUG: core/buffer: fix bug in pep-3118 format strings for aligned structs
The offset counting for struct fields occurred in a wrong location.
Tests added.

==

numpy/core/src/multiarray/buffer.c
numpy/core/tests/test_multiarray.py
==================
fdf84d9;Ralf Gommers;2011-03-31 12:52:13 +0200;BUG: make histogramdd work with infinite size bins. Closes #1788.
Also add more informative error messages for wrongly specified bins, for both
histogram and histogram2d/dd.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
689b68c;Ralf Gommers;2011-04-01 21:21:12 +0200;TST: lower precision for one more test in random. Closes #1768. Again.

==

numpy/random/tests/test_random.py
==================
7134a93;Pearu Peterson;2011-03-31 09:46:47 +0300;BUG: fix f2py bug in generating interfaces for assumed shape support as an addition to 4d43ec5.

==

numpy/f2py/crackfortran.py
==================
706c9b6;Charles Harris;2011-03-30 19:52:03 -0600;Merge branch 'test-genfromtxt-fname' of git://github.com/matthew-brett/numpy into test-genfromtxt-fname

==
==================
51a1895;Pauli Virtanen;2011-03-30 22:24:41 +0200;BUG: lib: catch SWIG NameError in lookfor (#1704)
Thanks to sebhaase for the patch.

==

numpy/lib/utils.py
==================
354d7a3;Matthew Brett;2011-03-29 18:23:07 -0700;BUG: open genfromtxt file as binary; add test for filename use

==

numpy/lib/npyio.py
numpy/lib/tests/test_io.py
==================
3ebc348;Ralf Gommers;2011-03-29 21:56:25 +0200;DEP: deprecate normed kw in histogram and restore its old behavior. Introduce density kw.
This reverts part of the following commits:
    3743430e
    400a2a67
    3743430e
Behavior for normed keyword is again the same as it was in Numpy 1.5. The
desired behavior (probability density) is implemented by the new density
keyword, which reflects the functionality better than "normed".

For a discussion on this issue, see the Numpy mailing list thread started on
Aug 6th, 2010.

==

doc/release/1.6.0-notes.rst
numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
d8b1b5a;Ralf Gommers;2011-03-30 18:30:58 +0200;DOC: correct note about correspondence vstack and concatenate. Closes #1446.

==

numpy/core/shape_base.py
==================
2788f53;Ralf Gommers;2011-03-25 17:06:19 +0100;ENH: distutils: provide better support for C++ code on HPUX. Closes #1383.

==

numpy/distutils/unixccompiler.py
==================
135e941;Ralf Gommers;2011-03-25 16:03:00 +0100;BUG: distutils: update HP compiler flags. Closes #1377.

==

numpy/distutils/fcompiler/hpux.py
==================
a388970;Ralf Gommers;2011-03-29 23:15:22 +0200;TST: tests for deprecated decorator.

==

numpy/testing/decorators.py
numpy/testing/tests/test_decorators.py
==================
dce8638;Ralf Gommers;2011-03-29 19:02:39 +0200;BUG: make np.median() work for 0-D arrays. Also add tests. Closes #1747.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
a6c2ac7;Ralf Gommers;2011-03-29 18:25:13 +0200;DOC: correct signature and description of ndarray.getfield.

==

numpy/add_newdocs.py
==================
4b45c32;Ralf Gommers;2011-03-29 17:49:19 +0200;TST: add some tests for array2print.

==

numpy/core/tests/test_arrayprint.py
==================
1ad0311;Ralf Gommers;2011-03-29 17:17:24 +0200;BUG: make correlate/convolve work also with unicode mode arg. Closes #1705.

==

numpy/core/numeric.py
==================
c2081ae;Ralf Gommers;2011-03-25 12:25:26 +0100;DOC: add deprecation section to docstandard. Closes #1501.

==

doc/HOWTO_DOCUMENT.rst.txt
==================
c343611;Ralf Gommers;2011-03-25 12:13:48 +0100;DOC: update class method docstring section of docstandard. Closes #1165.

==

doc/HOWTO_DOCUMENT.rst.txt
==================
9c570e8;Ralf Gommers;2011-03-25 12:08:31 +0100;DOC: update References section of docstandard. Closes #1509, #1524.

==

doc/HOWTO_DOCUMENT.rst.txt
==================
b11ae17;Ralf Gommers;2011-03-25 12:02:44 +0100;DOC: add description of how to document modules to the doc standard.
Closes #1280.

==

doc/HOWTO_DOCUMENT.rst.txt
==================
99fc128;Matthew Brett;2011-03-29 00:55:51 -0700;TST: core: add more tests for struct array field names

==

numpy/core/tests/test_multiarray.py
==================
4d43ec5;Pearu Peterson;2011-03-29 10:36:37 +0300;BUG: fix f2py bug in generating interfaces for assumed shape support.

==

numpy/f2py/crackfortran.py
==================
96ac357;Pearu Peterson;2011-03-28 09:44:45 +0300;BUG: Fix f2py function wrapping (assumed_shape test) for gcc 4.5.x.

==

numpy/f2py/func2subr.py
==================
225f28c;Pearu Peterson;2011-03-27 13:26:05 +0300;BUG: f2py fix to scan literal strings with ! character, fixes ticket #1228

==

numpy/f2py/crackfortran.py
==================
f2419c0;Pearu Peterson;2011-03-27 13:08:48 +0300;Merge branch 'master' of github.com:pearu/numpy
* 'master' of github.com:pearu/numpy:
  BUG: fix f2py bug of converting an expression to variable, fixes ticket #1614.
  BUG: fixing selected_real_kind for PowerPC

==
==================
2af2e60;Ralf Gommers;2011-03-23 21:12:19 +0100;ENH: Make all histogram functions work with empty input.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_twodim_base.py
==================
87e12c1;Ralf Gommers;2011-03-24 16:30:06 +0100;BUG: Py3K: fix setup.py to work from a released tarball.
This was first fixed in commit 0131218 (but that broke the paver script), and
broken again in commit 13212a5d. Should now work in both cases.

==

pavement.py
setup.py
==================
7d436cc;Mark Wiebe;2011-03-26 16:54:07 -0700;TST: Python 2.6 doesn't implement complex.__format__, so skip the tests there

==

numpy/core/tests/test_print.py
==================
10db259;Charles Harris;2011-03-25 22:37:19 -0600;TST: Add tests for array str formatting of complex values.

==

numpy/core/tests/test_arrayprint.py
==================
664efe2;Charles Harris;2011-03-25 00:09:38 -0600;BUG: Fix str formatting of complex special values and clongdouble complex.

==

numpy/core/arrayprint.py
==================
88e8c15;Mark Wiebe;2011-03-22 14:32:11 -0700;ENH: Add scalar support for the format() function introduced in Python 2.6 (#1675)

==

numpy/core/src/multiarray/scalartypes.c.src
numpy/core/tests/test_print.py
==================
73ea5e7;Mark Wiebe;2011-03-23 14:40:03 -0700;BUG: PyArray_CopyAndTranspose function was buggy (#766)
I don't expect fastCopyAndTranspose to be able to be much faster than
using .T.copy(), since .T always returns a view. Thus, this function
implements .T.copy() in C as a replacement for the buggy code.

==

numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_api.py
==================
cf42ec0;Pauli Virtanen;2011-03-25 22:25:53 +0100;DOC: lib: point the reader towards masked arrays when there is missing data

==

numpy/lib/function_base.py
==================
ac2c160;Mark Wiebe;2011-03-25 12:37:14 -0700;DOC: Add a note about None values in the average documentation (#1180)
It was suggested in issue #1180 to add an ignore_None= parameter to
average, but I think this does not fit cleanly into NumPy, and rather
educating users about Python list comprehensions is better. This is
an attempt to do that.

==

numpy/lib/function_base.py
==================
fb486c6;Ralf Gommers;2011-03-25 15:50:47 +0100;BUG: distutils: change compile flag on AIX from -O5 to -O3. See #1261.

==

numpy/distutils/fcompiler/ibm.py
==================
d4ee39f;Pearu Peterson;2011-03-24 23:50:56 +0200;BUG: fix f2py bug of converting an expression to variable, fixes ticket #1614.

==

numpy/f2py/crackfortran.py
==================
f790773;Pearu Peterson;2011-03-24 23:59:22 +0200;Merge branch 'master' of github.com:pearu/numpy
* 'master' of github.com:pearu/numpy:
  BUG: fixing selected_real_kind for PowerPC

==
==================
e46ed8f;Pearu Peterson;2011-03-24 23:50:56 +0200;BUG: fix f2py bug of converting an expression to variable, fixes ticket #1614.

==

numpy/f2py/crackfortran.py
==================
2e96d91;Pearu Peterson;2011-03-24 22:07:43 +0200;BUG: fixing selected_real_kind for PowerPC

==

numpy/f2py/crackfortran.py
==================
37c338d;Pearu Peterson;2011-03-24 22:07:43 +0200;BUG: fixing selected_real_kind for PowerPC

==

numpy/f2py/crackfortran.py
==================
c31bcc6;Mark Wiebe;2011-03-24 12:22:12 -0700;BUG: Array shape formatting strings were wrong in the iterator (#1780)

==

numpy/core/src/multiarray/nditer.c.src
==================
8832054;Mark Wiebe;2011-03-23 15:54:44 -0700;TST: Add test for ndarray.flat modifying data (#1608)
Something appears to have fixed this issue, so creating a test
for it.

==

numpy/core/tests/test_regression.py
==================
89292bf;Mark Wiebe;2011-03-23 11:02:33 -0700;ENH: Speed up tolist() by removing intermediate temporary allocations (#1779)

==

numpy/core/src/multiarray/convert.c
==================
3d00f4a;Ralf Gommers;2011-03-22 14:55:14 +0100;DEP: change behavior of out-of-order selection of recarray fields by name.
This was deprecated in Numpy 1.5, see ticket #1431.

==

numpy/core/_internal.py
numpy/core/tests/test_records.py
==================
411adba;Ralf Gommers;2011-03-22 14:47:52 +0100;TST: change assert to assert_ in core/tests/test_records.py

==

numpy/core/tests/test_records.py
==================
1049f2a;Ralf Gommers;2011-03-22 14:32:26 +0100;BUG: fix indentation issue in distutils/intelccompiler.py

==

numpy/distutils/intelccompiler.py
==================
c0dcaf4;Ralf Gommers;2011-03-22 14:25:56 +0100;BUG: version string construction was not working with released=True

==

setup.py
==================
feed705;Mark Wiebe;2011-03-22 11:26:31 -0700;DOC: The nditer exposure wasn't linked correctly

==

doc/source/reference/routines.indexing.rst
doc/source/reference/routines.rst
==================
b8042db;Ralf Gommers;2011-03-22 10:01:44 +0100;API: update C API version hash after rename of nditer.niter -> nditer.nop
This is the version for 1.6.0b1, so should not be changed anymore. If any more
changes, up the version to 7.

==

numpy/core/code_generators/cversions.txt
==================
ac3cba3;Mark Wiebe;2011-03-17 23:18:23 -0700;DOC: Slight improvements to the Python nditer exposure

==

numpy/add_newdocs.py
==================
3692b16;Mark Wiebe;2011-03-17 22:22:04 -0700;API: Rename 'niter' to 'nop' in the nditer
This name was chosen partially based on the previous multi-iter,
which stored an array of iterators, so 'niter' made sense. In the
new nditer, it doesn't, and 'nop' for number of operands seems better.

==

doc/source/reference/c-api.iterator.rst
numpy/add_newdocs.py
numpy/core/code_generators/numpy_api.py
numpy/core/src/multiarray/nditer.c.src
numpy/core/src/multiarray/nditer_pywrap.c
numpy/core/src/umath/ufunc_object.c
==================
d1506b4;Charles Harris;2011-03-17 22:02:40 -0600;DOC: slogdet was added in 1.5.0.

==

doc/release/1.6.0-notes.rst
==================
1fe8136;Ralf Gommers;2011-03-16 19:03:33 +0800;REL: 1.6.x branch created, master open for development of Numpy 2.0

==

setup.py
==================
8f860dc;Mark Wiebe;2011-03-16 01:14:27 -0700;DOC: Fill in more of the nditer docs

==

doc/source/reference/routines.rst
numpy/add_newdocs.py
==================
56a6070;Ralf Gommers;2011-03-16 13:29:13 +0800;DOC: document nditer and its methods. Some blanks left to fill in.

==

numpy/add_newdocs.py
==================
cf4a16e;Ralf Gommers;2011-03-16 11:31:35 +0800;DOC: Change newiter to nditer in new iterator NEP.

==

doc/neps/new-iterator-ufunc.rst
==================
5ee9804;Ralf Gommers;2011-03-16 10:44:23 +0800;TST: lower precision of lognormal test a little more. Closes #1768.
Thanks to Mark Sienkiewicz for testing.

==

numpy/random/tests/test_random.py
==================
aada933;Mark Wiebe;2011-03-15 11:14:03 -0700;ENH: Add 'subok' parameter to PyArray_NewLikeArray, np.empty_like, np.zeros_like, and np.ones_like
This way, the sub-type can be avoided if necessary. This helps mitigate,
but doesn't fix, ticket #1753, by allowing "b = np.empty_like(a, subok=False)".

==

doc/source/reference/c-api.array.rst
numpy/add_newdocs.py
numpy/core/numeric.py
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_numeric.py
==================
c1bec1d;Charles Harris;2011-03-15 11:10:24 -0600;BUG: Fix ticket #1770, segfault with python 3.2 structured array non-existent field.

==

numpy/core/src/multiarray/mapping.c
numpy/core/tests/test_regression.py
==================
c010f2f;Charles Harris;2011-03-15 09:01:34 -0600;Merge branch 'deprecate'

==
==================
1f862c7;Charles Harris;2011-03-14 17:50:55 -0600;DEP: Deprecate direct import of implementation functions.

==

numpy/polynomial/__init__.py
==================
7ee96bd;Mark Wiebe;2011-03-14 22:21:05 -0700;API: Rename 'coords' to 'multi-index' in ravel_coords and iterator API

==

doc/release/1.6.0-notes.rst
doc/source/reference/c-api.iterator.rst
doc/source/reference/routines.indexing.rst
numpy/add_newdocs.py
numpy/core/code_generators/numpy_api.py
numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/nditer.c.src
numpy/core/src/multiarray/nditer_pywrap.c
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_iterator.py
numpy/lib/index_tricks.py
numpy/lib/src/_compiled_base.c
numpy/lib/tests/test_index_tricks.py
==================
2411b7b;Ralf Gommers;2011-03-15 13:16:25 +0800;DOC: fix some reST errors in core/defchararray.py

==

numpy/core/defchararray.py
==================
cb063b2;Ralf Gommers;2011-03-15 10:33:51 +0800;TST: Some tests in random module were failing on RHEL4 due to too high precision.
It is not yet confirmed this is the right precision, since I don't have an
RHEL4 test machine. Changing this anyway for 1.6.0 beta 1.

See ticket 1768.

==

numpy/random/tests/test_random.py
==================
f089476;Charles Harris;2011-03-14 10:50:08 -0600;DOC: Document the addition of the new polynomials in the release notes.

==

doc/release/1.6.0-notes.rst
==================
cd97607;Charles Harris;2011-03-14 10:22:02 -0600;Merge branch 'poly'

==
==================
c2e4c9c;Charles Harris;2011-03-14 10:18:36 -0600;BUG: Fix valueerror typo.

==

numpy/polynomial/hermite_e.py
==================
a9f4f3c;Charles Harris;2011-03-13 23:11:56 -0600;DOC: Add examples for hermite, hermite_e, and laguerre polynomials.

==

numpy/polynomial/hermite.py
numpy/polynomial/hermite_e.py
numpy/polynomial/laguerre.py
==================
782ba88;Ralf Gommers;2011-03-14 18:10:03 +0800;DOC: BLD: fix some doc build warnings.
Word of warning: do not use Sphinx 1.0.7 (latest release), its autodoc
extension is broken. 1.0.4 works fine.

==

doc/source/reference/arrays.scalars.rst
doc/source/reference/routines.char.rst
pavement.py
==================
6880bea;Mark Wiebe;2011-03-14 01:07:46 -0700;STY: Rename NPY_ITER_NO_INNER_ITERATION to NPY_ITER_EXTERNAL_LOOP
It's a little bit shorter, and more intuitively expresses what the
flag does.

==

doc/source/reference/c-api.iterator.rst
numpy/core/code_generators/numpy_api.py
numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/einsum.c.src
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/nditer.c.src
numpy/core/src/multiarray/nditer_pywrap.c
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_iterator.py
numpy/lib/src/_compiled_base.c
==================
6c7d3dd;Mark Wiebe;2011-03-13 23:58:35 -0700;BUG: Another iterator broadcasting error message had a reversed shape

==

numpy/core/src/multiarray/nditer.c.src
numpy/core/tests/test_iterator.py
==================
2b9dfd4;Mark Wiebe;2011-03-13 23:37:53 -0700;STY: Rename source files for the iterator to nditer_*.*

==

numpy/core/SConscript
numpy/core/code_generators/genapi.py
numpy/core/setup.py
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/multiarraymodule_onefile.c
numpy/core/src/multiarray/nditer.c.src
numpy/core/src/multiarray/nditer_pywrap.c
numpy/core/src/multiarray/nditer_pywrap.h
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/src/multiarray/new_iterator_pywrap.h
numpy/core/tests/test_iterator.py
numpy/core/tests/test_new_iterator.py
==================
3753939;Mark Wiebe;2011-03-13 19:18:43 -0700;ENH: Rename 'np.newiter' to 'np.nditer'

==

numpy/core/numeric.py
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/tests/test_new_iterator.py
==================
52edb94;Mark Wiebe;2011-03-13 19:13:01 -0700;DOC: Add info about iterator, new functions, and C API additions to release notes

==

doc/release/1.6.0-notes.rst
numpy/add_newdocs.py
==================
becc125;Charles Harris;2011-03-13 19:56:10 -0600;ENH: Import Hermite, HermiteE, and Laguerre into package namespace.

==

numpy/polynomial/__init__.py
==================
0a7870d;Charles Harris;2011-03-13 19:46:02 -0600;ENH: Change test_trimdeg to test_cutdeg to match method name.

==

numpy/polynomial/tests/test_hermite.py
numpy/polynomial/tests/test_laguerre.py
==================
6799e99;Charles Harris;2011-03-13 19:43:46 -0600;BUG: Fix wrong target values. Change Hermite_e to HermiteE, rename test_trimdeg to test_cutdeg to match method name.

==

numpy/polynomial/tests/test_hermite_e.py
==================
8ddfe35;Charles Harris;2011-03-13 19:41:10 -0600;BUG: Fix hermemulx, rename class to HermiteE, and move __all__ after imports.

==

numpy/polynomial/hermite_e.py
==================
bb70738;Charles Harris;2011-03-13 19:38:54 -0600;ENH: Rename test_trimdeg  to test_cutdeg to match method and add ability to run as script.

==

numpy/polynomial/tests/test_chebyshev.py
numpy/polynomial/tests/test_legendre.py
numpy/polynomial/tests/test_polynomial.py
==================
16041b5;Charles Harris;2011-03-03 21:13:13 -0700;ENH: A window attribute in polytemplate. This is helpful in defining the mappings for the Hermite and Laguerre polynomials where the domains have infinite bounds. The window allows one to specify the interval that the domain maps to instead of using the default domain as was done before.

==

numpy/polynomial/polytemplate.py
==================
f047f99;Mark Wiebe;2011-03-13 18:34:51 -0700;DOC: Document constructor API change, and fill in some more missing documentation

==

doc/source/reference/c-api.array.rst
doc/source/reference/c-api.iterator.rst
doc/source/reference/c-api.types-and-structures.rst
==================
c5c3cb9;Mark Wiebe;2011-03-13 17:17:51 -0700;API: Simplify basic iterator constructors, add 'itershape' to advanced iterator constructor

==

numpy/core/code_generators/numpy_api.py
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/einsum.c.src
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_new_iterator.py
numpy/lib/src/_compiled_base.c
==================
c3f4e89;Pearu Peterson;2011-03-13 13:39:17 +0200;DOC: Updated f2py related release notes.

==

doc/release/1.6.0-notes.rst
==================
b598d9c;Pearu Peterson;2011-03-13 12:54:53 +0200;ENH: f2py: support Fortran size function with two arguments (ticket #1765).

==

numpy/f2py/crackfortran.py
numpy/f2py/tests/src/size/foo.f90
numpy/f2py/tests/test_size.py
==================
30ee1d3;rgommers;2011-03-13 17:10:36 +0800;DOC: update 1.6.0 release notes. Add headers for items to still be filled in.

==

doc/release/1.6.0-notes.rst
==================
45269ee;rgommers;2011-03-12 19:58:10 +0800;BUG: fix assert_almost_equal and co. to work with infs.

==

numpy/testing/tests/test_utils.py
numpy/testing/utils.py
==================
0de7890;rgommers;2011-03-11 12:25:15 +0800;ENH: add files generated during build and site.cfg to .gitignore.

==

.gitignore
==================
5289230;Mark Wiebe;2011-03-11 12:03:11 -0800;BUG: For compatibility with 1.5, revert to permitting limited broadcasting of the assignment output
This change got Travis's -10 veto for 1.6.

An unfortunate consequence of reverting this is that some of the broadcasting
error messages get worse, but they're still no worse than in 1.5.

==

doc/source/reference/c-api.array.rst
numpy/core/src/multiarray/ctors.c
numpy/core/tests/test_multiarray.py
==================
f8c38cb;Pearu Peterson;2011-03-11 14:00:10 +0200;BUG: Fixed ticket #1767. Replaced assert with assert_ calls.

==

numpy/f2py/tests/test_array_from_pyobj.py
numpy/f2py/tests/test_assumed_shape.py
numpy/f2py/tests/test_callback.py
numpy/f2py/tests/test_kind.py
numpy/f2py/tests/test_mixed.py
numpy/f2py/tests/test_return_character.py
numpy/f2py/tests/test_return_complex.py
numpy/f2py/tests/test_return_integer.py
numpy/f2py/tests/test_return_logical.py
numpy/f2py/tests/test_return_real.py
==================
61a54aa;rgommers;2011-03-11 16:12:20 +0800;TST: make the knownfail for TestClog unconditional on Windows.
This keeps on coming up, and checking a few corner cases does not guarantee
that other corner cases are also implemented according to the C99 standard.

Was reported again by Christoph Gohlke for Python 2.7 and 3.2 on 64-bit
Windows.

==

numpy/core/tests/test_umath_complex.py
==================
082903e;rgommers;2011-03-11 18:02:11 +0800;TST: Py3K: fix bytes/string test failure in numpy.random.bytes() test.

==

numpy/random/tests/test_random.py
==================
7ca223e;rgommers;2011-03-11 17:42:08 +0800;TST: fix ResourceWarning under Python 3.2

==

numpy/lib/tests/test_regression.py
==================
87e0f55;Pearu Peterson;2011-03-11 09:40:33 +0200;Merge remote branch 'upstream/master' into f2py-assumed-shape
* upstream/master: (310 commits)
  REL: add 1.6.0 release notes.
  DEP: remove deprecated np.lib.ufunclike.log2 function.
  DOC: fix typo in test guidelines.
  DEP: remove deprecated items from ma/core.py
  DEP: remove deprecated get_numpy_include.
  DEP: remove unique1d, setmember1d and intersect1d_nu.
  DEP: remove deprecated names in fftpack.
  DEP: remove deprecated methods sync() and close() from memmap.
  DEP: Update deprecation messages in genloadtxt with a version number.
  BLD: update C API version again after Mark's renaming of functions.
  DOC: Replace 'deprecated' with 'superceded' in a few places, fix a typo.
  STY: Remove a micro-optimization to make code more clear
  DOC: Add some missing documentation, hyper-link the iterator documentation
  API: Remove PyArray_FillWithZero from public API
  API: Rename the iterator function pointer types to be more consistent with NumPy convention
  STY: Work around lack of variadic macros in debug tracing
  API: Change iterator API parameters ndim and niter from npy_intp to int
  ENH: add Intel 64-bit C compiler. Closes #960.
  TST: fix two divide-by-zero test warnings.
  BUG: Broadcast shape was backwards in error message (Ticket #1762)
  ...

==
==================
7bb54ef;rgommers;2011-03-11 14:36:54 +0800;REL: add 1.6.0 release notes.

==

doc/release/1.6.0-notes.rst
doc/release/2.0.0-notes.rst
==================
f7a4ff1;rgommers;2011-03-07 10:40:53 +0800;DEP: remove deprecated np.lib.ufunclike.log2 function.

==

numpy/lib/tests/test_ufunclike.py
numpy/lib/ufunclike.py
==================
216799c;rgommers;2011-03-07 10:28:13 +0800;DOC: fix typo in test guidelines.

==

doc/TESTS.rst.txt
==================
ceb9ded;rgommers;2011-03-07 10:24:03 +0800;DEP: remove deprecated items from ma/core.py
The following are removed:
  - MaskedArray.raw_data method
  - MaskedArray flag keyword
  - make_mask flag keyword
  - allclose fill_value keyword

Also change some assert's to assert_().

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
083f6e1;rgommers;2011-03-07 09:38:32 +0800;DEP: remove deprecated get_numpy_include.

==

doc/swig/test/setup.py
numpy/lib/tests/test_regression.py
numpy/lib/utils.py
==================
44ae46c;rgommers;2011-03-07 09:12:50 +0800;DEP: remove unique1d, setmember1d and intersect1d_nu.

==

numpy/lib/arraysetops.py
numpy/lib/benchmarks/bench_arraysetops.py
numpy/lib/tests/test_arraysetops.py
numpy/ma/extras.py
==================
f791984;rgommers;2011-03-07 08:59:38 +0800;DEP: remove deprecated names in fftpack.

==

doc/summarize.py
numpy/fft/fftpack.py
==================
a4fed55;rgommers;2011-03-06 22:40:11 +0800;DEP: remove deprecated methods sync() and close() from memmap.

==

numpy/core/memmap.py
numpy/core/tests/test_memmap.py
==================
a22b32b;rgommers;2011-03-06 22:33:07 +0800;DEP: Update deprecation messages in genloadtxt with a version number.
Because the docstring was still using `skiprows` explicitly, that keyword can
not yet be removed. Should be done for 2.0.

==

numpy/lib/npyio.py
==================
08e8306;rgommers;2011-03-11 12:01:31 +0800;BLD: update C API version again after Mark's renaming of functions.

==

numpy/core/code_generators/cversions.txt
==================
859c269;Mark Wiebe;2011-03-10 18:34:35 -0800;DOC: Replace 'deprecated' with 'superceded' in a few places, fix a typo.

==

doc/source/reference/c-api.array.rst
doc/source/reference/c-api.iterator.rst
==================
9001b79;Mark Wiebe;2011-03-10 18:37:17 -0800;STY: Remove a micro-optimization to make code more clear

==

numpy/core/src/multiarray/new_iterator.c.src
==================
65b4a8a;Mark Wiebe;2011-03-10 10:52:24 -0800;DOC: Add some missing documentation, hyper-link the iterator documentation

==

doc/source/reference/c-api.array.rst
doc/source/reference/c-api.iterator.rst
==================
f567479;Mark Wiebe;2011-03-10 01:02:15 -0800;API: Remove PyArray_FillWithZero from public API
This function is too specific. A function like
PyArray_FillWithValue(PyArrayObject *ao, double value)
would be better.

==

numpy/core/code_generators/numpy_api.py
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/convert.h
numpy/core/src/multiarray/einsum.c.src
==================
0c0c49c;Mark Wiebe;2011-03-10 00:52:59 -0800;API: Rename the iterator function pointer types to be more consistent with NumPy convention
'NpyIter_IterNext_Fn' -> 'NpyIter_IterNextFunc *'
'NpyIter_GetCoords_Fn' -> 'NpyIter_GetCoordsFunc *'

==

doc/source/reference/c-api.iterator.rst
numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/einsum.c.src
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/src/umath/ufunc_object.c
numpy/lib/src/_compiled_base.c
==================
72ef8a6;Mark Wiebe;2011-03-10 00:38:41 -0800;STY: Work around lack of variadic macros in debug tracing

==

numpy/core/src/multiarray/einsum.c.src
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/umath/ufunc_object.c
==================
ec151cc;Mark Wiebe;2011-03-10 00:23:26 -0800;API: Change iterator API parameters ndim and niter from npy_intp to int
These parameters are never large, so it's better to use a straight int
instead of npy_intp, consistent with ndim in PyArrayObject as well.

==

doc/source/reference/c-api.iterator.rst
numpy/core/src/multiarray/einsum.c.src
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/src/umath/ufunc_object.c
==================
dede269;rgommers;2011-03-09 22:10:13 +0800;ENH: add Intel 64-bit C compiler. Closes #960.

==

numpy/distutils/ccompiler.py
numpy/distutils/intelccompiler.py
==================
46ce29d;rgommers;2011-03-11 00:27:09 +0800;TST: fix two divide-by-zero test warnings.

==

numpy/core/tests/test_umath_complex.py
numpy/ma/tests/test_subclassing.py
==================
9e28fce;Mark Wiebe;2011-03-10 12:07:49 -0800;BUG: Broadcast shape was backwards in error message (Ticket #1762)

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/tests/test_new_iterator.py
==================
326afca;Charles Harris;2011-03-10 12:41:20 -0700;BUG: Replace inline with NPY_INLINE.

==

numpy/core/src/multiarray/iterators.c
==================
0470746;Charles Harris;2011-03-10 10:29:03 -0700;Merge branch 'poisson-fix'

==
==================
e1e5760;Charles Harris;2011-03-10 10:21:04 -0700;CYT: Regenerate mtrand.c file.

==

numpy/random/mtrand/mtrand.c
==================
df09a3f;Charles Harris;2011-03-10 10:20:11 -0700;TST: Add test for poisson exceptions.

==

numpy/random/tests/test_random.py
==================
8cd4faa;Charles Harris;2011-03-09 21:17:33 -0700;ENH: Add check for maximum average allowed in poisson rng. Original implementation due to olsonse.

==

numpy/random/mtrand/mtrand.pyx
==================
3882d65;rgommers;2011-03-09 11:04:22 +0800;BLD: Increase C API version. Necessary because new C API functions were added.
This removes the MismatchCAPIWarning at the beginning of the build.

==

numpy/core/code_generators/cversions.txt
numpy/core/setup_common.py
==================
b94585c;Charles Harris;2011-03-09 19:46:53 -0700;Merge branch 'pandas-fix'

==
==================
ce9fea2;rgommers;2011-03-09 21:29:09 +0800;BUG: fix 64-bit Intel Fortran compiler detection. Closes #1448.

==

numpy/distutils/fcompiler/intel.py
numpy/distutils/tests/test_fcompiler_intel.py
==================
f432234;rgommers;2011-03-09 21:38:04 +0800;BUG: did not intend to change default tolerances in assert_allclose. Revert.

==

numpy/testing/utils.py
==================
f527b49;rgommers;2011-03-09 19:04:42 +0800;DOC: Update the docs for numpy.testing - prefer allclose and nulp funcs. Closes #1543.

==

numpy/testing/utils.py
==================
4aaa4b7;Charles Harris;2011-03-08 20:09:38 -0700;ENH: Make discover_dimensions pass thru all errors in list/mapping processing except KeyError. In the latter case an object is forced.

==

numpy/core/src/multiarray/ctors.c
numpy/core/tests/test_multiarray.py
==================
ab9be92;rgommers;2011-03-09 10:55:40 +0800;BUG: fix compilation with MSVC 2008. Thanks to Christoph Gohlke.

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/einsum.c.src
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/umath/ufunc_object.c
==================
3e135e2;Charles Harris;2011-03-08 18:12:16 -0700;STY: Remove uneeded stdio.h include.

==

numpy/core/src/multiarray/ctors.c
==================
ea403b5;Charles Harris;2011-03-08 17:56:00 -0700;DOC: Make clear that class in test breaks the sequence protocol.

==

numpy/core/tests/test_multiarray.py
==================
891bc2e;Charles Harris;2011-03-08 17:44:12 -0700;BUG: Fix cut and paste error.

==

numpy/core/src/multiarray/ctors.c
==================
cef5008;Charles Harris;2011-03-08 10:21:25 -0700;DOC: Improve the content of a comment.

==

numpy/core/src/multiarray/ctors.c
==================
90e4cf0;Charles Harris;2011-03-08 09:11:21 -0700;TST: Add test for robustness with non-sequence detected as sequence.

==

numpy/core/tests/test_multiarray.py
==================
702ae6a;rgommers;2011-03-08 16:11:00 +0800;REL: update release scripts for Python 3.2.

==

pavement.py
release.sh
==================
c3f9989;Charles Harris;2011-03-07 22:42:40 -0700;ENH: Make comment more informative.

==

numpy/core/src/multiarray/ctors.c
==================
9e84549;Charles Harris;2011-03-07 22:29:29 -0700;Make a failed sequence access error set the object creation flag.

==

numpy/core/src/multiarray/ctors.c
==================
7fa6284;Charles Harris;2010-11-21 14:39:12 -0700;ENH: Use fmax.reduce and fmin.reduce to implement nanmax and nanmin.

==

numpy/lib/function_base.py
==================
c199d96;Charles Harris;2010-11-21 14:37:27 -0700;BUG: Use isnan to test for nan, avoids problems with signed nans. Replace assert with assert_. Cleanup trailing whitespace.

==

numpy/lib/tests/test_function_base.py
==================
f143ebe;Charles Harris;2010-11-21 13:26:18 -0700;ENH: Add tests for reduce method of maximum, minimum, fmax and fmin.

==

numpy/core/tests/test_umath.py
==================
c2747b0;Charles Harris;2010-11-19 21:47:33 -0700;ENH: Speed up reduce for maximum/minimum type ufuncs.

==

numpy/core/src/umath/loops.c.src
==================
60adb1a;Charles Harris;2011-03-07 18:24:35 -0700;BUG: Preliminary fix for ticket #1757.

==

numpy/core/src/multiarray/ctors.c
==================
b28b115;Mark Wiebe;2011-03-07 12:04:05 -0800;BUG: Field's subarray access of scalar was incorrectly Fortran (Ticket #1760)
This was the consequence of a previous bugfix which set the NPY_F_CONTIGUOUS
flag for scalars.

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/methods.c
numpy/core/tests/test_regression.py
==================
c081ad7;rgommers;2011-03-07 12:55:55 +0800;DOC: Revert part of previous commit, moving umath docs did not work.
If the ldexp/frexp docs belong in ufunc_docsrtings.py, they need an entry in
core/code_generators/generate_umath.py. See #1759.

==

numpy/add_newdocs.py
numpy/core/code_generators/ufunc_docstrings.py
==================
51b5c58;rgommers;2011-03-07 12:25:37 +0800;DOC: add a few more wiki edits, and move umath docs to correct place.

==

numpy/add_newdocs.py
numpy/core/code_generators/ufunc_docstrings.py
numpy/core/fromnumeric.py
numpy/doc/structured_arrays.py
==================
898e6bd;rgommers;2011-03-06 18:04:45 +0800;TST: add test for random distributions. Closes #1512.
These tests ensure that returned values stay the same, which is necessary
because other tests rely on this when setting a fixed seed.

Thanks to Vincent Davis.

==

numpy/random/tests/test_random.py
==================
efb3295;Mark Wiebe;2011-03-05 12:37:31 -0800;DOC: Copy iterator API documentation from the NEP

==

doc/source/reference/c-api.iterator.rst
doc/source/reference/c-api.rst
==================
2924d76;Charles Harris;2011-03-05 18:41:09 -0700;ENH: Increase test coverage a bit to test all the fast paths.

==

numpy/core/tests/test_regression.py
==================
766cac0;Mark Wiebe;2011-03-05 13:03:15 -0800;BUG: Fix zero-padded copy when truncating (ticket #1756)
Chuck's fix was correct, but there was another bug at play here.

I've also removed the _strided_to_contig and _contig_to_strided
specializations as they likely don't provide a significant advantage
over _strided_to_strided here.

==

numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/lowlevel_strided_loops.c.src
==================
677d349;Charles Harris;2011-03-05 15:34:43 -0700;BUG: Fix string in test for python 3k.

==

numpy/core/tests/test_regression.py
==================
3f0f12f;Charles Harris;2011-03-05 15:21:12 -0700;ENH: Add test for ticket #1756.

==

numpy/core/tests/test_regression.py
==================
9eee670;Charles Harris;2011-03-05 14:55:13 -0700;BUG: Fix error in _strided_to_contig. Fixes ticket #1756.

==

numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/lowlevel_strided_loops.c.src
==================
5aa65d9;zed;2011-03-04 18:12:58 -0700;TYP: Fix typo.

==

INSTALL.txt
==================
cfff750;Mark Wiebe;2011-03-04 11:16:12 -0800;BUG: Fix CastToType to handle string->string casts (ticket #1748)

==

numpy/core/src/multiarray/convert_datatype.c
numpy/core/tests/test_regression.py
==================
13212a5;rgommers;2011-03-04 00:13:08 +0800;BUG: fix up setup.py and pavement.py so the binary builds work again.

==

pavement.py
release.sh
setup.py
==================
96c4eea;Charles Harris;2010-09-22 19:33:06 -0600;ENH: First commit of hermite and laguerre polynomials. The documentation and tests still need fixes.

==

numpy/polynomial/hermite.py
numpy/polynomial/hermite_e.py
numpy/polynomial/laguerre.py
numpy/polynomial/tests/test_hermite.py
numpy/polynomial/tests/test_hermite_e.py
numpy/polynomial/tests/test_laguerre.py
==================
8a5ed09;Charles Harris;2010-09-15 09:24:31 -0600;Remove unused function legtimesx, it has been replaced by legmulx.

==

numpy/polynomial/legendre.py
==================
578cbb4;Charles Harris;2011-03-03 07:47:10 -0700;BUG: add polypow, chebpow, legpow to __all__ and module documentation.

==

numpy/polynomial/chebyshev.py
numpy/polynomial/legendre.py
numpy/polynomial/polynomial.py
==================
4b8923f;rgommers;2011-03-03 14:19:19 +0800;DOC: merge wiki edit for einsum docstring.

==

numpy/add_newdocs.py
==================
821afc8;rgommers;2011-03-03 14:13:28 +0800;DOC: commit some more fixes from the doc wiki.

==

numpy/add_newdocs.py
numpy/core/numerictypes.py
numpy/lib/function_base.py
numpy/lib/npyio.py
numpy/linalg/linalg.py
==================
85813a9;rgommers;2011-03-03 14:04:50 +0800;DOC: fix some formatting errors in polynomial docs.

==

numpy/polynomial/chebyshev.py
numpy/polynomial/legendre.py
numpy/polynomial/polytemplate.py
==================
6439e35;rgommers;2011-03-02 18:25:30 +0800;DOC: document inconsistent path separator in site.cfg path lists. Closes #934.

==

site.cfg.example
==================
b52fa65;rgommers;2011-03-02 15:15:10 +0800;DOC: fix doc build complaint about too-long tables.

==

numpy/core/getlimits.py
==================
788356d;rgommers;2011-03-01 16:51:53 +0800;TST: clean up some ResourceWarnings from python 3.2.
Also make the sys.stdout temporary redirection in one of the tests a little
more robust. That is still necessary, because np.who is very noisy.

==

numpy/lib/tests/test__datasource.py
numpy/lib/tests/test_format.py
numpy/lib/tests/test_regression.py
==================
390dd85;rgommers;2011-03-01 21:44:15 +0800;DEP: fix deprecation warning from using SafeConfigParser with Python 3.2.

==

numpy/distutils/npy_pkg_config.py
numpy/distutils/system_info.py
==================
33ba9be;rgommers;2011-03-01 16:35:40 +0800;TST: replace assert with assert_

==

numpy/core/tests/test_regression.py
numpy/lib/tests/test__datasource.py
==================
4800446;rgommers;2011-03-01 16:30:56 +0800;TST: replace TestCase.assert_ (deprecated in Python 3.2) with assertTrue.

==

numpy/core/tests/test_numeric.py
numpy/core/tests/test_numerictypes.py
numpy/core/tests/test_regression.py
numpy/core/tests/test_unicode.py
==================
ee0831a;rgommers;2011-03-02 15:57:33 +0800;BUG: fix up shared library extension, which changed in Python 3.2. Closes #1749.

==

numpy/distutils/fcompiler/__init__.py
numpy/distutils/system_info.py
numpy/tests/test_ctypeslib.py
==================
05142b6;rgommers;2011-03-02 13:30:00 +0800;DOC: add some more wiki edits, of rst files in ref/user guide.

==

doc/source/reference/c-api.array.rst
doc/source/reference/distutils.rst
doc/source/reference/maskedarray.generic.rst
doc/source/user/install.rst
==================
f059c67;rgommers;2011-03-02 12:31:36 +0800;DOC: merge wiki changes for numpy.random and regenerate mtrand.c

==

numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
==================
68e33f9;rgommers;2011-03-02 12:55:04 +0800;DOC: merge wiki edits for numpy.core.

==

numpy/add_newdocs.py
numpy/core/getlimits.py
numpy/core/numeric.py
numpy/core/numerictypes.py
numpy/core/shape_base.py
==================
4ca2465;rgommers;2011-03-02 12:43:47 +0800;DOC: merge more doc wiki edits.

==

numpy/add_newdocs.py
numpy/lib/arrayterator.py
numpy/lib/function_base.py
numpy/lib/polynomial.py
numpy/ma/core.py
==================
7ef5d60;rgommers;2011-03-02 12:21:01 +0800;DOC: merge wiki changes, structured array doc.

==

numpy/doc/structured_arrays.py
==================
cbf7407;rgommers;2011-03-01 12:45:59 +0800;DOC: update notes in release script and reorganize paver script a little.

==

pavement.py
release.sh
==================
8e95e71;rgommers;2011-03-01 12:18:45 +0800;TST: update namespace usage in lib.polynomial doctests.

==

numpy/lib/tests/test_polynomial.py
==================
4eebdf9;rgommers;2011-03-01 10:32:50 +0800;BUG: correct file name in fromregex.
Thanks to Mattieu Brucher for reporting.

==

numpy/lib/npyio.py
==================
81fbb51;Pearu Peterson;2011-02-28 21:31:42 +0200;Fix bug in constructing use statement with only.

==

numpy/f2py/crackfortran.py
==================
3dfe0e1;Pearu Peterson;2011-02-27 20:23:30 +0200;Implemented selected_real_kind evaluation, added tests to catch processor dependencies..

==

numpy/f2py/crackfortran.py
==================
aea92de;Pearu Peterson;2011-02-27 17:06:26 +0200;Implemented selected_real_kind evaluation, added tests to catch processor dependencies..

==

numpy/f2py/tests/src/kind/foo.f90
numpy/f2py/tests/test_kind.py
==================
715b9c7;Pearu Peterson;2011-02-27 12:55:03 +0200;Fix assumed shape support for routines that use modules. Improved .f2py_f2cmap messages.

==

numpy/f2py/capi_maps.py
numpy/f2py/func2subr.py
numpy/f2py/tests/src/assumed_shape/.f2py_f2cmap
numpy/f2py/tests/src/assumed_shape/foo_use.f90
numpy/f2py/tests/src/assumed_shape/precision.f90
numpy/f2py/tests/test_assumed_shape.py
numpy/f2py/tests/util.py
==================
d7ea62c;Pearu Peterson;2011-02-26 19:20:52 +0200;WIP: implemented assumed shape support for Fortran subroutines.

==

numpy/f2py/auxfuncs.py
numpy/f2py/func2subr.py
numpy/f2py/rules.py
numpy/f2py/tests/src/assumed_shape/foo_free.f90
numpy/f2py/tests/test_assumed_shape.py
==================
cafd2df;Pearu Peterson;2011-02-25 22:34:48 +0200;WIP: added assumed shape array support to Fortran functions.

==

numpy/f2py/crackfortran.py
numpy/f2py/func2subr.py
numpy/f2py/tests/src/assumed_shape/foo_free.f90
numpy/f2py/tests/test_assumed_shape.py
==================
c50af53;rgommers;2011-02-20 12:45:52 +0800;DOC: update site.cfg.example with notes about umfpack/fftw.

==

site.cfg.example
==================
9e71af4;Charles Harris;2011-02-18 05:19:30 -0700;TYP: Fix typo.

==

numpy/lib/recfunctions.py
==================
af1e833;Luis Pedro Coelho;2010-11-12 10:52:19 -0500;ENH: core: Allow user to pass in output array for dot()
This avoids the memory allocation. It is strict in checking that the
types are correct, but since it is intended as an optimisation, it
should only be used when the user knows what they are doing.

The out parameter is added both to the BLAS and non-BLAS versions of dot().
Tests are included.

==

doc/source/reference/c-api.array.rst
numpy/add_newdocs.py
numpy/core/blasdot/_dotblas.c
numpy/core/code_generators/numpy_api.py
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_blasdot.py
numpy/core/tests/test_multiarray.py
==================
ca9d4a7;Pauli Virtanen;2011-02-12 16:43:00 +0100;BUG: core: fix build on Python 2.4

==

numpy/core/src/multiarray/ctors.c
==================
543dbea;Charles Harris;2011-02-11 08:45:24 -0700;BUG: Fix python3k import problem.

==

numpy/lib/index_tricks.py
==================
df57147;Charles Harris;2011-02-11 08:12:44 -0700;BUG: ticket 1741, fix python 2.5 incompatibilityr.

==

numpy/core/tests/test_regression.py
==================
f30000b;Mark Wiebe;2011-02-09 21:13:54 -0800;STY: index_tricks: Improve comments and documentation strings

==

numpy/add_newdocs.py
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/new_iterator.c.src
numpy/lib/src/_compiled_base.c
==================
bdf25de;Mark Wiebe;2011-02-08 00:50:38 -0800;ENH: index_tricks: Implement unravel_index and ravel_coords functions in C

==

doc/source/reference/routines.indexing.rst
numpy/add_newdocs.py
numpy/core/code_generators/numpy_api.py
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/new_iterator.c.src
numpy/lib/index_tricks.py
numpy/lib/src/_compiled_base.c
numpy/lib/tests/test_index_tricks.py
==================
260824f;Mark Wiebe;2011-02-10 13:19:06 -0800;ENH: einsum: Specialize contiguous reduction, add SSE prefetching
Also fix some compiler warnings. The biggest performance improvement
was from adding SSE prefetching.

==

numpy/core/src/multiarray/einsum.c.src
==================
8598315;Mark Wiebe;2011-02-09 13:09:30 -0800;BUG: core: Fix potential reference leak, possibly fix segfault ticket #1737

==

numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/umath/ufunc_object.c
==================
5d06dca;Mark Wiebe;2011-02-08 13:40:17 -0800;BUG: umath: Fix reference usage after Py_DECREF
Because of the details, I don't think this was causing a crash,
but it's a bug nonetheless.

==

numpy/core/src/umath/ufunc_object.c
==================
15850ff;Mark Wiebe;2011-02-08 11:16:46 -0800;STY: core: Rename 'dtype' parameter to 'requested_dtype' in GetArrayParamsFromObject
The first naming choice was a bit confusing, this should help make
it more clear.

==

numpy/core/src/multiarray/ctors.c
==================
1d952a5;Charles Harris;2011-02-08 06:09:35 -0700;Merge branch 'array_params_from_object' of https://github.com/m-paradox/numpy into params_from_object

==
==================
51d10b0;David Cournapeau;2011-02-08 21:29:07 +0900;BUG: fix undefined macro.
This was surprisingly not detected by gcc, but it fixes clang build.

==

numpy/core/src/multiarray/arraytypes.c.src
==================
eec4a49;David Cournapeau;2011-02-08 11:09:30 +0900;STY: remove unneeded import of ufuncobject in halffloat.c.

==

numpy/core/src/npymath/halffloat.c
==================
2c0f9f8;David Cournapeau;2011-02-08 11:08:53 +0900;BUG: fix inline definition so that it still inlines in gcc -ansi mode.

==

numpy/core/include/numpy/npy_common.h
==================
b8921fc;Mark Wiebe;2011-02-07 10:16:20 -0800;BUG: iter: The wrong stride was specialized in some cases for reduction operands

==

numpy/core/src/multiarray/lowlevel_strided_loops.c.src
numpy/core/src/multiarray/new_iterator.c.src
==================
fa5ea04;Mark Wiebe;2011-02-06 17:49:12 -0800;BUG: core: Fix regression ticket #1735

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/tests/test_regression.py
==================
2635398;Mark Wiebe;2011-02-06 15:48:45 -0800;ENH: core: Add new GetArrayParamsFromObject API function (fixes #1081)
This function allows code to query an object's "innate" type and
shape, without actually creating a NumPy array out of it.
PyArray_FromAny has been changed to use this function, as an assurance
that its implementation is correct.

This also fixes the known failure in test_regression.py.

==

numpy/core/code_generators/numpy_api.py
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/ctors.h
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_regression.py
numpy/lib/tests/test_io.py
==================
13c83fd;David Cournapeau;2011-02-07 13:57:05 +0900;BUG: tweak NPY_INLINE definition to allow compilation in gcc -pendantic mode.

==

numpy/core/include/numpy/npy_common.h
==================
c5c6b49;David Cournapeau;2011-02-07 13:56:42 +0900;BUG: fix a few C99-ism in C code.

==

numpy/core/src/multiarray/lowlevel_strided_loops.c.src
==================
24392c8;Charles Harris;2011-02-04 22:35:46 -0700;DOC: Note version minlength was added to bincount.

==

numpy/add_newdocs.py
==================
36480e9;Charles Harris;2011-02-03 16:08:08 -0700;WHT: Cleanup whitespace.

==

numpy/core/src/umath/loops.c.src
numpy/core/src/umath/loops.h
numpy/core/src/umath/loops.h.src
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/umath_tests.c.src
==================
85993f8;Mark Wiebe;2011-01-31 19:40:25 -0800;ENH: iter: Add timing code, rewrite some sections to be faster/more clear

==

numpy/core/src/multiarray/new_iterator.c.src
==================
fcc6cc7;Mark Wiebe;2011-01-31 19:42:19 -0800;ENH: core: Small tweaks to streamline things a bit

==

numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/mapping.c
==================
f60797b;Mark Wiebe;2011-01-30 23:26:43 -0800;BUG: perf: Operations like "a[10:20] += 10" were doing a redundant copy

==

numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/new_iterator.c.src
==================
3172576;Charles Harris;2011-02-03 15:25:47 -0700;BUG: Fix a compiler warning.

==

numpy/core/src/multiarray/arraytypes.c.src
==================
d37bf94;Charles Harris;2011-02-03 14:53:55 -0700;WHT: Whitespace cleanup.

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/calculation.c
numpy/core/src/multiarray/conversion_utils.c
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/einsum.c.src
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/src/multiarray/numpyos.c
numpy/core/src/multiarray/refcount.c
numpy/core/src/multiarray/sequence.c
numpy/core/src/multiarray/shape.c
numpy/core/src/multiarray/testcalcs.py
numpy/core/src/multiarray/usertypes.c
==================
8b07398;Charles Harris;2011-02-03 14:36:00 -0700;Merge branch 'einsum_changes' of https://github.com/m-paradox/numpy into einsum-changes

==
==================
0e60ecb;Mark Wiebe;2011-02-02 13:21:48 -0800;BUG: ufunc: Fix regression of accumulate with zero-size result (ticket #1733)

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_regression.py
==================
bb20bc1;Mark Wiebe;2011-02-02 12:44:23 -0800;BUG: core: Fix remaining Python 3 regressions

==

numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/src/multiarray/number.c
numpy/core/tests/test_new_iterator.py
numpy/core/tests/test_regression.py
==================
a7ffc7a;Mark Wiebe;2011-02-02 09:51:17 -0800;BLD: Fix scons and setup.py build
Moving lowlevel_strided_loops.h to private needed a setup.py update.

Added the rest of the needed files in the scons configuration.

==

numpy/core/SConscript
numpy/core/setup.py
==================
5c5d026;Mark Wiebe;2011-02-01 17:43:16 -0800;ENH: einsum: Write specialized unbuffered loops for several cases
Also converted the used inner loops to SSE2, to bring
einsum fairly close to numpy.dot's performance for matrix-vector and
matrix-matrix multiplication.

==

numpy/core/code_generators/numpy_api.py
numpy/core/src/multiarray/einsum.c.src
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/tests/test_new_iterator.py
==================
bad1607;David Cournapeau;2011-02-02 13:51:42 +0900;BLD: fix numscons build.

==

numpy/core/SConscript
numpy/core/src/multiarray/lowlevel_strided_loops.h
numpy/core/src/private/lowlevel_strided_loops.h
==================
31f6ff9;Mark Wiebe;2011-02-01 12:53:06 -0800;ENH: iter: Catch another case with fixed strides.

==

numpy/core/src/multiarray/einsum.c.src
numpy/core/src/multiarray/new_iterator.c.src
==================
f8fccd8;Mark Wiebe;2011-02-01 09:24:17 -0800;TST: einsum: Move einsum tests to a different file

==

numpy/core/tests/test_einsum.py
numpy/core/tests/test_numeric.py
==================
909e30a;Mark Wiebe;2011-01-31 14:04:44 -0800;ENH: einsum: Change function selection function to use tables

==

numpy/core/src/multiarray/einsum.c.src
==================
3b6b801;Mark Wiebe;2011-01-28 23:40:40 -0800;ENH: einsum: Change loop unrolling to be better for small loops

==

numpy/core/src/multiarray/einsum.c.src
numpy/core/tests/test_numeric.py
==================
cdb0a56;Mark Wiebe;2011-01-31 12:22:39 -0800;ENH: einsum: Add alternative einsum parameter method
This makes the following equivalent:
einsum('ii', a)
einsum(a, [0,0])

einsum('ii->i', a)
einsum(a, [0,0], [0])

einsum('...i,...i->...', a, b)
einsum(a, [Ellipsis,0], b, [Ellipsis,0], [Ellipsis])

==

numpy/add_newdocs.py
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_numeric.py
==================
abcdd9a;Mark Wiebe;2011-01-31 09:13:57 -0800;ENH: einsum: Disable broadcasting by default, allow spaces in subscripts string

==

numpy/add_newdocs.py
numpy/core/src/multiarray/einsum.c.src
numpy/core/tests/test_numeric.py
==================
ec2609e;Pauli Virtanen;2011-02-01 23:33:18 +0100;BUG: core: make Numpy build again on Python 3 and 2.4

==

numpy/core/src/multiarray/einsum.c.src
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_new_iterator.py
==================
670d081;Charles Harris;2011-02-01 09:00:09 -0700;BUG: Fix exception syntax to conform to python 2.4.

==

numpy/testing/utils.py
==================
4faf10e;Mark Wiebe;2011-01-30 13:33:15 -0800;ENH: iter: Allow copies of read-only scalar arrays even if COPY isn't specified
When buffering, this reduces the work needed by a lot. For non-reduction
operands, the iterator always provides contiguous data when an operand
is buffered, but by making a copy the operand can be flagged as never
needing buffering

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_new_iterator.py
==================
395146e;Mark Wiebe;2011-01-29 13:19:29 -0800;BUG: iter: Fix checking of allocated output with op_axes specified

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/tests/test_new_iterator.py
==================
b29d5c3;Mark Wiebe;2011-01-29 21:03:27 -0800;BUG: core: Fix "a[...] += 1" with array scalar 'a'
This was crashing, because it appears Python does this:
1. call the array_subscript to get a[...], then calls inplace add on it
2. call the array_ass_subscript with (a, Ellipsis, a), which for an object
   array was setting the single element of a to point to itself, and
   caused crashes.  This case is now checked, and success is returned
   immediately when an array is assigned to itself this way.

==

numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/number.c
numpy/core/tests/test_regression.py
==================
08fdf3b;Mark Wiebe;2011-01-29 09:58:16 -0800;WRN: core: Remove many warnings gcc produces with stricter flags

==

numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/einsum.c.src
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/npymath/npy_math_complex.c.src
numpy/core/src/scalarmathmodule.c.src
==================
cb7e0ac;Mark Wiebe;2011-01-29 01:18:05 -0800;BUG: Fix crash in PyArray_Nonzero due to uninitialized variable usage

==

numpy/core/include/numpy/npy_math.h
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/lowlevel_strided_loops.c.src
numpy/core/src/multiarray/new_iterator.c.src
==================
7bead6a;Mark Wiebe;2011-01-28 17:28:26 -0800;STY: Rename NPY_ITER_DONT_REVERSE_AXES to NPY_ITER_DONT_NEGATE_STRIDES to be more intuitive

==

doc/neps/new-iterator-ufunc.rst
numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/new_iterator.c.src
==================
ab3dcf8;Mark Wiebe;2011-01-28 16:33:58 -0800;Merge branch 'mw_neps'

==
==================
67e5476;Mark Wiebe;2011-01-28 16:27:56 -0800;Merge branch 'new_iterator' - new iterator, ufunc update, restore 1.5 ABI
New Iterator - Read doc/neps/new-iterator-ufunc.rst.
UFunc Update - Change all ufunc functions to use the new iterator.  This
               replaces the inline buffering with iterator buffering, except
               for the reductions and generalized ufunc which use updateifcopy
               at the moment.  Also adds out= and order= parameters to
               all ufuncs.
Restore 1.5 ABI - This was done by moving the new type numbers to the end
               of the type enumeration, and replacing all type promotion
               code with a table-based approach.  The ArrFuncs was
               restored by putting the new type cast functions into the
               cast dictionary, originally designed just for custom
               types.

Conflicts:
	numpy/core/src/multiarray/ctors.c
	numpy/core/tests/test_regression.py

==
==================
aedce0e;Mark Wiebe;2011-01-28 15:43:08 -0800;ENH: core: Add support for numpy.ravel(a, order='K')

==

numpy/core/fromnumeric.py
numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/shape.c
numpy/core/src/multiarray/shape.h
numpy/core/tests/test_multiarray.py
==================
0046a59;Mark Wiebe;2011-01-28 16:04:36 -0800;NEP: iter: Add NPY_ITER_DONT_REVERSE_AXES flag

==

doc/neps/new-iterator-ufunc.rst
==================
c9d1849;Mark Wiebe;2011-01-28 12:43:22 -0800;ENH: core: Add dtype= and order= parameters to zeros_like, ones_like, and empty_like

==

numpy/add_newdocs.py
numpy/core/numeric.py
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/shape.c
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_numeric.py
numpy/core/tests/test_regression.py
==================
6510cce;Mark Wiebe;2011-01-28 10:41:59 -0800;ENH: core: Add PyArray_NewLikeArray function
This function implements the numpy.empty_like semantics, but supports
the new NPY_KEEPORDER enumeration value as well as switching to a
different data type.

==

doc/source/reference/c-api.array.rst
numpy/core/code_generators/numpy_api.py
numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/ctors.c
==================
aca4c64;Mark Wiebe;2011-01-28 09:21:02 -0800;STY: core: Improve formating of ParseTuple argument lists
Now in methods.c each argument gets its own line, so its easier to validate.

==

numpy/core/src/multiarray/methods.c
==================
82bd8f9;Mark Wiebe;2011-01-26 13:38:26 -0800;VER: Change version to 1.6.0

==

setup.py
==================
211191d;Mark Wiebe;2011-01-27 21:20:17 -0800;WRN: Fix some warnings and suspicious looking code

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/buffer.c
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/flagsobject.c
numpy/core/src/multiarray/multiarraymodule.c
==================
9593758;Mark Wiebe;2011-01-27 21:19:57 -0800;BUG: Single file build had wrong promotion table type

==

numpy/core/src/multiarray/scalartypes.h
==================
b8c1f4b;Mark Wiebe;2011-01-27 15:43:37 -0800;ENH: iter: Improve performance of buffering reduce operations

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/tests/test_numeric.py
==================
779b01b;Mark Wiebe;2011-01-27 11:00:07 -0800;WRN: iter: Fix half-float warnings, other small tweaks

==

numpy/add_newdocs.py
numpy/core/src/multiarray/item_selection.c
numpy/core/src/npymath/halffloat.c
numpy/core/tests/test_regression.py
numpy/ma/testutils.py
==================
2a1706f;Mark Wiebe;2011-01-27 00:02:32 -0800;ENH: iter: Add a per-operand REDUCE flag

==

numpy/core/src/multiarray/new_iterator.c.src
==================
628e7b7;Mark Wiebe;2011-01-26 23:47:32 -0800;ENH: iter: Remove internal NPY_OP_ITFLAG_COPY flag

==

numpy/core/src/multiarray/new_iterator.c.src
==================
536ee13;Mark Wiebe;2011-01-26 23:24:24 -0800;ENH: iter: Change permutation to a fixed-size char array

==

numpy/core/src/multiarray/new_iterator.c.src
==================
01c7866;Mark Wiebe;2011-01-26 20:58:35 -0800;ENH: ufunc: Add new iterator version of generalized ufuncs

==

numpy/add_newdocs.py
numpy/core/code_generators/numpy_api.py
numpy/core/include/numpy/ufuncobject.h
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/umath/ufunc_object.c
==================
3e58b8d;Mark Wiebe;2011-01-25 23:23:30 -0800;ENH: core: Make NumPy trunk ABI-compatible with 1.5

==

numpy/add_newdocs.py
numpy/core/code_generators/numpy_api.py
numpy/core/include/numpy/ndarraytypes.h
numpy/core/setup_common.py
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/lowlevel_strided_loops.c.src
numpy/core/src/multiarray/multiarraymodule.c
==================
0a01142;Mark Wiebe;2011-01-26 16:15:46 -0800;ENH: ufunc: Move reduceat to its own function, have it use the iterator

==

numpy/core/src/umath/ufunc_object.c
==================
29e8689;Mark Wiebe;2011-01-26 13:44:02 -0800;BLD: Add einsum to the one file build

==

numpy/core/src/multiarray/multiarraymodule_onefile.c
==================
c4a556e;Mark Wiebe;2011-01-26 10:57:17 -0800;BUG: core: Fix things so scipy trunk passes all tests (but one)
With this patch, the latest scipy trunk (7087), built against NumPy
1.5.1, passes all tests when run against the numpy trunk.  The single
failing test, test_imresize, fails because it tests all float types,
and the new 'half' type lacks the precision to pass that test.

==

numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/lowlevel_strided_loops.c.src
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_numeric.py
numpy/core/tests/test_regression.py
numpy/testing/utils.py
==================
98721b3;Mark Wiebe;2011-01-25 23:56:30 -0800;BUG: ufunc: Fix buffered reduce

==

numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_regression.py
==================
b58b3d1;Mark Wiebe;2011-01-26 20:59:26 -0800;NEP: iter: Add NpyIter_GetAxisStrideArray function

==

doc/neps/new-iterator-ufunc.rst
==================
91b7763;Mark Wiebe;2011-01-26 17:28:47 -0800;NEP: iter: Add some more functions

==

doc/neps/new-iterator-ufunc.rst
==================
cf8d152;Mark Wiebe;2011-01-25 18:21:43 -0800;ENH: core: Make PyArray_ArrFuncs have the same structure as in 1.5 and earlier

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/usertypes.c
==================
585a636;Mark Wiebe;2011-01-25 17:57:02 -0800;ENH: core: Shuffle type numbers so any new ones go on the end.

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/calculation.c
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/umath/ufunc_object.c
numpy/lib/tests/test_recfunctions.py
==================
62300b6;Mark Wiebe;2011-01-25 16:10:01 -0800;ENH: ufunc: Remove dead code from ufunc_object.c

==

numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_numeric.py
==================
8a0bec0;Mark Wiebe;2011-01-25 15:44:40 -0800;ENH: ufunc: Convert Reduceat to use the new iterator
Reduceat doesn't fit into the new iterator idea quite as well as the others,
so it doesn't get the matching memory layout.  Neither it nor accumulate
get buffering, though accumulate could use buffering if it was implemented
slightly differently.

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/umath/ufunc_object.c
==================
14d5e20;Mark Wiebe;2011-01-25 14:23:21 -0800;ENH: ufunc: Convert Accumulate to use the new iterator

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_regression.py
==================
fadddc6;Mark Wiebe;2011-01-25 12:30:52 -0800;ENH: iter: Add NpyIter_RemoveAxis function to the iterator API

==

numpy/core/code_generators/numpy_api.py
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_new_iterator.py
==================
b410514;Mark Wiebe;2011-01-25 11:09:10 -0800;ENH: ufunc: Release the GIL during ufunc computations

==

numpy/core/src/multiarray/einsum.c.src
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_numeric.py
==================
7e14f03;Mark Wiebe;2011-01-25 10:27:20 -0800;ENH: ufunc: Convert UFunc Reduce to use the new iterator

==

numpy/core/src/multiarray/einsum.c.src
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/umath/ufunc_object.c
==================
cdac120;rgommers;2011-01-25 22:02:40 +0800;PY3K: add PyPI classifier for Python 3. Closes #1698.

==

setup.py
==================
5435bdc;Mark Wiebe;2011-01-24 17:08:06 -0800;DOC: core: Document the new einsum function

==

doc/source/reference/routines.linalg.rst
numpy/add_newdocs.py
numpy/core/numeric.py
numpy/linalg/linalg.py
==================
e81e8da;Mark Wiebe;2011-01-24 15:24:42 -0800;ENH: core: Add SSE intrinsic support to some of the einsum core loops

==

numpy/core/code_generators/numpy_api.py
numpy/core/src/multiarray/einsum.c.src
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/tests/test_numeric.py
==================
4f5ff25;Charles Harris;2011-01-24 15:12:25 -0700;ENH: Break out regression tests into separate file and explicitly import needed functions from np.testing.

==

numpy/random/tests/test_random.py
numpy/random/tests/test_regression.py
==================
bb97750;Charles Harris;2011-01-24 14:48:29 -0700;ENH: Replace assert by assert_.

==

numpy/random/tests/test_random.py
==================
b7fbd32;Justin Peel;2011-01-24 14:42:40 -0700;BUG: Ticket #1690, fix overflow error in randint. Slightly modified from the original by committer.

==

numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
numpy/random/tests/test_random.py
==================
9a72a64;Mark Wiebe;2011-01-24 09:58:14 -0800;ENH: core: EinSum function works

==

numpy/core/src/multiarray/einsum.c.src
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/tests/test_numeric.py
==================
ae6416a;rgommers;2010-12-12 19:01:56 +0800;STY: clean up unused code. Closes #1409. Thanks to Bruce Southey.

==

numpy/distutils/ccompiler.py
==================
34aed24;Mark Wiebe;2011-01-24 00:19:09 -0800;ENH: core: Implement iterator set up for einsum

==

numpy/core/code_generators/numpy_api.py
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/einsum.c.src
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/tests/test_numeric.py
==================
437e555;Justin Peel;2011-01-23 16:56:15 -0700;BUG: Ticket #1703, make fromfile work with dtype=np.bool_ and floats.

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/tests/test_multiarray.py
==================
265ac4f;Charles Harris;2011-01-23 16:17:02 -0700;ENH: Add patch files to .gitignore.

==

.gitignore
==================
173cb74;Charles Harris;2011-01-23 15:58:39 -0700;ENH: Ticket 1695, add test for find_common_type with booleans.

==

numpy/core/tests/test_regression.py
==================
8435696;Justin Peel;2011-01-23 15:57:12 -0700;BUG: Ticket 1395, make find_common_type recognize booleans.

==

numpy/core/numerictypes.py
==================
41c0935;Charles Harris;2011-01-23 15:54:59 -0700;WHT: Whitespace cleanup.

==

numpy/core/tests/test_numerictypes.py
==================
9b8ff38;Dag Sverre Seljebotn;2010-12-01 14:01:57 +0100;BUG PyArray_FromArray: Properly handle F_CONTIGUOUS with 1D-arrays

==

numpy/core/src/multiarray/ctors.c
==================
a41de3a;Mark Wiebe;2011-01-23 14:01:36 -0800;ENH: core: Start einsum function, add copyright notices to files

==

THANKS.txt
numpy/core/code_generators/genapi.py
numpy/core/code_generators/numpy_api.py
numpy/core/numeric.py
numpy/core/setup.py
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/einsum.c.src
numpy/core/src/multiarray/lowlevel_strided_loops.c.src
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/tests/test_numeric.py
==================
3ec5795;Justin Peel;2011-01-23 13:54:25 -0700;BUG: Ticket 1490, fix searchsorted when both key and array are byteswapped.

==

numpy/core/src/multiarray/item_selection.c
numpy/core/tests/test_multiarray.py
==================
54b7a0d;Martin Spacek;2011-01-23 13:27:59 -0700;ENH: Add test for long seeks in windows 64 bit systems.

==

numpy/core/tests/test_multiarray.py
==================
0baf0ec;cgholke;2011-01-23 13:20:23 -0700;BUG: Ticket #1660. Fix windows 64 bug so that fromfile works for files > 2GB.

==

numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/ctors.c
==================
27987d2;Mark Wiebe;2011-01-22 19:58:52 -0800;ENH: iter: Add ability to do buffered iteration of reductions
This also tightens the error checking of reduction operations.
Now if you want to allow a reduction, you must specify NPY_ITER_REDUCE_OK.

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/tests/test_new_iterator.py
==================
87c4ec8;Mark Wiebe;2011-01-22 19:57:48 -0800;NEP: Correct some spelling errors

==

doc/neps/deferred-ufunc-evaluation.rst
==================
0ad51c1;Mark Wiebe;2011-01-22 19:57:10 -0800;NEP: Add more flags and some timing results

==

doc/neps/new-iterator-ufunc.rst
==================
f6c5df8;Mark Wiebe;2011-01-22 10:06:43 -0800;ENH: core: Make the debug printf tracing macros more systematic

==

numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/umath/ufunc_object.c
==================
fb11cf1;Mark Wiebe;2011-01-22 09:36:12 -0800;STY: iter: Change if statements in trivial iteration macros

==

numpy/core/src/multiarray/lowlevel_strided_loops.h
==================
edc4805;Mark Wiebe;2011-01-22 01:26:48 -0800;ENH: iter: Improve broadcasting error message

==

numpy/core/include/numpy/ufuncobject.h
numpy/core/src/multiarray/new_iterator.c.src
==================
a6651a1;Mark Wiebe;2011-01-21 17:12:48 -0800;ENH: ufunc: Add support for the sig= type_tuple parameter to new ufunc code

==

numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_ufunc.py
==================
42bd0c3;Mark Wiebe;2011-01-21 16:05:26 -0800;ENH: ufunc: Implement user loop searching

==

numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_numeric.py
numpy/core/tests/test_ufunc.py
==================
7f8e867;Mark Wiebe;2011-01-21 14:07:30 -0800;ENH: ufunc: Get all tests passing with new iterator ufunc except generalized ufunc tests

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_numeric.py
numpy/core/tests/test_scalarmath.py
==================
d03b685;Mark Wiebe;2011-01-21 14:06:49 -0800;ENH: ufunc: Change object/reference handling code to treat NULL as Py_None more consistently

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/scalarmathmodule.c.src
numpy/core/src/umath/loops.c.src
==================
a8ceeca;Mark Wiebe;2011-01-21 14:03:38 -0800;BUG: core: Fix issue converting nested list with a number to a string type

==

numpy/core/src/multiarray/ctors.c
numpy/core/tests/test_regression.py
==================
9317b74;Mark Wiebe;2011-01-21 09:35:03 -0800;BUG: iter: Fix 0-size edge case with trivial iteration macros

==

numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/lowlevel_strided_loops.h
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_regression.py
==================
87596cf;Mark Wiebe;2011-01-21 00:54:09 -0800;ENH: ufunc: Make many more tests pass with the new ufunc code

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/src/umath/loops.c.src
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_numeric.py
numpy/ma/core.py
numpy/testing/tests/test_utils.py
==================
6c6dc48;Mark Wiebe;2011-01-20 20:41:03 -0800;ENH: ufunc: Made the iterator ufunc default

==

numpy/core/src/umath/ufunc_object.c
==================
9ab33b7;Mark Wiebe;2011-01-20 15:47:52 -0800;ENH: ufunc: Add support for the __array_prepare__ property of subclassed arrays

==

numpy/core/code_generators/numpy_api.py
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/src/umath/ufunc_object.c
==================
a8f5b4c;Mark Wiebe;2011-01-20 13:43:23 -0800;ENH: ufunc: Restructure iterator ufunc evaluation into functions

==

doc/source/reference/c-api.array.rst
doc/source/reference/c-api.ufunc.rst
numpy/core/include/numpy/ufuncobject.h
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/umath/ufunc_object.c
==================
fa08ee2;Mark Wiebe;2011-01-20 00:29:12 -0800;ENH: ufunc: Simple iterator-based ufunc execution is working

==

numpy/core/src/multiarray/lowlevel_strided_loops.h
numpy/core/src/umath/ufunc_object.c
==================
58f33f8;Mark Wiebe;2011-01-19 17:57:49 -0800;ENH: ufunc: Implement the trivial two and three-operand loops

==

numpy/core/src/multiarray/ctors.c
numpy/core/src/umath/ufunc_object.c
==================
c065a26;Mark Wiebe;2011-01-19 17:27:30 -0800;ENH: ufunc: Add trivial loop detection macros for triple loops
Also allow broadcasting with scalars in trivial loops.

==

numpy/core/src/multiarray/lowlevel_strided_loops.h
numpy/core/src/multiarray/methods.c
numpy/core/src/umath/ufunc_object.c
==================
eca4d03;Mark Wiebe;2011-01-19 16:08:26 -0800;ENH: ufunc: Add the main loop selection/type-determination mechanism

==

doc/source/reference/c-api.array.rst
numpy/core/code_generators/numpy_api.py
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/convert_datatype.h
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/umath/ufunc_object.c
==================
3637741;Mark Wiebe;2011-01-19 14:48:38 -0800;ENH: core: Clean things up a bit
* Make PyArray_CastToType always produce a copy
* Remove special cases in ndarray.astype

==

numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/ma/core.py
==================
a1eee39;Mark Wiebe;2011-01-19 12:31:46 -0800;ENH: core: Added numeric casting strided transfer functions, to speed up simple casts

==

numpy/core/code_generators/numpy_api.py
numpy/core/include/numpy/ufuncobject.h
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/lowlevel_strided_loops.c.src
numpy/core/src/multiarray/lowlevel_strided_loops.h
numpy/core/src/umath/ufunc_object.c
==================
fe08a91;Mark Wiebe;2011-01-18 20:14:07 -0800;ENH: iter: Switch the iterator to use PyArray_ResultType

==

numpy/add_newdocs.py
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/new_iterator.c.src
==================
5387da5;Mark Wiebe;2011-01-18 18:24:15 -0800;ENH: doc: Document the new API functions
PyArray_CanCastArrayTo, PyArray_MinScalarType, PyArray_PromoteTypes,
PyArray_ResultType, PyArray_CountNonzero, and PyArray_CastingConverter.

==

doc/source/reference/c-api.array.rst
numpy/core/src/multiarray/multiarraymodule.c
==================
beba8f4;Mark Wiebe;2011-01-18 17:52:42 -0800;ENH: core: Add functions PyArray_CanCastArrayTo and PyArray_ResultType
They have also been exposed to Python.

==

doc/source/reference/routines.dtype.rst
numpy/add_newdocs.py
numpy/core/code_generators/numpy_api.py
numpy/core/numeric.py
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/convert_datatype.h
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/tests/test_new_iterator.py
numpy/core/tests/test_numeric.py
==================
81a28e7;Mark Wiebe;2011-01-18 13:41:14 -0800;ENH: core: Add PyArray_MinScalarType and expose it to Python

==

doc/source/reference/routines.dtype.rst
numpy/add_newdocs.py
numpy/core/code_generators/numpy_api.py
numpy/core/numeric.py
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/multiarraymodule.c
==================
ee06d18;Mark Wiebe;2011-01-18 12:13:32 -0800;ENH: core: Start converting ufunc to new iterator, add PyArray_PromoteTypes

==

doc/source/reference/routines.dtype.rst
numpy/add_newdocs.py
numpy/core/code_generators/numpy_api.py
numpy/core/numeric.py
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/multiarray/scalartypes.h
numpy/core/src/umath/ufunc_object.c
numpy/testing/print_coercion_tables.py
==================
cce7e1f;Mark Wiebe;2011-01-17 20:27:27 -0800;ENH: core: Convert remaining data copying to new method, add tests for overlapping array assignment

==

numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/ctors.h
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/shape.c
numpy/core/tests/test_multiarray.py
==================
d90f19a;Mark Wiebe;2011-01-17 18:26:12 -0800;ENH: core: Change PyArray_MoveInto to use the new iterator as well

==

numpy/core/src/multiarray/ctors.c
==================
e916b9e;Mark Wiebe;2011-01-17 17:06:54 -0800;ENH: core: Change PyArray_CopyAnyInto and PyArray_MoveAnyInto to use the new iterator
I also found that the tricky case of CopyAnyInto wasn't being triggered
by the test suite, so added a new function ndarray.setasflat, which
calls CopyAnyInto.

==

doc/source/reference/arrays.ndarray.rst
numpy/add_newdocs.py
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/methods.c
numpy/core/tests/test_multiarray.py
numpy/matrixlib/tests/test_defmatrix.py
==================
22d9609;Mark Wiebe;2011-01-17 14:54:02 -0800;ENH: core: Replace PyArray_CastTo with a call to PyArray_CopyInto
Since CopyInto uses the dtype transfer mechanism to do the copying,
this also fully handles casting.  This also exposed a byte order issue
in the dtype transfer code of converting to object arrays.

The switch from position-based structure copying to name-based copying
required a small change to a masked array test as well.

==

numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/dtype_transfer.c
numpy/ma/tests/test_core.py
numpy/ma/testutils.py
==================
e39a70c;Mark Wiebe;2011-01-16 23:47:01 -0800;ENH: core: Add needs_api output boolean from dtype transfer
This change allows the NEEDS_PYAPI flag to be re-relaxed from the
string, unicode, and void types.

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/lowlevel_strided_loops.h
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/new_iterator.c.src
==================
e6c3a0c;Mark Wiebe;2011-01-16 23:02:06 -0800;ENH: core: Implement PyArray_CopyInto using the new iterator
This change also uses the dtype conversion code implemented for new
iterator buffering, which differs slightly from the previous casting
behavior.  In particular, fields are matched up by name instead of
position, so code depending on that behavior breaks.  The loadtxt
function has been fixed to not depend on this casting behavior.

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/lowlevel_strided_loops.h
numpy/core/src/multiarray/new_iterator.c.src
numpy/lib/npyio.py
numpy/lib/tests/test_io.py
==================
03dd59a;Mark Wiebe;2011-01-16 14:20:11 -0800;ENH: iter: Add macros for detecting and using trivially iterable cases

==

numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/lowlevel_strided_loops.h
==================
eb927ce;Mark Wiebe;2011-01-16 13:57:44 -0800;ENH: iter: Change PyArray_StridedTransferFn typedef to match NumPy function typedefs

==

numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/lowlevel_strided_loops.c.src
numpy/core/src/multiarray/lowlevel_strided_loops.h
numpy/core/src/multiarray/new_iterator.c.src
==================
4f84b99;Mark Wiebe;2011-01-16 12:20:09 -0800;ENH: iter: Run-length encode the representation of subarray broadcasting in data transfers

==

numpy/core/src/multiarray/dtype_transfer.c
numpy/core/tests/test_numeric.py
==================
165d98d;Mark Wiebe;2011-01-16 01:48:42 -0800;ENH: core: Switch nonzero to use the iterator as an example, add count_nonzero function

==

doc/source/reference/routines.sort.rst
numpy/add_newdocs.py
numpy/core/code_generators/numpy_api.py
numpy/core/fromnumeric.py
numpy/core/numeric.py
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/tests/test_numeric.py
numpy/ma/core.py
==================
1604e89;Mark Wiebe;2011-01-15 18:05:53 -0800;ENH: iter: Replace the last dtype decref with a transfer function method

==

numpy/core/src/multiarray/dtype_transfer.c
==================
9bf5bc6;Mark Wiebe;2011-01-15 12:59:46 -0800;ENH: iter: Add support for custom dtypes by wrapping copyswap when necessary

==

numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/lowlevel_strided_loops.h
numpy/core/src/multiarray/new_iterator.c.src
==================
a57d809;Mark Wiebe;2011-01-15 09:57:01 -0800;ENH: iter: Use the new code to do buffer decrefs

==

numpy/core/src/multiarray/new_iterator.c.src
==================
5245d39;Mark Wiebe;2011-01-14 17:35:23 -0800;ENH: iter: Add support for buffering arrays with fields and subarrays

==

numpy/core/setup.py
numpy/core/src/multiarray/dtype_transfer.c
numpy/core/src/multiarray/lowlevel_strided_loops.c.src
numpy/core/src/multiarray/lowlevel_strided_loops.h
numpy/core/src/multiarray/multiarraymodule_onefile.c
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/umath/loops.c.src
numpy/core/tests/test_new_iterator.py
==================
85f391b;Mark Wiebe;2011-01-13 17:54:31 -0800;ENH: iter: Make the transfer buffer size a macro instead of hardcoded 32

==

numpy/core/src/multiarray/lowlevel_strided_loops.c.src
==================
e15f111;Mark Wiebe;2011-01-13 17:41:48 -0800;ENH: iter: Move cast transfer function logic to its own function

==

numpy/core/src/multiarray/lowlevel_strided_loops.c.src
==================
6d81f66;Mark Wiebe;2011-01-13 16:50:15 -0800;ENH: iter: Implement subarray transfer functions

==

numpy/core/src/multiarray/lowlevel_strided_loops.c.src
numpy/core/src/multiarray/lowlevel_strided_loops.h
numpy/core/src/multiarray/new_iterator.c.src
==================
2b04a70;Mark Wiebe;2011-01-13 12:51:38 -0800;ENH: iter: Add support for iterating object arrays

==

numpy/core/code_generators/numpy_api.py
numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/lowlevel_strided_loops.c.src
numpy/core/src/multiarray/lowlevel_strided_loops.h
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/tests/test_new_iterator.py
==================
7c3b6b8;Mark Wiebe;2011-01-12 13:19:41 -0800;ENH: iter: Add check for buffered output allocation without delayed bufalloc
When allocating an output and specifying it's to be read, most iteration
modes allow the code to fill the allocated output with a value before
starting actual iteration.  When buffering is enabled and delayed
buffer allocation is not, this won't work, so throw an error

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/tests/test_new_iterator.py
==================
c44820a;Mark Wiebe;2011-01-11 22:23:54 -0800;ENH: iter: Add support for buffering string and unicode arrays

==

numpy/core/src/multiarray/lowlevel_strided_loops.c.src
numpy/core/src/multiarray/lowlevel_strided_loops.h
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/tests/test_new_iterator.py
==================
f72c605;David Warde-Farley;2011-01-07 13:36:18 -0500;ENH: Add minlength keyword to bincount. Patch from ticket #1595.

==

numpy/add_newdocs.py
numpy/lib/src/_compiled_base.c
numpy/lib/tests/test_function_base.py
==================
ebc963d;Mark Wiebe;2011-01-10 08:47:29 -0800;BUG: iter: Added missing new_iterator_pywrap.h

==

numpy/core/src/multiarray/new_iterator_pywrap.h
==================
e32e8c9;Mark Wiebe;2011-01-09 11:46:01 -0800;ENH: iter: Expose PyArray_CastingConverter, add 'K' to PyArray_OrderConverter

==

numpy/core/code_generators/genapi.py
numpy/core/code_generators/numpy_api.py
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/new_iterator_pywrap.c
==================
d6f743d;Mark Wiebe;2011-01-08 22:07:16 -0800;ENH: iter: Add mechanism to use critical iteration functions without the GIL
In particular, the Reset*, GetIterNext, and GetGetCoords functions gain
a new parameter 'errmsg'.  If a non-NULL value is passed into it, error
messages are passed back in this parameter instead of setting the Python
exception.

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator_pywrap.c
==================
96182f8;Mark Wiebe;2011-01-07 20:24:25 -0800;ENH: iter: Add access functions for some buffering properties

==

numpy/core/code_generators/numpy_api.py
numpy/core/src/multiarray/new_iterator.c.src
==================
595d453;Mark Wiebe;2011-01-07 15:58:50 -0800;ENH: iter: Split flag NBO_ALIGN into NBO and ALIGN, add CONTIG flag

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/tests/test_new_iterator.py
==================
e70ee98;Mark Wiebe;2011-01-07 13:23:39 -0800;ENH: iter: Add the new iterator to the exposed API
To do this, I also removed the search/replace of 'intp' to 'npy_intp',
and did that change manually in a number of files.  The NOPREFIX
macro-based emulation of C++'s "using namespace" feels a bit off to me
anyway.

==

numpy/core/code_generators/genapi.py
numpy/core/code_generators/numpy_api.py
numpy/core/include/numpy/ndarraytypes.h
numpy/core/include/numpy/new_iterator.h
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/conversion_utils.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/tests/test_new_iterator.py
==================
eff3118;Mark Wiebe;2011-01-07 12:23:20 -0800;ENH: iter: Move new_iterator.h to the include directory

==

numpy/core/include/numpy/new_iterator.h
numpy/core/setup.py
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
numpy/core/src/multiarray/new_iterator_pywrap.c
==================
e8101f5;Mark Wiebe;2011-01-07 11:48:33 -0800;ENH: iter: Add NPY_ITER_DELAY_BUFALLOC flag, fix Python iterator wrapper issues

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/tests/test_new_iterator.py
==================
3550d41;Mark Wiebe;2011-01-06 17:46:22 -0800;ENH: iter: Added NpyIter_Copy function

==

numpy/core/src/multiarray/lowlevel_strided_loops.c.src
numpy/core/src/multiarray/lowlevel_strided_loops.h
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/tests/test_new_iterator.py
==================
07db847;Mark Wiebe;2011-01-06 15:26:07 -0800;ENH: iter: Add the ability to iterate over iterator index subranges

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/tests/test_new_iterator.py
==================
05721c2;Mark Wiebe;2011-01-05 21:26:59 -0800;ENH: iter: Make the GROWINNER flag not imply BUFFERED

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/tests/test_new_iterator.py
==================
3026d40;Mark Wiebe;2011-01-05 21:12:13 -0800;ENH: iter: Add getting and setting of IterIndex, the iteration index

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/tests/test_new_iterator.py
==================
181794b;Mark Wiebe;2011-01-05 14:08:42 -0800;ENH: iter: Shorten flag NPY_ITER_C/F_ORDER_INDEX to NPY_ITER_C/F_INDEX

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/tests/test_new_iterator.py
==================
ac2877b;Mark Wiebe;2011-01-05 13:56:03 -0800;ENH: iter: Change the meaning of itersize to be the number of elements, not the number of iterations

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
numpy/core/tests/test_new_iterator.py
==================
e045964;Mark Wiebe;2011-01-05 13:02:56 -0800;ENH: iter: Some more small clean-ups in iterator construction

==

numpy/core/src/multiarray/new_iterator.c.src
==================
380d34e;Mark Wiebe;2011-01-05 12:47:47 -0800;ENH: iter: Clean up iterator creation code

==

numpy/core/src/multiarray/new_iterator.c.src
==================
1f75aa0;Mark Wiebe;2011-01-05 11:22:19 -0800;ENH: iter: Move code out of NpyIter_MultiNew into functions

==

numpy/core/src/multiarray/new_iterator.c.src
==================
45c009a;Mark Wiebe;2011-01-04 16:41:45 -0800;ENH: iter: Change internal iterator member access to improve type safety

==

numpy/core/src/multiarray/new_iterator.c.src
==================
b3efccc;Mark Wiebe;2011-01-04 11:49:24 -0800;ENH: iter: Change nested iteration pattern and add nested_iters Python function
Nested iteration now uses a function NpyIter_ResetBasePointers, and the
NPY_ITER_OFFSETS flag which was the previous way to do this has been
removed.

==

numpy/core/numeric.py
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/tests/test_new_iterator.py
==================
fe791db;Mark Wiebe;2011-01-02 14:52:51 -0800;ENH: iter: Refactor npyiter_init parameter conversion into separate functions

==

numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/tests/test_new_iterator.py
==================
6f87e6e;Mark Wiebe;2011-01-01 23:58:41 -0800;ENH: core: Change NPY_USE_UNALIGNED_ACCESS macro for low level loops

==

numpy/core/src/multiarray/lowlevel_strided_loops.c.src
==================
f503ddb;Mark Wiebe;2010-12-22 08:18:35 -0800;BUG: iter: Fix code and test for NPY_NO_CASTING case

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/tests/test_new_iterator.py
==================
0ff9d91;Mark Wiebe;2010-12-21 16:19:42 -0800;BUG: iter: Fix a crash with the NO_BROADCAST flag

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator_pywrap.c
==================
d7203d0;Mark Wiebe;2010-12-21 14:02:49 -0800;ENH: iter: Shorten COMMON_DATA_TYPE flag to COMMON_DTYPE

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/tests/test_new_iterator.py
==================
ba576a7;Mark Wiebe;2010-12-21 13:51:38 -0800;ENH: iter: Move casting flags into a casting= parameter

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/tests/test_new_iterator.py
==================
f365666;Mark Wiebe;2010-12-21 10:54:10 -0800;ENH: iter: Move forcing the iterator order into an order= parameter

==

numpy/core/include/numpy/ndarraytypes.h
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/tests/test_new_iterator.py
==================
516a38d;Mark Wiebe;2010-12-21 10:07:12 -0800;ENH: iter: Detect cases where buffering of some operands can be skipped

==

numpy/core/src/multiarray/lowlevel_strided_loops.c.src
numpy/core/src/multiarray/lowlevel_strided_loops.h
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/tests/test_new_iterator.py
==================
ed53e18;Mark Wiebe;2010-12-21 00:38:33 -0800;ENH: iter: Added a no_broadcast flag to ensure an operand matches the iteration dimensions

==

numpy/core/src/multiarray/lowlevel_strided_loops.c.src
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/tests/test_new_iterator.py
==================
82643de;Mark Wiebe;2010-12-20 23:39:31 -0800;ENH: iter: Add buffering support to more casting/swapping cases

==

numpy/core/src/multiarray/lowlevel_strided_loops.c.src
numpy/core/tests/test_new_iterator.py
==================
578e01a;Mark Wiebe;2010-12-20 17:39:04 -0800;ENH: iter: Small iterator tweaks

==

numpy/core/src/multiarray/new_iterator.c.src
==================
0ce35a2;Mark Wiebe;2010-12-20 16:55:17 -0800;ENH: iter: Support the combined build option

==

numpy/core/src/multiarray/multiarraymodule_onefile.c
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/tests/test_new_iterator.py
==================
9e86467;Mark Wiebe;2010-12-20 15:35:00 -0800;ENH: iter: Add simple tests for buffering

==

numpy/core/src/multiarray/lowlevel_strided_loops.c.src
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/tests/test_new_iterator.py
==================
6d41baf;Mark Wiebe;2010-12-20 13:49:55 -0800;ENH: Implemented basic buffering

==

numpy/core/setup.py
numpy/core/src/multiarray/lowlevel_strided_loops.c.src
numpy/core/src/multiarray/lowlevel_strided_loops.h
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
numpy/core/src/multiarray/new_iterator_pywrap.c
==================
3f5de70;Mark Wiebe;2010-12-17 18:54:25 -0800;ENH: Add some utility functions for modifying the iterator

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/tests/test_new_iterator.py
==================
6db2223;Mark Wiebe;2010-12-17 17:27:23 -0800;BUG: iter: Fixed finding of common dtype with outputs factored in as well

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/tests/test_new_iterator.py
==================
b07ad2b;Mark Wiebe;2010-12-17 17:02:50 -0800;ENH: iter: Renamed PyArray_NpyIter* -> NpyIter*, consistent with numpy-refactor NpyArray*

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
numpy/core/src/multiarray/new_iterator_pywrap.c
==================
4553901;Mark Wiebe;2010-12-17 16:33:25 -0800;ENH: iter: Shortened some flag names, adjust casting code

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/tests/test_new_iterator.py
==================
a227288;Mark Wiebe;2010-12-17 14:19:46 -0800;ENH: iter: Remove max/min ndim parameters, they mostly get in the way

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
numpy/core/src/multiarray/new_iterator_pywrap.c
==================
455f20f;Mark Wiebe;2010-12-16 20:13:37 -0800;ENH: iter Change iterator to just support numpy arrays

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/tests/test_new_iterator.py
==================
404f9b5;Mark Wiebe;2010-12-16 18:59:43 -0800;BUG: iter: Fix dtype reference count error

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/tests/test_new_iterator.py
==================
4d70523;Mark Wiebe;2010-12-16 15:25:32 -0800;ENH: iter: Add the ability for Python to get a view of the iteration as an array

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/tests/test_new_iterator.py
==================
3f33e1c;Mark Wiebe;2010-12-15 20:39:26 -0800;ENH: iter: Add array subtype support using the priority property

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/tests/test_new_iterator.py
==================
e2d8b78;Mark Wiebe;2010-12-15 15:38:05 -0800;ENH: iter: Add ability to automatically determine output data types

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/tests/test_new_iterator.py
==================
b9f1c9a;Mark Wiebe;2010-12-14 23:19:32 -0800;ENH: iter: Expose noinner support to the Python iterator interface

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
numpy/core/src/multiarray/new_iterator_pywrap.c
==================
2878cd8;Mark Wiebe;2010-12-14 15:16:55 -0800;ENH: iter: Add support and tests for automatically allocating outputs

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/tests/test_new_iterator.py
==================
6e1da06;Mark Wiebe;2010-12-14 12:51:19 -0800;ENH: iter: Implementation and tests for nbo_align flag

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/tests/test_new_iterator.py
==================
a17241d;Mark Wiebe;2010-12-14 00:43:16 -0800;TST: iter: Add tests for array casting

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/tests/test_new_iterator.py
==================
8780e1b;Mark Wiebe;2010-12-13 23:15:59 -0800;ENH: iter: Work towards supporting temporary copies

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
numpy/core/src/multiarray/new_iterator_pywrap.c
==================
63ddc8d;Mark Wiebe;2010-12-13 15:57:10 -0800;ENH: iter: Implement scalar casting

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/tests/test_new_iterator.py
==================
7b0f6e9;Mark Wiebe;2010-12-13 14:12:44 -0800;ENH: iter: Added error checking and tests for casting-related flags

==

numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/tests/test_new_iterator.py
==================
b14aa3f;Mark Wiebe;2010-12-13 11:12:46 -0800;ENH: iter: Begin writing support for the iterator making temporary copies

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/tests/test_new_iterator.py
==================
a2f915a;Mark Wiebe;2010-12-12 23:59:20 -0800;ENH: iter: Add ability to produce offsets instead of pointers

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/tests/test_new_iterator.py
==================
08f4cd0;Mark Wiebe;2010-12-12 17:20:28 -0800;ENH: iter: Add GetShape function, more tests

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/tests/test_new_iterator.py
==================
8ed883f;Mark Wiebe;2010-12-12 11:25:31 -0800;TST: iter: Test that errors get raised for bad flag inputs

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/tests/test_new_iterator.py
==================
32f30d6;Mark Wiebe;2010-12-12 01:38:28 -0800;TST: iter: Add tests of axis coalescing

==

numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/tests/test_new_iterator.py
==================
0ee1d15;Mark Wiebe;2010-12-11 15:59:39 -0800;TST: iter: Add some tests of the new iterator

==

numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
numpy/core/src/multiarray/new_iterator_pywrap.c
numpy/core/tests/test_new_iterator.py
==================
74530a0;Mark Wiebe;2010-12-11 11:48:21 -0800;ENH: iter: Start Python wrapper of new iterator

==

numpy/core/code_generators/numpy_api.py
numpy/core/numeric.py
numpy/core/setup.py
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
numpy/core/src/multiarray/new_iterator_pywrap.c
==================
2dc6e3a;Mark Wiebe;2010-12-10 11:57:47 -0800;ENH: iter: Tighten up per-operand read/write flags

==

numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
==================
0a986f2;Mark Wiebe;2010-12-09 23:17:13 -0800;ENH: iter: Add Reset, GotoCoords, and GotoIndex functions

==

numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
==================
97734ae;Mark Wiebe;2010-12-09 14:08:33 -0800;ENH: iter: Create MultiNew function, make New call MultiNew

==

numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
==================
e327042;Mark Wiebe;2010-12-09 10:48:14 -0800;ENH: iter: Move more code from the constructor into functions

==

numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
==================
01b2650;Mark Wiebe;2010-12-08 22:25:46 -0800;ENH: iter: Move constructor functionality into functions

==

numpy/core/src/multiarray/new_iterator.c.src
==================
161baa8;Mark Wiebe;2010-12-08 20:57:19 -0800;ENH: iter: Move operand preparation into a function

==

numpy/core/src/multiarray/new_iterator.c.src
==================
3e504b9;Mark Wiebe;2010-12-08 17:03:27 -0800;ENH: iter: Make the iterator work with scalar inputs as well

==

numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
==================
d35ca0b;Mark Wiebe;2010-12-08 00:12:25 -0800;ENH: iter: Add readonly/writeonly flags and more input checks

==

numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
==================
9cdb2ea;Mark Wiebe;2010-12-07 23:20:26 -0800;BUG: iter: Axis coalescing wasn't correct

==

numpy/core/src/multiarray/new_iterator.c.src
==================
d78b89d;Mark Wiebe;2010-12-07 22:45:34 -0800;ENH: iter: Add ability for caller to handle inner loop

==

numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
==================
64cad9d;Mark Wiebe;2010-12-07 19:09:11 -0800;ENH: iter: Add axis coalescing

==

numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/new_iterator.c.src
==================
bfe1242;Mark Wiebe;2010-12-07 14:42:32 -0800;ENH: iter: Make zero-dimensional inputs work

==

numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/new_iterator.c.src
==================
8b20488;Mark Wiebe;2010-12-07 00:18:05 -0800;ENH: iter: Sort the axes to find the best iteration order

==

numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
==================
30b6eeb;Mark Wiebe;2010-12-06 17:49:08 -0800;ENH: iter: Add negation of axes with negative strides

==

numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
==================
16057cd;Mark Wiebe;2010-12-06 16:09:12 -0800;ENH: iter: Add ability to force the iteration order (C, F, ANY)

==

numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
==================
fa160f2;Mark Wiebe;2010-12-06 14:38:30 -0800;ENH: iter: Add the ability to get the iterator coordinates

==

numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
==================
2d5a985;Mark Wiebe;2010-12-06 13:41:55 -0800;ENH: iter: Track indices, use templating to specialize iternext

==

numpy/core/setup.py
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/new_iterator.c
numpy/core/src/multiarray/new_iterator.c.src
numpy/core/src/multiarray/new_iterator.h
==================
c70c602;Mark Wiebe;2010-12-05 20:20:26 -0800;ENH: iter: Basic version of iterator is running

==

numpy/core/setup.py
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/new_iterator.c
==================
58a4084;Mark Wiebe;2010-12-05 12:17:39 -0800;ENH: iter: Start with iterator member access macros

==

numpy/core/src/multiarray/new_iterator.c
==================
7dd477a;Mark Wiebe;2011-01-08 22:10:33 -0800;NEP: iter: Add some typical inner loop examples, other small changes

==

doc/neps/new-iterator-ufunc.rst
==================
d43668c;Simon Blyth;2010-12-10 20:20:38 +0800;fix for datetime64[s] hours exceeding 24 and test to demonstrate

==

numpy/core/src/multiarray/datetime.c
numpy/core/tests/test_datetime.py
==================
15d11d4;Mark Wiebe;2011-01-07 12:02:24 -0800;NEP: iter: Add functionality for allowing multi-threaded iteration

==

doc/neps/new-iterator-ufunc.rst
==================
dd46d30;Mark Wiebe;2011-01-04 14:31:57 -0800;NEP: iter: Add NpyIter_ResetBasePointers function, remove NPY_ITER_OFFSETS flag

==

doc/neps/new-iterator-ufunc.rst
==================
9451260;chanley;2010-12-27 12:16:14 -0500;Apply patch by bsouthey in Ticket #1475 to turn off appropriate tests when ctypes is not installed.  This is of particular importance to STScI since this test is breaking our nightly build/test setup.

==

numpy/lib/tests/test_type_check.py
==================
bf5d404;Mark Wiebe;2010-12-22 08:47:44 -0800;NEP: iter: Clarify op_axes slightly, and add offsets example

==

doc/neps/new-iterator-ufunc.rst
==================
ac647ff;Mark Wiebe;2010-12-21 18:10:55 -0800;NEP: iter: added table of contents

==

doc/neps/new-iterator-ufunc.rst
==================
44ba4e3;Mark Wiebe;2010-12-21 14:51:42 -0800;NEP: iter: Added Lambda UFunc example

==

doc/neps/new-iterator-ufunc.rst
==================
01ce669;Mark Wiebe;2010-12-21 13:58:36 -0800;NEP: iter: Switch from flags to a 'casting' parameter

==

doc/neps/new-iterator-ufunc.rst
==================
66c549e;Mark Wiebe;2010-12-01 00:41:24 -0800;NEP: Created deferred UFunc evaluation NEP

==

doc/neps/deferred-ufunc-evaluation.rst
==================
3de1f16;Mark Wiebe;2010-11-25 14:33:19 -0800;NEP: iter: Created Iterator/UFunc optimization NEP

==

doc/neps/new-iterator-ufunc.rst
==================
799179d;Mark Wiebe;2010-12-08 17:10:45 -0800;BUG: core: PyArray_ObjectToScalar converts True/False to int
In CPython, boolean is a subtype of integer, so the PyInt_Check
was catching booleans as well.

==

numpy/core/src/multiarray/scalarapi.c
==================
147f817;Mark Wiebe;2010-12-03 09:49:17 -0800;STY: Break some long lines

==

numpy/core/include/numpy/ufuncobject.h
numpy/core/src/npymath/ieee754.c.src
==================
7e18eaf;Mark Wiebe;2010-12-02 23:20:47 -0800;BUG: core: Some fixes and clean up of floating point exception code

==

numpy/core/include/numpy/npy_math.h
numpy/core/include/numpy/ufuncobject.h
numpy/core/src/npymath/halffloat.c
numpy/core/src/npymath/ieee754.c.src
numpy/core/src/scalarmathmodule.c.src
numpy/core/src/umath/loops.c.src
numpy/core/tests/test_errstate.py
numpy/core/tests/test_half.py
numpy/core/tests/test_numeric.py
==================
e2e2652;Pearu Peterson;2010-12-03 21:04:21 +0200;BUG: Fixes ticket 1693.

==

numpy/f2py/crackfortran.py
==================
6aacc2d;Charles Harris;2010-12-02 15:26:22 -0700;BUG: Try fix for python 2.4, use list instead of tuple.

==

numpy/lib/npyio.py
==================
67ed62e;Pearu Peterson;2010-12-02 22:04:10 +0200;BUG: Fix ticket 1679.

==

numpy/f2py/crackfortran.py
==================
c0e1c00;Mark Wiebe;2010-12-02 11:13:19 -0800;BUG: core: The array_richcompare result, temp, may be a scalar so need to check
This was causing a segfault on some platforms.

==

numpy/core/src/multiarray/arrayobject.c
==================
8d0b581;rgommers;2010-11-30 22:14:37 +0800;ENH: add support for the PathScale compilers on Linux. Closes #1043.
Thanks to R. Perez.

==

numpy/distutils/ccompiler.py
numpy/distutils/fcompiler/__init__.py
numpy/distutils/fcompiler/pathf95.py
numpy/distutils/pathccompiler.py
==================
a70de5c;rgommers;2010-11-30 21:27:34 +0800;BUG: complex.h is broken on Interix, so skip it. Closes ticket #1365.

==

numpy/core/setup.py
==================
9e8bf66;Mark Wiebe;2010-12-01 20:16:07 -0800;DOC: Add release note mention of float16 type

==

doc/release/2.0.0-notes.rst
==================
2ee1639;Charles Harris;2010-12-01 20:12:18 -0700;Merge branch 'm-paradox-implement_half_dtype'

==
==================
c6f8dbb;Mark Wiebe;2010-11-27 16:45:12 -0800;ENH: Rename the half character code from 'j' to 'e'

==

doc/source/reference/arrays.scalars.rst
doc/source/reference/c-api.ufunc.rst
doc/source/reference/ufuncs.rst
numpy/core/code_generators/generate_umath.py
numpy/core/code_generators/numpy_api.py
numpy/core/include/numpy/ndarraytypes.h
numpy/core/numerictypes.py
numpy/core/src/umath/loops.c.src
==================
9b72aa9;Mark Wiebe;2010-11-10 17:08:45 -0800;DOC: core: Update docs for half/float16 type

==

doc/source/reference/arrays.dtypes.rst
doc/source/reference/arrays.scalars.rst
doc/source/reference/c-api.coremath.rst
doc/source/reference/c-api.dtype.rst
doc/source/reference/c-api.ufunc.rst
doc/source/reference/figures/dtype-hierarchy.dia
doc/source/reference/figures/dtype-hierarchy.png
doc/source/reference/ufuncs.rst
doc/source/user/c-info.beyond-basics.rst
numpy/core/include/numpy/halffloat.h
numpy/doc/basics.py
numpy/doc/structured_arrays.py
==================
632ba9b;Mark Wiebe;2010-11-10 17:06:12 -0800;ENH: core: Add half/float16 character code to numpy.typecodes

==

numpy/core/numerictypes.py
==================
0a0873f;Mark Wiebe;2010-11-27 16:13:51 -0800;TST: Refactor the half test to use a fixture

==

numpy/core/tests/test_half.py
==================
89d8512;Mark Wiebe;2010-11-09 21:58:53 -0800;ENH: core: Add floating point exception support to the half/float16 type

==

numpy/core/include/numpy/ufuncobject.h
numpy/core/src/npymath/halffloat.c
numpy/core/tests/test_half.py
==================
82a5d0b;Mark Wiebe;2010-11-09 15:42:31 -0800;ENH: core: Add half/float16 finfo support

==

numpy/core/getlimits.py
numpy/core/tests/test_getlimits.py
==================
88feef8;Mark Wiebe;2010-11-09 16:09:14 -0800;ENH: core: Fix up coercion rules for half/float16

==

numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_half.py
==================
8f354f6;Mark Wiebe;2010-11-09 16:04:55 -0800;ENH: core: Update the sorting module for half/float16

==

numpy/core/setup.py
numpy/core/src/_sortmodule.c.src
==================
db128cc;Mark Wiebe;2010-12-01 17:17:35 -0800;ENH: core: Implement half/float16 umath loops

==

numpy/core/code_generators/generate_umath.py
numpy/core/code_generators/numpy_api.py
numpy/core/src/umath/loops.c.src
numpy/core/src/umath/loops.h
numpy/core/src/umath/loops.h.src
numpy/core/src/umath/umathmodule.c.src
numpy/core/tests/test_half.py
==================
15c6812;Mark Wiebe;2010-11-09 16:02:27 -0800;ENH: core: Create half/float16 data type

==

numpy/core/SConscript
numpy/core/code_generators/numpy_api.py
numpy/core/include/numpy/arrayscalars.h
numpy/core/include/numpy/halffloat.h
numpy/core/include/numpy/ndarraytypes.h
numpy/core/include/numpy/noprefix.h
numpy/core/include/numpy/npy_common.h
numpy/core/include/numpy/old_defines.h
numpy/core/numerictypes.py
numpy/core/setup.py
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/conversion_utils.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/scalarapi.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/npymath/halffloat.c
numpy/core/src/scalarmathmodule.c.src
numpy/core/tests/test_half.py
==================
af84876;Mark Wiebe;2010-11-28 17:00:36 -0800;ENH: Remove type number ordering assumptions in CanCastSafely, ScalarKinds, and CanCoerceScalar
Also add print_coercion_tables.py to aid when refactoring
type casting/coercion/promotion.

==

numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/multiarray/scalartypes.h
numpy/core/src/multiarray/usertypes.c
numpy/core/tests/test_numeric.py
numpy/testing/print_coercion_tables.py
==================
9273a61;rgommers;2010-11-28 09:42:34 +0800;DOC: BUG: correct description of ndarray iterator. Closes #1687.

==

doc/source/reference/arrays.classes.rst
==================
6d49edc;Pauli Virtanen;2010-11-25 10:52:41 +0100;BUG: Py3: ensure version.py imports are translated appropriately

==

tools/py3tool.py
==================
cfd4c05;Charles Harris;2010-11-24 20:10:10 -0700;TST: Add regression test for ticket #1676.

==

numpy/lib/tests/test_regression.py
==================
f0c3443;Charles Harris;2010-11-23 22:43:12 -0700;BUG: data shouldn't be an optional argument.

==

numpy/lib/recfunctions.py
==================
3b8cf12;weathergod;2010-11-21 18:37:51 -0700;BUG: Fix logic in handling of dtype in append_fields.

==

numpy/lib/recfunctions.py
==================
8fa2591;Stefan van der Walt;2010-11-23 23:22:47 +0200;BUG: Fix GzipFile wrapper to be <= 2.5 compatible.

==

numpy/lib/npyio.py
==================
0131218;Pauli Virtanen;2010-11-23 17:50:54 +0100;BUG: setup.py: write version.py only after switching to Py3 build dir
This prevents importing non-2to3'ed numpy in Python 3 build, if
numpy/version.py exists for some reason but .git does not (e.g building
multiple Numpy versions from same source tree).

==

setup.py
==================
12d0200;Neil Muller;2010-11-20 11:15:54 -0700;BUG: Fix exception handling for python 3k.

==

numpy/ctypeslib.py
==================
ced0e77;Mark Wiebe;2010-10-18 17:57:31 -0700;ENH: core: allow record array comparison when sub-arrays are present

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/tests/test_multiarray.py
==================
223f553;Mark Wiebe;2010-10-27 17:46:31 -0700;BUG: core: Change subarray field indexing to always append the shape, add tests

==

numpy/core/src/multiarray/ctors.c
numpy/core/tests/test_multiarray.py
==================
e6f2533;Mark Wiebe;2010-10-27 17:46:31 -0700;ENH: core: add order= argument to recarray __new__

==

numpy/core/records.py
==================
4926abe;Mark Wiebe;2010-11-19 12:20:34 -0800;DOC: Made problems with arange floating-point steps more clearly spelled out.

==

numpy/add_newdocs.py
==================
8cbed8c;Stefan van der Walt;2010-11-18 10:17:36 +0200;ENH: Remove deprecation warning from GzipFile wrapper.

==

numpy/lib/npyio.py
==================
277c740;Stefan van der Walt;2010-11-18 10:08:09 +0200;BUG: Remove invalid reference to FULLVERSION from setupscons.py.

==

setupscons.py
==================
f26fdc9;Fabian Pedregosa;2010-11-17 04:46:20 +0100;BUG: GzipFile wrapper objects are not garbage collected (closes ticket #1356).
The underlying problem is that classes monkey-patched via
new.instancemethod will only free memory correctly if they do _not_
implement the __del__ method, which is not the case for gzip.GzipFile.

My proposed solution is to inherit from gzip.GzipFile and override
relevant methods instead of monkey-patching.

==

numpy/lib/npyio.py
==================
9d1c386;Charles Harris;2010-11-16 19:13:18 -0700;Merge branch 'm-paradox-scalar_fpe'

==
==================
91d4145;Charles Harris;2010-11-15 21:58:38 -0700;STY: Cleanup white space and break long lines.

==

numpy/core/tests/test_numeric.py
==================
72a702d;Mark Wiebe;2010-11-11 21:35:26 -0800;BUG: core: Make scalar output volatile to prevent incorrect optimizer reordering (#1671)

==

numpy/core/src/scalarmathmodule.c.src
numpy/core/tests/test_numeric.py
==================
d1a184c;Pauli Virtanen;2010-11-15 02:00:06 +0100;BUG: setup.py: make git_version() work on Python 3

==

setup.py
==================
de4de92;pierregm;2010-11-13 19:45:37 +0100;genfromtxt: Taking more adequate testing values when updating converters: bug #1665

==

numpy/lib/_iotools.py
numpy/lib/npyio.py
numpy/lib/tests/test_io.py
==================
fad376e;pierregm;2010-11-13 17:54:44 +0100;Fix bug #1656

==

numpy/lib/_iotools.py
numpy/lib/tests/test_io.py
==================
a9d936e;pierregm;2010-10-13 12:06:23 +0200;Fixing genfromtxt: names w/ usecols (bug #1636)

==

numpy/lib/npyio.py
numpy/lib/tests/test_io.py
==================
4a7de57;rgommers;2010-11-11 21:29:56 +0800;DOC: rename ReST files under doc/ from *.txt to *.rst.txt, so they render on github.

==

doc/CAPI.rst.txt
doc/CAPI.txt
doc/DISTUTILS.rst.txt
doc/DISTUTILS.txt
doc/EXAMPLE_DOCSTRING.rst.txt
doc/EXAMPLE_DOCSTRING.txt
doc/HOWTO_BUILD_DOCS.rst.txt
doc/HOWTO_BUILD_DOCS.txt
doc/HOWTO_DOCUMENT.rst.txt
doc/HOWTO_DOCUMENT.txt
doc/HOWTO_MERGE_WIKI_DOCS.rst.txt
doc/HOWTO_MERGE_WIKI_DOCS.txt
doc/HOWTO_RELEASE.rst.txt
doc/HOWTO_RELEASE.txt
doc/Py3K.rst.txt
doc/Py3K.txt
doc/TESTS.rst.txt
doc/TESTS.txt
doc/records.rst.txt
doc/records.txt
doc/ufuncs.rst.txt
doc/ufuncs.txt
==================
a07ac0f;Charles Harris;2010-11-10 08:38:13 -0700;ENH: Add '-' to separate git hash in version.

==

setup.py
==================
0ba85ce;Charles Harris;2010-11-10 07:50:49 -0700;Merge branch 'scottza-git-dev-versioning'

==
==================
0502dab;Scott Sinclair;2010-11-10 07:24:57 +0200;REF: Make version.py more readable

==

setup.py
==================
d5ed744;Scott Sinclair;2010-11-10 07:19:15 +0200;ENH: Use seven character git hash for dev version string
- Also correct spelling of 'Unknown'

==

setup.py
==================
58e6360;Scott Sinclair;2010-11-09 17:09:15 +0200;ENH: Add Git revision hash to numpy dev version string
- Appends the first 6 characters of the Git revision used to build
  Numpy

- Adds an additional attribute to easily obtain the full Git revision

==

numpy/__init__.py
setup.py
==================
8adfc76;rgommers;2010-10-16 11:25:18 +0800;DOC: update release docs.
- clarify some things that Vincent Davis and Friedrich Romstedt ran into when
  following this doc on a new OS X install.
- update Python versions supported at the moment.

==

doc/HOWTO_RELEASE.txt
==================
c980bfe;rgommers;2010-11-08 21:28:29 +0800;TST: mark cexp tests as knownfail on OS X PPC.

==

numpy/core/tests/test_umath_complex.py
==================
cb8ebd2;rgommers;2010-11-08 21:11:49 +0800;TST: silence ldexp overflow warning.

==

numpy/core/tests/test_umath.py
==================
435c726;rgommers;2010-10-19 21:45:27 +0800;BUG: fix issue with incorrect Fortran arch flags. Closes #1399.
The basic idea here is to compare arch flags the Fortran compiler supports with
the ones the C compiler receives, and throw out any superfluous ones.

==

numpy/distutils/fcompiler/gnu.py
==================
6e5590f;Mark Wiebe;2010-11-04 22:40:04 -0700;BUG: core: nonzero() requires swap for float types

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/item_selection.c
numpy/core/tests/test_regression.py
==================
12e936a;rgommers;2010-11-03 19:39:49 +0800;DOC: BUG: fix bug in example of np.spacing. Closes #1659.

==

numpy/core/code_generators/ufunc_docstrings.py
==================
2b06549;Charles Harris;2010-10-31 11:43:38 -0600;BUG: Git treats any line in .gitignore containing # anywhere as a comment.

==

.gitignore
==================
a32caf5;Pauli Virtanen;2010-10-30 00:43:29 +0200;TST: core: refactor test_dtype slightly

==

numpy/core/tests/test_dtype.py
==================
b124297;Pauli Virtanen;2010-10-30 15:12:59 +0200;BUG: core: force dtype subarray->shape to be always a tuple

==

numpy/core/src/multiarray/descriptor.c
numpy/core/tests/test_dtype.py
numpy/core/tests/test_multiarray.py
==================
5012504;Mark Wiebe;2010-10-20 16:23:36 -0700;BUG: core: handle sub-arrays in dtype comparisons

==

numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_dtype.py
==================
33b3e60;Darren Dale;2010-10-21 11:40:28 -0400;add .gitattributes and fix line endings

==

.gitattributes
branding/icons/numpylogo.svg
branding/icons/numpylogoicon.svg
tools/win32build/nsis_scripts/numpy-superinstaller.nsi.in
==================
cdcbaa4;David Cournapeau;2010-10-31 15:37:43 +0900;BUG: fix bug in dtype hash implementation for equivalent but different byte order character.

==

numpy/core/src/multiarray/hashdescr.c
numpy/core/tests/test_dtype.py
==================
6bcb36f;Pauli Virtanen;2010-10-29 12:35:17 +0200;DOC: dev: update also the overview

==

doc/source/dev/gitwash/patching.rst
==================
8e4efa9;Pauli Virtanen;2010-10-29 12:30:13 +0200;DOC: dev: update instructions on sending patches

==

doc/source/dev/gitwash/patching.rst
==================
fd19f04;Mark Wiebe;2010-10-26 15:59:37 -0700;BUG: core: Enabled keyword argument for 'order' parameter where it was missing, and tweaked some docs (#1581)

==

numpy/add_newdocs.py
numpy/core/fromnumeric.py
numpy/core/src/multiarray/methods.c
numpy/core/tests/test_multiarray.py
==================
05be85c;Pauli Virtanen;2010-10-20 21:24:28 +0200;TST: core: disable C99 complex tests also on Solaris if it seems that the platform functions are flaky

==

numpy/core/tests/test_umath_complex.py
==================
3747ab5;Pauli Virtanen;2010-10-20 00:07:26 +0200;TST: core: mark test_ldexp_overflow as known failure on Python < 2.6 on Windows, because of apparently broken C runtime in the python.org binaries

==

numpy/core/tests/test_umath.py
==================
3c2af9e;Pauli Virtanen;2010-10-18 14:27:39 +0200;DOC: dev: try to improve Git workflow docs

==

doc/source/dev/gitwash/configure_git.rst
doc/source/dev/gitwash/development_setup.rst
doc/source/dev/gitwash/development_workflow.rst
doc/source/dev/gitwash/following_latest.rst
doc/source/dev/gitwash/forking_hell.rst
doc/source/dev/gitwash/git_development.rst
doc/source/dev/gitwash/git_install.rst
doc/source/dev/gitwash/git_intro.rst
doc/source/dev/gitwash/index.rst
doc/source/dev/gitwash/patching.rst
doc/source/dev/gitwash/set_up_fork.rst
doc/source/dev/index.rst
==================
98484bb;Pauli Virtanen;2010-10-17 18:16:45 +0200;TST: core: fix test_fromfile_tofile_seeks to work on Windows

==

numpy/core/tests/test_regression.py
==================
ba01941;rgommers;2010-10-17 16:52:59 +0800;BUG: on Windows the sysconfig module does not contain CFLAGS info.

==

numpy/distutils/fcompiler/gnu.py
==================
106d40f;Charles Harris;2010-10-17 00:03:27 -0600;Merge branch 'deprecation-docs' of http://github.com/rgommers/numpy into rgommers-deprecation-docs

==
==================
f4d9da1;rgommers;2010-10-17 12:39:28 +0800;TST: remove a failing doctest for poly1d.
The failure only occurs on Windows and Python 2.5, there the printing of
floating point numbers is slightly different. Since this is a doctest and can
not be marked conditionally as knownfail, just removing it is simplest. It's
not a bug anyway.

==

numpy/lib/tests/test_polynomial.py
==================
9dd7c7b;Pearu Peterson;2010-10-16 22:18:54 +0300;UPDATE: gcc-4 series do not support -mno-cygwin option.

==

numpy/distutils/fcompiler/gnu.py
numpy/distutils/mingw32ccompiler.py
==================
43b05fd;Pearu Peterson;2010-10-16 21:38:04 +0300;Merge branch 'master' of git@github.com:numpy/numpy

==
==================
1ef8aac;Pearu Peterson;2010-10-16 21:37:21 +0300;BUG: f2py: fix creating string object from callback function using string size.

==

numpy/f2py/cb_rules.py
numpy/f2py/cfuncs.py
==================
6cd460c;rgommers;2010-10-16 22:27:05 +0800;DOC: recommend to turn on deprecation warnings for Python >= 2.7.
This was brought up on the mailing list on 10 Sep 2010.

==

README.txt
doc/TESTS.txt
==================
93f7521;Pauli Virtanen;2010-10-11 23:58:50 +0200;BUG: core: implement a long-int loop for ldexp, for cases where int != long (#1633)
long != int on many 64-bit platforms, so a second ufunc loop is needed
to handle ldexp long int inputs.

==

numpy/core/src/umath/loops.c.src
numpy/core/src/umath/loops.h
numpy/core/src/umath/loops.h.src
numpy/core/src/umath/umathmodule.c.src
numpy/core/tests/test_umath.py
==================
d24db34;Pauli Virtanen;2010-10-16 11:36:44 +0200;BUG: core: adjust ComplexWarning location frame up by one, so that the warning comes from the correct location (#1639)

==

numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/scalarmathmodule.c.src
==================
658a1dc;Matthew Brett;2010-10-11 16:09:53 -0700;BF - get fortran arch flags from C arch flags if available

==

numpy/distutils/fcompiler/gnu.py
==================
eca8f94;Pauli Virtanen;2010-10-14 11:04:51 +0200;BUG: DOC: fix invalid vdot documentation

==

numpy/add_newdocs.py
==================
1ee71d9;pierregm;2010-10-12 17:46:28 +0200;Added tests to test_eq_w_None (bug #1493)

==

numpy/ma/tests/test_core.py
==================
b0c9936;pierregm;2010-10-12 13:00:49 +0200;Revert "merging refs/remotes/origin/master into HEAD"
This reverts commit a14dd542532d383610c1b01c5698b137dd058fea, reversing
changes made to 11ee694744f2552d77652ed929fdc2b4ccca6843.

==

.project
.pydevproject
numpy/ma/tests/test_core.py
==================
4bbe9a8;Jarrod Millman;2010-10-11 23:19:28 -0700;ENH - improved .gitignore

==

.gitignore
==================
a14dd54;pierregm;2010-10-11 23:02:10 +0200;merging refs/remotes/origin/master into HEAD

==
==================
61d945b;pierregm;2010-10-11 22:24:26 +0200;Add more tests to test_eq_w_None (bug #1493)

==

.project
.pydevproject
numpy/ma/tests/test_core.py
==================
11ee694;Pauli Virtanen;2010-10-11 00:40:13 +0200;BUG: core: richcompare must indicate undefined comparison via Py_NotImplemented (fixes #1491)
The Python documentation indicates that the result from comparisons
should be Py_NotImplemented when undefined, and there is no reason why
not follow that also in array_richcompare.

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/tests/test_regression.py
==================
d7ff907;Pauli Virtanen;2010-10-10 23:50:53 +0200;BUG: lib: clean up ancient-Python era stuff from IndexExpression (#1196)

==

numpy/lib/index_tricks.py
numpy/lib/tests/test_index_tricks.py
==================
68e31fe;Pauli Virtanen;2010-10-10 23:31:22 +0200;ENH: lib: allow zip64 extensions in .npz files; allows > 2GB

==

numpy/lib/npyio.py
==================
61d14a1;Pauli Virtanen;2010-10-10 23:26:12 +0200;ENH: lib: add savez_compressed function for saving compressed archives

==

numpy/lib/npyio.py
==================
99f79e3;Pauli Virtanen;2010-10-10 21:29:27 +0200;BUG: linalg: lstsq should always return real residuals (#937)

==

numpy/linalg/linalg.py
numpy/linalg/tests/test_linalg.py
==================
8630830;Pauli Virtanen;2010-10-10 20:43:53 +0200;BUG: io: close file handles immediately after use, where possible (#1517)

==

numpy/lib/npyio.py
==================
a16ee31;Pauli Virtanen;2010-10-10 20:09:20 +0200;BUG: core: fix duplicate name problems in dtype.names setting (#1598)

==

numpy/core/src/multiarray/descriptor.c
numpy/core/tests/test_regression.py
==================
2be8914;Pauli Virtanen;2010-10-10 19:20:52 +0200;BUG: core: fix uint64 -> Python int cast (fixes #1287)

==

numpy/core/src/scalarmathmodule.c.src
numpy/core/tests/test_regression.py
==================
ac7bdc5;rgommers;2010-10-10 14:22:50 +0800;DOC: Update the testing guidelines.
Things that are changed are:
  - use assert_() instead of plain assert, and explain why.
  - do not use "from numpy.testing import *"
  - explain #random directive for doctests

==

doc/HOWTO_DOCUMENT.txt
doc/TESTS.txt
==================
0244430;Pauli Virtanen;2010-10-08 11:10:21 +0200;BUG: core: handle errors from PyErr_Warn for ComplexWarning

==

numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/scalarmathmodule.c.src
numpy/core/tests/test_multiarray.py
==================
a844131;rgommers;2010-10-08 22:59:44 +0800;DOC: Change mention of SVN to Git.

==

DEV_README.txt
==================
9950e72;Pauli Virtanen;2010-10-06 21:54:40 +0200;BUG: f2py: fix building modules via 'f2py -c' (broken in e6eafde)

==

numpy/f2py/capi_maps.py
==================
5a0ab02;Pauli Virtanen;2010-10-06 01:15:15 +0200;BUG: core: use #if check instead of #ifdef in checking HAVE_DECL_ISFINITE (ticket #1625)
Python #defines HAVE_DECL_ISFINITE 0 when the function is not available,
so the proper check to do is #if.

==

numpy/core/setup.py
numpy/distutils/command/config.py
==================
8b0d659;Pearu Peterson;2010-10-06 21:41:22 +0300;Added Portland Group compiler support for Darwin platform (thanks to Josef Koller).

==

numpy/distutils/fcompiler/__init__.py
numpy/distutils/fcompiler/pg.py
==================
394bb85;Pauli Virtanen;2010-10-06 10:16:46 +0200;BUG: core: fix compilation with Solaris 10 / Sun Studio 12.1 (ticket #1626)

==

numpy/core/src/umath/loops.c.src
==================
1f0c928;Pauli Virtanen;2010-10-04 21:32:16 +0200;DOC: regenerate gitwash docs

==

doc/source/dev/gitwash/branch_list.png
doc/source/dev/gitwash/branch_list_compare.png
doc/source/dev/gitwash/configure_git.rst
doc/source/dev/gitwash/development_workflow.rst
doc/source/dev/gitwash/dot2_dot3.rst
doc/source/dev/gitwash/following_latest.rst
doc/source/dev/gitwash/forking_button.png
doc/source/dev/gitwash/forking_hell.rst
doc/source/dev/gitwash/git_development.rst
doc/source/dev/gitwash/git_install.rst
doc/source/dev/gitwash/git_intro.rst
doc/source/dev/gitwash/git_links.inc
doc/source/dev/gitwash/git_resources.rst
doc/source/dev/gitwash/index.rst
doc/source/dev/gitwash/patching.rst
doc/source/dev/gitwash/pull_button.png
doc/source/dev/gitwash/set_up_fork.rst
==================
8b04536;Pauli Virtanen;2010-10-04 21:22:57 +0200;DOC: add developer docs based on gitwash

==

doc/Makefile
doc/source/_templates/indexcontent.html
doc/source/contents.rst
doc/source/dev/gitwash_links.txt
doc/source/dev/index.rst
==================
816adf9;Pauli Virtanen;2010-10-04 20:54:43 +0200;DOC: remove numpy.scipy.org -- it's now in a separate repository

==

doc/numpy.scipy.org/Makefile
doc/numpy.scipy.org/_theme/scipy/index.html
doc/numpy.scipy.org/_theme/scipy/layout.html
doc/numpy.scipy.org/_theme/scipy/static/favicon.ico
doc/numpy.scipy.org/_theme/scipy/static/images/bugs.png
doc/numpy.scipy.org/_theme/scipy/static/images/documentation.png
doc/numpy.scipy.org/_theme/scipy/static/images/download.png
doc/numpy.scipy.org/_theme/scipy/static/images/feed-icon.png
doc/numpy.scipy.org/_theme/scipy/static/images/tutorial.png
doc/numpy.scipy.org/_theme/scipy/static/logo.gif
doc/numpy.scipy.org/_theme/scipy/static/numpy_logo.png
doc/numpy.scipy.org/_theme/scipy/static/scipy.css
doc/numpy.scipy.org/_theme/scipy/theme.conf
doc/numpy.scipy.org/conf.py
doc/numpy.scipy.org/content.rst
doc/numpy.scipy.org/license.rst
doc/numpy.scipy.org/old_array_packages.rst
==================
a1c7953;Pauli Virtanen;2010-10-01 15:21:30 +0200;sphinxext: bump numpydoc version

==

doc/sphinxext/setup.py
==================
08e85c1;Pauli Virtanen;2010-10-01 15:21:15 +0200;sphinxext: remove deprecated parts from numpydoc

==

doc/sphinxext/README.txt
doc/sphinxext/autosummary.py
doc/sphinxext/autosummary_generate.py
doc/sphinxext/only_directives.py
doc/sphinxext/plot_directive.py
==================
6716be4;Pauli Virtanen;2010-09-28 12:11:38 +0200;DOC: explicitly require Sphinx >= 1.0.1

==

doc/HOWTO_BUILD_DOCS.txt
doc/Makefile
doc/source/conf.py
==================
4510c4a;Pauli Virtanen;2010-10-01 11:15:38 +0200;sphinxext: fix Other Parameters section parsing in docscrape

==

doc/sphinxext/docscrape.py
doc/sphinxext/docscrape_sphinx.py
doc/sphinxext/tests/test_docscrape.py
==================
75cebc1;Charles Harris;2010-09-25 07:48:17 -0600;Merge branch 'master' into fixes

==
==================
a1d54a8;Charles Harris;2010-09-25 07:46:44 -0600;ENH: Update absoft fortran flags for v11.0.

==

numpy/distutils/fcompiler/absoft.py
==================
3466789;Charles Harris;2010-09-23 20:42:19 -0600;BUGLET: Need "\\n" in string template.

==

numpy/f2py/setup.py
==================
50479e9;Charles Harris;2010-09-22 22:34:35 -0600;FIX: And add missing \n for error message.

==

numpy/f2py/setup.py
==================
8f6114b;Charles Harris;2010-09-22 22:24:36 -0600;BUG: Fix previous fix to numpy/g2py/setup.py.

==

numpy/f2py/setup.py
==================
29cccb6;Charles Harris;2010-09-22 19:42:19 -0600;BUG: Fix generated f2py bootstrap script to work with python 3k. Thanks to Lisandro Dalcin.

==

numpy/f2py/setup.py
==================
14d8e20;Pauli Virtanen;2010-09-21 01:43:09 +0200;BUG: core: ensure cfloat and clongdouble scalars have a __complex__ method, so that complex(...) cast works properly (fixes #1617)

==

numpy/core/src/multiarray/scalartypes.c.src
numpy/core/tests/test_regression.py
==================
d82003b;Pauli Virtanen;2010-09-21 01:19:15 +0200;ENH: core: emit ComplexWarning also when array scalars are cast to real/int

==

numpy/core/src/scalarmathmodule.c.src
numpy/core/tests/test_regression.py
==================
e6eafde;David Cournapeau;2010-09-17 11:43:53 +0900;FEAT: add C module and f2py fortran wrapper output customization from command line.

==

numpy/f2py/capi_maps.py
numpy/f2py/f2py2e.py
numpy/f2py/rules.py
==================
c952a9c;Stefan van der Walt;2010-09-16 16:04:42 +0200;DOC: Point the npy NEP to the git repo.

==

doc/neps/npy-format.txt
==================
f4a313e;Stefan van der Walt;2010-09-16 15:53:40 +0200;DOC: Remove more SVN references.

==

README.txt
doc/HOWTO_DOCUMENT.txt
doc/TESTS.txt
tools/osxbuild/docs/README.txt
==================
9c6c71d;Stefan van der Walt;2010-09-16 13:54:25 +0200;DOC: Refer to git repo in release notes.

==

doc/HOWTO_RELEASE.txt
==================
0f49fa5;Charles Harris;2010-09-15 12:40:22 -0600;Merge remote branch 'charris/misc'

==
==================
97cecfe;Charles Harris;2010-09-15 10:47:42 -0600;ENH: Add .gitignore file.

==

.gitignore
==================
c970251;pierregm;2010-09-13 23:54:54 +0000;* fixed the behavior of {{{skip_footer}}} in {{{genfromtxt}}} when some invalid lines are present (bug #1593)

==

numpy/lib/npyio.py
numpy/lib/tests/test_io.py
==================
96afea0;pierregm;2010-09-13 15:43:27 +0000;* ma.core._print_templates: switched the keys 'short' and 'long' to 'short_std' and 'long_std' respectively (bug #1586) * Fixed incorrect broadcasting in ma.power (bug #1606)

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
7213c5d;pierregm;2010-09-13 12:34:37 +0000;* fixed 'flatten_dtype' to support fields w/ titles (bug #1591). Thx to Stefan vdW for the fix. * added a unittest for flatten_dtype

==

numpy/lib/_iotools.py
numpy/lib/tests/test__iotools.py
==================
a70f571;Pauli Virtanen;2010-09-11 21:34:37 +0000;BUG: distutils: make is_free_format et al. not choke on non-ascii Fortran files

==

numpy/distutils/fcompiler/__init__.py
==================
36bb1c9;Pauli Virtanen;2010-09-11 18:11:57 +0000;BUG: core: fix npy_PyFile_Check implementation on Py3

==

numpy/core/include/numpy/npy_3kcompat.h
==================
336cd47;Pauli Virtanen;2010-09-11 16:56:14 +0000;BUG: core: on Python3, seek file handle to the current position in npy_PyFile_Dup (fixing #1610)

==

numpy/core/include/numpy/npy_3kcompat.h
numpy/core/tests/test_regression.py
==================
b4629cc;Pauli Virtanen;2010-09-11 15:56:32 +0000;BUG: core: fix a missing return branch in npy_3kcompat.h

==

numpy/core/include/numpy/npy_3kcompat.h
==================
b45222e;Pauli Virtanen;2010-09-11 15:47:22 +0000;BUG: core: sync Python 3 file handle position in tofile/fromfile (fixes #1610)

==

numpy/core/include/numpy/npy_3kcompat.h
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_regression.py
==================
d5382aa;Pauli Virtanen;2010-09-11 15:13:42 +0000;TST: disable --detailed-errors by default -- the output it gives is more confusing than useful

==

numpy/testing/nosetester.py
==================
3843e86;Pauli Virtanen;2010-09-11 14:52:07 +0000;BUG: core: fix _dotblas usage on Py3 (fixes #1609)

==

numpy/core/tests/test_blasdot.py
tools/py3tool.py
==================
b74533b;rgommers;2010-09-07 12:58:57 +0000;REL: forward-port change in size of dmg image from 1.5.x branch.

==

tools/numpy-macosx-installer/new-create-dmg
==================
bf8f5f4;Pauli Virtanen;2010-09-05 15:23:39 +0000;BUG: core/buffer: ensure that array_dealloc runs correctly even when PyErr flag is set (fixes #1605)

==

numpy/core/src/multiarray/buffer.c
==================
59a95e8;David Cournapeau;2010-09-05 13:54:07 +0000;BUG: do not add empty string when interpolating values in LibraryInfo.
This adds superflous space in strings, which cause issues when executing
commands outside shell control (e.g. '-I/usr/include ' will not add
'/usr/include' but '/usr/include ' into the search path of compilers)

==

numpy/distutils/npy_pkg_config.py
==================
32a04c4;Pauli Virtanen;2010-09-05 13:36:35 +0000;DOC: add instructions for updating the docs to HOWTO_RELEASE.txt

==

doc/HOWTO_RELEASE.txt
==================
93ef8f7;Pauli Virtanen;2010-09-05 13:24:16 +0000;sphinxext/plot_directive: more robust relpath

==

doc/sphinxext/plot_directive.py
==================
e5387aa;rgommers;2010-09-05 04:40:37 +0000;DOC: some more details on release process, and blank 2.0.0 notes.

==

doc/HOWTO_RELEASE.txt
doc/release/2.0.0-notes.rst
==================
3cb0eb3;Pauli Virtanen;2010-09-04 13:08:43 +0000;sphinxext: be explicit about Sphinx version requirements

==

doc/sphinxext/numpydoc.py
==================
2b1f276;Pauli Virtanen;2010-09-04 13:08:27 +0000;BUG: distutils: use // in a binary search (fixes #1604 on Python 3)

==

numpy/distutils/command/config.py
==================
07b7bf3;rgommers;2010-09-04 10:17:19 +0000;TST: Change outdated message for knownfail described in #1081.

==

numpy/core/tests/test_regression.py
==================
3c3d423;rgommers;2010-09-04 10:10:42 +0000;REL: Apply changes to release notes and paver script in 1.5.x branch to trunk.

==

doc/release/1.5.0-notes.rst
pavement.py
==================
7843154;rgommers;2010-09-04 09:53:01 +0000;DOC: update doc/swig makefile and readme after moving swig/doc into refguide.

==

doc/swig/Makefile
doc/swig/README
==================
779d063;rgommers;2010-09-04 09:52:44 +0000;DOC: remove built separate swig docs.

==

doc/swig/doc/Makefile
doc/swig/doc/numpy_swig.html
doc/swig/doc/numpy_swig.pdf
doc/swig/doc/testing.html
doc/swig/doc/testing.pdf
==================
72665ab;rgommers;2010-09-04 09:52:24 +0000;DOC: integrate doc/swig/doc documentation with reference guide.

==

doc/source/reference/index.rst
doc/source/reference/swig.interface-file.rst
doc/source/reference/swig.rst
doc/source/reference/swig.testing.rst
doc/swig/doc/numpy_swig.txt
doc/swig/doc/testing.txt
==================
9752b73;rgommers;2010-09-04 09:51:57 +0000;Add doc/swig, doc/cython and doc/pyrex dirs back. Closes #1088.

==

setup.py
==================
4f74a49;Pauli Virtanen;2010-09-01 23:22:30 +0000;sphinxext: more lenient parsing for See Also sections

==

doc/sphinxext/docscrape.py
==================
362f9cb;dhuard;2010-08-31 14:02:59 +0000;Made sure the warning filters in test_function_base and test_arraysetops do not modify user defined filters.

==

numpy/lib/tests/test_arraysetops.py
numpy/lib/tests/test_function_base.py
==================
400a2a6;dhuard;2010-08-30 17:24:57 +0000;added a warning concerning the buggy normalization in histogram with non-uniform bin widths

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
c663655;Pearu Peterson;2010-08-30 10:56:17 +0000;Implemented detection of gfortran usage for ATLAS linkage. get_atlas_version returns now a tuple (version_str, info_dict). Nice thing about the patch is that specifying gnu95 compiler is not needed anymore for numpy (neither for scipy) build when using ATLAS containing gfortran compiled blas/lapack.

==

numpy/distutils/command/config.py
numpy/distutils/system_info.py
==================
3743430;dhuard;2010-08-27 20:21:22 +0000;Fixed bug in histogram for non-uniform bin widths and normed=True.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
71dfaec;rgommers;2010-08-25 12:30:32 +0000;BUG: Fix bug on Windows in fromfile/tofile. Closes #1583. Thanks to C. Gohkle.

==

numpy/core/include/numpy/npy_3kcompat.h
==================
451fe6a;Pearu Peterson;2010-08-25 11:23:07 +0000;Fix bug to ensure that swig generated .py files are installed.

==

numpy/distutils/command/__init__.py
numpy/distutils/command/build_py.py
==================
a1b13e1;Pearu Peterson;2010-08-25 08:41:58 +0000;Fix swig target extension when swig target is not defined by the .i file but should be c++.

==

numpy/distutils/command/build_src.py
==================
ff0822c;Pearu Peterson;2010-08-25 07:22:40 +0000;Make extension swig_opts effective to build_src command.

==

numpy/distutils/command/build_src.py
==================
dbe18f0;David Cournapeau;2010-08-21 02:32:18 +0000;BUG: fix re-declaration of already defined macros in python.h.

==

numpy/core/setup.py
==================
ece5941;rgommers;2010-08-21 02:01:23 +0000;DOC: update release howto with notes on PyPi and python-announce list.

==

doc/HOWTO_RELEASE.txt
==================
24eb850;rgommers;2010-08-20 10:48:41 +0000;3K: make setupegg.py work through imp.
Necessary because execfile() has disappeared in py3k.  None of this works with
bdist_mpkg at the moment, but that's a separate problem.

==

setupegg.py
==================
e777aaf;Charles Harris;2010-08-17 18:22:25 +0000;Merge branch 'poly'

==

numpy/polynomial/polytemplate.py
==================
45020fb;Charles Harris;2010-08-17 02:39:06 +0000;DOC: Fix documentation and examples in legendre.py.

==

numpy/polynomial/legendre.py
==================
8f1b2d6;Charles Harris;2010-08-17 01:52:11 +0000;ENH: Add support for Legendre polynomials.

==

numpy/polynomial/__init__.py
numpy/polynomial/chebyshev.py
numpy/polynomial/legendre.py
numpy/polynomial/tests/test_chebyshev.py
numpy/polynomial/tests/test_legendre.py
==================
00b74ad;Charles Harris;2010-08-16 00:10:29 +0000;Merge branch 'poly'

==

numpy/polynomial/tests/test_chebyshev.py
==================
e7c59e6;Charles Harris;2010-08-15 21:06:29 +0000;Mention functions for Chebyshev points in release notes.

==

doc/release/1.5.0-notes.rst
==================
3ade0a8;Charles Harris;2010-08-15 21:06:27 +0000;Merge branch 'poly'

==

numpy/polynomial/chebyshev.py
numpy/polynomial/tests/test_chebyshev.py
==================
0a02480;Charles Harris;2010-08-15 19:11:02 +0000;FIX: Merge munge.

==

numpy/polynomial/chebyshev.py
==================
cc5d131;Charles Harris;2010-08-15 19:11:00 +0000;Merge branch 'poly'
Conflicts:
	numpy/polynomial/chebyshev.py
	numpy/polynomial/polynomial.py

==

doc/release/1.5.0-notes.rst
numpy/lib/npyio.py
numpy/polynomial/chebyshev.py
numpy/polynomial/polynomial.py
numpy/polynomial/polytemplate.py
==================
a0f3609;Charles Harris;2010-08-15 18:16:38 +0000;ENH: Add {cheb,poly}mulx functions as use them to simplify some code. Fix some documentation.

==

numpy/polynomial/chebyshev.py
numpy/polynomial/polynomial.py
numpy/polynomial/tests/test_chebyshev.py
numpy/polynomial/tests/test_polynomial.py
==================
6b9762c;Charles Harris;2010-08-15 00:40:26 +0000;BUG: Fix integration of zero polynomials. Remove checks that prevent use of foreign scalar types for lower bounds and integration constants. Cleanup code a bit.

==

numpy/polynomial/chebyshev.py
numpy/polynomial/polynomial.py
numpy/polynomial/tests/test_chebyshev.py
numpy/polynomial/tests/test_polynomial.py
==================
50db7ff;rgommers;2010-08-14 13:45:26 +0000;DOC: Complete 1.5.0 release notes.

==

doc/release/1.5.0-notes.rst
==================
bd5695e;rgommers;2010-08-14 13:45:09 +0000;DEP: change default behavior of correlate(), old behavior was deprecated in 1.4.0.
The old behavior should be preserved and made available under the name xcorr or
similar. Should be done for 2.0, then the old_behavior keyword can be removed.

==

numpy/core/numeric.py
numpy/core/tests/test_numeric.py
==================
0855992;rgommers;2010-08-14 13:44:49 +0000;DEP: deprecate behavior for out-of-order field indexing of recarrays. See #1431.

==

numpy/core/_internal.py
numpy/core/tests/test_records.py
==================
095b454;rgommers;2010-08-14 13:43:39 +0000;BUG: define LDEXPL/FREXPL functions for MSVC builds (see #1499).
Note that this doesn't fix the Solaris issue, so #1499 not closed.
Thanks to Christoph Gohlke.

==

numpy/core/src/private/npy_config.h
==================
fe3a17a;rgommers;2010-08-14 13:43:19 +0000;BUG: workaround for undefined isnan/isinf in VS2008. Closes #1502.
Thanks to Christoph Gohlke.

==

numpy/core/include/numpy/npy_math.h
==================
6037fd4;rgommers;2010-08-14 13:42:59 +0000;TST: skip C99 nan/inf tests on Windows.

==

numpy/core/tests/test_umath_complex.py
==================
0a31266;rgommers;2010-08-14 13:42:38 +0000;BUG: Better format specifier for Py 2.7, 3.2 on win-amd64. Closes #1570.
Thanks to Christoph Gohlke.

==

numpy/core/include/numpy/ndarraytypes.h
==================
6cfb3ff;pierregm;2010-08-11 01:59:39 +0000;fix (flat)notmasked_/contiguous/edges/

==

numpy/ma/extras.py
numpy/ma/tests/test_extras.py
==================
1994e4a;Charles Harris;2010-08-11 01:18:21 +0000;BUG: Make mapdomain work for multidimensional arrays as advertized in the documentation. Fixes ticket #1554.

==

numpy/polynomial/polyutils.py
numpy/polynomial/tests/test_polyutils.py
==================
01362e3;Charles Harris;2010-08-10 17:24:25 +0000;BUG: Fix missing 'self' in test cleanups.

==

numpy/lib/tests/test_twodim_base.py
==================
ae2ebe1;Charles Harris;2010-08-10 17:24:23 +0000;ENH: Add some tests for ticket #1579. Do some cleanups.

==

numpy/lib/tests/test_twodim_base.py
==================
4d40dff;Charles Harris;2010-08-10 17:24:20 +0000;BUG: Fix ticket #1579. Do some cleanups.

==

numpy/lib/twodim_base.py
==================
32c0806;pierregm;2010-08-09 20:07:06 +0000;

==

numpy/ma/testutils.py
==================
133bb76;pierregm;2010-08-09 19:57:33 +0000;ma.extras * fixed the documentation of (flat)notmasked_xxx

==

numpy/ma/extras.py
numpy/ma/tests/test_extras.py
==================
3ab71ce;pierregm;2010-08-09 19:27:14 +0000;* fixed numpy.ma.extras.flatnotmasked_contiguous (bug #1576)

==

numpy/ma/extras.py
==================
7b7bbc5;Pauli Virtanen;2010-08-08 18:52:19 +0000;DOC: add FILES option to doc Makefile, for partial rebuilds

==

doc/Makefile
==================
9c3297c;Pauli Virtanen;2010-08-08 18:52:01 +0000;sphinxext: plot_directive: insert figures at points where plt.show() is called in the text

==

doc/sphinxext/plot_directive.py
==================
0c058e7;rgommers;2010-08-08 07:32:32 +0000;ENH: Make atleast_3d respect ndarray subclasses. Closes #1560.

==

numpy/core/shape_base.py
==================
c2f9eae;rgommers;2010-08-08 06:41:28 +0000;TST: fix memmap test error. Closes #1550. Thanks to Christoph Gohlke.

==

numpy/core/tests/test_memmap.py
==================
bf7dc71;Pauli Virtanen;2010-08-08 01:02:46 +0000;sphinxext: bug fix + some features in plot_directive

==

doc/sphinxext/plot_directive.py
==================
9195c44;rgommers;2010-08-05 10:50:36 +0000;DEP: Remove ma.extras functions that were deprecated in 1.4.0.

==

numpy/ma/extras.py
==================
4e7b7b6;rgommers;2010-08-05 10:23:03 +0000;3K: copy built installers from build/py3k/dist instead of dist/.

==

pavement.py
==================
a18e3e6;Pauli Virtanen;2010-08-04 19:40:55 +0000;3K: fix core/dotblas module initialization.

==

numpy/core/blasdot/_dotblas.c
==================
7eb6fa7;Pauli Virtanen;2010-08-04 12:01:29 +0000;ENH: include /*.txt etc. in source dist only, rather than installing it

==

MANIFEST.in
setup.py
==================
b2a1666;rgommers;2010-08-04 10:45:51 +0000;BUG: add tools/py3tool.py to installed/distributed files.

==

setup.py
==================
ef4c6bf;Pauli Virtanen;2010-08-03 22:21:09 +0000;3K: distutils: fix __code__ object access in mingw32ccompiler

==

numpy/distutils/mingw32ccompiler.py
==================
8626a75;Pauli Virtanen;2010-08-03 21:38:16 +0000;BUG: core/3K: use bytes.maketrans instead of the deprecated string.maketrans (fixes #1571)

==

numpy/core/code_generators/generate_umath.py
==================
7232a10;Pauli Virtanen;2010-08-03 21:37:48 +0000;BUG: core: fix a missed PyCObject call (#1571)

==

numpy/core/src/multiarray/convert_datatype.c
==================
69c7f43;rgommers;2010-08-01 11:07:50 +0000;BUG: Fix typo in commit r8564-66.

==

numpy/core/SConscript
==================
c7978bd;Pauli Virtanen;2010-07-31 13:48:52 +0000;BUG: core: fix refcount error in PyArray_Take (#939)

==

numpy/core/src/multiarray/item_selection.c
numpy/core/tests/test_regression.py
==================
869ccb8;Pauli Virtanen;2010-07-31 13:07:42 +0000;BUG: core/umath: fix powers of complex 0 (#1271)

==

numpy/core/src/umath/funcs.inc.src
numpy/core/tests/test_umath.py
==================
400a612;Darren Dale;2010-07-31 12:27:09 +0000;remove unnecessary import and reload in test_getlimits, which was causing errors when running the test suite.

==

numpy/core/tests/test_getlimits.py
==================
62ebd8e;Pauli Virtanen;2010-07-31 11:49:25 +0000;TST: Add tests for matlib. Closes #1242.
(From Ralf Gommers.)

==

numpy/matlib.py
numpy/tests/test_matlib.py
==================
d7bf2b5;rgommers;2010-07-31 10:13:56 +0000;BUG: fix numscons build issue introduced in r8541.
The problem was that if endian.h was not detected, @DEFINE_NPY_HAVE_ENDIAN_H@
was still present in _numpyconfig.h, causing compilation to fail.

==

numpy/core/SConscript
==================
7225d6d;rgommers;2010-07-31 10:04:54 +0000;DOC: wiki merge, matrlixlib and some ndarray methods.

==

numpy/add_newdocs.py
numpy/matrixlib/__init__.py
numpy/matrixlib/defmatrix.py
==================
d0a25f1;rgommers;2010-07-31 10:04:38 +0000;DOC: wiki merge, twodim_base and a few loose ones.

==

numpy/lib/scimath.py
numpy/lib/shape_base.py
numpy/lib/stride_tricks.py
numpy/lib/twodim_base.py
==================
c38c9d4;rgommers;2010-07-31 10:04:19 +0000;DOC: wiki merge, npyio, format and function_base

==

numpy/lib/format.py
numpy/lib/function_base.py
numpy/lib/npyio.py
==================
d110c4e;rgommers;2010-07-31 10:04:03 +0000;DOC: wiki merge, core.umath

==

numpy/core/code_generators/ufunc_docstrings.py
==================
95e77d2;rgommers;2010-07-31 10:03:46 +0000;DOC: wiki merge, core/numeric.py

==

numpy/core/numeric.py
==================
d233805;rgommers;2010-07-31 10:03:30 +0000;DOC: wiki merge, fromnumeric.py

==

numpy/core/fromnumeric.py
==================
a296636;rgommers;2010-07-31 10:03:14 +0000;DOC: wiki merge, rst docs.

==

doc/source/reference/arrays.dtypes.rst
doc/source/user/basics.byteswapping.rst
doc/source/user/index.rst
doc/source/user/install.rst
==================
1a1348f;rgommers;2010-07-31 10:02:56 +0000;DOC: wiki merge, add itemset method doc.

==

numpy/add_newdocs.py
==================
cdb2269;rgommers;2010-07-31 10:02:42 +0000;DOC: wiki merge, add distutils.npy_pkg_config.read_config docstring.

==

numpy/distutils/npy_pkg_config.py
==================
64f654f;rgommers;2010-07-31 05:32:55 +0000;BUG: fix base_repr for py3k. strings can not be indexed with floats anymore.

==

numpy/core/numeric.py
==================
d1a661d;rgommers;2010-07-31 04:41:08 +0000;ENH: Make trapz work with ndarray subclasses. Thanks to Ryan May. Closes #1438.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
bff8bb5;Pauli Virtanen;2010-07-29 20:55:56 +0000;DOC: sphinxext: replace directive mangling with domains (#1489)
Only Sphinx >= 1.0 is supported now.

==

doc/sphinxext/README.txt
doc/sphinxext/docscrape.py
doc/sphinxext/numpydoc.py
==================
a761330;Pauli Virtanen;2010-07-29 20:07:57 +0000;BUG: core/umath: do not create views unnecessarily in ndarray.__array_prepare__ (fixes #1548)

==

numpy/core/src/multiarray/methods.c
numpy/core/tests/test_regression.py
==================
d13f758;David Cournapeau;2010-07-29 14:09:16 +0000;BUG: make sure npy_cpu.h is always included in ndarraytypes.h

==

numpy/core/include/numpy/ndarraytypes.h
==================
fa445b9;David Cournapeau;2010-07-29 01:38:14 +0000;BUG: look for endian.h.
We should use this header in npy_endian.h if available.

==

numpy/core/SConscript
numpy/core/include/numpy/_numpyconfig.h.in
numpy/core/setup.py
==================
1c02b20;Pauli Virtanen;2010-07-28 22:31:01 +0000;ENH: testing: add assert_tol_equal for testing array equality with specified tolerances

==

numpy/testing/tests/test_utils.py
numpy/testing/utils.py
==================
67668c8;Pauli Virtanen;2010-07-28 21:00:15 +0000;BUG: support assignment x[(0,)] = foo in ndarray subtypes (#1563)
The problem was a code path trying to assign x[0], which returns a
scalar -- for actual ndarrays a internal function always returning
arrays was used.

==

numpy/core/src/multiarray/mapping.c
numpy/core/tests/test_regression.py
==================
5150c88;Travis Oliphant;2010-07-28 20:33:20 +0000;Fix copy-and-paste error discovered by re-factor testing...

==

numpy/core/src/multiarray/convert_datatype.c
==================
94f73b1;Pauli Virtanen;2010-07-28 20:19:25 +0000;BUG: fix usability bugs in lookfor
- allow numbers in function signature

- print the items in relevance order (not reverse relevance)

- include ufunc docstrings

==

numpy/lib/utils.py
==================
88bcac2;rgommers;2010-07-28 15:09:57 +0000;BUG: New implementation of base_repr. Fixes #1549, is several times faster and adds tests. Thanks to K. Maglione.

==

numpy/core/numeric.py
numpy/core/tests/test_numeric.py
==================
acbe6eb;Pearu Peterson;2010-07-27 10:44:24 +0000;numpy.distutils: Fixed bug in Configuration._get_svn_revision. Introduced make_hg_version_py method, get_version supports hg revision.

==

numpy/distutils/misc_util.py
==================
12c2c52;David Cournapeau;2010-07-27 10:02:17 +0000;BUG: attempt at fixing alpha build failure (quad prec little endian).

==

numpy/core/src/npymath/npy_math_private.h
==================
dc3aa18;rgommers;2010-07-26 14:06:51 +0000;DOC: Merge wiki changes for RandomState as far as possible. Closes #1503.

==

numpy/random/mtrand/mtrand.pyx
==================
fa0842f;Pearu Peterson;2010-07-24 12:30:08 +0000;f2py: fixed issue 1533 (scanning pyf files will report lines that do not match known patterns).

==

numpy/f2py/crackfortran.py
==================
22becbb;rgommers;2010-07-24 09:36:50 +0000;ENH: Several changes to Paver script taken from 1.4.x branch.

==

pavement.py
==================
213302f;Pauli Virtanen;2010-07-21 08:33:57 +0000;DOC: update the blurb about the array interface

==

doc/source/reference/arrays.interface.rst
==================
47aa090;David Cournapeau;2010-07-20 08:33:00 +0000;BUG: quick and ugly fix for long double on linux ppc.

==

numpy/core/src/npymath/ieee754.c.src
numpy/core/src/private/npy_fpmath.h
==================
3aef98e;David Cournapeau;2010-07-19 08:49:50 +0000;ENH: fix long double detection for linux ppc
This does not fix build on linux ppc, as the implementation for 
long double functions is missing.


==

numpy/core/setup.py
numpy/core/setup_common.py
numpy/core/src/npymath/npy_math_private.h
==================
e659183;Pauli Virtanen;2010-07-18 20:55:56 +0000;BUG: core: fix argmax and argmin NaN handling to conform with max/min (#1429)
This makes `argmax` and `argmix` treat NaN as a maximal element.
Effectively, this causes propagation of NaNs, which is consistent with
the current behavior of amax & amin.

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/tests/test_multiarray.py
==================
47702d2;Pauli Virtanen;2010-07-18 20:55:33 +0000;BUG: core/umath: make complex number comparisons False when *either* element is nan
This also fixes NaN propagation in np.maximum/minimum, for example in
the case for

    maximum(1, complex(0, nan)) -> (0, nan)

which previously yielded (1, 0).

==

numpy/core/src/umath/loops.c.src
numpy/core/tests/test_regression.py
numpy/core/tests/test_umath.py
==================
eab3c1e;Pauli Virtanen;2010-07-18 17:50:28 +0000;BUG: core: make set_string_function(None) to restore the functions to what they are on import (#1130)

==

numpy/add_newdocs.py
numpy/core/numeric.py
numpy/core/tests/test_numeric.py
==================
1985497;Pauli Virtanen;2010-07-18 17:17:58 +0000;BUG: core: format 'nan' and 'inf' also in array repr by default (#1050)

==

numpy/core/arrayprint.py
numpy/core/tests/test_arrayprint.py
==================
84c8c65;Pauli Virtanen;2010-07-18 16:52:48 +0000;BUG: core: make .std() and .var() respect the out= keyword (#1434)

==

numpy/core/src/multiarray/calculation.c
numpy/core/tests/test_regression.py
==================
73b8b54;Pauli Virtanen;2010-07-18 14:22:10 +0000;ENH: 3K: optionally use lib2to3cache in 2to3 conversion

==

tools/py3tool.py
==================
943bae6;rgommers;2010-07-18 13:24:52 +0000;DOC: Add "check deprecations" step to HOWTO_RELEASE.

==

doc/HOWTO_RELEASE.txt
==================
4cff2fe;Charles Harris;2010-07-18 04:01:19 +0000;Merge branch 'wgt'

==

doc/release/1.5.0-notes.rst
doc/release/2.0.0-notes.rst
numpy/polynomial/chebyshev.py
numpy/polynomial/polynomial.py
numpy/polynomial/polytemplate.py
numpy/polynomial/tests/test_chebyshev.py
numpy/polynomial/tests/test_polynomial.py
==================
d74911d;Pauli Virtanen;2010-07-17 18:15:12 +0000;3K: numarray: Python3 fixes in _capi.c
Thanks to Christoph Gohlke.

==

numpy/numarray/_capi.c
==================
8a4fb93;Pauli Virtanen;2010-07-17 18:14:46 +0000;3K: f2py: catch a misc import error

==

numpy/f2py/__version__.py
==================
4f4558a;Pauli Virtanen;2010-07-17 18:14:26 +0000;3K: lib/tests: fix test_io.RoundtripTest on Python3 + Windows

==

numpy/lib/tests/test_io.py
==================
4bee2b4;Pauli Virtanen;2010-07-17 15:32:21 +0000;BUG: core: finfo.tiny, resolution, and epsneg should be scalars (#1538)

==

numpy/core/getlimits.py
numpy/core/tests/test_regression.py
==================
0868330;Pauli Virtanen;2010-07-17 15:15:56 +0000;BUG: core: harmonize complex number formatting with Python 2.7 (#1534)

==

numpy/core/src/multiarray/scalartypes.c.src
==================
6f20d1e;Pauli Virtanen;2010-07-17 15:15:15 +0000;BUG: core: use PyCapsule objects only on Python >= 3.0, stay with PyCObjects on Python 2.x

==

numpy/core/code_generators/generate_numpy_api.py
numpy/core/code_generators/generate_ufunc_api.py
numpy/core/include/numpy/ndarraytypes.h
numpy/core/include/numpy/npy_3kcompat.h
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/multiarray/scalartypes.h
numpy/core/src/umath/ufunc_object.c
numpy/f2py/src/fortranobject.c
numpy/f2py/src/fortranobject.h
numpy/lib/type_check.py
numpy/numarray/_capi.c
numpy/numarray/include/numpy/libnumarray.h
numpy/random/mtrand/Python.pxi
==================
affa70a;Pauli Virtanen;2010-07-17 13:11:39 +0000;TMP

==

numpy/core/include/numpy/npy_3kcompat.h
==================
4fcfd09;Pauli Virtanen;2010-07-17 13:11:20 +0000;ENH: 3K: add some extra NpyCapsule functions

==

numpy/core/include/numpy/npy_3kcompat.h
==================
03f4cf3;Pauli Virtanen;2010-07-17 13:11:05 +0000;BUG: core: fix C++ issues in npy_3kcompat.h

==

numpy/core/include/numpy/npy_3kcompat.h
==================
3b21802;Pauli Virtanen;2010-07-17 13:10:39 +0000;ENH: core: make npy_3kcompat.h header public, for easier usage in Scipy

==

numpy/core/include/numpy/npy_3kcompat.h
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/buffer.c
numpy/core/src/multiarray/calculation.c
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/conversion_utils.c
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/flagsobject.c
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/hashdescr.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarray_tests.c.src
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/number.c
numpy/core/src/multiarray/numpymemoryview.c
numpy/core/src/multiarray/numpyos.c
numpy/core/src/multiarray/refcount.c
numpy/core/src/multiarray/scalarapi.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/multiarray/sequence.c
numpy/core/src/multiarray/shape.c
numpy/core/src/multiarray/ucsnarrow.c
numpy/core/src/multiarray/usertypes.c
numpy/core/src/private/npy_3kcompat.h
numpy/core/src/scalarmathmodule.c.src
numpy/core/src/umath/funcs.inc.src
numpy/core/src/umath/loops.c.src
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/umath_tests.c.src
==================
b08b7b1;Pauli Virtanen;2010-07-11 15:02:36 +0000;DOC: more updates to Py3K.txt

==

doc/Py3K.txt
==================
4f732e5;Pauli Virtanen;2010-07-11 13:56:55 +0000;DOC: update Py3K.txt a bit

==

doc/Py3K.txt
==================
3918041;Pearu Peterson;2010-07-11 06:06:58 +0000;f2py: fixed typos in TRYCOMPLEXPYARRAYTEMPLATE.

==

numpy/f2py/cfuncs.py
==================
7d2d320;Pauli Virtanen;2010-07-09 08:12:15 +0000;BUG: core: handle sizeof(double) == sizeof(longdouble) in PyArray_CanCastSafely (fixes #1539)
Thanks to Christoph Gohlke for the patch.

==

numpy/core/src/multiarray/convert_datatype.c
numpy/core/tests/test_regression.py
==================
2f15b16;Pauli Virtanen;2010-07-09 08:12:04 +0000;ENH: random: strip absolute paths from generated mtrand.c line number comments; they just add unnecessary noise to the changesets

==

numpy/random/mtrand/generate_mtrand_c.py
==================
20bd63e;Pauli Virtanen;2010-07-09 08:11:54 +0000;GEN: random: Regenerate mtrand.c

==

numpy/random/mtrand/mtrand.c
==================
237ed35;Pauli Virtanen;2010-07-09 08:11:39 +0000;BUG: random: accept Python long as input to np.random.permutation (#1535)

==

numpy/random/mtrand/mtrand.pyx
numpy/random/tests/test_random.py
==================
8bb2823;Charles Harris;2010-07-07 04:32:00 +0000;ENH: Add ddof keyword to masked versions of cov and corrcoef.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
numpy/ma/extras.py
numpy/ma/tests/test_extras.py
==================
b1c994b;Charles Harris;2010-07-07 04:31:57 +0000;Fix missing rowvar in cov call in corrcoeff.

==

numpy/lib/function_base.py
==================
cda4d59;Charles Harris;2010-07-07 04:31:55 +0000;Don't deprecated bias keyword, just add ddof.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_regression.py
numpy/oldnumeric/mlab.py
==================
a5b4a59;Charles Harris;2010-07-07 04:31:51 +0000;ENH: Add ddof keyword to cov and corrcoef. Deprecate bias keyword.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_regression.py
numpy/oldnumeric/mlab.py
==================
4157e79;Pauli Virtanen;2010-07-03 18:47:34 +0000;BUG: core: fix a reference leak to numpy.core._internal (thanks to Lisandro Dalcin)

==

numpy/core/src/multiarray/buffer.c
numpy/core/tests/test_multiarray.py
==================
9ea50db;Travis Oliphant;2010-06-30 20:40:46 +0000;Fix memory-leak on dtype's found by Lisandro Dalcin.

==

numpy/core/src/multiarray/multiarraymodule.c
==================
0a95b13;pierregm;2010-06-29 17:57:15 +0000;Fixed __eq__/__ne__ for scalars

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
9b86617;Pauli Virtanen;2010-06-27 11:07:15 +0000;BUG: lib: fix sinc to handle array-like inputs properly (fixes #1523)

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
6d438e6;Pauli Virtanen;2010-06-19 13:41:39 +0000;BUG: f2py: replace a string exception with a real one (fixes #1515)

==

numpy/f2py/capi_maps.py
==================
6ad92e5;pierregm;2010-06-10 21:22:01 +0000;* masked is now an instance of a new object, MaskedConstant, that inherits from MaskedArray but prints slightly differently (no mention of a fill_value, because 'masked' can't be filled...)

==

numpy/ma/core.py
==================
29001ed;Travis Oliphant;2010-06-10 17:45:09 +0000;Add pre-nep for a copule of structured_array_extensions.

==

doc/neps/structured_array_extensions.txt
==================
f6c74bd;rgommers;2010-06-07 17:09:18 +0000;DOC: add release notes check to HOWTO_RELEASE.

==

doc/HOWTO_RELEASE.txt
==================
22357e6;Charles Harris;2010-06-07 03:43:26 +0000;CLN: Cleanup nanops code a bit. Patch is from Tony Yu.

==

numpy/lib/function_base.py
==================
0db7671;Charles Harris;2010-06-07 03:43:19 +0000;CHG: Rename reduce method in polytemplate to cutdeg. Reduce is just too much like a ufunc and a bit vague.

==

doc/release/2.0.0-notes.rst
numpy/polynomial/polytemplate.py
numpy/polynomial/tests/test_chebyshev.py
numpy/polynomial/tests/test_polynomial.py
==================
66e3231;Charles Harris;2010-06-07 03:43:07 +0000;Don't track .gitignore file.

==

.gitignore
==================
e520cdd;Pauli Virtanen;2010-06-05 15:02:50 +0000;DOC: add automatic documentation generation from C sources (using Doxygen at the moment)

==

doc/cdoc/Doxyfile
doc/cdoc/Makefile
doc/cdoc/README
doc/cdoc/numpyfilter.py
==================
5e4cd57;David Cournapeau;2010-06-03 03:00:28 +0000;BUG: fix missing macros definition for IEEE macros.

==

numpy/core/setup.py
==================
bc9cb91;rgommers;2010-06-02 17:09:50 +0000;DOC: Add removal of histogram 'new' keyword to release notes. Closes #797.

==

doc/release/2.0.0-notes.rst
==================
e786456;rgommers;2010-06-02 14:54:52 +0000;BUG: Enable compiling Fortran code on OS X for ppc64 arch.
Thanks to David Warde-Farley. Fixes #1399.

==

numpy/distutils/fcompiler/gnu.py
==================
18aac09;rgommers;2010-06-02 13:07:41 +0000;DOC: merge wiki edits for module npyio.

==

numpy/lib/npyio.py
==================
b42757e;rgommers;2010-06-02 13:07:25 +0000;DOC: merge wiki edits for module linalg.

==

numpy/linalg/linalg.py
==================
76e25d2;rgommers;2010-06-02 13:07:10 +0000;DOC: merge wiki edits for module core.

==

numpy/core/fromnumeric.py
numpy/core/memmap.py
numpy/core/numeric.py
numpy/core/records.py
==================
e7c87d7;rgommers;2010-06-01 13:28:52 +0000;DOC: add some info on what should be uploaded to PyPi for a release.

==

doc/HOWTO_RELEASE.txt
==================
b0c3be1;Charles Harris;2010-05-30 16:03:51 +0000;BUG: Don't directly access Python object internals.

==

numpy/core/src/multiarray/scalarapi.c
==================
24f3675;Charles Harris;2010-05-29 01:39:44 +0000;ENH: Add tests for nan[arg]min, nan[arg]max) for various integer types.

==

numpy/lib/tests/test_function_base.py
==================
a26c364;Charles Harris;2010-05-28 15:53:17 +0000;BUG: Fix typo. Closes ticket #1496.

==

numpy/core/src/npymath/npy_math_complex.c.src
==================
cb3fb06;Charles Harris;2010-05-26 02:55:09 +0000;BUG: Fix failed detection of unsigned integers in _nanop. Fixes ticket #1300.

==

numpy/lib/function_base.py
==================
dccd8d0;Charles Harris;2010-05-26 02:26:17 +0000;BUG, STY: Make gaussian random number generators with identical behaviour have identical pickles.

==

numpy/random/mtrand/initarray.c
numpy/random/mtrand/randomkit.c
==================
672fd3f;Charles Harris;2010-05-26 02:26:14 +0000;STY: A Few more coding style cleanups.

==

numpy/random/mtrand/randomkit.c
==================
6be6945;Charles Harris;2010-05-26 02:26:12 +0000;STY: Some c coding style cleanups.

==

numpy/random/mtrand/initarray.c
numpy/random/mtrand/randomkit.c
==================
b056b23;Charles Harris;2010-05-25 17:38:56 +0000;BUG: Make test using np.float96 portable by using np.longdouble instead.

==

numpy/core/tests/test_umath.py
==================
8a39c1f;Charles Harris;2010-05-25 17:22:50 +0000;STY: Remove some hard tabs.

==

numpy/core/src/multiarray/methods.c
==================
9b0b467;dhuard;2010-05-25 16:48:09 +0000;Added tests for float96 for ldexp (ticket #866).

==

numpy/core/tests/test_umath.py
==================
c7e5351;dhuard;2010-05-25 13:32:03 +0000;Fix for ticket #866 (ldexp on 64 bits). Tested on ubuntu 64 bits.

==

numpy/core/src/umath/umathmodule.c.src
numpy/core/tests/test_umath.py
==================
b955776;Stefan van der Walt;2010-05-25 03:45:11 +0000;BUG: Use correct include path when multiple copies of NumPy is installed.

==

numpy/distutils/system_info.py
==================
1512b58;Robert Kern;2010-05-24 17:04:09 +0000;BUG: Add some guards for bad inputs to the dtype constructor.

==

numpy/core/src/multiarray/descriptor.c
numpy/core/tests/test_dtype.py
==================
5ab03fb;Robert Kern;2010-05-24 17:03:41 +0000;BUG: typo.

==

numpy/core/setup.py
==================
f859af0;Charles Harris;2010-05-24 15:47:32 +0000;ENH: Test the exceptions and the left, right keywords of the interp function.

==

numpy/lib/tests/test_function_base.py
==================
700512a;Charles Harris;2010-05-24 15:47:29 +0000;BUG: Make interp handle 'right' keyword correctly. Add check for empty arrays of sample points. Closes ticket #1064.

==

numpy/lib/src/_compiled_base.c
==================
9114fae;Charles Harris;2010-05-24 15:47:27 +0000;ENH: Make searchsorted faster by actually dividing the interval in the middle.

==

numpy/core/src/multiarray/item_selection.c
==================
a7a01f3;Charles Harris;2010-05-24 15:47:24 +0000;BUG: Fix problem with numarray _capi.c and python 2.7.

==

numpy/numarray/_capi.c
==================
88e683b;Charles Harris;2010-05-23 22:02:16 +0000;Update 2.0.0 release documentation to reflect changes in the Chebyshev and Polynomial classes.

==

doc/release/2.0.0-notes.rst
==================
fc7afe0;Charles Harris;2010-05-23 22:02:13 +0000;CHG: Use [] instead of 'default' to specify the default domain in Chebyshev.fit and Polynomial.fit. Document the change from numpy 1.4.x.

==

numpy/polynomial/polytemplate.py
numpy/polynomial/tests/test_chebyshev.py
numpy/polynomial/tests/test_polynomial.py
==================
4ac7908;Charles Harris;2010-05-23 22:02:11 +0000;ENH: Add reduce method to polynomial.Chebyshev and polynomial.Polynomial. This method behaves like truncate except it takes the degree of the result instead of the number of coefficients.

==

numpy/polynomial/polytemplate.py
numpy/polynomial/tests/test_chebyshev.py
numpy/polynomial/tests/test_polynomial.py
==================
6e77005;Charles Harris;2010-05-23 22:02:08 +0000;REV: Revert the changes to the truncate method of Polynomial and Chebyshev. On second thought it was a bad idea to make such a radical change to existing behaviour. It was also hard to document the variations ;)

==

doc/release/2.0.0-notes.rst
numpy/polynomial/polytemplate.py
numpy/polynomial/tests/test_chebyshev.py
numpy/polynomial/tests/test_polynomial.py
==================
59fd4c3;Charles Harris;2010-05-21 05:36:18 +0000;Add some more info to the release notes for 2.0.0.

==

doc/release/2.0.0-notes.rst
==================
894665b;Charles Harris;2010-05-21 05:36:15 +0000;Note the changes in polynomial.polynomial and polynomial.chebyshev in the release notes.

==

doc/release/2.0.0-notes.rst
==================
082e86f;Charles Harris;2010-05-21 05:36:13 +0000;CHG: Change the default domain for the fit class method of the Chebyshev and Polynomial classes to None. Add 'default' as a possible value of the domain argument to specify the default domain. This change fits better with my experience with this method. I feel it is safe to make this change at this late date because the functions seem little used as yet and I would like to get them 'right' before folks catch on to their presence.

==

numpy/polynomial/polytemplate.py
numpy/polynomial/tests/test_chebyshev.py
numpy/polynomial/tests/test_polynomial.py
==================
467f4fb;Charles Harris;2010-05-21 05:36:10 +0000;ENH: Add test for the degree method added to the Chebyshev

==

numpy/polynomial/tests/test_chebyshev.py
==================
1eac0c5;Charles Harris;2010-05-21 05:36:08 +0000;ENH: Change deriv and integ method documentation of the Chebyshev and Polynomial classes to reflect the enhanced behaviour of the base functions.

==

numpy/polynomial/polytemplate.py
==================
af79cde;Charles Harris;2010-05-21 05:36:05 +0000;CHG: Change the truncate method of the Chebyshev and Polynomial classes to take degree instead of length. This seems to fit better with normal usage. I feel this change is safe at this time because these new classes seem to be little used as yet.

==

numpy/polynomial/polytemplate.py
numpy/polynomial/tests/test_chebyshev.py
numpy/polynomial/tests/test_polynomial.py
==================
ee4a8d3;Charles Harris;2010-05-21 05:36:01 +0000;ENH: Add degree method to the Chebyshev and Polynomial classes.

==

numpy/polynomial/polytemplate.py
numpy/polynomial/tests/test_polynomial.py
==================
2041434;Charles Harris;2010-05-21 05:35:58 +0000;ENH: 1) Let {poly,cheb}int accept 0 for the number of integrations. 2) Let {poly,cheb}(int,der} accept floating integers for number of integrations or derivations, raise ValueError otherwise. 3) Add tests for same.

==

numpy/polynomial/chebyshev.py
numpy/polynomial/polynomial.py
numpy/polynomial/tests/test_chebyshev.py
numpy/polynomial/tests/test_polynomial.py
==================
87e2eec;Pauli Virtanen;2010-05-18 09:48:25 +0000;STY: core: add some parentheses

==

numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/scalarapi.c
numpy/core/src/umath/loops.c.src
==================
ea2be6e;pierregm;2010-05-16 23:31:21 +0000;* Added `apply_over_axes` as requested in ticket #1480

==

numpy/ma/extras.py
numpy/ma/tests/test_extras.py
==================
97a38c4;pierregm;2010-05-16 23:05:30 +0000;* add a `replace_space` option to NameValidator * Force a file to be opened in 'U' mode (bug #1473)

==

numpy/lib/_iotools.py
numpy/lib/npyio.py
numpy/lib/tests/test_io.py
==================
ccf3083;Stefan van der Walt;2010-05-16 08:31:03 +0000;BUG: Correctly handle in-place output in percentile.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
7c92f32;Stefan van der Walt;2010-05-16 08:30:47 +0000;BUG: Allow any array-like input to percentile.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
44b42db;Travis Oliphant;2010-05-15 22:11:10 +0000;Add percentile function.

==

numpy/lib/function_base.py
==================
c8a06aa;Pauli Virtanen;2010-05-13 12:47:23 +0000;ENH: core/test: try more locales out in_foreign_locale to make it work also on modern Linux systems

==

numpy/core/tests/test_print.py
==================
1391816;Pauli Virtanen;2010-05-13 12:47:04 +0000;BUG/3K: lib: make savetxt work with filenames

==

numpy/lib/npyio.py
numpy/lib/tests/test_io.py
==================
b022b9c;Pauli Virtanen;2010-05-13 10:55:09 +0000;BUG: compat: fix a bug in open_latin1

==

numpy/compat/py3k.py
==================
1ecf17b;Pauli Virtanen;2010-05-13 10:54:57 +0000;STY: core: reduce code duplication in _import_umath and _import_array

==

numpy/core/code_generators/generate_numpy_api.py
numpy/core/code_generators/generate_ufunc_api.py
==================
5b4964b;Pauli Virtanen;2010-05-13 10:54:44 +0000;BUG: core: remove a double-DECREF in _import_umath (fixes #1483)

==

numpy/core/code_generators/generate_ufunc_api.py
==================
40c5daf;Pauli Virtanen;2010-05-11 20:45:02 +0000;ENH: linalg: convert non-native endian arrays to native-endian before handing them to lapack_lite

==

numpy/linalg/linalg.py
numpy/linalg/tests/test_regression.py
==================
010072e;Pauli Virtanen;2010-05-11 20:44:05 +0000;BUG: linalg: check array byte order before passing it to lapack_lite (fixes #1482)

==

numpy/linalg/lapack_litemodule.c
==================
4e2e78f;Pauli Virtanen;2010-05-11 20:42:42 +0000;BUG/3K: distutils: do not assume that files output e.g. by gcc can be read in ascii codec

==

numpy/compat/py3k.py
numpy/distutils/exec_command.py
==================
e3cea87;Stefan van der Walt;2010-05-10 06:48:17 +0000;DOC: Fix typo in 2.0.0 release notes.

==

doc/release/2.0.0-notes.rst
==================
427a963;Charles Harris;2010-05-10 03:41:02 +0000;BUG: Make fftshift and ifftshift accept integer arguments for the axes value. The functions now match their documentation. Fixes ticket #1182, patch from rgommers.

==

numpy/fft/helper.py
numpy/fft/tests/test_helper.py
==================
81a86c7;Charles Harris;2010-05-09 16:19:08 +0000;STY: Some cleanups of ndarraytypes.h.

==

numpy/core/include/numpy/ndarraytypes.h
==================
7d5a455;Charles Harris;2010-05-09 15:45:43 +0000;Add better summary of ndarraytype.h to release notes.

==

doc/release/2.0.0-notes.rst
==================
4864c3d;Pauli Virtanen;2010-05-09 12:19:06 +0000;BUG: core: fix a datetime test case (fixes #1468)

==

numpy/core/tests/test_datetime.py
==================
cdfd96a;Charles Harris;2010-05-09 01:11:42 +0000;ENH: Remove obsolete keyword 'register'.

==

numpy/core/src/multiarray/datetime.c
==================
8884ded;Charles Harris;2010-05-09 00:04:58 +0000;ENH: Make guard in ndarraytypes.h match the file name.

==

numpy/core/include/numpy/ndarraytypes.h
==================
b943351;Charles Harris;2010-05-09 00:04:55 +0000;ENH: Break out parts of ndarrayobject.h that don't reference the ndarray c-api into the header ndarraytypes.h.

==

doc/release/2.0.0-notes.rst
numpy/core/include/numpy/ndarrayobject.h
numpy/core/include/numpy/ndarraytypes.h
==================
befa260;Pauli Virtanen;2010-05-08 16:34:51 +0000;BUG: lib: remember in a test that datetime specifiers are bytes strings

==

numpy/lib/tests/test_type_check.py
==================
75f99ab;Pauli Virtanen;2010-05-08 16:34:39 +0000;BUG: lib: make loadtxt work on Py3 when fh returns unicode (fixes #1479)

==

numpy/lib/npyio.py
==================
8a6767f;Pauli Virtanen;2010-05-08 16:34:28 +0000;BUG: core: ensure we have GIL before calling PyOS_string_to_double (fixes #1345)
In Python >= 2.7, the PyOS_ascii_strtod has been deprecated and replaced
with PyOS_string_to_double. However, the latter may raise Python
exceptions, which requires that GIL is held when calling it.

==

numpy/core/src/multiarray/numpyos.c
numpy/core/tests/test_regression.py
==================
217a7b2;rgommers;2010-05-08 11:14:47 +0000;DOC: fix ReST warning.

==

doc/HOWTO_RELEASE.txt
==================
d4563b0;rgommers;2010-05-08 11:08:32 +0000;DOC: add a description of the release process and setup needed.

==

doc/HOWTO_RELEASE.txt
==================
b66a200;Charles Harris;2010-05-07 02:25:08 +0000;BUG: Make interp handle zero dimensional ndarrays as interpolation points. Add some tests for interp. Fixes ticket #1177. unc_api.txt.tmp

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
20757e2;Pauli Virtanen;2010-05-06 08:05:05 +0000;numpy.scipy.org: add license information (#1478), tidy up CSS

==

doc/numpy.scipy.org/_theme/scipy/index.html
doc/numpy.scipy.org/_theme/scipy/static/scipy.css
doc/numpy.scipy.org/content.rst
doc/numpy.scipy.org/license.rst
==================
f9eb853;Charles Harris;2010-05-06 06:41:55 +0000;Merge branch 'vectorize'

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
63ef871;Pauli Virtanen;2010-05-05 19:28:02 +0000;BUG: core: ensure keywords[] list is NULL terminated in array_choose (might be related to #1476)

==

numpy/core/src/multiarray/methods.c
==================
9836bea;Pauli Virtanen;2010-05-05 19:27:46 +0000;BUG: use PyOS_string_to_double on Python 2.7
Related to #1345.  This works around PyOS_ascii_strtod raising a
PendingDeprecationWarning when GIL is released, which results to a
crash.

The full fix would be to re-acquire GIL, but I believe we will not want
to do that for performance reasons, as it doesn't otherwise seem to be
necessary.

==

numpy/core/src/multiarray/numpyos.c
==================
2c275d4;Charles Harris;2010-05-05 15:55:25 +0000;Add slogdet to the release notes for 2.0.0.

==

doc/release/2.0.0-notes.rst
==================
bb080c5;Charles Harris;2010-05-05 03:34:51 +0000;ENH: Do some housekeeping for the newly added slogdet function.

==

doc/source/reference/routines.linalg.rst
numpy/linalg/linalg.py
==================
30e4150;Charles Harris;2010-05-05 03:34:47 +0000;ENH: Add slogdet to the linalg module. The patch is from njs with slogdet substituted for sign_log_det. Closes ticket #1402.

==

numpy/linalg/__init__.py
numpy/linalg/linalg.py
numpy/linalg/tests/test_linalg.py
==================
dd9d99c;Charles Harris;2010-05-05 02:50:03 +0000;ENH: Add test of polyder return type.

==

numpy/lib/tests/test_regression.py
==================
632623d;Charles Harris;2010-05-05 02:50:00 +0000;BUG: Make polyder return a poly1d for the zeroeth order derivative when the input is a poly1d. Fixes ticket #1249.

==

numpy/lib/polynomial.py
==================
e014ff7;Charles Harris;2010-05-04 06:24:07 +0000;BUG: Fix datetime_data for python versions >= 2.7.

==

numpy/lib/type_check.py
==================
adad97c;Charles Harris;2010-05-04 06:24:05 +0000;ENH: Simplify list destructor.

==

numpy/core/src/umath/ufunc_object.c
==================
e670f5f;Charles Harris;2010-05-03 18:10:39 +0000;BUG: The builtin file function goes away in python 3k, use open instead.

==

numpy/lib/npyio.py
==================
50ae523;Charles Harris;2010-05-03 17:08:25 +0000;BUG: Fix use of int type where Py_ssize_t is appropriate.

==

numpy/core/src/multiarray/iterators.c
==================
fada3ba;Charles Harris;2010-05-03 17:08:21 +0000;ENH,BUG: Simplify array_choose with NpyArg_ParseKeywords. Fix some uses of int where Py_ssize_t should be used.

==

numpy/core/src/multiarray/methods.c
==================
bc656ee;Charles Harris;2010-05-03 07:50:02 +0000;ENH, BUG: PyCObject will be deprecated in python 2.7. So use the NpyCapsule compatibility functions in npy_3kcompat.h to replace the current calls. This gets rid of a number of version checks and is easier to maintain. Fix bug that was present in the ufunc _loop1d_list_free destructor in the python3k case.

==

numpy/core/code_generators/generate_numpy_api.py
numpy/core/code_generators/generate_ufunc_api.py
numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/scalarapi.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/multiarray/scalartypes.h
numpy/core/src/multiarray/usertypes.c
numpy/core/src/private/npy_3kcompat.h
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/umathmodule.c.src
numpy/f2py/src/fortranobject.c
numpy/f2py/src/fortranobject.h
numpy/lib/type_check.py
numpy/numarray/_capi.c
numpy/numarray/include/numpy/libnumarray.h
numpy/random/mtrand/Python.pxi
==================
82d8d97;Stefan van der Walt;2010-05-02 20:02:14 +0000;BUG: loadtxt should handle universal newlines.

==

numpy/lib/npyio.py
numpy/lib/tests/test_io.py
==================
6dc315f;Pauli Virtanen;2010-04-30 07:06:02 +0000;ENH: core: add .dot() method to ndarrays; a.dot(b) == np.dot(a, b)

==

doc/release/2.0.0-notes.rst
numpy/core/src/multiarray/methods.c
numpy/core/tests/test_multiarray.py
numpy/matrixlib/tests/test_defmatrix.py
==================
bceb9c2;Travis Oliphant;2010-04-29 23:57:39 +0000;Add NEP for group-by additions to NumPy: reduceby, reducein, segment, and edges.

==

doc/neps/groupby_additions.rst
==================
a839a42;Stefan van der Walt;2010-04-27 23:48:16 +0000;BUG: In datetime, avoid overflow by casting multipliers to npy_int64.

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/datetime.c
numpy/core/tests/test_datetime.py
==================
4132207;Stefan van der Walt;2010-04-27 20:54:08 +0000;BUG: Fix missing import for datatime_data.

==

numpy/lib/tests/test_type_check.py
numpy/lib/type_check.py
==================
1e659b5;pierregm;2010-04-27 16:55:09 +0000;Fixed .var for arrays with 1 more valid value than ddofs

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
5664796;Charles Harris;2010-04-27 03:35:37 +0000;Move 1.5.0 release notes to 2.0.0.

==

doc/release/1.5.0-notes.rst
doc/release/2.0.0-notes.rst
==================
cec7847;Charles Harris;2010-04-27 03:35:31 +0000;Add fixme note.

==

numpy/core/src/multiarray/methods.c
==================
7a0429a;Pauli Virtanen;2010-04-26 08:16:44 +0000;BUG: core: fix a reference count bug in umath:InitOtherOperators (cf #1464)
Thanks to mras

==

numpy/core/src/umath/umathmodule.c.src
==================
cbe9b87;Charles Harris;2010-04-26 01:02:07 +0000;ENH: Simplify some functions using NpyArg_ParseKeywords.

==

numpy/core/src/multiarray/methods.c
==================
22ee215;Charles Harris;2010-04-26 01:02:04 +0000;ENH: Add NpyArg_ParseKeywords helper function.

==

numpy/core/src/multiarray/methods.c
==================
e045799;Pauli Virtanen;2010-04-25 17:26:08 +0000;BUG: fix reference count bug in set_numeric_ops (fixes #1464, #1462)

==

numpy/core/src/multiarray/number.c
==================
82e08aa;Charles Harris;2010-04-25 15:57:47 +0000;ENH: Add some tests for ndarray.resize.

==

numpy/core/tests/test_multiarray.py
==================
b4b4829;Charles Harris;2010-04-25 15:11:00 +0000;BUG: Catch resize shape conversion errors.

==

numpy/core/src/multiarray/methods.c
==================
84d1bf7;Charles Harris;2010-04-25 14:50:14 +0000;BUG: Fix the fix so resize works like it is supposed to.

==

numpy/core/src/multiarray/methods.c
==================
8088b49;Charles Harris;2010-04-25 09:57:19 +0000;ENH: Remove order keyword from ndarray.resize. This is pretty much Scott Sinclair's patch from ticket #840.

==

numpy/add_newdocs.py
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/shape.c
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_regression.py
==================
e8699dd;Charles Harris;2010-04-25 04:31:03 +0000;ENH: Remove some unused variable warnings.

==

numpy/core/src/multiarray/descriptor.c
numpy/core/src/scalarmathmodule.c.src
numpy/lib/src/_compiled_base.c
==================
42c74d7;Charles Harris;2010-04-25 04:31:00 +0000;BUG: Fix missing "%s" in error message format. Remove unused variable.

==

numpy/core/src/multiarray/buffer.c
==================
472076b;Charles Harris;2010-04-25 04:30:57 +0000;BUG: Fix wrong destructor type in NpyCapsule_FromVoidPtrAndDesc.

==

numpy/core/src/private/npy_3kcompat.h
==================
0a56dcb;Charles Harris;2010-04-25 04:30:54 +0000;FIX: Workaround python3.1 callable not working with PyCapsule.

==

numpy/lib/utils.py
==================
c655f8d;Charles Harris;2010-04-25 01:29:19 +0000;ENH: Apply old patch hanging around in my directory. I don't recall where it came from, but it seems appropriate.

==

numpy/core/tests/test_regression.py
==================
26d51fb;Darren Dale;2010-04-18 14:02:31 +0000;correct a bug in fix() that was introduced in r8293

==

numpy/lib/tests/test_ufunclike.py
numpy/lib/ufunclike.py
==================
fcc0b79;Charles Harris;2010-04-14 17:24:50 +0000;BUG: Use deprecated decorator in testing ufunclike.log2.

==

numpy/lib/tests/test_ufunclike.py
numpy/lib/ufunclike.py
==================
6ec1020;Fernando Perez;2010-04-14 17:17:53 +0000;Fix bug where __init__ was accessed for objects that might not have it.

==

doc/sphinxext/numpydoc.py
==================
514a01f;Charles Harris;2010-04-13 16:25:36 +0000;BUG: Python 2.4 doesn't support "with" statement, use try instead.

==

numpy/lib/tests/test_ufunclike.py
==================
0351ce0;Charles Harris;2010-04-13 03:26:45 +0000;BUG: Deprecate ufunclike.log2 and take it off the __all__ list. It was shadowing the ufunc of the same name.

==

numpy/lib/ufunclike.py
==================
73651a6;Charles Harris;2010-04-13 03:26:41 +0000;ENH: Add test of sign ufunc removed from test_ufunclike.

==

numpy/core/tests/test_umath.py
==================
58ec265;Charles Harris;2010-04-13 03:26:38 +0000;ENH: Rewrite doctest in test_ufunclike.py as normal nose tests. Remove test of sign ufunc, it belongs elsewhere.

==

numpy/lib/tests/test_ufunclike.py
==================
20ccf3a;Charles Harris;2010-04-13 00:38:49 +0000;ENH: Add more tests for new memmap object attributes.

==

numpy/core/tests/test_memmap.py
==================
b9ae906;Charles Harris;2010-04-12 23:34:55 +0000;BUG: Need to use os.path.abspath on file handle name also.

==

numpy/core/memmap.py
==================
77f4e07;Charles Harris;2010-04-12 23:11:40 +0000;ENH: Make the new memmap filename attribute store the full path to the file. Add offset and mode attributes to the memmap class.

==

numpy/core/memmap.py
==================
4d82118;Charles Harris;2010-04-12 20:35:59 +0000;ENH: Add filename attribute to memmap.

==

numpy/core/memmap.py
numpy/core/tests/test_memmap.py
==================
375542b;Charles Harris;2010-04-05 04:38:49 +0000;ENH: Add test for log1p on intel 32 bits for certain small values of p.

==

numpy/core/tests/test_regression.py
==================
6cc6cc6;Charles Harris;2010-04-05 04:03:25 +0000;ENH: Try to make log1p a bit more resistant to compiler shenanigans. STY: Couple of style fixups.

==

numpy/core/src/npymath/npy_math.c.src
==================
96985ac;Charles Harris;2010-04-05 04:03:22 +0000;ENH: Use standard npy constant definitions in log2, exp2 functions. STY: Some cleanups, fix goto into if statement. BUG: Use proper name for expm1, not exp1m.

==

numpy/core/src/npymath/npy_math.c.src
==================
21178ae;Charles Harris;2010-04-05 04:03:19 +0000;ENH: Make npy_log2_1p and npy_exp2_1m use standard functions. This avoids some problems with gcc optimizations on 32 intel systems. In any case, the problem is pushed back to location single functions.

==

numpy/core/src/npymath/npy_math.c.src
==================
a63d832;Pauli Virtanen;2010-04-04 20:47:48 +0000;ENH: core: add sanity checks and warnings to PEP3118 -> ndarray conversion

==

numpy/core/src/multiarray/ctors.c
==================
86d3b81;Pauli Virtanen;2010-04-04 20:21:03 +0000;ENH: core: improve the way trailing padding is dealed with in PEP 3118 format strings

==

numpy/core/_internal.py
numpy/core/tests/test_multiarray.py
==================
b5967d0;Pauli Virtanen;2010-04-04 20:20:56 +0000;ENH: core: improve parsing of byte order from PEP 3118 format strings

==

numpy/core/_internal.py
numpy/core/tests/test_multiarray.py
==================
8371b75;Pauli Virtanen;2010-04-04 20:20:48 +0000;ENH: core: improve PEP 3118 parser's alignment handling
Now, padding will be more forcefully inserted for native-aligned items.

==

numpy/core/_internal.py
numpy/core/tests/test_multiarray.py
==================
204efab;Pauli Virtanen;2010-04-04 20:20:40 +0000;BUG: core: fix bugs in PEP 3118 format string parsing
- Handle consecutive characters (eg. 'xxxx') properly
- Compute native padding correctly

==

numpy/core/_internal.py
numpy/core/tests/test_multiarray.py
==================
64e7081;Pauli Virtanen;2010-04-04 15:34:49 +0000;ENH: get rid of #warning directives, either by fixing the issue or changing them to comments

==

numpy/core/src/multiarray/buffer.c
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/scalarmathmodule.c.src
numpy/lib/src/_compiled_base.c
numpy/numarray/_capi.c
==================
af2b057;David Cournapeau;2010-03-31 03:45:36 +0000;TST: mark slow f2py tests + add f2py test function.

==

numpy/f2py/__init__.py
numpy/f2py/tests/test_callback.py
numpy/f2py/tests/test_mixed.py
numpy/f2py/tests/test_return_character.py
numpy/f2py/tests/test_return_complex.py
numpy/f2py/tests/test_return_integer.py
numpy/f2py/tests/test_return_logical.py
numpy/f2py/tests/test_return_real.py
==================
9475b97;David Cournapeau;2010-03-31 03:45:25 +0000;BUG: fix div by zero handling in nper.

==

numpy/lib/financial.py
numpy/lib/tests/test_financial.py
==================
6f00924;David Cournapeau;2010-03-31 03:45:16 +0000;BUG: move test from core to lib, mark it as deprected.

==

numpy/core/tests/test_regression.py
numpy/lib/tests/test_regression.py
==================
89e2287;David Cournapeau;2010-03-31 03:45:06 +0000;BUG: fix divide by zero warnings in tests.

==

numpy/core/tests/test_regression.py
numpy/core/tests/test_umath.py
==================
ced34d2;David Cournapeau;2010-03-31 02:26:14 +0000;BUG: fix kaiser for M=1.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
cfb3c55;Charles Harris;2010-03-27 03:56:17 +0000;BUG: Should be using StringIO, not BytesIO. The 2to3 script takes care of changing the module to import from to io.

==

numpy/lib/utils.py
==================
b64659e;pierregm;2010-03-26 05:15:57 +0000;* Fixed merge_arrays for arrays of size 1 (bug #1407) * merge_arrays now accepts sequences of lists/tuples as inputs

==

numpy/lib/recfunctions.py
numpy/lib/tests/test_recfunctions.py
==================
6cf6fd3;Charles Harris;2010-03-25 03:32:17 +0000;BUG: Update StringIO in _lookfor_generate_cache for Python3.x. Make small cleanup.

==

numpy/lib/utils.py
==================
c7685e1;Charles Harris;2010-03-25 03:32:15 +0000;CLN: Small cleanups. Fix docstring examples.

==

numpy/lib/npyio.py
==================
5657366;Charles Harris;2010-03-25 03:32:12 +0000;CLN: Remove some now unnecessary fixups to lib/npyio.

==

tools/py3tool.py
==================
44118ae;Charles Harris;2010-03-24 18:18:43 +0000;Rename numpy/lib/io.py to numpy/lib/npyio.py. The py3tool can probably be cleaned up a bit more with this change, but that is for later.

==

numpy/lib/__init__.py
numpy/lib/io.py
numpy/lib/npyio.py
tools/py3tool.py
==================
3ec490d;Charles Harris;2010-03-24 18:18:38 +0000;Fix wrong function name. These functions aren't used a present so this just fixes a warning.

==

numpy/core/src/private/npy_3kcompat.h
==================
c0187e0;pierregm;2010-03-22 01:46:51 +0000;* added test_take_masked_indices

==

numpy/ma/tests/test_core.py
==================
6688b8d;pierregm;2010-03-22 01:45:40 +0000;* Use putmask instead of fancy indexing in _nanop (bug #1421)

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
5325c7b;Pauli Virtanen;2010-03-21 22:30:39 +0000;BUG: core: fix #1436 by reverting r8144
r8144 "ENH: core: make PyArray_FromAny error message more clear"
is a cosmetic fix -- a revised one could be committed later on in, but
let's have this one bug fixed quick.

Also, add a regression test.

==

numpy/core/src/multiarray/ctors.c
numpy/core/tests/test_regression.py
==================
81140fe;Pauli Virtanen;2010-03-18 21:43:07 +0000;BUG: lib: fix #1435, np.gradient should use zeros_like
Thanks to Ryan May for the patch.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
070619b;Pauli Virtanen;2010-03-18 21:41:03 +0000;BUG: include numpyconfig.h in npy_cpu.h to address #1371

==

numpy/core/include/numpy/npy_cpu.h
==================
3b63fc8;pierregm;2010-03-18 15:23:08 +0000;* fixed mvoid.__repr__ * fixed mvoid.__str__ for Python 2.4 (bug #1373) * add support to 'fill_value' and 'hardmask' in arange/empty/identity/zeros/ones (#1391) * intercept invalid values in `power` and derived * added empty_like/ones_like/zeros_like to the numpy.ma namespace * Allow indices as masked arrays in numpy.ma.take (#1418) * test_core : temporarily disable warnings when using numpy ufuncs on MaskedArray

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
numpy/ma/tests/test_old_ma.py
==================
e9702d7;Pearu Peterson;2010-03-17 21:04:15 +0000;Fix version matcher for cases where version string appears in second line (Intel Visual Compiler, IA-32, Version 11.1)

==

numpy/distutils/ccompiler.py
==================
e3be228;Darren Dale;2010-03-14 18:44:36 +0000;minor change to ufunclike.fix, one less array to build and make compatible with subclasses of ndarray

==

numpy/lib/tests/test_ufunclike.py
numpy/lib/ufunclike.py
==================
66cbc79;Matthew Brett;2010-03-11 23:32:41 +0000;DOC - fix doc error

==

numpy/lib/twodim_base.py
==================
4367c6f;Charles Harris;2010-03-08 01:33:43 +0000;ENH: Make Chebyshev and Polynomial classes dominate ndarrays.

==

numpy/polynomial/polytemplate.py
==================
aae1beb;Pauli Virtanen;2010-03-07 00:00:08 +0000;3K: doc: note that f2py is now partly ported, and that capsules are used

==

doc/Py3K.txt
==================
dc9621d;Pauli Virtanen;2010-03-06 23:59:55 +0000;3K: f2py: make create_cb_arglist work with Py3 functions

==

numpy/f2py/cfuncs.py
==================
11ff835;Pauli Virtanen;2010-03-06 23:59:41 +0000;3K: f2py: port the array_from_pyobj test module to Py3

==

numpy/f2py/tests/src/array_from_pyobj/wrapmodule.c
numpy/f2py/tests/test_callback.py
==================
80f6b2a;Pauli Virtanen;2010-03-06 23:59:22 +0000;BUG: f2py: fix infinite loops in *_from_pyobj with unicode input

==

numpy/f2py/cfuncs.py
==================
4c1ae33;Pauli Virtanen;2010-03-06 23:59:08 +0000;3K: f2py: port much of f2py C code to Py3

==

numpy/f2py/capi_maps.py
numpy/f2py/cfuncs.py
numpy/f2py/rules.py
numpy/f2py/src/fortranobject.c
numpy/f2py/src/fortranobject.h
==================
2fb79c1;Pauli Virtanen;2010-03-06 23:58:48 +0000;3K: f2py: don't use test generators in the tests -- they don't really work on Nose on Py3

==

numpy/f2py/tests/test_return_character.py
numpy/f2py/tests/test_return_complex.py
numpy/f2py/tests/test_return_integer.py
numpy/f2py/tests/test_return_logical.py
numpy/f2py/tests/test_return_real.py
==================
2fe642a;Pauli Virtanen;2010-03-06 23:58:28 +0000;3K: core: fix import_array to return NULL on failure -- according to the Py3 module init function scheme

==

numpy/core/code_generators/generate_numpy_api.py
==================
b65938a;Pauli Virtanen;2010-03-06 23:58:12 +0000;3K: f2py: map PyString -> PyBytes and PyInt -> PyLong on Py3

==

numpy/f2py/cfuncs.py
==================
4a26b70;Pauli Virtanen;2010-03-06 23:57:58 +0000;3K: f2py: address a semantic difference between Py2 and Py3

==

numpy/f2py/cfuncs.py
==================
101da72;Pauli Virtanen;2010-03-06 20:09:14 +0000;ENH: testing: do not exclude array_from_pyobj from tests; it's now fixed to be nose-compatible

==

numpy/testing/nosetester.py
==================
733ebda;Pauli Virtanen;2010-03-06 19:47:18 +0000;BUG: f2py: fix F90 detection in the tests

==

numpy/f2py/tests/util.py
==================
8ed3440;Pauli Virtanen;2010-03-06 19:39:09 +0000;3K: f2py: make f2py run far enough to produce output files (they don't compile yet, though, as the C code is not Py3 compatible)

==

numpy/f2py/auxfuncs.py
numpy/f2py/cb_rules.py
numpy/f2py/cfuncs.py
numpy/f2py/f2py2e.py
numpy/f2py/tests/util.py
==================
9cccbf3;Pauli Virtanen;2010-03-06 19:14:47 +0000;BUG: core: add a missing #include of ndarrayobject to npy_3kcompat.h

==

numpy/core/src/private/npy_3kcompat.h
==================
c51146b;Pauli Virtanen;2010-03-06 19:13:43 +0000;ENH: f2py: skip also test_array_from_pyobj if no C compiler is available

==

numpy/f2py/tests/test_array_from_pyobj.py
==================
5b0621d;Pauli Virtanen;2010-03-06 19:12:31 +0000;BUG: distutils: clean up temporary files more aggressively

==

numpy/distutils/misc_util.py
==================
16179a0;Pauli Virtanen;2010-03-06 19:11:30 +0000;BUG: f2py: ensure that ARRAY_ISCOMPATIBLE macro handles also booleans

==

numpy/f2py/src/fortranobject.c
==================
399018f;Pauli Virtanen;2010-03-06 19:10:14 +0000;ENH: f2py: convert test suite to Nose form
Rewrite F2Py's test suite, so that it is run as a part of Numpy's tests.
These tests require compiling extension modules on-the-fly, so I added
a small helper module for that.

==

numpy/f2py/setup.py
numpy/f2py/tests/array_from_pyobj/__init__.py
numpy/f2py/tests/array_from_pyobj/setup.py
numpy/f2py/tests/array_from_pyobj/tests/test_array_from_pyobj.py
numpy/f2py/tests/array_from_pyobj/wrapmodule.c
numpy/f2py/tests/c/return_real.py
numpy/f2py/tests/f77/callback.py
numpy/f2py/tests/f77/return_character.py
numpy/f2py/tests/f77/return_complex.py
numpy/f2py/tests/f77/return_integer.py
numpy/f2py/tests/f77/return_logical.py
numpy/f2py/tests/f77/return_real.py
numpy/f2py/tests/f90/return_character.py
numpy/f2py/tests/f90/return_complex.py
numpy/f2py/tests/f90/return_integer.py
numpy/f2py/tests/f90/return_logical.py
numpy/f2py/tests/f90/return_real.py
numpy/f2py/tests/mixed/foo.f
numpy/f2py/tests/mixed/foo_fixed.f90
numpy/f2py/tests/mixed/foo_free.f90
numpy/f2py/tests/mixed/run.py
numpy/f2py/tests/run_all.py
numpy/f2py/tests/src/array_from_pyobj/wrapmodule.c
numpy/f2py/tests/src/mixed/foo.f
numpy/f2py/tests/src/mixed/foo_fixed.f90
numpy/f2py/tests/src/mixed/foo_free.f90
numpy/f2py/tests/test_array_from_pyobj.py
numpy/f2py/tests/test_callback.py
numpy/f2py/tests/test_mixed.py
numpy/f2py/tests/test_return_character.py
numpy/f2py/tests/test_return_complex.py
numpy/f2py/tests/test_return_integer.py
numpy/f2py/tests/test_return_logical.py
numpy/f2py/tests/test_return_real.py
numpy/f2py/tests/util.py
==================
0132351;David Cournapeau;2010-03-04 00:44:51 +0000;BUG: fix paver execution on windows 7 for python 2.6.

==

pavement.py
==================
29426cb;Travis Oliphant;2010-02-28 03:47:04 +0000;Add capability to ctypeslib to convert a pointer to memory to an array of a particular shape.

==

numpy/ctypeslib.py
==================
4e59ff6;Charles Harris;2010-02-27 08:01:35 +0000;BUG: Fix bug in lbnd implementation of the integ method of the Chebyshev and Polynomial classes.

==

numpy/polynomial/polytemplate.py
numpy/polynomial/tests/test_chebyshev.py
numpy/polynomial/tests/test_polynomial.py
==================
7004a5a;Charles Harris;2010-02-25 17:49:24 +0000;BUG: Make sure that the errors set by the PyCapsule functions are cleared. The PyCObject functions don't set errors. Note that the error handling in the current code is spotty and needs to be fixed at some point.

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/scalarapi.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/multiarray/usertypes.c
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/umathmodule.c.src
==================
f358068;Charles Harris;2010-02-25 05:20:51 +0000;ENH: Add support for PyCapsule.

==

numpy/f2py/cb_rules.py
numpy/f2py/cfuncs.py
numpy/f2py/rules.py
numpy/f2py/src/fortranobject.c
numpy/f2py/src/fortranobject.h
==================
9596a89;Charles Harris;2010-02-25 05:20:44 +0000;BUG: Fix imports in diagnose and excise old crap.

==

numpy/f2py/diagnose.py
==================
d3c7ae5;Charles Harris;2010-02-25 05:20:39 +0000;ENH: Add diagnose to f2py package. This makes the tests a bit easier to fix.

==

numpy/f2py/__init__.py
==================
2f33218;Charles Harris;2010-02-25 05:20:34 +0000;BUG: Shoddy quick fix of some f2py tests so they run. The tests expose errors, but the errors look like artifacts of an unfinished refactoring and partial update to support numpy.

==

numpy/f2py/tests/f90/return_character.py
numpy/f2py/tests/f90/return_complex.py
numpy/f2py/tests/f90/return_integer.py
numpy/f2py/tests/f90/return_logical.py
numpy/f2py/tests/f90/return_real.py
==================
10e5c4c;Charles Harris;2010-02-25 05:20:26 +0000;ENH: Cleanup numpy and ufunc apis for Python >= 3.1. Make sure that an error is set for all error returns so that PyErr_Print() works properly in the import_umath* and import_array* macros.

==

numpy/core/code_generators/generate_numpy_api.py
numpy/core/code_generators/generate_ufunc_api.py
==================
30dc1be;Charles Harris;2010-02-25 05:20:18 +0000;ENH: Try to fix numarray _capi.c for Python >= 3.1. Needs testing that I am not in a position to do.

==

numpy/numarray/_capi.c
==================
e9ba3d0;Stefan van der Walt;2010-02-24 22:05:03 +0000;ENH: Support changed distutils API in Python 2.7.

==

numpy/distutils/ccompiler.py
==================
d96e881;Charles Harris;2010-02-23 18:54:09 +0000;ENH: Add compatibility functions in npy_3kcompat.h for the PyCObject -> PyCapsule update. The improved error handling of PyCapsules is tossed out. When Python3k becomes the required version and a major refactoring is undertaken, that defect should be fixed.

==

numpy/core/src/private/npy_3kcompat.h
==================
c9dec27;Charles Harris;2010-02-23 10:01:49 +0000;BUG: NPY_PY3K probably isn't defined when libnumarray.h is included.

==

numpy/numarray/include/numpy/libnumarray.h
==================
5d6c8bc;Charles Harris;2010-02-23 09:49:38 +0000;BUG: Replace deprecated PyCObject by PyCapsule for Python >= 3.1.

==

numpy/core/code_generators/generate_numpy_api.py
numpy/core/code_generators/generate_ufunc_api.py
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/scalarapi.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/multiarray/scalartypes.h
numpy/core/src/multiarray/usertypes.c
numpy/core/src/private/npy_3kcompat.h
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/umathmodule.c.src
numpy/lib/type_check.py
numpy/numarray/_capi.c
numpy/numarray/include/numpy/libnumarray.h
numpy/random/mtrand/Python.pxi
numpy/random/mtrand/mtrand.c
==================
ea6ca76;Pauli Virtanen;2010-02-22 21:33:56 +0000;3K: doc: note that f2py hasn't been really ported yet

==

doc/Py3K.txt
==================
a1427e0;mdroe;2010-02-22 20:54:57 +0000;Add very basic sanity test for getting include directories (related to ticket #1405)

==

numpy/core/tests/test_regression.py
==================
755e6eb;mdroe;2010-02-22 19:36:24 +0000;Add regression test for ticket #1405

==

numpy/core/tests/test_regression.py
==================
a2dc78f;chanley;2010-02-22 15:28:38 +0000;Fix bad usage of namespace alias change

==

numpy/numarray/util.py
==================
89147a1;Charles Harris;2010-02-21 23:17:54 +0000;BUG: Ignore "invalid value" from abs in testing/utils.py

==

numpy/testing/utils.py
==================
50375e7;Charles Harris;2010-02-21 22:05:45 +0000;BUG: Workarounds for isfinite/isinf invalid values.

==

numpy/lib/tests/test_type_check.py
==================
b10f849;Charles Harris;2010-02-21 22:05:39 +0000;BUG: Fix unhandled divide-by-zero errors and invalid values in tests. Add some tests to check that divide-by-zero errors are raised when desired.

==

numpy/core/tests/test_umath_complex.py
==================
0fbb6f4;Pauli Virtanen;2010-02-21 18:33:11 +0000;3K: doc: some updates to 3K porting notes

==

doc/Py3K.txt
==================
caa3e30;Charles Harris;2010-02-21 18:32:03 +0000;BUG: Fix possibly unbalanced seterr calls. Fixes change of divide state after running np.test().

==

numpy/core/tests/test_numeric.py
numpy/core/tests/test_umath_complex.py
numpy/ma/tests/test_old_ma.py
==================
5b22c87;Charles Harris;2010-02-21 18:31:55 +0000;BUG: Fix possibly unbalanced seterr pairs. Fixes change in state of invalid after running test().

==

numpy/lib/tests/test_type_check.py
==================
0bc06e1;Charles Harris;2010-02-21 16:16:40 +0000;BUG: More workarounds for np.isinf warning in tests.

==

numpy/core/tests/test_umath.py
numpy/testing/utils.py
==================
52c43da;Charles Harris;2010-02-21 16:16:34 +0000;BUG: Work around warning raised by np.isinf(np.inf). The isinf warning should be fixed at a lower level and tested separately. In the meantime, this fix avoids a lot of irrelevant warning messages in the tests.

==

numpy/core/arrayprint.py
==================
93b41a2;Charles Harris;2010-02-21 16:16:29 +0000;WHT: Remove trailing whitespace.

==

numpy/core/tests/test_datetime.py
==================
8b0afe9;Pauli Virtanen;2010-02-21 15:37:06 +0000;ENH: core: export format string as UString in numpymemoryview (Py2.6)

==

numpy/core/src/multiarray/numpymemoryview.c
==================
8e50ad6;Pauli Virtanen;2010-02-21 15:36:40 +0000;BUG: core: fix PEP 3118 tests to account for variation in native long sizes

==

numpy/core/tests/test_multiarray.py
==================
3c55cff;Pauli Virtanen;2010-02-21 15:36:18 +0000;ENH: core: better support for native vs. standard sizes and alignments in the PEP 3118 interface
Also, try to produce minimal buffer format strings without unnecessary
alignment characters.

==

numpy/core/_internal.py
numpy/core/src/multiarray/buffer.c
numpy/core/tests/test_multiarray.py
==================
c22cecb;Pauli Virtanen;2010-02-21 12:25:57 +0000;BUG: core: use C int size specifiers in the PEP 3118 tests, to make things work on 32 and 64 bits platforms

==

numpy/core/tests/test_multiarray.py
==================
cfc5c3b;Pauli Virtanen;2010-02-21 11:59:06 +0000;3K: BUG: alias divide -> true_divide correctly; just replacing the name in generate_umath.py is not the correct thing to do

==

numpy/core/code_generators/generate_umath.py
numpy/core/src/umath/umathmodule.c.src
==================
3ddc421;Pauli Virtanen;2010-02-21 11:58:38 +0000;ENH: ma: use domains also in _DomainedBinaryOperation.__call__ (previously they were used only in __array_wrap__, which wouldn't be called from __div__ et al. which call the domained operations directly)

==

numpy/ma/core.py
==================
057f902;David Cournapeau;2010-02-21 11:36:36 +0000;BUG: fix ppc detection macro on AIX.

==

numpy/core/include/numpy/npy_cpu.h
==================
b72473a;Pauli Virtanen;2010-02-21 11:24:45 +0000;ENH: testing: always enable --detailed-errors assert introspection in nose

==

numpy/testing/nosetester.py
==================
2362c7e;Pauli Virtanen;2010-02-21 11:24:24 +0000;ENH: core: use assert_equal(x, y) instead of assert x==y -- test failures are easier to trace that way

==

numpy/core/tests/test_multiarray.py
==================
f26a0eb;Charles Harris;2010-02-21 06:12:59 +0000;BUG: Fix the invalid value warnings in test_umath.py

==

numpy/core/tests/test_umath.py
==================
3bc5ce3;Charles Harris;2010-02-21 03:51:48 +0000;DEP: Fix one more deprecated unittest function.

==

numpy/linalg/tests/test_build.py
==================
bc01dee;Charles Harris;2010-02-21 03:34:02 +0000;STY: Use import numpy as np. This seems to fix an import error introduced by 2to3, but that may have been an artifact from a previous build. In anycase, no harm done.

==

numpy/numarray/util.py
==================
b913aa5;Pauli Virtanen;2010-02-21 03:25:33 +0000;Remove a leftover empty directory

==
==================
4a617a3;Charles Harris;2010-02-21 03:22:16 +0000;STY: Use explicit itertools namespace for all itertools functions.

==

numpy/lib/recfunctions.py
==================
9e24f04;Pauli Virtanen;2010-02-21 03:21:22 +0000;BUG: fix numarray._capi compilation

==

numpy/numarray/_capi.c
==================
0c7b080;Charles Harris;2010-02-21 03:09:11 +0000;STY: Remove unneeded import.

==

numpy/lib/recfunctions.py
==================
8d227b3;Charles Harris;2010-02-21 02:56:43 +0000;PY3: The izip function is no longer available in itertools. Be explicit about using itertools.izip to 2to3 can make the fix.

==

numpy/lib/recfunctions.py
==================
22d36b2;Charles Harris;2010-02-21 02:56:38 +0000;WHT: Whitespace removal.

==

numpy/lib/io.py
==================
2a7e659;Pauli Virtanen;2010-02-21 02:53:26 +0000;3K: ENH: ma: fix str vs bytes and int issues in ma tests

==

numpy/ma/tests/test_core.py
numpy/ma/tests/test_mrecords.py
numpy/ma/tests/test_old_ma.py
==================
eac637e;Pauli Virtanen;2010-02-21 02:53:10 +0000;BUG: ma: fix inoperative error state set/restore

==

numpy/ma/core.py
==================
79430a4;Pauli Virtanen;2010-02-21 02:52:56 +0000;BUG: ma: _check_fill_value shouldn't rely on implicit array() string casting
Since array([12345678.9, 'a']) == array(['12345678', 'a'], dtype='|S8')
ie., automatic string conversion uses only the size of the minimal data
type, not the size of the string representation, code should not rely on
array() casting items implicitly to object arrays.

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
3f8f41b;Pauli Virtanen;2010-02-21 02:52:39 +0000;3K: ENH: core: support BOOL and VOID better in PEP 3118 buffers

==

numpy/core/_internal.py
numpy/core/src/multiarray/buffer.c
numpy/core/tests/test_multiarray.py
==================
2e7b327;Pauli Virtanen;2010-02-21 02:52:20 +0000;3K: ENH: core: void.item() -> byte array; simple memoryview -> Bytes

==

numpy/core/src/multiarray/arraytypes.c.src
==================
47c891d;Pauli Virtanen;2010-02-21 02:52:02 +0000;3K: ma: implement __rtruediv__, __rfloordiv__, __rpow__ for masked arrays

==

numpy/ma/core.py
==================
1c60ede;Pauli Virtanen;2010-02-21 02:51:48 +0000;3K: doc: note about consequences of removed Py_TPFLAGS_CHECKTYPES

==

doc/Py3K.txt
==================
8421128;Pauli Virtanen;2010-02-21 02:51:34 +0000;3K: lib: implement __rtruediv__ for poly1d

==

numpy/lib/polynomial.py
==================
e2a9f6d;Pauli Virtanen;2010-02-21 02:51:20 +0000;3K: core: mark int('0xff',16) test as known failure on Python3 -- we don't anyway support that call signature for all integer types even on Py2

==

numpy/core/tests/test_regression.py
==================
b1ab8f8;Pauli Virtanen;2010-02-21 02:51:05 +0000;3K: ma: solve some bytes vs. str issues in tests

==

numpy/ma/tests/test_core.py
numpy/ma/tests/test_mrecords.py
==================
4b4d5e6;Pauli Virtanen;2010-02-21 02:50:49 +0000;3K: ENH: ma: implement data-preserving __ifloordiv__ and __itruediv__

==

numpy/ma/core.py
==================
a8bcb84;Pauli Virtanen;2010-02-21 02:50:34 +0000;3K: ENH: make numpy.numarray to import

==

numpy/numarray/functions.py
==================
15b39a5;Pauli Virtanen;2010-02-21 02:50:19 +0000;3K: ENH: move numarray includes under numarray/include so that the 'numpy' directory does not confuse 2to3's relative import conversion

==

numpy/numarray/include/numpy/arraybase.h
numpy/numarray/include/numpy/cfunc.h
numpy/numarray/include/numpy/ieeespecial.h
numpy/numarray/include/numpy/libnumarray.h
numpy/numarray/include/numpy/numcomplex.h
numpy/numarray/include/numpy/nummacro.h
numpy/numarray/numpy/arraybase.h
numpy/numarray/numpy/cfunc.h
numpy/numarray/numpy/ieeespecial.h
numpy/numarray/numpy/libnumarray.h
numpy/numarray/numpy/numcomplex.h
numpy/numarray/numpy/nummacro.h
numpy/numarray/setup.py
numpy/numarray/setupscons.py
numpy/numarray/util.py
==================
e975168;Pauli Virtanen;2010-02-21 02:49:39 +0000;3K: ENH: make oldnumeric to import -- but don't implement oldnumeric.Unpickler as it's not straightforward to do

==

numpy/oldnumeric/compat.py
numpy/oldnumeric/misc.py
==================
eb1c29f;Pauli Virtanen;2010-02-21 02:49:22 +0000;3K: ENH: core: follow Python in formatting negative zeros in (-0+x*j)

==

numpy/core/src/multiarray/scalartypes.c.src
==================
700147f;Pauli Virtanen;2010-02-21 02:49:04 +0000;3K: lib: fix bytes vs str issues in tests

==

numpy/lib/tests/test_io.py
numpy/lib/tests/test_twodim_base.py
==================
37f8530;Pauli Virtanen;2010-02-21 02:48:47 +0000;3K: lib: zip is izip on Py3

==

numpy/lib/recfunctions.py
==================
8003020;Pauli Virtanen;2010-02-21 02:48:33 +0000;3K: lib: missing_values in genfromtxt is never a basestring on Py3

==

numpy/lib/_iotools.py
numpy/lib/io.py
==================
0a67e86;Pauli Virtanen;2010-02-21 02:48:19 +0000;3K: lib: fix sort(key=) issue

==

numpy/lib/utils.py
==================
6c990fb;Pauli Virtanen;2010-02-21 02:48:04 +0000;3K: linalg: fix integer division issue and tests

==

numpy/linalg/linalg.py
numpy/linalg/tests/test_build.py
==================
fab2b47;Pauli Virtanen;2010-02-21 02:47:48 +0000;3K: polynomial: make tests to import

==

numpy/polynomial/tests/test_chebyshev.py
numpy/polynomial/tests/test_polynomial.py
numpy/polynomial/tests/test_polyutils.py
==================
866abe5;Pauli Virtanen;2010-02-21 02:47:31 +0000;3K: lib: poly1d __div__ -> __truediv__, and fix its doctests

==

numpy/lib/polynomial.py
numpy/lib/tests/test_polynomial.py
==================
b47f2ca;Pauli Virtanen;2010-02-21 02:47:14 +0000;3K: core: fix a few str vs bytes issues in tests

==

numpy/core/tests/test_numerictypes.py
numpy/core/tests/test_records.py
numpy/core/tests/test_regression.py
==================
ae00919;Pauli Virtanen;2010-02-21 02:46:46 +0000;3K: matrixlib: adapt to changes in str.translate

==

numpy/matrixlib/defmatrix.py
==================
8b0edd6;Pauli Virtanen;2010-02-21 02:46:29 +0000;3K: ENH: regenerate mtrand.c with a newer Cython, for better Python 3 compatibility

==

numpy/random/mtrand/mtrand.c
==================
519fcca;Pauli Virtanen;2010-02-21 02:46:08 +0000;3K: core/numerictypes: fix handling of Python types, and recognize bytes as a Python type

==

numpy/core/numerictypes.py
==================
e8a7df6;Pauli Virtanen;2010-02-21 02:45:48 +0000;3K: BUG: fix unravel_index integer division

==

numpy/lib/index_tricks.py
==================
ca54001;Pauli Virtanen;2010-02-21 02:45:30 +0000;3K: ENH: ensure integer scalar types are hashable -- we don't automatically inherit the hash implementation from Python ints on 3K

==

numpy/core/src/multiarray/scalartypes.c.src
==================
69f7f4c;Charles Harris;2010-02-21 01:55:27 +0000;DEP: Fix more files for unittest deprecated functions. It isn't clear why these tests didn't issue deprecation warnings. Are they being run?

==

numpy/core/tests/test_datetime.py
numpy/core/tests/test_defchararray.py
numpy/core/tests/test_dtype.py
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_numeric.py
numpy/core/tests/test_numerictypes.py
numpy/core/tests/test_records.py
numpy/core/tests/test_regression.py
numpy/core/tests/test_umath.py
numpy/distutils/tests/test_npy_pkg_config.py
numpy/fft/tests/test_fftpack.py
numpy/lib/tests/test_function_base.py
==================
051165f;Charles Harris;2010-02-20 22:31:25 +0000;DEP: Fix deprecation warnings in Python 3.1. The warnings come from the unittest module. The fix should be good for Python >= 2.4 and used the following sed script:
s/\<failUnless\>/assertTrue/g
s/\<failIf\>/assertFalse/g
s/\<failUnlessEqual\>/assertEqual/g
s/\<failUnlessRaises\>/assertRaises/g

==

numpy/lib/tests/test_io.py
numpy/lib/tests/test_recfunctions.py
numpy/lib/tests/test_regression.py
numpy/lib/tests/test_twodim_base.py
numpy/ma/tests/test_core.py
numpy/ma/tests/test_extras.py
numpy/ma/tests/test_mrecords.py
numpy/ma/tests/test_old_ma.py
numpy/ma/tests/test_subclassing.py
numpy/matrixlib/tests/test_regression.py
numpy/testing/tests/test_utils.py
==================
8f2413a;Pauli Virtanen;2010-02-20 18:22:04 +0000;BUG: ensure Py_TYPE is available in _dotblas.c on Python 2.4 and 2.5

==

numpy/core/blasdot/_dotblas.c
==================
5e88c32;Pauli Virtanen;2010-02-20 18:21:48 +0000;BUG: fix a few missing includes that may cause problems on 64-bit

==

numpy/core/src/multiarray/buffer.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/scalarapi.c
==================
e5a6c98;Pauli Virtanen;2010-02-20 18:21:29 +0000;3K: BUG: fix refcount error in npy_PyFile_Dup

==

numpy/core/src/private/npy_3kcompat.h
==================
2aa91ba;Pauli Virtanen;2010-02-20 18:21:12 +0000;BUG: properly check the return value of numpy.core._internal._dtype_from_pep3118

==

numpy/core/src/multiarray/buffer.c
==================
212fc25;Pauli Virtanen;2010-02-20 18:20:47 +0000;3K: BUG: core: fix ucsnarrow.c:MyPyUnicode_New to work correctly on Py3

==

numpy/core/src/multiarray/ucsnarrow.c
==================
5722407;Pauli Virtanen;2010-02-20 18:20:27 +0000;BUG: fix a crash due to mixing PyUnicode and PyString

==

numpy/core/src/multiarray/mapping.c
==================
11b80e7;Pauli Virtanen;2010-02-20 18:20:10 +0000;3K: BUG: work around bugs in Python 3.1.1 2to3 by not using fixes_reduce
Instead, manually import reduce where necessary.

==

numpy/core/arrayprint.py
numpy/distutils/system_info.py
numpy/f2py/auxfuncs.py
numpy/lib/arrayterator.py
numpy/lib/tests/test_arrayterator.py
numpy/ma/core.py
numpy/ma/tests/test_core.py
numpy/ma/tests/test_old_ma.py
numpy/ma/timer_comparison.py
numpy/oldnumeric/ma.py
tools/py3tool.py
==================
9f9098f;Pauli Virtanen;2010-02-20 18:19:37 +0000;3K: py3tool: use lib2to3 for the conversions
This ensures that the Py3 version of 2to3 is always used, and that
failures in conversion result to an immediate build failure.

==

tools/py3tool.py
==================
22e3125;Pauli Virtanen;2010-02-20 18:19:24 +0000;BUG: another single-file compilation fix

==

numpy/core/src/multiarray/multiarraymodule_onefile.c
==================
7140ada;Pauli Virtanen;2010-02-20 18:19:07 +0000;BUG: lib: ensure 'bytes' is imported in io.py

==

numpy/lib/io.py
==================
c084cc1;Pauli Virtanen;2010-02-20 18:18:53 +0000;3K: core: fix single-file compilation

==

numpy/core/src/multiarray/common.c
==================
7236ac1;Pauli Virtanen;2010-02-20 18:18:36 +0000;3K: Some remaining Py_TYPE issues

==

numpy/core/blasdot/_dotblas.c
numpy/core/src/scalarmathmodule.c.src
==================
9c77c43;Pauli Virtanen;2010-02-20 18:18:18 +0000;3K: lib: more str vs bytes issues in the lib/io loadtxt, savetxt and genfromtxt

==

numpy/compat/py3k.py
numpy/lib/_iotools.py
numpy/lib/io.py
numpy/lib/tests/test__iotools.py
numpy/lib/tests/test_io.py
==================
fe8b703;Pauli Virtanen;2010-02-20 18:17:51 +0000;ENH: compat: additional Py3 convenience functions

==

numpy/compat/py3k.py
==================
13f35de;Pauli Virtanen;2010-02-20 18:17:29 +0000;3K: lib: fix savetxt
This will make savetxt open files in the 'wb' mode on Python 3.  To
allow using any sort of newlines (which are different e.g. on Windows),
add a new 'newline' keyword.

==

numpy/lib/io.py
==================
0f2e7db;Pauli Virtanen;2010-02-20 18:17:14 +0000;3K: lib: fix some bytes vs. str issues in _iotools.py and io.py -- mainly genfromtxt

==

doc/Py3K.txt
numpy/lib/_iotools.py
numpy/lib/function_base.py
numpy/lib/io.py
numpy/lib/tests/test__iotools.py
numpy/lib/tests/test_io.py
==================
0e9a08c;Pauli Virtanen;2010-02-20 18:16:52 +0000;3K: lib: even more bytes/str fixes in format.py tests

==

numpy/lib/tests/test_format.py
==================
20121f4;Pauli Virtanen;2010-02-20 18:16:37 +0000;3K: lib: use BytesIO in test_io

==

numpy/lib/tests/test_io.py
==================
b1c25de;Pauli Virtanen;2010-02-20 18:16:22 +0000;3K: lib: fix some bytes/str issues in _format.py and its tests

==

numpy/lib/format.py
numpy/lib/tests/test_format.py
==================
2cd9854;Pauli Virtanen;2010-02-20 18:16:05 +0000;ENH: lib: write fortran-contiguous data to files using arr.T.tofile instead of arr.data (required for Py3 compatibility)
The issue is that when passing a buffer object to Python's
io.BufferedWriter.write, it will try to obtain the buffer using PyBUF_ND
| PyBUF_C_CONTIGUOUS. This will fail for strided arrays -- seems to be
an issue in Python, as it probably should try to obtain a SIMPLE buffer.

==

numpy/lib/format.py
==================
e247b1d;Pauli Virtanen;2010-02-20 18:15:51 +0000;3K: core: in tofile etc., ensure the file is flushed before switching to FILE* I/O

==

numpy/core/src/private/npy_3kcompat.h
==================
ff26cec;Pauli Virtanen;2010-02-20 18:15:34 +0000;3K: lib: adapt safe_eval for Py3 ast module

==

numpy/lib/utils.py
==================
348f725;Pauli Virtanen;2010-02-20 18:15:20 +0000;3K: compat: make isfileobj recognize only real file objects with FILE* pointers as file objects

==

numpy/compat/py3k.py
==================
2dd53a6;Pauli Virtanen;2010-02-20 18:15:06 +0000;3K: lib: do not slice range() in _iotools needlessly

==

numpy/lib/_iotools.py
==================
4bf9144;Pauli Virtanen;2010-02-20 18:14:51 +0000;3K: lib: Make _datasource and its tests Py3 compatible + slight cleanup of the code

==

numpy/lib/_datasource.py
numpy/lib/tests/test__datasource.py
==================
550df27;Pauli Virtanen;2010-02-20 18:14:30 +0000;3K: fft: fix integer division in (i)fftshift

==

numpy/fft/helper.py
==================
c3c6b10;Pauli Virtanen;2010-02-20 18:14:11 +0000;3K: f2py: use integer division to avoid problems with string multiplication

==

numpy/f2py/auxfuncs.py
==================
10985dc;Pauli Virtanen;2010-02-20 18:13:57 +0000;3K: f2py: break cyclic imports (which are not allowed on Py3) by moving them to functions

==

numpy/f2py/cb_rules.py
numpy/f2py/f90mod_rules.py
==================
04d09a4;Pauli Virtanen;2010-02-20 18:13:40 +0000;3K: ENH: core: alias __round__ -> round for the generic scalar type, for the round() builtin

==

numpy/core/src/multiarray/scalartypes.c.src
==================
33d45c3;Pauli Virtanen;2010-02-20 18:13:23 +0000;3K: doc: note in Py3K porting log that intp('0xff', 16) does not work any more

==

doc/Py3K.txt
==================
1ddd3c4;Pauli Virtanen;2010-02-20 18:13:08 +0000;ENH: core: Fix the test for #99 -- np.long == raw Python long. The test should test np.intp instead

==

numpy/core/tests/test_regression.py
==================
c0815c5;Pauli Virtanen;2010-02-20 18:12:46 +0000;3K: core: fix pickling of unicode scalars on Py3 -- they do not have buffer interface, so we need to get the buffer via the standard route

==

numpy/core/src/multiarray/scalartypes.c.src
==================
cb8c9b3;Pauli Virtanen;2010-02-20 18:12:29 +0000;3K: lib: bytes vs. str fixes in lib.format and lib.io

==

numpy/lib/format.py
numpy/lib/io.py
==================
f840146;Pauli Virtanen;2010-02-20 18:12:14 +0000;3K: core: use BytesIO instead of StringIO in test_regressions on Py3

==

numpy/core/tests/test_regression.py
==================
97b333c;Pauli Virtanen;2010-02-20 18:11:55 +0000;ENH: core: allow unicode file names in PyArray_Dump

==

numpy/core/src/multiarray/methods.c
==================
4662956;Pauli Virtanen;2010-02-20 18:11:38 +0000;3K: core: allow unicode type strings in __array_interface__ since we allow those also in dtypes

==

numpy/core/src/multiarray/ctors.c
==================
f8012ce;Pauli Virtanen;2010-02-20 18:11:21 +0000;3K: linalg: fix some str/bytes issues

==

numpy/linalg/linalg.py
==================
1319305;Pauli Virtanen;2010-02-20 18:11:07 +0000;3K: core: fix up some tests

==

numpy/core/tests/test_regression.py
==================
c55d31b;Pauli Virtanen;2010-02-20 18:10:52 +0000;3K: doc: update porting documentation

==

doc/Py3K.txt
==================
bc9be5a;Pauli Virtanen;2010-02-20 18:10:35 +0000;3K: ENH: core/numerictypes: Update string/unicode aliases for Py3

==

numpy/core/numerictypes.py
==================
ee0b81d;Pauli Virtanen;2010-02-20 18:10:21 +0000;3K: ENH: on py3k, rename scalar type display names as unicode_ -> str_ and string_ -> bytes_

==

numpy/core/src/multiarray/scalartypes.c.src
==================
ee96684;Pauli Virtanen;2010-02-20 18:10:04 +0000;BUG: core: make sure PyArray_FromAny respects wanted type and flags also for PEP 3118 objects

==

numpy/core/src/multiarray/ctors.c
numpy/core/tests/test_multiarray.py
==================
f553be9;Pauli Virtanen;2010-02-20 18:09:45 +0000;ENH: implement PEP 3118 buffer consumer on Py2.6, adding a simple Memoryview object
To use PEP 3118 buffers as ndarray bases, we need to have a way to
release the buffers on garbage collection. The easiest way to do this is
to use a Memoryview object -- but they are not available on Python 2.6.

Hence, we implement a minimal memory view object that only handles the
garbage collection, and use it on Python 2.6.  It also implements the
new buffer protocol, to allow testing the functionality.

==

numpy/core/SConscript
numpy/core/setup.py
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/buffer.c
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/numpymemoryview.c
numpy/core/src/multiarray/numpymemoryview.h
numpy/core/tests/test_multiarray.py
==================
d820db2;Pauli Virtanen;2010-02-20 18:09:17 +0000;3K: ENH: make defchararray work on Py3, and make its tests Py3 compliant
There were mainly issues in mixing bytes/unicode on Py3.

==

numpy/core/defchararray.py
numpy/core/tests/test_defchararray.py
==================
3243b04;Pauli Virtanen;2010-02-20 18:09:00 +0000;ENH: Add some tools to numpy.compat

==

numpy/compat/_inspect.py
numpy/compat/py3k.py
==================
ff91dbe;Pauli Virtanen;2010-02-20 18:08:44 +0000;3K: BUG: do not convert Bytes/Unicode via PEP 3118 buffers -- use 'S/U#' instead

==

numpy/core/src/multiarray/ctors.c
==================
fc064f1;Pauli Virtanen;2010-02-20 18:08:27 +0000;3K: doc: update Py3K port documentation

==

doc/Py3K.txt
==================
43e97ba;Pauli Virtanen;2010-02-20 18:08:14 +0000;BUG: core: prefer byte strings over PEP 3118 buffers when determining array type in _array_find_type

==

numpy/core/src/multiarray/common.c
==================
b754c24;Pauli Virtanen;2010-02-20 18:07:57 +0000;3K: BUG: core: fix some bytes/str issues in defchararray.py

==

numpy/core/defchararray.py
==================
cb6ff9b;Pauli Virtanen;2010-02-20 18:07:43 +0000;3K: ENH: core: audit some PyString -> PyBytes conversions

==

numpy/core/src/multiarray/arraytypes.c.src
==================
a62e741;Pauli Virtanen;2010-02-20 18:07:26 +0000;ENH: core: make PyArray_FromAny error message more clear
When building string/unicode arrays, PyArray_FromAny would try building
a 0-d array as a last resort. If the object is a finite-length sequence,
this always fails with an error "ValueError: setting an array element
with a sequence", as STRING/UNICODE_setitem do not allow this.

In some cases this message is confusing: for example on Py3,

    array([['a', 'b'], ['c', '\u03a3']], dtype='S2')

would fail because of this, even though the real error is that '\u03a3'
cannot be unambiguously cast to bytes().

==

numpy/core/src/multiarray/ctors.c
==================
d2bb646;Pauli Virtanen;2010-02-20 18:07:10 +0000;3K: BUG: cast any object to unicode/bytes in UNICODE/STRING_setitem also for Py3, similarly as it is done in Py2
This makes UNICODE_setitem and STRING_setitem work similarly as on
Python 2 -- uses ASCII codec -- I judge this useful for compatibility
reasons.

==

numpy/core/src/multiarray/arraytypes.c.src
==================
9978917;Pauli Virtanen;2010-02-20 18:06:53 +0000;3K: BUG: make test_defchararray convert properly via 2to3

==

numpy/core/tests/test_defchararray.py
tools/py3tool.py
==================
77f8ea3;Pauli Virtanen;2010-02-20 18:06:35 +0000;3K: core: adjust some tests vs. str/bytes and int inheritance issues

==

numpy/compat/py3k.py
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_numerictypes.py
numpy/core/tests/test_records.py
numpy/core/tests/test_regression.py
numpy/core/tests/test_unicode.py
==================
02aeb9b;Pauli Virtanen;2010-02-20 18:06:15 +0000;3K: core: fix one str/bytes issue in records.py

==

numpy/core/records.py
==================
fdf9d7f;Pauli Virtanen;2010-02-20 18:06:00 +0000;3K: BUG: fix tofile/fromfile on Py3 by dup-ing the file descriptor before fdopening -- works around issues in flushing data

==

numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/private/npy_3kcompat.h
==================
87cf71e;Pauli Virtanen;2010-02-20 18:05:41 +0000;3K: BUG: core: fix some tests for Py3

==

numpy/compat/py3k.py
numpy/core/tests/test_multiarray.py
==================
69ba79a;Pauli Virtanen;2010-02-20 18:05:21 +0000;ENH: core: implement support for PEP 3118 buffer objects in asarray() and array()
This is available only for Python >= 2.7, since the MemoryView object is
not present in earlier versions of Python. (It makes releasing the
buffer much easier, via garbage collection.)

==

numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/ctors.c
==================
a59bbf7;Pauli Virtanen;2010-02-20 18:05:03 +0000;ENH: core: add some support routines needed for consuming PEP 3118 buffers

==

numpy/core/_internal.py
numpy/core/src/multiarray/buffer.c
numpy/core/src/multiarray/buffer.h
numpy/core/src/multiarray/numpyos.c
numpy/core/src/multiarray/numpyos.h
==================
efc0601;Pauli Virtanen;2010-02-20 18:04:43 +0000;ENH: add some tests for PEP 3118 buffer interface

==

numpy/core/tests/test_multiarray.py
==================
3577b83;Pauli Virtanen;2010-02-20 18:04:27 +0000;ENH: core: require PEP 3118 buffer contiguity only with ND and not STRIDES

==

numpy/core/src/multiarray/buffer.c
==================
4a59b9f;Pauli Virtanen;2010-02-20 18:04:11 +0000;ENH: core: cleanups in PEP 3118 provider

==

numpy/core/src/multiarray/buffer.c
==================
e6ee754;Pauli Virtanen;2010-02-20 18:03:53 +0000;ENH: core: support sub-arrays in PEP 3118 buffers

==

numpy/core/src/multiarray/buffer.c
==================
f0fb313;Pauli Virtanen;2010-02-20 18:03:36 +0000;ENH: rewrite PEP 3118 interface without adding items to structs
Implementing PEP 3118 is somewhat convoluted because of the desirata:

- Don't add new members to ndarray or descr structs, to preserve binary
  compatibility. (Also, adding the items is actually not very useful,
  since mutability issues prevent an 1 to 1 relationship between arrays
  and buffer views.)

- Don't use bf_releasebuffer, because it prevents PyArg_ParseTuple("s#", ...)
  from working. Breaking this would cause several backward compatibility
  issues already on Python 2.6.

- Behave correctly when array is reshaped in-place, or it's dtype is
  altered.

This commit works around these issues by keeping copies of buffer format
strings and shape/stride information in a global dictionary. Elements in
the dictionary are reused when possible, and cleared when an array is
deallocated.

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/multiarray/buffer.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/descriptor.c
==================
60387a8;Pauli Virtanen;2010-02-20 18:03:14 +0000;3K: core: sort using the key= method

==

numpy/core/_internal.py
==================
06fad78;Pauli Virtanen;2010-02-20 18:03:00 +0000;3K: BUG: bytes as dtype should map to 1-byte strings, not long

==

numpy/core/src/multiarray/descriptor.c
==================
1c71673;Jarrod Millman;2010-02-17 23:55:16 +0000;updated documentation from pydoc website (thanks to everyone who contributed!)

==

doc/source/reference/arrays.classes.rst
doc/source/reference/arrays.dtypes.rst
doc/source/reference/arrays.indexing.rst
doc/source/reference/arrays.ndarray.rst
doc/source/reference/c-api.coremath.rst
doc/source/reference/c-api.types-and-structures.rst
doc/source/reference/c-api.ufunc.rst
doc/source/reference/index.rst
doc/source/reference/internals.code-explanations.rst
doc/source/reference/maskedarray.generic.rst
doc/source/reference/routines.array-creation.rst
doc/source/reference/routines.rst
doc/source/user/basics.indexing.rst
doc/source/user/basics.rec.rst
doc/source/user/basics.rst
doc/source/user/basics.types.rst
doc/source/user/c-info.beyond-basics.rst
doc/source/user/c-info.python-as-glue.rst
doc/source/user/howtofind.rst
doc/source/user/install.rst
doc/source/user/misc.rst
doc/source/user/performance.rst
numpy/add_newdocs.py
numpy/core/code_generators/ufunc_docstrings.py
numpy/doc/constants.py
==================
e2bb094;Jarrod Millman;2010-02-17 23:53:04 +0000;more docstring updates from pydoc website (thanks to everyone who contributed!)

==

numpy/doc/basics.py
numpy/doc/creation.py
numpy/doc/indexing.py
numpy/doc/misc.py
numpy/doc/ufuncs.py
numpy/lib/financial.py
numpy/lib/function_base.py
numpy/lib/io.py
numpy/lib/shape_base.py
numpy/linalg/linalg.py
numpy/ma/core.py
numpy/polynomial/__init__.py
numpy/polynomial/chebyshev.py
numpy/polynomial/polynomial.py
numpy/polynomial/polytemplate.py
numpy/polynomial/polyutils.py
numpy/testing/utils.py
==================
dcc721a;Jarrod Millman;2010-02-17 23:42:42 +0000;updated docstrings from pydoc website (thanks to everyone who contributed!)

==

numpy/core/defchararray.py
numpy/core/fromnumeric.py
numpy/core/numeric.py
numpy/core/numerictypes.py
numpy/core/shape_base.py
numpy/distutils/misc_util.py
==================
d9e1ff3;Charles Harris;2010-02-17 16:49:17 +0000;STY: Remove hard tabs, reindent.

==

numpy/core/src/multiarray/scalarapi.c
==================
cac18e9;Charles Harris;2010-02-17 16:49:05 +0000;STY: Remove hardtabs, reindent.

==

numpy/core/src/multiarray/multiarraymodule.c
==================
1f869cf;Charles Harris;2010-02-17 16:48:56 +0000;STY: Remove hardtabs, reindent.

==

numpy/core/src/multiarray/descriptor.c
==================
5eaada7;Charles Harris;2010-02-17 16:48:46 +0000;STY: Remove hardtabs, reindent.

==

numpy/core/src/multiarray/multiarraymodule.c
==================
5a94724;Charles Harris;2010-02-17 16:48:37 +0000;STY: Remove hard tabs, reindent.

==

numpy/core/src/umath/ufunc_object.c
==================
7e4e3e8;Charles Harris;2010-02-17 16:48:28 +0000;STY: Remove hard tabs. Reindent.

==

numpy/core/include/numpy/npy_math.h
==================
ae6d51f;Charles Harris;2010-02-17 16:48:19 +0000;STY: Remove hard tabs.

==

numpy/core/include/numpy/npy_common.h
==================
ba5bef9;Charles Harris;2010-02-17 16:48:13 +0000;STY: Remove hard tab.

==

numpy/core/SConscript
==================
46cbb50;Charles Harris;2010-02-17 16:48:07 +0000;BUG: Import warnings module in polynomial modules.

==

numpy/polynomial/chebyshev.py
numpy/polynomial/polynomial.py
==================
624b33d;dhuard;2010-02-16 18:52:08 +0000;removed old behavior for the histogram function.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_regression.py
==================
8cdc452;Travis Oliphant;2010-02-16 04:44:41 +0000;Fix Order of scalartypes.

==

numpy/core/src/multiarray/scalartypes.c.src
==================
5100a74;Travis Oliphant;2010-02-15 23:14:19 +0000;Update ordering of cast functions which was incorrectly placed.

==

numpy/core/src/multiarray/arraytypes.c.src
==================
20ec480;Travis Oliphant;2010-02-15 23:13:16 +0000;API and ABI changes:  Removed BigArrayType, Fixed hasobject to an integer (and inserted an unused character for alignment) and renamed it to flags.  Re-organized the ArrFuncs structure.   Moved NPY_DATETIME and friends to their 'correct' place in the type order.

==

doc/CAPI.txt
doc/cython/c_numpy.pxd
doc/numpybook/capi.lyx
doc/numpybook/comparison/pyrex/c_numpy.pxd
doc/pyrex/c_numpy.pxd
doc/source/reference/c-api.types-and-structures.rst
numpy/core/code_generators/cversions.txt
numpy/core/code_generators/numpy_api.py
numpy/core/include/numpy/ndarrayobject.h
numpy/core/setup_common.py
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/hashdescr.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/random/mtrand/numpy.pxi
==================
29efc30;pierregm;2010-02-14 23:04:18 +0000;Fix #1367 (round 2)

==

numpy/ma/core.py
==================
f45d580;pierregm;2010-02-14 07:32:25 +0000;Fix #1367

==

numpy/ma/core.py
==================
18c907f;Charles Harris;2010-02-14 06:53:05 +0000;BUG: Apply patch to fix ticket #1326.

==

numpy/core/tests/test_regression.py
==================
204df19;Charles Harris;2010-02-13 22:56:30 +0000;Fix _dotblas ob_type pointer for py3k.

==

numpy/core/blasdot/_dotblas.c
==================
7c0908e;Travis Oliphant;2010-02-12 00:37:17 +0000;Update trunk version to 2.0 and fix descriptor pickle code so that it produces 1.3-compatible pickle unless it cannot.

==

numpy/core/src/multiarray/descriptor.c
setup.py
==================
2f7b48c;David Cournapeau;2010-02-09 08:40:36 +0000;ENH: handle complex input for assert_array_almost_equal_nulp.

==

numpy/testing/utils.py
==================
3e5a12c;David Cournapeau;2010-02-09 08:40:23 +0000;BUG: fix typo.

==

numpy/testing/utils.py
==================
9ad03af;David Cournapeau;2010-02-09 08:40:09 +0000;TST: add simple test for complex arrays input to assert_array_almost_equal_nulp.

==

numpy/testing/tests/test_utils.py
==================
88c05e8;Stefan van der Walt;2010-02-08 13:13:28 +0000;BUG: Check input to poly for zero-dimensional arrays.

==

numpy/lib/polynomial.py
numpy/lib/tests/test_polynomial.py
==================
69c2a3b;pierregm;2010-02-08 07:35:34 +0000;* allow fill_value to be np.void

==

numpy/ma/core.py
==================
53f1ee9;pierregm;2010-02-08 06:21:33 +0000;* Make sure _fill_value is never None for structured masked arrays

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
5bad51b;pierregm;2010-02-07 22:26:04 +0000;* Force the fill_value of a structured masked array to be defined (bug #1332)

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
5d87b02;Pauli Virtanen;2010-02-04 21:23:10 +0000;ctypeslib: Correct tabs to spaces

==

numpy/ctypeslib.py
==================
49c5dc1;Travis Oliphant;2010-02-04 15:07:51 +0000;BUG: Fix #1376, indentation problem.

==

numpy/distutils/fcompiler/gnu.py
==================
fd4618b;Travis Oliphant;2010-02-04 14:44:48 +0000;BUG: Fix #1379 by applying supplied patch.

==

numpy/core/include/numpy/npy_cpu.h
==================
58b5fb9;Travis Oliphant;2010-02-04 14:40:55 +0000;BUG: Fix #1388. Return NULL after setting error.   Also simplify ctypeslib prep_simple function.

==

numpy/core/src/multiarray/ctors.c
numpy/ctypeslib.py
==================
1473800;David Cournapeau;2010-02-02 04:54:53 +0000;BUG: fix #1387. Raise ValueError for empty input to bincount.

==

numpy/lib/src/_compiled_base.c
numpy/lib/tests/test_regression.py
==================
60e5332;David Cournapeau;2010-02-02 04:54:35 +0000;TST: add a couple of simple unit-tests for bincount.

==

numpy/lib/tests/test_function_base.py
==================
41ba074;David Cournapeau;2010-02-01 10:56:51 +0000;BUG: fix performance issue (#1308).

==

numpy/core/src/multiarray/multiarraymodule.c
==================
5dc876d;Robert Kern;2010-01-29 22:50:54 +0000;BUG: Add more protection against uninitialized lists on the Distribution object.

==

numpy/distutils/misc_util.py
==================
7a53c06;Robert Kern;2010-01-29 22:18:04 +0000;BUG: guard against having an uninitialized list of scripts.

==

numpy/distutils/misc_util.py
==================
786f775;Travis Oliphant;2010-01-24 23:11:57 +0000;Apply ifort.patch from ticket #1372 to allow Intel Fortran Compiler 11.1 to be called by numpy.distutils.

==

numpy/distutils/fcompiler/__init__.py
numpy/distutils/fcompiler/intel.py
==================
889d1e2;pierregm;2010-01-21 21:10:02 +0000;* fixed the docstring of MaskedArray.sort

==

numpy/ma/core.py
==================
84b0dfd;Charles Harris;2010-01-20 16:24:49 +0000;BUG: Fix ticket #1336 again. Merge for r8072 introduced a regression.

==

numpy/core/src/multiarray/arraytypes.c.src
==================
82dd639;pierregm;2010-01-20 08:10:11 +0000;np.genfromtxt: make sure we're using the actual names when double-checking for missing values

==

numpy/lib/io.py
==================
a9905df;Travis Oliphant;2010-01-19 22:24:33 +0000;Fix test for sorting with other-endian field.

==

numpy/core/tests/test_multiarray.py
==================
d61aaf7;Travis Oliphant;2010-01-19 18:58:18 +0000;Fix VOID_compare to handle the case of byteswapped data.  Fixes Ticket #1366.

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/tests/test_multiarray.py
==================
ab7ba28;Charles Harris;2010-01-17 20:44:28 +0000;STY: Remove unused variable that was added in last commit.

==

numpy/core/src/multiarray/arraytypes.c.src
==================
25c0e36;Charles Harris;2010-01-17 20:09:51 +0000;STY: First pass cleanup of arraytypes.c.src. Coding style cleanups. Break long lines.

==

numpy/core/src/multiarray/arraytypes.c.src
==================
2bdd749;Charles Harris;2010-01-16 04:33:05 +0000;Fix bus error resulting from inlined gcc memcpy alignment assumptions. Fixes ticket #1336.

==

numpy/core/src/multiarray/arraytypes.c.src
==================
c7c7730;Jarrod Millman;2010-01-16 03:32:55 +0000;remove webup, use upload

==

doc/numpy.scipy.org/Makefile
==================
799f186;Jarrod Millman;2010-01-16 03:32:15 +0000;mv build to _build

==

doc/numpy.scipy.org/Makefile
==================
242eb69;Jarrod Millman;2010-01-16 03:28:31 +0000;point conf to the default static content

==

doc/numpy.scipy.org/conf.py
==================
e58574c;Jarrod Millman;2010-01-16 03:22:25 +0000;removing old dir

==
==================
f59dd3a;Jarrod Millman;2010-01-16 03:20:33 +0000;consolidating static content in one location

==

doc/numpy.scipy.org/_static/favicon.ico
doc/numpy.scipy.org/_static/images/bugs.png
doc/numpy.scipy.org/_static/images/documentation.png
doc/numpy.scipy.org/_static/images/download.png
doc/numpy.scipy.org/_static/images/feed-icon.png
doc/numpy.scipy.org/_static/images/tutorial.png
doc/numpy.scipy.org/_theme/scipy/static/favicon.ico
doc/numpy.scipy.org/_theme/scipy/static/images/bugs.png
doc/numpy.scipy.org/_theme/scipy/static/images/documentation.png
doc/numpy.scipy.org/_theme/scipy/static/images/download.png
doc/numpy.scipy.org/_theme/scipy/static/images/feed-icon.png
doc/numpy.scipy.org/_theme/scipy/static/images/tutorial.png
==================
c6f3477;Jarrod Millman;2010-01-16 03:19:31 +0000;removing old dir

==
==================
34c59cf;Jarrod Millman;2010-01-16 03:17:29 +0000;point everything to top-level dir

==

doc/numpy.scipy.org/Makefile
doc/numpy.scipy.org/conf.py
==================
c793ba6;Jarrod Millman;2010-01-16 03:14:46 +0000;moving content up a level from source

==

doc/numpy.scipy.org/_static/favicon.ico
doc/numpy.scipy.org/_static/images/bugs.png
doc/numpy.scipy.org/_static/images/documentation.png
doc/numpy.scipy.org/_static/images/download.png
doc/numpy.scipy.org/_static/images/feed-icon.png
doc/numpy.scipy.org/_static/images/tutorial.png
doc/numpy.scipy.org/conf.py
doc/numpy.scipy.org/content.rst
doc/numpy.scipy.org/old_array_packages.rst
doc/numpy.scipy.org/source/_static/favicon.ico
doc/numpy.scipy.org/source/_static/images/bugs.png
doc/numpy.scipy.org/source/_static/images/documentation.png
doc/numpy.scipy.org/source/_static/images/download.png
doc/numpy.scipy.org/source/_static/images/feed-icon.png
doc/numpy.scipy.org/source/_static/images/tutorial.png
doc/numpy.scipy.org/source/conf.py
doc/numpy.scipy.org/source/content.rst
doc/numpy.scipy.org/source/old_array_packages.rst
==================
4c84fab;Jarrod Millman;2010-01-16 03:11:27 +0000;mv theme to _theme

==

doc/numpy.scipy.org/_theme/scipy/index.html
doc/numpy.scipy.org/_theme/scipy/layout.html
doc/numpy.scipy.org/_theme/scipy/static/logo.gif
doc/numpy.scipy.org/_theme/scipy/static/numpy_logo.png
doc/numpy.scipy.org/_theme/scipy/static/scipy.css
doc/numpy.scipy.org/_theme/scipy/theme.conf
doc/numpy.scipy.org/source/conf.py
doc/numpy.scipy.org/theme/scipy/index.html
doc/numpy.scipy.org/theme/scipy/layout.html
doc/numpy.scipy.org/theme/scipy/static/logo.gif
doc/numpy.scipy.org/theme/scipy/static/numpy_logo.png
doc/numpy.scipy.org/theme/scipy/static/scipy.css
doc/numpy.scipy.org/theme/scipy/theme.conf
==================
fbbedf0;Jarrod Millman;2010-01-16 03:08:03 +0000;add make webup

==

doc/numpy.scipy.org/Makefile
==================
0d4e67d;Travis Oliphant;2010-01-15 23:46:54 +0000;Remove un-necessary import.

==

numpy/fft/fftpack.py
==================
aca1168;Travis Oliphant;2010-01-15 19:15:26 +0000;Fix test related to bug-fix in array creation from a buffer when offset is provided.

==

numpy/core/tests/test_multiarray.py
==================
09e27ba;Jarrod Millman;2010-01-15 19:11:56 +0000;missed a few links

==

doc/numpy.scipy.org/theme/scipy/index.html
==================
ffaffbc;Jarrod Millman;2010-01-15 19:03:10 +0000;fixed broken links

==

doc/numpy.scipy.org/theme/scipy/index.html
==================
f19b0ec;Aaron River;2010-01-15 02:02:30 +0000;_

==

TEST_COMMIT
==================
a2ad527;Aaron River;2010-01-15 01:57:56 +0000;_

==

TEST_COMMIT
==================
5d9de70;Aaron River;2010-01-15 01:51:02 +0000;_

==

TEST_COMMIT
==================
3cd8b8c;Aaron River;2010-01-15 01:00:20 +0000;_

==

TEST_COMMIT
==================
c8b89c2;Aaron River;2010-01-15 00:56:25 +0000;_

==

TEST_COMMIT
==================
3421f53;Aaron River;2010-01-15 00:44:22 +0000;_

==

TEST_COMMIT
==================
5315c0f;Aaron River;2010-01-15 00:43:36 +0000;_

==

TEST_COMMIT
==================
3341745;Aaron River;2010-01-15 00:43:18 +0000;

==

TEST_COMMIT
==================
bf8608c;Aaron River;2010-01-15 00:41:42 +0000;ariver: 2010-01-14 18:41:12

==

TEST_COMMIT
==================
90e2975;Aaron River;2010-01-15 00:37:20 +0000;ariver:20100114183627

==

TEST_COMMIT
==================
9dda3b0;nobody;2010-01-15 00:33:35 +0000;

==

TEST_COMMIT
==================
137d9e5;Travis Oliphant;2010-01-15 00:05:17 +0000;Fix math adding offset to the calculation of memory needed.

==

numpy/core/src/multiarray/arrayobject.c
==================
5aa1223;Travis Oliphant;2010-01-14 23:03:56 +0000;Make sure and account for offset in test of whether or not an array can be created from the available buffer.

==

numpy/core/src/multiarray/arrayobject.c
==================
5efba97;pierregm;2010-01-12 21:07:07 +0000;* fix methods using axis when the mask is nomask (from 1.4.x r8041)

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
d24bb94;pierregm;2010-01-06 08:38:14 +0000;* Switch the order of optional parameters in ma.argsort for compatibiity w/ np.argsort (bug #1349)

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
4717bd0;Paul Ivanov;2009-12-30 18:47:20 +0000;small doctest fixes

==

numpy/doc/misc.py
==================
79939bd;Jarrod Millman;2009-12-29 20:37:26 +0000;make master TOC page

==

doc/numpy.scipy.org/source/content.rst
==================
7894a07;Jarrod Millman;2009-12-29 20:24:10 +0000;adding scipy icon bar to top of the page

==

doc/numpy.scipy.org/source/_static/favicon.ico
doc/numpy.scipy.org/source/_static/images/bugs.png
doc/numpy.scipy.org/source/_static/images/documentation.png
doc/numpy.scipy.org/source/_static/images/download.png
doc/numpy.scipy.org/source/_static/images/feed-icon.png
doc/numpy.scipy.org/source/_static/images/tutorial.png
doc/numpy.scipy.org/source/conf.py
doc/numpy.scipy.org/theme/scipy/index.html
==================
218a9a0;madhusudancs;2009-12-29 20:07:19 +0000;Added div to center align the ohloh stats.

==

doc/numpy.scipy.org/theme/scipy/index.html
==================
5f6bfbe;Jarrod Millman;2009-12-29 19:30:15 +0000;forgot to check-in the main page template

==

doc/numpy.scipy.org/theme/scipy/index.html
==================
2e3634c;Jarrod Millman;2009-12-29 19:26:27 +0000;converting the main page from rest to an html template and add ohloh link

==

doc/numpy.scipy.org/source/conf.py
doc/numpy.scipy.org/source/content.rst
doc/numpy.scipy.org/source/index.rst
doc/numpy.scipy.org/theme/scipy/layout.html
==================
0fef6e7;Matthew Brett;2009-12-29 16:54:26 +0000;FIX - allow doctest tester to parse config before being replaced by NumpyDocTest

==

numpy/testing/noseclasses.py
numpy/testing/nosetester.py
==================
e4f233e;Paul Ivanov;2009-12-28 20:49:52 +0000;fixed a whole bunch of doctests

==

numpy/__init__.py
numpy/add_newdocs.py
numpy/core/arrayprint.py
numpy/core/defchararray.py
numpy/core/fromnumeric.py
numpy/core/function_base.py
numpy/core/numeric.py
numpy/core/records.py
numpy/ctypeslib.py
numpy/distutils/misc_util.py
numpy/distutils/system_info.py
numpy/doc/__init__.py
numpy/doc/basics.py
numpy/doc/constants.py
numpy/doc/glossary.py
numpy/doc/indexing.py
numpy/doc/misc.py
numpy/doc/structured_arrays.py
numpy/doc/ufuncs.py
numpy/fft/fftpack.py
numpy/lib/function_base.py
numpy/lib/index_tricks.py
numpy/lib/io.py
numpy/lib/polynomial.py
numpy/lib/recfunctions.py
numpy/lib/shape_base.py
numpy/lib/tests/test_format.py
numpy/lib/twodim_base.py
numpy/lib/type_check.py
numpy/lib/ufunclike.py
numpy/lib/utils.py
numpy/matlib.py
numpy/matrixlib/defmatrix.py
numpy/testing/noseclasses.py
numpy/testing/utils.py
==================
5ba0199;Matthew Brett;2009-12-22 15:50:09 +0000;ENH - added matrix_rank function to linalg

==

numpy/linalg/linalg.py
numpy/linalg/tests/test_linalg.py
==================
55ab10c;pierregm;2009-12-19 20:08:16 +0000;* make sure mvoid.tolist returns standard Python objects

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
e700c55;Charles Harris;2009-12-19 06:38:53 +0000;STY: Indentation, break lines, replace 1 by METH_VARARGS, whitespace.

==

numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/flagsobject.c
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarray_tests.c.src
numpy/core/src/multiarray/multiarraymodule.c
==================
f084695;Charles Harris;2009-12-19 03:15:52 +0000;BUG: Minimal fix for ticket #1339.

==

numpy/core/src/multiarray/scalartypes.c.src
==================
043d56b;Charles Harris;2009-12-19 02:45:29 +0000;STY,DOC: Use macro METH_VARARGS everywhere. Break some lines for easy reading. Add some notes.

==

numpy/core/src/multiarray/scalartypes.c.src
==================
f8f753b;pierregm;2009-12-18 22:13:33 +0000;* Force _fill_value to a 0d array (so that field values can be propagated, bug #1332) * Make .fill_value return a scalar (int, float, void...) and not a 0d array

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
2e28be8;pierregm;2009-12-18 15:35:08 +0000;* fix .tolist() for mvoid objects (bug #1330)

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
bc2232b;pierregm;2009-12-18 04:49:20 +0000;* Add support for `fill_value` to mvoid * Simplify mvoid._get_data * Simplify MaskedArray.tolist and add support for individually masked fields (bug #1330)

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
f6f1c82;pierregm;2009-12-17 21:15:05 +0000;* added log2 * removed the global np.seterr * prevented warnings to be emitted with ma.ufuncs * introduced mvoid to help the iteration/item access of masked structured arrays

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
6938cc0;mdroe;2009-12-15 19:12:31 +0000;Don't segfault if file reading is somehow faulty

==

numpy/core/src/multiarray/ctors.c
==================
effa092;Travis Oliphant;2009-12-15 12:35:59 +0000;Add ability to set date-times with integers and strings.

==

numpy/core/src/multiarray/arraytypes.c.src
==================
c26b303;David Cournapeau;2009-12-14 04:46:09 +0000;STY+BUG: fix unused and unitialized variable.

==

numpy/core/src/npymath/ieee754.c.src
==================
67be054;David Cournapeau;2009-12-14 04:44:47 +0000;BUG: fix bug failure on big endian arch on Darwin.
The macros were not updated accordingly for the 16 bytes aligned BE 8 bytes
double with the recent changes for bit twiddling with long double.

==

numpy/core/src/npymath/npy_math_private.h
==================
b5e472e;David Cournapeau;2009-12-13 11:20:55 +0000;BUG: #1329: fix spacing for large values.

==

numpy/core/src/npymath/ieee754.c.src
numpy/core/tests/test_umath.py
==================
8bde1a5;David Cournapeau;2009-12-12 11:06:54 +0000;BUG: fix escaping of pkgdir on windows.

==

numpy/distutils/npy_pkg_config.py
==================
bb07955;David Cournapeau;2009-12-12 09:16:14 +0000;BUG: fix numscons build.

==

numpy/core/SConscript
==================
bfdb22a;David Cournapeau;2009-12-12 09:15:51 +0000;BUG: fix #1273: npy-pkg-info files did not work for eggs.
We use the pkgdir variable which is automatically translate at runtime.

==

numpy/core/npymath.ini.in
numpy/core/setup.py
==================
9a32a8d;David Cournapeau;2009-12-12 09:15:23 +0000;ENH: automatically translate pkgdir in .ini file.

==

numpy/distutils/npy_pkg_config.py
==================
5053c6f;Pauli Virtanen;2009-12-10 20:04:01 +0000;BUG: use PyErr_Warn instead of WarnEx on Py2.4

==

numpy/core/src/multiarray/convert_datatype.c
==================
977e436;Pauli Virtanen;2009-12-10 19:31:29 +0000;BUG: complex cast warning should be triggered only for casts to number types

==

numpy/core/src/multiarray/convert_datatype.c
==================
794a6c4;Pauli Virtanen;2009-12-10 19:12:41 +0000;ENH: emit ComplexWarning when casting complex to real (addresses #1319)
Casting complex numbers to real discards the imaginary part, which may
be unexpected. For safety, emit a warning when this occurs.

==

doc/release/1.5.0-notes.rst
numpy/core/numeric.py
numpy/core/src/multiarray/convert_datatype.c
numpy/core/tests/test_multiarray.py
==================
8d24b14;David Cournapeau;2009-12-10 10:57:50 +0000;BUG: fix 1087, thanks to Leek for the fix.

==

numpy/distutils/fcompiler/gnu.py
==================
dcd5238;David Cournapeau;2009-12-10 08:23:14 +0000;BUG: fix numscons build.

==

numpy/lib/SConscript
numpy/numarray/SConscript
==================
f253ac2;David Cournapeau;2009-12-08 08:00:58 +0000;BUG: fix #1317, uncaught SIGFPE when doing MIN_INT32 / -1.

==

numpy/core/src/umath/loops.c.src
numpy/core/tests/test_regression.py
==================
0910a8e;David Cournapeau;2009-12-08 07:33:28 +0000;BUG: fix buggy config check for complex functions.

==

numpy/core/setup.py
==================
28be4a6;David Cournapeau;2009-12-08 07:33:15 +0000;BUG: numpy.ma set fpu exception error state to ignore all at import time.

==

numpy/ma/core.py
==================
20f3fef;pierregm;2009-12-08 03:14:37 +0000;* _iotools.LineSplitter : prevent the first and/or last empty tab-separated columns to be dropped

==

numpy/lib/_iotools.py
numpy/lib/tests/test_io.py
==================
73173cd;Pauli Virtanen;2009-12-07 22:31:54 +0000;BUG: fix test_buffer_hashlib for 64-bit systems

==

numpy/core/tests/test_regression.py
==================
801f2b2;Pauli Virtanen;2009-12-07 22:22:45 +0000;BUG: Fix bugs in complex pow (fixes #1313)
Thanks to Francesc Alted.

==

numpy/core/src/npymath/npy_math_complex.c.src
numpy/core/src/scalarmathmodule.c.src
numpy/core/tests/test_umath_complex.py
==================
37f318c;Pauli Virtanen;2009-12-07 22:22:10 +0000;BUG: make assert_equal and assert_almost_equal always display err_msg

==

numpy/testing/utils.py
==================
dfebefb;mdroe;2009-12-07 21:12:20 +0000;Cleanup r7978 (add err_msg support to assert_mask_equal

==

numpy/ma/testutils.py
==================
9fef443;pierregm;2009-12-07 20:28:09 +0000;* Bugfix #1173 and #1174 (Michael D.)

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
f5c5c6d;Charles Harris;2009-12-07 18:19:10 +0000;Remove reliance on integer division by zero returning zero.

==

numpy/polynomial/chebyshev.py
==================
4cdc1e1;Pauli Virtanen;2009-12-06 20:33:33 +0000;BUG: fix undefined symbol on Py < 2.6

==

numpy/core/src/multiarray/buffer.c
==================
577dbbd;Pauli Virtanen;2009-12-06 16:20:07 +0000;BUG: add a work-around for #1312 -- don't define bf_releasebuffer at all
The problem is that PyArg_ParseTuple("s#", ...) does not accept objects
with the new buffer interface, if they have bf_releasebuffer defined.

We now work around this by not defining bf_releasebuffer, and releasing
any info associated with the buffer interface when array or its
descriptor is deallocated.

The shape+strides information for arrays stays static due to the
refcounting lock. The format information for dtypes may change
if field names are changed on-the-fly.

XXX: dtype field name changes are not currently handled.

==

doc/Py3K.txt
numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/buffer.c
numpy/core/src/multiarray/buffer.h
numpy/core/src/multiarray/descriptor.c
numpy/core/tests/test_regression.py
==================
b860d14;Pauli Virtanen;2009-12-06 13:59:01 +0000;doc: add stub release notes

==

doc/release/1.5.0-notes.rst
==================
abf9510;Pauli Virtanen;2009-12-06 13:48:05 +0000;3K: more careful error checking in flagsobject.c:arrayflags_getitem for Unicode input

==

numpy/core/src/multiarray/flagsobject.c
==================
3033a14;Pauli Virtanen;2009-12-06 13:00:47 +0000;3K: setup.py: really fix svn_version()

==

setup.py
==================
ab391a9;Pauli Virtanen;2009-12-06 12:49:21 +0000;3K: fix setup.py:svn_version to work on Py3

==

setup.py
==================
45e1361;Pauli Virtanen;2009-12-06 12:21:46 +0000;doc: more Py3 notes

==

doc/Py3K.txt
==================
bc96ed3;Pauli Virtanen;2009-12-06 12:21:31 +0000;Mark a non-implemented test as a knownfailure

==

numpy/core/tests/test_multiarray.py
==================
03f0ace;Pauli Virtanen;2009-12-06 12:21:15 +0000;doc: update Py3K notes

==

doc/Py3K.txt
==================
5f8e254;Pauli Virtanen;2009-12-06 12:21:01 +0000;ENH: core: add tests for Unicode (or Bytes on Py3) in field names and titles

==

numpy/core/tests/test_multiarray.py
==================
6850a5c;Pauli Virtanen;2009-12-06 12:20:46 +0000;3K: core: some PyString conversion in arrayobject.c

==

numpy/core/src/multiarray/arrayobject.c
==================
be7c282;Pauli Virtanen;2009-12-06 12:20:29 +0000;core/buffer: cache format string etc. in the ndarray object

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/multiarray/buffer.c
numpy/core/src/multiarray/ctors.c
==================
c10e61e;Pauli Virtanen;2009-12-06 12:20:07 +0000;3K: fix ma/test_mrecords.py so that it does not fail in test setup on Py3K

==

numpy/ma/tests/test_mrecords.py
==================
ab88a61;Pauli Virtanen;2009-12-06 12:19:49 +0000;3K: add missing includes for NPY_SEPARATE_COMPILATION

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/buffer.c
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/datetime.c
numpy/core/src/multiarray/numpyos.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/multiarray/sequence.c
numpy/core/src/multiarray/ucsnarrow.c
numpy/core/src/private/npy_3kcompat.h
==================
b5a0fa0;Pauli Virtanen;2009-12-06 12:19:24 +0000;3K: core: make comparison between Unicode and Bytes NotImplemented, as it is in Py3K

==

numpy/core/src/multiarray/arrayobject.c
==================
fe75577;Pauli Virtanen;2009-12-06 12:19:07 +0000;3K: core: PyString conversion in convert.c

==

numpy/core/src/multiarray/convert.c
numpy/core/src/private/npy_3kcompat.h
==================
948b649;Pauli Virtanen;2009-12-06 12:18:48 +0000;3K: core: fix IO locale tests -- apparently some changes in Py3 Nose

==

numpy/core/tests/test_multiarray.py
==================
142d6d0;Pauli Virtanen;2009-12-06 12:18:33 +0000;Py3K notes: update notes Re Unicode and Pickling

==

doc/Py3K.txt
==================
9a96719;Pauli Virtanen;2009-12-06 12:18:19 +0000;3K: core: try to retain backward compatibility with Python 2 pickles
This entails using Unicode for the endian character, and accepting
Unicode data as input.

We assume the user always uses encoding='latin1' for load, if
backwards compatibility is desired!

Tests are fixed according to the above.

==

numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/methods.c
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_regression.py
==================
3edf9a2;Pauli Virtanen;2009-12-06 12:17:59 +0000;BUG: fix comparison between tuple and int in test_numerictypes.py

==

numpy/core/tests/test_numerictypes.py
==================
5c68587;Pauli Virtanen;2009-12-06 12:17:44 +0000;3K: core: make defchararray to import

==

numpy/core/defchararray.py
==================
be838de;Pauli Virtanen;2009-12-06 12:17:30 +0000;py3tool: customize 2to3 flags for some files

==

tools/py3tool.py
==================
7a78927;Pauli Virtanen;2009-12-06 12:17:17 +0000;3K: core: replace StringType in records.py by str

==

numpy/core/records.py
==================
7887a0c;Pauli Virtanen;2009-12-06 12:17:03 +0000;3K: core: stub out UCS size check on Py3 in test_unicode
Py3 str does not implement the buffer interface, so the previous way to
do the check does not work any more.  The check needs to be fixed later
on -- this commit is just to make nosetests able to import the test file.

==

numpy/core/tests/test_unicode.py
==================
5e8f66a;Pauli Virtanen;2009-12-06 12:16:48 +0000;3K: core: make type codes of typeinfo dict Unicode in arraytypes.c.src

==

numpy/core/src/multiarray/arraytypes.c.src
==================
cc0b2a0;Pauli Virtanen;2009-12-06 12:16:31 +0000;3K: core: PyString conversion in ufunc_object.c

==

numpy/core/src/umath/ufunc_object.c
==================
5cf494b;Pauli Virtanen;2009-12-06 12:16:14 +0000;3K: core: PyString conversion in multiarraymodule.c

==

numpy/core/src/multiarray/multiarraymodule.c
==================
4a33b9e;Pauli Virtanen;2009-12-06 12:15:58 +0000;3K: core: do not swallow exceptions needlessly in test_multiarray

==

numpy/core/tests/test_multiarray.py
==================
ca1241a;Pauli Virtanen;2009-12-06 12:15:42 +0000;3K: compat: add getexception to compat.py3k

==

numpy/compat/py3k.py
==================
61d0bd6;Pauli Virtanen;2009-12-06 12:15:28 +0000;3K: core: Remove 'getbuffer' and 'newbuffer' from multiarray in Py3
Py3 has the new memoryview object, which should obsolete these
functions.

==

numpy/core/numeric.py
numpy/core/src/multiarray/multiarraymodule.c
==================
a875834;Pauli Virtanen;2009-12-06 12:15:11 +0000;3K: core: remove unnecessary #warnings

==

numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/getset.c
==================
3b54de5;Pauli Virtanen;2009-12-06 12:14:49 +0000;3K: test_errstate should check floor divide, to avoid spurious fp exceptions

==

numpy/core/tests/test_errstate.py
==================
2fcf0ec;Pauli Virtanen;2009-12-06 12:14:33 +0000;3K: core: PyString conversion in ufunc_object.c

==

numpy/core/src/umath/ufunc_object.c
==================
9a079c7;Pauli Virtanen;2009-12-06 12:14:16 +0000;3K: core: bytes vs. str fixes in memmap.py

==

numpy/core/memmap.py
==================
1e6fbd0;Pauli Virtanen;2009-12-06 12:14:02 +0000;3K: core: write only bytes to files in test_multiarray.py

==

numpy/core/tests/test_multiarray.py
==================
f5aefee;Pauli Virtanen;2009-12-06 12:13:43 +0000;py3tool: skip temporary etc files

==

tools/py3tool.py
==================
6875352;Pauli Virtanen;2009-12-06 12:13:29 +0000;3K: core: everything should be Bytes in _internal.py

==

numpy/core/_internal.py
==================
de9df0a;Pauli Virtanen;2009-12-06 12:13:14 +0000;3K: core: PyString conversion in hashdescr.c

==

numpy/core/src/multiarray/hashdescr.c
==================
b3317cf;Pauli Virtanen;2009-12-06 12:12:53 +0000;3K: core: cPickle is no more, use pickle in methods.c

==

numpy/core/src/multiarray/methods.c
==================
c694f2e;Pauli Virtanen;2009-12-06 12:12:25 +0000;3K: core: PyString conversion in conversion_utils.c

==

numpy/core/src/multiarray/conversion_utils.c
==================
48ea533;Pauli Virtanen;2009-12-06 12:12:09 +0000;3K: core: PyString conversion in flagsobject.c

==

numpy/core/src/multiarray/flagsobject.c
==================
5324047;Pauli Virtanen;2009-12-06 12:11:52 +0000;3K: fix test_complex_inf_nan

==

numpy/core/tests/test_print.py
==================
fc5393f;Pauli Virtanen;2009-12-06 12:11:35 +0000;3K: core: fix a few Name and SyntaxErrors in tests

==

numpy/core/tests/test_errstate.py
numpy/core/tests/test_getlimits.py
==================
df80ae3;Pauli Virtanen;2009-12-06 12:11:18 +0000;3K: core: PyString conversion in scalartypes.c.src

==

numpy/core/src/multiarray/scalartypes.c.src
==================
b274497;Pauli Virtanen;2009-12-06 12:11:00 +0000;Add more Py3K notes

==

numpy/core/src/py3k_notes.txt
==================
a0ef94e;Pauli Virtanen;2009-12-06 12:10:42 +0000;3K: rename compat.isfile to isfileobj to avoid confusion with os.path

==

numpy/compat/py3k.py
numpy/core/records.py
numpy/lib/format.py
==================
906d21e;Pauli Virtanen;2009-12-06 12:10:23 +0000;3K: lib: some fixes to lib.format on strings vs bytes; and file objects

==

numpy/lib/format.py
==================
0e53511;Pauli Virtanen;2009-12-06 12:10:08 +0000;3K: add some compatibility tools to numpy.compat

==

numpy/compat/__init__.py
numpy/compat/py3k.py
==================
07461f2;Pauli Virtanen;2009-12-06 12:09:50 +0000;py3k_notes: some notes on PyOS

==

numpy/core/src/py3k_notes.txt
==================
55d6070;Pauli Virtanen;2009-12-06 12:09:29 +0000;3K: do not use PyOS_ascii_strtod -- it segfaults and is deprecated

==

numpy/core/src/multiarray/numpyos.c
==================
66ec680;Pauli Virtanen;2009-12-06 12:09:11 +0000;random: regenrate mtrand.c

==

numpy/random/mtrand/mtrand.c
==================
1089601;Pauli Virtanen;2009-12-06 12:08:54 +0000;3K: random: make mtrand to import

==

numpy/random/mtrand/mtrand.pyx
numpy/random/mtrand/mtrand_py_helper.h
==================
65b64fd;Pauli Virtanen;2009-12-06 12:08:35 +0000;3K: core: make umath_tests and multiarray_tests to import

==

numpy/core/src/multiarray/multiarray_tests.c.src
numpy/core/src/umath/umath_tests.c.src
==================
0bfa605;Pauli Virtanen;2009-12-06 12:08:17 +0000;3K: lib: use open instead of file

==

numpy/lib/io.py
==================
321ad25;Pauli Virtanen;2009-12-06 12:08:03 +0000;3K: polynomial: exceptions module is removed

==

numpy/polynomial/polyutils.py
==================
9854a4f;Pauli Virtanen;2009-12-06 12:07:49 +0000;3K: polynomial: Python3 friendlier template

==

numpy/polynomial/polytemplate.py
==================
3031a00;Pauli Virtanen;2009-12-06 12:07:34 +0000;3K: fft: module init for fftpack_lite

==

numpy/fft/fftpack_litemodule.c
==================
e05a075;Pauli Virtanen;2009-12-06 12:07:20 +0000;3K: linalg: module init for lapack_lite

==

numpy/linalg/lapack_litemodule.c
==================
026e0d2;Pauli Virtanen;2009-12-06 12:07:06 +0000;3K: core: work around some cyclic imports

==

numpy/core/arrayprint.py
numpy/core/numeric.py
==================
bbdeda1;Pauli Virtanen;2009-12-06 12:06:49 +0000;3K: core: include npy_config in _sort

==

numpy/core/src/_sortmodule.c.src
==================
686f1b9;Pauli Virtanen;2009-12-06 12:06:33 +0000;3K: core: type fixes in numerictypes

==

numpy/core/numerictypes.py
==================
8028e77;Pauli Virtanen;2009-12-06 12:06:15 +0000;3K: core: PyString conversion in descriptor.c
Field names are PyUString.

In Py3, fields dict contains only Unicode.

On Py2, however, still allow Bytes or Unicode titles to go in fields
dict, that all of Py2 semantics stay unchanged.

==

doc/Py3K.txt
numpy/core/src/multiarray/descriptor.c
==================
35523ea;Pauli Virtanen;2009-12-06 12:05:54 +0000;py3tool: fix some relative imports for extension modules

==

tools/py3tool.py
==================
b69609b;Pauli Virtanen;2009-12-06 12:05:41 +0000;3K: lib: make _datasource 2to3 friendly

==

numpy/lib/_datasource.py
==================
b8f1916;Pauli Virtanen;2009-12-06 12:05:26 +0000;3K: lib: module init for _compiled_base

==

numpy/lib/src/_compiled_base.c
==================
1fc4a73;Pauli Virtanen;2009-12-06 12:05:10 +0000;3K: module inits for all core modules

==

numpy/core/src/_sortmodule.c.src
numpy/core/src/multiarray/multiarray_tests.c.src
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/scalarmathmodule.c.src
numpy/core/src/umath/umath_tests.c.src
numpy/core/src/umath/umathmodule.c.src
==================
816035e;Pauli Virtanen;2009-12-06 12:04:47 +0000;core: Implement the PEP 3118 buffer protocol (exporter part)
Also, use MemoryView instead of PyBuffer for Py3.

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/buffer.c
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/conversion_utils.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/tests/test_multiarray.py
==================
795b044;Pauli Virtanen;2009-12-06 12:04:22 +0000;py3k_notes: write more notes

==

numpy/core/src/py3k_notes.txt
==================
1856a55;Pauli Virtanen;2009-12-06 12:04:06 +0000;3K: core: remove PyInstance checks on Py3 -- this may need revising later on
The PyInstance type is removed in Py3, and there is no immediate
replacement for PyInstance_Check.

This commit is just made to make Numpy to compile on Py3, and the
Instance checks may need to be fixed later on.

==

numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/ctors.c
==================
ed6b033;Pauli Virtanen;2009-12-06 12:03:49 +0000;3K: core: PyInt issue in conversion utils -> always return longs

==

numpy/core/src/multiarray/conversion_utils.c
==================
1a32ea0;Pauli Virtanen;2009-12-06 12:03:32 +0000;3K: replace divide by true_divide

==

numpy/core/code_generators/generate_umath.py
numpy/core/src/multiarray/calculation.c
numpy/core/src/umath/funcs.inc.src
numpy/core/tests/test_umath.py
==================
cfdad71;Pauli Virtanen;2009-12-06 12:03:08 +0000;3K: core: use correct functions for Unicode and Bytes repr on Py3

==

numpy/core/src/multiarray/arraytypes.c.src
==================
e767232;Pauli Virtanen;2009-12-06 12:02:50 +0000;3K: core: PyBytes, PyUnicode, PyUString compatibility defines in npy_3kcompat.h
Make PyBytes present also on Py2, add some convenience Unicode routines,
and define PyUString be PyString on Py2 and PyUnicode on Py3.

==

numpy/core/src/private/npy_3kcompat.h
==================
e6b6a34;Pauli Virtanen;2009-12-06 12:02:34 +0000;3K: core: InternString conversion in multiarraymodule.c

==

numpy/core/src/multiarray/multiarraymodule.c
==================
cd5d54b;Pauli Virtanen;2009-12-06 12:02:17 +0000;STY: core/ctors: use GetAttrString, not GetAttr

==

numpy/core/src/multiarray/ctors.c
==================
b6f2dae;Pauli Virtanen;2009-12-06 12:02:01 +0000;3K: add_newdocs: use absolute import

==

numpy/add_newdocs.py
==================
6d5ba6d;Pauli Virtanen;2009-12-06 12:01:48 +0000;3K: distutils: remove unnecessary non-ascii characters in intel.py

==

numpy/distutils/fcompiler/intel.py
==================
272ed19;Pauli Virtanen;2009-12-06 12:01:33 +0000;3K: lib: fix PyString issues in _compiled_base -- may need revising

==

numpy/lib/src/_compiled_base.c
==================
b16616a;Pauli Virtanen;2009-12-06 12:01:17 +0000;3K: numarray: replace buffer APIs by dummy+error. Some ob_types.

==

numpy/numarray/_capi.c
==================
f4d788c;Pauli Virtanen;2009-12-06 12:01:03 +0000;3K: linalg: correct init function definition for lapack_lite

==

numpy/linalg/lapack_litemodule.c
==================
7fde981;Pauli Virtanen;2009-12-06 12:00:48 +0000;3K: distutils: produce a 3K-compatible __config__.py

==

numpy/distutils/misc_util.py
==================
0e70ee6;Pauli Virtanen;2009-12-06 12:00:33 +0000;3K: core: implement and use compatibility mode for PyFile

==

numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/private/npy_3kcompat.h
==================
2649c52;Pauli Virtanen;2009-12-06 12:00:13 +0000;3K: core: handle removed tp_compare and PyObject_Compare
Also, implement tp_richcompare for flagsobject.

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/flagsobject.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/private/npy_3kcompat.h
numpy/core/src/scalarmathmodule.c.src
numpy/core/src/umath/loops.c.src
==================
a8fa66a;Pauli Virtanen;2009-12-06 11:59:50 +0000;3K: define PyStringObject as PyBytesObject

==

numpy/core/src/private/npy_3kcompat.h
==================
95dd74d;Pauli Virtanen;2009-12-06 11:59:33 +0000;3K: write READONLY, not RO

==

numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/iterators.c
==================
26c2727;Pauli Virtanen;2009-12-06 11:59:16 +0000;3K: bytes are never interned

==

numpy/core/src/multiarray/scalarapi.c
==================
8e7b7b9;Pauli Virtanen;2009-12-06 11:58:59 +0000;3K: Py_TPFLAGS_CHECKTYPES is always on in Py3K

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/scalartypes.c.src
==================
0a9e563;Pauli Virtanen;2009-12-06 11:58:40 +0000;3K: core: adapt to changes in PyNumberMethods
Some entries were removed in Py3K -- easy to adapt to.

==

numpy/core/src/multiarray/conversion_utils.c
numpy/core/src/multiarray/number.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/scalarmathmodule.c.src
==================
e96f9e9;Pauli Virtanen;2009-12-06 11:58:19 +0000;3K: take care of changes in ob_* introduced by :pep:`3123`

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/calculation.c
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/conversion_utils.c
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/flagsobject.c
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/number.c
numpy/core/src/multiarray/scalarapi.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/multiarray/sequence.c
numpy/core/src/multiarray/shape.c
numpy/core/src/private/npy_3kcompat.h
numpy/core/src/umath/ufunc_object.c
==================
aa7be88;Pauli Virtanen;2009-12-06 11:57:36 +0000;3K: handle most PyInt_ issues in multiarray.
Do *not* inherit PyIntArrType from PyLong on Py3 -- the is not
fixed-range and the internal representations are quite different.
Not inheriting is, in fact, what was already done on Py2 on platforms
where the sizes didn't match.

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/multiarraymodule.c
==================
5bebeb3;Pauli Virtanen;2009-12-06 11:57:16 +0000;3K: compatibility wrappers for PyInt->PyLong and PyString->PyBytes
We don't redefine PyInt_Type -> PyLong_Type, since the two are very
different -- one is fixed-size and the other is not.

==

numpy/core/src/multiarray/calculation.c
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/conversion_utils.c
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/flagsobject.c
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/hashdescr.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/number.c
numpy/core/src/multiarray/refcount.c
numpy/core/src/multiarray/scalarapi.c
numpy/core/src/multiarray/shape.c
numpy/core/src/multiarray/usertypes.c
numpy/core/src/private/npy_3kcompat.h
==================
f755093;Pauli Virtanen;2009-12-06 11:56:33 +0000;3K: core: add NPY_PY3K to config.h

==

numpy/core/setup.py
==================
6815943;Pauli Virtanen;2009-12-06 11:56:18 +0000;3K: make setup.py call 2to3 automatically -- place sources to build/py3k

==

setup.py
tools/py3tool.py
==================
4a3fd1f;Pauli Virtanen;2009-12-06 11:56:03 +0000;3K: distutils: ordering between None and str is undefined in Py3K, so fcompiler should raise CompilerNotFound when version is undefined

==

numpy/distutils/fcompiler/__init__.py
==================
fe56232;Pauli Virtanen;2009-12-06 11:55:47 +0000;3K: encode str to bytes before writing in distutils/tests

==

numpy/distutils/tests/test_npy_pkg_config.py
==================
00e4fd3;Pauli Virtanen;2009-12-06 11:55:28 +0000;3K: distutils: there is no types.InstanceType in Py3, so don't use it

==

numpy/distutils/fcompiler/__init__.py
==================
33867b6;Pauli Virtanen;2009-12-06 11:55:12 +0000;3K: testing: clean up syntax that confused 2to3

==

numpy/testing/numpytest.py
==================
c0c266e;Travis Oliphant;2009-12-04 13:22:24 +0000;Fix tests now that ufuncs raise NotImplementedError.

==

numpy/testing/utils.py
==================
914c498;Travis Oliphant;2009-12-04 12:50:12 +0000;Fix #1175 by only returning NotImplemented in the special case of a 2-input and 1-output ufunc.  Otherwise, a NotImplemented error is raised.

==

numpy/core/src/umath/ufunc_object.c
==================
e2fbec1;David Cournapeau;2009-12-04 05:13:59 +0000;DOC: point out the documention for neighborhood iterator in the 1.4.0 release notes.

==

doc/release/1.4.0-notes.rst
==================
667e611;David Cournapeau;2009-12-04 05:10:37 +0000;BUG: icc 11 requires complex double, complex alone is not enough to define a C99 complex number.

==

numpy/core/src/npymath/npy_math_private.h
==================
ed8c906;Charles Harris;2009-12-04 02:26:09 +0000;WHT: Remove trailing whitespace.

==

numpy/core/src/umath/ufunc_object.c
==================
c355e71;Travis Oliphant;2009-12-04 00:00:22 +0000;BUG: Fix #1254 which allowed duplicate name and title entries.

==

numpy/core/src/multiarray/descriptor.c
numpy/core/tests/test_regression.py
==================
e399c7a;Travis Oliphant;2009-12-03 22:16:01 +0000;Fix multi-line comments.

==

numpy/core/src/umath/ufunc_object.c
==================
b443d6c;Travis Oliphant;2009-12-03 22:11:28 +0000;OTH: Fix typo and continuation line characters.

==

numpy/core/src/umath/ufunc_object.c
==================
85995f9;Travis Oliphant;2009-12-03 21:13:01 +0000;Port the fix of the memory-leak reported in #1222 to the trunk.

==

numpy/core/src/umath/ufunc_object.c
==================
b8ceb06;David Cournapeau;2009-12-03 16:04:38 +0000;Fix code_generator for python 3 -> python2.4 and python 3.1 build_src both run and produce same .c code .

==

numpy/core/code_generators/generate_umath.py
==================
d3cf1d8;David Cournapeau;2009-12-03 16:04:22 +0000;Py3k: fix dict sorting in code generator.

==

numpy/core/code_generators/genapi.py
numpy/core/code_generators/generate_umath.py
==================
54d51ba;David Cournapeau;2009-12-03 16:03:57 +0000;Py3k: add a py3k version of pyod.

==

numpy/core/setup_common.py
==================
f7dd257;David Cournapeau;2009-12-03 16:03:38 +0000;Py3k: handle relative import in ccompiler.

==

numpy/distutils/ccompiler.py
==================
944bb9f;David Cournapeau;2009-12-03 16:03:17 +0000;remove has_key from config.

==

numpy/distutils/command/config.py
==================
90e79bd;David Cournapeau;2009-12-03 16:03:01 +0000;Py3k: Fix comparison when version is None.

==

numpy/distutils/fcompiler/gnu.py
==================
6603acb;David Cournapeau;2009-12-03 16:02:43 +0000;Fix version comparison when version is None.

==

numpy/distutils/fcompiler/nag.py
==================
8a0ae9f;David Cournapeau;2009-12-03 16:02:23 +0000;BUG: fix mixed tab/space indentation.

==

numpy/distutils/fcompiler/gnu.py
==================
b60735c;David Cournapeau;2009-12-03 16:02:04 +0000;Py3k: make fcompiler.compaq py3k-importable.

==

numpy/distutils/fcompiler/compaq.py
==================
6ab5f37;David Cournapeau;2009-12-03 16:01:47 +0000;Py3k: make cpuinfo py3k-importable.

==

numpy/distutils/cpuinfo.py
==================
b072669;David Cournapeau;2009-12-03 16:01:31 +0000;Fix some more issues for ccompiler: string module obsolete.

==

numpy/distutils/ccompiler.py
==================
652cc7c;David Cournapeau;2009-12-03 16:01:06 +0000;Fix callable in build_src command.

==

numpy/distutils/command/build_src.py
==================
d011d92;David Cournapeau;2009-12-03 16:00:49 +0000;Make linalg setup.py runnable under python3.

==

numpy/linalg/setup.py
==================
efadf0d;David Cournapeau;2009-12-03 16:00:30 +0000;Do no use has_key in misc_utils.

==

numpy/distutils/misc_util.py
==================
5863ddf;David Cournapeau;2009-12-03 16:00:14 +0000;Make genapi runnable under python3.

==

numpy/core/code_generators/genapi.py
==================
e09b667;David Cournapeau;2009-12-03 15:59:56 +0000;BUG: fix system_info broken by py3k changes.

==

numpy/distutils/system_info.py
==================
c121f74;David Cournapeau;2009-12-03 15:59:39 +0000;Py3k: make core setup.py py3k-importable.

==

numpy/core/code_generators/generate_umath.py
numpy/core/setup.py
==================
08ec797;David Cournapeau;2009-12-03 15:59:19 +0000;Make f2py setup.py runnable under python3.

==

numpy/f2py/setup.py
==================
ffce47a;David Cournapeau;2009-12-03 15:59:00 +0000;Fix callable in misc_utils.

==

numpy/distutils/misc_util.py
==================
6914ea4;David Cournapeau;2009-12-03 15:58:39 +0000;python3 changes function object attributes names.

==

numpy/distutils/misc_util.py
==================
b1b6e58;David Cournapeau;2009-12-03 15:58:18 +0000;Fix print statements in numpy.distutils.environment

==

numpy/distutils/environment.py
numpy/setup.py
==================
c8d45a0;David Cournapeau;2009-12-03 15:58:04 +0000;Py3k: make fcompiler module py3k-importable.

==

numpy/distutils/fcompiler/__init__.py
==================
bee85b2;David Cournapeau;2009-12-03 15:57:50 +0000;Fix print statements in fcompiler for python3.

==

numpy/distutils/fcompiler/__init__.py
numpy/distutils/fcompiler/absoft.py
numpy/distutils/fcompiler/compaq.py
numpy/distutils/fcompiler/g95.py
numpy/distutils/fcompiler/gnu.py
numpy/distutils/fcompiler/hpux.py
numpy/distutils/fcompiler/ibm.py
numpy/distutils/fcompiler/intel.py
numpy/distutils/fcompiler/lahey.py
numpy/distutils/fcompiler/mips.py
numpy/distutils/fcompiler/nag.py
numpy/distutils/fcompiler/none.py
numpy/distutils/fcompiler/pg.py
numpy/distutils/fcompiler/sun.py
numpy/distutils/fcompiler/vast.py
==================
d4b6101;David Cournapeau;2009-12-03 15:57:19 +0000;Py3k: make scons command py3k importable.

==

numpy/distutils/command/scons.py
==================
8a1ba33;David Cournapeau;2009-12-03 15:57:03 +0000;Py3k: make template generators py3k importable.

==

numpy/distutils/conv_template.py
numpy/distutils/from_template.py
==================
cf934f7;David Cournapeau;2009-12-03 15:56:47 +0000;Make build_src and build_clib python3 importable.

==

numpy/distutils/command/build_clib.py
numpy/distutils/command/build_src.py
==================
2b2872b;David Cournapeau;2009-12-03 15:56:32 +0000;Py3k: make system_info importable from py3k.

==

numpy/distutils/system_info.py
==================
b3f8643;David Cournapeau;2009-12-03 15:56:15 +0000;Fix print/repr/raise python3 incompatibilities in system_info and build_ext command.

==

numpy/distutils/command/build_ext.py
numpy/distutils/system_info.py
==================
271cfcf;David Cournapeau;2009-12-03 15:55:59 +0000;Py3k: make mingw32compiler module py3k importable.

==

numpy/distutils/mingw32ccompiler.py
==================
ee27e9b;David Cournapeau;2009-12-03 15:55:45 +0000;Py3k: make config command py3k importable.

==

numpy/distutils/command/config.py
==================
a3ac1f3;David Cournapeau;2009-12-03 15:55:29 +0000;Py3k: fix unixccompiler + exec_command exception/print stmts.

==

numpy/distutils/exec_command.py
numpy/distutils/npy_pkg_config.py
numpy/distutils/unixccompiler.py
==================
edb13fa;David Cournapeau;2009-12-03 15:55:14 +0000;numpy.distutils.core importable from py3.

==

numpy/distutils/core.py
==================
c85421c;David Cournapeau;2009-12-03 15:55:01 +0000;Py3k fix for misc_util.

==

numpy/distutils/misc_util.py
==================
36dae69;David Cournapeau;2009-12-03 15:54:47 +0000;Make numpy.distutils.log importable from python3.

==

numpy/distutils/log.py
==================
ead0426;David Cournapeau;2009-12-03 15:54:32 +0000;Fix raise + print stmts in ccompiler.

==

numpy/distutils/ccompiler.py
numpy/distutils/compat.py
==================
26e1d7f;David Cournapeau;2009-12-03 15:54:11 +0000;Make top numpy __init__ importable from python3.

==

numpy/__init__.py
==================
ccdfafc;David Cournapeau;2009-12-03 15:53:50 +0000;Fix relative import in top numpy.distutils.

==

numpy/distutils/__init__.py
==================
2b51769;David Cournapeau;2009-12-03 15:53:29 +0000;Fix __builtin__ import for python3 at top setup.py.

==

setup.py
==================
541798c;Travis Oliphant;2009-12-03 03:34:01 +0000;Clean-up PyArray_EnsureArray so there is one return point.

==

numpy/core/src/multiarray/ctors.c
==================
2f300ed;Travis Oliphant;2009-12-03 03:20:56 +0000;Push memory-leak fix to trunk.

==

numpy/core/src/multiarray/ctors.c
==================
fd0866f;Travis Oliphant;2009-12-02 22:07:16 +0000;Fix Ticket #1108 by initializing correctly the block of data corresponding to the identity for the ufunc used during reduceat with a buffer.

==

numpy/core/src/umath/ufunc_object.c
==================
b3f63a2;Travis Oliphant;2009-12-02 21:34:19 +0000;Port the fix for #1299 to the trunk and change trunk version to 1.5

==

numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/scalarapi.c
setup.py
==================
49d9ff4;Travis Oliphant;2009-12-02 21:25:58 +0000;TST: Add regression test for Ticket #1299 and clean-up test for non-buffered structured array bug.

==

numpy/core/tests/test_regression.py
numpy/core/tests/test_umath.py
==================
55f0dfc;David Cournapeau;2009-11-30 17:35:24 +0000;REL: generate both 2.5 and 2.6 win and mac os x installers in release script.

==

release.sh
==================
453172f;David Cournapeau;2009-11-30 17:35:08 +0000;REL: fix atlas detection for SSE2/SSE3 wininst.

==

pavement.py
==================
d4d3480;David Cournapeau;2009-11-30 17:34:56 +0000;REL: re-enable SSE2 binary in the superpack.

==

pavement.py
tools/win32build/nsis_scripts/numpy-superinstaller.nsi.in
==================
e0abf3b;David Cournapeau;2009-11-30 17:34:36 +0000;REL: fix dmg name and dmg build.

==

pavement.py
==================
cc8c533;David Cournapeau;2009-11-30 17:34:22 +0000;Use gcc-4.0 for python 2.5, to avoid using gcc 4.2 on Snow Leopard.

==

pavement.py
==================
42cd0d8;David Cournapeau;2009-11-29 14:30:11 +0000;BUG: fix numscons build, missing subst in _numpyconfig.h

==

numpy/core/SConscript
==================
99b4f78;Charles Harris;2009-11-28 19:43:38 +0000;BUG: Fix extra declaration of _datetime_strings in descriptor.h when not doing separate compilations. It fails for vs2009 compiliation.

==

numpy/core/src/multiarray/descriptor.h
==================
db2d4b5;Charles Harris;2009-11-28 19:43:32 +0000;Small cleanups in polynomial modules.

==

numpy/polynomial/polyutils.py
numpy/polynomial/tests/test_chebyshev.py
numpy/polynomial/tests/test_polynomial.py
==================
f9d1cd5;Charles Harris;2009-11-28 19:43:25 +0000;Fix documentation of array.

==

numpy/add_newdocs.py
==================
ae8a70e;David Cournapeau;2009-11-27 19:02:03 +0000;BUG: do not redefine SIZEOF_LONG in config.h if already defined in python headers.

==

numpy/core/SConscript
==================
f962cfd;David Cournapeau;2009-11-27 19:01:21 +0000;BUG: fix arch-dependent SIZEOF in npy_config.h for mac os x.

==

numpy/core/src/private/npy_config.h
==================
4e632a3;David Cournapeau;2009-11-27 19:00:34 +0000;ENH: add a guard to ensure config.h is never included directly.

==

numpy/core/SConscript
numpy/core/setup.py
==================
17e51af;David Cournapeau;2009-11-27 18:59:55 +0000;BUG: (#1221) special case mac os x in numpyconfig.h
Universal builds break the configure stage: we have to harcode the
arch-specific values in the case of mac os x, as we have only one configuration
stage per compile, but several arch per compile with the braindead -arch
machinery.

We rename the old numpyconfig.h to a private header, and numpyconfig.h itself
post-fix the values in the case of mac os x.

==

numpy/core/SConscript
numpy/core/include/numpy/_numpyconfig.h.in
numpy/core/include/numpy/numpyconfig.h
numpy/core/include/numpy/numpyconfig.h.in
numpy/core/setup.py
numpy/distutils/misc_util.py
==================
9ff1e77;David Cournapeau;2009-11-27 18:58:30 +0000;BUG: import DistutilsError.

==

numpy/distutils/misc_util.py
==================
a783074;David Cournapeau;2009-11-27 10:23:31 +0000;TST: add a regression test for #1081 (not fixed yet).

==

numpy/core/tests/test_regression.py
==================
2d4edf2;David Cournapeau;2009-11-27 09:46:18 +0000;BUG: (#1078): fix segfault when creating arrays with a sequence which contains 0d array.

==

numpy/core/src/multiarray/ctors.c
numpy/core/tests/test_regression.py
==================
131ac69;David Cournapeau;2009-11-26 06:12:12 +0000;DOC: there is no acorrelate function.

==

doc/source/reference/routines.statistics.rst
==================
6dce852;David Cournapeau;2009-11-26 06:11:58 +0000;BUG: fix md5 import for python 2.6 in paver file.

==

pavement.py
==================
58f7277;David Cournapeau;2009-11-26 05:34:52 +0000;BUG: forgot to update the C_API_VERSION as well.

==

numpy/core/setup_common.py
==================
35a5f80;David Cournapeau;2009-11-26 05:31:22 +0000;ENH: add version 4 checksum of the C API (numpy 1.4.0).

==

numpy/core/code_generators/cversions.txt
==================
ec8c09a;David Cournapeau;2009-11-25 02:42:43 +0000;BUG: fix wrong declaration of _datetime_strings.

==

numpy/core/src/multiarray/descriptor.h
==================
39da923;David Cournapeau;2009-11-25 02:27:30 +0000;BUG: declare _datetime_strings and mark its definition as a private symbol so that separate compilation works.

==

numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/descriptor.h
==================
eeed9fa;David Cournapeau;2009-11-25 02:27:13 +0000;BUG: the _arg ufunc declaration was accidentaly removed in a previous commit, breaking the separate compilation mode.

==

numpy/core/src/umath/loops.h
numpy/core/src/umath/loops.h.src
==================
9d658f9;Travis Oliphant;2009-11-23 22:01:54 +0000;numpy.datetime --> numpy.datetime_ and fix Descr_FromScalar to correctly add DateTime Meta data.

==

doc/neps/datetime-proposal.rst
numpy/core/numerictypes.py
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/scalarapi.c
==================
df1edd4;mdroe;2009-11-23 17:32:48 +0000;Remove extra comma in enum for C89 and C++ compatibility.

==

numpy/core/include/numpy/ndarrayobject.h
==================
d857eaf;David Cournapeau;2009-11-23 10:09:34 +0000;BUG: fix 2.5 >= try/except/finally.

==

numpy/testing/tests/test_utils.py
==================
5623023;David Cournapeau;2009-11-23 09:28:16 +0000;TST: use assert_warns to check for warnings (and to avoid cluttering non-verbose test output).

==

numpy/lib/tests/test_io.py
==================
7277495;David Cournapeau;2009-11-23 09:28:02 +0000;ENH: add an assert_warns testing utility.

==

doc/release/1.4.0-notes.rst
doc/source/reference/routines.testing.rst
numpy/testing/tests/test_utils.py
numpy/testing/utils.py
==================
d930631;David Cournapeau;2009-11-23 09:27:40 +0000;REF: move warning context manager into utils.

==

numpy/testing/decorators.py
numpy/testing/utils.py
==================
734123b;David Cournapeau;2009-11-23 09:27:26 +0000;TST: mark spacing/nextafter long double versions tests as known failures on win32.

==

numpy/core/tests/test_umath.py
==================
3dd4442;David Cournapeau;2009-11-22 15:25:50 +0000;TST: use different tests for each precision for spacing and nextafter.

==

numpy/core/tests/test_umath.py
==================
b7daa99;David Cournapeau;2009-11-22 12:47:39 +0000;ENH: add release script.

==

release.sh
==================
a898a83;David Cournapeau;2009-11-22 12:47:14 +0000;REL: only build nosse and sse3 binaries.

==

tools/win32build/nsis_scripts/numpy-superinstaller.nsi.in
==================
b4fbc59;David Cournapeau;2009-11-22 12:46:30 +0000;REL: add the scripts and art for the mac os x dmg.

==

tools/numpy-macosx-installer/README.txt
tools/numpy-macosx-installer/art/dmgbackground.png
tools/numpy-macosx-installer/art/dmgbackground.svg
tools/numpy-macosx-installer/dmgbackground.png
tools/numpy-macosx-installer/new-create-dmg
==================
7b2d3ba;David Cournapeau;2009-11-22 12:43:46 +0000;REL: new, better paver file.

==

pavement.py
==================
b4f8890;David Cournapeau;2009-11-22 07:34:08 +0000;BUG: disable atan2 when built with mingw, as it uses the buggy MS atan2.

==

numpy/core/src/private/npy_config.h
==================
9d8b3dc;David Cournapeau;2009-11-22 07:33:34 +0000;TST: use 'real' test instead of generator for atan2 and hypot special values.
It makes debugging test failures easier/

==

numpy/core/tests/test_umath.py
==================
5912316;David Cournapeau;2009-11-20 18:24:02 +0000;BUG: scons build was not updated to handle polynomial.

==

numpy/setupscons.py
==================
a6e1cbe;David Cournapeau;2009-11-20 11:26:06 +0000;BUG: check for IEEE754 macro on python >= 2.6.

==

numpy/core/setup.py
==================
5622ac5;David Cournapeau;2009-11-20 09:33:25 +0000;DOC: fix wrong Example section.

==

numpy/distutils/misc_util.py
==================
e089fe8;Travis Oliphant;2009-11-20 00:00:42 +0000;Fix and test conversion and construction of date-time dtypes.

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_datetime.py
numpy/lib/type_check.py
==================
d9f28a0;Pauli Virtanen;2009-11-19 22:58:53 +0000;doc: rewrite latex-offending markup

==

doc/source/user/basics.io.genfromtxt.rst
==================
6ac92a8;Travis Oliphant;2009-11-19 18:12:16 +0000;Add function to get datetime information from a date-time dtype.

==

numpy/lib/type_check.py
==================
b0e32f4;Travis Oliphant;2009-11-19 16:38:09 +0000;Add comparison of datetime dtype objects that compares units correctly and add new metadata for new datetime dtypes.

==

numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/multiarraymodule.c
==================
0edcfff;Travis Oliphant;2009-11-19 15:59:46 +0000;Fix problem in divisor conversion for datetime construction and fix formating of datetime nep.

==

doc/neps/datetime-proposal.rst
numpy/core/src/multiarray/descriptor.c
==================
d4d65a3;Ilan Schnell;2009-11-19 01:24:13 +0000;updating manifest such that python setup.py sdist produces a tarball from which one can build

==

MANIFEST.in
==================
71c4ff9;David Cournapeau;2009-11-16 10:02:13 +0000;ENH: update version for paver script.

==

pavement.py
==================
09a0a0a;David Cournapeau;2009-11-16 10:01:51 +0000;ENH: fix paver script for wine-built simple wininst installer.

==

pavement.py
==================
faafd31;pierregm;2009-11-16 08:26:08 +0000;* fixed a pb when using sum/prod on an array with dtype np.object

==

numpy/ma/core.py
numpy/ma/mrecords.py
numpy/ma/tests/test_core.py
==================
ed56288;David Cournapeau;2009-11-16 06:19:41 +0000;BUG: retrieve build_clib in build_ext even if it has already been run.

==

numpy/distutils/command/build_ext.py
==================
de2d495;David Cournapeau;2009-11-16 05:59:59 +0000;BUG: check for compiler in get_mathlib_info, as this may be executed first.

==

numpy/core/setup.py
==================
aa7ab26;Charles Harris;2009-11-15 02:42:03 +0000;Add any function for python < 2.5.

==

numpy/polynomial/polyutils.py
==================
7d5b7eb;Charles Harris;2009-11-15 01:56:45 +0000;More fixes to least squares method documentation in Polynomial and Chebyshev.

==

numpy/polynomial/polytemplate.py
==================
c001565;Charles Harris;2009-11-15 01:31:25 +0000;Improve documention of the fit method of the Cheybshev and Polynomial classes.

==

numpy/polynomial/polytemplate.py
==================
9e082de;Charles Harris;2009-11-14 22:54:45 +0000;Mention the new polynomial and chebyshev modules in the release notes.

==

doc/release/1.4.0-notes.rst
==================
9211df9;Charles Harris;2009-11-14 22:30:39 +0000;Add support for chebyshev series and polynomials.
New modules chebyshev and polynomial are added. The new polynomial module
is not compatible with the current polynomial support in numpy, but is much
like the new chebyshev module. The most noticeable difference to most will
be that coefficients are specified from low to high power, that the low
level functions do *not* accept the Chebyshev and Polynomial classes as
arguements, and that the Chebyshev and Polynomial classes include a domain.
Mapping between domains is a linear substitution and the two classes can be
converted one to the other, allowing, for instance, a Chebyshev series in
one domain to be expanded as a polynomial in another domain.

The new modules are not automatically imported into the numpy namespace,
they must be explicitly brought in with a "import numpy.polynomial"
statement.

==

numpy/__init__.py
numpy/polynomial/__init__.py
numpy/polynomial/chebyshev.py
numpy/polynomial/polynomial.py
numpy/polynomial/polytemplate.py
numpy/polynomial/polyutils.py
numpy/polynomial/setup.py
numpy/polynomial/tests/test_chebyshev.py
numpy/polynomial/tests/test_polynomial.py
numpy/polynomial/tests/test_polyutils.py
numpy/setup.py
==================
b8b7c96;Pauli Virtanen;2009-11-14 15:04:01 +0000;Fix misformatted see also section

==

numpy/add_newdocs.py
==================
5a0e756;Pauli Virtanen;2009-11-14 15:03:39 +0000;sphinxext: fix a small bug in docscrape

==

doc/sphinxext/docscrape_sphinx.py
==================
d699777;Pauli Virtanen;2009-11-13 19:18:10 +0000;BUG: use %g format in assert_array_*_nulp (fix #1297, thanks to Neil Muller)

==

numpy/testing/utils.py
==================
9d48a39;Pauli Virtanen;2009-11-13 18:42:21 +0000;sphinxext: add numpydoc_show_class_members option (from Michael Droettboom)

==

doc/sphinxext/README.txt
doc/sphinxext/docscrape.py
doc/sphinxext/docscrape_sphinx.py
doc/sphinxext/numpydoc.py
doc/sphinxext/tests/test_docscrape.py
doc/sphinxext/traitsdoc.py
==================
66313a3;mdroe;2009-11-13 18:08:03 +0000;#1201, #1202, #1203: Fix arctan2 regression failures on Solaris by using the in-built atan2 implementation on that platform

==

numpy/core/src/private/npy_config.h
==================
98e4a9c;mdroe;2009-11-13 18:05:26 +0000;Another attempt at a truly cross-platform nextafterl implementation

==

numpy/core/src/npymath/ieee754.c.src
numpy/core/src/npymath/npy_math_private.h
==================
6e91f0f;Jarrod Millman;2009-11-13 17:50:02 +0000;second set of checkins from doc editor

==

doc/source/reference/arrays.classes.rst
doc/source/reference/arrays.ndarray.rst
doc/source/reference/c-api.array.rst
doc/source/reference/distutils.rst
doc/source/reference/routines.math.rst
doc/source/reference/ufuncs.rst
doc/source/user/index.rst
doc/source/user/whatisnumpy.rst
numpy/add_newdocs.py
numpy/core/code_generators/ufunc_docstrings.py
==================
f07c79d;Jarrod Millman;2009-11-13 17:49:06 +0000;first set of checkins from the doc editor

==

numpy/compat/__init__.py
numpy/core/arrayprint.py
numpy/core/defchararray.py
numpy/core/fromnumeric.py
numpy/core/memmap.py
numpy/core/numeric.py
numpy/core/records.py
numpy/ctypeslib.py
numpy/distutils/ccompiler.py
numpy/distutils/misc_util.py
numpy/distutils/npy_pkg_config.py
numpy/distutils/unixccompiler.py
numpy/fft/fftpack.py
numpy/lib/_datasource.py
numpy/lib/_iotools.py
numpy/lib/scimath.py
numpy/lib/utils.py
numpy/linalg/linalg.py
numpy/ma/core.py
numpy/ma/extras.py
numpy/matlib.py
==================
3122ee5;Pauli Virtanen;2009-11-12 20:55:40 +0000;BUG: setuptools does not run install_clib automatically -- run it manually in install_data, if setuptools is present (fix #1194)

==

numpy/distutils/command/install.py
numpy/distutils/command/install_data.py
==================
afbe79a;David Cournapeau;2009-11-12 11:33:54 +0000;BUG: do not use bitfields for bit-twidling of long doubles.
Some compilers (Sun CC v12 for example) do not support bitfields with
more than 32 bits. We redesign the internal macros and union usages to
use bitmask instead where needed.

Not thoroughly tested yet.

==

numpy/core/src/npymath/ieee754.c.src
numpy/core/src/npymath/npy_math_private.h
==================
c96d201;David Cournapeau;2009-11-10 23:36:33 +0000;BUG: typo for quad long double defines in distutils build.

==

numpy/core/setup.py
==================
5aa2bb4;pierregm;2009-11-10 19:55:19 +0000;* fixed rec.fromrecords for an explicit dtype with an object field (bug #1283)

==

numpy/core/records.py
numpy/core/tests/test_records.py
==================
0d1344e;David Cournapeau;2009-11-10 09:35:46 +0000;DOC: add npy_nextafter/npy_spacing in doc ref.

==

doc/source/reference/c-api.coremath.rst
==================
32501b3;David Cournapeau;2009-11-10 09:35:31 +0000;DOC: fix nextafter docstring.

==

numpy/core/code_generators/ufunc_docstrings.py
==================
111f37a;David Cournapeau;2009-11-10 09:35:17 +0000;ENH: add test for nan and inf for spacing.

==

numpy/core/tests/test_umath.py
==================
e2134a4;David Cournapeau;2009-11-10 09:35:03 +0000;ENH: remove any mention of original python spacing, use ufunc everywhere.

==

numpy/testing/utils.py
==================
6e3e3d4;David Cournapeau;2009-11-10 09:34:48 +0000;REF: move spacing tests to umath as spacing is now a ufunc.

==

numpy/core/tests/test_umath.py
numpy/testing/tests/test_utils.py
==================
cbe4c80;David Cournapeau;2009-11-10 09:34:28 +0000;ENH: make spacing available as a ufunc.

==

numpy/core/code_generators/generate_umath.py
numpy/core/code_generators/ufunc_docstrings.py
numpy/core/src/umath/loops.c.src
numpy/core/src/umath/loops.h
numpy/core/src/umath/loops.h.src
==================
dc6e598;David Cournapeau;2009-11-10 09:34:08 +0000;ENH: add C implementation of spacing in npymath.

==

numpy/core/include/numpy/npy_math.h
numpy/core/src/npymath/ieee754.c.src
==================
7037d45;David Cournapeau;2009-11-10 09:33:49 +0000;ENH: make ieee754 a templated file, need for spacing.

==

numpy/core/SConscript
numpy/core/setup.py
numpy/core/src/npymath/ieee754.c
numpy/core/src/npymath/ieee754.c.src
==================
c52c2bf;David Cournapeau;2009-11-10 09:33:23 +0000;STY: fix hard tab.

==

numpy/core/src/npymath/ieee754.c
==================
3d36bf2;Pearu Peterson;2009-11-10 09:04:10 +0000;Disable 7712 patch.

==

numpy/f2py/capi_maps.py
==================
869b208;Pauli Virtanen;2009-11-09 23:31:08 +0000;doc/release: add information about arraysetops changes (from Neil Crighton)

==

doc/release/1.4.0-notes.rst
==================
d683bd8;Aaron River;2009-11-09 14:30:47 +0000;

==

TEST_COMMIT
==================
d1e0c40;Pearu Peterson;2009-11-09 11:20:35 +0000;f2py: fix a code generation bug when callback function is taking arguments with the same symbol name.

==

numpy/f2py/capi_maps.py
numpy/f2py/cb_rules.py
==================
5b3f51c;David Cournapeau;2009-11-09 04:40:37 +0000;BUG: ppc on darwin has long double aligned on 16 bytes - adjust IEEEl2bits accordingly.

==

numpy/core/src/npymath/npy_math_private.h
numpy/core/src/private/npy_fpmath.h
==================
289f90b;David Cournapeau;2009-11-09 03:12:28 +0000;ENH: add nextafterl implementation.

==

numpy/core/src/npymath/ieee754.c
==================
7c8fb79;David Cournapeau;2009-11-09 03:12:13 +0000;ENH: add a define in scons build for long double representation.

==

numpy/core/SConscript
==================
cca51dc;David Cournapeau;2009-11-09 03:12:00 +0000;ENH: define union to access exact binary content of long double representation in a arch-independent manner.

==

numpy/core/src/npymath/npy_math_private.h
==================
279067a;David Cournapeau;2009-11-09 03:11:45 +0000;ENH: canonalize the define names for long double representation.

==

numpy/core/scons_support.py
numpy/core/setup.py
numpy/core/setup_common.py
numpy/core/src/private/npy_fpmath.h
==================
bd16028;David Cournapeau;2009-11-09 03:11:25 +0000;BUG: fix long double type defines.

==

numpy/core/src/private/npy_fpmath.h
==================
53e7c8a;David Cournapeau;2009-11-09 03:11:09 +0000;BUG: fix NPY_DARWIN definition.

==

numpy/core/include/numpy/npy_os.h
==================
757a850;David Cournapeau;2009-11-09 03:10:53 +0000;ENH: put fpmath into private header.

==

numpy/core/include/numpy/npy_fpmath.h
numpy/core/src/private/npy_fpmath.h
==================
3b7da02;David Cournapeau;2009-11-09 03:10:34 +0000;ENH: move npy_config to a newly created private header directory.

==

numpy/core/SConscript
numpy/core/npy_config.h
numpy/core/setup.py
numpy/core/src/private/npy_config.h
==================
1192cf9;David Cournapeau;2009-11-09 03:10:15 +0000;BUG: float.h inclusion was lost somewhere.

==

numpy/core/src/npymath/npy_math_common.h
==================
a15f842;David Cournapeau;2009-11-09 03:09:58 +0000;ENH: harcode long double representation defines for mac os x.
Because one gcc pass generate multiple-targets when building universal
binaries, it is hard to check any arch-specifics at compile time on Mac
OS X.

==

numpy/core/include/numpy/npy_fpmath.h
numpy/core/include/numpy/npy_os.h
==================
19287ca;David Cournapeau;2009-11-09 03:09:42 +0000;ENH: put all mandatory headers for npymath in one common header.

==

numpy/core/src/npymath/ieee754.c
numpy/core/src/npymath/npy_math.c.src
numpy/core/src/npymath/npy_math_common.h
numpy/core/src/npymath/npy_math_complex.c.src
numpy/core/src/npymath/npy_math_private.h
==================
ba4fd56;Pauli Virtanen;2009-11-07 21:41:43 +0000;docs: document r7697 in release notes

==

doc/release/1.4.0-notes.rst
==================
0ff968e;Pauli Virtanen;2009-11-07 21:26:57 +0000;Fix invariant broken in r7697 -- *axis should be valid after PyArray_CheckAxis

==

numpy/core/src/multiarray/ctors.c
==================
faea0c8;Pauli Virtanen;2009-11-07 21:06:31 +0000;Allow only axis=0 and axis=None for 0-d arrays, and disallow axis>MAX_DIMS (addresses #1286)
These changes should catch errors earlier by raising exceptions, instead
of resulting to unexpected behavior.

==

numpy/core/src/multiarray/ctors.c
numpy/core/tests/test_multiarray.py
==================
ca35f53;pierregm;2009-11-07 10:10:19 +0000;docs : renamed basic.io.rst and basic.io.genfromtxt to basics.io and basics.io.genfromtxt io.genfromtxt : update the doc

==

doc/source/user/basic.io.genfromtxt.rst
doc/source/user/basic.io.rst
doc/source/user/basics.io.genfromtxt.rst
doc/source/user/basics.io.rst
doc/source/user/basics.rst
numpy/lib/io.py
==================
7e853ef;David Cournapeau;2009-11-07 08:49:27 +0000;BUG: do not include complex.h in public headers - this cannot work with C++, where complex.h refers to the old, deprecated header before #include <complex> was the recommended way.

==

numpy/core/include/numpy/npy_common.h
numpy/core/src/npymath/npy_math_private.h
==================
1dba64c;Pauli Virtanen;2009-11-06 09:59:50 +0000;linalg: support '0-norm' (scipy ticket #1037)

==

numpy/linalg/linalg.py
numpy/linalg/tests/test_linalg.py
==================
9ea7dc1;David Cournapeau;2009-11-06 07:32:24 +0000;BUG: do not run long double check for darwin platform (universal build breaks it).

==

numpy/core/SConscript
==================
b3b081b;David Cournapeau;2009-11-06 07:29:55 +0000;ENH: add long double representation detection to numscons build.

==

numpy/core/SConscript
numpy/core/scons_support.py
==================
5da4c5e;David Cournapeau;2009-11-06 07:29:41 +0000;ENH: add a check to get long double representation in distutils build.

==

numpy/core/setup.py
numpy/core/setup_common.py
==================
a5ebfbb;Charles Harris;2009-11-06 01:53:14 +0000;BUG Fix ticket #1285. Problem located by cgranade.

==

numpy/f2py/cfuncs.py
==================
f40c4be;David Cournapeau;2009-11-05 04:02:40 +0000;BUG: typo when defining internal nextafterf.

==

numpy/core/src/npymath/ieee754.c
==================
d9b1742;David Cournapeau;2009-11-05 04:01:44 +0000;BUG: add missing macros mandatory for internal nextafter implementation.

==

numpy/core/src/npymath/npy_math_private.h
==================
c8bc374;David Cournapeau;2009-11-05 03:49:32 +0000;BUG: handle platform without complex support in numscons build.

==

numpy/core/SConscript
==================
d988932;Aaron River;2009-11-04 23:33:56 +0000;

==

TEST_COMMIT
==================
5849386;mdroe;2009-11-04 17:48:18 +0000;BUG+ENH: Change how unaligned pointers to something that a) works on ARM and b) should be faster than memcpy on every platform.

==

numpy/core/include/numpy/npy_cpu.h
==================
379ad8a;David Cournapeau;2009-11-04 14:45:23 +0000;BUG: real/imag inline def should be static inline.

==

numpy/core/include/numpy/npy_math.h
==================
e1e7837;David Cournapeau;2009-11-04 14:44:51 +0000;BUG: forgot to remove npy_creal/cimag definition in npymath lib, redundant with new inline versions.

==

numpy/core/src/npymath/npy_math_complex.c.src
==================
c1a3e60;David Cournapeau;2009-11-04 14:44:16 +0000;BUG: fix typo in numpyconfig.h.in.

==

numpy/core/include/numpy/numpyconfig.h.in
==================
6787264;David Cournapeau;2009-11-04 14:28:38 +0000;ENH: optimize real/imag extraction function, by making them inline.

==

numpy/core/include/numpy/npy_math.h
numpy/core/src/npymath/npy_math_complex.c.src
==================
39d9110;David Cournapeau;2009-11-04 14:27:56 +0000;ENH: add a check for C99-compatible binary representation for numpy complex types.

==

numpy/core/include/numpy/npy_common.h
==================
c4c82f9;David Cournapeau;2009-11-04 14:27:21 +0000;ENH: check for complex struct sizes.

==

numpy/core/SConscript
numpy/core/include/numpy/numpyconfig.h.in
numpy/core/setup.py
==================
67957e2;David Cournapeau;2009-11-04 09:40:32 +0000;BUG: disable native C99 complex support for npy complex type, it requires numpy/scipy changes first.

==

numpy/core/SConscript
numpy/core/include/numpy/npy_common.h
numpy/core/include/numpy/numpyconfig.h.in
==================
15103d3;David Cournapeau;2009-11-04 08:56:07 +0000;Add an example for using complex npymath stuff.

==

doc/source/reference/c-api.coremath.rst
==================
5d3f592;David Cournapeau;2009-11-04 08:55:53 +0000;Mention npymath reuse in release notes.

==

doc/release/1.4.0-notes.rst
==================
0dc618c;David Cournapeau;2009-11-04 08:55:40 +0000;Mention C99 complex support in release notes.

==

doc/release/1.4.0-notes.rst
==================
6a665e0;David Cournapeau;2009-11-04 08:55:27 +0000;Add highlights for 1.4.0 release notes.

==

doc/release/1.4.0-notes.rst
==================
047c625;David Cournapeau;2009-11-04 08:55:14 +0000;Mention neighborhood iterator in release notes.

==

doc/release/1.4.0-notes.rst
==================
a0ac872;David Cournapeau;2009-11-04 08:05:32 +0000;BUG: fix typo in setup build for npymath.

==

numpy/core/setup.py
==================
d58297d;David Cournapeau;2009-11-04 08:00:52 +0000;BUG: remove wrong unit test for clog.

==

numpy/core/tests/test_umath_complex.py
==================
8b1f784;David Cournapeau;2009-11-04 08:00:38 +0000;Remove assert_almost_equal_spec.
Not necessary anymore since we fixed complex nan/inf handling in
assert_almost_equal.

==

numpy/core/tests/test_umath_complex.py
==================
142f2a6;David Cournapeau;2009-11-04 08:00:24 +0000;Remove assert_equal_spec.
It is not needed anymore since we fixed every nan/inf/negative zero handling in
assert_equal.

==

numpy/core/tests/test_umath_complex.py
==================
df3c811;David Cournapeau;2009-11-04 08:00:10 +0000;Update C99 complex mode macro definition.

==

numpy/core/SConscript
==================
5bc8f82;David Cournapeau;2009-11-04 07:59:56 +0000;Disable one cexp test which fails on most implementations.

==

numpy/core/tests/test_umath_complex.py
==================
9b8b19a;David Cournapeau;2009-11-04 07:59:41 +0000;Fix indentation for cexp.

==

numpy/core/src/npymath/npy_math_complex.c.src
==================
9e44de5;David Cournapeau;2009-11-04 07:59:26 +0000;Revert special case for numpy cpow.

==

numpy/core/src/umath/funcs.inc.src
==================
1dec6da;David Cournapeau;2009-11-04 07:59:11 +0000;Fix tests for complex power function.

==

numpy/core/tests/test_umath.py
==================
9026738;David Cournapeau;2009-11-04 07:58:57 +0000;Remove double declarations for complex funcs.

==

numpy/core/include/numpy/npy_math.h
==================
3c6b3ec;David Cournapeau;2009-11-04 07:58:42 +0000;Use npymath implementation of complex sqrt, log, exp and pow.

==

numpy/core/src/umath/funcs.inc.src
==================
4666cb6;David Cournapeau;2009-11-04 07:58:25 +0000;Add missing declarations for _arg functions.

==

numpy/core/src/umath/loops.h
==================
b30c49f;David Cournapeau;2009-11-04 07:58:07 +0000;Handle special cases in our custom cexp function.

==

numpy/core/src/npymath/npy_math_complex.c.src
==================
0d6e390;David Cournapeau;2009-11-04 07:57:49 +0000;Add configure checks for single and extended precisions complex functions.

==

numpy/core/SConscript
numpy/core/setup.py
==================
683c9ef;David Cournapeau;2009-11-04 07:57:34 +0000;Remove double declarations in npymath headers.

==

numpy/core/include/numpy/npy_math.h
==================
1dabeec;David Cournapeau;2009-11-04 07:57:19 +0000;Fix typos in some complex definitions.

==

numpy/core/src/npymath/npy_math_complex.c.src
==================
f9e855d;David Cournapeau;2009-11-04 07:57:03 +0000;Mention difference between simple decorators and implementations for complex C99 functions.

==

numpy/core/src/npymath/npy_math_complex.c.src
==================
ffbc60e;David Cournapeau;2009-11-04 07:56:48 +0000;Implement float and long double versions of complex functions.

==

numpy/core/src/npymath/npy_math_complex.c.src
numpy/core/src/npymath/npy_math_private.h
==================
532b27f;David Cournapeau;2009-11-04 07:56:32 +0000;Add prototypes for float and long double versions of complex functions.

==

numpy/core/include/numpy/npy_math.h
==================
cb6ae09;David Cournapeau;2009-11-04 07:56:12 +0000;Fix our private replacement to clog.

==

numpy/core/src/npymath/npy_math_complex.c.src
==================
57517bf;David Cournapeau;2009-11-04 07:55:56 +0000;MS compiler does not like funky initializer for float.

==

numpy/core/src/npymath/npy_math_complex.c.src
==================
3a417d8;David Cournapeau;2009-11-04 07:55:37 +0000;Fix npy_creal/npy_cimag when no complex support is available.

==

numpy/core/src/npymath/npy_math_complex.c.src
==================
691bb30;David Cournapeau;2009-11-04 07:55:21 +0000;Use original npy complex type instead of custom one for npymath.
Since we use complex C99 support when available, we change npy_cdouble
definition to C99 complex type if available.

==

numpy/core/include/numpy/npy_common.h
numpy/core/include/numpy/npy_math.h
numpy/core/src/npymath/npy_math_complex.c.src
numpy/core/src/npymath/npy_math_private.h
==================
f17f475;David Cournapeau;2009-11-04 07:54:58 +0000;Check for C99 complex types.

==

numpy/core/SConscript
numpy/core/setup.py
numpy/core/setup_common.py
==================
60c2d98;David Cournapeau;2009-11-04 07:54:42 +0000;Pull cpack into the npy math API, prefix it with npy_, and use it in npymath sources.

==

numpy/core/include/numpy/npy_math.h
numpy/core/src/npymath/npy_math_complex.c.src
numpy/core/src/npymath/npy_math_private.h
==================
2a40dc5;David Cournapeau;2009-11-04 07:54:23 +0000;Fix csqrt so that only npy_fabs is used, not fabs.

==

numpy/core/src/npymath/npy_math_complex.c.src
==================
8936293;David Cournapeau;2009-11-04 07:54:08 +0000;Fix csqrt so that it does not depend on complex support.

==

numpy/core/src/npymath/npy_math_complex.c.src
==================
ba29438;David Cournapeau;2009-11-04 07:53:53 +0000;Implement ccos, csin, clog, carg, cpow complex functions.

==

numpy/core/include/numpy/npy_math.h
numpy/core/setup_common.py
numpy/core/src/npymath/npy_math_complex.c.src
==================
8b06281;David Cournapeau;2009-11-04 07:53:33 +0000;Implement stubs for clog, ccos, csin and cpow.

==

numpy/core/include/numpy/npy_math.h
numpy/core/setup_common.py
numpy/core/src/npymath/npy_math_complex.c.src
==================
2c5a4c9;David Cournapeau;2009-11-04 07:53:14 +0000;Implement csqrt.

==

numpy/core/include/numpy/npy_math.h
numpy/core/setup_common.py
numpy/core/src/npymath/npy_math_complex.c.src
==================
f0521e3;David Cournapeau;2009-11-04 07:52:54 +0000;Add cexp function.

==

numpy/core/include/numpy/npy_math.h
numpy/core/setup_common.py
numpy/core/src/npymath/npy_math_complex.c.src
==================
0d73a33;David Cournapeau;2009-11-04 07:52:28 +0000;Fix typo.

==

numpy/core/src/npymath/npy_math_complex.c.src
==================
999e676;David Cournapeau;2009-11-04 07:52:07 +0000;Do not use union initializaer: another thing that MS compiler cannot handle.

==

numpy/core/src/npymath/npy_math_complex.c.src
==================
6a9f90a;David Cournapeau;2009-11-04 07:51:48 +0000;npymath now implements cabs, creal and cimag.

==

numpy/core/include/numpy/npy_math.h
numpy/core/src/npymath/npy_math_complex.c.src
numpy/core/src/npymath/npy_math_private.h
==================
8f526de;David Cournapeau;2009-11-04 07:51:26 +0000;Define C99-compatible complex type + check for a first set of very basic complex functions.

==

numpy/core/SConscript
numpy/core/include/numpy/npy_common.h
numpy/core/include/numpy/numpyconfig.h.in
numpy/core/setup.py
==================
7437c9c;David Cournapeau;2009-11-04 07:51:08 +0000;Start implementing complex support.

==

numpy/core/include/numpy/npy_math.h
numpy/core/setup.py
numpy/core/src/npymath/npy_math_complex.c.src
numpy/core/src/npymath/npy_math_private.h
==================
a04e1ed;David Cournapeau;2009-11-04 07:50:41 +0000;Start complex support for npymath.
Detect if C99 complex support is available, and check for a few basic
complex functions availability.

==

numpy/core/SConscript
numpy/core/setup.py
numpy/core/setup_common.py
==================
74bca4f;David Cournapeau;2009-11-04 07:50:26 +0000;Fix assert_array_equal_spec for complex types.

==

numpy/core/tests/test_umath_complex.py
==================
6858cb9;David Cournapeau;2009-11-04 07:50:10 +0000;Fix bogus unit tests for csqrt.

==

numpy/core/tests/test_umath_complex.py
==================
b8c51d6;David Cournapeau;2009-11-04 07:49:56 +0000;Add tests for cexp.

==

numpy/core/tests/test_umath_complex.py
==================
ada6b63;David Cournapeau;2009-11-04 07:49:41 +0000;Fix cabs tests.

==

numpy/core/tests/test_umath_complex.py
==================
b56f7bb;David Cournapeau;2009-11-04 07:49:21 +0000;Simplify and fix assert_equal_spec to handle signed 0 and complex numbers correctly.

==

numpy/core/tests/test_umath_complex.py
==================
4ad98c9;David Cournapeau;2009-11-04 07:49:07 +0000;Fix signed zero handling in exact tests + handle carg value as a real, not a complex return value.

==

numpy/core/tests/test_umath_complex.py
==================
8971757;David Cournapeau;2009-11-04 07:48:52 +0000;Add unit tests for special values for csqrt.

==

numpy/core/tests/test_umath_complex.py
==================
b8c61d4;David Cournapeau;2009-11-04 07:48:38 +0000;Reformat unit tests for special values of cabs.

==

numpy/core/tests/test_umath_complex.py
==================
656a4d0;David Cournapeau;2009-11-04 07:48:24 +0000;Add test for ufunc _arg - will be used to test npymath carg implementation.

==

numpy/core/code_generators/generate_umath.py
numpy/core/code_generators/ufunc_docstrings.py
numpy/core/src/umath/loops.c.src
numpy/core/tests/test_umath_complex.py
==================
f5720f6;David Cournapeau;2009-11-04 07:48:04 +0000;Use hypot instead of direct evaluation of the absolute value of a complex number.

==

numpy/core/src/umath/loops.c.src
==================
75d0322;David Cournapeau;2009-11-04 07:47:49 +0000;Fix cabs tests.

==

numpy/core/tests/test_umath_complex.py
==================
d6015f7;David Cournapeau;2009-11-04 07:47:32 +0000;Fix _spec asserts when only one arg is nan and not the other.

==

numpy/core/tests/test_umath_complex.py
==================
42e7d63;David Cournapeau;2009-11-04 07:47:18 +0000;Move complex umath tests in separate file.

==

numpy/core/tests/test_umath.py
numpy/core/tests/test_umath_complex.py
==================
c605753;David Cournapeau;2009-11-04 07:47:03 +0000;Fix some unit tests for special values handling of clog.

==

numpy/core/tests/test_umath.py
==================
6713e50;David Cournapeau;2009-11-04 07:46:48 +0000;Start adding test for C99 compliance of our complex functions.

==

numpy/core/tests/test_umath.py
==================
da7e19c;David Cournapeau;2009-11-04 07:46:33 +0000;DOC: mention new spacing-based testing functions in the release notes.

==

doc/release/1.4.0-notes.rst
==================
92d3b83;David Cournapeau;2009-11-04 07:46:10 +0000;DOC: mention nextafter ufunc in the release notes and reference.

==

doc/release/1.4.0-notes.rst
doc/source/reference/ufuncs.rst
==================
c0479b2;Charles Harris;2009-11-03 01:52:51 +0000;Apply fix for sun compilation from beffa. Closes ticket #1248.

==

numpy/distutils/fcompiler/sun.py
==================
784bd5f;Aaron River;2009-11-02 15:37:26 +0000;

==

TEST_COMMIT
==================
7fadc59;Aaron River;2009-11-02 15:30:54 +0000;

==

TEST_COMMIT
==================
c4fd08e;Aaron River;2009-11-02 15:10:35 +0000;

==

TEST_COMMIT
==================
491681a;David Cournapeau;2009-10-30 13:10:36 +0000;BUG: fix compilation of nextafter on MS platforms.

==

numpy/core/src/npymath/ieee754.c
==================
0ccabc7;David Cournapeau;2009-10-30 10:55:09 +0000;ENH: add a unit test for spacing/nextafter equivalence.
Spacing and nextafter use totally different implementation, so testing
for their equivalence does not hurt.

==

numpy/core/tests/test_umath.py
==================
a30e020;David Cournapeau;2009-10-30 10:54:53 +0000;BUG: wrong exception raised in spacing for incompatible dtype.

==

numpy/testing/utils.py
==================
ef0441c;David Cournapeau;2009-10-30 10:54:38 +0000;BUG: one test for nextafter was wrong.

==

numpy/core/tests/test_umath.py
==================
43e59f1;David Cournapeau;2009-10-30 10:27:50 +0000;STY: remove whitespace.

==

numpy/testing/utils.py
==================
b325f73;David Cournapeau;2009-10-30 10:27:37 +0000;ENH: add assert_array_max_ulp comparison function.
This new comparison raises an error if the number of representable
numbers between two arrays exceeds a tolerance.

==

numpy/testing/tests/test_utils.py
numpy/testing/utils.py
==================
fd1990d;David Cournapeau;2009-10-30 10:27:23 +0000;ENH: add robust comparison function for floating numbers.
assert_array_almost_equal_nulp use spacing so that a single tolerance
number can be used independently on the amplitude of the floating point
number.

==

numpy/testing/tests/test_utils.py
numpy/testing/utils.py
==================
0c539e1;David Cournapeau;2009-10-30 10:27:08 +0000;ENH: add numpy implementation of F90 spacing function.

==

numpy/testing/tests/test_utils.py
numpy/testing/utils.py
==================
b89aaa4;David Cournapeau;2009-10-30 10:26:52 +0000;ENH: add a function to compute the signed-magnitude interpretation of the binary repr of a float.

==

numpy/testing/utils.py
==================
19b5dea;David Cournapeau;2009-10-30 10:26:22 +0000;ENH: add a couple of tests for nextafter.

==

numpy/core/tests/test_umath.py
==================
7a96db5;David Cournapeau;2009-10-30 10:26:08 +0000;ENH: add a nextafter ufunc.

==

numpy/core/code_generators/generate_umath.py
numpy/core/code_generators/ufunc_docstrings.py
numpy/core/src/umath/loops.c.src
numpy/core/src/umath/loops.h
numpy/core/src/umath/loops.h.src
==================
ac72fa1;David Cournapeau;2009-10-30 10:25:46 +0000;ENH: implement single and double precision nextafter* for npymath.

==

numpy/core/include/numpy/npy_math.h
numpy/core/src/npymath/ieee754.c
==================
789ec8e;David Cournapeau;2009-10-30 10:25:27 +0000;ENH: detect IEC 559 nextafter function.

==

numpy/core/setup_common.py
==================
c2485bd;David Cournapeau;2009-10-30 10:25:11 +0000;STY: fix indentation.

==

numpy/core/src/npymath/ieee754.c
==================
e1763aa;David Cournapeau;2009-10-30 10:24:54 +0000;REF: put low-leve IEEE-754 routines in separate file.

==

numpy/core/SConscript
numpy/core/setup.py
numpy/core/src/npymath/ieee754.c
numpy/core/src/npymath/npy_math.c.src
==================
83ee1c1;David Cournapeau;2009-10-29 08:16:08 +0000;STY: Simplify the logic for datetime/timedelta typedef.

==

numpy/core/include/numpy/npy_common.h
==================
8e5018c;David Cournapeau;2009-10-29 08:15:42 +0000;ENH: fix spelling error in array_api_gen_bld COMSTR builder.

==

numpy/core/scons_support.py
==================
1a8afce;mdroe;2009-10-28 13:32:40 +0000;Fix #1276 - comparing string and unicode arrays broken

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/tests/test_defchararray.py
==================
60c8efb;Travis Oliphant;2009-10-27 19:48:07 +0000;Add clearing of the error for the case when second part of compound conditional produces NULL return

==

numpy/core/src/multiarray/descriptor.c
==================
f676229;mdroe;2009-10-27 11:20:29 +0000;Add first cut of C code coverage tool

==

tools/c_coverage/HOWTO_C_COVERAGE.txt
tools/c_coverage/c_coverage_collect.sh
tools/c_coverage/c_coverage_report.py
==================
5dc5c73;David Cournapeau;2009-10-27 09:43:40 +0000;BUG: pkg_paths was wrongly set when using --package-list for numscons build.

==

numpy/distutils/command/scons.py
==================
05324d0;mdroe;2009-10-26 13:38:37 +0000;Fix types in docstrings

==

numpy/core/defchararray.py
==================
8dc57cd;Stefan van der Walt;2009-10-25 10:11:23 +0000;Add backward compatible `deprecate_with_doc`.

==

numpy/lib/utils.py
==================
11de890;Pearu Peterson;2009-10-25 09:37:31 +0000;Introduced intent(align4|align8|align16) attributes. Fixes scipy ticket 794 after using intent(align8) in the corresponding scipy pyf files.

==

numpy/f2py/auxfuncs.py
numpy/f2py/crackfortran.py
numpy/f2py/src/fortranobject.c
numpy/f2py/src/fortranobject.h
==================
944524f;Stefan van der Walt;2009-10-25 09:02:33 +0000;Add tests for ``deprecate``.

==

numpy/lib/tests/test_utils.py
==================
b3f3088;Stefan van der Walt;2009-10-25 09:02:01 +0000;Add ``deprecate`` function that doubles as a decorator.

==

numpy/lib/utils.py
==================
82c93bb;Stefan van der Walt;2009-10-25 09:01:32 +0000;Add gitignore for those using git-svn.

==

.gitignore
==================
55d07fb;Stefan van der Walt;2009-10-25 09:01:06 +0000;Merge deprecate_with_doc into deprecate(message="...").

==

numpy/lib/arraysetops.py
numpy/lib/function_base.py
numpy/lib/utils.py
numpy/ma/extras.py
==================
bbab7a4;chris.burns;2009-10-24 23:29:28 +0000;Fix spelling of backticks.

==

doc/HOWTO_DOCUMENT.txt
==================
8dc4d76;chris.burns;2009-10-24 23:10:28 +0000;Add a few examples for parameter types in HOWTO_DOCUMENT.

==

doc/HOWTO_DOCUMENT.txt
==================
468263e;Pauli Virtanen;2009-10-24 17:25:32 +0000;Fix lookfor on python 2.6. Add a test for it. Make it import submodules more aggressively.

==

numpy/lib/tests/test_utils.py
numpy/lib/utils.py
==================
7e61011;Pauli Virtanen;2009-10-24 16:01:22 +0000;Remove unnecessary variables from doc.constants (from Ralf Gommers).

==

numpy/doc/constants.py
==================
4c03387;Charles Harris;2009-10-24 15:55:44 +0000;Replace \r by \n.

==

numpy/distutils/mingw/gfortran_vs2003_hack.c
==================
ebaaca4;Pauli Virtanen;2009-10-24 15:55:25 +0000;numpy.scipy.org: add upload target to Makefile

==

doc/numpy.scipy.org/Makefile
==================
cdd23ab;Charles Harris;2009-10-24 15:51:30 +0000;Replace \r by \n.

==

numpy/core/tests/test_errstate.py
numpy/f2py/doc/python9.tex
numpy/f2py/doc/win32_notes.txt
==================
2144766;Pauli Virtanen;2009-10-24 15:50:49 +0000;docs: update HOWTO_MERGE_WIKI_DOCS.txt

==

doc/HOWTO_MERGE_WIKI_DOCS.txt
==================
cd96e95;Pauli Virtanen;2009-10-24 15:49:27 +0000;doc: add HOWTO_MERGE_WIKI_DOCS.txt
(Thanks to Ralf Gommers.)

==

doc/HOWTO_MERGE_WIKI_DOCS.txt
==================
bb129ca;pierregm;2009-10-22 12:05:34 +0000;* Added docs on i/o with focus on genfromtxt

==

doc/source/user/basic.io.genfromtxt.rst
doc/source/user/basic.io.rst
doc/source/user/basics.rst
==================
c660ae4;Charles Harris;2009-10-21 02:13:51 +0000;Complete fix to ticket #1229.

==

numpy/core/src/multiarray/convert_datatype.c
==================
549d7bd;Charles Harris;2009-10-20 21:35:53 +0000;Hard tab removal. Trailing whitespace removal. Some coding style cleanups.

==

numpy/fft/SConscript
numpy/fft/fftpack_litemodule.c
numpy/lib/tests/test__iotools.py
numpy/random/mtrand/distributions.c
numpy/random/mtrand/initarray.c
numpy/random/mtrand/numpy.pxi
numpy/random/mtrand/randomkit.c
numpy/random/mtrand/randomkit.h
==================
4c297e1;Pauli Virtanen;2009-10-20 21:09:21 +0000;Fix bug in regression test for #1259

==

numpy/core/tests/test_regression.py
==================
1a63d2b;Charles Harris;2009-10-20 20:47:07 +0000;Hard tab removal.

==

numpy/core/include/numpy/arrayscalars.h
numpy/core/include/numpy/fenv/fenv.c
numpy/core/include/numpy/fenv/fenv.h
numpy/core/include/numpy/ndarrayobject.h
numpy/core/include/numpy/noprefix.h
numpy/core/include/numpy/npy_common.h
numpy/core/include/numpy/npy_math.h
numpy/core/include/numpy/numpyconfig.h.in
numpy/core/include/numpy/ufuncobject.h
numpy/core/include/numpy/utils.h
==================
05faebf;Charles Harris;2009-10-20 20:46:57 +0000;Hard tab removal:  _dotblas.c

==

numpy/core/blasdot/_dotblas.c
==================
10bc904;Charles Harris;2009-10-20 20:03:24 +0000;Apply patch from mdroe to fix ticket #1267. Reformat multiline comments in patch to conform to coding style.

==

numpy/core/include/numpy/npy_cpu.h
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/refcount.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/multiarray/shape.c
numpy/core/tests/test_regression.py
==================
cce7337;Charles Harris;2009-10-20 19:27:21 +0000;Cleanup scalarmathmodule.c.src. Remove hard tabs.

==

numpy/core/src/scalarmathmodule.c.src
==================
8ba11a4;Charles Harris;2009-10-20 19:27:14 +0000;Cleanup ufunc_object.c. Remove trailing whitespace. Remove hard tabs.

==

numpy/core/src/umath/ufunc_object.c
==================
84589de;Charles Harris;2009-10-20 19:27:06 +0000;Cleanup loops.h.src. Remove trailing whitespace. Remove hard tabs.

==

numpy/core/src/umath/loops.h.src
==================
d0528b0;Charles Harris;2009-10-20 19:26:56 +0000;Cleanup py3k_notes.txt. Remove hard tabs.

==

numpy/core/src/py3k_notes.txt
==================
8e4c3b5;Charles Harris;2009-10-20 19:26:49 +0000;Cleanup npy_math_private.h Remove hard tabs.

==

numpy/core/src/npymath/npy_math_private.h
==================
ab509f8;Charles Harris;2009-10-20 19:26:37 +0000;Cleanup npy_math.c.src. Remove trailing whitespace. Remove hard tabs.

==

numpy/core/src/npymath/npy_math.c.src
==================
da19ab1;Charles Harris;2009-10-20 19:06:44 +0000;Cleanup usertypes.c. Remove hard tabs.

==

numpy/core/src/multiarray/usertypes.c
==================
a8716ca;Charles Harris;2009-10-20 19:06:34 +0000;Cleanup testcalcs.py. Remove hard tabs.

==

numpy/core/src/multiarray/testcalcs.py
==================
0cc8ffc;Charles Harris;2009-10-20 19:06:21 +0000;Cleanup shape.c. Remove hard tabs.

==

numpy/core/src/multiarray/shape.c
==================
1284cdb;Charles Harris;2009-10-20 19:06:10 +0000;Cleanup scalartypes.c.src. Remove hard tabs.

==

numpy/core/src/multiarray/scalartypes.c.src
==================
46ddf45;Charles Harris;2009-10-20 19:05:59 +0000;Cleanup scalarapi.c. Remove hard tabs.

==

numpy/core/src/multiarray/scalarapi.c
==================
d29100e;Charles Harris;2009-10-20 19:05:49 +0000;Cleanup refcount.c. Remove hard tabs.

==

numpy/core/src/multiarray/refcount.c
==================
b4b7ec3;Charles Harris;2009-10-20 19:05:42 +0000;Cleanup numpyos.c. Remove hard tabs.

==

numpy/core/src/multiarray/numpyos.c
==================
35118e7;Charles Harris;2009-10-20 19:05:30 +0000;Cleanup multiarray_tests.c.src. Remove hard tabs.

==

numpy/core/src/multiarray/multiarray_tests.c.src
==================
63fc1d1;Charles Harris;2009-10-20 19:05:15 +0000;Cleanup methods.c. Remove hard tabs.

==

numpy/core/src/multiarray/methods.c
==================
93cdc76;Charles Harris;2009-10-20 19:05:07 +0000;Cleanup mapping.c. Remove hard tabs.

==

numpy/core/src/multiarray/mapping.c
==================
0f72381;Charles Harris;2009-10-20 19:04:57 +0000;Cleanup item_selection.c Remove hard tabs.

==

numpy/core/src/multiarray/item_selection.c
==================
261c9e4;Charles Harris;2009-10-20 17:33:11 +0000;Cleanup getset.c Remove hard tabs.

==

numpy/core/src/multiarray/getset.c
==================
3f1ca59;Charles Harris;2009-10-20 17:33:05 +0000;Cleanup convert_datatype.c Remove hard tabs.

==

numpy/core/src/multiarray/convert_datatype.c
==================
51dbc63;Charles Harris;2009-10-20 17:32:59 +0000;Cleanup _datetime.h Remove trailing whitespace. Remove hard tabs.

==

numpy/core/src/multiarray/_datetime.h
==================
58bee13;Charles Harris;2009-10-20 17:32:51 +0000;Cleanup convert.c Remove hard tabs.

==

numpy/core/src/multiarray/convert.c
==================
baf04a5;Charles Harris;2009-10-20 17:32:45 +0000;Cleanup ctors.c Remove hard tabs.

==

numpy/core/src/multiarray/ctors.c
==================
8cd320b;Charles Harris;2009-10-20 17:32:35 +0000;Cleanup iterators.c Remove hard tabs. Remove trailing whitespace.

==

numpy/core/src/multiarray/iterators.c
==================
a0b8480;Charles Harris;2009-10-20 17:11:10 +0000;Cleanup descriptor.c Remove trailing whitespace. Remove hard tabs.

==

numpy/core/src/multiarray/descriptor.c
==================
ffbb90e;Charles Harris;2009-10-20 17:10:57 +0000;Cleanup calculation.h Remove hard tab.

==

numpy/core/src/multiarray/calculation.h
==================
74fed7b;Charles Harris;2009-10-20 17:10:49 +0000;Cleanup calculation.c Remove hard tabs.

==

numpy/core/src/multiarray/calculation.c
==================
e379b2b;Charles Harris;2009-10-20 17:10:42 +0000;Cleanup arrayobject.c Remove trailing whitespace. Remove hard tab.

==

numpy/core/src/multiarray/arrayobject.c
==================
ac0f1e1;Charles Harris;2009-10-20 16:51:46 +0000;Cleanup datetime.c Remove trailing whitespace. Remove hard tabs. Reformat multiline comments. A few coding style fixes.

==

numpy/core/src/multiarray/datetime.c
==================
e88d4b1;pierregm;2009-10-19 18:03:43 +0000;* io.genfromtxt : make sure that `names` is a list and not a tuple

==

numpy/lib/io.py
==================
d7e2d9a;mdroe;2009-10-19 16:59:30 +0000;Remove some vestigial print statements

==

numpy/core/tests/test_defchararray.py
==================
49cd4ec;mdroe;2009-10-19 15:58:03 +0000;#1256: Forgot rest of patch to support Unicode elements in masked arrays.

==

numpy/ma/core.py
==================
ea99d11;pierregm;2009-10-16 09:13:12 +0000;* io.genfromtxt   - fixed an issue when an explicit dtype has the right size, but the names don't

==

numpy/lib/io.py
numpy/lib/tests/test_io.py
==================
e8f4865;pierregm;2009-10-16 03:10:49 +0000;* io.genfromtxt   - `usecols` can now be a comma-separated string   - make sure that an explicit name list shorter than an explicit dtype is properly expanded

==

numpy/lib/io.py
numpy/lib/tests/test_io.py
==================
2251993;Pauli Virtanen;2009-10-15 22:12:13 +0000;Add regression test for #1259

==

numpy/core/tests/test_regression.py
==================
f6134e3;Pauli Virtanen;2009-10-15 19:59:40 +0000;Remove obsolete commented-out code

==

numpy/core/tests/test_print.py
==================
b9a9988;Pauli Virtanen;2009-10-15 19:39:24 +0000;Use knownfailure instead of skipif for a failing test

==

numpy/core/tests/test_regression.py
==================
9f312f2;mdroe;2009-10-15 16:50:26 +0000;Skip test that is failing due to alignment issues on Solaris.

==

numpy/core/tests/test_regression.py
==================
4b6137a;pierregm;2009-10-14 19:43:00 +0000;* _iotools.StringConverter   - prevents a `default` of 0 to be overwritten during initialization   - allows the `missing_values` to be a comma-separated string * io.genfromtxt   - `usecols` can now be a single integer   - for `usecols` and `names` to list (for compatibility w/ Python 2.5)   - negative values in `usecols` are properly transformed to positive integers   - fixed `usecols` with named columns

==

numpy/lib/_iotools.py
numpy/lib/io.py
numpy/lib/tests/test__iotools.py
numpy/lib/tests/test_io.py
==================
bbe934c;mdroe;2009-10-14 19:15:43 +0000;Fix #1256: repr of masked array crashes with Unicode elements

==

numpy/ma/core.py
numpy/ma/tests/test_regression.py
==================
29f9857;mdroe;2009-10-14 17:03:38 +0000;Fix #1198: Copying objects where the stride between them is not a multiple of sizeof(PyObject*) fails.

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/tests/test_regression.py
==================
1857cf2;mdroe;2009-10-14 17:02:10 +0000;Fix coercion of unicode object to chararray

==

numpy/core/defchararray.py
==================
d12379c;mdroe;2009-10-14 17:01:33 +0000;Remove 'format' altogether, since I don't think I'll be implementing it any time soon.

==

numpy/core/defchararray.py
==================
7b85933;mdroe;2009-10-14 15:36:22 +0000;Fix Solaris build.

==

numpy/core/src/multiarray/multiarraymodule.c
==================
374721f;mdroe;2009-10-14 15:12:24 +0000;Fix oops in last commit.  Committed some experimental things I shouldn't have.  Sorry.

==

numpy/core/defchararray.py
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/convert_datatype.c
numpy/core/tests/test_defchararray.py
==================
fbbf05c;mdroe;2009-10-14 15:01:41 +0000;Fix Unicode object -> chararray conversion on narrow Python builds

==

numpy/core/defchararray.py
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/convert_datatype.c
numpy/core/tests/test_defchararray.py
==================
c4db9cf;mdroe;2009-10-13 17:04:40 +0000;Update defchararray.__all__ so that the documentation editor will pick up its docstrings.

==

numpy/core/__init__.py
numpy/core/defchararray.py
numpy/core/tests/test_defchararray.py
==================
64ac086;David Cournapeau;2009-10-13 08:29:48 +0000;DOC: mention speed improvement at import time in release notes.

==

doc/release/1.4.0-notes.rst
==================
4fb4c64;David Cournapeau;2009-10-13 08:29:30 +0000;DOC: add docstrings to compat and compat._inspect.

==

numpy/compat/__init__.py
numpy/compat/_inspect.py
==================
daf38f3;David Cournapeau;2009-10-13 08:29:14 +0000;ENH: move inspect copy into newly created compat module.

==

numpy/__init__.py
numpy/compat/__init__.py
numpy/compat/_inspect.py
numpy/compat/setup.py
numpy/compat/setupscons.py
numpy/lib/inspect.py
numpy/ma/core.py
numpy/setup.py
numpy/setupscons.py
==================
7b481cb;David Cournapeau;2009-10-13 08:28:43 +0000;ENH: use our own inspect instead of upstream inspect to speed up numpy import times.

==

numpy/ma/core.py
==================
32b5b40;David Cournapeau;2009-10-13 08:28:25 +0000;ENH: do not use string module.

==

numpy/lib/inspect.py
==================
c8a87fc;David Cournapeau;2009-10-13 08:28:10 +0000;ENH: remove things we do not need in inspect.

==

numpy/lib/inspect.py
==================
a0ae03a;David Cournapeau;2009-10-13 08:27:55 +0000;ENH: add a toy test in inspect.

==

numpy/lib/inspect.py
==================
f7cdebb;David Cournapeau;2009-10-13 08:27:32 +0000;ENH: add a copy of inspect (from 2.4.4).

==

numpy/lib/inspect.py
==================
656acfd;David Cournapeau;2009-10-13 08:24:55 +0000;BUG: non ascii character in docstring.

==

numpy/core/defchararray.py
==================
99d0d70;mdroe;2009-10-12 15:33:09 +0000;Minor docstring correction.

==

numpy/core/defchararray.py
==================
7deb4d5;mdroe;2009-10-12 15:24:43 +0000;Many improvements to chararray.  Fixes Trac bugs 1199, 856, 855, 1231, 1235, 1240, 1241.  docstrings, full unit-test coverage, C-based vectorized string operations.

==

doc/source/reference/arrays.classes.rst
doc/source/reference/routines.array-creation.rst
doc/source/reference/routines.char.rst
doc/source/reference/routines.rst
numpy/core/defchararray.py
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_defchararray.py
numpy/core/tests/test_regression.py
==================
66c62a8;mdroe;2009-10-12 14:57:41 +0000;

==

README.txt
==================
8048db1;pierregm;2009-10-12 09:07:00 +0000;* io.genfromtxt   - add `skip_footer` to remove some last lines

==

numpy/lib/io.py
numpy/lib/tests/test_io.py
==================
80851e3;pierregm;2009-10-12 04:45:31 +0000;* _iotools.StringConverter   - prevents an explicit default to be overwritten during upgrade * io.genfromtxt   - deprecate `skiprows` for `skip_header`   - deprecate `missing` for `missing_values`   - `missing_values` can now be a sequence   - add support for `filling_values` * fixed ticket #1257

==

numpy/lib/_iotools.py
numpy/lib/io.py
numpy/lib/tests/test__iotools.py
numpy/lib/tests/test_io.py
==================
295e24a;Pauli Virtanen;2009-10-11 10:33:17 +0000;doc.constants: work around some Sphinx formatting issues

==

numpy/doc/constants.py
==================
72c9eea;Pauli Virtanen;2009-10-10 16:12:27 +0000;Don't include assert_valid_refcount in numpy.testing.*
It's a private function used only in two internal regression tests.

==

numpy/core/tests/test_regression.py
numpy/lib/tests/test_regression.py
numpy/testing/utils.py
==================
8cad335;pierregm;2009-10-09 02:17:30 +0000;* ma.masked_equal : force the `fill_value` of the output to `value` (ticket #1253)
* lib._iotools:
  - NameValidator : add the `nbfields` optional argument to validate
  - add easy_dtype

* lib.io.genfromtxt : 
  - add the `autostrip` optional argument (ticket #1238)
  - use `invalid_raise=True` as default
  - use the easy_dtype mechanism (ticket #1252)

==

numpy/lib/_iotools.py
numpy/lib/io.py
numpy/lib/tests/test__iotools.py
numpy/lib/tests/test_io.py
numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
e54df63;David Cournapeau;2009-10-08 13:58:45 +0000;ENH: removed doubled code.

==

numpy/core/code_generators/genapi.py
==================
3d3f47f;David Cournapeau;2009-10-08 13:58:29 +0000;ENH: merge genapi2 and genapi.

==

numpy/core/code_generators/genapi.py
numpy/core/code_generators/genapi2.py
numpy/core/code_generators/generate_numpy_api.py
numpy/core/code_generators/generate_ufunc_api.py
==================
c9505e9;David Cournapeau;2009-10-08 13:58:09 +0000;ENH: remove obsolete code in genapi.

==

numpy/core/code_generators/genapi.py
==================
ed67379;David Cournapeau;2009-10-08 13:57:48 +0000;ENH: remove *_order.txt files.

==

numpy/core/code_generators/numpy_api_order.txt
numpy/core/code_generators/ufunc_api_order.txt
==================
9afcc82;David Cournapeau;2009-10-08 13:57:27 +0000;ENH: do not use *_order.txt inputs anymore.
numscons build now uses the api dicts as Python Value nodes, and
distutils build uses the dict directly as well.

In the case of numscons, this means that changes in the API will now
automatically be detected and handled.

==

numpy/core/SConscript
numpy/core/code_generators/generate_numpy_api.py
numpy/core/scons_support.py
numpy/core/setup.py
==================
f758735;David Cournapeau;2009-10-08 13:56:50 +0000;ENH: add variables which contain full multiarray/ufunc apis.

==

numpy/core/code_generators/numpy_api.py
==================
af9836c;David Cournapeau;2009-10-08 13:56:32 +0000;DOC: document at which version we changed the way to checksum the API.

==

numpy/core/code_generators/cversions.txt
==================
5703014;David Cournapeau;2009-10-08 13:56:13 +0000;ENH: use api dict instead of *order.txt files to check for API changes.

==

numpy/core/code_generators/cversions.py
numpy/core/code_generators/genapi.py
numpy/core/setup_common.py
==================
726fb0a;David Cournapeau;2009-10-08 13:55:33 +0000;ENH: add a list of all api dicts which define the C API.
Wherever we need to check for API changes, we will just need to
introspect this variable.

==

numpy/core/code_generators/numpy_api.py
==================
670e803;David Cournapeau;2009-10-08 13:55:16 +0000;DOC: document how to handle numpy_api dicts.

==

numpy/core/code_generators/numpy_api.py
==================
6ec24a6;David Cournapeau;2009-10-08 13:54:59 +0000;ENH: use api dict for ufunc as well.

==

numpy/core/code_generators/generate_ufunc_api.py
==================
c009920;David Cournapeau;2009-10-08 13:54:37 +0000;BUG: fix ufunc API indexes.

==

numpy/core/code_generators/numpy_api.py
==================
a172a17;David Cournapeau;2009-10-08 13:54:17 +0000;ENH: make the API array name customizable so that it can be reused for other apis (e.g. ufunc).

==

numpy/core/code_generators/genapi2.py
numpy/core/code_generators/generate_numpy_api.py
==================
2aa5d24;David Cournapeau;2009-10-08 13:54:00 +0000;ENH: move *Api classes into genapi2, as we will use them for ufunc.

==

numpy/core/code_generators/genapi2.py
numpy/core/code_generators/generate_numpy_api.py
==================
77966f7;David Cournapeau;2009-10-08 13:53:36 +0000;ENH: check lack of hole in check_api_dict

==

numpy/core/code_generators/genapi2.py
==================
7630f51;David Cournapeau;2009-10-08 13:53:21 +0000;ENH: remove unused and obsolete code.

==

numpy/core/code_generators/generate_numpy_api.py
==================
8c229d5;David Cournapeau;2009-10-08 13:53:06 +0000;ENH: __multiarray_api.h is now entirely generated from api dicts.

==

numpy/core/code_generators/generate_numpy_api.py
==================
1e81b5a;David Cournapeau;2009-10-08 13:52:47 +0000;BUG: fix datetime compilation in separate compilation mode.

==

numpy/core/src/multiarray/datetime.c
==================
66d74b3;David Cournapeau;2009-10-08 13:52:30 +0000;ENH: __multiarray_api.c is now entirely generated from api dicts.

==

numpy/core/code_generators/generate_numpy_api.py
==================
4fbc75a;David Cournapeau;2009-10-08 13:52:10 +0000;ENH: extension_list is now fully generated from api dicts.

==

numpy/core/code_generators/generate_numpy_api.py
==================
d27fe42;David Cournapeau;2009-10-08 13:51:55 +0000;ENH: create a name -> *Api item dict.
This is the first step toward the actual cleaning of the code
generation: we can now gradually generate __multiarray_api* file
 exclusively from the api dict in numpy_api.

==

numpy/core/code_generators/generate_numpy_api.py
==================
dc09605;David Cournapeau;2009-10-08 13:51:37 +0000;ENH: Add a FunctionApi class to handle functions when generating multiarray api boilerplate.

==

numpy/core/code_generators/generate_numpy_api.py
==================
0fbe4ed;David Cournapeau;2009-10-08 13:51:21 +0000;ENH: handle bool values variable as other items of the API.

==

numpy/core/code_generators/generate_numpy_api.py
==================
a539040;David Cournapeau;2009-10-08 13:51:06 +0000;ENH: rename classes to output strings to avoid confusion with similarly name classes.

==

numpy/core/code_generators/generate_numpy_api.py
==================
75e95e8;David Cournapeau;2009-10-08 13:50:49 +0000;ENH: use our own generate_api_func - we will simplify it later.

==

numpy/core/code_generators/generate_numpy_api.py
==================
3ca2ff7;David Cournapeau;2009-10-08 13:50:29 +0000;ENH: rename decl_str to a more meaningful name.

==

numpy/core/code_generators/generate_numpy_api.py
==================
e8d2567;David Cournapeau;2009-10-08 13:50:14 +0000;ENH: the whole PyArray_API is now automatically generated for __multiarray_api.c.

==

numpy/core/code_generators/generate_numpy_api.py
==================
04434b1;David Cournapeau;2009-10-08 13:49:59 +0000;We do not use multiarray_api_order.txt anymore, only api dicts.

==

numpy/core/code_generators/genapi.py
numpy/core/code_generators/genapi2.py
numpy/core/code_generators/generate_numpy_api.py
==================
1398866;David Cournapeau;2009-10-08 13:49:37 +0000;ENH: change indexes to some datetime funcs to stay compatible with trunk.

==

numpy/core/code_generators/numpy_api.py
==================
377105b;David Cournapeau;2009-10-08 13:49:18 +0000;ENH: generate funcs code from ordered dict as well.

==

numpy/core/code_generators/generate_numpy_api.py
==================
ebed8f8;David Cournapeau;2009-10-08 13:49:03 +0000;ENH: generate new types (timedelta) from dict as well.
We temporatily disable a few timedelta functions declarations, because
I forgot them before as well: this enables easier comparison for the
time being.

==

numpy/core/code_generators/generate_numpy_api.py
numpy/core/code_generators/numpy_api.py
==================
9d04896;David Cournapeau;2009-10-08 13:48:48 +0000;ENH: use api dict to generate old types code.

==

numpy/core/code_generators/generate_numpy_api.py
==================
f1ec82d;David Cournapeau;2009-10-08 13:48:34 +0000;ENH: automatically generate global var and bool type declaration.

==

numpy/core/code_generators/generate_numpy_api.py
numpy/core/code_generators/numpy_api.py
==================
cbeee2f;David Cournapeau;2009-10-08 13:48:16 +0000;ENH: add ufunc api dict.

==

numpy/core/code_generators/numpy_api.py
==================
efd4c9d;David Cournapeau;2009-10-08 13:47:53 +0000;ENH: split misc_api into global var and bool_values.

==

numpy/core/code_generators/numpy_api.py
==================
52738fd;David Cournapeau;2009-10-08 13:47:27 +0000;ENH: generate first types decl from the type dict.

==

numpy/core/code_generators/generate_numpy_api.py
==================
fba5fcd;David Cournapeau;2009-10-08 13:47:12 +0000;ENH: first step toward generating types declaration from a dict as well.

==

numpy/core/code_generators/generate_numpy_api.py
==================
fe02ec8;David Cournapeau;2009-10-08 13:46:57 +0000;ENH: rename api dict for multiarray to a clearer name.
'numpy_api' is confusing: we have multiarray and ufunc APIs.

==

numpy/core/code_generators/numpy_api.py
==================
92b46e4;David Cournapeau;2009-10-08 13:46:42 +0000;ENH: we now grab PyArray_GetNDArrayCVersion as the other functions.

==

numpy/core/code_generators/generate_numpy_api.py
numpy/core/code_generators/numpy_api_order.txt
numpy/core/src/multiarray/multiarraymodule.c
==================
7fe4014;David Cournapeau;2009-10-08 13:46:23 +0000;ENH: factor out the function to generate func decl.
This is a first step toward more fine control on where to generate which
function.

==

numpy/core/code_generators/genapi.py
==================
d47359f;David Cournapeau;2009-10-08 13:46:08 +0000;ENH: add a series of dictionary with hardcoded ordering for the API.

==

numpy/core/code_generators/numpy_api.py
==================
f8f43c4;David Cournapeau;2009-10-08 13:45:53 +0000;ENH: Put beginning of API declaration out of the h_template.
This is a first step toward generating the full declaration list from a
dict {function_name: index_in_the_api_pointer}.

==

numpy/core/code_generators/generate_numpy_api.py
==================
1860563;David Cournapeau;2009-10-08 13:45:38 +0000;BUG: hack to fix ABI breakage at multiarray level.

==

numpy/core/code_generators/generate_numpy_api.py
==================
5a6985d;David Cournapeau;2009-10-08 13:45:20 +0000;ENH: return the number of generated items in add_api_list, so that we can reuse it as an offset later.

==

numpy/core/code_generators/genapi.py
==================
2cd3a73;David Cournapeau;2009-10-08 13:44:57 +0000;ENH: put type declaration in separate function.

==

numpy/core/code_generators/generate_numpy_api.py
==================
06c8394;David Cournapeau;2009-10-08 13:44:42 +0000;ENH: separate type list into old and new list.

==

numpy/core/code_generators/generate_numpy_api.py
==================
eee844a;Travis Oliphant;2009-10-08 12:23:33 +0000;Fix call to copyswap.

==

numpy/core/src/multiarray/scalartypes.c.src
==================
df4d24c;Travis Oliphant;2009-10-08 12:16:35 +0000;Fix scalar byteswap code to use the copyswap method from the data-type object.

==

numpy/core/src/multiarray/scalartypes.c.src
==================
b35e174;Stefan van der Walt;2009-10-07 18:52:52 +0000;Add comment on the simplification of IsAligned().

==

numpy/core/src/multiarray/common.c
==================
de573b4;Stefan van der Walt;2009-10-07 18:49:59 +0000;Revert some of David's patches pushed accidentally.

==

numpy/core/code_generators/genapi.py
numpy/core/code_generators/generate_numpy_api.py
==================
73aacc3;Stefan van der Walt;2009-10-07 18:42:51 +0000;ENH: return the number of generated items in add_api_list, so that we can reuse it as an offset later.

==

numpy/core/code_generators/genapi.py
==================
0835d13;Stefan van der Walt;2009-10-07 18:42:04 +0000;ENH: put type declaration in separate function.

==

numpy/core/code_generators/generate_numpy_api.py
==================
ca32c6b;Stefan van der Walt;2009-10-07 18:41:13 +0000;ENH: separate type list into old and new list.

==

numpy/core/code_generators/generate_numpy_api.py
==================
19edd80;Stefan van der Walt;2009-10-07 13:23:59 +0000;Remove special cases for PyArray_VOID and PyArray_STRING in _IsAligned [patch by Hans-Andreas Engel].

==

numpy/core/src/multiarray/common.c
==================
eda9783;David Cournapeau;2009-10-07 03:32:26 +0000;BUG: remote NPY_INLINE define from numpyconfig.h template, as we now define it 'dynamically' in ndarrayobject.h.

==

numpy/core/include/numpy/numpyconfig.h.in
==================
a14fc9c;David Cournapeau;2009-10-06 06:44:35 +0000;BUG: wrongly used int for looping instead of npy_intp in neighborhood iterator header.

==

numpy/core/include/numpy/_neighborhood_iterator_imp.h
==================
6386708;pierregm;2009-10-06 03:47:07 +0000;* _iotools.StringConverter   - use '1' instead of '0' to test the update   - add `iterupgrade` to upgrade from an iterator * io.genfromtxt (bug #1212)   - use `iterupgrade` to upgrade the converters, and reprocess if there's a problem to catch the offending line

==

numpy/lib/_iotools.py
numpy/lib/io.py
numpy/lib/tests/test_io.py
==================
9a41e77;David Cournapeau;2009-10-05 07:55:39 +0000;ENH: configure NPY_INLINE when the header is read, not at build time.
We configured the macro NPY_INLINE (for portable inline) at numpy build
time, but this problematic when a numpy extension is built with a
different compiler than the one used to build numpy itsel (e.g. building
numpy with mingw, but building a numpy extension with MS compiler).
Instead, the macro is defined everytime npy_common.h is read.

==

numpy/core/SConscript
numpy/core/include/numpy/npy_common.h
numpy/core/setup.py
==================
31de18a;pierregm;2009-10-05 06:46:22 +0000;* Add warnings to genfromtxt describing inconsistencies in the number of columns (bug #1212)

==

numpy/lib/_iotools.py
numpy/lib/io.py
numpy/lib/tests/test_io.py
==================
3cebdec;Pauli Virtanen;2009-10-04 09:25:28 +0000;Proper escaping in doc.byteswapping

==

numpy/doc/byteswapping.py
==================
addbc4b;Pauli Virtanen;2009-10-03 20:45:31 +0000;Move some docstrings to add_newdocs

==

numpy/add_newdocs.py
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/umathmodule.c.src
==================
fb16e71;Pauli Virtanen;2009-10-03 18:53:55 +0000;doc: enable sphinx.ext.doctest extension

==

doc/source/conf.py
==================
7e04bd5;Matthew Brett;2009-10-03 17:39:24 +0000;Small doc rephrase

==

numpy/doc/byteswapping.py
==================
3e1dd88;Matthew Brett;2009-10-03 16:32:21 +0000;ENH: add byteswapping tutorial

==

doc/source/user/basics.byteswapping.rst
doc/source/user/basics.rst
numpy/doc/byteswapping.py
==================
d966593;Pauli Virtanen;2009-10-02 19:40:02 +0000;Make doc build to work again

==

doc/Makefile
numpy/add_newdocs.py
==================
ba1c79f;Pauli Virtanen;2009-10-02 19:38:35 +0000;Final doc import cleanups. Thanks to all contributors for the preceding commits!
There are still some docstrings in the queue -- those'll be committed in
later.

==

doc/source/user/c-info.beyond-basics.rst
numpy/__init__.py
==================
7587f14;Pauli Virtanen;2009-10-02 19:37:48 +0000;Regenerate mtrand.c

==

numpy/random/mtrand/mtrand.c
==================
c6e430d;Pauli Virtanen;2009-10-02 19:37:07 +0000;Docstring update: random

==

numpy/random/mtrand/mtrand.pyx
==================
094a81e;Pauli Virtanen;2009-10-02 19:36:37 +0000;Docstring update: core

==

numpy/core/arrayprint.py
numpy/core/code_generators/ufunc_docstrings.py
numpy/core/defchararray.py
numpy/core/fromnumeric.py
numpy/core/getlimits.py
numpy/core/machar.py
numpy/core/memmap.py
numpy/core/numeric.py
numpy/core/numerictypes.py
numpy/core/records.py
==================
d8f0614;Pauli Virtanen;2009-10-02 19:34:56 +0000;Docstring update: ma

==

numpy/ma/core.py
numpy/ma/extras.py
==================
d1572e2;Pauli Virtanen;2009-10-02 19:34:10 +0000;Docstring update: linalg

==

numpy/linalg/linalg.py
==================
474d013;Pauli Virtanen;2009-10-02 19:33:33 +0000;Docstring update: lib

==

numpy/lib/_datasource.py
numpy/lib/_iotools.py
numpy/lib/arraysetops.py
numpy/lib/arrayterator.py
numpy/lib/financial.py
numpy/lib/format.py
numpy/lib/function_base.py
numpy/lib/index_tricks.py
numpy/lib/io.py
numpy/lib/polynomial.py
numpy/lib/scimath.py
numpy/lib/stride_tricks.py
numpy/lib/twodim_base.py
numpy/lib/type_check.py
numpy/lib/utils.py
==================
f1e3392;Pauli Virtanen;2009-10-02 19:32:38 +0000;Docstring update: testing

==

numpy/testing/decorators.py
numpy/testing/nosetester.py
numpy/testing/utils.py
==================
0f17bf7;Pauli Virtanen;2009-10-02 19:31:52 +0000;Docstring update: matrixlib

==

numpy/matrixlib/defmatrix.py
==================
94b196f;Pauli Virtanen;2009-10-02 19:31:17 +0000;Docstring update: numpy.doc

==

numpy/doc/__init__.py
numpy/doc/broadcasting.py
numpy/doc/constants.py
numpy/doc/structured_arrays.py
==================
bede419;Pauli Virtanen;2009-10-02 19:30:47 +0000;Docstring update: fft

==

numpy/fft/fftpack.py
numpy/fft/helper.py
numpy/fft/info.py
==================
30d4be0;Pauli Virtanen;2009-10-02 19:30:11 +0000;Docstring update: add_newdocs.py

==

numpy/add_newdocs.py
==================
65cc082;Pauli Virtanen;2009-10-02 19:29:38 +0000;Docstring update: doc/source/reference

==

doc/source/reference/arrays.classes.rst
doc/source/reference/arrays.scalars.rst
doc/source/reference/c-api.array.rst
doc/source/reference/c-api.ufunc.rst
doc/source/reference/maskedarray.baseclass.rst
doc/source/reference/routines.array-creation.rst
doc/source/reference/routines.io.rst
doc/source/reference/ufuncs.rst
==================
e434cd5;Pauli Virtanen;2009-10-02 19:28:35 +0000;Docstring update: doc/source/user

==

doc/source/user/index.rst
doc/source/user/install.rst
doc/source/user/introduction.rst
doc/source/user/whatisnumpy.rst
==================
1521f66;Pauli Virtanen;2009-10-02 19:27:46 +0000;Docstring updates, part 1

==

numpy/add_newdocs.py
numpy/core/code_generators/ufunc_docstrings.py
numpy/core/fromnumeric.py
numpy/core/numeric.py
numpy/lib/arraysetops.py
numpy/lib/function_base.py
numpy/lib/twodim_base.py
numpy/lib/type_check.py
numpy/linalg/linalg.py
numpy/ma/core.py
numpy/random/mtrand/mtrand.pyx
==================
8c7d1bc;Travis Oliphant;2009-10-01 15:08:42 +0000;Add a tool for determining active SVN committers.

==

tools/commitstats.py
==================
5932ddd;David Cournapeau;2009-10-01 05:50:10 +0000;Add a pkg_path option to add_sconcript.
This is necessary to handle some cases where scons scripts and packages
are not in the same directory.

==

numpy/distutils/command/scons.py
numpy/distutils/misc_util.py
==================
db41933;David Cournapeau;2009-10-01 05:49:54 +0000;Put scons data into its own class.

==

numpy/distutils/command/scons.py
numpy/distutils/misc_util.py
numpy/distutils/numpy_distribution.py
==================
2822783;Charles Harris;2009-09-30 22:40:02 +0000;Add regression test for ticker #1243.

==

numpy/lib/tests/test_regression.py
==================
68e62cc;Charles Harris;2009-09-30 20:40:40 +0000;Fix ticket #1243. Patch from gnutino.

==

numpy/lib/utils.py
==================
6db651b;Pearu Peterson;2009-09-30 14:05:49 +0000;Update system_info.py for new files in Lapack 3.2.1.

==

numpy/distutils/system_info.py
==================
07b0347;Charles Harris;2009-09-27 15:42:23 +0000;Apply patch from cmattoon to change '/' to '//'. Closes ticket #1230.

==

numpy/core/numerictypes.py
==================
af37d0f;Charles Harris;2009-09-27 14:39:33 +0000;Apply patch from Luca Citi to Speed up some reduce ufuncs. Closes ticket #1237.

==

numpy/core/src/umath/loops.c.src
==================
9af578f;Pauli Virtanen;2009-09-26 17:43:49 +0000;Fix remaining references to numpy.core.defmatrix

==

doc/source/reference/maskedarray.baseclass.rst
numpy/add_newdocs.py
numpy/ma/API_CHANGES.txt
numpy/matlib.py
==================
49a78a3;David Cournapeau;2009-09-26 10:19:21 +0000;BUG: fix c++-style comment.

==

numpy/core/include/numpy/ndarrayobject.h
==================
79eaf2c;Charles Harris;2009-09-23 23:52:09 +0000;Remove hard tabs and trailing whitespace. Code style cleanups.

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/multiarray/descriptor.c
==================
6863d00;Travis Oliphant;2009-09-23 22:19:50 +0000;Fix typo in new _is_tuple_of_integers function.

==

numpy/core/src/multiarray/descriptor.c
==================
ab5776e;Travis Oliphant;2009-09-23 22:15:10 +0000;Fix bug in array descriptor conversion when third argument to record array is a tuple of array scalars.

==

numpy/core/_internal.py
numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/multiarray/descriptor.c
==================
65d6067;Charles Harris;2009-09-23 02:17:03 +0000;Apply Luca's fixes for ticket #1229.

==

numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/item_selection.c
==================
e36fed2;David Cournapeau;2009-09-22 07:57:09 +0000;Only enable WIN64 warning if built with mingw.

==

numpy/core/src/multiarray/multiarraymodule.c
==================
31c7597;David Cournapeau;2009-09-22 02:42:47 +0000;BUG: fix atan2 and hypot when built with MS tools.
MS mathlib atan2 and hypot are broken, so we disable them and use our own.

==

numpy/core/npy_config.h
==================
d48a4fa;David Cournapeau;2009-09-22 01:23:24 +0000;wrap config header with npy_config.h
We need to "unconfigure" some things on some platforms - this will be done in
npy_config.h, which should always be included instead of config.h

==

numpy/core/npy_config.h
numpy/core/setup.py
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/buffer.c
numpy/core/src/multiarray/calculation.c
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/conversion_utils.c
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/flagsobject.c
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/hashdescr.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/number.c
numpy/core/src/multiarray/numpyos.c
numpy/core/src/multiarray/refcount.c
numpy/core/src/multiarray/scalarapi.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/multiarray/sequence.c
numpy/core/src/multiarray/shape.c
numpy/core/src/multiarray/ucsnarrow.c
numpy/core/src/multiarray/usertypes.c
numpy/core/src/npymath/npy_math.c.src
numpy/core/src/umath/loops.c.src
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/umath_tests.c.src
numpy/core/src/umath/umathmodule.c.src
==================
7456ec4;Pauli Virtanen;2009-09-21 18:24:20 +0000;sphinxext: bump numpydoc version, fix build bug

==

doc/sphinxext/setup.py
==================
c6bd244;David Cournapeau;2009-09-21 10:28:14 +0000;BUG: fix list/tuple handling in test_almost_equal.
We now forward tuple/list instances to test_array_almost_equal.

==

numpy/testing/utils.py
==================
d16426e;David Cournapeau;2009-09-21 09:42:05 +0000;ENH: add bypass mode to scons build.
On windows, most C99 functions are not available, so checking for them is
wasteful. We still don't want to add platform-specific checks, but we add a
mode so that we skip the checks if requested.

==

numpy/core/SConscript
==================
5765828;David Cournapeau;2009-09-21 07:51:46 +0000;BUG: fix f2py generated code for MSVC 9.
MSVC already define min/max macros in standard headers, which causes trouble
when f2py redefines them.

==

numpy/f2py/cfuncs.py
==================
13bcd67;David Cournapeau;2009-09-19 15:57:26 +0000;Add debug option to scons command.

==

numpy/distutils/command/scons.py
==================
6817958;David Cournapeau;2009-09-19 10:05:02 +0000;Fix escaping backslash when parsing .ini files.
We need to escape them in variable substitution and interpolation to make it
work on windows where \ is the path separator.

==

numpy/distutils/npy_pkg_config.py
==================
aabe134;David Cournapeau;2009-09-19 09:41:55 +0000;Do not escape path separator when generating npymath.ini
The escaping is handled in numscons SubstInFile builder for scons build, and is
not needed by distutils build.

==

numpy/core/SConscript
==================
5032b52;David Cournapeau;2009-09-18 10:10:39 +0000;Fix svn revision parsing under win32.

==

setup.py
==================
599b0f1;David Cournapeau;2009-09-18 09:59:24 +0000;Rename matrx to matrixlib.
I forgot to commit the name change suggested by Stefan.  You need to
clean build/install directory when updating to this version.

==

numpy/__init__.py
numpy/lib/index_tricks.py
numpy/linalg/linalg.py
numpy/matrixlib/__init__.py
numpy/matrixlib/defmatrix.py
numpy/matrixlib/setup.py
numpy/matrixlib/setupscons.py
numpy/matrixlib/tests/test_defmatrix.py
numpy/matrixlib/tests/test_multiarray.py
numpy/matrixlib/tests/test_numeric.py
numpy/matrixlib/tests/test_regression.py
numpy/matrx/__init__.py
numpy/matrx/defmatrix.py
numpy/matrx/setup.py
numpy/matrx/setupscons.py
numpy/matrx/tests/test_defmatrix.py
numpy/matrx/tests/test_multiarray.py
numpy/matrx/tests/test_numeric.py
numpy/matrx/tests/test_regression.py
numpy/setup.py
numpy/setupscons.py
==================
957cd79;David Cournapeau;2009-09-17 09:22:27 +0000;Add option to import user environment into numscons.

==

numpy/distutils/command/scons.py
==================
2eae961;David Cournapeau;2009-09-16 07:15:42 +0000;Move masked array test out of numpy.core.

==

numpy/core/tests/test_numeric.py
numpy/ma/tests/test_core.py
==================
364f7b8;David Cournapeau;2009-09-16 07:15:21 +0000;All non core regressions tests moved to their respective modules.

==

numpy/core/__init__.py
numpy/core/shape_base.py
numpy/core/tests/test_regression.py
numpy/core/tests/test_shape_base.py
numpy/lib/function_base.py
numpy/lib/polynomial.py
numpy/lib/shape_base.py
numpy/lib/tests/test_regression.py
numpy/lib/tests/test_shape_base.py
numpy/matrx/tests/test_regression.py
numpy/oldnumeric/tests/test_regression.py
numpy/testing/utils.py
==================
064d504;David Cournapeau;2009-09-16 07:14:48 +0000;Move finfo into core.

==

numpy/core/__init__.py
numpy/core/getlimits.py
numpy/core/machar.py
numpy/core/tests/test_getlimits.py
numpy/core/tests/test_machar.py
numpy/lib/__init__.py
numpy/lib/getlimits.py
numpy/lib/machar.py
numpy/lib/polynomial.py
numpy/lib/tests/test_getlimits.py
numpy/lib/tests/test_machar.py
numpy/lib/type_check.py
==================
1c321de;David Cournapeau;2009-09-16 07:14:18 +0000;Move ma/matrix regressions out of numpy.core tests.

==

numpy/core/tests/test_regression.py
numpy/ma/tests/test_regression.py
numpy/matrx/tests/test_regression.py
==================
5b6db2f;David Cournapeau;2009-09-16 07:13:57 +0000;Do not use eye in numpy.core tests.

==

numpy/core/tests/test_multiarray.py
==================
0e1ce50;David Cournapeau;2009-09-16 07:13:42 +0000;Move view tests using matrix from core into matrx module.

==

numpy/core/tests/test_multiarray.py
numpy/matrx/tests/test_multiarray.py
==================
f72c2df;David Cournapeau;2009-09-16 07:13:23 +0000;Move linspace and logspace into core.

==

numpy/core/__init__.py
numpy/core/function_base.py
numpy/core/tests/test_function_base.py
numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_index_tricks.py
==================
a0a2b2b;David Cournapeau;2009-09-16 07:13:02 +0000;Import issubdtype from numpy.core directly so that testing.utils does not depend on numpy.lib.

==

numpy/core/numerictypes.py
numpy/testing/utils.py
==================
fe002b2;David Cournapeau;2009-09-16 07:12:46 +0000;Move matrix class into its own module.

==

numpy/__init__.py
numpy/core/__init__.py
numpy/core/defmatrix.py
numpy/core/tests/test_defmatrix.py
numpy/core/tests/test_numeric.py
numpy/lib/index_tricks.py
numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_shape_base.py
numpy/linalg/linalg.py
numpy/matrx/__init__.py
numpy/matrx/defmatrix.py
numpy/matrx/setup.py
numpy/matrx/setupscons.py
numpy/matrx/tests/test_defmatrix.py
numpy/matrx/tests/test_numeric.py
numpy/setup.py
numpy/setupscons.py
==================
ec7f9dc;David Cournapeau;2009-09-16 07:09:38 +0000;ENH: Fix some more uninitialized vars.

==

numpy/fft/fftpack_litemodule.c
numpy/lib/src/_compiled_base.c
numpy/linalg/lapack_litemodule.c
numpy/numarray/_capi.c
==================
30a0e8e;David Cournapeau;2009-09-16 07:09:07 +0000;ENH: fix a few unused/missing initialized warnings.

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/buffer.c
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/flagsobject.c
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/umath_tests.c.src
==================
4118f14;David Cournapeau;2009-09-16 07:08:43 +0000;Put 'internally public' datetime functions in _datetime header.
We use _datetime.h to avoid clashes with python datetime.h

==

numpy/core/src/multiarray/_datetime.h
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/datetime.c
==================
fc22e9d;David Cournapeau;2009-09-16 07:08:26 +0000;BUG: fix separate compilation mode with distutils.
datetime.c was not included in setup.py for multiarray in the case of
separate compilation, hence missing symbols.

==

numpy/core/setup.py
==================
eba8839;David Cournapeau;2009-09-16 04:50:52 +0000;BUG: fix #1194.

==

numpy/distutils/command/build_src.py
==================
28f1a24;David Cournapeau;2009-09-15 02:05:40 +0000;Remove useless f2py debug print.

==

numpy/f2py/setupscons.py
==================
c2606d2;David Cournapeau;2009-09-15 01:55:34 +0000;Use hashlib instead of md5 if available in code generator.

==

numpy/core/code_generators/genapi.py
==================
531f1f9;David Cournapeau;2009-09-14 13:20:58 +0000;BUG: fix clib install directory for scons command.

==

numpy/distutils/command/scons.py
==================
5ccae03;David Cournapeau;2009-09-14 09:44:29 +0000;Start adding library options for scons option.

==

numpy/distutils/command/scons.py
==================
a7be8bf;David Cournapeau;2009-09-14 09:44:13 +0000;Re-indent scons command options.

==

numpy/distutils/command/scons.py
==================
2f6604a;David Cournapeau;2009-09-14 09:43:57 +0000;Further whitespace/tab fixes.

==

numpy/distutils/command/scons.py
==================
fedf457;David Cournapeau;2009-09-14 09:43:43 +0000;Move scons call command line building into its own private function.

==

numpy/distutils/command/scons.py
==================
335aa25;David Cournapeau;2009-09-14 09:43:27 +0000;Fix tab/space issue in scons command.

==

numpy/distutils/command/scons.py
==================
5b15eb7;David Cournapeau;2009-09-14 09:22:11 +0000;Do not import pyrex in distutils unless there are some pyrex source files.

==

numpy/distutils/command/build_src.py
==================
dbd30d1;Charles Harris;2009-09-14 03:02:33 +0000;Style cleanups. 1) Remove hard tabs. 2) Remove trailing white space. 3) Reformat comments 4) Move datetime code.
The datetime code probably needs some reorganization.

==

numpy/core/src/multiarray/arraytypes.c.src
==================
dc444e1;Pauli Virtanen;2009-09-12 22:58:58 +0000;Remove trailing comma from enum (for c89-ification).

==

numpy/core/include/numpy/npy_common.h
==================
ce9f5ac;David Cournapeau;2009-09-09 00:51:59 +0000;BUG: we were protecting c++ and fortran compiler path twice, which made scons interpret the path as target.

==

numpy/distutils/command/scons.py
==================
680190a;David Cournapeau;2009-09-09 00:49:49 +0000;Tell scons whether we are in bypass mode or not.

==

numpy/distutils/command/scons.py
==================
2d078a1;David Cournapeau;2009-09-09 00:48:13 +0000;Do not pass compiler path options to scons if they were not set.

==

numpy/distutils/command/scons.py
==================
d00fe70;David Cournapeau;2009-09-09 00:47:03 +0000;Require numscons 0.11 or above.

==

numpy/distutils/command/scons.py
==================
3ecba7e;David Cournapeau;2009-09-09 00:45:52 +0000;Add a bypass option to scons command.
We sometimes want to bypass distutils compiler detection, and the bypass option
tells the scons command to do exactly that. The compiler options are simply
passed directly to scons, which will then try to to detect the compiler from
there.

==

numpy/distutils/command/scons.py
==================
a3c5de2;David Cournapeau;2009-09-09 00:44:39 +0000;Handle None in protect path.

==

numpy/distutils/command/scons.py
==================
cc9799e;David Cournapeau;2009-09-09 00:43:34 +0000;Add user options for compilers in scons command.
When removing build_ext options, we removed the compiler options as well. We
add the compiler options back, and treat C, C++ and Fortran compilers as
separate.

==

numpy/distutils/command/scons.py
==================
36069a8;David Cournapeau;2009-09-09 00:42:30 +0000;Always set up scons_* compilers, and use those when building the scons command call.

==

numpy/distutils/command/scons.py
==================
24def43;David Cournapeau;2009-09-09 00:41:35 +0000;Do not reuse build_ext options - most do not make sense for scons command.

==

numpy/distutils/command/scons.py
==================
0dc662a;David Cournapeau;2009-09-09 00:40:43 +0000;Remove infunc imports.

==

numpy/distutils/command/scons.py
==================
bca5689;David Cournapeau;2009-09-09 00:39:44 +0000;Refactor numscons check in scons command.

==

numpy/distutils/command/scons.py
==================
300efd0;David Cournapeau;2009-09-09 00:38:39 +0000;Move compiler initialization into their own private functions.

==

numpy/distutils/command/scons.py
==================
3a3b5e0;David Cournapeau;2009-09-09 00:37:14 +0000;Move import at the top of the file.

==

numpy/distutils/command/scons.py
==================
d4eb873;pierregm;2009-09-08 19:31:52 +0000;Optimize ma.masked_invalid (on a suggestion from E.Firing)

==

numpy/ma/core.py
==================
897823b;David Cournapeau;2009-09-07 07:58:51 +0000;BUG: fix separate compilation
move datetime-related fmin/fmax macros to loops.h from loops.c, as
only loops.h.src is seen during separate compilation.

==

numpy/core/src/umath/loops.c.src
numpy/core/src/umath/loops.h
numpy/core/src/umath/loops.h.src
==================
5304db4;David Cournapeau;2009-09-07 07:58:34 +0000;Style change in ufunc loops decl.

==

numpy/core/src/umath/loops.h.src
==================
746b9fc;David Cournapeau;2009-09-07 07:58:19 +0000;Fix DATETIME and TIMEDELTA buggy loops declarations.

==

numpy/core/src/umath/loops.h
numpy/core/src/umath/loops.h.src
==================
94201ad;David Cournapeau;2009-09-07 07:57:59 +0000;Rename loops.h.src.unused as we actually need it.

==

numpy/core/src/umath/loops.h.src
numpy/core/src/umath/loops.h.src.unused
==================
78a8678;Charles Harris;2009-09-03 19:48:42 +0000;Add test for ticket #1217.

==

numpy/core/tests/test_regression.py
==================
019b485;Charles Harris;2009-09-03 15:48:39 +0000;Fix for ticket #1217, crash in lexsort.

==

numpy/core/src/multiarray/item_selection.c
==================
79fe820;Charles Harris;2009-09-03 03:15:24 +0000;Add support for MIPS.Thanks go to r0bertz.

==

numpy/core/include/numpy/npy_cpu.h
numpy/core/include/numpy/npy_endian.h
==================
683a8d0;Robert Kern;2009-09-02 21:11:33 +0000;BUG: fix the detection of architectures on OS X.

==

numpy/distutils/fcompiler/gnu.py
==================
2fcc13a;David Cournapeau;2009-08-31 17:11:56 +0000;Fix separate compilation mode after datetime merge.

==

numpy/core/SConscript
numpy/core/src/multiarray/datetime.c
==================
fd935a0;David Cournapeau;2009-08-31 17:11:52 +0000;Add copysign declaration for ufunc loop.

==

numpy/core/src/umath/loops.h
numpy/core/src/umath/loops.h.src.unused
==================
ab58540;David Cournapeau;2009-08-31 17:11:51 +0000;Add datetime ufunc declarations.

==

numpy/core/src/umath/loops.h
numpy/core/src/umath/loops.h.src.unused
==================
bbe188e;pierregm;2009-08-30 18:08:08 +0000;* Bugfix for ticket #1207

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
cb95580;David Cournapeau;2009-08-30 06:31:50 +0000;Fix C99-style variable declaration.

==

numpy/core/src/umath/ufunc_object.c
==================
1df2235;Pauli Virtanen;2009-08-29 18:37:35 +0000;Fix #1168: fix functionality broken in r7132, and make get_package_path more robust

==

numpy/testing/nosetester.py
==================
3253b06;David Cournapeau;2009-08-29 17:21:49 +0000;Do not try to include site.cfg if it does not exist.

==

numpy/distutils/setupscons.py
==================
4fd7a70;David Cournapeau;2009-08-29 17:19:43 +0000;Fix code generators input files inclusion in scons build.

==

numpy/core/setupscons.py
==================
87654fc;Travis Oliphant;2009-08-29 03:01:48 +0000;Fix the recursive call so that it will terminate in DATETIME_setitem and add a few comments describing work to be done.

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/getset.c
==================
aba728e;Charles Harris;2009-08-29 00:08:04 +0000;Make true divide return doubles. Make true divide return nan/infs instead of raise zero divide error.

==

numpy/core/code_generators/generate_umath.py
numpy/core/src/umath/loops.c.src
==================
444fcb1;Travis Oliphant;2009-08-28 22:36:01 +0000;Begin to add feature that allows loops to exclude certain combinations.

==

numpy/distutils/conv_template.py
==================
9e2b3f7;Travis Oliphant;2009-08-28 22:24:36 +0000;Fix the file that generates loops.h to include DATETIME ufuncs.

==

numpy/core/src/umath/loops.h.src.unused
==================
895f277;Travis Oliphant;2009-08-28 22:24:02 +0000;Need to include datetime.h for PyDateTime_IMPORT.

==

numpy/core/src/multiarray/arraytypes.c.src
==================
d8164fd;Travis Oliphant;2009-08-28 22:23:31 +0000;Change '.' to 'P' in generate_umath.

==

numpy/core/code_generators/generate_umath.py
==================
618e2ff;Travis Oliphant;2009-08-28 16:33:44 +0000;Merge of datetime branch r7050:7336 back to trunk.  Basic functionality is implemented, but coercion still needs to be done and ufuncs need to understand the data-type information (right now, it's a dumb addition).  Printing of datetime arrays needs to be improved as well

==
==================
e1a4181;Charles Harris;2009-08-28 16:11:35 +0000;Small style cleanups.

==

numpy/core/src/multiarray/number.c
==================
2b01ee6;Travis Oliphant;2009-08-28 15:36:42 +0000;Re-base the date-time branch back to the trunk.

==
==================
c2191bc;Travis Oliphant;2009-08-28 14:58:59 +0000;Datetime branch compiles and all numpy tests pass.  Ready to be merged back to trunk.  More development still needed, but it can take place in the trunk.

==

numpy/core/_internal.py
numpy/core/src/multiarray/descriptor.c
numpy/core/src/umath/ufunc_object.c
numpy/lib/tests/test_arrayterator.py
==================
5bebcdf;Travis Oliphant;2009-08-27 22:29:39 +0000;Code compiles and some of it seems to work...

==

numpy/core/arrayprint.py
numpy/core/code_generators/generate_numpy_api.py
numpy/core/include/numpy/ndarrayobject.h
numpy/core/numerictypes.py
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/scalartypes.c.src
==================
663b056;Travis Oliphant;2009-08-27 21:05:21 +0000;Add check for NULL.

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/descriptor.c
==================
fddd4b9;David Cournapeau;2009-08-27 19:33:27 +0000;Use subprocess instead of exec_command to detect universal archs of gfortran.

==

numpy/distutils/fcompiler/gnu.py
==================
7134947;David Cournapeau;2009-08-27 19:33:25 +0000;Remove debug print in scons command.

==

numpy/distutils/command/scons.py
==================
2f7ce43;Travis Oliphant;2009-08-27 19:28:44 +0000;Code compiles at least -- no merge with trunk yet.

==

numpy/core/code_generators/numpy_api_order.txt
numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/parse_datetime.c
numpy/core/src/multiarray/scalartypes.c.src
==================
aff438e;Travis Oliphant;2009-08-27 18:45:22 +0000;Trying to get to compile prior to merging changes from trunk.  Coercions still need to be written.

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/parse_datetime.c
==================
aa24bc5;David Cournapeau;2009-08-27 18:32:45 +0000;BUG: fix npy_pkg_config_path variable escaping on windows.
When dealing with path on windows, the backshlashes need to be escaped: quick
replace to avoid trouble when dealing with variables.

==

numpy/distutils/npy_pkg_config.py
==================
6af710f;Charles Harris;2009-08-27 03:24:50 +0000;Add more py3k notes.

==

numpy/core/src/py3k_notes.txt
==================
eb60269;Travis Oliphant;2009-08-26 23:07:44 +0000;Last checkins.

==

numpy/core/src/multiarray/arraytypes.c.src
==================
e1b9782;Travis Oliphant;2009-08-26 23:01:41 +0000;Check-in work for Wednesday.

==

doc/neps/datetime-proposal.rst
numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/parse_datetime.c
numpy/core/src/multiarray/testcalcs.py
==================
c0ccc6a;David Cournapeau;2009-08-26 21:20:00 +0000;Update mingw-w64 support for gfortran.
Gfortran does not append a leading underscore anymore, so the
-fno-leading-underscore is not necessary anymore.

==

numpy/distutils/fcompiler/gnu.py
==================
5e961fa;Charles Harris;2009-08-26 20:08:20 +0000;Fix mirr function and its test. Thanks go to Skipper and Josef.

==

numpy/lib/financial.py
numpy/lib/tests/test_financial.py
==================
ad6d1ce;Charles Harris;2009-08-26 04:11:22 +0000;Comment out failing test until it is decided where the problem lies.

==

numpy/lib/tests/test_financial.py
==================
4176f33;Charles Harris;2009-08-26 03:43:46 +0000;Make some fixes in mirr implementation to avoid overflow in summing booleans. Do some whitespace cleanup.

==

numpy/lib/financial.py
numpy/lib/tests/test_financial.py
==================
183609e;Charles Harris;2009-08-26 02:33:10 +0000;Modify remaining PyTypeObject initializations in core/src. Change PY3K to NPY_PY3K to decrease chances of a name collision.

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/flagsobject.c
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/py3k_notes.txt
numpy/core/src/umath/ufunc_object.c
==================
a7cfefd;Charles Harris;2009-08-26 02:25:18 +0000;Fix build that I busted. Copysign needs to stay on old list also.

==

numpy/core/setup_common.py
==================
ed997cb;Travis Oliphant;2009-08-25 22:08:10 +0000;Stopping for today.  Pick up again tomorrow.  This branch does not compile.

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/parse_datetime.c
==================
885b0dd;Travis Oliphant;2009-08-25 19:00:01 +0000;Intermediate commit.

==

numpy/core/src/multiarray/arraytypes.c.src
==================
0abf640;Darren Dale;2009-08-25 18:10:21 +0000;fix a minor mistake in the previous commit

==

numpy/core/src/multiarray/methods.c
numpy/doc/subclassing.py
==================
ae6aa8d;Darren Dale;2009-08-25 18:04:01 +0000;add comment about __array_prepare__ to 1.4 release notes

==

doc/release/1.4.0-notes.rst
numpy/core/src/multiarray/methods.c
numpy/doc/subclassing.py
==================
f2a723d;Travis Oliphant;2009-08-25 17:41:01 +0000;Intermediate check-in of results.

==

numpy/core/_internal.py
numpy/core/_mx_datetime_parser.py
numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/parse_datetime.c
==================
17828c6;Travis Oliphant;2009-08-25 14:13:14 +0000;Improve test and add a test to Python.

==

numpy/lib/tests/test_financial.py
==================
5c5d5d2;Travis Oliphant;2009-08-25 13:04:09 +0000;Add patch in ticket #1138 which fixes mirr function to be the same as Excel and OO Calc.

==

numpy/lib/financial.py
==================
6f1ad4c;Charles Harris;2009-08-25 08:00:39 +0000;Python 2.6 include defines HAVE_COPYSIGN on fedora 11,so add it to the list of possible conflicts. Maybe we should be prepending a NPY_ to our defines?

==

numpy/core/setup_common.py
==================
7da80a7;Charles Harris;2009-08-25 03:57:00 +0000;Add some notes for the py3k project. These should probably be marked up and moved to docs at some point, but for the time being they are just a convenient scratch pad.

==

numpy/core/src/py3k_notes.txt
==================
5c163c1;Charles Harris;2009-08-24 17:59:47 +0000;Add ifdefs to change python 2.x style type structure to 3.x style. Remove bogus COUNT_ALLOCS initializations. These initializations were incorrect on two counts: the comment says not to initialize them and the variable locations have been incorrect since python 2.6 when another slot was added to the base structure. These mods will be done to the rest of the type initializations in another commit.
Note that the compare slot is reserved in py3k, only rich compares
are used, so this is a change that needs to be made everywhere and
functions that use compares, i.e., searchsorted and non-typespecific
sorts, need to be modified.

==

numpy/core/src/umath/ufunc_object.c
==================
5710171;Charles Harris;2009-08-24 17:35:28 +0000;White space cleanup. Remove unused variables to get rid of warnings. Remove C++ style comments. Coding style cleanups.

==

numpy/core/src/multiarray/multiarray_tests.c.src
==================
9e053da;Darren Dale;2009-08-23 16:30:28 +0000;add support for __array_prepare__

==

doc/source/reference/arrays.classes.rst
doc/source/reference/ufuncs.rst
numpy/add_newdocs.py
numpy/core/src/multiarray/methods.c
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_umath.py
numpy/doc/subclassing.py
numpy/lib/shape_base.py
numpy/linalg/linalg.py
==================
856a936;Pauli Virtanen;2009-08-23 05:25:41 +0000;DOC: clean up numpy.scipy.org
- Change numpy.scipy.org title to 'Numpy' instead of 'numpy.scipy.org'
- Join old_array_packages in the toctree

==

doc/numpy.scipy.org/source/conf.py
doc/numpy.scipy.org/source/index.rst
==================
515736d;Jarrod Millman;2009-08-23 00:31:46 +0000;minor cleanup

==

doc/numpy.scipy.org/source/conf.py
doc/numpy.scipy.org/source/index.rst
==================
b70e2ab;Robert Kern;2009-08-22 23:55:59 +0000;DOC: numpy.scipy.org reST thanks to Kyle Mandli.

==

doc/numpy.scipy.org/source/conf.py
doc/numpy.scipy.org/source/index.rst
doc/numpy.scipy.org/source/old_array_packages.rst
doc/numpy.scipy.org/theme/scipy/layout.html
doc/numpy.scipy.org/theme/scipy/static/numpy_logo.png
doc/numpy.scipy.org/theme/scipy/static/scipy.css
==================
f26788c;Pauli Virtanen;2009-08-22 22:28:51 +0000;Add numpy.scipy.org sphinx project

==

doc/numpy.scipy.org/Makefile
doc/numpy.scipy.org/source/conf.py
doc/numpy.scipy.org/source/index.rst
doc/numpy.scipy.org/theme/scipy/layout.html
doc/numpy.scipy.org/theme/scipy/static/logo.gif
doc/numpy.scipy.org/theme/scipy/static/scipy.css
doc/numpy.scipy.org/theme/scipy/theme.conf
==================
4be3297;Charles Harris;2009-08-12 15:49:49 +0000;Make identity function faster. Closes ticket #1193.

==

numpy/core/numeric.py
==================
da19f3e;dhuard;2009-08-12 14:12:21 +0000;Fixed compatibility issue of histogram with matplotlib 0.91.2

==

numpy/lib/function_base.py
==================
f97cb4c;Charles Harris;2009-08-09 17:30:22 +0000;Add ARM and SuperH architectures.

==

numpy/core/include/numpy/npy_cpu.h
numpy/core/include/numpy/npy_endian.h
==================
33ede51;David Cournapeau;2009-08-07 15:28:01 +0000;Revert "ENH: add a simpled translator without out of bounds handling when the neighborhood is detected to be within the array."
This reverts commit 6d02ccccf90acd9e508513082645da9adc366171.

==

numpy/core/src/multiarray/iterators.c
==================
16713b9;David Cournapeau;2009-08-07 13:24:04 +0000;Update documentation.

==

doc/source/reference/c-api.array.rst
==================
b1b78bc;David Cournapeau;2009-08-07 13:23:48 +0000;ENH: add a simpled translator without out of bounds handling when the neighborhood is detected to be within the array.

==

numpy/core/src/multiarray/iterators.c
==================
1f9788d;David Cournapeau;2009-08-07 13:23:24 +0000;BUG: Fix neighborhood iterators when the neighborhood was strictly within the array.

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/multiarray/iterators.c
numpy/core/tests/test_multiarray.py
==================
61a88eb;David Cournapeau;2009-08-07 13:22:51 +0000;Remove debug/profiling stuff in neighborhood iterators tests.

==

numpy/core/src/multiarray/multiarray_tests.c.src
==================
d4001cf;David Cournapeau;2009-08-07 13:22:15 +0000;Add unit test showing regression in stacked neighborhood iterator.
If a first neigh iterator n1 is created to that the neighborhood is
strictly inside and smaller than the array, the second iterator on top
of it will wrongly use n1 boundaries outside the neighborhood, even if
still within the array.

==

numpy/core/tests/test_multiarray.py
==================
fa317f7;David Cournapeau;2009-08-07 13:21:58 +0000;Remove debug and obsolete junk.

==

numpy/core/include/numpy/_neighborhood_iterator_imp.h
numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/multiarray_tests.c.src
==================
bad523b;David Cournapeau;2009-08-07 13:21:34 +0000;Circular iterator fixed.

==

numpy/core/include/numpy/_neighborhood_iterator_imp.h
numpy/core/src/multiarray/iterators.c
numpy/core/tests/test_multiarray.py
==================
5d180c4;David Cournapeau;2009-08-07 13:20:58 +0000;Add unit tests for stacked neighborhood iterators.

==

numpy/core/src/multiarray/multiarray_tests.c.src
numpy/core/tests/test_multiarray.py
==================
7055fdb;David Cournapeau;2009-08-07 13:20:31 +0000;Stacking neighborhood iterators works for mirror mode.

==

numpy/core/include/numpy/_neighborhood_iterator_imp.h
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/multiarray_tests.c.src
numpy/core/tests/test_multiarray.py
==================
3195a68;David Cournapeau;2009-08-07 13:20:06 +0000;Fix constant and zero/one padding when stacking neighborhood iterator.
Stacking a neighborhood iterator on top of another one now works as expected.

==

numpy/core/include/numpy/_neighborhood_iterator_imp.h
numpy/core/src/multiarray/iterators.c
==================
d717a39;David Cournapeau;2009-08-07 13:19:44 +0000;Implement simple coordinates translate function for basic iterator.

==

numpy/core/src/multiarray/iterators.c
==================
f13d666;David Cournapeau;2009-08-07 13:19:16 +0000;Make bounds a member of the base struct PyArrayIterObject.

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/multiarray/iterators.c
==================
b80758f;David Cournapeau;2009-08-07 13:18:56 +0000;Forward declare PyArrayIterObject
To fix the neighborhood iterator, we need to be able to add a member to
PyArrayIterObject which is a function pointer (which will do the
padding-specific translation coordinates -> data pointer: poor man's
polymorphism). As the function pointer takes an iter object as its first
argument, we need to make a proper declaration of PyArrayIterObject,
instead of using an anonymous struct as previously defined. I am not
sure whether this may break the ABI or not, though.

==

numpy/core/include/numpy/ndarrayobject.h
==================
872966f;David Cournapeau;2009-08-07 13:18:39 +0000;Add test case which highlights current neigh iter misdesign w.r.t walking from bounds.

==

numpy/core/src/multiarray/multiarray_tests.c.src
numpy/core/tests/test_multiarray.py
==================
7c5713d;David Cournapeau;2009-08-07 13:18:18 +0000;Remove vim tag.

==

numpy/core/src/multiarray/multiarray_tests.c.src
==================
0a78665;pierregm;2009-08-06 17:00:23 +0000;* fixed np.ma.average on integersw/ mask (bug #1188)

==

numpy/ma/core.py
numpy/ma/extras.py
numpy/ma/tests/test_extras.py
==================
d0bba52;pierregm;2009-08-06 16:38:54 +0000;* fixed _from_methods to run on ndarrays (bug #1187)

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
99835f4;David Cournapeau;2009-08-04 17:36:35 +0000;Do not finalize install_cmd if already finalized.

==

numpy/distutils/command/build_src.py
==================
e74c00e;David Cournapeau;2009-08-04 16:23:10 +0000;BUG: fix building of npy-pkg-config file so that one can reliably get the install prefix from the install command,

==

numpy/distutils/command/build_src.py
==================
b9b85f8;David Cournapeau;2009-08-04 09:54:03 +0000;Fix typo in install_clib fix.

==

numpy/distutils/command/install_clib.py
==================
bc196b4;David Cournapeau;2009-08-04 09:43:53 +0000;BUG: fix install_clib failure on win32.
When the compiler is customized in build_clib, install_clib did not
reuse it, but created a new instance. Instead, we use the build_clib
compiler if already instanciated.

==

numpy/distutils/command/install_clib.py
==================
e559c89;David Cournapeau;2009-08-04 09:43:28 +0000;Move import at the top of module.

==

numpy/distutils/command/install_clib.py
==================
b0848b7;Charles Harris;2009-08-03 23:08:44 +0000;Hmm, somehow a reference to math.fabs slipped by and didn't show here. Try again.

==

numpy/testing/utils.py
==================
d5ea689;Charles Harris;2009-08-03 22:41:18 +0000;Try another fix for BSD problem. This one uses numpy functions, which is probably not the best...

==

numpy/testing/utils.py
==================
f0e086d;Charles Harris;2009-08-03 22:06:12 +0000;Test fix for BSD buildbot error.

==

numpy/testing/utils.py
==================
2537604;Charles Harris;2009-08-03 21:28:04 +0000;Fix small bug in assert_almost_equal. The comparison of complex numbers is still not quite right because errors can propagate between the real and imaginary parts. They can't be checked separately in general. However, this fix gets rid of the test errors currently showing.

==

numpy/testing/utils.py
==================
6951bcd;Charles Harris;2009-08-03 17:31:58 +0000;Clarify logic for nan comparisons. Some coding style cleanups in arraytypes.c.src. Add documentation to release notes for 1.4.0. Add documentation of sort order to the sort docstring.

==

doc/release/1.4.0-notes.rst
numpy/core/fromnumeric.py
numpy/core/src/multiarray/arraytypes.c.src
==================
6d91277;Charles Harris;2009-08-02 03:33:03 +0000;Change ndarray type comparison to reflect the sort order with nans. Searchsorted should now work with arrays containing nans.

==

numpy/core/src/multiarray/arraytypes.c.src
numpy/core/tests/test_multiarray.py
==================
15f9f69;David Cournapeau;2009-07-28 06:31:46 +0000;BUG: handle inf/nan correctly in assert_array_almost_equal.

==

numpy/testing/tests/test_utils.py
numpy/testing/utils.py
==================
3feb77e;David Cournapeau;2009-07-28 05:52:36 +0000;BUG: fix nan/inf handling for complex dtypes.

==

numpy/testing/tests/test_utils.py
numpy/testing/utils.py
==================
5b2699c;Charles Harris;2009-07-28 03:31:23 +0000;Instantiate exceptions using string argument.

==

numpy/distutils/conv_template.py
==================
a0945f6;Pearu Peterson;2009-07-27 19:27:35 +0000;f2py: fix a bug evaluating parameters with kind function: kind(1.0), kind(1.0d) must be 4, 8, respectively.

==

numpy/f2py/crackfortran.py
==================
0d3aeb0;David Cournapeau;2009-07-27 15:10:30 +0000;Handle complex special values and negative zero.
Complex with nan/inf are correctly handled in assert_equal, as well as negative
zero.

==

numpy/testing/tests/test_utils.py
numpy/testing/utils.py
==================
60fd0b7;David Cournapeau;2009-07-27 15:09:55 +0000;Handle nan and inf in assert_equal.

==

numpy/testing/tests/test_utils.py
numpy/testing/utils.py
==================
0259a49;David Cournapeau;2009-07-27 08:36:46 +0000;Fix header for assert_array_almost_equal.

==

numpy/testing/utils.py
==================
e8b88c2;David Cournapeau;2009-07-27 08:07:48 +0000;BUG: handle nan/inf in assert_approx_equal.

==

numpy/testing/tests/test_utils.py
numpy/testing/utils.py
==================
56caa44;David Cournapeau;2009-07-27 08:07:07 +0000;BUG: assert_array_compare did not raise an exception when the nan indexes of both arguments did not match.

==

numpy/testing/tests/test_utils.py
numpy/testing/utils.py
==================
f49d6d3;David Cournapeau;2009-07-27 08:06:48 +0000;Handle nan and inf in assert_almost_equal.

==

numpy/testing/tests/test_utils.py
numpy/testing/utils.py
==================
a711484;David Cournapeau;2009-07-27 05:49:45 +0000;Add a section in npymath doc about how to link against npymath.

==

doc/source/reference/c-api.coremath.rst
==================
8ccbd46;Charles Harris;2009-07-27 05:43:46 +0000;Add some notes to the 1.4 release document.

==

doc/release/1.4.0-notes.rst
==================
d13418a;David Cournapeau;2009-07-27 04:44:00 +0000;BUG: path sep escaping necessary on windows for numscons build.

==

numpy/core/SConscript
==================
25c9ca8;David Cournapeau;2009-07-27 02:23:43 +0000;BUG: fix our copysign implementation.

==

numpy/core/src/npymath/npy_math.c.src
==================
5019d2c;David Cournapeau;2009-07-27 02:23:15 +0000;Add missing SET_HIGH_WORD and SET_LOW_WORD to do bitwise op on IEEE754 double - needed for our copysign replacement.

==

numpy/core/src/npymath/npy_math_private.h
==================
b5a150d;David Cournapeau;2009-07-27 02:17:58 +0000;Portability: replace typeof-based SWAP macro by type-specific macro, as typeof is a GCC-ism.

==

numpy/core/src/_sortmodule.c.src
==================
6a1efaf;Charles Harris;2009-07-27 01:14:30 +0000;Finish fixing merge hassles.

==

numpy/core/src/_sortmodule.c.src
==================
717c7ac;Charles Harris;2009-07-27 01:14:11 +0000;Make nan types sort to the end. Add test for the new nan sort order.

==

numpy/core/src/_sortmodule.c.src
numpy/core/tests/test_multiarray.py
==================
3ad508a;Charles Harris;2009-07-27 01:13:46 +0000;Eliminate uses of lessequal in sort routines. Replace more macros with inline functions.
Why:

Inline functions don't have side effects. The nan sensitive comparison functions
for complex are also easier to implement as functions than macros.

A longer term goal here is to have a single implementation for each sort type
rather than having separate implementations for scalars and strings, but reaching
that state will require more work.

Caveats:

Some compilers may generate slower code if they don't implement some form of
inlining so it is possible that some of these functions may again end up as
macros at some point.

==

numpy/core/src/_sortmodule.c.src
==================
09d7508;David Cournapeau;2009-07-26 15:55:20 +0000;Fix imports in get_pkg_info/get_info.

==

numpy/distutils/misc_util.py
==================
0fee08c;David Cournapeau;2009-07-26 15:55:01 +0000;Split up get_info so that we get a function which returns the LibraryInfo directly - we can feed that to scons easily.

==

numpy/distutils/misc_util.py
==================
1ee6d19;David Cournapeau;2009-07-26 15:54:43 +0000;BUG: Fix missing return stmt in get_npy_pkg_dir.

==

numpy/distutils/misc_util.py
==================
81ceefc;David Cournapeau;2009-07-26 14:50:36 +0000;Fix npy_pkg_config unit test failures.

==

numpy/distutils/tests/test_npy_pkg_config.py
==================
3b3c159;David Cournapeau;2009-07-26 14:50:12 +0000;'Merge' docstring and reference guide for Distribution methods documentation.

==

doc/source/reference/distutils.rst
numpy/distutils/misc_util.py
==================
fa50cfb;David Cournapeau;2009-07-26 11:22:40 +0000;Use automethod for the functions we added to numpy.distutils.

==

doc/source/reference/distutils.rst
numpy/distutils/misc_util.py
==================
a71977d;David Cournapeau;2009-07-26 11:22:05 +0000;Fix npy_pkg_config script.

==

numpy/distutils/npy_pkg_config.py
==================
9abcc03;David Cournapeau;2009-07-26 11:21:37 +0000;Add documentation + example for npy-pkg-config files.

==

doc/source/reference/distutils.rst
==================
8f8927f;David Cournapeau;2009-07-26 11:21:14 +0000;Add a dirs argument to get_info to look for npy-pkg-config files in additional directories.

==

numpy/distutils/misc_util.py
==================
3645669;David Cournapeau;2009-07-26 11:20:53 +0000;Fix add_installed_library so that install_dir is actually relatively to the current package.

==

numpy/core/setup.py
numpy/core/setupscons.py
numpy/distutils/misc_util.py
==================
f56c11a;David Cournapeau;2009-07-26 11:20:10 +0000;Remove unused mlib_pkg_content function.

==

numpy/core/setup.py
==================
c0dac3c;David Cournapeau;2009-07-26 11:19:53 +0000;Add doc for add_installed_library and add_npy_pkg_config.

==

doc/source/reference/distutils.rst
numpy/core/setup.py
numpy/distutils/misc_util.py
==================
06e3a9b;David Cournapeau;2009-07-26 11:19:00 +0000;Fix returned dict by get_info so that it works with add_extension.

==

numpy/distutils/misc_util.py
numpy/distutils/npy_pkg_config.py
==================
ab6878e;David Cournapeau;2009-07-26 11:18:25 +0000;Fix get_config.

==

numpy/distutils/misc_util.py
numpy/distutils/npy_pkg_config.py
==================
50d010c;David Cournapeau;2009-07-26 11:18:10 +0000;Fix scons build w.r.t pkg-config and installed C lib location.

==

numpy/core/SConscript
numpy/distutils/command/scons.py
==================
ae9596c;David Cournapeau;2009-07-26 11:17:39 +0000;Update numscons build to support pkg-config-like files.

==

numpy/core/SConscript
numpy/distutils/command/scons.py
==================
ee8c167;David Cournapeau;2009-07-26 11:17:11 +0000;Add dummy cflags options for mlib template.

==

numpy/core/mlib.ini.in
==================
a7e9f83;David Cournapeau;2009-07-26 11:16:54 +0000;Add add_installed_pkg_config function, for automatic pkg-config-like generation/handling.

==

numpy/core/npymath.ini.in
numpy/core/setup.py
numpy/distutils/command/build_src.py
numpy/distutils/misc_util.py
numpy/distutils/numpy_distribution.py
==================
5b5f879;David Cournapeau;2009-07-26 11:16:24 +0000;Refactor a bit the code to generate npymath.ini.

==

numpy/core/mlib.ini.in
numpy/core/setup.py
==================
d04e386;David Cournapeau;2009-07-26 11:16:07 +0000;Handle path sep as well in npymath.ini.

==

numpy/core/npymath.ini.in
numpy/core/setup.py
==================
e6000d6;David Cournapeau;2009-07-26 11:15:40 +0000;Move subst_vars as we will need it at several places.

==

numpy/core/setup.py
==================
8786936;David Cournapeau;2009-07-26 11:15:23 +0000;Require 0.10.2 version of numscons - needed for installed C libraries.

==

numpy/distutils/command/scons.py
==================
df57d7c;David Cournapeau;2009-07-26 11:15:00 +0000;Raise a PkgNotFound exception in get_info if the package is not found.

==

numpy/distutils/__init__.py
numpy/distutils/misc_util.py
numpy/distutils/npy_pkg_config.py
==================
681db26;David Cournapeau;2009-07-26 11:14:45 +0000;Add a function get_info to replace get_npymath_info, in a more generic way.

==

numpy/core/setup.py
numpy/distutils/misc_util.py
==================
4b34188;David Cournapeau;2009-07-26 11:14:30 +0000;When built in-place, make sure build_clib is built inplace too.
If numpy is built in-place and used by a third-party, we need to make
sure installable libraries are put in the source directory, to mimic an
install. Whenever build_ext is called with -i option, we call build_clib
with the -i option as well.

==

numpy/distutils/command/build_ext.py
==================
0407363;David Cournapeau;2009-07-26 11:14:11 +0000;Fix typo in add_library.

==

numpy/distutils/misc_util.py
==================
5bedf54;David Cournapeau;2009-07-26 11:13:53 +0000;Add an inplace option to build_clib - this is necessary for using installed C libraries in in-place build.

==

numpy/distutils/command/build_clib.py
==================
5c89ad2;David Cournapeau;2009-07-26 11:13:33 +0000;Refactor function to substitute a dict from an .in file.

==

numpy/core/setup.py
==================
1420289;David Cournapeau;2009-07-26 11:13:06 +0000;Add parse_flags function + some unit tests.

==

numpy/distutils/npy_pkg_config.py
numpy/distutils/tests/test_npy_pkg_config.py
==================
67182cd;David Cournapeau;2009-07-26 11:12:44 +0000;Add two unit-tests for LibraryInfo.

==

numpy/distutils/tests/test_npy_pkg_config.py
==================
ce55f14;David Cournapeau;2009-07-26 11:12:20 +0000;Fix npymath.ini generation, and handle in-place build correctly.

==

numpy/core/setup.py
==================
0c013ae;David Cournapeau;2009-07-26 11:11:56 +0000;Fix whitespaces issues.

==

numpy/distutils/npy_pkg_config.py
==================
aee739d;David Cournapeau;2009-07-26 11:11:37 +0000;Handle NPY_PKG_CONFIG_PATH in our fake pkg-config emulator.

==

numpy/distutils/npy_pkg_config.py
==================
eda2db7;David Cournapeau;2009-07-26 11:11:10 +0000;First attempt at generating .ini file with install-time info.

==

numpy/core/npymath.ini.in
numpy/core/setup.py
numpy/distutils/mlib.ini
numpy/distutils/npymath.ini
==================
35114ae;David Cournapeau;2009-07-26 11:10:32 +0000;Fix mlib.ini generation.

==

numpy/core/setup.py
==================
d6abb98;David Cournapeau;2009-07-26 11:10:15 +0000;Install the mlib.ini file.

==

numpy/core/setup.py
==================
4394847;David Cournapeau;2009-07-26 11:09:47 +0000;Handle variable definition in pkg-config emulator.

==

numpy/distutils/npy_pkg_config.py
==================
404a182;David Cournapeau;2009-07-26 11:09:24 +0000;Deal with multiple locations for one filename.

==

numpy/distutils/npy_pkg_config.py
==================
d0aa151;David Cournapeau;2009-07-26 11:09:08 +0000;Implement a trivial cache mechanism for LibraryInfo instances creation.

==

numpy/distutils/npy_pkg_config.py
==================
88bbeee;David Cournapeau;2009-07-26 11:08:47 +0000;Better design for LibraryInfo, to handle variables redefinition and requirements.

==

numpy/distutils/mlib.ini
numpy/distutils/npy_pkg_config.py
numpy/distutils/npymath.ini
==================
9530c35;David Cournapeau;2009-07-26 11:08:14 +0000;we now implement cflags, libs, variables handling and basic depends - the code is a mess, though.

==

numpy/distutils/mlib.ini
numpy/distutils/npy_pkg_config.py
numpy/distutils/npymath.ini
==================
dc23f77;David Cournapeau;2009-07-26 11:07:42 +0000;Start working on npy_pkg_config, to handle core libraries build issues through a pkg-config-like file.

==

numpy/distutils/npy_pkg_config.py
==================
3e3661d;David Cournapeau;2009-07-26 11:07:26 +0000;Update comment on using install_clib as a subcommand.

==

numpy/distutils/command/install.py
==================
124c2ae;David Cournapeau;2009-07-26 11:06:55 +0000;Minver for numscons is now 0.10.1.

==

numpy/distutils/command/scons.py
==================
8f76e68;David Cournapeau;2009-07-26 11:06:27 +0000;Refactor the code to get top dir relatively to scons build dir.

==

numpy/distutils/command/scons.py
==================
3131612;David Cournapeau;2009-07-26 11:05:56 +0000;Support for installable libraries in numscons.
Numscons has been modified such as clib are now copied (using the
Install builder) where numpy.distutils expect them, and a function has
been added to numpy.distutils so that we can add installable libraries
in setupscons.py scripts (which add the library to the NumpyDistribution
instance).

==

numpy/core/setupscons.py
numpy/distutils/command/scons.py
numpy/distutils/misc_util.py
==================
dd92ae0;David Cournapeau;2009-07-26 11:05:33 +0000;Refactor common code between add_library and add_installed_library.

==

numpy/distutils/misc_util.py
==================
f0ce83f;David Cournapeau;2009-07-26 11:05:10 +0000;Remove dead code.

==

numpy/distutils/misc_util.py
==================
e813d19;David Cournapeau;2009-07-26 11:04:52 +0000;Add get_npymath_info function to reuse npymath outside numpy.

==

numpy/distutils/misc_util.py
==================
bfbb9dd;David Cournapeau;2009-07-26 11:04:24 +0000;Installing a clib now works.
Installable libraries are built exactly like conventional clib (they are
added to the NumpyDistribution instance libraries member, and build_clib
is not aware of the libraries/installable libraries distinction).
Everything is done in the install_clib. The library cannot be used yet
by external code, though.

==

numpy/core/setup.py
numpy/distutils/command/install_clib.py
numpy/distutils/misc_util.py
numpy/distutils/numpy_distribution.py
==================
78de166;David Cournapeau;2009-07-26 11:03:58 +0000;Add a install_clib command.

==

numpy/distutils/command/__init__.py
numpy/distutils/command/install.py
numpy/distutils/command/install_clib.py
numpy/distutils/core.py
==================
2716056;David Cournapeau;2009-07-26 11:03:34 +0000;Add a new function to add installed library - do nothing for now.

==

numpy/core/setup.py
numpy/distutils/misc_util.py
==================
0a34a25;Charles Harris;2009-07-25 23:10:27 +0000;Strange things going on with git/svn interaction. Let's see if they go.

==

numpy/core/src/_sortmodule.c.src
==================
56ba569;Charles Harris;2009-07-25 23:05:54 +0000;Change numeric sorts to use inline functions for comparisons.

==

numpy/core/src/_sortmodule.c.src
==================
b3d2fc2;Charles Harris;2009-07-25 23:05:27 +0000;Change comparison macros to inline functions.

==

numpy/core/src/_sortmodule.c.src
==================
423c81a;Charles Harris;2009-07-25 23:05:12 +0000;Use a != a for finding nan.

==

numpy/core/src/_sortmodule.c.src
==================
90008fe;Charles Harris;2009-07-25 23:04:52 +0000;Test nan sorts.

==

numpy/core/src/_sortmodule.c.src
==================
c0111a8;Charles Harris;2009-07-24 21:34:14 +0000;Code style cleanups.

==

numpy/core/src/_sortmodule.c.src
==================
1f50a2f;Charles Harris;2009-07-24 21:22:05 +0000;Code style cleanups. Use NPY_INLINE for functions we want inline. Replace intp by npy_intp.

==

numpy/core/src/_sortmodule.c.src
==================
cf8817e;Matthew Brett;2009-07-23 21:53:42 +0000;Fixing internal links

==

numpy/doc/subclassing.py
==================
f7ad19b;Matthew Brett;2009-07-23 21:50:44 +0000;After thinking, a more general understanding of slicing etc

==

numpy/doc/subclassing.py
==================
c3c126b;Matthew Brett;2009-07-23 04:19:20 +0000;and more tiny doc typos

==

numpy/doc/subclassing.py
==================
4028921;Matthew Brett;2009-07-23 04:16:42 +0000;Experimenting with __array_wrap__

==

numpy/doc/subclassing.py
==================
aeb8d58;Matthew Brett;2009-07-23 02:22:41 +0000;Tiny doc rearrangement

==

numpy/doc/subclassing.py
==================
53cd4c5;Matthew Brett;2009-07-23 02:20:02 +0000;Further extension of doctests for inheritance

==

numpy/doc/subclassing.py
==================
782ad59;Matthew Brett;2009-07-23 01:11:16 +0000;Small edits to subclassing doc to make classes more explicit

==

numpy/doc/subclassing.py
==================
377ade5;Matthew Brett;2009-07-23 00:37:08 +0000;Moving more to doctests, more explanation of views, slices

==

numpy/doc/subclassing.py
==================
aee35b2;Matthew Brett;2009-07-22 22:43:52 +0000;Moving some examples to doctest format; removed debugging cruft in example

==

numpy/doc/subclassing.py
==================
061580d;Matthew Brett;2009-07-22 22:14:48 +0000;Some clearer explanation of __array_finalize__

==

numpy/doc/subclassing.py
==================
09636b1;pierregm;2009-07-22 18:28:25 +0000;* Fixed __eq__ and __ne__ on masked singleton

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
d8be0c2;Pauli Virtanen;2009-07-22 01:22:41 +0000;numpydoc: really fix docutils < 0.5

==

doc/sphinxext/numpydoc.py
==================
2951b79;Pauli Virtanen;2009-07-22 01:10:21 +0000;numpydoc: fix issue with docutils < 0.5

==

doc/sphinxext/numpydoc.py
==================
32b71d5;David Cournapeau;2009-07-21 12:24:29 +0000;BUG: discrepencies between 2d versions of nieghborhood iterators.
Make sure the 2D versions of the neighborhood iterator increments are
implemented for every boundary mode, and that the default one supports
every out of bound mode.

==

numpy/core/include/numpy/_neighborhood_iterator_imp.h
==================
3ab7627;David Cournapeau;2009-07-21 09:49:34 +0000;Look for already declared configure checks macros in python 2.5.
Python 2.5 already declared HAVE_HYPOT and other similar math funcs, so
look for those declaration to avoid redeclaring those macros ourselves.
Should fix some build warnings.

==

numpy/core/setup.py
numpy/core/setup_common.py
==================
dbbf1bf;David Cournapeau;2009-07-21 09:49:02 +0000;BUG: forgot to add the multiarray_tests extension to distutils build.

==

numpy/core/setup.py
==================
a35153c;David Cournapeau;2009-07-21 09:48:33 +0000;Mention the deprecated decorator in the release notes.

==

doc/release/1.4.0-notes.rst
==================
eb6df7c;David Cournapeau;2009-07-21 06:05:03 +0000;Fix 2.5-isms for deprecated decorator.

==

numpy/testing/decorators.py
==================
56d6091;David Cournapeau;2009-07-21 06:04:44 +0000;BUG: fix python 2.4 build.
Move NUMPY_API tag just above neighborhood iterator ctor, as comments in
between cause parse errors on 2.4.

==

numpy/core/src/multiarray/iterators.c
==================
759e989;David Cournapeau;2009-07-21 06:04:20 +0000;Add versionadded 1.4.0 for deprecated decorator.

==

numpy/testing/decorators.py
==================
5380c94;David Cournapeau;2009-07-21 05:39:37 +0000;Update release notes.

==

doc/release/1.4.0-notes.rst
==================
be0d7ef;David Cournapeau;2009-07-21 05:39:05 +0000;Update doc for neighborhood iterator.

==

doc/source/reference/c-api.array.rst
==================
62b73d8;David Cournapeau;2009-07-21 05:38:34 +0000;Simplify neighborhood iterator API.

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/multiarray_tests.c.src
==================
956ddcf;David Cournapeau;2009-07-21 05:37:47 +0000;Fix whitespace issues.

==

numpy/core/include/numpy/_neighborhood_iterator_imp.h
==================
bf58af8;David Cournapeau;2009-07-21 05:37:21 +0000;Add cicular mode-specific public API to advance/reset pointers.

==

numpy/core/include/numpy/_neighborhood_iterator_imp.h
numpy/core/include/numpy/ndarrayobject.h
==================
97da6e6;David Cournapeau;2009-07-21 05:36:45 +0000;Implement circular mode for neighborhood array iterator.

==

numpy/core/include/numpy/_neighborhood_iterator_imp.h
numpy/core/src/multiarray/iterators.c
numpy/core/tests/test_multiarray.py
==================
38aa61e;David Cournapeau;2009-07-21 05:36:07 +0000;Fix multiarray_tests for multi-dimension inputs + add 2d tests for every implemented padding.

==

numpy/core/src/multiarray/multiarray_tests.c.src
numpy/core/tests/test_multiarray.py
==================
8cd314a;David Cournapeau;2009-07-21 05:35:42 +0000;More tests for neighborhood iterator.
Mirror mode now works for object and basic types.

==

numpy/core/SConscript
numpy/core/include/numpy/_neighborhood_iterator_imp.h
numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/multiarray/multiarray_tests.c
numpy/core/src/multiarray/multiarray_tests.c.src
numpy/core/tests/test_multiarray.py
==================
412a42e;David Cournapeau;2009-07-21 05:34:58 +0000;Fix wrong right bound for neighborhood iterator with constant padding.

==

numpy/core/include/numpy/_neighborhood_iterator_imp.h
==================
edce81e;David Cournapeau;2009-07-21 05:34:35 +0000;Start a multiarray_tests module to test neighborhood iterator.

==

numpy/core/src/multiarray/multiarray_tests.c
==================
3cb0c6d;David Cournapeau;2009-07-21 05:34:14 +0000;Implement mirror padding mode for neighborhood iterator.

==

numpy/core/include/numpy/_neighborhood_iterator_imp.h
numpy/core/include/numpy/ndarrayobject.h
==================
93e0429;David Cournapeau;2009-07-21 05:33:55 +0000;Fix deallocation of iter->constant for padding modes which set it to NULL.

==

numpy/core/src/multiarray/iterators.c
==================
3cccb41;David Cournapeau;2009-07-21 05:33:35 +0000;Fix refcount for object arrays.

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/multiarray/iterators.c
==================
ed12fce;David Cournapeau;2009-07-21 05:33:10 +0000;Start implementing padding modes for neighborhood iterator: 0, 1 and constant padding implemented.

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/multiarray/iterators.c
==================
23cee8f;David Cournapeau;2009-07-21 05:32:41 +0000;Rename zero member to constant.

==

numpy/core/include/numpy/_neighborhood_iterator_imp.h
numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/multiarray/iterators.c
==================
8311cc9;David Cournapeau;2009-07-21 05:23:56 +0000;Add the deprecated decorator to the numpy reference.

==

doc/source/reference/routines.testing.rst
==================
5bda487;David Cournapeau;2009-07-21 05:15:46 +0000;Add a deprecated decorator to avoid cluttering test run output while checking for raised deprecation.

==

numpy/core/tests/test_numeric.py
numpy/testing/decorators.py
==================
6c8e325;David Cournapeau;2009-07-21 01:58:47 +0000;Add our own atan2 function, as a replacement for buggy implementations (like the MS C runtime).

==

numpy/core/src/npymath/npy_math.c.src
==================
2024e81;David Cournapeau;2009-07-21 01:58:21 +0000;BUG: npy_math_private was using some endian-related macros without including the necessary header + type fixes.

==

numpy/core/src/npymath/npy_math_private.h
==================
661ac79;David Cournapeau;2009-07-21 01:57:42 +0000;Add a few more sanity checks for atan2.

==

numpy/core/tests/test_umath.py
==================
a173c47;David Cournapeau;2009-07-20 15:51:07 +0000;Add atan2 tests for special values.

==

numpy/core/tests/test_umath.py
==================
1319b2c;Robert Cimrman;2009-07-20 11:59:40 +0000;Fix to setdiff1d (and masked version) + tests (#1133, by N.C.)

==

numpy/lib/arraysetops.py
numpy/lib/tests/test_arraysetops.py
numpy/ma/extras.py
numpy/ma/tests/test_extras.py
==================
5208725;David Cournapeau;2009-07-20 09:47:30 +0000;BUG: fix C99_FORMATS-related macros definition in both numscons/distutils builds.

==

numpy/core/SConscript
numpy/core/include/numpy/numpyconfig.h.in
numpy/core/setup.py
==================
3297529;David Cournapeau;2009-07-20 08:28:18 +0000;BUG: fix logic OR vs. bitwise OR.

==

numpy/core/src/npymath/npy_math.c.src
==================
0ccbd22;David Cournapeau;2009-07-20 08:15:27 +0000;BUG: Fix numpyconfig subst dict for the case where isnan and co are not available.

==

numpy/core/SConscript
==================
c747e80;David Cournapeau;2009-07-20 05:36:30 +0000;Handle nan entries for hypot.

==

numpy/core/src/npymath/npy_math.c.src
==================
197d941;David Cournapeau;2009-07-20 05:36:01 +0000;Add tests for hypot function.

==

numpy/core/tests/test_umath.py
==================
c041bd9;David Cournapeau;2009-07-20 05:07:37 +0000;Only use npy_-prefixed functions in npy_math.

==

numpy/core/src/npymath/npy_math.c.src
==================
c378f4a;David Cournapeau;2009-07-20 04:42:13 +0000;Change how we decorate npy_math functions.
For platforms without the necessary math functions, we used to first
implement them by ourselves, and then decorate the math function with
npy_ prefix, whether the undecorated functions are from the
implementation or from ourselves.

This is not always practical, because we may want to use our own
implementation even if the platform has one implementation. Instead,
when we define our own implementation, we directly define the decorated
function, and only decorate functions when we use the platform
implementation.

Example: say the function hypot is available on the platform, but buggy.
If we undefine HAVE_HYPOT, in the former scheme, we would have first:

  static double hypot(double x, double y);

And then:

  double npy_hypot(double x, double y);

But this would clash with the platform hypot. By defining directly
hpy_hypot, and put our implementation there, we avoid this clash.

==

numpy/core/src/npymath/npy_math.c.src
==================
2917b57;David Cournapeau;2009-07-20 04:41:53 +0000;Add a few more math functions we forgot to test at configuration stage.

==

numpy/core/setup_common.py
==================
22ff614;David Cournapeau;2009-07-20 04:41:38 +0000;Remove obsolete comments.

==

numpy/core/src/npymath/npy_math.c.src
==================
7101542;David Cournapeau;2009-07-20 04:41:06 +0000;Fix ws issues in npy_math sources.

==

numpy/core/src/npymath/npy_math.c.src
==================
9ac7f1f;David Cournapeau;2009-07-20 03:28:29 +0000;Add version added for npy_copysign + fix doc typo.

==

doc/source/reference/c-api.coremath.rst
==================
e84fbd6;Charles Harris;2009-07-19 17:32:49 +0000;Add parisc and alpha to supported cpus. Patch from armin76, fixes ticket #1178.

==

numpy/core/include/numpy/npy_cpu.h
numpy/core/include/numpy/npy_endian.h
==================
f6554e4;Charles Harris;2009-07-19 04:36:10 +0000;Add a couple of digits to the defined constants in npy_math.h. Because it makes me feel a tad safer with quad precision.

==

numpy/core/include/numpy/npy_math.h
==================
db04d10;Pauli Virtanen;2009-07-18 23:06:38 +0000;numpydoc: add np-* directives

==

doc/sphinxext/README.txt
doc/sphinxext/numpydoc.py
==================
a44e143;pierregm;2009-07-18 20:03:02 +0000;core : fixed MaskedArray.__array_finalize__ when the mask is full of False (bugfix #1166) extras : introduced clump_masked and clump_unmasked

==

numpy/ma/core.py
numpy/ma/extras.py
numpy/ma/tests/test_core.py
numpy/ma/tests/test_extras.py
==================
4beb657;David Cournapeau;2009-07-18 14:58:59 +0000;Update the release notes for 1.4.0.

==

doc/release/1.4.0-notes.rst
==================
122f95b;David Cournapeau;2009-07-18 14:27:15 +0000;Update new correlation support.
Rename PyArray_Acorrelate to PyArray_Correlate2 to follow the current NumPy
convention when adding new function and keeping the old one for backward
compatibility.

Add keyword to correlate to switch old/new behavior instead of adding
acorrelate, which is not discoverable.

Raise a DeprecationWarning when the old behavior is used - old behavior still
the default, though.

==

doc/source/reference/c-api.array.rst
numpy/core/code_generators/numpy_api_order.txt
numpy/core/numeric.py
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_numeric.py
==================
296cb74;Travis Oliphant;2009-07-16 15:08:48 +0000;Fix typecode for date-time.

==

doc/neps/datetime-proposal3.rst
==================
c80006f;Travis Oliphant;2009-07-16 04:29:27 +0000;Fix #728 again.  This time don't use max on a partially-ordered set.

==

numpy/core/numerictypes.py
numpy/core/tests/test_numerictypes.py
==================
ec034e7;Pauli Virtanen;2009-07-12 22:53:28 +0000;Fixed #1168: more robust NoseTester package name detection (patch by Gaël Varoquaux)

==

numpy/testing/nosetester.py
==================
656cca1;Pauli Virtanen;2009-07-12 22:36:33 +0000;Fixed #1162: make matrix_power accept lists etc. as input

==

numpy/core/defmatrix.py
numpy/core/tests/test_defmatrix.py
==================
07af346;Pauli Virtanen;2009-07-12 22:22:45 +0000;Address #1167: faster twodim_base.diag/eye implementation by Luca Citi + tests

==

numpy/lib/tests/test_twodim_base.py
numpy/lib/twodim_base.py
==================
c3a0fb9;Pauli Virtanen;2009-07-11 13:39:58 +0000;numpydoc: fix some unicode issues

==

doc/sphinxext/numpydoc.py
==================
2589ff3;Travis Oliphant;2009-07-10 19:09:25 +0000;Fix date-time arrayscalars to get copy of __frequency__ information.  Handle __frequency__ metadata separately from other kinds of metadata for faster internal handling.  Fix up pickle so that handling of raw datetime metadata is managed correctly.

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/scalarapi.c
numpy/core/src/umath/loops.c.src
==================
8ea0648;Stefan van der Walt;2009-07-08 20:47:05 +0000;Fix argwhere for masked arrays.

==

numpy/core/numeric.py
numpy/core/tests/test_numeric.py
==================
8ba97d8;Stefan van der Walt;2009-07-08 20:46:26 +0000;Improvement to fill_diagonal suggested by Anand Patil.

==

numpy/lib/index_tricks.py
==================
ac0c117;Charles Harris;2009-07-08 17:18:17 +0000;Use npy_fabs instead of fabs in loops.c.src .

==

numpy/core/src/umath/loops.c.src
==================
c1c0533;Robert Cimrman;2009-07-08 15:46:09 +0000;Enhancements to arraysetops (ticket #1133, by Neil Crighton)

==

doc/source/reference/routines.set.rst
numpy/lib/arraysetops.py
numpy/lib/function_base.py
numpy/lib/info.py
numpy/lib/tests/test_arraysetops.py
numpy/ma/extras.py
numpy/ma/tests/test_extras.py
==================
434bc70;Charles Harris;2009-07-07 21:29:44 +0000;MmmKay... Let's see if complex floor divide can be made a bit more robust against some of the buildbots.

==

numpy/core/src/umath/loops.c.src
==================
85dbd6e;Charles Harris;2009-07-07 20:34:55 +0000;Make complex floor_divide more robust for underflow/overflow. Add test of complex floor_divide.

==

numpy/core/src/umath/loops.c.src
numpy/core/tests/test_umath.py
==================
64ae1e8;David Cournapeau;2009-07-07 09:14:09 +0000;Remove debug print committed by mistake.

==

numpy/core/SConscript
==================
1ff9787;David Cournapeau;2009-07-07 09:07:29 +0000;Fix setupscons.py for changed locations of generated header files.

==

numpy/core/setupscons.py
==================
392f28f;David Cournapeau;2009-07-07 09:06:56 +0000;'Install' generated headers for in-place build support.

==

numpy/core/SConscript
==================
f67b0fb;David Cournapeau;2009-07-07 09:06:26 +0000;Fix installed location of generated headers.
Headers and .c files generated for the C API for multiarray and  ufunc
are now put in build_dir/numpy/core/include/numpy instead of
build_dir/numpy/core.

==

numpy/core/SConscript
==================
5e40a34;Charles Harris;2009-07-07 08:56:49 +0000;Try another test fix for complex division. The current one works on my machine but fails on all the buildbots.

==

numpy/core/tests/test_umath.py
==================
8277203;David Cournapeau;2009-07-07 08:22:07 +0000;Fix in-place numscons build.
The generated numpyconfig.h header is 'installed' in the build directory
now, so that one can build C extensions against a numpy built in-place.

==

numpy/core/SConscript
==================
65a78ef;Charles Harris;2009-07-07 02:56:24 +0000;Replace another assert_equal in test_division_umath.

==

numpy/core/tests/test_umath.py
==================
48ba482;Charles Harris;2009-07-07 02:51:18 +0000;Use 1 instead of 1.0, hopefully compiler will convert to correct float type.

==

numpy/core/src/umath/loops.c.src
==================
c764181;Charles Harris;2009-07-07 02:48:23 +0000;Use type extension on fabs.

==

numpy/core/src/umath/loops.c.src
==================
b0b3ee4;Charles Harris;2009-07-07 02:48:06 +0000;Fix test of complex division to use assert_almost_equal.

==

numpy/core/src/umath/loops.c.src
numpy/core/tests/test_umath.py
==================
87cebfd;Charles Harris;2009-07-07 02:30:26 +0000;Revert last change. The problem lies elsewhere. Add test for complex division.

==

numpy/core/src/umath/loops.c.src
numpy/core/tests/test_umath.py
==================
b36a2c1;Charles Harris;2009-07-07 01:54:32 +0000;Oops, branches reversed in fix for ticket #1159. Do it right.

==

numpy/core/src/umath/loops.c.src
==================
b2c38b0;Charles Harris;2009-07-07 01:44:43 +0000;Make complex division more robust against over/under flow. Fixes ticket #1159.

==

numpy/core/src/umath/loops.c.src
==================
fc21cc0;David Cournapeau;2009-07-05 10:49:49 +0000;Remove unnecessary global.c file.

==

numpy/core/src/multiarray/global.c
numpy/core/src/multiarray/multiarraymodule.c
==================
144d790;Pauli Virtanen;2009-07-04 12:59:02 +0000;Fix versioning and inclusion to ref. guide in docs for #1132

==

doc/source/reference/routines.indexing.rst
numpy/lib/index_tricks.py
numpy/lib/twodim_base.py
==================
f826c7b;Stefan van der Walt;2009-07-04 12:45:31 +0000;Add example to savez.

==

numpy/lib/io.py
==================
a3a99e2;Stefan van der Walt;2009-07-04 12:44:54 +0000;Add tests for dictionary interface to NpzFile.

==

numpy/lib/tests/test_io.py
==================
b9b934c;Stefan van der Walt;2009-07-04 12:44:11 +0000;More complete dictionary interface to NpzFile [patch by David Warde-Farley]

==

numpy/lib/io.py
==================
ae6da83;Stefan van der Walt;2009-07-04 12:14:59 +0000;Fix diag_indices_from and add test.

==

numpy/lib/index_tricks.py
numpy/lib/tests/test_index_tricks.py
==================
99df3da;Stefan van der Walt;2009-07-04 12:14:21 +0000;Fix twodim tests.

==

numpy/lib/tests/test_index_tricks.py
numpy/lib/tests/test_twodim_base.py
==================
133e5c2;Stefan van der Walt;2009-07-04 12:13:38 +0000;Add indexing functions by Fernando Perez.

==

numpy/lib/index_tricks.py
numpy/lib/tests/test_index_tricks.py
numpy/lib/tests/test_twodim_base.py
numpy/lib/twodim_base.py
==================
9397ecd;Stefan van der Walt;2009-07-04 10:14:07 +0000;Fix argwhere to work with lists, add tests.

==

numpy/core/numeric.py
numpy/core/tests/test_numeric.py
==================
d597456;Stefan van der Walt;2009-07-04 10:13:21 +0000;Fix typo.

==

doc/sphinxext/README.txt
==================
b9d10c8;Stefan van der Walt;2009-07-04 10:12:45 +0000;Fix typo.

==

doc/TESTS.txt
==================
b8bf964;Stefan van der Walt;2009-07-04 09:56:11 +0000;Remove mentions of TestCase subclassing and simplify.

==

doc/TESTS.txt
==================
bc2a006;Stefan van der Walt;2009-07-04 09:55:36 +0000;Wrap long lines.

==

doc/TESTS.txt
==================
d35eac6;Pauli Virtanen;2009-07-01 20:19:18 +0000;Address #1146: update docstring standard
In addition, drop mentions of the index:: directive -- we are not using
it currently anywhere, and it does not work with Sphinx as-is.

==

doc/HOWTO_DOCUMENT.txt
doc/example.py
==================
251e1db;David Cournapeau;2009-07-01 14:24:11 +0000;Start release notes for 1.4.0.

==

doc/release/1.4.0-notes.rst
==================
dcdf057;David Cournapeau;2009-07-01 14:23:53 +0000;Add doc for copysign in numpy doc.

==

doc/source/reference/c-api.coremath.rst
doc/source/reference/ufuncs.rst
==================
12a7c57;David Cournapeau;2009-07-01 14:23:24 +0000;Add basic tests for copysign.

==

numpy/core/tests/test_umath.py
==================
a1f3eec;David Cournapeau;2009-07-01 14:22:49 +0000;Add copysign ufunc.

==

numpy/core/code_generators/generate_umath.py
numpy/core/code_generators/ufunc_docstrings.py
numpy/core/src/umath/loops.c.src
numpy/core/src/umath/loops.h
==================
8a36ae9;David Cournapeau;2009-07-01 08:42:48 +0000;Add check_type functionality to numpy.distutils.

==

numpy/distutils/command/config.py
==================
9f69bfc;David Cournapeau;2009-07-01 07:07:10 +0000;Add sqrt(2) and 1/sqrt(2) math constants in npymath.

==

numpy/core/include/numpy/npy_math.h
==================
41366bc;David Cournapeau;2009-06-30 17:53:21 +0000;Fix missing variable def in gfortran tool.

==

numpy/distutils/fcompiler/gnu.py
==================
dfefe95;David Cournapeau;2009-06-30 17:04:09 +0000;Update gfortran support on win64
We don't link the gfortran runtime when built with MS compilers: there are some
incompatibilities between libgfortran and dependent libraries (mingwex, etc..)
and the MS C runtime. Instead, we will implement the needed function from
libgfortran and compile it with MS compiler, with the MS C runtime.

==

numpy/distutils/fcompiler/gnu.py
==================
e8dda82;David Cournapeau;2009-06-30 16:41:00 +0000;Move npymath sources into subdir, since we will add quite a few files later for complex support.

==

numpy/core/SConscript
numpy/core/setup.py
numpy/core/src/_signbit.c
numpy/core/src/npy_math.c.src
numpy/core/src/npy_math_private.h
numpy/core/src/npymath/_signbit.c
numpy/core/src/npymath/npy_math.c.src
numpy/core/src/npymath/npy_math_private.h
==================
5f8a94f;David Cournapeau;2009-06-30 16:40:01 +0000;Add copysign function.

==

numpy/core/include/numpy/npy_math.h
numpy/core/setup_common.py
numpy/core/src/npy_math.c.src
numpy/core/src/npy_math_private.h
==================
8e96f6a;David Cournapeau;2009-06-30 10:08:27 +0000;BUG: Fix NPY_* macros for endianness (#1154).
I managed to screw them up: they did not actually mimic the gblic
endian.h behavior, that is NPY_BIG_ENDIAN and NPY_LITTLE_ENDIAN should
always be defined, and endianness should be detected by comparison with
NPY_BYTE_ORDER. This needs to be fixed because the behavior of the NPY_
macros was different depending on whether endian.h was available or not.
Let's hope nobody depended on it...

==

doc/source/reference/c-api.config.rst
numpy/core/code_generators/generate_numpy_api.py
numpy/core/include/numpy/ndarrayobject.h
numpy/core/include/numpy/npy_endian.h
==================
dfd3b74;pierregm;2009-06-29 16:10:11 +0000;* Bugfix #1129. Thanks to Reggie.

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
0a02520;David Cournapeau;2009-06-29 11:06:14 +0000;Remove duplicate math constant in npy math sources.

==

numpy/core/src/npy_math.c.src
==================
58d7b2d;Pauli Virtanen;2009-06-28 13:00:33 +0000;docs: more robust version number introspec & qthelp target

==

doc/Makefile
doc/source/conf.py
==================
7371ce1;Charles Harris;2009-06-28 00:42:01 +0000;Fix ticket #1152. When fewer than count elements are read in fromfile, return an array containing all that were read even if the resulting array is empty. No warning message is printed to stderr in this case.
Test will follow, documentation also needs update.

==

numpy/core/src/multiarray/ctors.c
==================
e4c0967;Pauli Virtanen;2009-06-27 18:08:08 +0000;docs: fix class documentation

==

doc/source/_templates/autosummary/class.rst
==================
aa29231;Pauli Virtanen;2009-06-27 17:40:32 +0000;docs: fill in stub Methods/Attributes sections if they are omitted

==

doc/sphinxext/docscrape.py
doc/sphinxext/docscrape_sphinx.py
==================
7a66168;Pauli Virtanen;2009-06-27 15:54:57 +0000;docs: remove forgotten debug print

==

doc/sphinxext/docscrape_sphinx.py
==================
692f3f6;Pauli Virtanen;2009-06-27 15:02:14 +0000;docs: generate Attributes and Methods sections in class documentation

==

doc/source/_templates/autosummary/class.rst
doc/source/conf.py
doc/sphinxext/README.txt
doc/sphinxext/docscrape.py
doc/sphinxext/docscrape_sphinx.py
doc/sphinxext/plot_directive.py
==================
cefd431;Pauli Virtanen;2009-06-24 21:25:35 +0000;Update HOWTO_BUILD_DOCS.txt and remove mentions of epydoc.

==

doc/HOWTO_BUILD_DOCS.txt
doc/README.txt
==================
077eec4;Stefan van der Walt;2009-06-22 10:19:16 +0000;doctest: +SKIP may still be required.

==

doc/HOWTO_DOCUMENT.txt
==================
47b4791;Stefan van der Walt;2009-06-22 07:39:57 +0000;Updates to the documentation standard [patch by Ralf Gommers].

==

doc/HOWTO_DOCUMENT.txt
==================
447de9d;David Cournapeau;2009-06-20 16:41:38 +0000;BUG: update version_match for recent version of ifort for IA-64 (#1145).

==

numpy/distutils/fcompiler/intel.py
==================
87fa5ae;Pauli Virtanen;2009-06-19 15:03:39 +0000;Merge from doc wiki

==

doc/source/reference/arrays.ndarray.rst
doc/source/reference/arrays.scalars.rst
doc/source/reference/c-api.generalized-ufuncs.rst
doc/source/reference/c-api.rst
doc/source/reference/c-api.ufunc.rst
doc/source/reference/generalized_ufuncs.rst
doc/source/reference/index.rst
doc/source/reference/routines.statistics.rst
doc/source/user/index.rst
doc/source/user/install.rst
numpy/add_newdocs.py
numpy/core/arrayprint.py
numpy/core/code_generators/ufunc_docstrings.py
numpy/core/defmatrix.py
numpy/core/fromnumeric.py
numpy/core/memmap.py
numpy/core/numeric.py
numpy/core/numerictypes.py
numpy/doc/constants.py
numpy/doc/creation.py
numpy/fft/fftpack.py
numpy/lib/arraysetops.py
numpy/lib/financial.py
numpy/lib/function_base.py
numpy/lib/index_tricks.py
numpy/lib/io.py
numpy/lib/scimath.py
numpy/lib/shape_base.py
numpy/lib/type_check.py
numpy/lib/ufunclike.py
numpy/lib/utils.py
numpy/linalg/linalg.py
numpy/ma/core.py
numpy/ma/extras.py
==================
cace0d7;Pauli Virtanen;2009-06-19 13:25:53 +0000;docs: document that neighbourhood iterator was added in 1.4.0

==

doc/source/reference/c-api.array.rst
==================
6cfb1c6;Pauli Virtanen;2009-06-19 13:01:20 +0000;Fixed #1140: avoid div-by-zero in iter_coords_get for size=0 arrays

==

numpy/core/src/multiarray/iterators.c
numpy/lib/tests/test_index_tricks.py
numpy/lib/tests/test_regression.py
==================
ee57730;David Cournapeau;2009-06-19 10:13:00 +0000;Add neighborhood iterator.

==

doc/source/reference/c-api.array.rst
doc/source/reference/c-api.types-and-structures.rst
numpy/core/code_generators/generate_numpy_api.py
numpy/core/code_generators/numpy_api_order.txt
numpy/core/include/numpy/_neighborhood_iterator_imp.h
numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/multiarraymodule.c
==================
99d20ee;David Cournapeau;2009-06-19 10:11:57 +0000;Refactor init/dealloc code for iterator object.
We separate commonalities between iter object and neighborhood iter, to
avoid code duplication.

==

numpy/core/src/multiarray/iterators.c
==================
b9a22d7;Stefan van der Walt;2009-06-17 14:28:03 +0000;Continue building even if svn revision detection breaks.

==

setup.py
==================
af7165d;Travis Oliphant;2009-06-17 04:32:17 +0000;Add metadata to date-time array scalars.

==

numpy/core/include/numpy/arrayscalars.h
numpy/core/include/numpy/ndarrayobject.h
==================
aed9ab9;David Cournapeau;2009-06-17 02:51:03 +0000;Fix typo in definition of Euler constant.

==

numpy/core/include/numpy/npy_math.h
==================
8621c77;David Cournapeau;2009-06-17 02:36:18 +0000;Add Euler constant to npy_math.

==

doc/source/reference/c-api.coremath.rst
numpy/core/include/numpy/npy_math.h
==================
3c3b11f;Travis Oliphant;2009-06-16 23:45:03 +0000;Add date-time parsing and printing

==

doc/neps/datetime-proposal.rst
numpy/core/_internal.py
numpy/core/code_generators/generate_umath.py
numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/multiarraymodule.c
==================
f01cc95;Pauli Virtanen;2009-06-16 18:43:34 +0000;Fixed #1096: make logaddexp handle infs properly

==

numpy/core/src/npy_math.c.src
numpy/core/tests/test_umath.py
==================
bfdb030;Pauli Virtanen;2009-06-16 18:42:50 +0000;docs: port documentation from CAPI.txt

==

doc/source/reference/c-api.array.rst
==================
728ae67;Travis Oliphant;2009-06-15 22:24:39 +0000;Continue work on parser for datetime branch.

==

numpy/core/code_generators/generate_umath.py
numpy/core/src/multiarray/descriptor.c
numpy/core/src/umath/loops.c.src
==================
90dbad6;Travis Oliphant;2009-06-12 19:25:23 +0000;Updates to date-time branch nep.

==

doc/neps/datetime-proposal.rst
==================
aa9f4b5;Travis Oliphant;2009-06-12 05:21:26 +0000;Updated datetime proposal.

==

doc/neps/datetime-proposal.rst
==================
f2392bc;Travis Oliphant;2009-06-11 22:16:39 +0000;Working on date-time...

==

doc/neps/datetime-proposal.rst
numpy/core/code_generators/generate_umath.py
numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/umath/funcs.inc.src
numpy/core/src/umath/loops.c.src
==================
98a09c4;Travis Oliphant;2009-06-10 22:57:44 +0000;Put placeholder in for date-time conversion.

==

numpy/core/src/multiarray/descriptor.c
==================
a4d3aa8;Travis Oliphant;2009-06-10 22:44:27 +0000;Add support for meta-data to pickling of dtypes.

==

numpy/core/src/multiarray/descriptor.c
==================
910d3db;Travis Oliphant;2009-06-10 21:39:42 +0000;commit 2e402e05f64912a3568a3e6351f1ffcf3fae601a Author: Robert Kern <robert.kern@gmail.com> Date:   Mon Jun 8 11:36:20 2009 -0500
    BUG: Remove division and remainder ufuncs.
    BUG: Fix ordering of datetime ufunc loops such that they come before object loops.
    ENH: Complete ufunc type tests.
    BUG: Do not allow any other type convert to or from a datetime type.

commit d9591ae4a20795b065f8bb191d601e21c9f9964a
Author: Robert Kern <robert.kern@gmail.com>
Date:   Mon Jun 8 11:34:00 2009 -0500

    BUG: Fix printing.

commit 57dfbaf6a8befef505193e7939bc280f726a623e
Author: Robert Kern <robert.kern@gmail.com>
Date:   Wed Jun 3 17:29:00 2009 -0500

    ENH: Expanded PyUFuncLoopObject->obj flag to be used to also express the case that the loop might need to use the Python API even if it doesn't deal with object arrays.
    ENH: Added a benchmark script to time the overhead of ufunc changes.

commit 744fc8501fd9aa9ec6fed6f599600d69f7b2654c
Author: Robert Kern <robert.kern@gmail.com>
Date:   Wed Jun 3 17:25:42 2009 -0500

    ENH: refactor the datetime ufunc tests for debuggability.

commit c6511fbd1bf9074c01c84e54fcce05f12f81dd67
Author: Robert Kern <robert.kern@gmail.com>
Date:   Mon Jun 1 12:37:39 2009 -0500

    BUG: Tweaks to the conversion rules.
    ENH: Tests.

commit 0ed1f15353ca5781c265c021eb71924f158880f6
Author: Robert Kern <robert.kern@gmail.com>
Date:   Fri May 22 18:29:31 2009 -0500

    BUG: Disallow casting between datetime64 and timedelta64.

commit 64f24bc71b009be36a51f6b8d18cc7bed2ea2057
Author: Robert Kern <robert.kern@gmail.com>
Date:   Fri May 22 18:28:50 2009 -0500

    BUG: Correct the order of some of the TypeDescriptions in order to pick up the correct (timedelta,timedelta) loops rather than having the latter timedelta be cast to another integer.
    BUG:Correct the outputs of the (timedelta,timedelta) remainder and fmod ufuncs. They outputs must be plain integers since that is also the dtype of the floor_divide ufunc.

commit 189da6a6e2f3a88de44a43c20130b94c7e09b2d3
Author: Robert Kern <robert.kern@gmail.com>
Date:   Thu May 21 19:02:54 2009 -0500

    ENH: naive stubs of the datetime ufuncs. Casting is still incorrect, though, so the output dtypes are sometimes unexpected and incorrect.

commit f2a8bfb58729cea62e507dae36e7444a7d7bc6dc
Author: Robert Kern <robert.kern@gmail.com>
Date:   Wed May 20 15:34:42 2009 -0500

    ENH: datetime64 and timedelta64 now have ufuncs attached to them. They are basically just copies of int64 at this point in time.

commit f48652a7c701780d9dec2bbfce474c72f0d1c5aa
Author: Robert Kern <robert.kern@gmail.com>
Date:   Tue May 19 19:06:48 2009 -0500

    REPO: ignore some files.

commit 42c0c498cb700cc095e860946561946335470f81
Author: Robert Kern <robert.kern@gmail.com>
Date:   Tue May 19 19:05:06 2009 -0500

    ENH: first light for datetime64 and timedelta64.

==

numpy/core/code_generators/generate_numpy_api.py
numpy/core/code_generators/generate_umath.py
numpy/core/code_generators/ufunc_api_order.txt
numpy/core/include/numpy/arrayscalars.h
numpy/core/include/numpy/ndarrayobject.h
numpy/core/include/numpy/noprefix.h
numpy/core/include/numpy/npy_common.h
numpy/core/include/numpy/old_defines.h
numpy/core/include/numpy/ufuncobject.h
numpy/core/numerictypes.py
numpy/core/setup.py
numpy/core/src/_sortmodule.c.src
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/ctors.h
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/scalarapi.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/umath/loops.c.src
numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_dtype.py
==================
988678c;Stefan van der Walt;2009-06-09 15:35:38 +0000;Fix installation of numarray headers on Windows.

==

numpy/numarray/setup.py
==================
8e1b5cf;David Cournapeau;2009-06-09 02:46:05 +0000;BUG#1134: Fix handling of depends arg when not given in add_library.

==

numpy/core/setup.py
numpy/distutils/misc_util.py
==================
38c8cd6;Robert Cimrman;2009-06-08 13:25:55 +0000;Added setmember1d_nu to arraysetops.

==

numpy/lib/arraysetops.py
numpy/lib/tests/test_arraysetops.py
==================
dfefd50;David Cournapeau;2009-06-07 10:31:33 +0000;Make sure to always call build_src before build_clib.

==

numpy/distutils/command/build_clib.py
==================
d924b3e;David Cournapeau;2009-06-07 10:31:07 +0000;Move comment for PyArray_New at the right location.

==

numpy/core/src/multiarray/ctors.c
==================
ca1a49c;David Cournapeau;2009-06-07 10:30:37 +0000;Move copy_and_swap into common module.

==

numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/ctors.h
==================
7e5c0ee;David Cournapeau;2009-06-07 10:30:00 +0000;Move more basic functions out of ctors into common module.

==

numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/ctors.h
numpy/core/src/multiarray/scalarapi.c
==================
d3a42d6;David Cournapeau;2009-06-07 10:29:16 +0000;Move one more function from ctor to common.

==

numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/ctors.h
==================
8055749;Charles Harris;2009-06-06 03:50:50 +0000;Replace string exception "multiarray.error" exposed by multiarray module with PyExc_Exception. Replace string exception "numpy.lib.error" exposed by numpy.lib with PyExc_Exception. This should allow old code catching the string errors to catch the standard error types that are now raised.

==

numpy/core/src/multiarray/multiarraymodule.c
numpy/lib/src/_compiled_base.c
==================
e8ede10;Charles Harris;2009-06-03 03:12:33 +0000;Reindent and cleanup whitespace.

==

numpy/numarray/_capi.c
==================
eb214ee;Charles Harris;2009-06-03 02:50:47 +0000;Replace ValueError by TypeError in appropriate places.

==

numpy/lib/src/_compiled_base.c
==================
a6d3b87;Charles Harris;2009-06-03 02:24:29 +0000;Remove unused reference to MultiArrayError.

==

numpy/core/src/multiarray/calculation.h
numpy/lib/src/_compiled_base.c
==================
805a2ad;Charles Harris;2009-06-03 02:24:11 +0000;Fix small reference count bug.

==

numpy/core/src/multiarray/multiarraymodule.c
==================
fb78732;Charles Harris;2009-06-03 01:57:56 +0000;Remove string exceptions. Remove macros containing gotos.

==

numpy/lib/src/_compiled_base.c
==================
f4e0c12;Pauli Virtanen;2009-06-02 20:43:33 +0000;Regenerate mtrand.c

==

numpy/random/mtrand/mtrand.c
==================
0d50ca6;Pauli Virtanen;2009-06-02 20:43:07 +0000;Fix errors in examples in docstrings

==

numpy/fft/fftpack.py
numpy/random/mtrand/mtrand.pyx
==================
42f4f81;David Cournapeau;2009-06-02 10:30:49 +0000;Add PyArray_Acorrelate function
PyArray_Correlate function did not compute the usual definition for
correlation: it assumed correlate(a, b) == correlate(b, a), and did not
use conjugate for the 2nd argument. As some people may rely on the
current behavior, we add a PyArray_Acorrelate function and acorrelate
python function to implement the usual definition.

Squashed commit of the following:

commit 1e1e0ff38968934825ad64cddd36fcb21e378954
Author: David Cournapeau <cournape@gmail.com>
Date:   Tue Jun 2 18:59:57 2009 +0900

    Refactor [A]Correlate, so that they share most of the implementation.

commit ffbd54ecf539df508363a725ec5f7529f71a9bb4
Author: David Cournapeau <cournape@gmail.com>
Date:   Tue Jun 2 18:35:21 2009 +0900

    Handle conjugate in correlate.

commit df47fddd8e5142758504dece39b0716b8f46434f
Author: David Cournapeau <cournape@gmail.com>
Date:   Tue Jun 2 17:42:38 2009 +0900

    Correlate and correlate tests better shared.

commit f48de4450b05260e9174cf224302a1c8a1f60331
Author: David Cournapeau <cournape@gmail.com>
Date:   Tue Jun 2 17:39:15 2009 +0900

    Add acorrelate function at the python level.

commit a37cc7ff144b0e6b64f8fd0a8cae4c9e561f4a1c
Author: David Cournapeau <cournape@gmail.com>
Date:   Tue Jun 2 17:21:20 2009 +0900

    Update test for correlate - we will test for inverted output for acorrelate.

commit 4140a30f1b6daf95ce2fa8fa7bd26f827b2fcfd1
Author: David Cournapeau <cournape@gmail.com>
Date:   Tue Jun 2 17:19:14 2009 +0900

    Add PyArray_Acorrelate function in the C API.

commit 082f9d4b0205a9a4f0112d8cfd3852b3907b6e09
Author: David Cournapeau <cournape@gmail.com>
Date:   Mon Jun 1 12:04:12 2009 +0900

    Add simple test for correlate.

commit 7179187953d7cb396a7557a418e6fbcaeddc4211
Author: David Cournapeau <cournape@gmail.com>
Date:   Mon Jun 1 11:57:46 2009 +0900

    Invert output array if we swapped input arrays.

==

numpy/core/code_generators/numpy_api_order.txt
numpy/core/numeric.py
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/tests/test_numeric.py
==================
e3d65f0;Charles Harris;2009-06-02 04:39:50 +0000;Initial style cleanup of _compiled_base.c

==

numpy/lib/src/_compiled_base.c
==================
4cbf4a6;Charles Harris;2009-06-01 18:01:46 +0000;Fix ticket #1122, out of place declaration.

==

numpy/core/src/multiarray/descriptor.c
==================
44d92ec;David Cournapeau;2009-06-01 05:43:16 +0000;BUG #1100: fix svn version detection for localized environments.

==

setup.py
==================
83b35de;David Cournapeau;2009-05-30 06:09:51 +0000;Fix typo.

==

MANIFEST.in
==================
3fbb8fc;David Cournapeau;2009-05-30 06:09:29 +0000;Forgot to include SConscript files as well as SConstruct in manifest template.

==

MANIFEST.in
==================
68bedef;pierregm;2009-05-28 22:12:18 +0000;lib._iotools : * add the flatten_base keyword to flatten_dtype
lib.io.genfromtxt
* Use flatten_dtype(...,flatten_base=True) to deal with fields w/ shape

lib.io.loadtxt
* fixed for the case when one of the fields is object


==

numpy/lib/_iotools.py
numpy/lib/io.py
numpy/lib/tests/test_io.py
==================
a2bf56a;Stefan van der Walt;2009-05-27 23:27:19 +0000;loadtxt: allow shaped dtypes.

==

numpy/lib/io.py
numpy/lib/tests/test_io.py
==================
81a26d7;Charles Harris;2009-05-23 18:05:12 +0000;Test fromfile when file is empty.

==

numpy/core/tests/test_multiarray.py
==================
557ca12;Charles Harris;2009-05-23 17:31:29 +0000;Flatten descr_subscript function. Clarify error messages in descr_subscript.

==

numpy/core/src/multiarray/descriptor.c
==================
49728cd;Charles Harris;2009-05-23 16:13:49 +0000;Add test for ticket #1106.

==

numpy/core/tests/test_regression.py
==================
ec904b0;Charles Harris;2009-05-23 14:49:06 +0000;Fix ticket #1106.

==

numpy/core/src/multiarray/descriptor.c
==================
174ac98;Charles Harris;2009-05-23 02:45:22 +0000;Fix ticket #1115. I'll add some tests later.

==

numpy/core/src/multiarray/ctors.c
==================
24a445b;Pauli Virtanen;2009-05-21 16:25:45 +0000;docs: hide plot output admonition title

==

doc/source/_static/scipy.css
==================
1b8679f;Pauli Virtanen;2009-05-21 15:47:24 +0000;sphinxext: fix python2.4 compatibility

==

doc/sphinxext/plot_directive.py
==================
bc79e93;Pauli Virtanen;2009-05-21 13:37:07 +0000;mtrand: regenerate mtrand.c

==

numpy/random/mtrand/mtrand.c
==================
258398e;Pauli Virtanen;2009-05-21 13:36:38 +0000;docs: CSS for plots

==

doc/source/_static/scipy.css
==================
b9a82a1;Pauli Virtanen;2009-05-21 13:36:10 +0000;docs: enable plot_directive

==

doc/source/conf.py
==================
b95b2b8;Pauli Virtanen;2009-05-21 13:35:48 +0000;sphinxext/numpydoc: wrap Examples in plot:: if they contain matplotlib example code

==

doc/source/conf.py
doc/sphinxext/docscrape_sphinx.py
doc/sphinxext/numpydoc.py
doc/sphinxext/plot_directive.py
doc/sphinxext/tests/test_docscrape.py
==================
e3377d6;Pauli Virtanen;2009-05-21 13:35:05 +0000;sphinxext: revise plot_directive

==

doc/sphinxext/plot_directive.py
==================
1cf7e661b;Pauli Virtanen;2009-05-21 13:34:38 +0000;docstring: fix bug in blackman docstring

==

numpy/lib/function_base.py
==================
d3133f1;Pauli Virtanen;2009-05-20 21:50:09 +0000;Docstring fixes: make some examples to work properly

==

numpy/lib/function_base.py
numpy/random/mtrand/mtrand.pyx
==================
260728f;David Cournapeau;2009-05-20 11:08:12 +0000;Remove obsolete comment.

==

numpy/core/src/multiarray/multiarraymodule.c
==================
6d85eed;David Cournapeau;2009-05-20 11:07:41 +0000;Move some declarations from arrayobject.h to the module which actually define them.

==

numpy/core/src/multiarray/arrayobject.h
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/mapping.h
numpy/core/src/multiarray/scalartypes.c.src
==================
82de28d;David Cournapeau;2009-05-20 11:07:03 +0000;Remove unnecessary includes.

==

numpy/core/src/multiarray/common.c
==================
87f11ed;David Cournapeau;2009-05-20 03:58:59 +0000;Bug: fix #1111, forgot to consider PPC64 architecture in endian definition.

==

numpy/core/include/numpy/npy_endian.h
==================
aa6a99c;Travis Oliphant;2009-05-19 03:44:07 +0000;Change test conditions to avoid test for equality with floats.

==

numpy/core/tests/test_umath.py
==================
653653a;David Cournapeau;2009-05-16 09:46:10 +0000;Fix setupscons.py so that the version.py is correctly generated.

==

setupscons.py
==================
e090679;Charles Harris;2009-05-16 03:59:28 +0000;Comment spot where exception string is inserted in the dictionary.

==

numpy/core/src/multiarray/multiarraymodule.c
==================
2506c5c;Charles Harris;2009-05-16 03:59:15 +0000;Fix ticket #1109. Remove the only remaining use of a string exception from the multiarray module. The string is still in the module dictionary so the  ABI doesn't change, but none of the c code uses it. Any code that *expects* a string exception will break, but I regard this as fixing a bug instead of an addition. There were no other string exceptions used by the code in numpy/core/src.

==

numpy/core/src/multiarray/calculation.c
numpy/core/src/multiarray/multiarraymodule.c
==================
673de27;pierregm;2009-05-13 22:24:09 +0000;* getdata : prevent unnecessary copies (thx to Eric Firing) * _Domained/MaskedUnary/BinaryOperations: optimization by preventing the use of np.where and the calculation of domain. Here's the catch: we're basically cheating. We force np.seterr(divide='ignore',invalid='ignore') before computing the results, then mask the invalid values (if any) and reset the corresponding entries in .data to the input. Finally, we reset the error status. This playing around with the error status may (or may not) fail in multi-thread. It's still faaar faster than computing the domain (especially _DomainSafeDivide) when the inputs are large...

==

numpy/ma/core.py
numpy/ma/tests/test_subclassing.py
==================
fef030e;David Cournapeau;2009-05-13 03:03:42 +0000;Fix error message when API incompatibily is detected.

==

numpy/core/code_generators/generate_numpy_api.py
==================
a152471;David Cournapeau;2009-05-13 03:03:27 +0000;Document the new PyArray_GetNDArrayCFeatureVersion.

==

doc/source/reference/c-api.array.rst
==================
93aa731;David Cournapeau;2009-05-13 03:03:13 +0000;Add the ABI/API version in numpyconfig header for scons build.

==

numpy/core/SConscript
numpy/core/include/numpy/numpyconfig.h.in
==================
290e39d;David Cournapeau;2009-05-13 03:02:57 +0000;Check C-API version in scons build as well.

==

numpy/core/SConscript
numpy/core/scons_support.py
==================
ae84a9a;David Cournapeau;2009-05-13 03:02:39 +0000;Improve error messages when ABI or API mismatch is detected.

==

numpy/core/code_generators/generate_numpy_api.py
==================
217bea8;David Cournapeau;2009-05-13 03:02:25 +0000;Make error message for ABI mismatch clearer at import time.

==

numpy/core/code_generators/generate_numpy_api.py
==================
6afdd2a;David Cournapeau;2009-05-13 03:02:11 +0000;Check that the runtime C API version is >= builtin one.

==

numpy/core/code_generators/generate_numpy_api.py
==================
005cd6f;David Cournapeau;2009-05-13 03:01:53 +0000;Add function to return builtin NPY_FEATURE_VERSION.

==

numpy/core/code_generators/cversions.txt
numpy/core/code_generators/numpy_api_order.txt
numpy/core/setup_common.py
numpy/core/src/multiarray/multiarraymodule.c
==================
866336d;David Cournapeau;2009-05-13 03:01:35 +0000;Update C API version: we forgot to update them after adding generalized ufunc and PyArray_Endianness.

==

numpy/core/setup_common.py
==================
c3cef26;David Cournapeau;2009-05-13 03:01:21 +0000;Automatically detects C API mismatches.

==
==================
8845905;Travis Oliphant;2009-05-10 03:50:31 +0000;Add patch from T. Heller so that numpy arrays can be labeled as returned from functions wrapped with ctypes.

==

numpy/ctypeslib.py
==================
7274342;Travis Oliphant;2009-05-10 03:48:59 +0000;Fix some failing tests due to name-space issues.

==

numpy/ma/tests/test_core.py
==================
7622825;Travis Oliphant;2009-05-10 03:48:35 +0000;Fix bug with reduceat encountered on mis-behaved arrays which are copied when small enough to fit into standard buffer size.

==

numpy/core/src/umath/ufunc_object.c
numpy/core/tests/test_umath.py
==================
11e6b62;pierregm;2009-05-09 02:02:59 +0000;* harden_mask, soften_mask,  unshare_mask and  shrink_mask now return self

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
f96cbf4;David Cournapeau;2009-05-07 11:42:05 +0000;More hacks to circumvent python header namespace pollution.
IEEE C99 macros like isinf are checked for python 2.7 and above - do not
test for them if the corresponding configure macros are detected in
Python.h

==

numpy/core/setup.py
==================
8ec0720;David Cournapeau;2009-05-07 11:41:52 +0000;Use env variable to set up separate compilation.

==

numpy/core/SConscript
numpy/core/setup.py
==================
4fb4921;David Cournapeau;2009-05-06 09:39:02 +0000;mingw64 workaround for signal handling not needed anymore - mingw-w64 supports it.

==

numpy/core/include/numpy/mingw_amd64_fenv.h
numpy/core/include/numpy/ufuncobject.h
numpy/core/setup.py
numpy/distutils/mingw32ccompiler.py
==================
dd63849;David Cournapeau;2009-05-06 09:32:45 +0000;Fix separate compilation with distutils.

==

numpy/core/setup.py
==================
cef776f;David Cournapeau;2009-05-06 09:32:11 +0000;Fix missing declaration.

==

numpy/core/src/multiarray/arraytypes.h
==================
3fd9be7;David Cournapeau;2009-05-06 09:26:30 +0000;Fix declaration of Signal handlers on windows.

==

numpy/core/src/multiarray/multiarraymodule.c
==================
13cc728;David Cournapeau;2009-05-06 09:14:16 +0000;Do not declare array variables in single file compilation mode - MS compilers don't like them.

==

numpy/core/src/multiarray/arraytypes.h
numpy/core/src/multiarray/getset.h
numpy/core/src/multiarray/methods.h
==================
f97b165;David Cournapeau;2009-05-06 08:54:03 +0000;Include arraytypes.c early for the no  separate compilation case.

==

numpy/core/src/multiarray/multiarraymodule_onefile.c
==================
09bc317;David Cournapeau;2009-05-06 08:28:22 +0000;Fix compilation with MS compilers: they don't handle array declarations without s size specifier.

==

numpy/core/code_generators/generate_numpy_api.py
numpy/core/src/multiarray/scalartypes.c.src
==================
ddd0a6a;David Cournapeau;2009-05-06 08:02:24 +0000;Fix mispelled separate compilation macro.

==

numpy/core/src/multiarray/buffer.h
==================
fbe7970;David Cournapeau;2009-05-06 08:02:08 +0000;Forgot to include buffer header in buffer sourcefile.

==

numpy/core/src/multiarray/buffer.c
==================
91d2fa9;David Cournapeau;2009-05-06 08:01:53 +0000;Move array_any_nonzero to buffer.c, where it is used, and mark it static.

==

numpy/core/src/multiarray/number.c
numpy/core/src/multiarray/number.h
numpy/core/src/multiarray/sequence.c
==================
d2cab0b;David Cournapeau;2009-05-06 07:06:24 +0000;Fix double definitions in config headers.
The files were generated using the 'a' mode for opening, which does not
make much sense anymore. If the configuration is re-run, the config
headers should be generated from scratch.

==

numpy/core/setup.py
==================
08c5c5d;David Cournapeau;2009-05-06 06:52:17 +0000;Fix build on platforms requiring _signbit.c

==

numpy/core/setup.py
==================
d003bc4;David Cournapeau;2009-05-06 06:49:33 +0000;Fix mathlib check.

==

numpy/core/setup.py
==================
5f74e64;David Cournapeau;2009-05-06 06:33:12 +0000;Remove mathlib broken test, just use a standard check_func on exp.

==

numpy/core/setup.py
==================
7f5efe3;David Cournapeau;2009-05-06 06:25:22 +0000;Fix typo in multiarray sources.

==

numpy/core/setup.py
==================
e4a8760;David Cournapeau;2009-05-06 01:00:21 +0000;Fix mac os X build with numscons.

==

numpy/core/SConscript
==================
e0760b4;David Cournapeau;2009-05-06 00:59:44 +0000;Forgot to include ctors header in scalarapi.

==

numpy/core/src/multiarray/scalarapi.c
==================
a041926;David Cournapeau;2009-05-05 11:10:29 +0000;Put buffer protocol in separate file.

==

numpy/core/SConscript
numpy/core/code_generators/genapi.py
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/buffer.c
numpy/core/src/multiarray/buffer.h
numpy/core/src/multiarray/multiarraymodule_onefile.c
==================
ba7d1cb;David Cournapeau;2009-05-05 11:10:09 +0000;Put PyArray_Resize in shape source file.

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/shape.c
==================
95d215f;David Cournapeau;2009-05-05 11:09:53 +0000;move flags related function into flagsobject.

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/flagsobject.c
==================
1f5d463;David Cournapeau;2009-05-05 11:09:37 +0000;Move some more scalar-related functions from arrayobject to scalarapi.c

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/scalarapi.c
==================
2c9a8fc;David Cournapeau;2009-05-05 11:09:20 +0000;Tag PyArray_IntTupleFromIntp as undocumented.

==

numpy/core/src/multiarray/conversion_utils.c
==================
9ddccce;David Cournapeau;2009-05-05 11:09:05 +0000;Put misc conversion into conversion_utils module.

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/conversion_utils.c
numpy/core/src/multiarray/conversion_utils.h
numpy/core/src/multiarray/multiarraymodule.c
==================
6376efd;David Cournapeau;2009-05-05 11:08:48 +0000;Put conversion utilities for PyArg_ParseTuple into separate file.

==

numpy/core/SConscript
numpy/core/code_generators/genapi.py
numpy/core/setup.py
numpy/core/src/multiarray/conversion_utils.c
numpy/core/src/multiarray/conversion_utils.h
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/multiarraymodule_onefile.c
==================
46dafb6;David Cournapeau;2009-05-05 11:08:26 +0000;Put special functions for reference counting for arrays of objects in separate file.

==

numpy/core/SConscript
numpy/core/code_generators/genapi.py
numpy/core/setup.py
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/multiarraymodule_onefile.c
numpy/core/src/multiarray/refcount.c
numpy/core/src/multiarray/refcount.h
==================
ee4e853;David Cournapeau;2009-05-05 07:54:29 +0000;Move PyArray_GetPriority out from arrayobject.c

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/multiarraymodule.c
==================
27794c1;David Cournapeau;2009-05-05 07:54:13 +0000;Add comment for multiarraymodule_onefile.c

==

numpy/core/src/multiarray/multiarraymodule_onefile.c
==================
98fb552;pierregm;2009-05-01 22:35:29 +0000;Add `diff` to the namespace

==

numpy/ma/core.py
==================
38f414a;Stefan van der Walt;2009-05-01 12:18:10 +0000;Warn if site.cfg specifies invalid directories.

==

numpy/distutils/system_info.py
==================
c4bfd2b;David Cournapeau;2009-04-30 09:04:32 +0000;Revert back to one file compilation.

==

numpy/core/SConscript
numpy/core/setup.py
==================
6ad5e7c;David Cournapeau;2009-04-30 08:52:00 +0000;Do not harcode visibility macro, enable it for gcc 4.

==

numpy/core/SConscript
numpy/core/include/numpy/ndarrayobject.h
numpy/core/include/numpy/numpyconfig.h.in
numpy/core/scons_support.py
numpy/core/setup.py
numpy/distutils/command/autodist.py
numpy/distutils/command/config.py
==================
9d30995;David Cournapeau;2009-04-30 08:51:38 +0000;Fix ucsnarrow conditional compilation.

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/scalarapi.c
==================
7191641;David Cournapeau;2009-04-30 08:51:21 +0000;Define separate compilation define in config.h as well, and use config.h early when needed.

==

numpy/core/SConscript
numpy/core/include/numpy/numpyconfig.h.in
numpy/core/setup.py
numpy/core/src/umath/loops.c.src
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/umathmodule.c.src
==================
19d5101;David Cournapeau;2009-04-30 08:50:59 +0000;Handle platforms without Py_UNICODE_WIDE defined.

==

numpy/core/setup.py
numpy/core/src/multiarray/multiarraymodule_onefile.c
numpy/core/src/multiarray/scalarapi.c
==================
ec0b694;David Cournapeau;2009-04-30 08:50:42 +0000;Fix separate/batch compilation.

==

numpy/core/SConscript
numpy/core/code_generators/generate_numpy_api.py
numpy/core/code_generators/generate_ufunc_api.py
numpy/core/include/numpy/ndarrayobject.h
numpy/core/setup.py
numpy/core/src/multiarray/arraytypes.h
numpy/core/src/multiarray/calculation.h
numpy/core/src/multiarray/getset.h
numpy/core/src/multiarray/mapping.h
numpy/core/src/multiarray/methods.h
numpy/core/src/multiarray/multiarraymodule_onefile.c
numpy/core/src/multiarray/number.h
numpy/core/src/multiarray/sequence.h
numpy/core/src/multiarray/usertypes.h
numpy/core/src/umath/loops.c.src
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/umathmodule.c.src
numpy/core/src/umath/umathmodule_onefile.c
==================
35e0062;David Cournapeau;2009-04-30 08:50:08 +0000;Add recursive header inclusion guard for arrayscalar header.

==

numpy/core/include/numpy/arrayscalars.h
==================
f38e2e7;David Cournapeau;2009-04-30 08:49:52 +0000;Make sure every source file of umath module include config header.

==

numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/umath_tests.c.src
==================
5a62914;David Cournapeau;2009-04-30 08:49:35 +0000;Make sure every source file for multiarray module include config.h

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/calculation.c
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/flagsobject.c
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/global.c
numpy/core/src/multiarray/hashdescr.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/number.c
numpy/core/src/multiarray/numpyos.c
numpy/core/src/multiarray/scalarapi.c
numpy/core/src/multiarray/sequence.c
numpy/core/src/multiarray/shape.c
numpy/core/src/multiarray/ucsnarrow.c
numpy/core/src/multiarray/usertypes.c
==================
081d0ce;David Cournapeau;2009-04-30 08:49:00 +0000;Fix global variable declarations.

==

numpy/core/code_generators/generate_numpy_api.py
numpy/core/code_generators/generate_ufunc_api.py
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/multiarraymodule.c
==================
58115d3;David Cournapeau;2009-04-30 08:48:42 +0000;Clean up a bit the setup.py for numpy.core.

==

numpy/core/setup.py
==================
2515eb9;David Cournapeau;2009-04-30 08:48:28 +0000;More arraobject.h inclusions removed.

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/arrayobject.h
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/ctors.h
numpy/core/src/multiarray/flagsobject.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/scalartypes.c.src
==================
ab0bacd;David Cournapeau;2009-04-30 08:48:05 +0000;ctors module now builds wo including arrayobject.h.

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/arrayobject.h
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/ctors.h
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/sequence.c
==================
69f5f37;David Cournapeau;2009-04-30 08:47:43 +0000;Put code to register new user types in separate file.

==

numpy/core/SConscript
numpy/core/code_generators/genapi.py
numpy/core/setup.py
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/arrayobject.h
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/multiarray/usertypes.c
numpy/core/src/multiarray/usertypes.h
==================
1f56580;David Cournapeau;2009-04-30 08:47:21 +0000;Move subscript iterator in mapping protocol.

==

numpy/core/src/multiarray/arrayobject.h
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/iterators.h
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/mapping.h
==================
8b64517;David Cournapeau;2009-04-30 08:47:02 +0000;One less arrayobject.h inclusion.

==

numpy/core/src/multiarray/shape.c
==================
2ba23bd;David Cournapeau;2009-04-30 08:46:46 +0000;Move _array_fill_strides into ctors module.

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/arrayobject.h
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/ctors.h
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/shape.c
==================
d1666f1;David Cournapeau;2009-04-30 08:46:27 +0000;More arraobject.h inclusions removed.

==

numpy/core/SConscript
numpy/core/setup.py
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/arrayobject.h
numpy/core/src/multiarray/calculation.c
numpy/core/src/multiarray/common.c
numpy/core/src/multiarray/common.h
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/ctors.h
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/mapping.h
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/number.c
numpy/core/src/multiarray/scalartypes.c.src
==================
7ac340d;David Cournapeau;2009-04-30 08:45:58 +0000;Put scalartypes declarations in separate header file.

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/arrayobject.h
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/scalarapi.c
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/multiarray/scalartypes.h
==================
509a746;David Cournapeau;2009-04-30 08:45:33 +0000;Move arraytypes-related functions declaration into separate file.

==

numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/arrayobject.h
numpy/core/src/multiarray/arraytypes.h
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/descriptor.h
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/scalarapi.c
==================
41d4199;David Cournapeau;2009-04-30 08:44:45 +0000;Put calculation in separate file.

==

numpy/core/SConscript
numpy/core/code_generators/genapi.py
numpy/core/setup.py
numpy/core/src/multiarray/arrayobject.h
numpy/core/src/multiarray/calculation.c
numpy/core/src/multiarray/calculation.h
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/multiarraymodule.h
numpy/core/src/multiarray/number.h
==================
5249c44;David Cournapeau;2009-04-30 08:44:16 +0000;Move NumericOps into number protocol.

==

numpy/core/src/multiarray/arrayobject.h
numpy/core/src/multiarray/number.h
==================
4fe769e;David Cournapeau;2009-04-30 08:44:00 +0000;Add API for datatype conversion.

==

numpy/core/src/multiarray/convert_datatype.h
==================
7275de3;David Cournapeau;2009-04-30 08:43:45 +0000;Put scalar API in separate file.

==

numpy/core/SConscript
numpy/core/code_generators/genapi.py
numpy/core/setup.py
numpy/core/src/multiarray/scalarapi.c
numpy/core/src/multiarray/scalartypes.c.src
==================
283071e;David Cournapeau;2009-04-30 08:43:25 +0000;Fix array_ass_item definition for python 2.4.

==

numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/mapping.h
==================
a66b358;David Cournapeau;2009-04-30 08:43:07 +0000;Put umath source code into its own directory.

==

numpy/core/SConscript
numpy/core/code_generators/genapi.py
numpy/core/setup.py
numpy/core/src/umath/funcs.inc.src
numpy/core/src/umath/loops.c.src
numpy/core/src/umath/loops.h
numpy/core/src/umath/loops.h.src.unused
numpy/core/src/umath/ufunc_object.c
numpy/core/src/umath/ufunc_object.h
numpy/core/src/umath/umath_tests.c.src
numpy/core/src/umath/umathmodule.c.src
numpy/core/src/umath_funcs.inc.src
numpy/core/src/umath_loops.c.src
numpy/core/src/umath_loops.h
numpy/core/src/umath_loops.h.src.unused
numpy/core/src/umath_tests.c.src
numpy/core/src/umath_ufunc_object.c
numpy/core/src/umath_ufunc_object.h
numpy/core/src/umathmodule.c.src
==================
a77eaf9;David Cournapeau;2009-04-30 08:42:26 +0000;Put multiarray modul sources into separate directory.

==

numpy/core/SConscript
numpy/core/code_generators/genapi.py
numpy/core/setup.py
numpy/core/src/array_item_selection.c
numpy/core/src/arrayconvert.c
numpy/core/src/arrayconvert.h
numpy/core/src/arrayconvert_datatype.c
numpy/core/src/arrayconvert_datatype.h
numpy/core/src/arrayctors.c
numpy/core/src/arrayctors.h
numpy/core/src/arraydescr.c
numpy/core/src/arraydescr.h
numpy/core/src/arrayflagsobject.c
numpy/core/src/arraygetset.c
numpy/core/src/arraygetset.h
numpy/core/src/arrayiterators.c
numpy/core/src/arrayiterators.h
numpy/core/src/arraymapping.c
numpy/core/src/arraymapping.h
numpy/core/src/arraymethods.c
numpy/core/src/arraymethods.h
numpy/core/src/arraynumber.c
numpy/core/src/arraynumber.h
numpy/core/src/arrayobject.c
numpy/core/src/arrayobject.h
numpy/core/src/arraysequence.c
numpy/core/src/arraysequence.h
numpy/core/src/arrayshape.c
numpy/core/src/arrayshape.h
numpy/core/src/arraytypes.c.src
numpy/core/src/hashdescr.c
numpy/core/src/hashdescr.h
numpy/core/src/multiarray/arrayobject.c
numpy/core/src/multiarray/arrayobject.h
numpy/core/src/multiarray/arraytypes.c.src
numpy/core/src/multiarray/convert.c
numpy/core/src/multiarray/convert.h
numpy/core/src/multiarray/convert_datatype.c
numpy/core/src/multiarray/convert_datatype.h
numpy/core/src/multiarray/ctors.c
numpy/core/src/multiarray/ctors.h
numpy/core/src/multiarray/descriptor.c
numpy/core/src/multiarray/descriptor.h
numpy/core/src/multiarray/flagsobject.c
numpy/core/src/multiarray/getset.c
numpy/core/src/multiarray/getset.h
numpy/core/src/multiarray/global.c
numpy/core/src/multiarray/hashdescr.c
numpy/core/src/multiarray/hashdescr.h
numpy/core/src/multiarray/item_selection.c
numpy/core/src/multiarray/iterators.c
numpy/core/src/multiarray/iterators.h
numpy/core/src/multiarray/mapping.c
numpy/core/src/multiarray/mapping.h
numpy/core/src/multiarray/methods.c
numpy/core/src/multiarray/methods.h
numpy/core/src/multiarray/multiarraymodule.c
numpy/core/src/multiarray/number.c
numpy/core/src/multiarray/number.h
numpy/core/src/multiarray/numpyos.c
numpy/core/src/multiarray/numpyos.h
numpy/core/src/multiarray/scalartypes.c.src
numpy/core/src/multiarray/sequence.c
numpy/core/src/multiarray/sequence.h
numpy/core/src/multiarray/shape.c
numpy/core/src/multiarray/shape.h
numpy/core/src/multiarray/ucsnarrow.c
numpy/core/src/multiarray/ucsnarrow.h
numpy/core/src/multiarraymodule.c
numpy/core/src/numpyos.c
numpy/core/src/numpyos.h
numpy/core/src/scalartypes.c.src
numpy/core/src/ucsnarrow.c
numpy/core/src/ucsnarrow.h
==================
1f37ab2;David Cournapeau;2009-04-30 08:40:50 +0000;Enable separate compilation for umath module.

==

numpy/core/SConscript
numpy/core/code_generators/genapi.py
numpy/core/code_generators/generate_ufunc_api.py
numpy/core/setup.py
numpy/core/src/umath_loops.c.src
numpy/core/src/umath_loops.h
numpy/core/src/umath_loops.h.src.unused
numpy/core/src/umath_loops.inc.src
numpy/core/src/umath_ufunc_object.c
numpy/core/src/umath_ufunc_object.h
numpy/core/src/umath_ufunc_object.inc
numpy/core/src/umathmodule.c.src
==================
3d73000;David Cournapeau;2009-04-30 08:40:24 +0000;Put more type convertion code into array descriptor file.

==

numpy/core/src/arrayconvert_datatype.c
numpy/core/src/arraydescr.c
numpy/core/src/arraydescr.h
numpy/core/src/multiarraymodule.c
==================
14b9b24;David Cournapeau;2009-04-30 08:40:04 +0000;Put item selection code into separate file.

==

numpy/core/SConscript
numpy/core/code_generators/genapi.py
numpy/core/setup.py
numpy/core/src/array_item_selection.c
numpy/core/src/multiarraymodule.c
==================
32a5fe9;David Cournapeau;2009-04-30 08:39:44 +0000;Put shape manipulation code into separate file.

==

numpy/core/SConscript
numpy/core/code_generators/genapi.py
numpy/core/setup.py
numpy/core/src/arrayconvert.c
numpy/core/src/arrayshape.c
numpy/core/src/arrayshape.h
numpy/core/src/multiarraymodule.c
==================
96a1f08;David Cournapeau;2009-04-30 08:39:23 +0000;Put more code from multiarray into ctors.c

==

numpy/core/src/arrayctors.c
numpy/core/src/multiarraymodule.c
==================
0ef77c9;David Cournapeau;2009-04-30 08:39:07 +0000;forgot to move comments attached to ctor code.

==

numpy/core/src/arrayctors.c
numpy/core/src/arrayobject.c
==================
695bf8b;David Cournapeau;2009-04-30 08:38:52 +0000;Put object type conversion into separate file.

==

numpy/core/SConscript
numpy/core/code_generators/genapi.py
numpy/core/setup.py
numpy/core/src/arrayconvert.c
numpy/core/src/arrayconvert.h
numpy/core/src/arrayobject.c
numpy/core/src/arrayobject.h
==================
bf21052;David Cournapeau;2009-04-30 08:38:30 +0000;Put casting functions into separate file.

==

numpy/core/SConscript
numpy/core/code_generators/genapi.py
numpy/core/setup.py
numpy/core/src/arrayconvert_datatype.c
numpy/core/src/arrayconvert_datatype.h
numpy/core/src/arrayobject.c
numpy/core/src/arrayobject.h
==================
f3e2b28;David Cournapeau;2009-04-30 08:38:05 +0000;Put array construction functions into separate file.

==

numpy/core/SConscript
numpy/core/code_generators/genapi.py
numpy/core/setup.py
numpy/core/src/arrayctors.c
numpy/core/src/arrayctors.h
numpy/core/src/arrayobject.c
numpy/core/src/arrayobject.h
==================
2c1ac54;David Cournapeau;2009-04-30 08:37:38 +0000;Put array methods in separate file.

==

numpy/core/SConscript
numpy/core/setup.py
numpy/core/src/arraymethods.c
numpy/core/src/arraymethods.h
numpy/core/src/arrayobject.c
numpy/core/src/arrayobject.h
==================
9838935;David Cournapeau;2009-04-30 08:37:19 +0000;Put sequence protocol in separate file.

==

numpy/core/SConscript
numpy/core/code_generators/genapi.py
numpy/core/setup.py
numpy/core/src/arrayobject.c
numpy/core/src/arraysequence.c
numpy/core/src/arraysequence.h
==================
91be9a9;David Cournapeau;2009-04-30 08:36:59 +0000;Put number protocol and array attributes get/set in separate files.

==

numpy/core/SConscript
numpy/core/code_generators/genapi.py
numpy/core/setup.py
numpy/core/src/arraygetset.c
numpy/core/src/arraygetset.h
numpy/core/src/arraynumber.c
numpy/core/src/arraynumber.h
numpy/core/src/arrayobject.c
numpy/core/src/arrayobject.h
==================
efd5b42;David Cournapeau;2009-04-30 08:36:36 +0000;Put mapping protocol in separate file.

==

numpy/core/SConscript
numpy/core/setup.py
numpy/core/src/arraymapping.c
numpy/core/src/arraymapping.h
numpy/core/src/arrayobject.c
==================
fe1f934;David Cournapeau;2009-04-30 08:36:16 +0000;Forgot to tag PyArray_DescrHash with NPY_NO_EXPORT.

==

numpy/core/src/hashdescr.c
numpy/core/src/hashdescr.h
==================
a8f8a79;David Cournapeau;2009-04-30 08:36:00 +0000;Fix numscons build for platforms without wide character unicode support.

==

numpy/core/SConscript
numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.c.src
numpy/core/src/scalartypes.c.src
numpy/core/src/ucsnarrow.c
numpy/core/src/ucsnarrow.h
==================
44ff047;David Cournapeau;2009-04-30 08:35:40 +0000;Put array iterator code in separate source file.

==

numpy/core/SConscript
numpy/core/code_generators/genapi.py
numpy/core/setup.py
numpy/core/src/arrayiterators.c
numpy/core/src/arrayiterators.h
numpy/core/src/arrayobject.c
numpy/core/src/arrayobject.h
==================
64aa641;David Cournapeau;2009-04-30 08:35:19 +0000;Put array descriptor in separate file.

==

numpy/core/SConscript
numpy/core/code_generators/genapi.py
numpy/core/setup.py
numpy/core/src/arraydescr.c
numpy/core/src/arraydescr.h
numpy/core/src/arrayobject.c
==================
4ef4b9f;David Cournapeau;2009-04-30 08:35:00 +0000;Put PyArrayFlagsObject in separate file.

==

numpy/core/SConscript
numpy/core/code_generators/genapi.py
numpy/core/setup.py
numpy/core/src/arrayflagsobject.c
numpy/core/src/arrayobject.c
==================
4c2a9af;David Cournapeau;2009-04-30 08:34:41 +0000;Compile numpyos.c separately.

==

numpy/core/SConscript
numpy/core/setup.py
numpy/core/src/arraytypes.c.src
numpy/core/src/numpyos.c
numpy/core/src/numpyos.h
numpy/core/src/scalartypes.c.src
==================
065b457;David Cournapeau;2009-04-30 08:34:21 +0000;Enable separate compilation of existing files for multiarray module.

==

numpy/core/SConscript
numpy/core/code_generators/genapi.py
numpy/core/code_generators/generate_numpy_api.py
numpy/core/include/numpy/ndarrayobject.h
numpy/core/setup.py
numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/arrayobject.h
numpy/core/src/arraytypes.c.src
numpy/core/src/arraytypes.inc.src
numpy/core/src/hashdescr.c
numpy/core/src/hashdescr.h
numpy/core/src/multiarraymodule.c
numpy/core/src/scalartypes.c.src
numpy/core/src/scalartypes.inc.src
==================
7a4e556;David Cournapeau;2009-04-30 08:33:45 +0000;Tag any function/typedef/variable exported through the C-API with NPY_NO_EXPORT instead of static.

==

numpy/core/code_generators/genapi.py
numpy/core/code_generators/generate_numpy_api.py
numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
numpy/core/src/scalartypes.inc.src
numpy/core/src/umath_loops.inc.src
numpy/core/src/umath_ufunc_object.inc
==================
2d29056;wfspotz@sandia.gov;2009-04-29 16:10:33 +0000;Added a couple more char* -> const char* conversions

==

doc/swig/numpy.i
==================
ca56287;David Cournapeau;2009-04-29 08:33:15 +0000;Make sure API/ABI version are formated with leading zeros.

==

numpy/core/setup.py
==================
2d24df5;David Cournapeau;2009-04-29 08:21:01 +0000;Do not use txt file for C API/ABI versions anymore, and display a warning instead of exception when mismatch is detected.

==

numpy/core/cversion.txt
numpy/core/setup.py
numpy/core/setup_common.py
==================
24b284b;David Cournapeau;2009-04-29 08:20:46 +0000;Raise an exception when API mismatch are detected for the C-API.

==

numpy/core/setup.py
==================
9355fcd;David Cournapeau;2009-04-29 08:20:33 +0000;Add code to record/read C API versions + their checksum.

==

numpy/core/code_generators/cversions.py
numpy/core/code_generators/cversions.txt
numpy/core/code_generators/genapi.py
==================
38a8c33;David Cournapeau;2009-04-29 08:20:15 +0000;Add a function to compute a checksum of the exported functions in the C-API.

==

numpy/core/code_generators/genapi.py
==================
afd1f83;David Cournapeau;2009-04-29 08:19:58 +0000;Set C-API version numbers from a txt file, into the numpyconfig header.

==

numpy/core/cversion.txt
numpy/core/include/numpy/ndarrayobject.h
numpy/core/setup.py
==================
3af8593;Pauli Virtanen;2009-04-24 21:23:39 +0000;Make testing.rundocs to raise error on failures; otherwise Nose hides them
Also drop Python < 2.4 compatibility.

==

numpy/testing/utils.py
==================
0d5e8c8;Pauli Virtanen;2009-04-24 21:17:10 +0000;Fix formatting of complex coefficients in poly1d

==

numpy/lib/polynomial.py
numpy/lib/tests/test_polynomial.py
==================
1a613e1;Pauli Virtanen;2009-04-24 20:31:22 +0000;Fixed #1095: make polyint work well with object arrays

==

numpy/lib/polynomial.py
numpy/lib/tests/test_polynomial.py
==================
653d2b2;Pearu Peterson;2009-04-21 18:25:59 +0000;f2py: ignore concatenation of strings in initexpressions.

==

numpy/f2py/crackfortran.py
==================
8859b7e;David Cournapeau;2009-04-21 10:46:41 +0000;Remove print statements which should not have been committed.

==

numpy/distutils/command/build_ext.py
==================
4418fa6;David Cournapeau;2009-04-21 10:45:34 +0000;Move is_bootstrapping outside scons command, may be useful elsewhere.

==

numpy/distutils/command/build_ext.py
numpy/distutils/command/scons.py
numpy/distutils/misc_util.py
==================
b1873ad;David Cournapeau;2009-04-20 14:34:29 +0000;Add x86_64 arch flag if gfortran supports it.

==

numpy/distutils/fcompiler/gnu.py
==================
f8d8132;David Cournapeau;2009-04-20 14:30:55 +0000;Check SIZEOF_ declaration from python.h header, and do not define it if it is already defined there.

==

numpy/core/setup.py
==================
621f53b;David Cournapeau;2009-04-20 10:52:46 +0000;Make _can_target a function.

==

numpy/distutils/fcompiler/gnu.py
==================
0d18cd7;Pauli Virtanen;2009-04-19 16:18:45 +0000;sphinxext: use real RST references for bibliographies, and add suitable links for Latex

==

doc/source/conf.py
doc/sphinxext/docscrape_sphinx.py
doc/sphinxext/numpydoc.py
==================
e427f7a;David Cournapeau;2009-04-17 10:15:59 +0000;Don't use paver html target to avoid using a numpy which is different than the one installed in the bootstrapped venv.

==

pavement.py
==================
706640d;Stefan van der Walt;2009-04-16 17:33:02 +0000;Clean up paver.py.

==

pavement.py
==================
37abe7a;Stefan van der Walt;2009-04-16 17:32:23 +0000;Remove tabs and unnecessary whitespace.

==

numpy/core/setup.py
numpy/core/tests/test_scalarmath.py
numpy/distutils/command/build_ext.py
numpy/distutils/fcompiler/compaq.py
numpy/distutils/misc_util.py
==================
9c5ec96;Charles Harris;2009-04-16 02:41:01 +0000;Regenerate mtrand with cython-0.11 on David's urging.

==

numpy/random/mtrand/mtrand.c
==================
3d4610c;Charles Harris;2009-04-16 01:22:59 +0000;Rebuild mtrand.c with cython and change the script to use cython. This is needed because some VC++ compilers can't handle long strings.

==

numpy/random/mtrand/generate_mtrand_c.py
numpy/random/mtrand/mtrand.c
==================
9d79dfe;Pauli Virtanen;2009-04-13 19:48:16 +0000;docs: fix inverted test in makefile

==

doc/Makefile
==================
1d6ed79;Pauli Virtanen;2009-04-13 19:45:41 +0000;docs: don't use autosummary_generate for Sphinx < 0.7

==

doc/source/conf.py
==================
cdf0be3;Pauli Virtanen;2009-04-13 19:39:20 +0000;Deprecating sphinxext/autosummary in favor of the version in Sphinx >= 0.7

==

doc/Makefile
doc/source/conf.py
doc/sphinxext/autosummary.py
==================
48d27be;Charles Harris;2009-04-13 16:17:21 +0000;Small cleanup of memmap code.

==

numpy/core/memmap.py
==================
430647c;pierregm;2009-04-13 11:24:40 +0000;* fixed notmasked_edges when no data are masked

==

numpy/ma/extras.py
numpy/ma/tests/test_extras.py
==================
d673c50;Charles Harris;2009-04-12 23:32:41 +0000;Fix memmap for python >= 2.6 by making offset multiple of ALLOCATIONGRANULARITY.

==

numpy/core/memmap.py
==================
2fbfbcf;Charles Harris;2009-04-12 23:32:31 +0000;Small style cleanup.

==

numpy/core/memmap.py
==================
ae58b00;pierregm;2009-04-11 22:33:27 +0000;_arraymethod : fallback when a method is called as MaskedArray.method

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
5e0e955;Charles Harris;2009-04-11 22:00:46 +0000;Fix ticket #1053. Basically the patch from Sturla Molden.

==

numpy/core/memmap.py
==================
5b466f3;Charles Harris;2009-04-10 19:38:24 +0000;Make test_histogramdd_too_many_bins a bit clearer.

==

numpy/lib/tests/test_regression.py
==================
d1701c6;Charles Harris;2009-04-10 02:18:52 +0000;Make histogramdd documentation a bit clearer.

==

numpy/lib/function_base.py
==================
e02bf24;Charles Harris;2009-04-10 01:58:27 +0000;Fix ticket #928

==

numpy/lib/function_base.py
numpy/lib/tests/test_regression.py
==================
85eb59a;Charles Harris;2009-04-09 06:26:18 +0000;Simplify regression test and make error message for oversized array more informative.

==

numpy/core/src/arrayobject.c
numpy/core/tests/test_regression.py
==================
bc936c7;Charles Harris;2009-04-09 05:46:52 +0000;Nuke obsolete register keyword in c sources.

==

numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
numpy/core/src/ucsnarrow.c
numpy/core/src/umath_tests.c.src
==================
942b09d;Charles Harris;2009-04-09 04:31:10 +0000;Fix missing 'n' in test.

==

numpy/core/tests/test_regression.py
==================
1a5281d;Charles Harris;2009-04-09 04:24:04 +0000;Refactor PyArray_OverflowMultiplyList to make it simpler.

==

numpy/core/src/multiarraymodule.c
==================
1287312;Charles Harris;2009-04-09 04:21:33 +0000;Fix spelling.

==

numpy/testing/utils.py
==================
97ffd1e;Charles Harris;2009-04-09 04:19:26 +0000;Fix ticket #1080 and add regression test. Do some small cleanup in the process.

==

numpy/core/src/arrayobject.c
numpy/core/tests/test_regression.py
==================
2194af2;Pauli Virtanen;2009-04-06 19:39:51 +0000;docs: tweak latex build to recognize U+00A0 as a non-breaking space

==

doc/postprocess.py
doc/source/conf.py
==================
3b1e1e3;David Cournapeau;2009-04-05 09:34:39 +0000;Fix mathlib test.

==

numpy/core/setup.py
==================
42fa00e;David Cournapeau;2009-04-05 09:11:11 +0000;Replace try_run by try_link test for mathlib - does not test for IEEE denormal anymore, but nobody was able to give a rational for it anyway.

==

numpy/core/setup.py
==================
b924a62;David Cournapeau;2009-04-05 09:06:38 +0000;Fail early when toolchain is broken on target platform.

==

numpy/core/setup.py
==================
826add2;David Cournapeau;2009-04-05 09:04:10 +0000;Use environment instead of config files for superpack arc config: simpler and more reliable.

==

pavement.py
==================
9fed0f5;David Cournapeau;2009-04-05 08:59:18 +0000;Depend on sphinx 0.6.1 now for building numpy doc.

==

pavement.py
==================
30bf5ec;Pauli Virtanen;2009-04-04 22:57:00 +0000;sphinxext: autosummary: don't insert nested paragraphs in the table

==

doc/sphinxext/autosummary.py
doc/sphinxext/setup.py
==================
bdb5c3e;David Cournapeau;2009-04-04 10:27:28 +0000;Improve README.txt.
Remove redundant installation instructions (already in INSTALL.txt).

==

README.txt
==================
7097f5a;David Cournapeau;2009-04-04 10:24:22 +0000;Mention nose for requirements.

==

INSTALL.txt
==================
5623a7c;David Cournapeau;2009-04-02 16:21:30 +0000;Revert using setuptools svn revision, it is broken.

==

setup.py
==================
fe23881;David Cournapeau;2009-04-02 16:21:13 +0000;HACK: Make sure we use python.org interpreter to build the mpkg in paver

==

pavement.py
==================
d215183;Pauli Virtanen;2009-04-01 21:57:08 +0000;sphinxext: convert the Sphinx extensions into a `numpydoc` package that can be distributed separately

==

doc/sphinxext/MANIFEST.in
doc/sphinxext/__init__.py
doc/sphinxext/autosummary.py
doc/sphinxext/only_directives.py
doc/sphinxext/plot_directive.py
doc/sphinxext/setup.py
==================
9a63ebd;Pauli Virtanen;2009-04-01 20:38:50 +0000;sphinxext: Sphinx 0.6 compatibility and deprecation warnings

==

doc/postprocess.py
doc/sphinxext/autosummary.py
doc/sphinxext/only_directives.py
doc/sphinxext/plot_directive.py
==================
745ebc0;David Cournapeau;2009-04-01 16:19:07 +0000;Remove missing import.

==

setup.py
==================
d8fc4ad;David Cournapeau;2009-04-01 16:18:55 +0000;Fix missing distutils log import .

==

setup.py
==================
a4c5e55;Pauli Virtanen;2009-03-30 21:54:46 +0000;Fixed #1039: ignore sort order properly in find_duplicates test

==

numpy/lib/tests/test_recfunctions.py
==================
cdf6562;Pauli Virtanen;2009-03-30 19:06:31 +0000;Fixed #852: avoid filename clashes in savez, by using a secure temporary file name

==

numpy/lib/io.py
numpy/lib/tests/test_io.py
==================
3073f2c;David Cournapeau;2009-03-29 12:07:43 +0000;Remove leftover from when I copied the paver file from samplerate scikit.

==

pavement.py
==================
0b0dbdf;David Cournapeau;2009-03-29 12:05:22 +0000;Update paver script file doc + TODO.

==

pavement.py
==================
d7f1ae9;Pauli Virtanen;2009-03-29 01:37:45 +0000;Fix another docstring formatting

==

numpy/testing/decorators.py
==================
e89b62a;Pauli Virtanen;2009-03-29 01:28:57 +0000;Fix docstring formatting (blocks doc build)

==

numpy/testing/decorators.py
==================
8a93617;Pauli Virtanen;2009-03-28 23:56:38 +0000;Move routines.testing.rst to the correct place

==

doc/source/reference/routines.testing.rst
doc/source/routines.testing.rst
==================
8a455cb;Pauli Virtanen;2009-03-28 23:51:52 +0000;Enable docstrings for fmin and fmax

==

numpy/core/code_generators/generate_umath.py
==================
ae002bb;Pauli Virtanen;2009-03-28 22:47:54 +0000;docs: use short X.Y version, and retaining any .dev suffixes

==

doc/source/conf.py
==================
341e1e1;Jarrod Millman;2009-03-28 21:04:48 +0000;stub for generalized ufuncs documentation

==

doc/source/reference/generalized_ufuncs.rst
doc/source/reference/index.rst
==================
a6098d4;David Cournapeau;2009-03-28 12:56:05 +0000;Simplify and fix the latex build in paver.

==

pavement.py
==================
ffaeb86;David Cournapeau;2009-03-28 11:11:54 +0000;Add a task to write notes and changelog once the installers are ready.

==

pavement.py
==================
c7927eb;David Cournapeau;2009-03-28 11:11:43 +0000;Copy tarballs and superpack into release dir.

==

pavement.py
==================
a7499c3;David Cournapeau;2009-03-28 11:11:32 +0000;re-enable correct dep rules for superpack target.

==

pavement.py
==================
6e80c9e;David Cournapeau;2009-03-28 11:11:21 +0000;Abstract superpack installer name.

==

pavement.py
==================
a73581f;David Cournapeau;2009-03-28 11:11:11 +0000;Document global vars in paver.

==

pavement.py
==================
06a6665;David Cournapeau;2009-03-28 11:10:59 +0000;Do not import numpy.distutils in pavement script - not needed.

==

pavement.py
==================
93dc133;David Cournapeau;2009-03-28 11:10:48 +0000;Do not detect universal flags on platform != darwin.

==

numpy/distutils/fcompiler/gnu.py
==================
0dc3ac8;David Cournapeau;2009-03-28 11:10:34 +0000;Fix tab issues in paver file.

==

pavement.py
==================
8774fa4;David Cournapeau;2009-03-28 08:38:08 +0000;Add the x86analysis.py script to check instructions set in win binaries.

==

tools/win32build/misc/x86analysis.py
==================
f29ca7f;David Cournapeau;2009-03-28 07:55:40 +0000;BUG: Fix goftran universal flags settings (#1067).
Arch flags were detected and set for both linkers and compiler. Since they both
used the compiler_f90 as the underlying command, arch flags were added twice to
the compiler command for universal detection, which rendered the verbose output
of gfortran useless.


==

numpy/distutils/fcompiler/gnu.py
==================
577d6d6;Pauli Virtanen;2009-03-27 22:57:14 +0000;Regenerate mtrand.c

==

numpy/random/mtrand/mtrand.c
==================
7cc0108;David Cournapeau;2009-03-27 19:01:10 +0000;Add darwine config.

==

pavement.py
==================
52fb78d;David Cournapeau;2009-03-27 18:37:07 +0000;Use setuptools svn rev parsing, should be more reliable ?

==

setup.py
==================
313f272;David Cournapeau;2009-03-27 18:17:50 +0000;Superpack can now be built from wine, bye bye windows pain.

==

pavement.py
==================
644588a;David Cournapeau;2009-03-27 18:17:39 +0000;Add tasks to build arch specifics wininst.

==

pavement.py
==================
5864bd2;David Cournapeau;2009-03-27 16:39:34 +0000;... and re

==

setup.py
==================
b60cd14;David Cournapeau;2009-03-27 16:39:17 +0000;Forgot to import subprocess.

==

setup.py
==================
5bb1aa5;David Cournapeau;2009-03-27 16:39:01 +0000;Fix svn version detection.

==

setup.py
==================
6b94248;David Cournapeau;2009-03-27 16:38:36 +0000;Add some doc to the paver script.

==

pavement.py
==================
b4be5dd;Charles Harris;2009-03-27 16:24:41 +0000;Fix eigenvalue tests, the eigenvalues needed sorting. Fix test_nanmin_alnan_on_axis, use assert_array_equal.

==

numpy/lib/tests/test_function_base.py
numpy/linalg/tests/test_linalg.py
==================
bc70602;David Cournapeau;2009-03-27 15:48:51 +0000;Add pdf task + full dmg build for paver script.

==

pavement.py
==================
310db3a;David Cournapeau;2009-03-27 15:48:33 +0000;Update paver script such as one can create the fancy numpy dmg in one command.

==

pavement.py
==================
83b74f2;David Cournapeau;2009-03-27 15:48:16 +0000;Add a bdist_mpkg task + fix setup import issues.

==

pavement.py
==================
46a5e2b;David Cournapeau;2009-03-27 12:27:44 +0000;Pick up version from numpy instead of hardcoding them in conf.py/

==

doc/source/conf.py
==================
a70c483;David Cournapeau;2009-03-27 12:07:37 +0000;Fix spelling mistake in version module gen.

==

setup.py
==================
89d874e;David Cournapeau;2009-03-27 11:16:24 +0000;Add simple .dmg build to paver.

==

pavement.py
==================
cc9a446;David Cournapeau;2009-03-27 11:16:13 +0000;Fix metadata incorrectly defined as tuples.

==

setup.py
==================
5e041cb;David Cournapeau;2009-03-27 11:16:01 +0000;Add svn parse for the full version.

==

setup.py
==================
914bb15;David Cournapeau;2009-03-27 11:15:47 +0000;Mention that version.py file is now generated.

==

setup.py
==================
a2ac985;David Cournapeau;2009-03-27 11:15:36 +0000;Generate the version.py file, to help keeping the version synchronized everywhere (doc, paver, etc...).

==

numpy/version.py
setup.py
==================
c253b72;David Cournapeau;2009-03-27 11:15:22 +0000;Use global for distutils metat-data, so that we can pull them from paver.

==

setup.py
==================
db3320c;David Cournapeau;2009-03-27 11:15:11 +0000;Add wine-based bdist_wininst installers.

==

pavement.py
==================
743ac26;David Cournapeau;2009-03-27 11:15:00 +0000;Bypass paver sdist.

==

pavement.py
==================
a293cac;David Cournapeau;2009-03-27 11:14:49 +0000;Clean egg-info too in paver.

==

pavement.py
==================
57fc6f5;David Cournapeau;2009-03-27 11:14:39 +0000;Add bootstrap task.

==

pavement.py
==================
958f4a4;David Cournapeau;2009-03-27 11:14:27 +0000;Add task to build html doc.

==

pavement.py
==================
874a405;David Cournapeau;2009-03-27 11:14:17 +0000;Start a paver file to help for release purpose.

==

pavement.py
==================
94b57c7;Charles Harris;2009-03-27 03:47:40 +0000;Fix ticket #1058. Thanks to Russel.

==

numpy/core/src/multiarraymodule.c
numpy/core/tests/test_regression.py
==================
da8312a;Stefan van der Walt;2009-03-26 23:28:03 +0000;Fix nanmin, -max etc. to handle axis argument correctly.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
7b751f6;Pauli Virtanen;2009-03-24 22:25:21 +0000;Merge from the doc wiki

==

doc/source/about.rst
doc/source/reference/arrays.classes.rst
doc/source/reference/arrays.interface.rst
doc/source/reference/maskedarray.generic.rst
doc/source/reference/routines.array-creation.rst
doc/source/reference/routines.array-manipulation.rst
doc/source/reference/routines.fft.rst
doc/source/reference/routines.rst
doc/source/reference/ufuncs.rst
doc/source/routines.testing.rst
doc/source/user/c-info.how-to-extend.rst
numpy/add_newdocs.py
numpy/core/code_generators/ufunc_docstrings.py
numpy/core/fromnumeric.py
numpy/core/numeric.py
numpy/doc/constants.py
numpy/doc/misc.py
numpy/fft/__init__.py
numpy/fft/fftpack.py
numpy/fft/info.py
numpy/lib/arraysetops.py
numpy/lib/financial.py
numpy/lib/function_base.py
numpy/lib/index_tricks.py
numpy/lib/io.py
numpy/lib/polynomial.py
numpy/lib/shape_base.py
numpy/lib/twodim_base.py
numpy/lib/type_check.py
numpy/lib/ufunclike.py
numpy/lib/utils.py
numpy/linalg/linalg.py
numpy/ma/core.py
numpy/ma/extras.py
numpy/random/mtrand/mtrand.pyx
numpy/testing/utils.py
==================
940a7d3;Pauli Virtanen;2009-03-24 22:24:01 +0000;sphinxext: autosummary: allow trailing explanations in autosummary items

==

doc/sphinxext/autosummary_generate.py
==================
b21d245;Pauli Virtanen;2009-03-24 19:50:16 +0000;test_umath: increase test tolerance, for non-eps-accurate system functions

==

numpy/core/tests/test_umath.py
==================
c518f4d;pierregm;2009-03-24 16:09:45 +0000;* fixed the 'Warnings' section of some docstrings.

==

numpy/ma/core.py
==================
c01b050;David Cournapeau;2009-03-24 06:11:09 +0000;Put the win64 warning in multiarray init instead of _import_array to avoid multiple warnings.

==

numpy/core/code_generators/generate_numpy_api.py
numpy/core/src/multiarraymodule.c
==================
8c0e230;David Cournapeau;2009-03-24 05:58:25 +0000;Emit a warning when numpy is imported on windows x64.

==

numpy/core/code_generators/generate_numpy_api.py
==================
be4bf3f;Pauli Virtanen;2009-03-23 21:44:02 +0000;Re #1008: use appropriate precision constants in Horner series (possible cause for quad precision issues)

==

numpy/core/src/umath_funcs.inc.src
==================
a122b90;Pauli Virtanen;2009-03-23 21:01:18 +0000;Re #1008: add terms to Horner series for long doubles. Fix issues in test.
The Horner series was previously too short to accommodate SPARC quad
precision. There were also some issues with tests on platforms with
bogus longdouble -- finfo would report invalid values for eps/tiny.
Try to detect this now, and to be sure, use only limited magnitude
range for test points (this is sufficient for testing that the series
expansion works).

==

numpy/core/src/umath_funcs.inc.src
numpy/core/tests/test_umath.py
==================
0be8be0;David Cournapeau;2009-03-23 07:34:02 +0000;Fix compilation issue: define _safe_ceil_to_intp before any use of it.

==

numpy/core/src/multiarraymodule.c
==================
aadc042;David Cournapeau;2009-03-23 07:25:41 +0000;Remove last unchecked ceil call in arange.

==

numpy/core/src/multiarraymodule.c
==================
da1c6ed;David Cournapeau;2009-03-23 07:25:26 +0000;Forgot to remove a ceil call in arange, redundant after _safe_ceil_to_intp.

==

numpy/core/src/multiarraymodule.c
==================
3a4d129;David Cournapeau;2009-03-23 07:25:12 +0000;BUG: Check wether ceil would overflow an intp, and if it does, raise a ValueError in arange.

==

numpy/core/src/multiarraymodule.c
==================
0f2fcb2;David Cournapeau;2009-03-23 07:24:58 +0000;Fix regression test for #1062.

==

numpy/core/tests/test_regression.py
==================
6b4bdd1;David Cournapeau;2009-03-23 07:24:44 +0000;Add regression test for #1062.

==

numpy/core/tests/test_regression.py
==================
8640579;David Cournapeau;2009-03-23 06:44:47 +0000;BUG: Fix #1061.

==

numpy/core/src/arrayobject.c
==================
527eebd;David Cournapeau;2009-03-23 06:44:33 +0000;Add regression test for #1061.

==

numpy/core/tests/test_regression.py
==================
8364447;Charles Harris;2009-03-22 06:56:44 +0000;Mention the trunc ufunc as new in 1.3 and note this in its docstring.

==

doc/release/1.3.0-notes.rst
numpy/core/code_generators/ufunc_docstrings.py
==================
6d7e43e;Pauli Virtanen;2009-03-21 21:58:16 +0000;Ensure that documentation for dot, vdot, inner, alterdot, restoredot is the same, independent of whether these functions come from _dotblas or multiarray/numeric.py

==

numpy/add_newdocs.py
numpy/core/blasdot/_dotblas.c
numpy/core/numeric.py
==================
bab64b8;Pauli Virtanen;2009-03-21 21:19:53 +0000;docs: strip trailing whitespace from RST files

==

doc/source/about.rst
doc/source/contents.rst
doc/source/license.rst
doc/source/reference/arrays.classes.rst
doc/source/reference/arrays.dtypes.rst
doc/source/reference/arrays.indexing.rst
doc/source/reference/arrays.interface.rst
doc/source/reference/arrays.ndarray.rst
doc/source/reference/arrays.scalars.rst
doc/source/reference/c-api.array.rst
doc/source/reference/c-api.config.rst
doc/source/reference/c-api.dtype.rst
doc/source/reference/c-api.rst
doc/source/reference/c-api.types-and-structures.rst
doc/source/reference/c-api.ufunc.rst
doc/source/reference/distutils.rst
doc/source/reference/internals.code-explanations.rst
doc/source/reference/maskedarray.baseclass.rst
doc/source/reference/maskedarray.generic.rst
doc/source/reference/routines.array-creation.rst
doc/source/reference/routines.array-manipulation.rst
doc/source/reference/routines.ma.rst
doc/source/reference/routines.math.rst
doc/source/reference/routines.statistics.rst
doc/source/user/basics.indexing.rst
doc/source/user/basics.types.rst
doc/source/user/c-info.beyond-basics.rst
doc/source/user/c-info.how-to-extend.rst
doc/source/user/c-info.python-as-glue.rst
doc/source/user/index.rst
==================
b2634ff;Pauli Virtanen;2009-03-21 21:03:15 +0000;docs: remove invalid information

==

numpy/core/code_generators/ufunc_docstrings.py
numpy/lib/ufunclike.py
==================
0be9072;Pauli Virtanen;2009-03-20 22:39:25 +0000;docs: document some of the API additions in Numpy 1.3.0

==

doc/source/reference/c-api.config.rst
doc/source/reference/c-api.coremath.rst
numpy/core/code_generators/ufunc_docstrings.py
==================
d854e19;David Cournapeau;2009-03-20 08:04:43 +0000;Update version number for trunk to 1.4.0.

==

numpy/version.py
==================
5db0f94;Pauli Virtanen;2009-03-19 20:35:38 +0000;test_umath: forgot that generators and decorators don't play along in Nose; enable the test

==

numpy/core/tests/test_umath.py
==================
03c4e4d;Pauli Virtanen;2009-03-19 20:18:50 +0000;test_umath: skip loss-of-precision test if the MachAr data for long doubles is bogus

==

numpy/core/tests/test_umath.py
==================
a6b253a;David Cournapeau;2009-03-19 03:35:15 +0000;Fix some rest issues in the releases notes.

==

doc/release/1.3.0-notes.rst
==================
b4c2338;David Cournapeau;2009-03-19 03:25:00 +0000;Update release notes for 1.3.0

==

doc/release/1.3.0-notes.rst
==================
ad9cd29;Pauli Virtanen;2009-03-17 22:11:52 +0000;sphinxext: autosummary: fix another signature formatting issue

==

doc/sphinxext/autosummary.py
==================
b43084e;Pauli Virtanen;2009-03-17 20:41:04 +0000;doc: update version info

==

doc/source/conf.py
==================
e9ef18b;Pauli Virtanen;2009-03-17 19:27:56 +0000;sphinxext: autosummary: improve signature output & fix a bug in it

==

doc/sphinxext/autosummary.py
==================
06f4321;Pauli Virtanen;2009-03-17 19:27:30 +0000;sphinxext: autosummary: ignore trailing material on each line
This allows one to add helpful comments to autosummary lines,
if one wants to do so eg. in module docstrings.

==

doc/sphinxext/autosummary.py
==================
4d3cf3d;David Cournapeau;2009-03-16 18:06:45 +0000;Remove long double test for repr round-trip.

==

numpy/core/tests/test_scalarmath.py
==================
e672f36;David Cournapeau;2009-03-16 18:01:30 +0000;Fix exception message when the shape of a subarray is not a tuple.

==

numpy/core/src/hashdescr.c
==================
c931ce6;David Cournapeau;2009-03-16 18:01:07 +0000;Use Py_ssize_t for PyDict_Next.

==

numpy/core/src/hashdescr.c
==================
12038db;David Cournapeau;2009-03-16 18:00:47 +0000;Remove obsolete comments.

==

numpy/core/src/hashdescr.c
==================
6e9c1b7;David Cournapeau;2009-03-16 18:00:25 +0000;Fix English.

==

numpy/core/src/hashdescr.c
==================
4f35a21;David Cournapeau;2009-03-16 18:00:02 +0000;Add one nested compound dtype.

==

numpy/core/tests/test_dtype.py
==================
04bad09;David Cournapeau;2009-03-16 17:59:40 +0000;BUG: hashing dtype failed for subarray which shape was an integer instead of a tuple.

==

numpy/core/src/hashdescr.c
numpy/core/tests/test_dtype.py
==================
baa4d11;David Cournapeau;2009-03-16 17:59:13 +0000;Fix missing declaration for status code.

==

numpy/core/src/hashdescr.c
==================
3963202;David Cournapeau;2009-03-16 17:58:48 +0000;Use python exception system instead of ad-hoc error code.

==

numpy/core/src/hashdescr.c
==================
f9e7ba9;David Cournapeau;2009-03-16 17:58:26 +0000;Fix comment.

==

numpy/core/src/hashdescr.c
==================
a5ef4a3;David Cournapeau;2009-03-16 17:58:02 +0000;Add some documentation and make function names consistent.

==

numpy/core/src/hashdescr.c
==================
c08ee20;David Cournapeau;2009-03-16 17:57:41 +0000;Implement subarray walking for dtype hashing.

==

numpy/core/src/hashdescr.c
==================
8d3c1df;David Cournapeau;2009-03-16 17:57:16 +0000;Walking into fields to compute hash of compound types.

==

numpy/core/src/hashdescr.c
==================
617dc9d;David Cournapeau;2009-03-16 17:56:49 +0000;Start implementing 'real' hashing protocol: works for builtin.

==

numpy/core/src/hashdescr.c
==================
10cccca;David Cournapeau;2009-03-16 17:56:17 +0000;Using separate compilation unit does not work for array API.

==

numpy/core/setup.py
numpy/core/src/hashdescr.c
numpy/core/src/hashdescr.h
numpy/core/src/multiarraymodule.c
==================
1bebeca;David Cournapeau;2009-03-16 17:55:49 +0000;Start implementing hashing protocol for type descr
First step: create a new PyArray_DescrHash, which is just a stub to
PyObject_Hash, but is in a different file (to avoid recompiling the
whole numpy core everytime).

==

numpy/core/setup.py
numpy/core/src/hashdescr.c
numpy/core/src/hashdescr.h
numpy/core/src/multiarraymodule.c
==================
ebc31e8;David Cournapeau;2009-03-16 17:55:17 +0000;Add some unit tests for the hashing protocol of dtype (fail currently).

==

numpy/core/tests/test_dtype.py
==================
576a678;Charles Harris;2009-03-14 20:48:14 +0000;Make logseries test deterministic.

==

numpy/random/tests/test_random.py
==================
a1e2f9b;Charles Harris;2009-03-14 20:18:53 +0000;Fix tickets #921 and #923. Add regression tests.

==

numpy/random/mtrand/distributions.c
numpy/random/tests/test_random.py
==================
016afc5;Charles Harris;2009-03-14 20:16:12 +0000;Give assert_ a default message of ''.

==

numpy/testing/utils.py
==================
5f98923;Charles Harris;2009-03-14 02:13:50 +0000;Add macros for ia64

==

numpy/core/include/numpy/npy_cpu.h
numpy/core/include/numpy/npy_endian.h
==================
bcd2112;Stefan van der Walt;2009-03-13 15:47:43 +0000;Test commit mailing list.

==

TEST_COMMIT
==================
e36d814;Stefan van der Walt;2009-03-13 15:43:41 +0000;Test whether SVN hook is working.

==

TEST_COMMIT
==================
74b16f6;David Cournapeau;2009-03-13 05:13:26 +0000;Revert "Fix wrong formatting: Py_ssize_t vs npy_intp."
NPY_SSIZE_FORMAT is for parsing from PyArg_* functions, not for printf.

==

numpy/core/src/arrayobject.c
==================
ff7d512;David Cournapeau;2009-03-13 05:11:05 +0000;Check for the inline keywork in numscons build.

==

numpy/core/SConscript
numpy/core/include/numpy/numpyconfig.h.in
==================
2626cea;David Cournapeau;2009-03-13 05:10:49 +0000;Add inline keyword check.

==

numpy/core/scons_support.py
==================
1d5343b;David Cournapeau;2009-03-13 05:10:36 +0000;Use setup_common for scons build.

==

numpy/core/SConscript
==================
6db55e7;David Cournapeau;2009-03-13 05:10:23 +0000;Put func name -> conf string convertion in setup_common.

==

numpy/core/setup.py
numpy/core/setup_common.py
==================
ce0dd44;David Cournapeau;2009-03-13 05:10:09 +0000;Put math funcs to test in separate file to share with numscons build.

==

numpy/core/setup.py
numpy/core/setup_common.py
==================
ebd770a;David Cournapeau;2009-03-12 16:34:36 +0000;Back out VS 2003 hack - it is too fragile.

==

numpy/distutils/command/build_ext.py
numpy/distutils/command/build_src.py
==================
016763c;David Cournapeau;2009-03-12 14:20:59 +0000;Fix wrong formatting: Py_ssize_t vs npy_intp.

==

numpy/core/src/arrayobject.c
==================
3042a38;David Cournapeau;2009-03-12 14:17:09 +0000;Skip graciously when ctypes is not available.

==

numpy/tests/test_ctypeslib.py
==================
6f60d2c;David Cournapeau;2009-03-12 14:01:39 +0000;Make the gfortran/vs2003 hack source file known to distutils.

==

numpy/distutils/setup.py
==================
950139d;David Cournapeau;2009-03-12 12:41:22 +0000;Remove python 2.3, add 2.6 for build scripts on windows.

==

tools/win32build/build.py
==================
8174ea6;David Cournapeau;2009-03-11 16:56:53 +0000;Remove ambiguous Euler constant naming for e.

==

doc/source/reference/c-api.coremath.rst
==================
6485a8e;pierregm;2009-03-11 16:47:36 +0000;numpy.ma doc update

==

doc/source/reference/maskedarray.baseclass.rst
doc/source/reference/maskedarray.generic.rst
doc/source/reference/routines.ma.rst
numpy/ma/core.py
==================
a082b6c;David Cournapeau;2009-03-11 13:23:44 +0000;Ugly hack to workaround some bug in mingw to make VS 2003 work with gfortran.

==

numpy/distutils/command/build_ext.py
numpy/distutils/command/build_src.py
numpy/distutils/mingw/gfortran_vs2003_hack.c
==================
a2c6798;David Cournapeau;2009-03-11 10:58:27 +0000;Add a function to get MSVC version.

==

numpy/distutils/misc_util.py
==================
727a1c5;David Cournapeau;2009-03-11 09:23:52 +0000;Remove colloquial expression.

==

doc/source/reference/c-api.coremath.rst
==================
a5575c8;David Cournapeau;2009-03-11 09:23:38 +0000;Spelling.

==

doc/source/reference/c-api.coremath.rst
==================
45e92e7;David Cournapeau;2009-03-11 09:23:23 +0000;Fix latex in core math doc.

==

doc/source/reference/c-api.coremath.rst
==================
7bf8ace;David Cournapeau;2009-03-11 09:23:08 +0000;Document math constants.

==

doc/source/reference/c-api.coremath.rst
doc/source/reference/c-api.rst
==================
d71bd35;David Cournapeau;2009-03-11 09:22:53 +0000;Start documenting npy math.

==

doc/source/reference/c-api.coremath.rst
==================
df21956;David Cournapeau;2009-03-11 09:22:34 +0000;Update configuration in the numpy reference.

==

doc/source/reference/c-api.config.rst
==================
1c9975b;David Cournapeau;2009-03-11 07:51:24 +0000;Put NPY_NAN and co at the correct location in the releases notes.

==

doc/release/1.3.0-notes.rst
==================
4326a51;David Cournapeau;2009-03-11 07:51:11 +0000;Document which configurations work for gfortran  + MS compiler.

==

doc/release/1.3.0-notes.rst
==================
9c3f0da;David Cournapeau;2009-03-11 07:44:24 +0000;Mention NPY_NAN and co in the release notes.

==

doc/release/1.3.0-notes.rst
==================
43399b7;David Cournapeau;2009-03-11 07:40:28 +0000;Remove pzero/pinf init functions, and use NPY_* macros instead.

==

numpy/core/src/umathmodule.c.src
==================
8f15bfc;David Cournapeau;2009-03-11 07:37:47 +0000;Use NPY_NAN instead of computing a nan - also fix #920, since NPY_NAN is a positive nan.

==

numpy/core/src/umathmodule.c.src
==================
5d2998a;David Cournapeau;2009-03-11 07:37:32 +0000;Add a regression test to check our nan is a positive nan.

==

numpy/core/tests/test_umath.py
==================
4e0a672;David Cournapeau;2009-03-11 06:47:06 +0000;Do not use NAN (GNU specific extension) but our portable NPY_NAN instead.

==

numpy/core/src/umath_loops.inc.src
==================
c5b2f31;David Cournapeau;2009-03-11 06:41:48 +0000;Add the numpy icons to the repository.

==

branding/icons/numpylogo.svg
branding/icons/numpylogoicon.svg
==================
987d5e0;David Cournapeau;2009-03-11 06:39:47 +0000;Do not pull the whole ndarrayobject header in npy math, to avoid unused _import_array warning, and because we don't need it anyway.

==

numpy/core/include/numpy/npy_math.h
==================
07e396f;David Cournapeau;2009-03-11 06:39:30 +0000;Define NPY_INLINE as a (public) macro for portable inline, and use it in npy_math.h, to avoid spurious warnings about unused static functions.

==

numpy/core/include/numpy/npy_math.h
numpy/core/setup.py
==================
dc8294d;David Cournapeau;2009-03-11 06:39:13 +0000;Move bit-width types to npy_common, so that we can use it in pure C code (code which does not use the python API), npymath in particular, without pulling the whole ndarray headers.

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/include/numpy/npy_common.h
==================
f87fb9c;David Cournapeau;2009-03-11 06:38:56 +0000;Define inline to something we can use internally.

==

numpy/core/setup.py
==================
354e0eb;David Cournapeau;2009-03-11 06:38:42 +0000;Add check for (C) inline.

==

numpy/distutils/command/autodist.py
numpy/distutils/command/config.py
==================
523a237;Charles Harris;2009-03-11 03:50:09 +0000;Add note about sign(nan) to release doc.

==

doc/release/1.3.0-notes.rst
==================
21cbf24;Charles Harris;2009-03-10 22:24:45 +0000;Change complex version of sign to return nan for nan input. Fix test to reflect this new behavior.

==

numpy/core/src/umath_loops.inc.src
numpy/core/tests/test_regression.py
==================
5847959;Charles Harris;2009-03-10 21:48:29 +0000;fix remaining tests to reflect new behavior of sign(nan)

==

numpy/lib/tests/test_ufunclike.py
==================
670a4e7;Charles Harris;2009-03-10 19:47:01 +0000;Fix a test failure due to changes in the sign ufunc.

==

numpy/lib/tests/test_ufunclike.py
==================
a4816bc;Charles Harris;2009-03-10 19:37:52 +0000;Change behavior of sign ufunc so it returns nan for nan instead of zero. This breaks two tests because the boolean value of nan is now True. I will open a ticket for this but won't resolve it until it is discussed on the list.

==

numpy/core/src/umath_loops.inc.src
==================
1be8c35;Pauli Virtanen;2009-03-10 18:52:45 +0000;test_umath: remove unnecessary test from #1008 test set
Apparently, on VS2008, arctanh (either the real or complex one) has
some cancellation error near x=1. This is a separate issue from #1008,
and so shouldn't be tested by its tests.

==

numpy/core/tests/test_umath.py
==================
7382496;Charles Harris;2009-03-10 17:51:03 +0000;Fix ticket #1048.

==

numpy/core/src/umath_loops.inc.src
numpy/core/src/umath_ufunc_object.inc
==================
d3a8a63;David Cournapeau;2009-03-10 14:36:08 +0000;Set formatting references for nan/inf complexes depending on the python version, since python 2.6 have revamps its own formatting support.

==

numpy/core/tests/test_print.py
==================
bb41c56;David Cournapeau;2009-03-10 14:27:32 +0000;Fix wrongly inserted * character for the real part of complex number with nan/inf.

==

numpy/core/src/scalartypes.inc.src
==================
92e09e4;David Cournapeau;2009-03-10 14:27:00 +0000;Fix C99 declaration style.

==

numpy/core/src/umath_ufunc_object.inc
==================
82803fe;David Cournapeau;2009-03-10 14:08:25 +0000;Fix double comma syntax error.

==

numpy/core/src/scalartypes.inc.src
==================
6433987;David Cournapeau;2009-03-10 13:47:28 +0000;Remove NumpyOS_init, obsoleted by our NPY_NAN and co macros.

==

numpy/core/src/multiarraymodule.c
numpy/core/src/numpyos.c
==================
3258937;David Cournapeau;2009-03-10 13:47:11 +0000;Fix wrong cast for zero macros.

==

numpy/core/include/numpy/npy_math.h
==================
7c1192a;David Cournapeau;2009-03-10 13:46:55 +0000;Add macros for positive and negative inf.

==

numpy/core/include/numpy/npy_math.h
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
numpy/core/src/numpyos.c
==================
8921d5d;David Cournapeau;2009-03-10 13:46:36 +0000;Use functions instead of anonymous union that some compilers don't like.

==

numpy/core/include/numpy/npy_math.h
==================
5333436;David Cournapeau;2009-03-10 13:46:20 +0000;Add portable equivalent of NAN/INFINITY.

==

numpy/core/include/numpy/npy_math.h
==================
338d5c5;David Cournapeau;2009-03-10 12:12:42 +0000;Revert adding '*' character for nan and inf before the imaginary tag for python >= 2.6.

==

numpy/core/src/scalartypes.inc.src
==================
97c8aa9;David Cournapeau;2009-03-10 12:06:01 +0000;numscons build for umath_tests.

==

numpy/core/SConscript
==================
44bd513;Pauli Virtanen;2009-03-10 09:56:05 +0000;Fixing #1045: don't output * in between of inf/nan and j

==

numpy/core/src/scalartypes.inc.src
numpy/core/tests/test_print.py
==================
a49c262;David Cournapeau;2009-03-10 05:36:46 +0000;Fix nan/inf handling when formatting complex numbers.

==

numpy/core/src/scalartypes.inc.src
==================
4a45e03;Pauli Virtanen;2009-03-10 00:23:09 +0000;Fixed #950: fix bug in dotblas 0D input detection.
One of the branches in dotblas_matrixproduct tried to dereference the
arr->data of a 0D array. This should plug it.

==

numpy/core/blasdot/_dotblas.c
numpy/core/tests/test_regression.py
==================
d771e4e;Pauli Virtanen;2009-03-09 23:09:55 +0000;Fixed #836: ensure z**3 = z*z*z, z**2 == z*z and z**1 == z for complex pow+inf.
C99 standard is silent on how complex pow should behave with inf/nan values,
but gives leeway for handling special cases.

==

numpy/core/src/umath_funcs.inc.src
numpy/core/tests/test_umath.py
==================
9d6b9b9;Pauli Virtanen;2009-03-09 20:49:55 +0000;Fixed #745: make assert_array_almost_equal work with object arrays

==

numpy/testing/tests/test_utils.py
numpy/testing/utils.py
==================
de62644;David Cournapeau;2009-03-09 20:32:16 +0000;Apply patch from #953 to fix two doctests.

==

numpy/matlib.py
==================
b51762e;David Cournapeau;2009-03-09 20:31:48 +0000;Fix docstring for amax/amin.

==

numpy/core/fromnumeric.py
==================
7d75121;David Cournapeau;2009-03-09 17:22:56 +0000;Fix and re-enable regression test #947.

==

numpy/core/tests/test_regression.py
==================
d9b8b76;David Cournapeau;2009-03-09 17:22:42 +0000;Fix #947.

==

numpy/core/src/multiarraymodule.c
==================
e62aa7e;David Cournapeau;2009-03-09 17:22:28 +0000;Use a failure label when _array_fromobject fails.

==

numpy/core/src/multiarraymodule.c
==================
1ace444;David Cournapeau;2009-03-09 17:22:11 +0000;Add regression tesst for #947.

==

numpy/core/tests/test_regression.py
==================
46b375c;dhuard;2009-03-09 16:12:57 +0000;Applied Anand's patch fixing Ticket #986 regarding the domain of the Von Mises random variable generator. Regression test added.

==

numpy/random/mtrand/distributions.c
numpy/random/tests/test_random.py
==================
dd8299b;David Cournapeau;2009-03-09 15:26:28 +0000;BUG: when a new type is required, and the fast clip function is updated, make sure the function pointer is not NULL - if it is, fall back to slow array.

==

numpy/core/src/multiarraymodule.c
==================
0588cb8;David Cournapeau;2009-03-09 15:26:14 +0000;Fix import issue.

==

numpy/lib/tests/test_io.py
==================
1d4365c;David Cournapeau;2009-03-09 12:58:45 +0000;Re-enable long double repr tests, as long double formatting has been fixed on windows.

==

numpy/core/tests/test_scalarmath.py
==================
4b6277c;David Cournapeau;2009-03-09 12:56:20 +0000;Sort index of find_duplicated before testing, because the exact order is undefined for identical entries.

==

numpy/lib/tests/test_recfunctions.py
==================
c2bb0f9;David Cournapeau;2009-03-09 10:40:40 +0000;Remove dead code.

==

numpy/lib/tests/test_io.py
==================
372e31e;David Cournapeau;2009-03-09 10:28:23 +0000;Re-enable generalized ufunc tests on win32, since the corresponding module now builds correctly.

==

numpy/core/tests/test_ufunc.py
==================
d4722fa;David Cournapeau;2009-03-09 09:40:53 +0000;Do not hardcode string for savetxt testing, as the exact representation depends on the platform.

==

numpy/lib/tests/test_io.py
==================
03c47e4;David Cournapeau;2009-03-09 09:24:29 +0000;BUG: Rewrite test_gzip_loadtxt to avoid NamedTemporaryFile which is  unusable with windows IO semantics + add another test for compressed string argument to loadtxt.

==

numpy/lib/tests/test_io.py
==================
2ef6634;David Cournapeau;2009-03-09 09:12:04 +0000;Close file handle in loadtxt if we opened the file ourselves.

==

numpy/lib/io.py
==================
969ef15;David Cournapeau;2009-03-09 07:56:24 +0000;Make the type cast clearer + comment.

==

numpy/core/src/scalarmathmodule.c.src
==================
3b2ea6c;David Cournapeau;2009-03-09 07:56:10 +0000;More signed/unsigned comp fixes.

==

numpy/core/src/umath_ufunc_object.inc
numpy/numarray/_capi.c
==================
6a2a979;David Cournapeau;2009-03-09 07:55:54 +0000;More unsigned comparison warning fixes.

==

numpy/core/src/arrayobject.c
numpy/core/src/scalarmathmodule.c.src
numpy/core/src/scalartypes.inc.src
==================
e16daf2;David Cournapeau;2009-03-09 07:55:38 +0000;More signed/unsigned fixes.

==

numpy/core/src/_sortmodule.c.src
==================
54608a8;David Cournapeau;2009-03-09 07:55:24 +0000;Fix signed/unsigned warnings by doing explicit cast (as done by the compiler implicitely anyway).

==

numpy/core/blasdot/_dotblas.c
==================
eefc141;Charles Harris;2009-03-09 03:36:49 +0000;Fix polyint to work correctly with float, complex, and int inputs. Fix polydiv to work correctly with float, complex, and int inputs.

==

numpy/lib/polynomial.py
numpy/lib/tests/test_regression.py
==================
4a63253;Charles Harris;2009-03-09 01:00:12 +0000;Fix ticket #944.

==

numpy/lib/polynomial.py
numpy/lib/tests/test_regression.py
==================
3926a6c;Charles Harris;2009-03-09 00:58:59 +0000;Add assert_ as a release safe version of assert for running tests.

==

numpy/testing/utils.py
==================
5a9fe50;Charles Harris;2009-03-08 23:00:00 +0000;Add test for array priorities involving scalars.

==

numpy/core/tests/test_umath.py
==================
9673a83;Charles Harris;2009-03-08 22:45:07 +0000;Fix type in test_wrap_with_iterable.

==

numpy/core/tests/test_umath.py
==================
a947249;Charles Harris;2009-03-08 22:22:09 +0000;Cleanup the _find_array_wrap code a bit.

==

numpy/core/src/umath_ufunc_object.inc
==================
cb9f562;Charles Harris;2009-03-08 22:03:49 +0000;Add test for wrap with iterable. Thanks to Darren Dale for the patch.

==

numpy/core/tests/test_umath.py
==================
677173f;Charles Harris;2009-03-08 21:51:07 +0000;Apply patch in ticket #826 to fix problem with subtypes.

==

numpy/core/src/scalarmathmodule.c.src
==================
e1c91c7;Charles Harris;2009-03-08 20:47:25 +0000;Apply patch from Darren Dale to fix __array_wrap__ problem.

==

numpy/core/src/umath_ufunc_object.inc
==================
919f279;Charles Harris;2009-03-08 20:31:42 +0000;Apply patch from ticket #1040 fixing some 64 bit issues. Thanks to jmiller.

==

numpy/core/src/arrayobject.c
==================
41be2e3;Charles Harris;2009-03-08 20:31:30 +0000;Make printout of precision test fail more informative.

==

numpy/core/tests/test_umath.py
==================
090ce2a;Stefan van der Walt;2009-03-08 18:21:06 +0000;Merge reviewed docstrings from editor.

==

numpy/core/arrayprint.py
numpy/core/code_generators/ufunc_docstrings.py
numpy/core/fromnumeric.py
numpy/lib/function_base.py
==================
bb4c141;Pauli Virtanen;2009-03-08 17:12:48 +0000;doc: make the endorsement of PEP 3118 over the old array interface more strongly worder

==

doc/source/reference/arrays.interface.rst
==================
8103f47;Pauli Virtanen;2009-03-08 17:00:18 +0000;Test commit 2

==

TEST_COMMIT
==================
dcb6f49;Pauli Virtanen;2009-03-08 16:04:52 +0000;Test commit

==

TEST_COMMIT
==================
06ffe4d;David Cournapeau;2009-03-08 07:27:32 +0000;Use NPY_PI instead of C math lib one, which is not always available.

==

numpy/core/src/umathmodule.c.src
==================
ff0b512;Charles Harris;2009-03-08 05:24:30 +0000;Cleanup PyArray_GetEndianness.

==

numpy/core/src/multiarraymodule.c
==================
931a592;Charles Harris;2009-03-08 04:53:27 +0000;Coding style cleanups. Finishes numpyos.c.

==

numpy/core/src/numpyos.c
==================
61f7fa9;Charles Harris;2009-03-08 04:31:10 +0000;Add complex log2,exp2 to generated ufuncs. Add complex log2,exp2 to tests. Some whitespace cleanup.

==

numpy/core/code_generators/generate_umath.py
numpy/core/tests/test_umath.py
==================
1e0c943;Charles Harris;2009-03-08 03:32:39 +0000;Fix use of " ' " character in npy_endian.h Fix whitespace in npy_math.h Add complex log2, exp2 to umath_funcs.inc.src Use npy constants in umath_funcs.inc.src

==

numpy/core/include/numpy/npy_endian.h
numpy/core/include/numpy/npy_math.h
numpy/core/src/umath_funcs.inc.src
==================
612b503;Pauli Virtanen;2009-03-07 22:49:28 +0000;doc/Makefile: fix bug in PYTHONPATH specification

==

doc/Makefile
==================
5e04558;Pauli Virtanen;2009-03-07 21:55:04 +0000;doc/Makefile: make dist target to build current version of numpy

==

doc/Makefile
==================
31f7df3;David Cournapeau;2009-03-07 16:26:11 +0000;Fix CPU macros for MS compilers.

==

numpy/core/include/numpy/npy_cpu.h
==================
4e18ee3;David Cournapeau;2009-03-06 18:36:55 +0000;Fix x86 and amd64 arch setup with Sun compilers on opensolaris.

==

numpy/core/include/numpy/npy_cpu.h
==================
5a7d8ac;David Cournapeau;2009-03-06 18:31:49 +0000;Fix endianess detection: multibyte int constant is not portable (fails with Sun compilers for example), use a 4 characters string instead.

==

numpy/core/src/multiarraymodule.c
==================
4b7c165;David Cournapeau;2009-03-06 16:10:50 +0000;Enable umath_test on all platforms.

==

numpy/core/tests/test_ufunc.py
==================
563c045;David Cournapeau;2009-03-06 15:13:10 +0000;Do not use cblas anymore when building umath_test.

==

numpy/core/setup.py
==================
18a0de7;David Cournapeau;2009-03-06 15:12:42 +0000;Remove CBLAS-dependent code in umath tests - use plain C imp instead.

==

numpy/core/src/umath_tests.c.src
==================
44d7136;David Cournapeau;2009-03-06 15:08:04 +0000;Add NPY_PPC64 support.

==

numpy/core/include/numpy/npy_cpu.h
==================
358ef7d;David Cournapeau;2009-03-06 14:41:42 +0000;Merge branch 'runtime_endian'

==
==================
944894a;David Cournapeau;2009-03-06 14:39:26 +0000;Mention /arch option for binary installer.

==

doc/release/1.3.0-notes.rst
==================
04cc3cd;David Cournapeau;2009-03-06 14:39:06 +0000;Update the releases notes for 1.3.0

==

doc/release/1.3.0-notes.rst
==================
9064d4b;David Cournapeau;2009-03-06 14:36:33 +0000;Add documentation for amin/amax.

==

numpy/core/fromnumeric.py
==================
173384a;Stefan van der Walt;2009-03-06 09:09:45 +0000;For kaiser, allow beta to be specified as an integer.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
442d00d;Charles Harris;2009-03-05 17:30:02 +0000;Add description of new ufuncs. Add some comments about nan handling in amax/amin.

==

doc/release/1.3.0-notes.rst
==================
428c89c;Charles Harris;2009-03-05 03:40:32 +0000;Coding style cleanup. Remove trailing whitespace.

==

numpy/core/src/arrayobject.c
==================
ac6175f;Travis Oliphant;2009-03-04 17:14:10 +0000;Minor changes to DEV_README + fix to a 64-bit issue.

==

DEV_README.txt
numpy/core/src/arrayobject.c
==================
8fb48b7;David Cournapeau;2009-03-04 10:42:39 +0000;Re-enable generalized ufunc test module + related unit tests.

==

numpy/core/setup.py
numpy/core/tests/test_ufunc.py
==================
0e9f73d;Stefan van der Walt;2009-03-04 08:11:37 +0000;Update URLs to Trac.

==

doc/release/1.3.0-notes.rst
doc/source/about.rst
doc/sphinxext/numpydoc.py
doc/sphinxext/traitsdoc.py
==================
66f3613;Pauli Virtanen;2009-03-03 20:14:47 +0000;cmath.asinh is still broken in Python 2.5.4: don't compare against it unless Python version >= 2.6

==

numpy/core/tests/test_umath.py
==================
d842f52;David Cournapeau;2009-03-03 12:23:36 +0000;Revert r6528 (crashes on windows). I think the bug is only hidden for now, and there may be a leak somewhere in PyArray_PutMask function; should investigate for 1.3.0.

==

numpy/core/src/multiarraymodule.c
==================
f169313;David Cournapeau;2009-03-03 11:57:57 +0000;Add notes on Windows for AMD64.

==

INSTALL.txt
==================
db0301a;David Cournapeau;2009-03-03 11:57:45 +0000;Update release notes for 1.3.0.

==

doc/release/1.3.0-notes.rst
==================
2f1c2a4;David Cournapeau;2009-03-03 09:50:05 +0000;Fix wrong typedef for UInt64.

==

numpy/numarray/numpy/arraybase.h
==================
18b91d8;David Cournapeau;2009-03-03 09:29:00 +0000;Mark unused fptr as unused to avoid spurious warnings flags.

==

numpy/core/src/umath_loops.inc.src
==================
d47f26c;David Cournapeau;2009-03-03 04:59:18 +0000;Add missing npy_modf declaration.

==

numpy/core/include/numpy/npy_math.h
==================
7170d0a;Stefan van der Walt;2009-03-02 21:11:31 +0000;Python 3000 fixes for 2to3 [patch by James Watson].

==

numpy/distutils/command/build_src.py
numpy/distutils/misc_util.py
numpy/f2py/crackfortran.py
numpy/lib/function_base.py
numpy/linalg/lapack_lite/make_lite.py
==================
553a300;Stefan van der Walt;2009-03-02 20:05:32 +0000;Correctly handle gzip filenames in loadtxt.

==

numpy/lib/io.py
numpy/lib/tests/test_io.py
==================
97cc30a;David Cournapeau;2009-03-02 19:28:17 +0000;Some missing spots when using npymath lib instead of raw math C libm in umath.

==

numpy/core/src/umath_loops.inc.src
==================
e949e37;David Cournapeau;2009-03-02 19:27:55 +0000;Fix wrong declaration for signbit imp.

==

numpy/core/include/numpy/npy_math.h
==================
6b59456;David Cournapeau;2009-03-02 19:27:02 +0000;Mention nan handling in max and co for 1.3.0. in the releases notes.

==

doc/release/1.3.0-notes.rst
==================
e40a3f1;David Cournapeau;2009-03-02 16:12:45 +0000;Do not use old noprefix header in dotblas (#945).

==

numpy/core/blasdot/_dotblas.c
==================
47caf64;David Cournapeau;2009-03-02 15:08:27 +0000;Allow c in dtype for charray (#917).

==

numpy/core/defchararray.py
numpy/core/tests/test_defchararray.py
==================
7dc0e14;David Cournapeau;2009-03-02 15:01:21 +0000;Make sure dest array is aligned for putmask.

==

numpy/core/src/multiarraymodule.c
==================
1e150f0;David Cournapeau;2009-03-02 14:46:20 +0000;Add in-place power raising for matrices (#787).

==

numpy/core/defmatrix.py
numpy/core/tests/test_defmatrix.py
==================
9505ef3;David Cournapeau;2009-03-02 14:26:50 +0000;BUG: fix #786, bad exception for wrong order for linalg.norm.

==

numpy/linalg/linalg.py
numpy/linalg/tests/test_linalg.py
numpy/linalg/tests/test_regression.py
==================
1cf5461;David Cournapeau;2009-03-02 14:18:29 +0000;Fix norm tests for single prec.

==

numpy/linalg/tests/test_linalg.py
==================
465afd2;David Cournapeau;2009-03-02 14:18:15 +0000;Abstract away dtype for norm test.

==

numpy/linalg/tests/test_linalg.py
==================
e9d13fa;David Cournapeau;2009-03-02 14:18:01 +0000;rename check_empty method to test_, so that is is picked up by nose.

==

numpy/linalg/tests/test_linalg.py
==================
023546b;David Cournapeau;2009-03-02 14:17:43 +0000;TEST: add tests for norm from #763.

==

numpy/linalg/tests/test_linalg.py
==================
646b6dd;David Cournapeau;2009-03-02 13:35:13 +0000;Update numpy.i to fix const char* return warnings issues with later versions of g++ (from Matthieu Brucher).

==

doc/swig/numpy.i
==================
4644a29;Pauli Virtanen;2009-03-01 17:07:06 +0000;Fixed #1008: loss of precision issues in arcsin, arcsinh, arctan, arctanh
The complex-valued arc* functions (that -> 0 for z -> 0) have loss of
precision issues for small arguments. This patch addresses this
by switching to a series expansion (in Horner form) in this regime.

Tests included.

==

numpy/core/src/umath_funcs.inc.src
numpy/core/tests/test_umath.py
==================
69d6473;Pauli Virtanen;2009-02-27 22:27:14 +0000;docs: move edit link to the sidebar, and show it for all pages

==

doc/source/_templates/layout.html
doc/source/conf.py
==================
9e97859;David Cournapeau;2009-02-27 18:34:42 +0000;Test commit.

==

TEST_COMMIT
==================
17e2f03;David Cournapeau;2009-02-27 12:07:22 +0000;Remove unused iswin64 in multiarray unit test.

==

numpy/core/tests/test_multiarray.py
==================
9e6abf0;David Cournapeau;2009-02-27 12:06:40 +0000;float format unit test now passes on win64.

==

numpy/core/tests/test_multiarray.py
==================
1726c90;David Cournapeau;2009-02-27 12:04:23 +0000;More string comp test know pass on win64.

==

numpy/core/tests/test_multiarray.py
==================
f7170f9;David Cournapeau;2009-02-27 12:02:24 +0000;All regression tests now pass on win64.

==

numpy/core/tests/test_regression.py
==================
ac0af24;David Cournapeau;2009-02-27 12:00:41 +0000;Remove one more win64 known failure which now passes.

==

numpy/core/tests/test_scalarmath.py
==================
a4b3a00;David Cournapeau;2009-02-27 11:59:26 +0000;Screwed up the commit - effectively remove all unicode known failures on win64.

==

numpy/core/tests/test_unicode.py
==================
acfc873;David Cournapeau;2009-02-27 11:57:06 +0000;All unicode test now pass with mingw64.

==

numpy/core/tests/test_unicode.py
==================
9e06a43;David Cournapeau;2009-02-27 11:54:31 +0000;Force double convertion for long double on windows x64 as well.

==

numpy/core/setup.py
==================
325f053;David Cournapeau;2009-02-27 09:13:43 +0000;Try to hide that I can't compute how many weeks there are in a month...

==

doc/release/time_based_proposal.rst
==================
883241f;David Cournapeau;2009-02-27 08:29:55 +0000;Start working on bug tracker limitations, scenario and possible solutions.

==

doc/neps/newbugtracker.rst
==================
f77766f;David Cournapeau;2009-02-27 07:32:04 +0000;More esthetical changes in rest document.

==

doc/release/time_based_proposal.rst
==================
8413dbe;David Cournapeau;2009-02-27 07:29:42 +0000;Fix tables and syntax issues for rest document.

==

doc/release/time_based_proposal.rst
==================
85adad9;David Cournapeau;2009-02-27 07:24:17 +0000;Spelling in time-based release doc.

==

doc/release/time_based_proposal.rst
==================
eb8892e;David Cournapeau;2009-02-27 07:23:01 +0000;Rename the time-based proposal such as it is recognized as REST by trac.

==

doc/release/time_based_proposal.rst
doc/release/time_based_proposal.txt
==================
1924194;David Cournapeau;2009-02-27 07:21:23 +0000;Add references for time based releases proposal.

==

doc/release/time_based_proposal.txt
==================
4edeb78;David Cournapeau;2009-02-27 07:21:09 +0000;Start the proposal for time-based release.

==

doc/release/time_based_proposal.txt
==================
069fcb4;David Cournapeau;2009-02-27 04:50:13 +0000;Update releases notes for 1.3.0.

==

doc/release/1.3.0-notes.rst
==================
10afe75;David Cournapeau;2009-02-26 14:41:19 +0000;Do not unconditionally remove some function checks.

==

numpy/core/setup.py
==================
e122ced;David Cournapeau;2009-02-26 14:07:23 +0000;Use hints for sizeof checks, to speed things up.

==

numpy/core/setup.py
==================
22dd86a;David Cournapeau;2009-02-26 14:07:09 +0000;Add an expected keyword for check_type_size check, to speed things up on common platforms.

==

numpy/distutils/command/config.py
==================
f76f109;David Cournapeau;2009-02-26 14:06:55 +0000;Avoid checking twice the IEEE macros.

==

numpy/core/setup.py
==================
18091e7;David Cournapeau;2009-02-26 14:06:42 +0000;Make a deepcopy of cached output to avoid side-effects.

==

numpy/core/setup.py
==================
88fca37;David Cournapeau;2009-02-26 14:06:29 +0000;Rename name_to_defsymb for consistency.

==

numpy/core/setup.py
==================
dca2d2d;David Cournapeau;2009-02-26 13:22:02 +0000;Cache the sizeof computation to speed up configuration stage.

==

numpy/core/setup.py
==================
576d39d;David Cournapeau;2009-02-26 13:21:49 +0000;Use config_cmd directly as an argument for check_types.

==

numpy/core/setup.py
==================
105a39a;David Cournapeau;2009-02-26 13:21:34 +0000;Remote obsolete test code for sizeof defines.

==

numpy/core/setup.py
==================
97201bf;David Cournapeau;2009-02-26 12:38:23 +0000;SIZEOF_LONGDOUBLE and SIZEOF_LONGLONG are public, since they are defined in noprefix.h. So don't define those in config.h.

==

numpy/core/setup.py
==================
500627d;David Cournapeau;2009-02-26 12:38:10 +0000;BUG: fix sym2def. Some of our SIZEOF_ defines were not consistent with the ones actually used in the code (SIZEOF_LONG_DOUBLE vs SIZEOF_LONGDOUBLE).

==

numpy/core/setup.py
==================
455181d;David Cournapeau;2009-02-26 12:37:57 +0000;BUG: forgot to add sizeof check for long long type when PY_LONG_LONG is defined.

==

numpy/core/setup.py
==================
6544f0d;David Cournapeau;2009-02-26 12:37:39 +0000;Do not use testcode anymore for numpyconfig.h generation.

==

numpy/core/setup.py
==================
649b26a;David Cournapeau;2009-02-26 12:37:26 +0000;Fill-up public defines in check_types.

==

numpy/core/setup.py
==================
d58becf;David Cournapeau;2009-02-26 12:37:07 +0000;Find sizeof wo running on the target platform.

==

numpy/distutils/command/config.py
==================
344b20e;David Cournapeau;2009-02-26 11:44:14 +0000;Fix typo which caused PY_LONG_LONG sizeof to be defined with the wrong size.

==

numpy/core/setup.py
==================
d1573af;David Cournapeau;2009-02-26 10:41:32 +0000;Merge coremath.

==
==================
0878b81;David Cournapeau;2009-02-26 10:38:30 +0000;Merged revisions 6479 via svnmerge from http://svn.scipy.org/svn/numpy/trunk
........
  r6479 | cdavid | 2009-02-26 17:46:34 +0900 (Thu, 26 Feb 2009) | 1 line
  
  Fix docstring format for check_funcs_once.
........

==
==================
c316a60;David Cournapeau;2009-02-26 08:46:34 +0000;Fix docstring format for check_funcs_once.

==

numpy/distutils/command/config.py
==================
3913d96;David Cournapeau;2009-02-26 08:24:54 +0000;Merged revisions 6477 via svnmerge from http://svn.scipy.org/svn/numpy/trunk
........
  r6477 | cdavid | 2009-02-26 17:09:39 +0900 (Thu, 26 Feb 2009) | 1 line
  
  Add script to build msvcrt90 on mingw-w64.
........

==
==================
a213a22;David Cournapeau;2009-02-26 08:09:39 +0000;Add script to build msvcrt90 on mingw-w64.

==

tools/win32build/misc/msvcrt90/msvcrt.def.in
tools/win32build/misc/msvcrt90/yop.sh
==================
1bc5c71;David Cournapeau;2009-02-26 06:24:22 +0000;Merged revisions 6463-6466,6469,6472-6475 via svnmerge from http://svn.scipy.org/svn/numpy/trunk
........
  r6463 | pierregm | 2009-02-24 02:33:11 +0900 (Tue, 24 Feb 2009) | 1 line
  
  * MaskedArray.__setstate__ : fixed for structured array
........
  r6464 | charris | 2009-02-24 04:02:43 +0900 (Tue, 24 Feb 2009) | 4 lines
  
  Coding style cleanups. Start on arraytypes.inc.src.
  I'm a bit hesitant to commit this as tests are lacking
  for the functionality, but I want the changes
  somewhere central.
........
  r6465 | matthew.brett@gmail.com | 2009-02-25 05:53:10 +0900 (Wed, 25 Feb 2009) | 1 line
  
  Added docstring for isbuiltin
........
  r6466 | oliphant | 2009-02-25 14:15:47 +0900 (Wed, 25 Feb 2009) | 1 line
  
  Fix void-scalar element access when data-type contains titles (meta-data).
........
  r6469 | oliphant | 2009-02-25 22:45:30 +0900 (Wed, 25 Feb 2009) | 1 line
  
  Add Error checking.
........
  r6472 | charris | 2009-02-26 01:51:29 +0900 (Thu, 26 Feb 2009) | 1 line
  
  Fix coding style. Fix test_void_scalar_with_titles.
........
  r6473 | cdavid | 2009-02-26 03:27:19 +0900 (Thu, 26 Feb 2009) | 1 line
  
  Trap another kind of exception for MSVC9 in compaq fcompiler.
........
  r6474 | cdavid | 2009-02-26 03:56:15 +0900 (Thu, 26 Feb 2009) | 1 line
  
  Mark mingw-w64 crashing tests as known failures.
........
  r6475 | cdavid | 2009-02-26 04:04:59 +0900 (Thu, 26 Feb 2009) | 1 line
  
  Tag more mingw-w64 failures as such.
........

==
==================
965f1d5;David Cournapeau;2009-02-25 19:04:59 +0000;Tag more mingw-w64 failures as such.

==

numpy/core/tests/test_scalarmath.py
numpy/core/tests/test_unicode.py
==================
d9319c7;David Cournapeau;2009-02-25 18:56:15 +0000;Mark mingw-w64 crashing tests as known failures.

==

numpy/core/tests/test_multiarray.py
numpy/core/tests/test_regression.py
==================
a4d4ad2;David Cournapeau;2009-02-25 18:27:19 +0000;Trap another kind of exception for MSVC9 in compaq fcompiler.

==

numpy/distutils/fcompiler/compaq.py
==================
b76c3e8;Charles Harris;2009-02-25 16:51:29 +0000;Fix coding style. Fix test_void_scalar_with_titles.

==

numpy/core/src/scalartypes.inc.src
numpy/core/tests/test_regression.py
==================
583ce5a;Travis Oliphant;2009-02-25 13:45:30 +0000;Add Error checking.

==

numpy/core/src/scalartypes.inc.src
==================
17d5e70;Travis Oliphant;2009-02-25 05:15:47 +0000;Fix void-scalar element access when data-type contains titles (meta-data).

==

numpy/core/src/scalartypes.inc.src
numpy/core/tests/test_regression.py
==================
0dcb70f;Matthew Brett;2009-02-24 20:53:10 +0000;Added docstring for isbuiltin

==

numpy/add_newdocs.py
==================
f1737c7;Charles Harris;2009-02-23 19:02:43 +0000;Coding style cleanups. Start on arraytypes.inc.src. I'm a bit hesitant to commit this as tests are lacking for the functionality, but I want the changes somewhere central.

==

numpy/core/src/arraytypes.inc.src
==================
72f3eb6;pierregm;2009-02-23 17:33:11 +0000;* MaskedArray.__setstate__ : fixed for structured array

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
910810b;David Cournapeau;2009-02-23 17:10:02 +0000;Merged revisions 6461 via svnmerge from http://svn.scipy.org/svn/numpy/trunk
........
  r6461 | cdavid | 2009-02-24 01:32:46 +0900 (Tue, 24 Feb 2009) | 1 line
  
  Add fesetexceptflag func for mingw-w64 support.
........

==
==================
546e32c;David Cournapeau;2009-02-23 16:32:46 +0000;Add fesetexceptflag func for mingw-w64 support.

==

numpy/core/include/numpy/mingw_amd64_fenv.h
==================
caa8cfd;David Cournapeau;2009-02-23 16:25:45 +0000;Merged revisions 6453-6459 via svnmerge from http://svn.scipy.org/svn/numpy/trunk
........
  r6453 | cdavid | 2009-02-22 18:15:26 +0900 (Sun, 22 Feb 2009) | 1 line
  
  Fix wrong merge for manifest version.
........
  r6454 | stefan | 2009-02-22 22:45:15 +0900 (Sun, 22 Feb 2009) | 1 line
  
  Add GzipFile wrapper to support the "whence" keyword in GzipFile.seek.
........
  r6455 | stefan | 2009-02-22 22:47:14 +0900 (Sun, 22 Feb 2009) | 1 line
  
  Whitespace cleanup.
........
  r6456 | stefan | 2009-02-22 22:48:21 +0900 (Sun, 22 Feb 2009) | 1 line
  
  Add test for Gzip loader.
........
  r6457 | stefan | 2009-02-23 07:10:30 +0900 (Mon, 23 Feb 2009) | 1 line
  
  Allow subclasses of arrays in testing.
........
  r6458 | charris | 2009-02-23 07:36:18 +0900 (Mon, 23 Feb 2009) | 1 line
  
  Coding style cleanups. This finishes umath_ufunc_object.inc.
........
  r6459 | cdavid | 2009-02-24 01:14:55 +0900 (Tue, 24 Feb 2009) | 1 line
  
  Add custom code for FPU error handling on windows x64 with mingw compilers (mingw-w64).
........

==
==================
6496cb4;David Cournapeau;2009-02-23 16:14:55 +0000;Add custom code for FPU error handling on windows x64 with mingw compilers (mingw-w64).

==

numpy/core/include/numpy/mingw_amd64_fenv.h
numpy/core/include/numpy/ufuncobject.h
==================
dc779a8;Charles Harris;2009-02-22 22:36:18 +0000;Coding style cleanups. This finishes umath_ufunc_object.inc.

==

numpy/core/src/umath_ufunc_object.inc
==================
925774d;Stefan van der Walt;2009-02-22 22:10:30 +0000;Allow subclasses of arrays in testing.

==

numpy/testing/utils.py
==================
34f564a;Stefan van der Walt;2009-02-22 13:48:21 +0000;Add test for Gzip loader.

==

numpy/lib/tests/test_io.py
==================
ce06f48;Stefan van der Walt;2009-02-22 13:47:14 +0000;Whitespace cleanup.

==

numpy/lib/tests/test_io.py
==================
f6fd858;Stefan van der Walt;2009-02-22 13:45:15 +0000;Add GzipFile wrapper to support the "whence" keyword in GzipFile.seek.

==

numpy/lib/io.py
==================
cb71330;David Cournapeau;2009-02-22 09:15:26 +0000;Fix wrong merge for manifest version.

==

numpy/distutils/mingw32ccompiler.py
==================
87dea64;David Cournapeau;2009-02-22 09:14:18 +0000;Merged revisions 6451 via svnmerge from http://svn.scipy.org/svn/numpy/trunk
........
  r6451 | cdavid | 2009-02-22 18:12:04 +0900 (Sun, 22 Feb 2009) | 1 line
  
  Fix typo in MSVC runtime info for mingw.
........

==
==================
16f3279;David Cournapeau;2009-02-22 09:12:04 +0000;Fix typo in MSVC runtime info for mingw.

==

numpy/distutils/mingw32ccompiler.py
==================
ecaa9d4;David Cournapeau;2009-02-22 05:27:40 +0000;Merged revisions 6444,6446-6447 via svnmerge from http://svn.scipy.org/svn/numpy/trunk
........
  r6444 | charris | 2009-02-22 08:54:31 +0900 (Sun, 22 Feb 2009) | 1 line
  
  Coding style cleanups. Finishes multiarraymodule.c.
........
  r6446 | cdavid | 2009-02-22 12:53:41 +0900 (Sun, 22 Feb 2009) | 1 line
  
  Remove hardcoded size of long double in config.h generation - should have been removed before merging.
........
  r6447 | cdavid | 2009-02-22 13:12:48 +0900 (Sun, 22 Feb 2009) | 3 lines
  
  Removed merge tracking for "svnmerge" for 
  http://svn.scipy.org/svn/numpy/branches/numpy-mingw-w64
........

==
==================
fa32caa;David Cournapeau;2009-02-22 03:53:41 +0000;Remove hardcoded size of long double in config.h generation - should have been removed before merging.

==

numpy/core/setup.py
==================
919eef5;David Cournapeau;2009-02-22 03:41:06 +0000;Merged revisions 6398-6400,6410,6421-6424,6426-6428,6431,6433,6441-6442 via svnmerge from http://svn.scipy.org/svn/numpy/trunk
................
  r6398 | charris | 2009-02-19 05:54:52 +0900 (Thu, 19 Feb 2009) | 2 lines
  
  Coding style cleanups.
................
  r6399 | charris | 2009-02-19 09:45:14 +0900 (Thu, 19 Feb 2009) | 2 lines
  
  Coding style cleanups.
................
  r6400 | charris | 2009-02-19 13:58:23 +0900 (Thu, 19 Feb 2009) | 1 line
  
  Coding style cleanups.
................
  r6410 | cdavid | 2009-02-19 19:05:28 +0900 (Thu, 19 Feb 2009) | 1 line
  
  Tag known failure on win32.
................
  r6421 | stefan | 2009-02-20 04:28:08 +0900 (Fri, 20 Feb 2009) | 1 line
  
  Fix tests using strptime to be Python 2.4 compatible.
................
  r6422 | charris | 2009-02-20 08:25:01 +0900 (Fri, 20 Feb 2009) | 2 lines
  
  Coding style cleanups.
................
  r6423 | charris | 2009-02-20 12:40:53 +0900 (Fri, 20 Feb 2009) | 1 line
  
  Coding style cleanups.
................
  r6424 | cdavid | 2009-02-20 22:30:20 +0900 (Fri, 20 Feb 2009) | 1 line
  
  Unhelpful message for compaq fortran compiler.
................
  r6426 | charris | 2009-02-21 07:28:05 +0900 (Sat, 21 Feb 2009) | 2 lines
  
  Change indentation of switch statements.
................
  r6427 | charris | 2009-02-21 13:21:50 +0900 (Sat, 21 Feb 2009) | 1 line
  
  Coding style cleanups.
................
  r6428 | cdavid | 2009-02-21 13:35:57 +0900 (Sat, 21 Feb 2009) | 3 lines
  
  Removed merge tracking for "svnmerge" for 
  http://svn.scipy.org/svn/numpy/branches/fix_float_format
................
  r6431 | charris | 2009-02-21 13:41:17 +0900 (Sat, 21 Feb 2009) | 1 line
  
  Remove terminating ";" from macro to fix ticket #918.
................
  r6433 | cdavid | 2009-02-21 14:38:29 +0900 (Sat, 21 Feb 2009) | 3 lines
  
  Removed merge tracking for "svnmerge" for 
  http://svn.scipy.org/svn/numpy/branches/visualstudio_manifest
................
  r6441 | cdavid | 2009-02-22 02:25:09 +0900 (Sun, 22 Feb 2009) | 105 lines
  
  Merged revisions 6153-6173,6176-6178,6184 via svnmerge from 
  http://svn.scipy.org/svn/numpy/branches/numpy-mingw-w64
  
  ........
    r6153 | cdavid | 2008-12-19 17:06:06 +0900 (Fri, 19 Dec 2008) | 1 line
    
    Add a function to find python dll on windows.
  ........
    r6154 | cdavid | 2008-12-19 17:28:49 +0900 (Fri, 19 Dec 2008) | 1 line
    
    Fix typo when getting system32 location.
  ........
    r6155 | cdavid | 2008-12-19 17:37:19 +0900 (Fri, 19 Dec 2008) | 1 line
    
    Add a function to get a dump of private headers from dll.
  ........
    r6156 | cdavid | 2008-12-19 17:41:39 +0900 (Fri, 19 Dec 2008) | 1 line
    
    Add a function to generate a .def file from a dll.
  ........
    r6157 | cdavid | 2008-12-19 17:43:56 +0900 (Fri, 19 Dec 2008) | 1 line
    
    Forgot to add the regex for the generate_def function.
  ........
    r6158 | cdavid | 2008-12-19 17:53:49 +0900 (Fri, 19 Dec 2008) | 1 line
    
    Fix .def file generation.
  ........
    r6159 | cdavid | 2008-12-19 17:56:54 +0900 (Fri, 19 Dec 2008) | 1 line
    
    Add a warning if no symbols found in the dll (if stripped, for example).
  ........
    r6160 | cdavid | 2008-12-19 18:02:24 +0900 (Fri, 19 Dec 2008) | 1 line
    
    Refactor build_import_library to take into account multi arch.
  ........
    r6161 | cdavid | 2008-12-19 18:10:03 +0900 (Fri, 19 Dec 2008) | 1 line
    
    Do not generate manifest when built with msver 8.*, it does not look like it is needed, and we dont support it anyway ATM.
  ........
    r6162 | cdavid | 2008-12-19 18:18:08 +0900 (Fri, 19 Dec 2008) | 1 line
    
    Show arch in the log when building import library.
  ........
    r6163 | cdavid | 2008-12-19 18:22:18 +0900 (Fri, 19 Dec 2008) | 1 line
    
    Fix missing out filename.
  ........
    r6164 | cdavid | 2008-12-19 18:32:46 +0900 (Fri, 19 Dec 2008) | 1 line
    
    Actually build the import library for mingw on amd64.
  ........
    r6165 | cdavid | 2008-12-19 18:46:30 +0900 (Fri, 19 Dec 2008) | 1 line
    
    Do not generate ordinal, and use the basename of the dll instead of the full path in the def.file.
  ........
    r6166 | cdavid | 2008-12-19 18:48:01 +0900 (Fri, 19 Dec 2008) | 1 line
    
    Trailing spaces.
  ........
    r6167 | cdavid | 2008-12-19 18:55:16 +0900 (Fri, 19 Dec 2008) | 1 line
    
    Add MS_WIN64 macro when built on amd64 + mingw.
  ........
    r6168 | cdavid | 2008-12-19 18:57:06 +0900 (Fri, 19 Dec 2008) | 1 line
    
    Forgot to import get_build_architecture.
  ........
    r6169 | cdavid | 2008-12-19 18:57:52 +0900 (Fri, 19 Dec 2008) | 1 line
    
    Use a tuple when defining the MS_WIN64 macro.
  ........
    r6170 | cdavid | 2008-12-19 19:05:03 +0900 (Fri, 19 Dec 2008) | 1 line
    
    Fix macro def.
  ........
    r6171 | cdavid | 2008-12-19 19:21:54 +0900 (Fri, 19 Dec 2008) | 2 lines
    
    Do not use g++ for linking on amd64.
  ........
    r6172 | cdavid | 2008-12-19 19:25:18 +0900 (Fri, 19 Dec 2008) | 1 line
    
    do not regenerate the import library if already there.
  ........
    r6173 | cdavid | 2008-12-19 19:28:39 +0900 (Fri, 19 Dec 2008) | 1 line
    
    Add one full msvcrt version for 80 (for manifest generation).
  ........
    r6176 | cdavid | 2008-12-21 02:31:48 +0900 (Sun, 21 Dec 2008) | 1 line
    
    Remove optimization flags for now, to speed up builds.
  ........
    r6177 | cdavid | 2008-12-21 02:32:11 +0900 (Sun, 21 Dec 2008) | 1 line
    
    Add MS_WIN64 for every compile command.
  ........
    r6178 | cdavid | 2008-12-21 02:32:33 +0900 (Sun, 21 Dec 2008) | 1 line
    
    Remove handling of MS_WIN64 in commands: deal with it in mingw tool only.
  ........
    r6184 | cdavid | 2008-12-21 16:46:28 +0900 (Sun, 21 Dec 2008) | 1 line
    
    Hardcode size of long double, because it is broken with mingw.
  ........
................
  r6442 | cdavid | 2009-02-22 02:36:15 +0900 (Sun, 22 Feb 2009) | 1 line
  
  Re-enable real check for long double size.
................

==
==================
5a02e0e;Charles Harris;2009-02-21 23:54:31 +0000;Coding style cleanups. Finishes multiarraymodule.c.

==

numpy/core/src/multiarraymodule.c
==================
e223c83;David Cournapeau;2009-02-21 17:36:15 +0000;Re-enable real check for long double size.

==

numpy/core/setup.py
==================
b4d0366;David Cournapeau;2009-02-21 17:25:09 +0000;Merged revisions 6153-6173,6176-6178,6184 via svnmerge from http://svn.scipy.org/svn/numpy/branches/numpy-mingw-w64
........
  r6153 | cdavid | 2008-12-19 17:06:06 +0900 (Fri, 19 Dec 2008) | 1 line
  
  Add a function to find python dll on windows.
........
  r6154 | cdavid | 2008-12-19 17:28:49 +0900 (Fri, 19 Dec 2008) | 1 line
  
  Fix typo when getting system32 location.
........
  r6155 | cdavid | 2008-12-19 17:37:19 +0900 (Fri, 19 Dec 2008) | 1 line
  
  Add a function to get a dump of private headers from dll.
........
  r6156 | cdavid | 2008-12-19 17:41:39 +0900 (Fri, 19 Dec 2008) | 1 line
  
  Add a function to generate a .def file from a dll.
........
  r6157 | cdavid | 2008-12-19 17:43:56 +0900 (Fri, 19 Dec 2008) | 1 line
  
  Forgot to add the regex for the generate_def function.
........
  r6158 | cdavid | 2008-12-19 17:53:49 +0900 (Fri, 19 Dec 2008) | 1 line
  
  Fix .def file generation.
........
  r6159 | cdavid | 2008-12-19 17:56:54 +0900 (Fri, 19 Dec 2008) | 1 line
  
  Add a warning if no symbols found in the dll (if stripped, for example).
........
  r6160 | cdavid | 2008-12-19 18:02:24 +0900 (Fri, 19 Dec 2008) | 1 line
  
  Refactor build_import_library to take into account multi arch.
........
  r6161 | cdavid | 2008-12-19 18:10:03 +0900 (Fri, 19 Dec 2008) | 1 line
  
  Do not generate manifest when built with msver 8.*, it does not look like it is needed, and we dont support it anyway ATM.
........
  r6162 | cdavid | 2008-12-19 18:18:08 +0900 (Fri, 19 Dec 2008) | 1 line
  
  Show arch in the log when building import library.
........
  r6163 | cdavid | 2008-12-19 18:22:18 +0900 (Fri, 19 Dec 2008) | 1 line
  
  Fix missing out filename.
........
  r6164 | cdavid | 2008-12-19 18:32:46 +0900 (Fri, 19 Dec 2008) | 1 line
  
  Actually build the import library for mingw on amd64.
........
  r6165 | cdavid | 2008-12-19 18:46:30 +0900 (Fri, 19 Dec 2008) | 1 line
  
  Do not generate ordinal, and use the basename of the dll instead of the full path in the def.file.
........
  r6166 | cdavid | 2008-12-19 18:48:01 +0900 (Fri, 19 Dec 2008) | 1 line
  
  Trailing spaces.
........
  r6167 | cdavid | 2008-12-19 18:55:16 +0900 (Fri, 19 Dec 2008) | 1 line
  
  Add MS_WIN64 macro when built on amd64 + mingw.
........
  r6168 | cdavid | 2008-12-19 18:57:06 +0900 (Fri, 19 Dec 2008) | 1 line
  
  Forgot to import get_build_architecture.
........
  r6169 | cdavid | 2008-12-19 18:57:52 +0900 (Fri, 19 Dec 2008) | 1 line
  
  Use a tuple when defining the MS_WIN64 macro.
........
  r6170 | cdavid | 2008-12-19 19:05:03 +0900 (Fri, 19 Dec 2008) | 1 line
  
  Fix macro def.
........
  r6171 | cdavid | 2008-12-19 19:21:54 +0900 (Fri, 19 Dec 2008) | 2 lines
  
  Do not use g++ for linking on amd64.
........
  r6172 | cdavid | 2008-12-19 19:25:18 +0900 (Fri, 19 Dec 2008) | 1 line
  
  do not regenerate the import library if already there.
........
  r6173 | cdavid | 2008-12-19 19:28:39 +0900 (Fri, 19 Dec 2008) | 1 line
  
  Add one full msvcrt version for 80 (for manifest generation).
........
  r6176 | cdavid | 2008-12-21 02:31:48 +0900 (Sun, 21 Dec 2008) | 1 line
  
  Remove optimization flags for now, to speed up builds.
........
  r6177 | cdavid | 2008-12-21 02:32:11 +0900 (Sun, 21 Dec 2008) | 1 line
  
  Add MS_WIN64 for every compile command.
........
  r6178 | cdavid | 2008-12-21 02:32:33 +0900 (Sun, 21 Dec 2008) | 1 line
  
  Remove handling of MS_WIN64 in commands: deal with it in mingw tool only.
........
  r6184 | cdavid | 2008-12-21 16:46:28 +0900 (Sun, 21 Dec 2008) | 1 line
  
  Hardcode size of long double, because it is broken with mingw.
........

==
==================
0ef0ac2;David Cournapeau;2009-02-21 17:03:06 +0000;Move math constants out of umath into npymath.

==

numpy/core/include/numpy/npy_math.h
numpy/core/src/umath_funcs.inc.src
==================
96f2a8d;David Cournapeau;2009-02-21 17:02:18 +0000;Fix numpyconfig generation in scons build.

==

numpy/core/SConscript
numpy/core/include/numpy/numpyconfig.h.in
==================
9b99b4a;David Cournapeau;2009-02-21 17:01:40 +0000;Add npymath lib to scons script.

==

numpy/core/SConscript
==================
4a8f27e;David Cournapeau;2009-02-21 17:00:45 +0000;Update isnan and co checks for npymath.

==

numpy/core/SConscript
numpy/core/include/numpy/numpyconfig.h.in
==================
16287f8;Charles Harris;2009-02-21 04:41:17 +0000;Remove terminating ";" from macro to fix ticket #918.

==

numpy/core/include/numpy/ndarrayobject.h
==================
e69d6e7;Charles Harris;2009-02-21 04:21:50 +0000;Coding style cleanups.

==

numpy/core/src/multiarraymodule.c
numpy/core/src/scalarmathmodule.c.src
==================
271e46c;Charles Harris;2009-02-20 22:28:05 +0000;Change indentation of switch statements.

==

numpy/core/src/arrayobject.c
==================
da364a1;David Cournapeau;2009-02-20 16:37:01 +0000;Merged revisions 6185-6187,6191-6221,6235-6238,6240-6241,6244,6250-6251,6253,6256,6258,6260-6261,6263,6265-6266,6268,6271,6283-6286,6291-6316,6320-6352,6354,6356,6358-6368,6370-6373,6398-6400,6410,6421-6424 via svnmerge from http://svn.scipy.org/svn/numpy/trunk
................
  r6185 | cdavid | 2008-12-22 01:19:14 +0900 (Mon, 22 Dec 2008) | 1 line
  
  Add doc sources so that sdist tarball contains them.
................
  r6186 | pierregm | 2008-12-22 19:01:51 +0900 (Mon, 22 Dec 2008) | 4 lines
  
  testutils:
  assert_array_compare : make sure that the comparison is performed on ndarrays, and make sure we use the np version of the comparison function.
  core:
  * Try not to touch the data in unary/binary ufuncs, (including inplace)
................
  r6187 | pearu | 2008-12-22 19:05:00 +0900 (Mon, 22 Dec 2008) | 1 line
  
  Fix a bug.
................
  r6191 | cdavid | 2008-12-23 13:10:59 +0900 (Tue, 23 Dec 2008) | 1 line
  
  Fix typos in the comments for manifest.
................
  r6192 | cdavid | 2008-12-23 13:11:12 +0900 (Tue, 23 Dec 2008) | 1 line
  
  Use msvcrt values if available for manifest generation: only there starting from python 2.6.1.
................
  r6193 | pearu | 2008-12-23 18:02:15 +0900 (Tue, 23 Dec 2008) | 1 line
  
  Fix issue 964: f2py python 2.6, 2.6.1 support.
................
  r6194 | pierregm | 2008-12-24 08:43:43 +0900 (Wed, 24 Dec 2008) | 12 lines
  
  testutils:
  * assert_equal : use assert_equal_array on records
  * assert_array_compare : prevent the common mask to be back-propagated to the initial input arrays.
  * assert_equal_array : use operator.__eq__ instead of ma.equal
  * assert_equal_less: use operator.__less__ instead of ma.less
  
  core:
  * Fixed _check_fill_value for nested flexible types
  * Add a ndtype option to _make_mask_descr
  * Fixed mask_or for nested flexible types
  * Fixed the printing of masked arrays w/ flexible types.
................
  r6195 | cdavid | 2008-12-26 21:16:45 +0900 (Fri, 26 Dec 2008) | 1 line
  
  Update to handle numscons 0.10.0 and above.
................
  r6196 | cdavid | 2008-12-26 21:36:19 +0900 (Fri, 26 Dec 2008) | 1 line
  
  Do not import msvcrt globally in mingw32compiler module, since the module is imported on all platforms.
................
  r6197 | cdavid | 2008-12-26 23:39:55 +0900 (Fri, 26 Dec 2008) | 1 line
  
  Do not test for functions already tested by python configure script.
................
  r6198 | cdavid | 2008-12-27 14:56:58 +0900 (Sat, 27 Dec 2008) | 1 line
  
  BUG: Add a runtime check about endianness, to detect bug 4728 in python on Mac OS X.
................
  r6199 | cdavid | 2008-12-27 19:06:25 +0900 (Sat, 27 Dec 2008) | 1 line
  
  Fix some typo/syntax errors when converting dict access to a function in manifest generation.
................
  r6200 | cdavid | 2008-12-27 19:15:30 +0900 (Sat, 27 Dec 2008) | 1 line
  
  BUG (#970): fix a python 2.6 bug in distutils which caused an unhelpful Error:None message when trying to build with no VS installed and without the -c mingw32 option.
................
  r6201 | cdavid | 2008-12-27 19:30:49 +0900 (Sat, 27 Dec 2008) | 1 line
  
  Improve the error message when initializing compiler failed.
................
  r6202 | cdavid | 2008-12-27 19:32:05 +0900 (Sat, 27 Dec 2008) | 1 line
  
  Try to initialize the msvc compiler before the general code to detect the error early.
................
  r6203 | cdavid | 2008-12-27 19:43:41 +0900 (Sat, 27 Dec 2008) | 1 line
  
  BUG (#970): this commit should fix the actual bug, which albeeit linked to commir r6200, was caused in anoter code path.
................
  r6204 | cdavid | 2008-12-27 19:57:05 +0900 (Sat, 27 Dec 2008) | 1 line
  
  Fix manifest generation.
................
  r6205 | cdavid | 2008-12-27 20:46:08 +0900 (Sat, 27 Dec 2008) | 1 line
  
  BUG (#827): close temp file before reopning them on windows, and make sure they are not automatically deleted on close either (2.6and higher specific).
................
  r6206 | cdavid | 2008-12-27 21:18:47 +0900 (Sat, 27 Dec 2008) | 1 line
  
  Do not define the union for runtime endianness detection if we don't check endianness.
................
  r6207 | cdavid | 2008-12-27 22:48:52 +0900 (Sat, 27 Dec 2008) | 1 line
  
  Start working on formatting failure on 2.6: copy how python does complex formatting.
................
  r6208 | cdavid | 2008-12-27 23:44:11 +0900 (Sat, 27 Dec 2008) | 1 line
  
  Fix formatting for purely imaginary complex numbers.
................
  r6209 | cdavid | 2008-12-27 23:53:15 +0900 (Sat, 27 Dec 2008) | 1 line
  
  More work on formatting float.
................
  r6210 | cdavid | 2008-12-27 23:59:41 +0900 (Sat, 27 Dec 2008) | 1 line
  
  Finish formatting fixes for float scalar arrays.
................
  r6211 | cdavid | 2008-12-28 00:12:20 +0900 (Sun, 28 Dec 2008) | 1 line
  
  Include umath_funcs_c99 in multiarray so that we can use isinf and co macros.
................
  r6212 | cdavid | 2008-12-28 01:15:04 +0900 (Sun, 28 Dec 2008) | 1 line
  
  Include config.h before our C99 math compat layer.
................
  r6213 | cdavid | 2008-12-28 01:15:41 +0900 (Sun, 28 Dec 2008) | 1 line
  
  Fix formatting.
................
  r6214 | cdavid | 2008-12-28 01:16:18 +0900 (Sun, 28 Dec 2008) | 1 line
  
  Do not define FMTR and FMTI macros, as those are already defined on some platforms.
................
  r6215 | cdavid | 2008-12-28 01:16:52 +0900 (Sun, 28 Dec 2008) | 1 line
  
  More formatting fixes.
................
  r6216 | cdavid | 2008-12-28 01:17:27 +0900 (Sun, 28 Dec 2008) | 1 line
  
  Remove undef of removed macro.
................
  r6217 | cdavid | 2008-12-28 01:33:40 +0900 (Sun, 28 Dec 2008) | 1 line
  
  Do not use PyOS_ascii_formatd, as it does not handle long double correctly.
................
  r6218 | cdavid | 2008-12-28 02:19:40 +0900 (Sun, 28 Dec 2008) | 1 line
  
  Try ugly hack to circumvent long double brokenness with mingw.
................
  r6219 | cdavid | 2008-12-28 02:25:50 +0900 (Sun, 28 Dec 2008) | 1 line
  
  Use ugly hack for mingw long double pb with complex format function as well.
................
  r6220 | cdavid | 2008-12-28 12:18:20 +0900 (Sun, 28 Dec 2008) | 1 line
  
  Revert formatting changes: ascii_formatd only works for double, so we can't use it as it is for our formatting needs.
................
  r6221 | cdavid | 2008-12-28 15:44:06 +0900 (Sun, 28 Dec 2008) | 1 line
  
  Do not add doc sources through add_data_dir: it will put the docs alongside numpy, as a separate package, which is not what we want. Use the manifest instead, since that's the only way I know of to include something in sdist-generated tarballs.
................
  r6235 | cdavid | 2008-12-29 16:57:52 +0900 (Mon, 29 Dec 2008) | 13 lines
  
  Merged revisions 6233-6234 via svnmerge from 
  http://svn.scipy.org/svn/numpy/branches/fix_float_format
  
  ........
    r6233 | cdavid | 2008-12-29 12:49:09 +0900 (Mon, 29 Dec 2008) | 1 line
    
    Use parametric tests for format tests so that it is clearer which type is failing.
  ........
    r6234 | cdavid | 2008-12-29 12:49:27 +0900 (Mon, 29 Dec 2008) | 1 line
    
    Fix formatting tests: cfloat and cdouble as well as np.float and np.double are the same; make sure we test 4 bytes float.
  ........
................
  r6236 | cdavid | 2008-12-29 17:02:15 +0900 (Mon, 29 Dec 2008) | 1 line
  
  Add nan/inf tests for formatting.
................
  r6237 | cdavid | 2008-12-29 17:26:04 +0900 (Mon, 29 Dec 2008) | 1 line
  
  Add test for real float types locale independance.
................
  r6238 | cdavid | 2008-12-29 17:35:06 +0900 (Mon, 29 Dec 2008) | 1 line
  
  Clearer error messages for formatting failures.
................
  r6240 | cdavid | 2008-12-30 12:48:11 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Add tests for print of float types.
................
  r6241 | cdavid | 2008-12-30 12:56:54 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Add print tests for complex types.
................
  r6244 | cdavid | 2008-12-30 13:20:48 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Fix test for print: forgot to make sure the value is a float before comparing it.
................
  r6250 | cdavid | 2008-12-30 14:02:28 +0900 (Tue, 30 Dec 2008) | 17 lines
  
  Merged revisions 6247-6249 via svnmerge from 
  http://svn.scipy.org/svn/numpy/branches/fix_float_format
  
  ........
    r6247 | cdavid | 2008-12-30 13:41:37 +0900 (Tue, 30 Dec 2008) | 1 line
    
    Handle 1e10 specially, as it is the limit where exp notation is shorter than decimal for single precision, but not for double (python native one).
  ........
    r6248 | cdavid | 2008-12-30 13:47:38 +0900 (Tue, 30 Dec 2008) | 1 line
    
    Refactor a bit redirected output print test.
  ........
    r6249 | cdavid | 2008-12-30 13:49:31 +0900 (Tue, 30 Dec 2008) | 1 line
    
    Fix test for single precision print.
  ........
................
  r6251 | cdavid | 2008-12-30 14:12:50 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Use np.inf instead of float('inf'), as the later does not work on windows for python < 2.6.
................
  r6253 | cdavid | 2008-12-30 14:15:09 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Fix typo in test.
................
  r6256 | cdavid | 2008-12-30 14:34:22 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Special case float tests on windows: python 2.5 and below have >=3 digits in the exp.
................
  r6258 | cdavid | 2008-12-30 14:42:03 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Hardcode reference for inf/nan-involved values.
................
  r6260 | cdavid | 2008-12-30 14:50:18 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Fix more formatting tests on win32.
................
  r6261 | cdavid | 2008-12-30 14:52:16 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Fix some more redirected output print tests.
................
  r6263 | cdavid | 2008-12-30 15:01:31 +0900 (Tue, 30 Dec 2008) | 1 line
  
  More fixes for print tests.
................
  r6265 | cdavid | 2008-12-30 15:03:56 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Fix typo.
................
  r6266 | cdavid | 2008-12-30 15:08:06 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Fix typo.
................
  r6268 | cdavid | 2008-12-30 15:12:26 +0900 (Tue, 30 Dec 2008) | 1 line
  
  complex scalar arrays cannot be created from real/imag args: wrap init values in a complex.
................
  r6271 | cdavid | 2008-12-30 15:32:03 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Do not use dict for reference: hashing on scalar arrays does not work as I expected.
................
  r6283 | ptvirtan | 2008-12-31 10:14:47 +0900 (Wed, 31 Dec 2008) | 1 line
  
  Fix #951: make tests to clean temp files properly
................
  r6284 | jarrod.millman | 2009-01-01 08:25:03 +0900 (Thu, 01 Jan 2009) | 2 lines
  
  ran reindent
................
  r6285 | alan.mcintyre | 2009-01-01 08:46:34 +0900 (Thu, 01 Jan 2009) | 15 lines
  
  Remove the following deprecated items from numpy.testing:
  
  - ParametricTestCase 
  - The following arguments from numpy.testing.Tester.test(): level, 
  verbosity, 
    all, sys_argv, testcase_pattern
  - Path manipulation functions: set_package_path, set_local_path, 
  restore_path
  - NumpyTestCase, NumpyTest
  
  Also separated testing parameter setup from NoseTester.test into 
  NoseTester.prepare_test_args for use in a utility script for valgrind 
  testing (see NumPy ticket #784).
................
  r6286 | jarrod.millman | 2009-01-01 16:56:53 +0900 (Thu, 01 Jan 2009) | 2 lines
  
  add default include dir for Fedora/Red Hat (see SciPy ticket 817)
................
  r6291 | cdavid | 2009-01-04 19:57:39 +0900 (Sun, 04 Jan 2009) | 1 line
  
  Do not import md5 on python >= 2.6; use hashlib instead.
................
  r6292 | cdavid | 2009-01-04 20:08:16 +0900 (Sun, 04 Jan 2009) | 1 line
  
  Do not use popen* but subprocess.Popen instead.
................
  r6293 | cdavid | 2009-01-04 21:03:29 +0900 (Sun, 04 Jan 2009) | 1 line
  
  Revert md5 change: hashlib.md5 is not a drop-in replacement for md5.
................
  r6294 | pierregm | 2009-01-05 05:16:00 +0900 (Mon, 05 Jan 2009) | 2 lines
  
  * adapted default_fill_value for flexible datatype
  * fixed max/minimum_fill_value for flexible datatype
................
  r6295 | stefan | 2009-01-06 06:51:18 +0900 (Tue, 06 Jan 2009) | 1 line
  
  Credit more developers.
................
  r6296 | pierregm | 2009-01-06 07:52:21 +0900 (Tue, 06 Jan 2009) | 1 line
  
  *moved the printing templates out of MaskedArray.__repr__
................
  r6297 | stefan | 2009-01-06 19:09:00 +0900 (Tue, 06 Jan 2009) | 1 line
  
  Use new-style classes with multiple-inheritance to address bug in IronPython.
................
  r6298 | pierregm | 2009-01-07 05:35:37 +0900 (Wed, 07 Jan 2009) | 1 line
  
  * Bugfix #961
................
  r6299 | pierregm | 2009-01-08 03:14:12 +0900 (Thu, 08 Jan 2009) | 1 line
  
  * Fixed iadd/isub/imul when the base array has no mask but the other array does
................
  r6300 | pierregm | 2009-01-08 07:34:51 +0900 (Thu, 08 Jan 2009) | 3 lines
  
  * Renamed `torecords` to `toflex`, keeping `torecords` as an alias
  * Introduced `fromflex`, to reconstruct a masked_array from the output of `toflex` (can?\226?\128?\153t `use fromrecords` as it would clash with `numpy.ma.mrecords.fromrecords`)
  * Fixed a bug in MaskedBinaryOperation (#979) (wrong array broadcasting)
................
  r6301 | cdavid | 2009-01-08 18:19:00 +0900 (Thu, 08 Jan 2009) | 1 line
  
  Avoid putting things into stderr when errors occurs in f2py wrappers; put all the info in the python error string instead.
................
  r6302 | cdavid | 2009-01-09 00:11:32 +0900 (Fri, 09 Jan 2009) | 1 line
  
  Fix python 2.4 issue.
................
  r6303 | chanley | 2009-01-09 01:30:01 +0900 (Fri, 09 Jan 2009) | 1 line
  
  Fix test_print.py function _test_locale_independance() since str(1.2) does not use the LC_NUMERIC locale to convert numbers.  Fix from Mark Sienkiewicz.
................
  r6304 | cdavid | 2009-01-09 04:22:21 +0900 (Fri, 09 Jan 2009) | 1 line
  
  Revert buggy test fix for locale independecce.
................
  r6305 | pierregm | 2009-01-09 05:02:29 +0900 (Fri, 09 Jan 2009) | 2 lines
  
  * Add __eq__ and __ne__ for support of flexible arrays.
  * Fixed .filled for nested structures
................
  r6306 | pierregm | 2009-01-09 06:51:04 +0900 (Fri, 09 Jan 2009) | 1 line
  
  * Remove a debugging print statement.
................
  r6307 | jarrod.millman | 2009-01-09 11:14:35 +0900 (Fri, 09 Jan 2009) | 2 lines
  
  Updated license file
................
  r6308 | cdavid | 2009-01-09 14:26:58 +0900 (Fri, 09 Jan 2009) | 1 line
  
  Tag formatting unit tests as known failures.
................
  r6309 | jarrod.millman | 2009-01-09 17:59:29 +0900 (Fri, 09 Jan 2009) | 2 lines
  
  should be more reliable way to determine what bit platform
................
  r6310 | jarrod.millman | 2009-01-09 18:14:17 +0900 (Fri, 09 Jan 2009) | 2 lines
  
  better default library paths for 64bit arch
................
  r6311 | jarrod.millman | 2009-01-09 18:57:15 +0900 (Fri, 09 Jan 2009) | 2 lines
  
  simplification suggested by stefan
................
  r6312 | jarrod.millman | 2009-01-09 19:02:09 +0900 (Fri, 09 Jan 2009) | 2 lines
  
  switch the order [lib,lib64] --> [lib64,lib] 
................
  r6313 | jarrod.millman | 2009-01-09 19:18:29 +0900 (Fri, 09 Jan 2009) | 2 lines
  
  removed unneeded import
................
  r6314 | jarrod.millman | 2009-01-10 04:37:16 +0900 (Sat, 10 Jan 2009) | 2 lines
  
  can't use append an int to a string
................
  r6315 | pierregm | 2009-01-10 05:18:12 +0900 (Sat, 10 Jan 2009) | 2 lines
  
  * Added flatten_structured_arrays
  * Fixed _get_recordarray for nested structures
................
  r6316 | pierregm | 2009-01-10 10:53:05 +0900 (Sat, 10 Jan 2009) | 1 line
  
  * Add flatten_structured_array to the namespace
................
  r6320 | pierregm | 2009-01-14 06:01:58 +0900 (Wed, 14 Jan 2009) | 9 lines
  
  numpy.ma.core:
  * introduced baseclass, sharedmask and hardmask as readonly properties of MaskedArray
  * docstrings update
  
  numpy.ma.extras:
  * docstring updates
  
  docs/reference
  * introduced maskedarray, maskedarray.baseclass, maskedarray.generic
................
  r6321 | stefan | 2009-01-14 16:14:27 +0900 (Wed, 14 Jan 2009) | 2 lines
  
  Docstring: remove old floating point arithmetic, parallel
  execution and postponed import references.
................
  r6322 | stefan | 2009-01-14 16:55:16 +0900 (Wed, 14 Jan 2009) | 1 line
  
  Fix printing of limits.
................
  r6323 | stefan | 2009-01-14 16:56:10 +0900 (Wed, 14 Jan 2009) | 1 line
  
  Fix finfo to work on all instances, not just NumPy scalars.
................
  r6324 | pierregm | 2009-01-17 09:15:15 +0900 (Sat, 17 Jan 2009) | 1 line
  
  * fixed _arraymethod.__call__ for structured arrays
................
  r6325 | ptvirtan | 2009-01-18 06:24:13 +0900 (Sun, 18 Jan 2009) | 3 lines
  
  Make `trapz` accept 1-D `x` parameter for n-d `y`, even if axis != -1.
  
  Additional tests included.
................
  r6326 | pierregm | 2009-01-19 17:53:53 +0900 (Mon, 19 Jan 2009) | 3 lines
  
  * renamed FlatIter to MaskedIterator
  * added __getitem__ to MaskedIterator
................
  r6327 | pierregm | 2009-01-19 18:01:24 +0900 (Mon, 19 Jan 2009) | 2 lines
  
  * replace np.asarray by np.asanyarray in unique1d
................
  r6328 | pierregm | 2009-01-19 18:04:20 +0900 (Mon, 19 Jan 2009) | 2 lines
  
  * add intersect1d, intersect1d_nu, setdiff1d, setmember1d, setxor1d, unique1d, union1d
  * use np.atleast1d instead of ma.atleast1d
................
  r6329 | pierregm | 2009-01-20 06:22:52 +0900 (Tue, 20 Jan 2009) | 3 lines
  
  * lib     : introduced _iotools
  * lib.io : introduced genfromtxt, ndfromtxt, mafromtxt, recfromtxt, recfromcsv.
................
  r6330 | pierregm | 2009-01-22 14:37:36 +0900 (Thu, 22 Jan 2009) | 1 line
  
  * genfromtxt : if names is True, accept a line starting with a comment character as header.
................
  r6331 | pierregm | 2009-01-22 14:40:25 +0900 (Thu, 22 Jan 2009) | 1 line
  
  * added recfunctions, a collection of utilities to manipulate structured arrays.
................
  r6332 | pierregm | 2009-01-23 03:21:32 +0900 (Fri, 23 Jan 2009) | 2 lines
  
  * fixed a machine-dependent issue on default int ('<i4' on OS X, '<i8' on linux) ?
  * fixed an machine-dependent issue on argsort ?
................
  r6333 | cdavid | 2009-01-24 17:02:14 +0900 (Sat, 24 Jan 2009) | 1 line
  
  Fix compilation error on 2.4.
................
  r6334 | pierregm | 2009-01-27 06:04:26 +0900 (Tue, 27 Jan 2009) | 7 lines
  
  * _iotools.StringConverter :
      - add a _checked attribute to indicate whether the converter has been upgraded or not.
      - switched the default value for bool to False
  * io.genfromtxt:
      - fixed for the case where a whole column is masked: switch to bool or the common dtype (if needed)
................
  r6335 | pierregm | 2009-01-27 11:46:26 +0900 (Tue, 27 Jan 2009) | 1 line
  
  * prevent MaskedBinaryOperation and DomainedBinaryOperation to shrink the mask of the output when at least one of the inputs has a mask full of False
................
  r6336 | matthew.brett@gmail.com | 2009-01-30 09:26:44 +0900 (Fri, 30 Jan 2009) | 1 line
  
  New docstrings for byteorder and newbyteorder()
................
  r6337 | pierregm | 2009-02-02 14:20:17 +0900 (Mon, 02 Feb 2009) | 2 lines
  
  * Added a 'autoconvert' option to stack_arrays.
  * Fixed 'stack_arrays' to work with fields with titles.
................
  r6338 | pierregm | 2009-02-04 02:11:44 +0900 (Wed, 04 Feb 2009) | 1 line
  
  * Make sure that StringConverter.update sets the type to object if it can't define it.
................
  r6339 | pierregm | 2009-02-05 05:52:36 +0900 (Thu, 05 Feb 2009) | 2 lines
  
  * test__iotools : prevent test_upgrademapper if dateutil is not installed
  * MaskedArray.__rmul__ : switch to multiply(self, other)
................
  r6340 | pierregm | 2009-02-05 06:53:05 +0900 (Thu, 05 Feb 2009) | 1 line
  
  test_upgrademapper : got rid of the dateutil import
................
  r6341 | pierregm | 2009-02-05 13:31:51 +0900 (Thu, 05 Feb 2009) | 2 lines
  
  *  genfromtxt : Fixed when a dtype involving objects is explicitly given. Raise a NotImplementedError if the dtype is nested.
  * _iotools : make sure StringConverter gets properly initiated when a function returning a np.object is used as input parameter.
................
  r6342 | alan.mcintyre | 2009-02-06 05:11:40 +0900 (Fri, 06 Feb 2009) | 6 lines
  
  Issue #957:
  - Fix problems with test decorators when used on test generators.  
  - The skip/fail arguments for skipif and knownfailureif can now be 
    either a bool or a callable that returns a bool.
  - Added tests for the test decorators. 
................
  r6343 | ptvirtan | 2009-02-06 09:27:08 +0900 (Fri, 06 Feb 2009) | 1 line
  
  doc/numpydoc: work better together with Sphinx's  config option
................
  r6344 | ptvirtan | 2009-02-06 09:51:41 +0900 (Fri, 06 Feb 2009) | 1 line
  
  doc: Move maskedarray docs upward in TOC
................
  r6345 | oliphant | 2009-02-06 15:25:50 +0900 (Fri, 06 Feb 2009) | 1 line
  
  Avoid re-creating the sequence when there is only one field in the regular expression.
................
  r6346 | oliphant | 2009-02-06 15:31:11 +0900 (Fri, 06 Feb 2009) | 1 line
  
  Removed an unneccessary return statement in a unit test.
................
  r6347 | pearu | 2009-02-06 23:36:58 +0900 (Fri, 06 Feb 2009) | 1 line
  
  Fix a bug: python system_info.py failed because _pkg_config_info defined section to be None.
................
  r6348 | pearu | 2009-02-06 23:38:57 +0900 (Fri, 06 Feb 2009) | 1 line
  
  Fix another bug, see last commit.
................
  r6349 | pierregm | 2009-02-07 18:19:12 +0900 (Sat, 07 Feb 2009) | 2 lines
  
  MaskedArray.resize : systematically raise a TypeError exception, as a masked array never owns its data
  MaskedIterator : fixed to allow .flat on masked matrices
................
  r6350 | pierregm | 2009-02-08 03:51:31 +0900 (Sun, 08 Feb 2009) | 1 line
................
  r6351 | ptvirtan | 2009-02-10 05:18:08 +0900 (Tue, 10 Feb 2009) | 1 line
  
  Fix #955: fix errobj leak in scalarmath floating point error handling
................
  r6352 | pierregm | 2009-02-10 09:42:40 +0900 (Tue, 10 Feb 2009) | 1 line
  
  * prevent modifications to the mask to be back-propagated w/ __array_wrap__
................
  r6354 | cdavid | 2009-02-10 19:44:01 +0900 (Tue, 10 Feb 2009) | 1 line
  
  Fix hyphen (patch from debian package).
................
  r6356 | pierregm | 2009-02-11 10:51:28 +0900 (Wed, 11 Feb 2009) | 1 line
  
  * MaskedArray.__array_wrap__ : forces the domain (if any) to a ndarray (fill with True)
................
  r6358 | oliphant | 2009-02-12 13:22:03 +0900 (Thu, 12 Feb 2009) | 1 line
  
  Add multiple-field access by making a copy of the array and filling with the selected fields.
................
  r6359 | stefan | 2009-02-12 14:44:07 +0900 (Thu, 12 Feb 2009) | 2 lines
  
  Trust user's specification of MACOSX_DEPLOYMENT_TARGET [patch by Brian
  Granger].
................
  r6360 | cdavid | 2009-02-14 23:54:26 +0900 (Sat, 14 Feb 2009) | 1 line
  
  Merge fix_float_format branch into the trunk.
................
  r6361 | cdavid | 2009-02-15 00:02:39 +0900 (Sun, 15 Feb 2009) | 1 line
  
  Fix typo in multiarray tests.
................
  r6362 | cdavid | 2009-02-15 00:03:22 +0900 (Sun, 15 Feb 2009) | 1 line
  
  Remove leftover in TestIO.
................
  r6363 | cdavid | 2009-02-15 02:03:51 +0900 (Sun, 15 Feb 2009) | 1 line
  
  Include C99 math compatbility layer in multiarray - isnan and co needed by numpyos.c
................
  r6364 | ptvirtan | 2009-02-15 07:09:26 +0900 (Sun, 15 Feb 2009) | 1 line
  
  More add_newdocs entries, and make add_newdoc capable of adding docs also to normal Python objects.
................
  r6365 | ptvirtan | 2009-02-15 07:10:24 +0900 (Sun, 15 Feb 2009) | 1 line
  
  Move (un)packbits docstrings to add_newdocs.py. Fix typos.
................
  r6366 | ptvirtan | 2009-02-15 07:11:19 +0900 (Sun, 15 Feb 2009) | 1 line
  
  Document constants in numpy.doc.constants
................
  r6367 | ptvirtan | 2009-02-15 07:38:32 +0900 (Sun, 15 Feb 2009) | 1 line
  
  Move numpy.lib __doc__ back to info.py; was moved to __init__.py by mistake.
................
  r6368 | pierregm | 2009-02-15 07:42:29 +0900 (Sun, 15 Feb 2009) | 1 line
  
  * genfromtxt : fixed case when using explicit converters and explicit dtype.
................
  r6370 | ptvirtan | 2009-02-16 00:44:47 +0900 (Mon, 16 Feb 2009) | 1 line
  
  sphinxext: clean up plot directive, and merge some features from matplotlib
................
  r6371 | charris | 2009-02-18 06:19:10 +0900 (Wed, 18 Feb 2009) | 2 lines
  
  Coding style cleanups.
................
  r6372 | cdavid | 2009-02-18 14:06:57 +0900 (Wed, 18 Feb 2009) | 1 line
  
  Fix some const issues in NumPyOs_ascii_strtod.
................
  r6373 | charris | 2009-02-18 14:36:35 +0900 (Wed, 18 Feb 2009) | 1 line
  
  Coding style cleanups.
................
  r6398 | charris | 2009-02-19 05:54:52 +0900 (Thu, 19 Feb 2009) | 2 lines
  
  Coding style cleanups.
................
  r6399 | charris | 2009-02-19 09:45:14 +0900 (Thu, 19 Feb 2009) | 2 lines
  
  Coding style cleanups.
................
  r6400 | charris | 2009-02-19 13:58:23 +0900 (Thu, 19 Feb 2009) | 1 line
  
  Coding style cleanups.
................
  r6410 | cdavid | 2009-02-19 19:05:28 +0900 (Thu, 19 Feb 2009) | 1 line
  
  Tag known failure on win32.
................
  r6421 | stefan | 2009-02-20 04:28:08 +0900 (Fri, 20 Feb 2009) | 1 line
  
  Fix tests using strptime to be Python 2.4 compatible.
................
  r6422 | charris | 2009-02-20 08:25:01 +0900 (Fri, 20 Feb 2009) | 2 lines
  
  Coding style cleanups.
................
  r6423 | charris | 2009-02-20 12:40:53 +0900 (Fri, 20 Feb 2009) | 1 line
  
  Coding style cleanups.
................
  r6424 | cdavid | 2009-02-20 22:30:20 +0900 (Fri, 20 Feb 2009) | 1 line
  
  Unhelpful message for compaq fortran compiler.
................

==
==================
a271ac2;David Cournapeau;2009-02-20 13:30:20 +0000;Unhelpful message for compaq fortran compiler.

==

numpy/distutils/fcompiler/compaq.py
==================
f3c36fa;Charles Harris;2009-02-20 03:40:53 +0000;Coding style cleanups.

==

numpy/core/src/arrayobject.c
==================
4d6063d;Charles Harris;2009-02-19 23:25:01 +0000;Coding style cleanups.

==

numpy/core/src/scalartypes.inc.src
==================
42ba370;Stefan van der Walt;2009-02-19 19:28:08 +0000;Fix tests using strptime to be Python 2.4 compatible.

==

numpy/lib/tests/test_io.py
==================
7a0a975;David Cournapeau;2009-02-19 14:46:01 +0000;Use npymath for isnan and co.

==

numpy/core/src/umath_loops.inc.src
==================
1f57355;David Cournapeau;2009-02-19 14:40:16 +0000;Fix npy_signbit when signbit is not available: I forgot to declare the implementation functions... stupidest thing ever.

==

numpy/core/include/numpy/npy_math.h
==================
97b8819;David Cournapeau;2009-02-19 11:46:09 +0000;Fix umath generator to use npymath funcs instead of straight libc ones.

==

numpy/core/code_generators/generate_umath.py
==================
3140817;David Cournapeau;2009-02-19 11:45:30 +0000;Move non standard, real math function from umath_funcs into npymath.

==

numpy/core/src/npy_math.c.src
numpy/core/src/umath_funcs.inc.src
==================
b841d10;David Cournapeau;2009-02-19 11:44:22 +0000;Add a few more non standard functions to npy math.

==

numpy/core/include/numpy/npy_math.h
==================
0cafc5a;David Cournapeau;2009-02-19 11:42:23 +0000;Add more basic math funcs in npymath lib.

==

numpy/core/include/numpy/npy_math.h
==================
65696d2;David Cournapeau;2009-02-19 10:55:31 +0000;fix syntax issues for signbit internal replacement.

==

numpy/core/src/_signbit.c
numpy/core/src/npy_math.c.src
==================
502f89e;David Cournapeau;2009-02-19 10:50:16 +0000;Add python library path for python types - needed with MS compilers.

==

numpy/core/setup.py
==================
ab606d3;David Cournapeau;2009-02-19 10:49:34 +0000;Support library_dirs in check_type.

==

numpy/distutils/command/config.py
==================
e0c7713;David Cournapeau;2009-02-19 10:24:58 +0000;Merge r6410.

==
==================
000030d;David Cournapeau;2009-02-19 10:05:28 +0000;Tag known failure on win32.

==

numpy/lib/tests/test_io.py
numpy/lib/tests/test_recfunctions.py
==================
242d42b;David Cournapeau;2009-02-19 09:36:09 +0000;Do not silently fail to get sizeof basic types.

==

numpy/core/setup.py
==================
b74d11b;David Cournapeau;2009-02-19 09:33:41 +0000;Add our own check_header, since distutils one is broken.

==

numpy/distutils/command/config.py
==================
c860323;David Cournapeau;2009-02-19 09:18:21 +0000;npymath convertion in umath_funcs done.

==

numpy/core/src/umath_funcs.inc.src
==================
383ec08;David Cournapeau;2009-02-19 09:17:45 +0000;Add atan2 in npymath.

==

numpy/core/include/numpy/npy_math.h
==================
77d5fd4;David Cournapeau;2009-02-19 09:17:15 +0000;Add sqrt and fabs in npymath.

==

numpy/core/include/numpy/npy_math.h
==================
4422c79;David Cournapeau;2009-02-19 08:51:20 +0000;Start using npymath functions in umath; all test pass on this one on Linux.

==

numpy/core/src/umath_funcs.inc.src
==================
0d187c2;David Cournapeau;2009-02-19 08:50:58 +0000;Add a couple of basic functions to npymath.

==

numpy/core/include/numpy/npy_math.h
==================
a3e58a2;David Cournapeau;2009-02-19 08:50:33 +0000;Decorate all the math functions, make internal replacements static.

==

numpy/core/src/npy_math.c.src
==================
23da546;David Cournapeau;2009-02-19 08:50:13 +0000;Revert back changes using npymath in umath, too much breakage.

==

numpy/core/src/umath_funcs.inc.src
==================
707639f;Charles Harris;2009-02-19 04:58:23 +0000;Coding style cleanups.

==

numpy/core/src/arrayobject.c
==================
9591241;Charles Harris;2009-02-19 00:45:14 +0000;Coding style cleanups.

==

numpy/core/src/arrayobject.c
==================
367602f;Charles Harris;2009-02-18 20:54:52 +0000;Coding style cleanups.

==

numpy/core/src/arrayobject.c
==================
92342d0;David Cournapeau;2009-02-18 17:32:02 +0000;Use npymath instead of C math lib for umath_funcs (break numpy ATM).

==

numpy/core/setup.py
numpy/core/src/umath_funcs.inc.src
==================
62085b9;David Cournapeau;2009-02-18 17:31:27 +0000;Fix nan/inf/co macro when not available on the target platform in npy_math.

==

numpy/core/include/numpy/npy_math.h
numpy/core/src/_signbit.c
numpy/core/src/npy_math.c.src
==================
6d74ee7;David Cournapeau;2009-02-18 17:30:41 +0000;Remove umath_funcs_c99.inc.src.

==

numpy/core/setup.py
numpy/core/src/multiarraymodule.c
numpy/core/src/numpyos.c
numpy/core/src/umath_funcs_c99.inc.src
numpy/core/src/umathmodule.c.src
==================
64fdf5e;David Cournapeau;2009-02-18 17:30:03 +0000;Move npy_math header to numpy/core include path.

==

numpy/core/include/numpy/npy_math.h
numpy/core/src/npy_math.c.src
numpy/core/src/npy_math.h
==================
8e51153;David Cournapeau;2009-02-18 17:29:21 +0000;Typo.

==

numpy/core/setup.py
==================
67683ac;David Cournapeau;2009-02-18 17:28:57 +0000;Build npymath lib.

==

numpy/core/setup.py
==================
907ac7f;David Cournapeau;2009-02-18 17:28:30 +0000;Start working on core math library itself.

==

numpy/core/src/npy_math.c.src
numpy/core/src/npy_math.h
==================
0045d57;David Cournapeau;2009-02-18 17:28:03 +0000;Check for isinf and co declarations for numpyconfig.h as well, this it will be needed for npy_math.

==

numpy/core/setup.py
==================
a788f29;David Cournapeau;2009-02-18 17:27:26 +0000;Put npy type base types declaration into separate header, to be usable by C libraries without pulling the whole ndarray stuff.

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/include/numpy/npy_common.h
==================
aa2d15c;David Cournapeau;2009-02-18 17:26:30 +0000;Add numpy_include_dirs to C libraries as well.

==

numpy/distutils/command/build_clib.py
==================
e88a1b2;David Cournapeau;2009-02-18 17:25:55 +0000;Put win32 checks in separate function.

==

numpy/core/setup.py
==================
a05f3fb;David Cournapeau;2009-02-18 17:25:35 +0000;Remove dead codepath (we require python 2.4).

==

numpy/core/setup.py
==================
4f22b8e;David Cournapeau;2009-02-18 17:25:12 +0000;Remove obsolete defines.

==

numpy/core/setup.py
==================
9f2c6d5;David Cournapeau;2009-02-18 17:24:44 +0000;Remove unused code.

==

numpy/core/setup.py
==================
5443d9f;David Cournapeau;2009-02-18 17:24:24 +0000;Remote unused code.

==

numpy/core/setup.py
==================
23c84e5;David Cournapeau;2009-02-18 17:24:03 +0000;Put mathlib checks in separate function.

==

numpy/core/setup.py
==================
eb21e48;David Cournapeau;2009-02-18 17:23:42 +0000;Avoid using dir to avoid shadowing dir builtin.

==

numpy/core/setup.py
==================
448387a;David Cournapeau;2009-02-18 17:23:16 +0000;Put all sizeofs checks ending up in config.h in a separate function.

==

numpy/core/setup.py
==================
86e15d0;David Cournapeau;2009-02-18 17:22:51 +0000;Add sizeofs defines to moredefs so that they end up in config.h.

==

numpy/core/setup.py
==================
a95cfbd;David Cournapeau;2009-02-18 17:22:31 +0000;Be explicit about sizeof checks instead of using one big .C file.

==

numpy/core/setup.py
==================
93351fd;David Cournapeau;2009-02-18 17:21:49 +0000;Add check_type_sizeof function.

==

numpy/distutils/command/config.py
==================
4b5a3ed;David Cournapeau;2009-02-18 17:21:08 +0000;Forgot to raise an exception if Python.h cannot be found.

==

numpy/core/setup.py
==================
d52af76;David Cournapeau;2009-02-18 17:20:50 +0000;Check Python.h through compilation instead of looking for it on the FS + do not add python include, since it is already included by distutils.

==

numpy/core/setup.py
==================
e6900b0;Charles Harris;2009-02-18 05:36:35 +0000;Coding style cleanups.

==

numpy/core/src/arrayobject.c
==================
734fb0f;David Cournapeau;2009-02-18 05:06:57 +0000;Fix some const issues in NumPyOs_ascii_strtod.

==

numpy/core/src/numpyos.c
==================
3e8db35;Charles Harris;2009-02-17 21:19:10 +0000;Coding style cleanups.

==

numpy/core/src/arraymethods.c
==================
61ac5cf;Pauli Virtanen;2009-02-15 15:44:47 +0000;sphinxext: clean up plot directive, and merge some features from matplotlib

==

doc/sphinxext/plot_directive.py
==================
fb4035f;David Cournapeau;2009-02-15 12:03:15 +0000;Merged revisions 6191-6221,6235-6238,6240-6241,6244,6250-6251,6253,6256,6258,6260-6261,6263,6265-6266,6268,6271,6283-6286,6291-6316,6320-6352,6354,6356,6358-6368 via svnmerge from http://svn.scipy.org/svn/numpy/trunk
................
  r6191 | cdavid | 2008-12-23 13:10:59 +0900 (Tue, 23 Dec 2008) | 1 line
  
  Fix typos in the comments for manifest.
................
  r6192 | cdavid | 2008-12-23 13:11:12 +0900 (Tue, 23 Dec 2008) | 1 line
  
  Use msvcrt values if available for manifest generation: only there starting from python 2.6.1.
................
  r6193 | pearu | 2008-12-23 18:02:15 +0900 (Tue, 23 Dec 2008) | 1 line
  
  Fix issue 964: f2py python 2.6, 2.6.1 support.
................
  r6194 | pierregm | 2008-12-24 08:43:43 +0900 (Wed, 24 Dec 2008) | 12 lines
  
  testutils:
  * assert_equal : use assert_equal_array on records
  * assert_array_compare : prevent the common mask to be back-propagated to the initial input arrays.
  * assert_equal_array : use operator.__eq__ instead of ma.equal
  * assert_equal_less: use operator.__less__ instead of ma.less
  
  core:
  * Fixed _check_fill_value for nested flexible types
  * Add a ndtype option to _make_mask_descr
  * Fixed mask_or for nested flexible types
  * Fixed the printing of masked arrays w/ flexible types.
................
  r6195 | cdavid | 2008-12-26 21:16:45 +0900 (Fri, 26 Dec 2008) | 1 line
  
  Update to handle numscons 0.10.0 and above.
................
  r6196 | cdavid | 2008-12-26 21:36:19 +0900 (Fri, 26 Dec 2008) | 1 line
  
  Do not import msvcrt globally in mingw32compiler module, since the module is imported on all platforms.
................
  r6197 | cdavid | 2008-12-26 23:39:55 +0900 (Fri, 26 Dec 2008) | 1 line
  
  Do not test for functions already tested by python configure script.
................
  r6198 | cdavid | 2008-12-27 14:56:58 +0900 (Sat, 27 Dec 2008) | 1 line
  
  BUG: Add a runtime check about endianness, to detect bug 4728 in python on Mac OS X.
................
  r6199 | cdavid | 2008-12-27 19:06:25 +0900 (Sat, 27 Dec 2008) | 1 line
  
  Fix some typo/syntax errors when converting dict access to a function in manifest generation.
................
  r6200 | cdavid | 2008-12-27 19:15:30 +0900 (Sat, 27 Dec 2008) | 1 line
  
  BUG (#970): fix a python 2.6 bug in distutils which caused an unhelpful Error:None message when trying to build with no VS installed and without the -c mingw32 option.
................
  r6201 | cdavid | 2008-12-27 19:30:49 +0900 (Sat, 27 Dec 2008) | 1 line
  
  Improve the error message when initializing compiler failed.
................
  r6202 | cdavid | 2008-12-27 19:32:05 +0900 (Sat, 27 Dec 2008) | 1 line
  
  Try to initialize the msvc compiler before the general code to detect the error early.
................
  r6203 | cdavid | 2008-12-27 19:43:41 +0900 (Sat, 27 Dec 2008) | 1 line
  
  BUG (#970): this commit should fix the actual bug, which albeeit linked to commir r6200, was caused in anoter code path.
................
  r6204 | cdavid | 2008-12-27 19:57:05 +0900 (Sat, 27 Dec 2008) | 1 line
  
  Fix manifest generation.
................
  r6205 | cdavid | 2008-12-27 20:46:08 +0900 (Sat, 27 Dec 2008) | 1 line
  
  BUG (#827): close temp file before reopning them on windows, and make sure they are not automatically deleted on close either (2.6and higher specific).
................
  r6206 | cdavid | 2008-12-27 21:18:47 +0900 (Sat, 27 Dec 2008) | 1 line
  
  Do not define the union for runtime endianness detection if we don't check endianness.
................
  r6207 | cdavid | 2008-12-27 22:48:52 +0900 (Sat, 27 Dec 2008) | 1 line
  
  Start working on formatting failure on 2.6: copy how python does complex formatting.
................
  r6208 | cdavid | 2008-12-27 23:44:11 +0900 (Sat, 27 Dec 2008) | 1 line
  
  Fix formatting for purely imaginary complex numbers.
................
  r6209 | cdavid | 2008-12-27 23:53:15 +0900 (Sat, 27 Dec 2008) | 1 line
  
  More work on formatting float.
................
  r6210 | cdavid | 2008-12-27 23:59:41 +0900 (Sat, 27 Dec 2008) | 1 line
  
  Finish formatting fixes for float scalar arrays.
................
  r6211 | cdavid | 2008-12-28 00:12:20 +0900 (Sun, 28 Dec 2008) | 1 line
  
  Include umath_funcs_c99 in multiarray so that we can use isinf and co macros.
................
  r6212 | cdavid | 2008-12-28 01:15:04 +0900 (Sun, 28 Dec 2008) | 1 line
  
  Include config.h before our C99 math compat layer.
................
  r6213 | cdavid | 2008-12-28 01:15:41 +0900 (Sun, 28 Dec 2008) | 1 line
  
  Fix formatting.
................
  r6214 | cdavid | 2008-12-28 01:16:18 +0900 (Sun, 28 Dec 2008) | 1 line
  
  Do not define FMTR and FMTI macros, as those are already defined on some platforms.
................
  r6215 | cdavid | 2008-12-28 01:16:52 +0900 (Sun, 28 Dec 2008) | 1 line
  
  More formatting fixes.
................
  r6216 | cdavid | 2008-12-28 01:17:27 +0900 (Sun, 28 Dec 2008) | 1 line
  
  Remove undef of removed macro.
................
  r6217 | cdavid | 2008-12-28 01:33:40 +0900 (Sun, 28 Dec 2008) | 1 line
  
  Do not use PyOS_ascii_formatd, as it does not handle long double correctly.
................
  r6218 | cdavid | 2008-12-28 02:19:40 +0900 (Sun, 28 Dec 2008) | 1 line
  
  Try ugly hack to circumvent long double brokenness with mingw.
................
  r6219 | cdavid | 2008-12-28 02:25:50 +0900 (Sun, 28 Dec 2008) | 1 line
  
  Use ugly hack for mingw long double pb with complex format function as well.
................
  r6220 | cdavid | 2008-12-28 12:18:20 +0900 (Sun, 28 Dec 2008) | 1 line
  
  Revert formatting changes: ascii_formatd only works for double, so we can't use it as it is for our formatting needs.
................
  r6221 | cdavid | 2008-12-28 15:44:06 +0900 (Sun, 28 Dec 2008) | 1 line
  
  Do not add doc sources through add_data_dir: it will put the docs alongside numpy, as a separate package, which is not what we want. Use the manifest instead, since that's the only way I know of to include something in sdist-generated tarballs.
................
  r6235 | cdavid | 2008-12-29 16:57:52 +0900 (Mon, 29 Dec 2008) | 13 lines
  
  Merged revisions 6233-6234 via svnmerge from 
  http://svn.scipy.org/svn/numpy/branches/fix_float_format
  
  ........
    r6233 | cdavid | 2008-12-29 12:49:09 +0900 (Mon, 29 Dec 2008) | 1 line
    
    Use parametric tests for format tests so that it is clearer which type is failing.
  ........
    r6234 | cdavid | 2008-12-29 12:49:27 +0900 (Mon, 29 Dec 2008) | 1 line
    
    Fix formatting tests: cfloat and cdouble as well as np.float and np.double are the same; make sure we test 4 bytes float.
  ........
................
  r6236 | cdavid | 2008-12-29 17:02:15 +0900 (Mon, 29 Dec 2008) | 1 line
  
  Add nan/inf tests for formatting.
................
  r6237 | cdavid | 2008-12-29 17:26:04 +0900 (Mon, 29 Dec 2008) | 1 line
  
  Add test for real float types locale independance.
................
  r6238 | cdavid | 2008-12-29 17:35:06 +0900 (Mon, 29 Dec 2008) | 1 line
  
  Clearer error messages for formatting failures.
................
  r6240 | cdavid | 2008-12-30 12:48:11 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Add tests for print of float types.
................
  r6241 | cdavid | 2008-12-30 12:56:54 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Add print tests for complex types.
................
  r6244 | cdavid | 2008-12-30 13:20:48 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Fix test for print: forgot to make sure the value is a float before comparing it.
................
  r6250 | cdavid | 2008-12-30 14:02:28 +0900 (Tue, 30 Dec 2008) | 17 lines
  
  Merged revisions 6247-6249 via svnmerge from 
  http://svn.scipy.org/svn/numpy/branches/fix_float_format
  
  ........
    r6247 | cdavid | 2008-12-30 13:41:37 +0900 (Tue, 30 Dec 2008) | 1 line
    
    Handle 1e10 specially, as it is the limit where exp notation is shorter than decimal for single precision, but not for double (python native one).
  ........
    r6248 | cdavid | 2008-12-30 13:47:38 +0900 (Tue, 30 Dec 2008) | 1 line
    
    Refactor a bit redirected output print test.
  ........
    r6249 | cdavid | 2008-12-30 13:49:31 +0900 (Tue, 30 Dec 2008) | 1 line
    
    Fix test for single precision print.
  ........
................
  r6251 | cdavid | 2008-12-30 14:12:50 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Use np.inf instead of float('inf'), as the later does not work on windows for python < 2.6.
................
  r6253 | cdavid | 2008-12-30 14:15:09 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Fix typo in test.
................
  r6256 | cdavid | 2008-12-30 14:34:22 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Special case float tests on windows: python 2.5 and below have >=3 digits in the exp.
................
  r6258 | cdavid | 2008-12-30 14:42:03 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Hardcode reference for inf/nan-involved values.
................
  r6260 | cdavid | 2008-12-30 14:50:18 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Fix more formatting tests on win32.
................
  r6261 | cdavid | 2008-12-30 14:52:16 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Fix some more redirected output print tests.
................
  r6263 | cdavid | 2008-12-30 15:01:31 +0900 (Tue, 30 Dec 2008) | 1 line
  
  More fixes for print tests.
................
  r6265 | cdavid | 2008-12-30 15:03:56 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Fix typo.
................
  r6266 | cdavid | 2008-12-30 15:08:06 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Fix typo.
................
  r6268 | cdavid | 2008-12-30 15:12:26 +0900 (Tue, 30 Dec 2008) | 1 line
  
  complex scalar arrays cannot be created from real/imag args: wrap init values in a complex.
................
  r6271 | cdavid | 2008-12-30 15:32:03 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Do not use dict for reference: hashing on scalar arrays does not work as I expected.
................
  r6283 | ptvirtan | 2008-12-31 10:14:47 +0900 (Wed, 31 Dec 2008) | 1 line
  
  Fix #951: make tests to clean temp files properly
................
  r6284 | jarrod.millman | 2009-01-01 08:25:03 +0900 (Thu, 01 Jan 2009) | 2 lines
  
  ran reindent
................
  r6285 | alan.mcintyre | 2009-01-01 08:46:34 +0900 (Thu, 01 Jan 2009) | 15 lines
  
  Remove the following deprecated items from numpy.testing:
  
  - ParametricTestCase 
  - The following arguments from numpy.testing.Tester.test(): level, 
  verbosity, 
    all, sys_argv, testcase_pattern
  - Path manipulation functions: set_package_path, set_local_path, 
  restore_path
  - NumpyTestCase, NumpyTest
  
  Also separated testing parameter setup from NoseTester.test into 
  NoseTester.prepare_test_args for use in a utility script for valgrind 
  testing (see NumPy ticket #784).
................
  r6286 | jarrod.millman | 2009-01-01 16:56:53 +0900 (Thu, 01 Jan 2009) | 2 lines
  
  add default include dir for Fedora/Red Hat (see SciPy ticket 817)
................
  r6291 | cdavid | 2009-01-04 19:57:39 +0900 (Sun, 04 Jan 2009) | 1 line
  
  Do not import md5 on python >= 2.6; use hashlib instead.
................
  r6292 | cdavid | 2009-01-04 20:08:16 +0900 (Sun, 04 Jan 2009) | 1 line
  
  Do not use popen* but subprocess.Popen instead.
................
  r6293 | cdavid | 2009-01-04 21:03:29 +0900 (Sun, 04 Jan 2009) | 1 line
  
  Revert md5 change: hashlib.md5 is not a drop-in replacement for md5.
................
  r6294 | pierregm | 2009-01-05 05:16:00 +0900 (Mon, 05 Jan 2009) | 2 lines
  
  * adapted default_fill_value for flexible datatype
  * fixed max/minimum_fill_value for flexible datatype
................
  r6295 | stefan | 2009-01-06 06:51:18 +0900 (Tue, 06 Jan 2009) | 1 line
  
  Credit more developers.
................
  r6296 | pierregm | 2009-01-06 07:52:21 +0900 (Tue, 06 Jan 2009) | 1 line
  
  *moved the printing templates out of MaskedArray.__repr__
................
  r6297 | stefan | 2009-01-06 19:09:00 +0900 (Tue, 06 Jan 2009) | 1 line
  
  Use new-style classes with multiple-inheritance to address bug in IronPython.
................
  r6298 | pierregm | 2009-01-07 05:35:37 +0900 (Wed, 07 Jan 2009) | 1 line
  
  * Bugfix #961
................
  r6299 | pierregm | 2009-01-08 03:14:12 +0900 (Thu, 08 Jan 2009) | 1 line
  
  * Fixed iadd/isub/imul when the base array has no mask but the other array does
................
  r6300 | pierregm | 2009-01-08 07:34:51 +0900 (Thu, 08 Jan 2009) | 3 lines
  
  * Renamed `torecords` to `toflex`, keeping `torecords` as an alias
  * Introduced `fromflex`, to reconstruct a masked_array from the output of `toflex` (can’t `use fromrecords` as it would clash with `numpy.ma.mrecords.fromrecords`)
  * Fixed a bug in MaskedBinaryOperation (#979) (wrong array broadcasting)
................
  r6301 | cdavid | 2009-01-08 18:19:00 +0900 (Thu, 08 Jan 2009) | 1 line
  
  Avoid putting things into stderr when errors occurs in f2py wrappers; put all the info in the python error string instead.
................
  r6302 | cdavid | 2009-01-09 00:11:32 +0900 (Fri, 09 Jan 2009) | 1 line
  
  Fix python 2.4 issue.
................
  r6303 | chanley | 2009-01-09 01:30:01 +0900 (Fri, 09 Jan 2009) | 1 line
  
  Fix test_print.py function _test_locale_independance() since str(1.2) does not use the LC_NUMERIC locale to convert numbers.  Fix from Mark Sienkiewicz.
................
  r6304 | cdavid | 2009-01-09 04:22:21 +0900 (Fri, 09 Jan 2009) | 1 line
  
  Revert buggy test fix for locale independecce.
................
  r6305 | pierregm | 2009-01-09 05:02:29 +0900 (Fri, 09 Jan 2009) | 2 lines
  
  * Add __eq__ and __ne__ for support of flexible arrays.
  * Fixed .filled for nested structures
................
  r6306 | pierregm | 2009-01-09 06:51:04 +0900 (Fri, 09 Jan 2009) | 1 line
  
  * Remove a debugging print statement.
................
  r6307 | jarrod.millman | 2009-01-09 11:14:35 +0900 (Fri, 09 Jan 2009) | 2 lines
  
  Updated license file
................
  r6308 | cdavid | 2009-01-09 14:26:58 +0900 (Fri, 09 Jan 2009) | 1 line
  
  Tag formatting unit tests as known failures.
................
  r6309 | jarrod.millman | 2009-01-09 17:59:29 +0900 (Fri, 09 Jan 2009) | 2 lines
  
  should be more reliable way to determine what bit platform
................
  r6310 | jarrod.millman | 2009-01-09 18:14:17 +0900 (Fri, 09 Jan 2009) | 2 lines
  
  better default library paths for 64bit arch
................
  r6311 | jarrod.millman | 2009-01-09 18:57:15 +0900 (Fri, 09 Jan 2009) | 2 lines
  
  simplification suggested by stefan
................
  r6312 | jarrod.millman | 2009-01-09 19:02:09 +0900 (Fri, 09 Jan 2009) | 2 lines
  
  switch the order [lib,lib64] --> [lib64,lib] 
................
  r6313 | jarrod.millman | 2009-01-09 19:18:29 +0900 (Fri, 09 Jan 2009) | 2 lines
  
  removed unneeded import
................
  r6314 | jarrod.millman | 2009-01-10 04:37:16 +0900 (Sat, 10 Jan 2009) | 2 lines
  
  can't use append an int to a string
................
  r6315 | pierregm | 2009-01-10 05:18:12 +0900 (Sat, 10 Jan 2009) | 2 lines
  
  * Added flatten_structured_arrays
  * Fixed _get_recordarray for nested structures
................
  r6316 | pierregm | 2009-01-10 10:53:05 +0900 (Sat, 10 Jan 2009) | 1 line
  
  * Add flatten_structured_array to the namespace
................
  r6320 | pierregm | 2009-01-14 06:01:58 +0900 (Wed, 14 Jan 2009) | 9 lines
  
  numpy.ma.core:
  * introduced baseclass, sharedmask and hardmask as readonly properties of MaskedArray
  * docstrings update
  
  numpy.ma.extras:
  * docstring updates
  
  docs/reference
  * introduced maskedarray, maskedarray.baseclass, maskedarray.generic
................
  r6321 | stefan | 2009-01-14 16:14:27 +0900 (Wed, 14 Jan 2009) | 2 lines
  
  Docstring: remove old floating point arithmetic, parallel
  execution and postponed import references.
................
  r6322 | stefan | 2009-01-14 16:55:16 +0900 (Wed, 14 Jan 2009) | 1 line
  
  Fix printing of limits.
................
  r6323 | stefan | 2009-01-14 16:56:10 +0900 (Wed, 14 Jan 2009) | 1 line
  
  Fix finfo to work on all instances, not just NumPy scalars.
................
  r6324 | pierregm | 2009-01-17 09:15:15 +0900 (Sat, 17 Jan 2009) | 1 line
  
  * fixed _arraymethod.__call__ for structured arrays
................
  r6325 | ptvirtan | 2009-01-18 06:24:13 +0900 (Sun, 18 Jan 2009) | 3 lines
  
  Make `trapz` accept 1-D `x` parameter for n-d `y`, even if axis != -1.
  
  Additional tests included.
................
  r6326 | pierregm | 2009-01-19 17:53:53 +0900 (Mon, 19 Jan 2009) | 3 lines
  
  * renamed FlatIter to MaskedIterator
  * added __getitem__ to MaskedIterator
................
  r6327 | pierregm | 2009-01-19 18:01:24 +0900 (Mon, 19 Jan 2009) | 2 lines
  
  * replace np.asarray by np.asanyarray in unique1d
................
  r6328 | pierregm | 2009-01-19 18:04:20 +0900 (Mon, 19 Jan 2009) | 2 lines
  
  * add intersect1d, intersect1d_nu, setdiff1d, setmember1d, setxor1d, unique1d, union1d
  * use np.atleast1d instead of ma.atleast1d
................
  r6329 | pierregm | 2009-01-20 06:22:52 +0900 (Tue, 20 Jan 2009) | 3 lines
  
  * lib     : introduced _iotools
  * lib.io : introduced genfromtxt, ndfromtxt, mafromtxt, recfromtxt, recfromcsv.
................
  r6330 | pierregm | 2009-01-22 14:37:36 +0900 (Thu, 22 Jan 2009) | 1 line
  
  * genfromtxt : if names is True, accept a line starting with a comment character as header.
................
  r6331 | pierregm | 2009-01-22 14:40:25 +0900 (Thu, 22 Jan 2009) | 1 line
  
  * added recfunctions, a collection of utilities to manipulate structured arrays.
................
  r6332 | pierregm | 2009-01-23 03:21:32 +0900 (Fri, 23 Jan 2009) | 2 lines
  
  * fixed a machine-dependent issue on default int ('<i4' on OS X, '<i8' on linux) ?
  * fixed an machine-dependent issue on argsort ?
................
  r6333 | cdavid | 2009-01-24 17:02:14 +0900 (Sat, 24 Jan 2009) | 1 line
  
  Fix compilation error on 2.4.
................
  r6334 | pierregm | 2009-01-27 06:04:26 +0900 (Tue, 27 Jan 2009) | 7 lines
  
  * _iotools.StringConverter :
      - add a _checked attribute to indicate whether the converter has been upgraded or not.
      - switched the default value for bool to False
  * io.genfromtxt:
      - fixed for the case where a whole column is masked: switch to bool or the common dtype (if needed)
................
  r6335 | pierregm | 2009-01-27 11:46:26 +0900 (Tue, 27 Jan 2009) | 1 line
  
  * prevent MaskedBinaryOperation and DomainedBinaryOperation to shrink the mask of the output when at least one of the inputs has a mask full of False
................
  r6336 | matthew.brett@gmail.com | 2009-01-30 09:26:44 +0900 (Fri, 30 Jan 2009) | 1 line
  
  New docstrings for byteorder and newbyteorder()
................
  r6337 | pierregm | 2009-02-02 14:20:17 +0900 (Mon, 02 Feb 2009) | 2 lines
  
  * Added a 'autoconvert' option to stack_arrays.
  * Fixed 'stack_arrays' to work with fields with titles.
................
  r6338 | pierregm | 2009-02-04 02:11:44 +0900 (Wed, 04 Feb 2009) | 1 line
  
  * Make sure that StringConverter.update sets the type to object if it can't define it.
................
  r6339 | pierregm | 2009-02-05 05:52:36 +0900 (Thu, 05 Feb 2009) | 2 lines
  
  * test__iotools : prevent test_upgrademapper if dateutil is not installed
  * MaskedArray.__rmul__ : switch to multiply(self, other)
................
  r6340 | pierregm | 2009-02-05 06:53:05 +0900 (Thu, 05 Feb 2009) | 1 line
  
  test_upgrademapper : got rid of the dateutil import
................
  r6341 | pierregm | 2009-02-05 13:31:51 +0900 (Thu, 05 Feb 2009) | 2 lines
  
  *  genfromtxt : Fixed when a dtype involving objects is explicitly given. Raise a NotImplementedError if the dtype is nested.
  * _iotools : make sure StringConverter gets properly initiated when a function returning a np.object is used as input parameter.
................
  r6342 | alan.mcintyre | 2009-02-06 05:11:40 +0900 (Fri, 06 Feb 2009) | 6 lines
  
  Issue #957:
  - Fix problems with test decorators when used on test generators.  
  - The skip/fail arguments for skipif and knownfailureif can now be 
    either a bool or a callable that returns a bool.
  - Added tests for the test decorators. 
................
  r6343 | ptvirtan | 2009-02-06 09:27:08 +0900 (Fri, 06 Feb 2009) | 1 line
  
  doc/numpydoc: work better together with Sphinx's  config option
................
  r6344 | ptvirtan | 2009-02-06 09:51:41 +0900 (Fri, 06 Feb 2009) | 1 line
  
  doc: Move maskedarray docs upward in TOC
................
  r6345 | oliphant | 2009-02-06 15:25:50 +0900 (Fri, 06 Feb 2009) | 1 line
  
  Avoid re-creating the sequence when there is only one field in the regular expression.
................
  r6346 | oliphant | 2009-02-06 15:31:11 +0900 (Fri, 06 Feb 2009) | 1 line
  
  Removed an unneccessary return statement in a unit test.
................
  r6347 | pearu | 2009-02-06 23:36:58 +0900 (Fri, 06 Feb 2009) | 1 line
  
  Fix a bug: python system_info.py failed because _pkg_config_info defined section to be None.
................
  r6348 | pearu | 2009-02-06 23:38:57 +0900 (Fri, 06 Feb 2009) | 1 line
  
  Fix another bug, see last commit.
................
  r6349 | pierregm | 2009-02-07 18:19:12 +0900 (Sat, 07 Feb 2009) | 2 lines
  
  MaskedArray.resize : systematically raise a TypeError exception, as a masked array never owns its data
  MaskedIterator : fixed to allow .flat on masked matrices
................
  r6350 | pierregm | 2009-02-08 03:51:31 +0900 (Sun, 08 Feb 2009) | 1 line
................
  r6351 | ptvirtan | 2009-02-10 05:18:08 +0900 (Tue, 10 Feb 2009) | 1 line
  
  Fix #955: fix errobj leak in scalarmath floating point error handling
................
  r6352 | pierregm | 2009-02-10 09:42:40 +0900 (Tue, 10 Feb 2009) | 1 line
  
  * prevent modifications to the mask to be back-propagated w/ __array_wrap__
................
  r6354 | cdavid | 2009-02-10 19:44:01 +0900 (Tue, 10 Feb 2009) | 1 line
  
  Fix hyphen (patch from debian package).
................
  r6356 | pierregm | 2009-02-11 10:51:28 +0900 (Wed, 11 Feb 2009) | 1 line
  
  * MaskedArray.__array_wrap__ : forces the domain (if any) to a ndarray (fill with True)
................
  r6358 | oliphant | 2009-02-12 13:22:03 +0900 (Thu, 12 Feb 2009) | 1 line
  
  Add multiple-field access by making a copy of the array and filling with the selected fields.
................
  r6359 | stefan | 2009-02-12 14:44:07 +0900 (Thu, 12 Feb 2009) | 2 lines
  
  Trust user's specification of MACOSX_DEPLOYMENT_TARGET [patch by Brian
  Granger].
................
  r6360 | cdavid | 2009-02-14 23:54:26 +0900 (Sat, 14 Feb 2009) | 1 line
  
  Merge fix_float_format branch into the trunk.
................
  r6361 | cdavid | 2009-02-15 00:02:39 +0900 (Sun, 15 Feb 2009) | 1 line
  
  Fix typo in multiarray tests.
................
  r6362 | cdavid | 2009-02-15 00:03:22 +0900 (Sun, 15 Feb 2009) | 1 line
  
  Remove leftover in TestIO.
................
  r6363 | cdavid | 2009-02-15 02:03:51 +0900 (Sun, 15 Feb 2009) | 1 line
  
  Include C99 math compatbility layer in multiarray - isnan and co needed by numpyos.c
................
  r6364 | ptvirtan | 2009-02-15 07:09:26 +0900 (Sun, 15 Feb 2009) | 1 line
  
  More add_newdocs entries, and make add_newdoc capable of adding docs also to normal Python objects.
................
  r6365 | ptvirtan | 2009-02-15 07:10:24 +0900 (Sun, 15 Feb 2009) | 1 line
  
  Move (un)packbits docstrings to add_newdocs.py. Fix typos.
................
  r6366 | ptvirtan | 2009-02-15 07:11:19 +0900 (Sun, 15 Feb 2009) | 1 line
  
  Document constants in numpy.doc.constants
................
  r6367 | ptvirtan | 2009-02-15 07:38:32 +0900 (Sun, 15 Feb 2009) | 1 line
  
  Move numpy.lib __doc__ back to info.py; was moved to __init__.py by mistake.
................
  r6368 | pierregm | 2009-02-15 07:42:29 +0900 (Sun, 15 Feb 2009) | 1 line
  
  * genfromtxt : fixed case when using explicit converters and explicit dtype.
................

==
==================
b4b2d63;pierregm;2009-02-14 22:42:29 +0000;* genfromtxt : fixed case when using explicit converters and explicit dtype.

==

numpy/lib/io.py
numpy/lib/tests/test__iotools.py
numpy/lib/tests/test_io.py
==================
c1877cb;Pauli Virtanen;2009-02-14 22:38:32 +0000;Move numpy.lib __doc__ back to info.py; was moved to __init__.py by mistake.

==

numpy/lib/__init__.py
numpy/lib/info.py
==================
e8eb240;Pauli Virtanen;2009-02-14 22:11:19 +0000;Document constants in numpy.doc.constants

==

numpy/doc/constants.py
==================
11943ab;Pauli Virtanen;2009-02-14 22:10:24 +0000;Move (un)packbits docstrings to add_newdocs.py. Fix typos.

==

numpy/add_newdocs.py
numpy/lib/src/_compiled_base.c
==================
9902bd1;Pauli Virtanen;2009-02-14 22:09:26 +0000;More add_newdocs entries, and make add_newdoc capable of adding docs also to normal Python objects.

==

numpy/add_newdocs.py
numpy/lib/function_base.py
numpy/lib/index_tricks.py
numpy/lib/src/_compiled_base.c
==================
33d79ed;David Cournapeau;2009-02-14 17:03:51 +0000;Include C99 math compatbility layer in multiarray - isnan and co needed by numpyos.c

==

numpy/core/src/multiarraymodule.c
==================
6429fa3;David Cournapeau;2009-02-14 15:03:22 +0000;Remove leftover in TestIO.

==

numpy/core/tests/test_multiarray.py
==================
5bc4aef;David Cournapeau;2009-02-14 15:02:39 +0000;Fix typo in multiarray tests.

==

numpy/core/tests/test_multiarray.py
==================
54f7334;David Cournapeau;2009-02-14 14:54:26 +0000;Merge fix_float_format branch into the trunk.

==
==================
cebdbb3;Stefan van der Walt;2009-02-12 05:44:07 +0000;Trust user's specification of MACOSX_DEPLOYMENT_TARGET [patch by Brian Granger].

==

numpy/distutils/fcompiler/gnu.py
==================
0672fd8;Travis Oliphant;2009-02-12 04:22:03 +0000;Add multiple-field access by making a copy of the array and filling with the selected fields.

==

numpy/core/_internal.py
numpy/core/src/arrayobject.c
numpy/core/tests/test_numerictypes.py
==================
2756254;pierregm;2009-02-11 01:51:28 +0000;* MaskedArray.__array_wrap__ : forces the domain (if any) to a ndarray (fill with True)

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
932368e;David Cournapeau;2009-02-10 10:44:01 +0000;Fix hyphen (patch from debian package).

==

numpy/f2py/f2py.1
==================
b3e5fdf;pierregm;2009-02-10 00:42:40 +0000;* prevent modifications to the mask to be back-propagated w/ __array_wrap__

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
114c5c6;Pauli Virtanen;2009-02-09 20:18:08 +0000;Fix #955: fix errobj leak in scalarmath floating point error handling

==

numpy/core/src/scalarmathmodule.c.src
numpy/core/tests/test_regression.py
==================
dab616f;pierregm;2009-02-07 18:51:31 +0000;

==

numpy/ma/tests/test_core.py
==================
c180e36;pierregm;2009-02-07 09:19:12 +0000;MaskedArray.resize : systematically raise a TypeError exception, as a masked array never owns its data MaskedIterator : fixed to allow .flat on masked matrices

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
b9086fd;Pearu Peterson;2009-02-06 14:38:57 +0000;Fix another bug, see last commit.

==

numpy/distutils/system_info.py
==================
219327a;Pearu Peterson;2009-02-06 14:36:58 +0000;Fix a bug: python system_info.py failed because _pkg_config_info defined section to be None.

==

numpy/distutils/system_info.py
==================
675c81d;Travis Oliphant;2009-02-06 06:31:11 +0000;Removed an unneccessary return statement in a unit test.

==

numpy/lib/tests/test_io.py
==================
0b0c3a1;Travis Oliphant;2009-02-06 06:25:50 +0000;Avoid re-creating the sequence when there is only one field in the regular expression.

==

numpy/lib/io.py
==================
71320b2;Pauli Virtanen;2009-02-06 00:51:41 +0000;doc: Move maskedarray docs upward in TOC

==

doc/source/reference/arrays.classes.rst
doc/source/reference/arrays.rst
doc/source/reference/maskedarray.rst
==================
d46fa57;Pauli Virtanen;2009-02-06 00:27:08 +0000;doc/numpydoc: work better together with Sphinx's  config option

==

doc/sphinxext/docscrape.py
doc/sphinxext/docscrape_sphinx.py
doc/sphinxext/numpydoc.py
==================
aeb090d;Alan McIntyre;2009-02-05 20:11:40 +0000;Issue #957: - Fix problems with test decorators when used on test generators. - The skip/fail arguments for skipif and knownfailureif can now be   either a bool or a callable that returns a bool. - Added tests for the test decorators.

==

numpy/testing/decorators.py
numpy/testing/tests/test_decorators.py
==================
911e94d;pierregm;2009-02-05 04:31:51 +0000;*  genfromtxt : Fixed when a dtype involving objects is explicitly given. Raise a NotImplementedError if the dtype is nested. * _iotools : make sure StringConverter gets properly initiated when a function returning a np.object is used as input parameter.

==

numpy/lib/_iotools.py
numpy/lib/io.py
numpy/lib/tests/test__iotools.py
numpy/lib/tests/test_io.py
==================
12750f7;pierregm;2009-02-04 21:53:05 +0000;test_upgrademapper : got rid of the dateutil import

==

numpy/lib/tests/test__iotools.py
==================
37beec6;pierregm;2009-02-04 20:52:36 +0000;* test__iotools : prevent test_upgrademapper if dateutil is not installed * MaskedArray.__rmul__ : switch to multiply(self, other)

==

numpy/lib/tests/test__iotools.py
numpy/ma/core.py
==================
8ab9363;pierregm;2009-02-03 17:11:44 +0000;* Make sure that StringConverter.update sets the type to object if it can't define it.

==

numpy/lib/_iotools.py
numpy/lib/tests/test_io.py
==================
f278427;pierregm;2009-02-02 05:20:17 +0000;* Added a 'autoconvert' option to stack_arrays. * Fixed 'stack_arrays' to work with fields with titles.

==

numpy/lib/recfunctions.py
numpy/lib/tests/test_recfunctions.py
==================
d3e84d6;Matthew Brett;2009-01-30 00:26:44 +0000;New docstrings for byteorder and newbyteorder()

==

numpy/add_newdocs.py
==================
f885786;pierregm;2009-01-27 02:46:26 +0000;* prevent MaskedBinaryOperation and DomainedBinaryOperation to shrink the mask of the output when at least one of the inputs has a mask full of False

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
2e346ec;pierregm;2009-01-26 21:04:26 +0000;* _iotools.StringConverter :     - add a _checked attribute to indicate whether the converter has been upgraded or not.     - switched the default value for bool to False * io.genfromtxt:     - fixed for the case where a whole column is masked: switch to bool or the common dtype (if needed)

==

numpy/lib/_iotools.py
numpy/lib/io.py
numpy/lib/tests/test_io.py
==================
9ac9630;David Cournapeau;2009-01-24 08:02:14 +0000;Fix compilation error on 2.4.

==

numpy/core/src/scalartypes.inc.src
==================
27ba720;pierregm;2009-01-22 18:21:32 +0000;* fixed a machine-dependent issue on default int ('<i4' on OS X, '<i8' on linux) ? * fixed an machine-dependent issue on argsort ?

==

numpy/lib/tests/test_recfunctions.py
==================
ed42220;pierregm;2009-01-22 05:40:25 +0000;* added recfunctions, a collection of utilities to manipulate structured arrays.

==

numpy/lib/recfunctions.py
numpy/lib/tests/test_recfunctions.py
==================
7adaad4;pierregm;2009-01-22 05:37:36 +0000;* genfromtxt : if names is True, accept a line starting with a comment character as header.

==

numpy/lib/io.py
numpy/lib/tests/test_io.py
==================
8bd6c70;pierregm;2009-01-19 21:22:52 +0000;* lib     : introduced _iotools * lib.io : introduced genfromtxt, ndfromtxt, mafromtxt, recfromtxt, recfromcsv.

==

numpy/lib/_iotools.py
numpy/lib/io.py
numpy/lib/tests/test__iotools.py
numpy/lib/tests/test_io.py
==================
065626f;pierregm;2009-01-19 09:04:20 +0000;* add intersect1d, intersect1d_nu, setdiff1d, setmember1d, setxor1d, unique1d, union1d * use np.atleast1d instead of ma.atleast1d

==

numpy/ma/extras.py
numpy/ma/tests/test_extras.py
==================
0061e18;pierregm;2009-01-19 09:01:24 +0000;* replace np.asarray by np.asanyarray in unique1d

==

numpy/lib/arraysetops.py
==================
767ea85;pierregm;2009-01-19 08:53:53 +0000;* renamed FlatIter to MaskedIterator * added __getitem__ to MaskedIterator

==

numpy/ma/core.py
==================
9efaa09;Pauli Virtanen;2009-01-17 21:24:13 +0000;Make `trapz` accept 1-D `x` parameter for n-d `y`, even if axis != -1.
Additional tests included.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
4b9c0f2;pierregm;2009-01-17 00:15:15 +0000;* fixed _arraymethod.__call__ for structured arrays

==

numpy/ma/core.py
==================
9837e02;Stefan van der Walt;2009-01-14 07:56:10 +0000;Fix finfo to work on all instances, not just NumPy scalars.

==

numpy/lib/getlimits.py
numpy/lib/tests/test_getlimits.py
==================
1775a59;Stefan van der Walt;2009-01-14 07:55:16 +0000;Fix printing of limits.

==

numpy/lib/getlimits.py
==================
2d1f2e0;Stefan van der Walt;2009-01-14 07:14:27 +0000;Docstring: remove old floating point arithmetic, parallel execution and postponed import references.

==

numpy/lib/info.py
==================
6b633fa;pierregm;2009-01-13 21:01:58 +0000;numpy.ma.core: * introduced baseclass, sharedmask and hardmask as readonly properties of MaskedArray * docstrings update
numpy.ma.extras:
* docstring updates

docs/reference
* introduced maskedarray, maskedarray.baseclass, maskedarray.generic

==

doc/source/reference/arrays.classes.rst
doc/source/reference/arrays.ndarray.rst
doc/source/reference/maskedarray.baseclass.rst
doc/source/reference/maskedarray.generic.rst
doc/source/reference/maskedarray.rst
numpy/ma/core.py
numpy/ma/extras.py
==================
ca6baf9;Pauli Virtanen;2009-01-12 21:25:53 +0000;Initialize a variable properly

==

numpy/core/src/numpyos.c
==================
2dd3ad5;Pauli Virtanen;2009-01-12 21:22:51 +0000;Recognize POSIX nan/inf representations in NumPyOS_strtod.
Collect some NaN and Inf constants to a single place.

==

numpy/core/setup.py
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
numpy/core/src/npy_format.c
numpy/core/src/numpyos.c
numpy/core/src/scalartypes.inc.src
==================
8f9ab09;Pauli Virtanen;2009-01-12 21:22:24 +0000;More tests for fromstring, fromfile, tostring, tofile.

==

numpy/core/tests/test_multiarray.py
numpy/core/tests/test_print.py
==================
7119408;pierregm;2009-01-10 01:53:05 +0000;* Add flatten_structured_array to the namespace

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
7dfb0e6;pierregm;2009-01-09 20:18:12 +0000;* Added flatten_structured_arrays * Fixed _get_recordarray for nested structures

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
fbf902c;Jarrod Millman;2009-01-09 19:37:16 +0000;can't use append an int to a string

==

numpy/distutils/system_info.py
==================
aef4882;Jarrod Millman;2009-01-09 10:18:29 +0000;removed unneeded import

==

numpy/distutils/system_info.py
==================
84ef295;Jarrod Millman;2009-01-09 10:02:09 +0000;switch the order [lib,lib64] --> [lib64,lib]

==

numpy/distutils/system_info.py
==================
ac3523b;Jarrod Millman;2009-01-09 09:57:15 +0000;simplification suggested by stefan

==

numpy/distutils/system_info.py
==================
ff368ca;Jarrod Millman;2009-01-09 09:14:17 +0000;better default library paths for 64bit arch

==

numpy/distutils/system_info.py
==================
422c1cb;Jarrod Millman;2009-01-09 08:59:29 +0000;should be more reliable way to determine what bit platform

==

numpy/distutils/system_info.py
==================
49008ba;David Cournapeau;2009-01-09 05:26:58 +0000;Tag formatting unit tests as known failures.

==

numpy/core/tests/test_print.py
==================
efe5b58;Jarrod Millman;2009-01-09 02:14:35 +0000;Updated license file

==

LICENSE.txt
==================
b374b05;pierregm;2009-01-08 21:51:04 +0000;* Remove a debugging print statement.

==

numpy/ma/core.py
==================
a5da87c;pierregm;2009-01-08 20:02:29 +0000;* Add __eq__ and __ne__ for support of flexible arrays. * Fixed .filled for nested structures

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
99f428e;David Cournapeau;2009-01-08 19:22:21 +0000;Revert buggy test fix for locale independecce.

==

numpy/core/tests/test_print.py
==================
a5ca79d;chanley;2009-01-08 16:30:01 +0000;Fix test_print.py function _test_locale_independance() since str(1.2) does not use the LC_NUMERIC locale to convert numbers.  Fix from Mark Sienkiewicz.

==

numpy/core/tests/test_print.py
==================
c261e48;David Cournapeau;2009-01-08 15:11:32 +0000;Fix python 2.4 issue.

==

numpy/core/tests/test_print.py
==================
aa423d9;David Cournapeau;2009-01-08 09:19:00 +0000;Avoid putting things into stderr when errors occurs in f2py wrappers; put all the info in the python error string instead.

==

numpy/f2py/cfuncs.py
==================
d94861c;pierregm;2009-01-07 22:34:51 +0000;* Renamed `torecords` to `toflex`, keeping `torecords` as an alias * Introduced `fromflex`, to reconstruct a masked_array from the output of `toflex` (can’t `use fromrecords` as it would clash with `numpy.ma.mrecords.fromrecords`) * Fixed a bug in MaskedBinaryOperation (#979) (wrong array broadcasting)

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
949fe03;pierregm;2009-01-07 18:14:12 +0000;* Fixed iadd/isub/imul when the base array has no mask but the other array does

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
c5137ea;pierregm;2009-01-06 20:35:37 +0000;* Bugfix #961

==

numpy/ma/core.py
==================
4ec7a62;Stefan van der Walt;2009-01-06 10:09:00 +0000;Use new-style classes with multiple-inheritance to address bug in IronPython.

==

numpy/core/tests/test_numerictypes.py
numpy/core/tests/test_unicode.py
numpy/lib/tests/test_io.py
numpy/linalg/tests/test_linalg.py
==================
70c84a8;pierregm;2009-01-05 22:52:21 +0000;*moved the printing templates out of MaskedArray.__repr__

==

numpy/ma/core.py
==================
c6073c1;Stefan van der Walt;2009-01-05 21:51:18 +0000;Credit more developers.

==

THANKS.txt
==================
0d76f63;pierregm;2009-01-04 20:16:00 +0000;* adapted default_fill_value for flexible datatype * fixed max/minimum_fill_value for flexible datatype

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
6458485;David Cournapeau;2009-01-04 12:03:29 +0000;Revert md5 change: hashlib.md5 is not a drop-in replacement for md5.

==

numpy/core/code_generators/genapi.py
==================
f5afa78;David Cournapeau;2009-01-04 11:08:16 +0000;Do not use popen* but subprocess.Popen instead.

==

numpy/distutils/lib2def.py
numpy/distutils/mingw32ccompiler.py
numpy/distutils/misc_util.py
==================
1bd6b58;David Cournapeau;2009-01-04 10:57:39 +0000;Do not import md5 on python >= 2.6; use hashlib instead.

==

numpy/core/code_generators/genapi.py
==================
9fb2c30;David Cournapeau;2009-01-01 09:28:16 +0000;Do not use strncpy but strcpy: we know the string sizes, and strncpy sucks anyway.

==

numpy/core/src/npy_format.c
==================
cd308e4;David Cournapeau;2009-01-01 09:26:43 +0000;Remove some tabs.

==

numpy/core/src/npy_format.c
==================
f838125;Jarrod Millman;2009-01-01 07:56:53 +0000;add default include dir for Fedora/Red Hat (see SciPy ticket 817)

==

numpy/distutils/system_info.py
==================
99d8b6a;Alan McIntyre;2008-12-31 23:46:34 +0000;Remove the following deprecated items from numpy.testing:
- ParametricTestCase 
- The following arguments from numpy.testing.Tester.test(): level, 
verbosity, 
  all, sys_argv, testcase_pattern
- Path manipulation functions: set_package_path, set_local_path, 
restore_path
- NumpyTestCase, NumpyTest

Also separated testing parameter setup from NoseTester.test into 
NoseTester.prepare_test_args for use in a utility script for valgrind 
testing (see NumPy ticket #784).


==

numpy/ctypeslib.py
numpy/testing/__init__.py
numpy/testing/noseclasses.py
numpy/testing/nosetester.py
numpy/testing/numpytest.py
numpy/testing/parametric.py
==================
8c448a3;Jarrod Millman;2008-12-31 23:25:03 +0000;ran reindent

==

numpy/core/setup.py
numpy/core/tests/test_multiarray.py
numpy/distutils/command/config.py
numpy/distutils/fcompiler/gnu.py
numpy/distutils/mingw32ccompiler.py
numpy/f2py/f2py2e.py
numpy/lib/function_base.py
numpy/lib/utils.py
numpy/linalg/linalg.py
numpy/ma/core.py
numpy/ma/mrecords.py
numpy/ma/tests/test_core.py
numpy/ma/tests/test_extras.py
numpy/ma/tests/test_subclassing.py
numpy/numarray/util.py
numpy/oldnumeric/arrayfns.py
numpy/oldnumeric/mlab.py
numpy/oldnumeric/rng.py
numpy/testing/decorators.py
numpy/testing/noseclasses.py
==================
1bb5bb5;Pauli Virtanen;2008-12-31 01:14:47 +0000;Fix #951: make tests to clean temp files properly

==

numpy/core/tests/test_memmap.py
numpy/core/tests/test_multiarray.py
==================
d1bb819;Pauli Virtanen;2008-12-30 22:40:57 +0000;Rewrite NumPyOS_ascii_strtod to not assume that the 'foreign' decimal point is ','

==

numpy/core/src/npy_format.c
==================
6402521;Pauli Virtanen;2008-12-30 21:39:23 +0000;Reindent and pep-7ize npy_format.c

==

numpy/core/src/npy_format.c
==================
0ae0cb5;Pauli Virtanen;2008-12-30 21:14:04 +0000;Speed up NumPyOS_ascii_strtod

==

numpy/core/src/npy_format.c
==================
8b4e9ab;Pauli Virtanen;2008-12-30 20:37:30 +0000;Implement NumPyOS_ascii_strtod to work around a bug in PyOS_ascii_strtod. Use it to make fromstring properly locale-independent.

==

numpy/core/src/arraytypes.inc.src
numpy/core/src/npy_format.c
==================
87d1c9c;Pauli Virtanen;2008-12-30 20:37:05 +0000;Implement NumPyOS_ascii_ftof, and use it instead of fscanf to make fromfile locale-independent

==

numpy/core/src/arraytypes.inc.src
numpy/core/src/npy_format.c
==================
9b2917c;Pauli Virtanen;2008-12-30 20:36:07 +0000;Improve fromfile/fromstring test coverage, and add tests to check locale-independency

==

numpy/core/tests/test_multiarray.py
numpy/core/tests/test_print.py
==================
a5c139c;David Cournapeau;2008-12-30 07:10:04 +0000;Fix conditional for min number of digits in exponent for float formatting.

==

numpy/core/src/npy_format.c
==================
a90b4b2;David Cournapeau;2008-12-30 06:50:42 +0000;Use reference for inf/nan.

==

numpy/core/tests/test_print.py
==================
e487e29;David Cournapeau;2008-12-30 06:43:02 +0000;Fix single precision complex/real redirected print tests.

==

numpy/core/tests/test_print.py
==================
a41f1ae;David Cournapeau;2008-12-30 06:38:29 +0000;Fix complex reference.

==

numpy/core/tests/test_print.py
==================
d7b5be1;David Cournapeau;2008-12-30 06:35:00 +0000;Merged revisions 6271 via svnmerge from http://svn.scipy.org/svn/numpy/trunk
........
  r6271 | cdavid | 2008-12-30 15:32:03 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Do not use dict for reference: hashing on scalar arrays does not work as I expected.
........

==
==================
e69b591;David Cournapeau;2008-12-30 06:32:03 +0000;Do not use dict for reference: hashing on scalar arrays does not work as I expected.

==

numpy/core/tests/test_print.py
==================
cebec22;David Cournapeau;2008-12-30 06:28:22 +0000;Merged revisions 6268 via svnmerge from http://svn.scipy.org/svn/numpy/trunk
........
  r6268 | cdavid | 2008-12-30 15:12:26 +0900 (Tue, 30 Dec 2008) | 1 line
  
  complex scalar arrays cannot be created from real/imag args: wrap init values in a complex.
........

==
==================
778d336;David Cournapeau;2008-12-30 06:12:51 +0000;Merged revisions 6266 via svnmerge from http://svn.scipy.org/svn/numpy/trunk
........
  r6266 | cdavid | 2008-12-30 15:08:06 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Fix typo.
........

==
==================
0fb51ad;David Cournapeau;2008-12-30 06:12:26 +0000;complex scalar arrays cannot be created from real/imag args: wrap init values in a complex.

==

numpy/core/tests/test_print.py
==================
e0114e3;David Cournapeau;2008-12-30 06:08:15 +0000;Merged revisions 6265 via svnmerge from http://svn.scipy.org/svn/numpy/trunk
........
  r6265 | cdavid | 2008-12-30 15:03:56 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Fix typo.
........

==
==================
858e4e9;David Cournapeau;2008-12-30 06:08:06 +0000;Fix typo.

==

numpy/core/tests/test_print.py
==================
45b829b;David Cournapeau;2008-12-30 06:03:56 +0000;Fix typo.

==

numpy/core/tests/test_print.py
==================
27b0df0;David Cournapeau;2008-12-30 06:03:04 +0000;Merged revisions 6263 via svnmerge from http://svn.scipy.org/svn/numpy/trunk
........
  r6263 | cdavid | 2008-12-30 15:01:31 +0900 (Tue, 30 Dec 2008) | 1 line
  
  More fixes for print tests.
........

==
==================
ddf0d0d;David Cournapeau;2008-12-30 06:01:31 +0000;More fixes for print tests.

==

numpy/core/tests/test_print.py
==================
2932672;David Cournapeau;2008-12-30 05:54:33 +0000;Merged revisions 6260-6261 via svnmerge from http://svn.scipy.org/svn/numpy/trunk
........
  r6260 | cdavid | 2008-12-30 14:50:18 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Fix more formatting tests on win32.
........
  r6261 | cdavid | 2008-12-30 14:52:16 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Fix some more redirected output print tests.
........

==
==================
459125b;David Cournapeau;2008-12-30 05:52:16 +0000;Fix some more redirected output print tests.

==

numpy/core/tests/test_print.py
==================
733feab;David Cournapeau;2008-12-30 05:50:18 +0000;Fix more formatting tests on win32.

==

numpy/core/tests/test_print.py
==================
ab58d5e;David Cournapeau;2008-12-30 05:43:17 +0000;Merged revisions 6258 via svnmerge from http://svn.scipy.org/svn/numpy/trunk
........
  r6258 | cdavid | 2008-12-30 14:42:03 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Hardcode reference for inf/nan-involved values.
........

==
==================
c1c497b;David Cournapeau;2008-12-30 05:42:03 +0000;Hardcode reference for inf/nan-involved values.

==

numpy/core/tests/test_print.py
==================
5e3b3d2;David Cournapeau;2008-12-30 05:36:00 +0000;Merged revisions 6256 via svnmerge from http://svn.scipy.org/svn/numpy/trunk
........
  r6256 | cdavid | 2008-12-30 14:34:22 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Special case float tests on windows: python 2.5 and below have >=3 digits in the exp.
........

==
==================
02b0f19;David Cournapeau;2008-12-30 05:34:22 +0000;Special case float tests on windows: python 2.5 and below have >=3 digits in the exp.

==

numpy/core/tests/test_print.py
==================
044d8a3;David Cournapeau;2008-12-30 05:24:11 +0000;Force at least 3 digits for the exponent on windows and python < 2.6.

==

numpy/core/src/npy_format.c
==================
04cc210;David Cournapeau;2008-12-30 05:16:42 +0000;Merged revisions 6253 via svnmerge from http://svn.scipy.org/svn/numpy/trunk
........
  r6253 | cdavid | 2008-12-30 14:15:09 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Fix typo in test.
........

==
==================
90ebbb8;David Cournapeau;2008-12-30 05:15:09 +0000;Fix typo in test.

==

numpy/core/tests/test_print.py
==================
35e9bb4;David Cournapeau;2008-12-30 05:14:08 +0000;Merged revisions 6251 via svnmerge from http://svn.scipy.org/svn/numpy/trunk
........
  r6251 | cdavid | 2008-12-30 14:12:50 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Use np.inf instead of float('inf'), as the later does not work on windows for python < 2.6.
........

==
==================
a4a94b1;David Cournapeau;2008-12-30 05:12:50 +0000;Use np.inf instead of float('inf'), as the later does not work on windows for python < 2.6.

==

numpy/core/tests/test_print.py
==================
60f2621;David Cournapeau;2008-12-30 05:02:28 +0000;Merged revisions 6247-6249 via svnmerge from http://svn.scipy.org/svn/numpy/branches/fix_float_format
........
  r6247 | cdavid | 2008-12-30 13:41:37 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Handle 1e10 specially, as it is the limit where exp notation is shorter than decimal for single precision, but not for double (python native one).
........
  r6248 | cdavid | 2008-12-30 13:47:38 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Refactor a bit redirected output print test.
........
  r6249 | cdavid | 2008-12-30 13:49:31 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Fix test for single precision print.
........

==
==================
31b6cdf;David Cournapeau;2008-12-30 04:49:31 +0000;Fix test for single precision print.

==

numpy/core/tests/test_print.py
==================
3e0e21c;David Cournapeau;2008-12-30 04:47:38 +0000;Refactor a bit redirected output print test.

==

numpy/core/tests/test_print.py
==================
090bb80;David Cournapeau;2008-12-30 04:41:37 +0000;Handle 1e10 specially, as it is the limit where exp notation is shorter than decimal for single precision, but not for double (python native one).

==

numpy/core/tests/test_print.py
==================
d8e1882;David Cournapeau;2008-12-30 04:25:14 +0000;Enable the tp_print function for float and complex types.

==

numpy/core/src/scalartypes.inc.src
==================
4556166;David Cournapeau;2008-12-30 04:23:30 +0000;Merged revisions 6244 via svnmerge from http://svn.scipy.org/svn/numpy/trunk
........
  r6244 | cdavid | 2008-12-30 13:20:48 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Fix test for print: forgot to make sure the value is a float before comparing it.
........

==
==================
9c604cf;David Cournapeau;2008-12-30 04:20:48 +0000;Fix test for print: forgot to make sure the value is a float before comparing it.

==

numpy/core/tests/test_print.py
==================
b85b457;David Cournapeau;2008-12-30 04:04:47 +0000;Merged revisions 6240-6241 via svnmerge from http://svn.scipy.org/svn/numpy/trunk
........
  r6240 | cdavid | 2008-12-30 12:48:11 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Add tests for print of float types.
........
  r6241 | cdavid | 2008-12-30 12:56:54 +0900 (Tue, 30 Dec 2008) | 1 line
  
  Add print tests for complex types.
........

==
==================
f6f9ac0;David Cournapeau;2008-12-30 03:57:33 +0000;Start working on tp_print implementation for scalar types: add the C functions.

==

numpy/core/src/scalartypes.inc.src
==================
ffbeb6e;David Cournapeau;2008-12-30 03:56:54 +0000;Add print tests for complex types.

==

numpy/core/tests/test_print.py
==================
f66bcae;David Cournapeau;2008-12-30 03:48:11 +0000;Add tests for print of float types.

==

numpy/core/tests/test_print.py
==================
2fcb366;David Cournapeau;2008-12-30 03:19:53 +0000;Merged revisions 6236-6238 via svnmerge from http://svn.scipy.org/svn/numpy/trunk
........
  r6236 | cdavid | 2008-12-29 17:02:15 +0900 (Mon, 29 Dec 2008) | 1 line
  
  Add nan/inf tests for formatting.
........
  r6237 | cdavid | 2008-12-29 17:26:04 +0900 (Mon, 29 Dec 2008) | 1 line
  
  Add test for real float types locale independance.
........
  r6238 | cdavid | 2008-12-29 17:35:06 +0900 (Mon, 29 Dec 2008) | 1 line
  
  Clearer error messages for formatting failures.
........

==
==================
6ffe6c5;David Cournapeau;2008-12-29 08:35:06 +0000;Clearer error messages for formatting failures.

==

numpy/core/tests/test_print.py
==================
b90bfef;David Cournapeau;2008-12-29 08:26:04 +0000;Add test for real float types locale independance.

==

numpy/core/tests/test_print.py
==================
6ef22b4;David Cournapeau;2008-12-29 08:02:15 +0000;Add nan/inf tests for formatting.

==

numpy/core/tests/test_print.py
==================
360b8a1;David Cournapeau;2008-12-29 07:57:52 +0000;Merged revisions 6233-6234 via svnmerge from http://svn.scipy.org/svn/numpy/branches/fix_float_format
........
  r6233 | cdavid | 2008-12-29 12:49:09 +0900 (Mon, 29 Dec 2008) | 1 line
  
  Use parametric tests for format tests so that it is clearer which type is failing.
........
  r6234 | cdavid | 2008-12-29 12:49:27 +0900 (Mon, 29 Dec 2008) | 1 line
  
  Fix formatting tests: cfloat and cdouble as well as np.float and np.double are the same; make sure we test 4 bytes float.
........

==
==================
73a375a;David Cournapeau;2008-12-29 03:49:27 +0000;Fix formatting tests: cfloat and cdouble as well as np.float and np.double are the same; make sure we test 4 bytes float.

==

numpy/core/tests/test_print.py
==================
6136fc2;David Cournapeau;2008-12-29 03:49:09 +0000;Use parametric tests for format tests so that it is clearer which type is failing.

==

numpy/core/tests/test_print.py
==================
c99ef11;David Cournapeau;2008-12-29 03:23:59 +0000;Remove unused macros.

==

numpy/core/src/scalartypes.inc.src
==================
cfc5619;David Cournapeau;2008-12-29 03:23:43 +0000;    Use double format string for long double if necessary in scalar types repr/str.

==

numpy/core/src/scalartypes.inc.src
==================
9d18572;David Cournapeau;2008-12-29 03:23:25 +0000;    Modify NumPyOS_ascii_format* macro so that a cast to a different type than input value can be forced if necessary.

==

numpy/core/src/npy_format.c
==================
af03484;David Cournapeau;2008-12-29 03:22:35 +0000;    Define FORCE_NO_LONG_DOUBLE_FORMATTING on win32.

==

numpy/core/SConscript
numpy/core/setup.py
==================
c2c210a;David Cournapeau;2008-12-29 03:22:02 +0000;    Fix usage of NumPyOS_ascii_format* in scalar array repr/str methods.

==

numpy/core/src/scalartypes.inc.src
==================
cad683e;David Cournapeau;2008-12-29 03:21:33 +0000;Improve NumPyOS_ascii_format: handle nan and inf.

==

numpy/core/src/npy_format.c
==================
0ef7e96;David Cournapeau;2008-12-29 03:21:03 +0000;Forgot to add npy_format.c.

==

numpy/core/src/npy_format.c
==================
7692d78;David Cournapeau;2008-12-29 03:20:38 +0000;Use custom formatting functions.

==

numpy/core/setup.py
numpy/core/src/scalartypes.inc.src
==================
ef8690c;David Cournapeau;2008-12-28 06:44:06 +0000;Do not add doc sources through add_data_dir: it will put the docs alongside numpy, as a separate package, which is not what we want. Use the manifest instead, since that's the only way I know of to include something in sdist-generated tarballs.

==

MANIFEST.in
setup.py
==================
69bf862;David Cournapeau;2008-12-28 03:18:20 +0000;Revert formatting changes: ascii_formatd only works for double, so we can't use it as it is for our formatting needs.

==

numpy/core/setup.py
numpy/core/src/multiarraymodule.c
numpy/core/src/scalartypes.inc.src
==================
8a7a6c9;David Cournapeau;2008-12-27 17:25:50 +0000;Use ugly hack for mingw long double pb with complex format function as well.

==

numpy/core/src/scalartypes.inc.src
==================
3b31043;David Cournapeau;2008-12-27 17:19:40 +0000;Try ugly hack to circumvent long double brokenness with mingw.

==

numpy/core/src/scalartypes.inc.src
==================
bdbebc1;David Cournapeau;2008-12-27 16:33:40 +0000;Do not use PyOS_ascii_formatd, as it does not handle long double correctly.

==

numpy/core/src/scalartypes.inc.src
==================
b9d034d;David Cournapeau;2008-12-27 16:17:27 +0000;Remove undef of removed macro.

==

numpy/core/src/scalartypes.inc.src
==================
0473e28;David Cournapeau;2008-12-27 16:16:52 +0000;More formatting fixes.

==

numpy/core/src/scalartypes.inc.src
==================
4707fd2;David Cournapeau;2008-12-27 16:16:18 +0000;Do not define FMTR and FMTI macros, as those are already defined on some platforms.

==

numpy/core/src/scalartypes.inc.src
==================
b74dbac;David Cournapeau;2008-12-27 16:15:41 +0000;Fix formatting.

==

numpy/core/src/scalartypes.inc.src
==================
fae7d72;David Cournapeau;2008-12-27 16:15:04 +0000;Include config.h before our C99 math compat layer.

==

numpy/core/src/multiarraymodule.c
==================
c8a510b;David Cournapeau;2008-12-27 15:12:20 +0000;Include umath_funcs_c99 in multiarray so that we can use isinf and co macros.

==

numpy/core/setup.py
numpy/core/src/multiarraymodule.c
==================
4d1189a;David Cournapeau;2008-12-27 14:59:41 +0000;Finish formatting fixes for float scalar arrays.

==

numpy/core/src/scalartypes.inc.src
==================
5fd2b19;David Cournapeau;2008-12-27 14:53:15 +0000;More work on formatting float.

==

numpy/core/src/scalartypes.inc.src
==================
efe79fb;David Cournapeau;2008-12-27 14:44:11 +0000;Fix formatting for purely imaginary complex numbers.

==

numpy/core/src/scalartypes.inc.src
==================
050246e;David Cournapeau;2008-12-27 13:48:52 +0000;Start working on formatting failure on 2.6: copy how python does complex formatting.

==

numpy/core/src/scalartypes.inc.src
==================
cc61130;David Cournapeau;2008-12-27 12:18:47 +0000;Do not define the union for runtime endianness detection if we don't check endianness.

==

numpy/core/code_generators/generate_numpy_api.py
==================
9c869d6;David Cournapeau;2008-12-27 11:46:08 +0000;BUG (#827): close temp file before reopning them on windows, and make sure they are not automatically deleted on close either (2.6and higher specific).

==

numpy/lib/tests/test_io.py
==================
4e99df6;David Cournapeau;2008-12-27 10:57:05 +0000;Fix manifest generation.

==

numpy/distutils/mingw32ccompiler.py
==================
4251fe7;David Cournapeau;2008-12-27 10:43:41 +0000;BUG (#970): this commit should fix the actual bug, which albeeit linked to commir r6200, was caused in anoter code path.

==

numpy/distutils/fcompiler/compaq.py
==================
cdc45ed;David Cournapeau;2008-12-27 10:32:05 +0000;Try to initialize the msvc compiler before the general code to detect the error early.

==

numpy/distutils/command/config.py
==================
7b811f8;David Cournapeau;2008-12-27 10:30:49 +0000;Improve the error message when initializing compiler failed.

==

numpy/distutils/command/config.py
==================
6bbab81;David Cournapeau;2008-12-27 10:15:30 +0000;BUG (#970): fix a python 2.6 bug in distutils which caused an unhelpful Error:None message when trying to build with no VS installed and without the -c mingw32 option.

==

numpy/distutils/command/config.py
==================
6cadd13;David Cournapeau;2008-12-27 10:06:25 +0000;Fix some typo/syntax errors when converting dict access to a function in manifest generation.

==

numpy/distutils/mingw32ccompiler.py
==================
7d1612d;David Cournapeau;2008-12-27 05:56:58 +0000;BUG: Add a runtime check about endianness, to detect bug 4728 in python on Mac OS X.

==

numpy/core/code_generators/generate_numpy_api.py
==================
ae88804;David Cournapeau;2008-12-26 14:39:55 +0000;Do not test for functions already tested by python configure script.

==

numpy/core/setup.py
==================
a97ea4a;David Cournapeau;2008-12-26 12:36:19 +0000;Do not import msvcrt globally in mingw32compiler module, since the module is imported on all platforms.

==

numpy/distutils/mingw32ccompiler.py
==================
3f82799;David Cournapeau;2008-12-26 12:16:45 +0000;Update to handle numscons 0.10.0 and above.

==

numpy/distutils/command/scons.py
==================
8e77ab8;pierregm;2008-12-23 23:43:43 +0000;testutils: * assert_equal : use assert_equal_array on records * assert_array_compare : prevent the common mask to be back-propagated to the initial input arrays. * assert_equal_array : use operator.__eq__ instead of ma.equal * assert_equal_less: use operator.__less__ instead of ma.less
core:
* Fixed _check_fill_value for nested flexible types
* Add a ndtype option to _make_mask_descr
* Fixed mask_or for nested flexible types
* Fixed the printing of masked arrays w/ flexible types.

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
numpy/ma/tests/test_mrecords.py
numpy/ma/testutils.py
==================
ed916ff;Pearu Peterson;2008-12-23 09:02:15 +0000;Fix issue 964: f2py python 2.6, 2.6.1 support.

==

numpy/f2py/rules.py
==================
31c520d;David Cournapeau;2008-12-23 04:11:12 +0000;Use msvcrt values if available for manifest generation: only there starting from python 2.6.1.

==

numpy/distutils/mingw32ccompiler.py
==================
b5bb360;David Cournapeau;2008-12-23 04:10:59 +0000;Fix typos in the comments for manifest.

==

numpy/distutils/mingw32ccompiler.py
==================
0eb6e82;David Cournapeau;2008-12-23 03:51:56 +0000;Fix cpuarch.h macros.

==

numpy/core/include/numpy/cpuarch.h
numpy/core/include/numpy/npy_endian.h
==================
83c5d6d;David Cournapeau;2008-12-23 03:51:39 +0000;Do not use WORDS_BIGENDIAN anymore in numpy, use NPY_BIG_ENDIAN instead.

==

numpy/core/src/_signbit.c
==================
d10d563;David Cournapeau;2008-12-22 13:23:03 +0000;Merged revisions 6108,6110,6112-6127,6129-6134,6136-6138,6140-6149,6174-6175,6179-6182,6185-6187 via svnmerge from http://svn.scipy.org/svn/numpy/trunk
........
  r6108 | pierregm | 2008-11-26 11:13:57 +0900 (Wed, 26 Nov 2008) | 3 lines
  
  * added ma.diag
  * added copy, cumprod, cumsum, harden_mask, prod, round, soften_mask, squeeze to the namespace
  * TEMPORARILY fixed a pb of compatibility with python 2.6 (involvingin(np.nan))
........
  r6110 | pierregm | 2008-11-27 13:29:43 +0900 (Thu, 27 Nov 2008) | 5 lines
  
  * Added get_object_signature to fix missing signatures
  * Fixed .getdoc from _arraymethod, _frommethod, _convert2ma, _fromnxfunction
  * Fixed the docstrings of .trace, .mean, .argsort, .sort
  * Suppressed duplicated conjugate, ptp, round, expand_dims, apply_along_axis, compress_rowcols, mask_rowcols, vander, polyfit
........
  r6112 | pierregm | 2008-11-27 15:56:12 +0900 (Thu, 27 Nov 2008) | 1 line
  
  Doc update
........
  r6113 | jarrod.millman | 2008-11-27 19:58:51 +0900 (Thu, 27 Nov 2008) | 2 lines
  
  add release notes for 1.3
........
  r6114 | ptvirtan | 2008-11-28 05:26:04 +0900 (Fri, 28 Nov 2008) | 1 line
  
  doc: include release notes to Sphinx build
........
  r6115 | charris | 2008-11-28 12:52:16 +0900 (Fri, 28 Nov 2008) | 2 lines
  
  Make numpy version of atanh more robust.
  Numpy log1p still needs a major overhaul.
........
  r6116 | charris | 2008-11-28 14:34:33 +0900 (Fri, 28 Nov 2008) | 5 lines
  
  Add preliminary docstrings for:
  log2, exp2, logaddexp, logaddexp2, rad2deg, deg2rad.
  
  The complete docstring for fmin and fmax are on the web but
  haven't yet been merged.
........
  r6117 | cdavid | 2008-11-29 01:47:34 +0900 (Sat, 29 Nov 2008) | 1 line
  
  Fix typo in core scons script.
........
  r6118 | cdavid | 2008-11-29 01:50:08 +0900 (Sat, 29 Nov 2008) | 1 line
  
  Anoter typo on core scons script.
........
  r6119 | stefan | 2008-11-29 21:07:07 +0900 (Sat, 29 Nov 2008) | 1 line
  
  Add memory map support to `load` [patch by Gael Varoquaux].  Closes #954.
........
  r6120 | stefan | 2008-11-29 21:07:54 +0900 (Sat, 29 Nov 2008) | 1 line
  
  Add test for load's mmap_mode.
........
  r6121 | stefan | 2008-11-29 21:08:29 +0900 (Sat, 29 Nov 2008) | 1 line
  
  Opening a memmap requires a filename.  Raise an error otherwise.
........
  r6122 | stefan | 2008-11-29 21:09:07 +0900 (Sat, 29 Nov 2008) | 1 line
  
  Reformat spacing in io tests.
........
  r6123 | stefan | 2008-11-29 23:53:44 +0900 (Sat, 29 Nov 2008) | 1 line
  
  Identify file object using 'readline', rather than 'seek'.
........
  r6124 | stefan | 2008-11-29 23:54:29 +0900 (Sat, 29 Nov 2008) | 1 line
  
  Add bz2 support to loadtxt [patch by Ryan May].
........
  r6125 | ptvirtan | 2008-11-30 23:44:38 +0900 (Sun, 30 Nov 2008) | 1 line
  
  Move Sphinx extensions under Numpy's SVN trunk
........
  r6126 | ptvirtan | 2008-12-01 00:08:38 +0900 (Mon, 01 Dec 2008) | 1 line
  
  Rename core/.../docstrings.py to ufunc_docstrings.py
........
  r6127 | pierregm | 2008-12-01 18:45:51 +0900 (Mon, 01 Dec 2008) | 1 line
  
  Fixed make_mask_descr for nested dtypes
........
  r6129 | pierregm | 2008-12-02 02:56:58 +0900 (Tue, 02 Dec 2008) | 2 lines
  
  * added flatten_mask to collapse masks w/ (nested) flexible types.
  * fixed __getitem__ on arrays w/ nested dtype
........
  r6130 | pierregm | 2008-12-02 11:40:22 +0900 (Tue, 02 Dec 2008) | 3 lines
  
  * Fixed MaskedArray for nested dtype w/ input mask
  * Fixed masked_all for nested dtype
  * Fixed masked_all_like for nested dtype
........
  r6131 | pierregm | 2008-12-02 17:50:11 +0900 (Tue, 02 Dec 2008) | 1 line
  
  * Fixed make_mask_descr for dtype w/ composite names, like [(('A','B'), float)]
........
  r6132 | pierregm | 2008-12-03 03:42:12 +0900 (Wed, 03 Dec 2008) | 1 line
  
  * Cleaned up make_mask_descr 
........
  r6133 | ptvirtan | 2008-12-04 06:52:36 +0900 (Thu, 04 Dec 2008) | 1 line
  
  Refactor plot:: directive somewhat
........
  r6134 | ptvirtan | 2008-12-04 07:15:51 +0900 (Thu, 04 Dec 2008) | 1 line
  
  sphinxext: fix a small bug in plot directive
........
  r6136 | cdavid | 2008-12-04 12:21:51 +0900 (Thu, 04 Dec 2008) | 1 line
  
  Add /arch option to superpack installer to override detected arch.
........
  r6137 | ptvirtan | 2008-12-05 08:06:29 +0900 (Fri, 05 Dec 2008) | 1 line
  
  sphinxext: support autosummary:: directives in automodule docstrings
........
  r6138 | pierregm | 2008-12-06 05:40:44 +0900 (Sat, 06 Dec 2008) | 2 lines
  
  * Added MaskError
  * If a bool or int ndarray is given as the explicit output of var/min/max, an exception is raised if the function should have output np.nan
........
  r6140 | ptvirtan | 2008-12-14 01:18:04 +0900 (Sun, 14 Dec 2008) | 1 line
  
  Get lstsq and eigvals from numpy.linalg, not from numpy.dual. Addresses Scipy ticket #800
........
  r6141 | ptvirtan | 2008-12-14 06:02:05 +0900 (Sun, 14 Dec 2008) | 12 lines
  
  docs: fix minor issues, support htmlhelp.
  
  - Don't use :members: in automodule; it generates too much
    and not very useful output
  
  - Fix edit links and summarize.py
  
  - Add better htmlhelp build target
  
  - Add upload target
  
  - Fix permissions on make dist
........
  r6142 | jarrod.millman | 2008-12-14 19:32:51 +0900 (Sun, 14 Dec 2008) | 2 lines
  
  wordsmithing
........
  r6143 | jarrod.millman | 2008-12-16 20:21:52 +0900 (Tue, 16 Dec 2008) | 2 lines
  
  added missing THANKS for Alan's testing work this summer
........
  r6144 | cdavid | 2008-12-17 03:04:24 +0900 (Wed, 17 Dec 2008) | 1 line
  
  BUG: Do not harcode fortran runtime when copying it on windows. Should fix #969.
........
  r6145 | cdavid | 2008-12-17 03:26:13 +0900 (Wed, 17 Dec 2008) | 1 line
  
  Add a function to get configured target for gfortran.
........
  r6146 | cdavid | 2008-12-17 03:32:41 +0900 (Wed, 17 Dec 2008) | 1 line
  
  Fix get_target.
........
  r6147 | cdavid | 2008-12-17 03:41:32 +0900 (Wed, 17 Dec 2008) | 1 line
  
  Add target specific lib dir for gfortran on windows when msvc is the C compiler.
........
  r6148 | cdavid | 2008-12-17 03:48:37 +0900 (Wed, 17 Dec 2008) | 1 line
  
  Fix overriding of library_dirs.
........
  r6149 | cdavid | 2008-12-17 03:53:25 +0900 (Wed, 17 Dec 2008) | 1 line
  
  Add mingw32 and mingwex libraries as runtime libraries for extensions which use fortran and are built with gfortran+MS compiler.
........
  r6174 | ptvirtan | 2008-12-20 02:58:57 +0900 (Sat, 20 Dec 2008) | 1 line
  
  docs: put CHM files in a zip
........
  r6175 | ptvirtan | 2008-12-20 22:40:30 +0900 (Sat, 20 Dec 2008) | 1 line
  
  test_umath: don't check against cmath on branch cuts, since the behavior of our functions varies across platforms on them
........
  r6179 | cdavid | 2008-12-21 15:02:29 +0900 (Sun, 21 Dec 2008) | 1 line
  
  Do not declare missing functions to avoid mismatch with potentially conflicting, undetected ones
........
  r6180 | cdavid | 2008-12-21 15:02:44 +0900 (Sun, 21 Dec 2008) | 1 line
  
  Update comments in umath.
........
  r6181 | cdavid | 2008-12-21 15:03:05 +0900 (Sun, 21 Dec 2008) | 1 line
  
  Do not set function to macro in umath anymore.
........
  r6182 | cdavid | 2008-12-21 15:03:19 +0900 (Sun, 21 Dec 2008) | 1 line
  
  Do not define math func as static: better to have a link error when we have a config problem than having two functions with the same name.
........
  r6185 | cdavid | 2008-12-22 01:19:14 +0900 (Mon, 22 Dec 2008) | 1 line
  
  Add doc sources so that sdist tarball contains them.
........
  r6186 | pierregm | 2008-12-22 19:01:51 +0900 (Mon, 22 Dec 2008) | 4 lines
  
  testutils:
  assert_array_compare : make sure that the comparison is performed on ndarrays, and make sure we use the np version of the comparison function.
  core:
  * Try not to touch the data in unary/binary ufuncs, (including inplace)
........
  r6187 | pearu | 2008-12-22 19:05:00 +0900 (Mon, 22 Dec 2008) | 1 line
  
  Fix a bug.
........

==
==================
fbe2af2;Pearu Peterson;2008-12-22 10:05:00 +0000;Fix a bug.

==

numpy/f2py/crackfortran.py
==================
934b274;pierregm;2008-12-22 10:01:51 +0000;testutils: assert_array_compare : make sure that the comparison is performed on ndarrays, and make sure we use the np version of the comparison function. core: * Try not to touch the data in unary/binary ufuncs, (including inplace)

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
numpy/ma/testutils.py
==================
13ad726;David Cournapeau;2008-12-21 16:19:14 +0000;Add doc sources so that sdist tarball contains them.

==

setup.py
==================
745cfe4;David Cournapeau;2008-12-21 07:46:28 +0000;Hardcode size of long double, because it is broken with mingw.

==

numpy/core/setup.py
==================
44c808f;David Cournapeau;2008-12-21 07:08:03 +0000;Merged revisions 6174-6175,6179-6182 via svnmerge from http://svn.scipy.org/svn/numpy/trunk
........
  r6174 | ptvirtan | 2008-12-20 02:58:57 +0900 (Sat, 20 Dec 2008) | 1 line
  
  docs: put CHM files in a zip
........
  r6175 | ptvirtan | 2008-12-20 22:40:30 +0900 (Sat, 20 Dec 2008) | 1 line
  
  test_umath: don't check against cmath on branch cuts, since the behavior of our functions varies across platforms on them
........
  r6179 | cdavid | 2008-12-21 15:02:29 +0900 (Sun, 21 Dec 2008) | 1 line
  
  Do not declare missing functions to avoid mismatch with potentially conflicting, undetected ones
........
  r6180 | cdavid | 2008-12-21 15:02:44 +0900 (Sun, 21 Dec 2008) | 1 line
  
  Update comments in umath.
........
  r6181 | cdavid | 2008-12-21 15:03:05 +0900 (Sun, 21 Dec 2008) | 1 line
  
  Do not set function to macro in umath anymore.
........
  r6182 | cdavid | 2008-12-21 15:03:19 +0900 (Sun, 21 Dec 2008) | 1 line
  
  Do not define math func as static: better to have a link error when we have a config problem than having two functions with the same name.
........

==
==================
a80dfe7;David Cournapeau;2008-12-21 06:03:19 +0000;Do not define math func as static: better to have a link error when we have a config problem than having two functions with the same name.

==

numpy/core/src/umath_funcs_c99.inc.src
==================
ccc608d;David Cournapeau;2008-12-21 06:03:05 +0000;Do not set function to macro in umath anymore.

==

numpy/core/src/umath_funcs_c99.inc.src
==================
90f25de;David Cournapeau;2008-12-21 06:02:44 +0000;Update comments in umath.

==

numpy/core/src/umath_funcs_c99.inc.src
==================
9cabc65;David Cournapeau;2008-12-21 06:02:29 +0000;Do not declare missing functions to avoid mismatch with potentially conflicting, undetected ones

==

numpy/core/src/umath_funcs_c99.inc.src
==================
f531cfb;David Cournapeau;2008-12-20 17:32:33 +0000;Remove handling of MS_WIN64 in commands: deal with it in mingw tool only.

==

numpy/distutils/command/build_ext.py
numpy/distutils/mingw32ccompiler.py
==================
e09cd4d;David Cournapeau;2008-12-20 17:32:11 +0000;Add MS_WIN64 for every compile command.

==

numpy/distutils/mingw32ccompiler.py
==================
55446ee;David Cournapeau;2008-12-20 17:31:48 +0000;Remove optimization flags for now, to speed up builds.

==

numpy/distutils/mingw32ccompiler.py
==================
6c37bfc;Pauli Virtanen;2008-12-20 13:40:30 +0000;test_umath: don't check against cmath on branch cuts, since the behavior of our functions varies across platforms on them

==

numpy/core/tests/test_umath.py
==================
5d46beb;Pauli Virtanen;2008-12-19 17:58:57 +0000;docs: put CHM files in a zip

==

doc/Makefile
==================
da4b745;David Cournapeau;2008-12-19 10:28:39 +0000;Add one full msvcrt version for 80 (for manifest generation).

==

numpy/distutils/mingw32ccompiler.py
==================
4e07a5b;David Cournapeau;2008-12-19 10:25:18 +0000;do not regenerate the import library if already there.

==

numpy/distutils/mingw32ccompiler.py
==================
33b2968;David Cournapeau;2008-12-19 10:21:54 +0000;Do not use g++ for linking on amd64.

==

numpy/distutils/mingw32ccompiler.py
==================
45d2c14;David Cournapeau;2008-12-19 10:05:03 +0000;Fix macro def.

==

numpy/distutils/command/build_ext.py
==================
a7bf188;David Cournapeau;2008-12-19 09:57:52 +0000;Use a tuple when defining the MS_WIN64 macro.

==

numpy/distutils/command/build_ext.py
==================
233e28b;David Cournapeau;2008-12-19 09:57:06 +0000;Forgot to import get_build_architecture.

==

numpy/distutils/command/build_ext.py
==================
14a63a8;David Cournapeau;2008-12-19 09:55:16 +0000;Add MS_WIN64 macro when built on amd64 + mingw.

==

numpy/distutils/command/build_ext.py
==================
94e3d10;David Cournapeau;2008-12-19 09:48:01 +0000;Trailing spaces.

==

numpy/distutils/mingw32ccompiler.py
==================
6c34821;David Cournapeau;2008-12-19 09:46:30 +0000;Do not generate ordinal, and use the basename of the dll instead of the full path in the def.file.

==

numpy/distutils/mingw32ccompiler.py
==================
aa14249;David Cournapeau;2008-12-19 09:32:46 +0000;Actually build the import library for mingw on amd64.

==

numpy/distutils/mingw32ccompiler.py
==================
34028c1;David Cournapeau;2008-12-19 09:22:18 +0000;Fix missing out filename.

==

numpy/distutils/mingw32ccompiler.py
==================
6ce9a33;David Cournapeau;2008-12-19 09:18:08 +0000;Show arch in the log when building import library.

==

numpy/distutils/mingw32ccompiler.py
==================
5cd369a;David Cournapeau;2008-12-19 09:10:03 +0000;Do not generate manifest when built with msver 8.*, it does not look like it is needed, and we dont support it anyway ATM.

==

numpy/distutils/mingw32ccompiler.py
==================
479f75f;David Cournapeau;2008-12-19 09:02:24 +0000;Refactor build_import_library to take into account multi arch.

==

numpy/distutils/mingw32ccompiler.py
==================
88e01e5;David Cournapeau;2008-12-19 08:56:54 +0000;Add a warning if no symbols found in the dll (if stripped, for example).

==

numpy/distutils/mingw32ccompiler.py
==================
8b32c5b;David Cournapeau;2008-12-19 08:53:49 +0000;Fix .def file generation.

==

numpy/distutils/mingw32ccompiler.py
==================
a00507d;David Cournapeau;2008-12-19 08:43:56 +0000;Forgot to add the regex for the generate_def function.

==

numpy/distutils/mingw32ccompiler.py
==================
e9d5604;David Cournapeau;2008-12-19 08:41:39 +0000;Add a function to generate a .def file from a dll.

==

numpy/distutils/mingw32ccompiler.py
==================
f7ad1d4;David Cournapeau;2008-12-19 08:37:19 +0000;Add a function to get a dump of private headers from dll.

==

numpy/distutils/mingw32ccompiler.py
==================
df2acae;David Cournapeau;2008-12-19 08:28:49 +0000;Fix typo when getting system32 location.

==

numpy/distutils/mingw32ccompiler.py
==================
28e95db;David Cournapeau;2008-12-19 08:06:06 +0000;Add a function to find python dll on windows.

==

numpy/distutils/mingw32ccompiler.py
==================
0746f06;David Cournapeau;2008-12-16 18:53:25 +0000;Add mingw32 and mingwex libraries as runtime libraries for extensions which use fortran and are built with gfortran+MS compiler.

==

numpy/distutils/fcompiler/gnu.py
==================
eb1f98d;David Cournapeau;2008-12-16 18:48:37 +0000;Fix overriding of library_dirs.

==

numpy/distutils/fcompiler/gnu.py
==================
543a163;David Cournapeau;2008-12-16 18:41:32 +0000;Add target specific lib dir for gfortran on windows when msvc is the C compiler.

==

numpy/distutils/fcompiler/gnu.py
==================
0c502d1;David Cournapeau;2008-12-16 18:32:41 +0000;Fix get_target.

==

numpy/distutils/fcompiler/gnu.py
==================
65af92b;David Cournapeau;2008-12-16 18:26:13 +0000;Add a function to get configured target for gfortran.

==

numpy/distutils/fcompiler/gnu.py
==================
4f1e635;David Cournapeau;2008-12-16 18:04:24 +0000;BUG: Do not harcode fortran runtime when copying it on windows. Should fix #969.

==

numpy/distutils/fcompiler/gnu.py
==================
9fe7e3d;Jarrod Millman;2008-12-16 11:21:52 +0000;added missing THANKS for Alan's testing work this summer

==

THANKS.txt
==================
88b5151;Jarrod Millman;2008-12-14 10:32:51 +0000;wordsmithing

==

THANKS.txt
==================
34eee7e;Pauli Virtanen;2008-12-13 21:02:05 +0000;docs: fix minor issues, support htmlhelp.
- Don't use :members: in automodule; it generates too much
  and not very useful output

- Fix edit links and summarize.py

- Add better htmlhelp build target

- Add upload target

- Fix permissions on make dist

==

doc/Makefile
doc/source/conf.py
doc/source/reference/routines.emath.rst
doc/source/reference/routines.matlib.rst
doc/source/reference/routines.numarray.rst
doc/source/reference/routines.oldnumeric.rst
doc/sphinxext/numpydoc.py
doc/summarize.py
==================
f947ff3;Pauli Virtanen;2008-12-13 16:18:04 +0000;Get lstsq and eigvals from numpy.linalg, not from numpy.dual. Addresses Scipy ticket #800

==

numpy/lib/polynomial.py
numpy/ma/extras.py
==================
57c9ad3;pierregm;2008-12-05 20:40:44 +0000;* Added MaskError * If a bool or int ndarray is given as the explicit output of var/min/max, an exception is raised if the function should have output np.nan

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
5c62843;Pauli Virtanen;2008-12-04 23:06:29 +0000;sphinxext: support autosummary:: directives in automodule docstrings

==

doc/sphinxext/autosummary_generate.py
==================
d455fa9;David Cournapeau;2008-12-04 03:21:51 +0000;Add /arch option to superpack installer to override detected arch.

==

tools/win32build/nsis_scripts/numpy-superinstaller.nsi.in
==================
f91aedb;Pauli Virtanen;2008-12-03 22:15:51 +0000;sphinxext: fix a small bug in plot directive

==

doc/sphinxext/plot_directive.py
==================
65b8487;Pauli Virtanen;2008-12-03 21:52:36 +0000;Refactor plot:: directive somewhat

==

doc/sphinxext/plot_directive.py
==================
9065761;pierregm;2008-12-02 18:42:12 +0000;* Cleaned up make_mask_descr

==

numpy/ma/core.py
==================
ac33865;pierregm;2008-12-02 08:50:11 +0000;* Fixed make_mask_descr for dtype w/ composite names, like [(('A','B'), float)]

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
2dd04ce;pierregm;2008-12-02 02:40:22 +0000;* Fixed MaskedArray for nested dtype w/ input mask * Fixed masked_all for nested dtype * Fixed masked_all_like for nested dtype

==

numpy/ma/core.py
numpy/ma/extras.py
numpy/ma/tests/test_extras.py
==================
77f95a1;pierregm;2008-12-01 17:56:58 +0000;* added flatten_mask to collapse masks w/ (nested) flexible types. * fixed __getitem__ on arrays w/ nested dtype

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
7933d53;pierregm;2008-12-01 09:45:51 +0000;Fixed make_mask_descr for nested dtypes

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
0a5268f;Pauli Virtanen;2008-11-30 15:08:38 +0000;Rename core/.../docstrings.py to ufunc_docstrings.py

==

numpy/core/code_generators/docstrings.py
numpy/core/code_generators/generate_umath.py
numpy/core/code_generators/ufunc_docstrings.py
==================
8c542b5;Pauli Virtanen;2008-11-30 14:44:38 +0000;Move Sphinx extensions under Numpy's SVN trunk

==

doc/Makefile
doc/source/conf.py
doc/sphinxext/LICENSE.txt
doc/sphinxext/__init__.py
doc/sphinxext/autosummary.py
doc/sphinxext/autosummary_generate.py
doc/sphinxext/comment_eater.py
doc/sphinxext/compiler_unparse.py
doc/sphinxext/docscrape.py
doc/sphinxext/docscrape_sphinx.py
doc/sphinxext/numpydoc.py
doc/sphinxext/only_directives.py
doc/sphinxext/phantom_import.py
doc/sphinxext/plot_directive.py
doc/sphinxext/tests/test_docscrape.py
doc/sphinxext/traitsdoc.py
==================
00f7011;Stefan van der Walt;2008-11-29 14:54:29 +0000;Add bz2 support to loadtxt [patch by Ryan May].

==

numpy/lib/io.py
==================
b1343ae;Stefan van der Walt;2008-11-29 14:53:44 +0000;Identify file object using 'readline', rather than 'seek'.

==

numpy/lib/io.py
==================
91e5c32;Stefan van der Walt;2008-11-29 12:09:07 +0000;Reformat spacing in io tests.

==

numpy/lib/tests/test_io.py
==================
05fa6e7;Stefan van der Walt;2008-11-29 12:08:29 +0000;Opening a memmap requires a filename.  Raise an error otherwise.

==

numpy/lib/format.py
==================
3cc4c43;Stefan van der Walt;2008-11-29 12:07:54 +0000;Add test for load's mmap_mode.

==

numpy/lib/tests/test_io.py
==================
1720603;Stefan van der Walt;2008-11-29 12:07:07 +0000;Add memory map support to `load` [patch by Gael Varoquaux].  Closes #954.

==

numpy/lib/io.py
==================
9940ab0;David Cournapeau;2008-11-28 16:50:08 +0000;Anoter typo on core scons script.

==

numpy/core/SConscript
==================
ecc1892;David Cournapeau;2008-11-28 16:47:34 +0000;Fix typo in core scons script.

==

numpy/core/SConscript
==================
a7c643c;Charles Harris;2008-11-28 05:34:33 +0000;Add preliminary docstrings for: log2, exp2, logaddexp, logaddexp2, rad2deg, deg2rad.
The complete docstring for fmin and fmax are on the web but
haven't yet been merged.

==

doc/source/reference/ufuncs.rst
numpy/core/code_generators/docstrings.py
numpy/core/code_generators/generate_umath.py
==================
1361760;Charles Harris;2008-11-28 03:52:16 +0000;Make numpy version of atanh more robust. Numpy log1p still needs a major overhaul.

==

numpy/core/src/umath_funcs_c99.inc.src
==================
a7eddba;Pauli Virtanen;2008-11-27 20:26:04 +0000;doc: include release notes to Sphinx build

==

doc/source/_templates/indexcontent.html
doc/source/contents.rst
doc/source/release.rst
==================
52a781d;Jarrod Millman;2008-11-27 10:58:51 +0000;add release notes for 1.3

==

doc/release/1.3.0-notes.rst
==================
ce7cd10;pierregm;2008-11-27 06:56:12 +0000;Doc update

==

doc/source/reference/routines.ma.rst
numpy/ma/core.py
==================
0629f41;pierregm;2008-11-27 04:29:43 +0000;* Added get_object_signature to fix missing signatures * Fixed .getdoc from _arraymethod, _frommethod, _convert2ma, _fromnxfunction * Fixed the docstrings of .trace, .mean, .argsort, .sort * Suppressed duplicated conjugate, ptp, round, expand_dims, apply_along_axis, compress_rowcols, mask_rowcols, vander, polyfit

==

numpy/ma/core.py
numpy/ma/extras.py
==================
8209ab6;pierregm;2008-11-26 02:13:57 +0000;* added ma.diag * added copy, cumprod, cumsum, harden_mask, prod, round, soften_mask, squeeze to the namespace * TEMPORARILY fixed a pb of compatibility with python 2.6 (involvingin(np.nan))

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
0715c87;David Cournapeau;2008-11-25 13:57:49 +0000;Use npy_endian.h to detect endianness of CPU.
We avoid using WORDS_ENDIAN (as set by python headers themselves)
because its value is set at python build time, and hence does not work
for situations like fat  builds on Mac OS X: if the fat binary is built
on PPC, WORDS_ENDIAN is defined to 1 in python headers, even on Intel.
Instead, we use npy_endian.h, which is not set at numpy build time, but
set everytime npy_endian.h is included (using cpu-specific macro).

==

numpy/core/include/numpy/ndarrayobject.h
==================
0469cb5;David Cournapeau;2008-11-25 13:57:30 +0000;Add a (public) header to set cpu endianness when numpy headers are included instead of setting them at build time.

==

numpy/core/include/numpy/npy_endian.h
==================
09baaa6;David Cournapeau;2008-11-25 13:57:06 +0000;Document the possible values for NPY_TARGET_CPU macro.

==

numpy/core/include/numpy/cpuarch.h
==================
af9e541;David Cournapeau;2008-11-25 13:56:49 +0000;Add a (public) header to detect common CPU archs.

==

numpy/core/include/numpy/cpuarch.h
==================
d1cc65d;pierregm;2008-11-24 19:12:05 +0000;* added ddof to np.matrix.var (bug fix #861)

==

numpy/core/defmatrix.py
numpy/core/tests/test_defmatrix.py
==================
ea79017;Charles Harris;2008-11-24 00:55:10 +0000;Fix missing generic loop declarations.

==

numpy/core/code_generators/genapi.py
==================
03582a3;Pauli Virtanen;2008-11-23 10:39:05 +0000;Moved numpy-docs under doc/ in the main Numpy trunk.

==
==================
84054e3;Pauli Virtanen;2008-11-23 10:39:05 +0000;Moved numpy-docs under doc/ in the main Numpy trunk.

==

trunk/Makefile
trunk/README.txt
trunk/postprocess.py
trunk/source/_static/scipy.css
trunk/source/_templates/indexcontent.html
trunk/source/_templates/indexsidebar.html
trunk/source/_templates/layout.html
trunk/source/about.rst
trunk/source/bugs.rst
trunk/source/conf.py
trunk/source/contents.rst
trunk/source/glossary.rst
trunk/source/license.rst
trunk/source/reference/arrays.classes.rst
trunk/source/reference/arrays.dtypes.rst
trunk/source/reference/arrays.indexing.rst
trunk/source/reference/arrays.interface.rst
trunk/source/reference/arrays.ndarray.rst
trunk/source/reference/arrays.rst
trunk/source/reference/arrays.scalars.rst
trunk/source/reference/c-api.array.rst
trunk/source/reference/c-api.config.rst
trunk/source/reference/c-api.dtype.rst
trunk/source/reference/c-api.rst
trunk/source/reference/c-api.types-and-structures.rst
trunk/source/reference/c-api.ufunc.rst
trunk/source/reference/distutils.rst
trunk/source/reference/figures/dtype-hierarchy.dia
trunk/source/reference/figures/dtype-hierarchy.pdf
trunk/source/reference/figures/dtype-hierarchy.png
trunk/source/reference/figures/threefundamental.fig
trunk/source/reference/figures/threefundamental.pdf
trunk/source/reference/figures/threefundamental.png
trunk/source/reference/index.rst
trunk/source/reference/internals.code-explanations.rst
trunk/source/reference/internals.rst
trunk/source/reference/routines.array-creation.rst
trunk/source/reference/routines.array-manipulation.rst
trunk/source/reference/routines.bitwise.rst
trunk/source/reference/routines.ctypeslib.rst
trunk/source/reference/routines.dtype.rst
trunk/source/reference/routines.dual.rst
trunk/source/reference/routines.emath.rst
trunk/source/reference/routines.err.rst
trunk/source/reference/routines.fft.rst
trunk/source/reference/routines.financial.rst
trunk/source/reference/routines.functional.rst
trunk/source/reference/routines.help.rst
trunk/source/reference/routines.indexing.rst
trunk/source/reference/routines.io.rst
trunk/source/reference/routines.linalg.rst
trunk/source/reference/routines.logic.rst
trunk/source/reference/routines.ma.rst
trunk/source/reference/routines.math.rst
trunk/source/reference/routines.matlib.rst
trunk/source/reference/routines.numarray.rst
trunk/source/reference/routines.oldnumeric.rst
trunk/source/reference/routines.other.rst
trunk/source/reference/routines.poly.rst
trunk/source/reference/routines.random.rst
trunk/source/reference/routines.rst
trunk/source/reference/routines.set.rst
trunk/source/reference/routines.sort.rst
trunk/source/reference/routines.statistics.rst
trunk/source/reference/routines.window.rst
trunk/source/reference/ufuncs.rst
trunk/source/scipyshiny_small.png
trunk/source/user/basics.broadcasting.rst
trunk/source/user/basics.creation.rst
trunk/source/user/basics.indexing.rst
trunk/source/user/basics.rec.rst
trunk/source/user/basics.rst
trunk/source/user/basics.subclassing.rst
trunk/source/user/basics.types.rst
trunk/source/user/c-info.beyond-basics.rst
trunk/source/user/c-info.how-to-extend.rst
trunk/source/user/c-info.python-as-glue.rst
trunk/source/user/c-info.rst
trunk/source/user/howtofind.rst
trunk/source/user/index.rst
trunk/source/user/misc.rst
trunk/source/user/performance.rst
trunk/summarize.py
==================
638bacd;pierregm;2008-11-23 00:04:29 +0000;Added mod to the ufuncs

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
0cb27e3;Charles Harris;2008-11-22 08:01:26 +0000;Comment out redundant variable declaration for time being.

==

numpy/core/src/umathmodule.c.src
==================
bc42c6b;Charles Harris;2008-11-22 07:54:48 +0000;Add some cautionary comments.

==

numpy/core/src/umathmodule.c.src
==================
a0d20a5;Charles Harris;2008-11-22 06:32:40 +0000;Change order of includes to see if it matters on SPARC Etch buildbot.

==

numpy/core/src/umathmodule.c.src
==================
9ac837a;Charles Harris;2008-11-22 04:25:21 +0000;Merge branch 'ufunc'

==
==================
83a5d44;Charles Harris;2008-11-22 01:28:52 +0000;Merge branch 'ufunc'
Conflicts:

	numpy/core/code_generators/genapi.py

==

numpy/core/SConscript
numpy/core/code_generators/genapi.py
numpy/core/setup.py
numpy/core/src/math_c99.inc.src
numpy/core/src/ufuncobject.c
numpy/core/src/umath_funcs_c99.inc.src
numpy/core/src/umath_ufunc_object.inc
numpy/core/src/umathmodule.c.src
==================
702538f;pierregm;2008-11-21 20:49:33 +0000;Rewrote allclose to allow comparison with a scalar

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
3a1ffcc;pierregm;2008-11-21 17:12:47 +0000;* Prevent the shape of a 1d-singleton to be lost when interacting with masked (bug fix #948)

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
e39cb02;David Cournapeau;2008-11-20 09:13:07 +0000;Fix ambiguous assert.

==

numpy/lib/tests/test_io.py
==================
5fb1698;David Cournapeau;2008-11-20 09:01:53 +0000;Import np_ in ma tests since the import is not available in numpy.ma anymore.

==

numpy/ma/tests/test_core.py
==================
77807c0;pierregm;2008-11-19 15:00:37 +0000;make_mask : Added a dtype keyword to support flexible-dtype mask_or : Added support to flexible-dtype.

==

numpy/ma/core.py
==================
0e39040;David Cournapeau;2008-11-19 12:30:55 +0000;Forgot to finish the configure context in numscons build of random.

==

numpy/random/SConscript
==================
0a96db9;David Cournapeau;2008-11-19 12:30:26 +0000;Handle ftime mingw problem with numscons.

==

numpy/random/SConscript
==================
0c66323;David Cournapeau;2008-11-17 14:19:54 +0000;Forgot to add time headers when mingw workaround is not used on windows.

==

numpy/random/mtrand/randomkit.c
==================
2a569c4;David Cournapeau;2008-11-17 14:19:19 +0000;Do not use mingw workaround for msvc runtime 7.1.

==

numpy/random/setup.py
==================
7b954c5;David Cournapeau;2008-11-17 14:09:39 +0000;Merged revisions 6041-6077 via svnmerge from http://svn.scipy.org/svn/numpy/branches/visualstudio_manifest
................
  r6042 | cdavid | 2008-11-16 18:04:37 +0900 (Sun, 16 Nov 2008) | 3 lines
  
  Initialized merge tracking via "svnmerge" with revisions "1-6041" from 
  http://svn.scipy.org/svn/numpy/trunk
................
  r6045 | cdavid | 2008-11-16 20:44:02 +0900 (Sun, 16 Nov 2008) | 1 line
  
  Add a function to get the content of the xml version of manifest to deal with VS.
................
  r6046 | cdavid | 2008-11-16 20:44:18 +0900 (Sun, 16 Nov 2008) | 1 line
  
  Add comment on how to get exact MSVCR version.
................
  r6047 | cdavid | 2008-11-16 20:44:33 +0900 (Sun, 16 Nov 2008) | 1 line
  
  Add manifest_rc to generate the .rc file which will be used to embed the manifest file.
................
  r6048 | cdavid | 2008-11-16 20:44:54 +0900 (Sun, 16 Nov 2008) | 1 line
  
  Use directly the manifest name for generating the rc file + add docstring.
................
  r6049 | cdavid | 2008-11-16 20:45:09 +0900 (Sun, 16 Nov 2008) | 1 line
  
  Forgot to change argument of manifest_rc.
................
  r6051 | cdavid | 2008-11-16 22:02:09 +0900 (Sun, 16 Nov 2008) | 17 lines
  
  Merged revisions 6042-6050 via svnmerge from 
  http://svn.scipy.org/svn/numpy/trunk
  
  ........
    r6043 | jarrod.millman | 2008-11-16 18:14:01 +0900 (Sun, 16 Nov 2008) | 2 lines
    
    removing some quotes
  ........
    r6044 | jarrod.millman | 2008-11-16 18:15:59 +0900 (Sun, 16 Nov 2008) | 2 lines
    
    adding back a few quotes
  ........
    r6050 | cdavid | 2008-11-16 21:30:17 +0900 (Sun, 16 Nov 2008) | 1 line
    
    Add deprecation warning for get_output and try_run: we should not use it anymore.
  ........
................
  r6052 | cdavid | 2008-11-16 22:04:59 +0900 (Sun, 16 Nov 2008) | 1 line
  
  Trailing spaces.
................
  r6056 | cdavid | 2008-11-17 21:03:57 +0900 (Mon, 17 Nov 2008) | 1 line
  
  Detect whether config link needs embedding the manifest for the MSVC runtime.
................
  r6057 | cdavid | 2008-11-17 21:04:27 +0900 (Mon, 17 Nov 2008) | 1 line
  
  Refactor msvc runtime checking, put it into mingw32compiler
................
  r6058 | cdavid | 2008-11-17 21:05:01 +0900 (Mon, 17 Nov 2008) | 1 line
  
  Fix string formatting.
................
  r6059 | cdavid | 2008-11-17 21:05:29 +0900 (Mon, 17 Nov 2008) | 1 line
  
  fix imports.
................
  r6060 | cdavid | 2008-11-17 21:05:56 +0900 (Mon, 17 Nov 2008) | 1 line
  
  Generate the xml manifest file.
................
  r6061 | cdavid | 2008-11-17 21:06:26 +0900 (Mon, 17 Nov 2008) | 1 line
  
  Separate function to get the configtest name.
................
  r6062 | cdavid | 2008-11-17 21:06:58 +0900 (Mon, 17 Nov 2008) | 1 line
  
  Generate the rc file for manifest embedding.
................
  r6063 | cdavid | 2008-11-17 21:07:36 +0900 (Mon, 17 Nov 2008) | 1 line
  
  Fix configtest and manifest_name.
................
  r6064 | cdavid | 2008-11-17 21:08:08 +0900 (Mon, 17 Nov 2008) | 1 line
  
  temp_files is a list of filenames, not files.
................
  r6065 | cdavid | 2008-11-17 21:08:38 +0900 (Mon, 17 Nov 2008) | 1 line
  
  Disable .rc generation for manifest: having the xml file in the same dir as the _configtest.exe is enough for now.
................
  r6066 | cdavid | 2008-11-17 21:09:08 +0900 (Mon, 17 Nov 2008) | 1 line
  
  Refactor manifest generation and put it back into mingw32ccompiler module.
................
  r6067 | cdavid | 2008-11-17 21:32:46 +0900 (Mon, 17 Nov 2008) | 1 line
  
  Fix spelling.
................
  r6071 | cdavid | 2008-11-17 21:49:26 +0900 (Mon, 17 Nov 2008) | 30 lines
  
  Merged revisions 6051-6070 via svnmerge from 
  http://svn.scipy.org/svn/numpy/trunk
  
  ........
    r6053 | charris | 2008-11-17 12:27:28 +0900 (Mon, 17 Nov 2008) | 1 line
    
    Test moving generic loops to umathmodule.
  ........
    r6054 | charris | 2008-11-17 12:27:46 +0900 (Mon, 17 Nov 2008) | 2 lines
    
    Add umathmodule.c.src to files scanned for ufunc api.
    This is preparation for splitting the umathmodule.c.src file.
  ........
    r6055 | pierregm | 2008-11-17 16:00:42 +0900 (Mon, 17 Nov 2008) | 1 line
    
    simplify MAError
  ........
    r6068 | cdavid | 2008-11-17 21:35:43 +0900 (Mon, 17 Nov 2008) | 1 line
    
    Simplify ftime workaround for python 2.6 under mingw: we only need to make _ftime an alias to _ftime64 when needed.
  ........
    r6069 | cdavid | 2008-11-17 21:36:17 +0900 (Mon, 17 Nov 2008) | 1 line
    
    Use a wrapper around _ftime to work around a mingw bug in msvc runtimes import libraries.
  ........
    r6070 | cdavid | 2008-11-17 21:41:13 +0900 (Mon, 17 Nov 2008) | 1 line
    
    Set __MSVCRT_VERSION__ to make _ftime64 visible from time.h header when we need to workaround mingw bug.
  ........
................
  r6077 | cdavid | 2008-11-17 22:58:23 +0900 (Mon, 17 Nov 2008) | 25 lines
  
  Merged revisions 6071-6076 via svnmerge from 
  http://svn.scipy.org/svn/numpy/trunk
  
  ........
    r6072 | cdavid | 2008-11-17 22:52:47 +0900 (Mon, 17 Nov 2008) | 1 line
    
    Fix the inaccurate comment regarding _ftime issues with mingw.
  ........
    r6073 | cdavid | 2008-11-17 22:53:05 +0900 (Mon, 17 Nov 2008) | 1 line
    
    Do not generate a config.h for randomkit: it does not work as it is, and adding per-subpackage include path is a PITA with distutils.
  ........
    r6074 | cdavid | 2008-11-17 22:53:25 +0900 (Mon, 17 Nov 2008) | 1 line
    
    Conditionally setup mingw workaround on __GNUC__ since we can't detect if we are built with mingw in distutils setup.py.
  ........
    r6075 | cdavid | 2008-11-17 22:53:42 +0900 (Mon, 17 Nov 2008) | 1 line
    
    Forgot to update needs_mingw_ftime_workaround function.
  ........
    r6076 | cdavid | 2008-11-17 22:53:58 +0900 (Mon, 17 Nov 2008) | 1 line
    
    Include time.h and sys/timeb.h just after defining our custom __MSVCRT_VERSION__ to avoid possible duplicate.
  ........
................

==
==================
5a722a6;David Cournapeau;2008-11-17 13:58:23 +0000;Merged revisions 6071-6076 via svnmerge from http://svn.scipy.org/svn/numpy/trunk
........
  r6072 | cdavid | 2008-11-17 22:52:47 +0900 (Mon, 17 Nov 2008) | 1 line
  
  Fix the inaccurate comment regarding _ftime issues with mingw.
........
  r6073 | cdavid | 2008-11-17 22:53:05 +0900 (Mon, 17 Nov 2008) | 1 line
  
  Do not generate a config.h for randomkit: it does not work as it is, and adding per-subpackage include path is a PITA with distutils.
........
  r6074 | cdavid | 2008-11-17 22:53:25 +0900 (Mon, 17 Nov 2008) | 1 line
  
  Conditionally setup mingw workaround on __GNUC__ since we can't detect if we are built with mingw in distutils setup.py.
........
  r6075 | cdavid | 2008-11-17 22:53:42 +0900 (Mon, 17 Nov 2008) | 1 line
  
  Forgot to update needs_mingw_ftime_workaround function.
........
  r6076 | cdavid | 2008-11-17 22:53:58 +0900 (Mon, 17 Nov 2008) | 1 line
  
  Include time.h and sys/timeb.h just after defining our custom __MSVCRT_VERSION__ to avoid possible duplicate.
........

==
==================
c964b6a;David Cournapeau;2008-11-17 13:53:58 +0000;Include time.h and sys/timeb.h just after defining our custom __MSVCRT_VERSION__ to avoid possible duplicate.

==

numpy/random/mtrand/randomkit.c
==================
ea22968;David Cournapeau;2008-11-17 13:53:42 +0000;Forgot to update needs_mingw_ftime_workaround function.

==

numpy/random/setup.py
==================
eb52b1d;David Cournapeau;2008-11-17 13:53:25 +0000;Conditionally setup mingw workaround on __GNUC__ since we can't detect if we are built with mingw in distutils setup.py.

==

numpy/random/mtrand/randomkit.c
==================
13b3ffb;David Cournapeau;2008-11-17 13:53:05 +0000;Do not generate a config.h for randomkit: it does not work as it is, and adding per-subpackage include path is a PITA with distutils.

==

numpy/random/mtrand/randomkit.c
numpy/random/setup.py
==================
24db8a1;David Cournapeau;2008-11-17 13:52:47 +0000;Fix the inaccurate comment regarding _ftime issues with mingw.

==

numpy/random/mtrand/randomkit.c
==================
85887fb;David Cournapeau;2008-11-17 12:49:26 +0000;Merged revisions 6051-6070 via svnmerge from http://svn.scipy.org/svn/numpy/trunk
........
  r6053 | charris | 2008-11-17 12:27:28 +0900 (Mon, 17 Nov 2008) | 1 line
  
  Test moving generic loops to umathmodule.
........
  r6054 | charris | 2008-11-17 12:27:46 +0900 (Mon, 17 Nov 2008) | 2 lines
  
  Add umathmodule.c.src to files scanned for ufunc api.
  This is preparation for splitting the umathmodule.c.src file.
........
  r6055 | pierregm | 2008-11-17 16:00:42 +0900 (Mon, 17 Nov 2008) | 1 line
  
  simplify MAError
........
  r6068 | cdavid | 2008-11-17 21:35:43 +0900 (Mon, 17 Nov 2008) | 1 line
  
  Simplify ftime workaround for python 2.6 under mingw: we only need to make _ftime an alias to _ftime64 when needed.
........
  r6069 | cdavid | 2008-11-17 21:36:17 +0900 (Mon, 17 Nov 2008) | 1 line
  
  Use a wrapper around _ftime to work around a mingw bug in msvc runtimes import libraries.
........
  r6070 | cdavid | 2008-11-17 21:41:13 +0900 (Mon, 17 Nov 2008) | 1 line
  
  Set __MSVCRT_VERSION__ to make _ftime64 visible from time.h header when we need to workaround mingw bug.
........

==
==================
3c4c7fa;David Cournapeau;2008-11-17 12:41:13 +0000;Set __MSVCRT_VERSION__ to make _ftime64 visible from time.h header when we need to workaround mingw bug.

==

numpy/random/mtrand/randomkit.c
==================
9feb5b0;David Cournapeau;2008-11-17 12:36:17 +0000;Use a wrapper around _ftime to work around a mingw bug in msvc runtimes import libraries.

==

numpy/random/mtrand/randomkit.c
==================
40730e2;David Cournapeau;2008-11-17 12:35:43 +0000;Simplify ftime workaround for python 2.6 under mingw: we only need to make _ftime an alias to _ftime64 when needed.

==

numpy/random/setup.py
==================
968fa25;David Cournapeau;2008-11-17 12:32:46 +0000;Fix spelling.

==

numpy/distutils/mingw32ccompiler.py
==================
fd80286;David Cournapeau;2008-11-17 12:09:08 +0000;Refactor manifest generation and put it back into mingw32ccompiler module.

==

numpy/distutils/command/config.py
numpy/distutils/mingw32ccompiler.py
==================
3d745a6;David Cournapeau;2008-11-17 12:08:38 +0000;Disable .rc generation for manifest: having the xml file in the same dir as the _configtest.exe is enough for now.

==

numpy/distutils/command/config.py
==================
0999c7c;David Cournapeau;2008-11-17 12:08:08 +0000;temp_files is a list of filenames, not files.

==

numpy/distutils/command/config.py
==================
67ba879;David Cournapeau;2008-11-17 12:07:36 +0000;Fix configtest and manifest_name.

==

numpy/distutils/command/config.py
numpy/distutils/mingw32ccompiler.py
==================
3a6c367;David Cournapeau;2008-11-17 12:06:58 +0000;Generate the rc file for manifest embedding.

==

numpy/distutils/command/config.py
numpy/distutils/mingw32ccompiler.py
==================
e81458d;David Cournapeau;2008-11-17 12:06:26 +0000;Separate function to get the configtest name.

==

numpy/distutils/mingw32ccompiler.py
==================
cfa01f6;David Cournapeau;2008-11-17 12:05:56 +0000;Generate the xml manifest file.

==

numpy/distutils/command/config.py
numpy/distutils/mingw32ccompiler.py
==================
5504fd1;David Cournapeau;2008-11-17 12:05:29 +0000;fix imports.

==

numpy/distutils/command/config.py
==================
bcd69c9;David Cournapeau;2008-11-17 12:05:01 +0000;Fix string formatting.

==

numpy/distutils/mingw32ccompiler.py
==================
4ebd39d;David Cournapeau;2008-11-17 12:04:27 +0000;Refactor msvc runtime checking, put it into mingw32compiler

==

numpy/distutils/command/config.py
numpy/distutils/mingw32ccompiler.py
==================
1d3d4cd;David Cournapeau;2008-11-17 12:03:57 +0000;Detect whether config link needs embedding the manifest for the MSVC runtime.

==

numpy/distutils/command/config.py
==================
6a9b545;pierregm;2008-11-17 07:00:42 +0000;simplify MAError

==

numpy/ma/core.py
==================
55204c0;Charles Harris;2008-11-17 03:27:46 +0000;Add umathmodule.c.src to files scanned for ufunc api. This is preparation for splitting the umathmodule.c.src file.

==

numpy/core/code_generators/genapi.py
==================
bf9eb68;Charles Harris;2008-11-17 03:27:28 +0000;Test moving generic loops to umathmodule.

==

numpy/core/src/ufuncobject.c
numpy/core/src/umathmodule.c.src
==================
6cf5c1f;David Cournapeau;2008-11-16 13:04:59 +0000;Trailing spaces.

==

numpy/distutils/mingw32ccompiler.py
==================
2401df2;David Cournapeau;2008-11-16 13:02:09 +0000;Merged revisions 6042-6050 via svnmerge from http://svn.scipy.org/svn/numpy/trunk
........
  r6043 | jarrod.millman | 2008-11-16 18:14:01 +0900 (Sun, 16 Nov 2008) | 2 lines
  
  removing some quotes
........
  r6044 | jarrod.millman | 2008-11-16 18:15:59 +0900 (Sun, 16 Nov 2008) | 2 lines
  
  adding back a few quotes
........
  r6050 | cdavid | 2008-11-16 21:30:17 +0900 (Sun, 16 Nov 2008) | 1 line
  
  Add deprecation warning for get_output and try_run: we should not use it anymore.
........

==
==================
573adec;David Cournapeau;2008-11-16 12:30:17 +0000;Add deprecation warning for get_output and try_run: we should not use it anymore.

==

numpy/distutils/command/config.py
==================
f9e1728;David Cournapeau;2008-11-16 11:45:09 +0000;Forgot to change argument of manifest_rc.

==

numpy/distutils/mingw32ccompiler.py
==================
c74c273;David Cournapeau;2008-11-16 11:44:54 +0000;Use directly the manifest name for generating the rc file + add docstring.

==

numpy/distutils/mingw32ccompiler.py
==================
f046525;David Cournapeau;2008-11-16 11:44:33 +0000;Add manifest_rc to generate the .rc file which will be used to embed the manifest file.

==

numpy/distutils/mingw32ccompiler.py
==================
ff611fe;David Cournapeau;2008-11-16 11:44:18 +0000;Add comment on how to get exact MSVCR version.

==

numpy/distutils/mingw32ccompiler.py
==================
10a9730;David Cournapeau;2008-11-16 11:44:02 +0000;Add a function to get the content of the xml version of manifest to deal with VS.

==

numpy/distutils/mingw32ccompiler.py
==================
0a570c7;Jarrod Millman;2008-11-16 09:15:59 +0000;adding back a few quotes

==

doc/neps/generalized-ufuncs.rst
==================
2201bb3;Jarrod Millman;2008-11-16 09:14:01 +0000;removing some quotes

==

doc/neps/generalized-ufuncs.rst
==================
d0d9ce4;Jarrod Millman;2008-11-16 09:00:44 +0000;fixed table

==

doc/neps/generalized-ufuncs.rst
==================
4fe3f98;Jarrod Millman;2008-11-16 08:49:17 +0000;moved generalized ufunc proposal from the wiki

==

doc/neps/generalized-ufuncs.rst
==================
5ccf1e6;Charles Harris;2008-11-16 06:23:29 +0000;Add missing return. Remove pointless define. Small name cleanup.

==

numpy/core/code_generators/generate_umath.py
numpy/core/src/umathmodule.c.src
==================
6132a51;Charles Harris;2008-11-16 04:01:01 +0000;Add error checking to Object loops. Fix reference leak in Sign Object loop. Define a binary version of PyNumber_Power so that the generic object loop doesn't have to check for that function. Clean up generic object loops.

==

numpy/core/src/ufuncobject.c
numpy/core/src/umathmodule.c.src
==================
357672c;David Cournapeau;2008-11-14 16:59:14 +0000;Another typo.

==

numpy/random/setup.py
==================
b871795;David Cournapeau;2008-11-14 16:58:16 +0000;Fix hex conversion for msvcrt (we do not need to convert VS verion, but MSVCRT version).

==

numpy/random/setup.py
==================
a10c989;David Cournapeau;2008-11-14 16:55:54 +0000;Typo.

==

numpy/random/setup.py
==================
74aee18;David Cournapeau;2008-11-14 16:54:03 +0000;Typo.

==

numpy/random/setup.py
==================
1640efd;David Cournapeau;2008-11-14 16:52:41 +0000;Add a macro to know whether we need the mingw workaround for _ftime + add a define for the MSVCR version.

==

numpy/random/setup.py
==================
a27c31a;David Cournapeau;2008-11-14 16:52:18 +0000;Postpone time.h include because we will need to customize it on windows.

==

numpy/random/mtrand/randomkit.c
==================
974b390;David Cournapeau;2008-11-14 16:51:51 +0000;Generate config header for random kit (empty for now).

==

numpy/random/mtrand/randomkit.c
numpy/random/setup.py
==================
0ba62e6;David Cournapeau;2008-11-14 16:10:21 +0000;Add code to detect msvc used to build python.

==

numpy/random/setup.py
==================
fd9a649;Charles Harris;2008-11-14 08:27:02 +0000;Merge branch 'ufunc'

==

numpy/core/src/math_c99.inc.src
numpy/core/src/ufuncobject.c
==================
cdffc01;Charles Harris;2008-11-14 04:25:38 +0000;Remove trailing whitespace.

==

numpy/core/src/ufuncobject.c
==================
dcb98e0;Charles Harris;2008-11-14 04:25:29 +0000;Use loop macros in generic loops. This is a bit fragile at the moment because the macros a defined in the umathmodule.c.src file. This will be fixed...

==

numpy/core/src/ufuncobject.c
==================
3f43892;Charles Harris;2008-11-14 04:25:19 +0000;Correct spelling errors.

==

numpy/core/tests/test_ufunc.py
==================
1684edf;Charles Harris;2008-11-13 04:55:06 +0000;Add some documentation to math_c99.

==

numpy/core/src/math_c99.inc.src
==================
57f2e36;dhuard;2008-11-12 20:53:55 +0000;removed the `new` argument in the histogram docstring example

==

numpy/lib/function_base.py
==================
08ad9d1;dhuard;2008-11-12 20:42:53 +0000;Follow up on changes to histogram: new=False now raises a DeprecationWarning, new=True warns users that `new` will disappear in 1.4.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
3f265ff;Charles Harris;2008-11-12 12:39:18 +0000;Temporarily remove umath_test from build, it isn't linking on windows. The problem is the blas_gemm problem seen elsewhere and I want to get windows compiling first. It's almost there.

==

numpy/core/setup.py
==================
69409b3;Charles Harris;2008-11-12 11:28:11 +0000;Another stab at MSVC voodoo.

==

numpy/core/src/math_c99.inc.src
==================
eb5472e;Charles Harris;2008-11-12 09:28:30 +0000;Another test for microsoft buildbot.

==

numpy/core/src/math_c99.inc.src
==================
230f6a7;Charles Harris;2008-11-12 07:26:55 +0000;Another test: make functions defined in math_c99 static.

==

numpy/core/src/math_c99.inc.src
==================
8a1d2b9;Charles Harris;2008-11-12 06:20:36 +0000;Fix misplaced end statement.

==

numpy/core/src/math_c99.inc.src
==================
304405f;Charles Harris;2008-11-12 05:47:09 +0000;Some spelling corrections. Some experiments for MSVC.

==

numpy/core/src/math_c99.inc.src
numpy/distutils/command/config.py
==================
ea8a8f4;Charles Harris;2008-11-12 01:28:23 +0000;Fix missing semicolons on some function declarations.

==

numpy/core/src/math_c99.inc.src
==================
ed9c0d6;Charles Harris;2008-11-12 01:12:43 +0000;Add C99 prototypes. Attempt to cure problems of SPARC Debian Etch.

==

numpy/core/src/math_c99.inc.src
==================
b566ef3;pierregm;2008-11-11 22:20:46 +0000;MaskedRecords : reintroduced _fieldmask as a property (for backcompatibility).

==

numpy/ma/mrecords.py
==================
7fd6e70;Charles Harris;2008-11-11 21:57:01 +0000;Debug commit seemed to work. Add back all logaddexp, logaddexp2 tests. Remove special log1p tests. The existing log1p tests need some additions...

==

numpy/core/tests/test_umath.py
==================
d373ae4;Charles Harris;2008-11-11 21:09:17 +0000;Debugging log1p problem. Add log1p to the search list for f,l types. Add back tests of log1pf, log1pl to see if they work.

==

numpy/core/setup.py
numpy/core/tests/test_umath.py
==================
7c9de63;Charles Harris;2008-11-11 19:18:48 +0000;Comment out all tests for data types that seem broken on some machines.

==

numpy/core/tests/test_umath.py
==================
5c44c02;Charles Harris;2008-11-11 18:44:50 +0000;Comment out some tests that use functions broken on some machines.

==

numpy/core/tests/test_umath.py
==================
39da315;Charles Harris;2008-11-11 18:03:47 +0000;Comment out tests that hang on some machines. Add tests that might hang in more informative places.

==

numpy/core/tests/test_umath.py
==================
de29689;Charles Harris;2008-11-11 08:36:22 +0000;Comment out tests that hang on some builtbots. I think this is due to buggy versions of log1p, so add a log1p evaluation with small number in test_log1p. This might also be a problem with exp, so test that next it this works.

==

numpy/core/tests/test_umath.py
==================
18d4032;Charles Harris;2008-11-11 07:55:54 +0000;Make logaddexp just a bit more severe.

==

numpy/core/tests/test_umath.py
==================
dd9378c;Charles Harris;2008-11-11 07:55:43 +0000;Make logaddexp range test less severe.

==

numpy/core/tests/test_umath.py
==================
f26f67d;Charles Harris;2008-11-11 07:34:25 +0000;Test to see what problem with logaddexp is on some machines.

==

numpy/core/tests/test_umath.py
==================
26a08a1;Charles Harris;2008-11-11 06:52:15 +0000;Comment out generalized ufunc test until linkage problem is resolved.

==

numpy/core/tests/test_ufunc.py
==================
6d929c9;Charles Harris;2008-11-11 04:42:25 +0000;Add logaddexp2. Add tests for log, exp, logaddexp2.

==

numpy/core/code_generators/generate_umath.py
numpy/core/src/umathmodule.c.src
numpy/core/tests/test_umath.py
==================
ccf0857;Jarrod Millman;2008-11-11 03:26:53 +0000;typo

==

numpy/core/tests/test_umath.py
==================
13f2534;Charles Harris;2008-11-11 02:57:58 +0000;Add tests for log2, exp2, and logaddexp.

==

numpy/core/tests/test_umath.py
==================
cf049ee;Charles Harris;2008-11-11 01:41:59 +0000;Fix exp2, log2 fallback functions.

==

numpy/core/src/math_c99.inc.src
==================
3d3ac93;Charles Harris;2008-11-11 00:00:05 +0000;Add log2 and exp2. Fix scimath to use log2. Complex versions of these functions need to be added. MPL also defines log2 with slightly different properties. For instance, it returns an integer value for log2(2).

==

numpy/core/code_generators/generate_umath.py
numpy/core/setup.py
numpy/core/src/math_c99.inc.src
numpy/lib/scimath.py
==================
32ccf77;Charles Harris;2008-11-10 04:49:05 +0000;Move new generalized ufunc function to end of api list.

==

numpy/core/code_generators/ufunc_api_order.txt
==================
d969d70;Stefan van der Walt;2008-11-10 00:28:04 +0000;Add tests for generalized ufuncs.

==

numpy/core/setup.py
numpy/core/src/umath_tests.c.src
numpy/core/tests/test_ufunc.py
==================
d1ea134;Stefan van der Walt;2008-11-10 00:27:06 +0000;Generalised ufuncs patch by Wenjie Fu and Hans-Andreas Engel (see ticket

==

numpy/core/code_generators/ufunc_api_order.txt
numpy/core/include/numpy/ufuncobject.h
numpy/core/src/ufuncobject.c
==================
04d0ab7;Pauli Virtanen;2008-11-09 23:12:21 +0000;numpy-docs: group functions by type instead of alphabetical order

==

trunk/source/reference/ufuncs.rst
==================
d4e239d;David Cournapeau;2008-11-08 07:11:33 +0000;Trailing spaces.

==

numpy/linalg/tests/test_build.py
==================
5e62187;David Cournapeau;2008-11-08 07:07:17 +0000;Add mention of g77 vs gfortran in INSTALL notes.

==

INSTALL.txt
==================
c098984;David Cournapeau;2008-11-08 07:01:16 +0000;Fix fortrab ABI mismatch test.

==

numpy/linalg/tests/test_build.py
==================
9742e30;David Cournapeau;2008-11-08 06:51:59 +0000;Detect gfrotran/g77 mismatch.

==

numpy/linalg/tests/test_build.py
==================
319ff38;David Cournapeau;2008-11-08 06:51:42 +0000;Start working on test to detect fortran compiler mismatch.

==

numpy/linalg/tests/test_build.py
==================
419cd5b;David Cournapeau;2008-11-07 08:14:06 +0000;Disable looking for 3gf libraries; it causes more problem than it solves.

==

INSTALL.txt
numpy/distutils/system_info.py
==================
5c08ef9;David Cournapeau;2008-11-07 08:09:30 +0000;Mention which packages to install for atlas on Ubuntu (Pre intrepid and intrepid).

==

INSTALL.txt
==================
db67966;David Cournapeau;2008-11-07 07:50:45 +0000;Fix typo (g3f->3gf).

==

numpy/distutils/system_info.py
==================
7369d1a;David Cournapeau;2008-11-07 07:46:47 +0000;Deal with g3f extension used by Debian/Ubuntu for gfortrab ABI transition.

==

numpy/distutils/system_info.py
==================
5b968f4;Stefan van der Walt;2008-11-06 21:24:37 +0000;Alphabetise some lists.  Add logaddexp, deg2rad, rad2deg and trunc ufuncs.

==

trunk/source/reference/ufuncs.rst
==================
8704058;Charles Harris;2008-11-06 18:58:06 +0000;Merge branch 'ufunc'

==

numpy/core/code_generators/generate_umath.py
==================
d931599;Charles Harris;2008-11-06 15:25:12 +0000;Remove remove logsumexp and replace with logaddexp.

==

numpy/core/code_generators/generate_umath.py
==================
b410bef;Charles Harris;2008-11-06 15:24:51 +0000;Rename logsumexp to logaddexp. Add ufuncs deg2rad and rad2deg.

==

numpy/core/code_generators/generate_umath.py
numpy/core/src/umathmodule.c.src
==================
4f5f865;David Cournapeau;2008-11-06 12:52:26 +0000;Remove cpu/arch specific optimization flags for GNU fortran compilers: they are too fragile, and are more likely not that useful anyway.

==

numpy/distutils/fcompiler/gnu.py
==================
81c23fb;Charles Harris;2008-11-05 23:10:56 +0000;Fix reversal between radians and degrees.

==

numpy/core/src/umathmodule.c.src
==================
4f94b70;Charles Harris;2008-11-05 22:53:39 +0000;Merge branch 'ufunc'
Conflicts:

	numpy/core/src/umathmodule.c.src

==

numpy/core/code_generators/generate_umath.py
numpy/core/src/umathmodule.c.src
==================
fcd872c;Charles Harris;2008-11-05 19:40:28 +0000;Add logsumexp ufunc and some small cleanups.

==

numpy/core/code_generators/generate_umath.py
numpy/core/src/math_c99.inc.src
numpy/core/src/umathmodule.c.src
==================
0727f28;Charles Harris;2008-11-05 16:59:07 +0000;Finish replacing op by op1 so it compiles.

==

numpy/core/src/umathmodule.c.src
==================
214f75d;Charles Harris;2008-11-05 16:58:53 +0000;More umath cleanups.

==

numpy/core/src/umathmodule.c.src
==================
c87fd4a;David Cournapeau;2008-10-28 08:48:58 +0000;Put measure in numpy.testing namespace.

==

numpy/testing/utils.py
==================
5e711ea;Pauli Virtanen;2008-10-28 00:24:27 +0000;Regenerate mtrand.c due to docstring changes

==

numpy/random/mtrand/mtrand.c
==================
18594cd;Pauli Virtanen;2008-10-28 00:13:44 +0000;Import documentation from doc wiki (part 2, work-in-progress docstrings, but they are still an improvement)

==

numpy/__init__.py
numpy/add_newdocs.py
numpy/core/arrayprint.py
numpy/core/code_generators/docstrings.py
numpy/core/defchararray.py
numpy/core/fromnumeric.py
numpy/core/numeric.py
numpy/core/numerictypes.py
numpy/doc/basics.py
numpy/doc/creation.py
numpy/doc/glossary.py
numpy/doc/misc.py
numpy/doc/subclassing.py
numpy/fft/fftpack.py
numpy/fft/helper.py
numpy/lib/__init__.py
numpy/lib/_datasource.py
numpy/lib/arraysetops.py
numpy/lib/financial.py
numpy/lib/function_base.py
numpy/lib/getlimits.py
numpy/lib/index_tricks.py
numpy/lib/io.py
numpy/lib/polynomial.py
numpy/lib/shape_base.py
numpy/lib/twodim_base.py
numpy/lib/type_check.py
numpy/lib/ufunclike.py
numpy/lib/utils.py
numpy/linalg/linalg.py
numpy/ma/__init__.py
numpy/ma/core.py
numpy/ma/extras.py
numpy/matlib.py
numpy/random/mtrand/mtrand.pyx
==================
7a70f54;Pauli Virtanen;2008-10-27 23:40:52 +0000;Import documentation from doc wiki (part 1)

==

numpy/core/code_generators/docstrings.py
numpy/core/defmatrix.py
numpy/core/fromnumeric.py
numpy/core/numeric.py
numpy/lib/function_base.py
numpy/lib/polynomial.py
numpy/lib/twodim_base.py
numpy/random/mtrand/mtrand.pyx
==================
6cb291a;Pauli Virtanen;2008-10-26 17:57:55 +0000;Import initial version of Numpy documentation

==

trunk/Makefile
trunk/README.txt
trunk/postprocess.py
trunk/source/_static/scipy.css
trunk/source/_templates/indexcontent.html
trunk/source/_templates/indexsidebar.html
trunk/source/_templates/layout.html
trunk/source/about.rst
trunk/source/bugs.rst
trunk/source/conf.py
trunk/source/contents.rst
trunk/source/glossary.rst
trunk/source/license.rst
trunk/source/reference/arrays.classes.rst
trunk/source/reference/arrays.dtypes.rst
trunk/source/reference/arrays.indexing.rst
trunk/source/reference/arrays.interface.rst
trunk/source/reference/arrays.ndarray.rst
trunk/source/reference/arrays.rst
trunk/source/reference/arrays.scalars.rst
trunk/source/reference/c-api.array.rst
trunk/source/reference/c-api.config.rst
trunk/source/reference/c-api.dtype.rst
trunk/source/reference/c-api.rst
trunk/source/reference/c-api.types-and-structures.rst
trunk/source/reference/c-api.ufunc.rst
trunk/source/reference/distutils.rst
trunk/source/reference/figures/dtype-hierarchy.dia
trunk/source/reference/figures/dtype-hierarchy.pdf
trunk/source/reference/figures/dtype-hierarchy.png
trunk/source/reference/figures/threefundamental.fig
trunk/source/reference/figures/threefundamental.pdf
trunk/source/reference/figures/threefundamental.png
trunk/source/reference/index.rst
trunk/source/reference/internals.code-explanations.rst
trunk/source/reference/internals.rst
trunk/source/reference/routines.array-creation.rst
trunk/source/reference/routines.array-manipulation.rst
trunk/source/reference/routines.bitwise.rst
trunk/source/reference/routines.ctypeslib.rst
trunk/source/reference/routines.dtype.rst
trunk/source/reference/routines.dual.rst
trunk/source/reference/routines.emath.rst
trunk/source/reference/routines.err.rst
trunk/source/reference/routines.fft.rst
trunk/source/reference/routines.financial.rst
trunk/source/reference/routines.functional.rst
trunk/source/reference/routines.help.rst
trunk/source/reference/routines.indexing.rst
trunk/source/reference/routines.io.rst
trunk/source/reference/routines.linalg.rst
trunk/source/reference/routines.logic.rst
trunk/source/reference/routines.ma.rst
trunk/source/reference/routines.math.rst
trunk/source/reference/routines.matlib.rst
trunk/source/reference/routines.numarray.rst
trunk/source/reference/routines.oldnumeric.rst
trunk/source/reference/routines.other.rst
trunk/source/reference/routines.poly.rst
trunk/source/reference/routines.random.rst
trunk/source/reference/routines.rst
trunk/source/reference/routines.set.rst
trunk/source/reference/routines.sort.rst
trunk/source/reference/routines.statistics.rst
trunk/source/reference/routines.window.rst
trunk/source/reference/ufuncs.rst
trunk/source/scipyshiny_small.png
trunk/source/user/basics.broadcasting.rst
trunk/source/user/basics.creation.rst
trunk/source/user/basics.indexing.rst
trunk/source/user/basics.rec.rst
trunk/source/user/basics.rst
trunk/source/user/basics.subclassing.rst
trunk/source/user/basics.types.rst
trunk/source/user/c-info.beyond-basics.rst
trunk/source/user/c-info.how-to-extend.rst
trunk/source/user/c-info.python-as-glue.rst
trunk/source/user/c-info.rst
trunk/source/user/howtofind.rst
trunk/source/user/index.rst
trunk/source/user/misc.rst
trunk/source/user/performance.rst
trunk/summarize.py
==================
e866e0d;Charles Harris;2008-10-22 05:45:42 +0000;Merge up to current trunk.

==
==================
7873350;Charles Harris;2008-10-21 20:13:17 +0000;Change way maximum and minimum deal with nans. Add ufuncs fmax and fmin.
In the following, a complex number is considered a nan if the real or imaginary
part is nan. This means that there are many different complex numbers that are
nans and this effects the nan values returned by the maximum, minimum, fmax, and
fmin ufuncs.

The maximum and minimum ufuncs are the same as before unless nans are involved.
In the case of nans, if both values being compared are nans, then the first is
returned, otherwise the nan value is returned. This has the effect of
propagating nans.

The fmax and fmin ufuncs return the same values as maximum and minimum if
neither value being compared is nan.  In the case of nans, if both values being
compared are nans, then the first is returned, otherwise the non-nan value is
returned. This has the effect that nans are ignored unless both values are nan.

==

numpy/core/code_generators/generate_umath.py
numpy/core/src/umathmodule.c.src
numpy/core/tests/test_umath.py
==================
f6b25c6;Charles Harris;2008-10-21 04:49:44 +0000;Put back fmin, fmax lost in merge.

==

numpy/core/src/umathmodule.c.src
==================
1d559cf;Charles Harris;2008-10-21 02:48:38 +0000;Merge up to r5951 of trunk.

==
==================
8d08b75;Stefan van der Walt;2008-10-20 21:57:01 +0000;Revert merge.

==

numpy/core/code_generators/ufunc_api_order.txt
numpy/core/setup.py
numpy/core/src/umath_tests.c.src
numpy/core/tests/test_ufunc.py
==================
3ee5691;Stefan van der Walt;2008-10-20 21:00:56 +0000;Merge generalised ufuncs branch.

==
==================
696b880;pierregm;2008-10-19 23:37:05 +0000;__getattribute__ : make sure than a np.void is returned when retrieving the unmasked attribute of a single record.

==

numpy/ma/mrecords.py
==================
56bb8eb;pierregm;2008-10-19 19:33:10 +0000;* make sure we call self.failUnless instead of assert

==

numpy/ma/tests/test_mrecords.py
==================
a4f1e50;pierregm;2008-10-18 02:14:51 +0000;core             : * fixed make_mask_descr to recognize subdtypes                  : * fixed some corner cases of view mrecords         : * fixed view                  : * got rid of _fieldmask for _mask 		         : * WARNING: setting ._mask no longer calls __setmask__ : BE CAREFUL.                  : * prevent setting ._mask directly, as it screws up things: use .mask instead test_subclassing : * clean up

==

numpy/ma/core.py
numpy/ma/mrecords.py
numpy/ma/tests/test_core.py
numpy/ma/tests/test_mrecords.py
numpy/ma/tests/test_subclassing.py
==================
15d9bd5;David Cournapeau;2008-10-08 13:38:35 +0000;More unused vars tagged (lapack_lite).

==

numpy/linalg/lapack_litemodule.c
==================
ac3cbcc;David Cournapeau;2008-10-08 13:38:11 +0000;More unused vars tagged (fftpack).

==

numpy/fft/fftpack_litemodule.c
==================
83d4119;David Cournapeau;2008-10-08 13:37:36 +0000;More unused vars tagged.

==

numpy/numarray/_capi.c
==================
130cefc;David Cournapeau;2008-10-08 13:37:04 +0000;Tag unused variables in numpy.lib C code.

==

numpy/lib/src/_compiled_base.c
==================
e70350c;David Cournapeau;2008-10-08 13:36:29 +0000;More unused warning handled.

==

numpy/core/src/multiarraymodule.c
numpy/core/src/scalartypes.inc.src
numpy/core/src/umathmodule.c.src
==================
a62ee5a;David Cournapeau;2008-10-08 13:35:27 +0000;Fix missing initializers warnings.

==

numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/core/src/scalarmathmodule.c.src
numpy/core/src/scalartypes.inc.src
numpy/core/src/ufuncobject.c
numpy/core/src/umathmodule.c.src
==================
0f3fbf1;David Cournapeau;2008-10-08 13:34:09 +0000;Use NPY_UNUSED in numpy.core sources.

==

numpy/core/blasdot/_dotblas.c
numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/_sortmodule.c.src
numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
numpy/core/src/scalarmathmodule.c.src
numpy/core/src/scalartypes.inc.src
numpy/core/src/ufuncobject.c
numpy/core/src/umathmodule.c.src
==================
dd7abcc;David Cournapeau;2008-10-08 13:33:34 +0000;    Add utils.h, with macro to tag a variable as unused.

==

numpy/core/include/numpy/utils.h
==================
517ce68;Charles Harris;2008-10-05 22:22:04 +0000;Remove test include.

==

numpy/core/src/math_c99.inc.src
==================
6b7992b;Charles Harris;2008-10-05 21:03:34 +0000;Add WTF_MathExtras.h to math_c99.inc.src for testing.

==

numpy/core/src/math_c99.inc.src
==================
17c1f6b;Charles Harris;2008-10-05 19:06:41 +0000;Move location of some includes for clarity. Name ufunc setup section.

==

numpy/core/src/umathmodule.c.src
==================
890f197;Charles Harris;2008-10-05 18:29:19 +0000;Merge up to r5926.

==
==================
3209563;Charles Harris;2008-10-05 18:22:35 +0000;Make it go.

==

numpy/core/src/umathmodule.c.src
==================
551a301;David Cournapeau;2008-10-05 09:28:11 +0000;Fix function prototypes decl in check_func to avoid warning with -Wstrict-prototypes.

==

numpy/distutils/command/config.py
==================
03287a6;David Cournapeau;2008-10-05 08:28:42 +0000;Merged revisions 5737-5912 via svnmerge from http://svn.scipy.org/svn/numpy/branches/clean_math_config
................
  r5738 | cdavid | 2008-09-01 21:18:52 +0900 (Mon, 01 Sep 2008) | 3 lines
  
  Initialized merge tracking via "svnmerge" with revisions "1-5737" from 
  http://svn.scipy.org/svn/numpy/trunk
................
  r5756 | cdavid | 2008-09-04 22:49:42 +0900 (Thu, 04 Sep 2008) | 1 line
  
  Add a math_c99 compatibility module.
................
  r5757 | cdavid | 2008-09-04 22:58:47 +0900 (Thu, 04 Sep 2008) | 1 line
  
  Add float and long double functions (C99).
................
  r5758 | cdavid | 2008-09-04 23:35:51 +0900 (Thu, 04 Sep 2008) | 1 line
  
  Use code generator for c99_math.c
................
  r5759 | cdavid | 2008-09-04 23:37:29 +0900 (Thu, 04 Sep 2008) | 1 line
  
  move C99 math stuff to a .src file.
................
  r5760 | cdavid | 2008-09-04 23:40:00 +0900 (Thu, 04 Sep 2008) | 1 line
  
  Add expm1 function in c99 compat module.
................
  r5761 | cdavid | 2008-09-04 23:45:33 +0900 (Thu, 04 Sep 2008) | 4 lines
  
  Use C99 math compatibility module.
  
  Completely broken for now, needs to update the configuration stage.
................
  r5762 | cdavid | 2008-09-04 23:55:01 +0900 (Thu, 04 Sep 2008) | 66 lines
  
  Merged revisions 5738-5761 via svnmerge from 
  http://svn.scipy.org/svn/numpy/trunk
  
  ........
    r5739 | cdavid | 2008-09-01 21:50:46 +0900 (Mon, 01 Sep 2008) | 1 line
    
    Disable memmap test which crashes nose tests on cygwin.
  ........
    r5740 | cdavid | 2008-09-01 22:07:30 +0900 (Mon, 01 Sep 2008) | 2 lines
    
    Fix unused variable warning in object_arrtype_new.
  ........
    r5741 | cdavid | 2008-09-02 15:59:43 +0900 (Tue, 02 Sep 2008) | 5 lines
    
    Fix regression test #771 on 64 bits architecture.
    
    The test assumed an item was 4 bytes. Use itemsize instead of harcoding 4 bytes
    per item.
  ........
    r5742 | jarrod.millman | 2008-09-03 05:13:17 +0900 (Wed, 03 Sep 2008) | 2 lines
    
    pulling out testing docs from distutils docs
  ........
    r5743 | jarrod.millman | 2008-09-03 05:32:38 +0900 (Wed, 03 Sep 2008) | 2 lines
    
    reindenting prior to release
  ........
    r5745 | jarrod.millman | 2008-09-03 08:52:37 +0900 (Wed, 03 Sep 2008) | 2 lines
    
    trunk is open for 1.3 development
  ........
    r5748 | alan.mcintyre | 2008-09-03 14:10:39 +0900 (Wed, 03 Sep 2008) | 3 lines
    
    Fix __init__.py boilerplate example in DISTUTILS.txt, and moved content from 
    SciPy wiki entry on testing guidelines to TESTS.txt.
  ........
    r5749 | alan.mcintyre | 2008-09-03 15:11:28 +0900 (Wed, 03 Sep 2008) | 3 lines
    
    Updated TESTS.txt to actually be ReST.
    Capitalization nitpickery in DISTUTILS.txt: 'Scipy' -> 'SciPy'
  ........
    r5750 | alan.mcintyre | 2008-09-03 16:49:59 +0900 (Wed, 03 Sep 2008) | 2 lines
    
    Added section discussing using subclassing to create similar tests.
  ........
    r5751 | pierregm | 2008-09-04 01:48:52 +0900 (Thu, 04 Sep 2008) | 1 line
    
    docstring update
  ........
    r5752 | cdavid | 2008-09-04 01:54:37 +0900 (Thu, 04 Sep 2008) | 1 line
    
    Start a nep for warn-free numpy build.
  ........
    r5753 | cdavid | 2008-09-04 22:31:24 +0900 (Thu, 04 Sep 2008) | 1 line
    
    Update the warnfix nep.
  ........
    r5754 | cdavid | 2008-09-04 22:36:53 +0900 (Thu, 04 Sep 2008) | 1 line
    
    Start a nep for cleaning the math configuration.
  ........
    r5755 | cdavid | 2008-09-04 22:49:01 +0900 (Thu, 04 Sep 2008) | 1 line
    
    Update clean math config nep.
  ........
................
  r5763 | cdavid | 2008-09-05 00:12:45 +0900 (Fri, 05 Sep 2008) | 1 line
  
  put the setup code to check for match cap in a separate function.
................
  r5764 | cdavid | 2008-09-05 00:31:57 +0900 (Fri, 05 Sep 2008) | 1 line
  
  Check for non-mandatory, basic, double functions.
................
  r5765 | cdavid | 2008-09-05 00:32:29 +0900 (Fri, 05 Sep 2008) | 1 line
  
  Do not build math_c99.c, only set it as a dependency.
................
  r5766 | cdavid | 2008-09-05 00:39:38 +0900 (Fri, 05 Sep 2008) | 5 lines
  
  Manually generate math_c99.c
  
  I did not find a way to generate math_c99.c from math_c99.src with distutils,
  so let's include the generated file for now.
................
  r5767 | cdavid | 2008-09-05 01:29:09 +0900 (Fri, 05 Sep 2008) | 1 line
  
  Keep the cruft for compatibility for now.
................
  r5773 | cdavid | 2008-09-05 12:12:37 +0900 (Fri, 05 Sep 2008) | 1 line
  
  Check for all float/long double C99 math funcs explicitely.
................
  r5774 | cdavid | 2008-09-05 12:15:25 +0900 (Fri, 05 Sep 2008) | 1 line
  
  Use calling version of check func.
................
  r5775 | cdavid | 2008-09-05 12:19:04 +0900 (Fri, 05 Sep 2008) | 1 line
  
  Use the way formely used by setup to set backward-compatible defines.
................
  r5776 | cdavid | 2008-09-05 14:37:06 +0900 (Fri, 05 Sep 2008) | 1 line
  
  Tell vim to recognize umathmodule.c.src as a C file.
................
  r5777 | cdavid | 2008-09-05 14:44:39 +0900 (Fri, 05 Sep 2008) | 1 line
  
  Add fmod and modf as mandatory functions.
................
  r5778 | cdavid | 2008-09-05 14:49:32 +0900 (Fri, 05 Sep 2008) | 1 line
  
  Add frexp and ldexp as the functions to lookf for C99 versions.
................
  r5779 | cdavid | 2008-09-05 15:11:26 +0900 (Fri, 05 Sep 2008) | 1 line
  
  Add a check_funcs_once function to speed up func checks.
................
  r5780 | cdavid | 2008-09-05 15:21:18 +0900 (Fri, 05 Sep 2008) | 1 line
  
  Use check_funcs_once to speed-up configuration on sane platforms.
................
  r5781 | cdavid | 2008-09-05 15:25:57 +0900 (Fri, 05 Sep 2008) | 1 line
  
  Speed up the math configuration using check_funcs_once.
................
  r5782 | cdavid | 2008-09-05 15:34:55 +0900 (Fri, 05 Sep 2008) | 1 line
  
  Fix indentation.
................
  r5783 | cdavid | 2008-09-05 15:47:10 +0900 (Fri, 05 Sep 2008) | 1 line
  
  Remove HAVE_FLOAT_FUNCS, and use function-specific HAVE_ instead.
................
  r5784 | cdavid | 2008-09-05 15:47:40 +0900 (Fri, 05 Sep 2008) | 1 line
  
  Remove HAVE_INVERSE_* for inverse hyperbolic funcs: not needed anymore.
................
  r5785 | cdavid | 2008-09-05 15:49:48 +0900 (Fri, 05 Sep 2008) | 1 line
  
  Check for isnan and isinf.
................
  r5786 | cdavid | 2008-09-05 15:59:44 +0900 (Fri, 05 Sep 2008) | 1 line
  
  Do not check for the same functions twice.
................
  r5787 | cdavid | 2008-09-05 16:00:12 +0900 (Fri, 05 Sep 2008) | 1 line
  
  ldexp is a mandatory function.
................
  r5812 | cdavid | 2008-09-13 16:04:41 +0900 (Sat, 13 Sep 2008) | 105 lines
  
  Merged revisions 5762-5811 via svnmerge from 
  http://svn.scipy.org/svn/numpy/trunk
  
  ........
    r5768 | ptvirtan | 2008-09-05 03:04:35 +0900 (Fri, 05 Sep 2008) | 1 line
    
    Ufunc docstrings: show the 'out' arguments in a more standard way
  ........
    r5769 | alan.mcintyre | 2008-09-05 03:23:48 +0900 (Fri, 05 Sep 2008) | 4 lines
    
    Replaced numpy.testing.decorators.skipknownfailure with knownfailureif, 
    which allows flagging tests as known failures rather than skips.
    Updated test_umath to use knownfailureif.
  ........
    r5770 | alan.mcintyre | 2008-09-05 06:13:29 +0900 (Fri, 05 Sep 2008) | 2 lines
    
    Renamed classes to conform to PEP 8.
  ........
    r5771 | alan.mcintyre | 2008-09-05 07:06:01 +0900 (Fri, 05 Sep 2008) | 2 lines
    
    Fix link to example.py.
  ........
    r5772 | alan.mcintyre | 2008-09-05 10:20:09 +0900 (Fri, 05 Sep 2008) | 2 lines
    
    Remove debugging code.
  ........
    r5788 | dhuard | 2008-09-05 22:58:00 +0900 (Fri, 05 Sep 2008) | 1 line
    
    Applied patch from R. May fixing ticket #905 (loadtxt). Fixed other bug occurring when both usecols and converters are provided. Added related regression tests.
  ........
    r5789 | oliphant | 2008-09-05 23:06:02 +0900 (Fri, 05 Sep 2008) | 1 line
    
    Add final date-time proposal.
  ........
    r5791 | pierregm | 2008-09-06 08:38:44 +0900 (Sat, 06 Sep 2008) | 1 line
    
    * fixed deepcopy of masked arrays (bug #906)
  ........
    r5793 | cdavid | 2008-09-07 16:16:28 +0900 (Sun, 07 Sep 2008) | 8 lines
    
    scons command: fix one more issue related to build dir.
    
    The distutils installation directory relative to the scons build directory was
    not always computed right. The relative position on the fs does not depend on
    the source directory (in out-of-place builds), but on the package *name*
    translated to a directly only.
  ........
    r5796 | pearu | 2008-09-09 19:55:30 +0900 (Tue, 09 Sep 2008) | 1 line
    
    Fix typo.
  ........
    r5797 | stefan | 2008-09-09 22:38:34 +0900 (Tue, 09 Sep 2008) | 2 lines
    
    FIX: Loadtxt raises on empty input (closes #908).
  ........
    r5799 | alan.mcintyre | 2008-09-10 02:48:47 +0900 (Wed, 10 Sep 2008) | 2 lines
    
    Removed unused imports.
  ........
    r5800 | pierregm | 2008-09-10 03:25:15 +0900 (Wed, 10 Sep 2008) | 1 line
    
    * make sure that minimum & maximum actually return a MaskedArray
  ........
    r5803 | pierregm | 2008-09-12 04:54:31 +0900 (Fri, 12 Sep 2008) | 1 line
    
    * fixed view for MaskedArrays w/ flexible dtype
  ........
    r5804 | jarrod.millman | 2008-09-13 04:20:26 +0900 (Sat, 13 Sep 2008) | 2 lines
    
    FIX: broken links
  ........
    r5805 | jarrod.millman | 2008-09-13 04:23:20 +0900 (Sat, 13 Sep 2008) | 2 lines
    
    FIX: broken links
  ........
    r5806 | alan.mcintyre | 2008-09-13 11:53:53 +0900 (Sat, 13 Sep 2008) | 2 lines
    
    Fix failing doctests.
  ........
    r5807 | alan.mcintyre | 2008-09-13 11:56:33 +0900 (Sat, 13 Sep 2008) | 2 lines
    
    Remove unused imports.
  ........
    r5808 | alan.mcintyre | 2008-09-13 12:40:57 +0900 (Sat, 13 Sep 2008) | 7 lines
    
    Removed unused/duplicate imports.
    Removed repeated members of __all__.
    Fixed reference to undefined "out" in functions.py:take function.
    Fixed references to undefined "N" in functions.py.
    Rewrapped lines to conform to PEP8.
    Fixed references to undefined FPE_* constants (from numpy) in util.py.
  ........
    r5809 | cdavid | 2008-09-13 15:03:30 +0900 (Sat, 13 Sep 2008) | 6 lines
    
    Fix cygwin compilation
    
    Recent version of binutils (2.18.50) do not accept 4 bytes operand for some
    opcodes like fnstsw (which always expected a 2 bytes operand). Replace the type
    of the argument from unsigned 2 bytes to unsigned 4 bytes unsigned integer.
  ........
    r5810 | cdavid | 2008-09-13 15:27:46 +0900 (Sat, 13 Sep 2008) | 1 line
    
    Tag ctypes load library tests as known failures on cygwin.
  ........
................
  r5813 | cdavid | 2008-09-13 16:16:32 +0900 (Sat, 13 Sep 2008) | 1 line
  
  Detect declaration of isnan and co only.
................
  r5814 | cdavid | 2008-09-13 16:25:51 +0900 (Sat, 13 Sep 2008) | 1 line
  
  Clean IEEE handling: define them as macro.
................
  r5815 | cdavid | 2008-09-13 16:27:25 +0900 (Sat, 13 Sep 2008) | 1 line
  
  Update generated math_c99 compat module.
................
  r5816 | cdavid | 2008-09-13 16:28:08 +0900 (Sat, 13 Sep 2008) | 1 line
  
  Remove trailing spaces.
................
  r5817 | cdavid | 2008-09-13 16:30:07 +0900 (Sat, 13 Sep 2008) | 1 line
  
  remove unused _isnan.c
................
  r5818 | cdavid | 2008-09-13 16:48:29 +0900 (Sat, 13 Sep 2008) | 1 line
  
  Fix typo in setup.py
................
  r5819 | cdavid | 2008-09-13 17:08:16 +0900 (Sat, 13 Sep 2008) | 1 line
  
  Do not depend on _isnan.c.
................
  r5820 | cdavid | 2008-09-13 17:09:02 +0900 (Sat, 13 Sep 2008) | 1 line
  
  Rename signbit replacement to signbit_d to avoid clash between macro and function.
................
  r5836 | cdavid | 2008-09-20 17:22:25 +0900 (Sat, 20 Sep 2008) | 1 line
  
  Include Python.h before math.h for declaration tests in mathlib.
................
  r5837 | cdavid | 2008-09-20 17:47:19 +0900 (Sat, 20 Sep 2008) | 1 line
  
  Remove the generated math_c99.c file from svn; generate it automatically from setup.py.
................
  r5838 | cdavid | 2008-09-20 18:48:01 +0900 (Sat, 20 Sep 2008) | 1 line
  
  Test for MSVC, because we will need to special case for this F***** compiler once again.
................
  r5839 | cdavid | 2008-09-20 19:05:52 +0900 (Sat, 20 Sep 2008) | 1 line
  
  Assume mandatory funcs available with MSVC.
................
  r5840 | cdavid | 2008-09-20 19:18:59 +0900 (Sat, 20 Sep 2008) | 1 line
  
  Fix typo in CPP define.
................
  r5841 | cdavid | 2008-09-20 19:49:01 +0900 (Sat, 20 Sep 2008) | 1 line
  
  Undef macro when using replacement functions in math_c99 module.
................
  r5842 | cdavid | 2008-09-20 19:51:35 +0900 (Sat, 20 Sep 2008) | 1 line
  
  Forgot to define M_PI if not available.
................
  r5843 | cdavid | 2008-09-20 19:53:27 +0900 (Sat, 20 Sep 2008) | 1 line
  
  Forgot to define float/long double version of log1p if not available on the platform.
................
  r5844 | cdavid | 2008-09-20 20:39:20 +0900 (Sat, 20 Sep 2008) | 78 lines
  
  Merged revisions 5812-5843 via svnmerge from 
  http://svn.scipy.org/svn/numpy/trunk
  
  ........
    r5821 | alan.mcintyre | 2008-09-14 03:04:57 +0900 (Sun, 14 Sep 2008) | 3 lines
    
    Removed unused imports.
    Standardize NumPy import as "import numpy as np".
  ........
    r5822 | alan.mcintyre | 2008-09-14 03:10:48 +0900 (Sun, 14 Sep 2008) | 6 lines
    
    Rewrapped __all__ definition to conform to PEP8.
    Standardize NumPy import as "import numpy as np".
    Removed unused imports.
    Fixed undefined reference to ndarray (should be np.ndarray).
    Fixed undefined references to exp (should be math.exp).
  ........
    r5823 | alan.mcintyre | 2008-09-14 03:15:38 +0900 (Sun, 14 Sep 2008) | 3 lines
    
    Removed unused imports.
    Fixed undefined reference to "getpackage" (from nose.util).
  ........
    r5824 | pierregm | 2008-09-14 06:17:09 +0900 (Sun, 14 Sep 2008) | 1 line
    
    MaskedArray.__new__ : make sure that we inherit the _hardmask from data (if any) instead of reverting to default.
  ........
    r5826 | alan.mcintyre | 2008-09-18 12:29:56 +0900 (Thu, 18 Sep 2008) | 4 lines
    
    Added documentation for doctests and using the skipif and knownfailureif decorators.
    Fixed indentation on the last sample snippet in the "__init__.py and setup.py" 
    section.
  ........
    r5827 | alan.mcintyre | 2008-09-18 12:33:15 +0900 (Thu, 18 Sep 2008) | 3 lines
    
    Rewrapped __all__ to conform with PEP8.
    Removed unused imports.
  ........
    r5828 | alan.mcintyre | 2008-09-18 12:33:58 +0900 (Thu, 18 Sep 2008) | 2 lines
    
    Removed unused imports.
  ........
    r5829 | alan.mcintyre | 2008-09-18 12:45:53 +0900 (Thu, 18 Sep 2008) | 3 lines
    
    Removed unused/redundant imports.
    PEP8 conformance (only one import per line).
  ........
    r5830 | alan.mcintyre | 2008-09-18 12:57:47 +0900 (Thu, 18 Sep 2008) | 2 lines
    
    Removed redundant import.
  ........
    r5831 | pierregm | 2008-09-19 02:51:55 +0900 (Fri, 19 Sep 2008) | 1 line
    
    median : fixed a bug in _median1D (there shouldn't have been an axis)
  ........
    r5832 | jarrod.millman | 2008-09-19 03:53:53 +0900 (Fri, 19 Sep 2008) | 2 lines
    
    ReSTified an URL
  ........
    r5833 | rkern | 2008-09-19 06:48:57 +0900 (Fri, 19 Sep 2008) | 1 line
    
    BUG: Override setuptools' install.run() method to correctly allow 'python setup.py install' to work.
  ........
    r5834 | pierregm | 2008-09-19 12:33:40 +0900 (Fri, 19 Sep 2008) | 1 line
    
    * fixing view to recognize dtype and type parameters, for consistency with regular ndarrays.
  ........
    r5835 | pierregm | 2008-09-20 04:43:05 +0900 (Sat, 20 Sep 2008) | 8 lines
    
    core:
    * add dtype to the repr of masked arrays w/ flexible type
    * prevent __getitem__ to return masked on flexible-type masked array
    * make sure __str__ returns something sensible for flexible dtype w/ masked fields
    * simplify the count method
    
    mrecords:
    * fixed a pb with fromrecords when the number of fields cannot be determined from the first element.
  ........
................
  r5845 | cdavid | 2008-09-21 00:58:44 +0900 (Sun, 21 Sep 2008) | 1 line
  
  Remove redundant definition of isnan and co in ufuncobject.h
................
  r5846 | cdavid | 2008-09-21 01:00:09 +0900 (Sun, 21 Sep 2008) | 1 line
  
  Use a single macro for isnan replacement.
................
  r5847 | cdavid | 2008-09-21 01:01:22 +0900 (Sun, 21 Sep 2008) | 1 line
  
  Use a single macro for isinf replacement.
................
  r5848 | cdavid | 2008-09-21 01:10:53 +0900 (Sun, 21 Sep 2008) | 1 line
  
  Move isfinite macro with isinf and isnan.
................
  r5849 | cdavid | 2008-09-21 01:11:51 +0900 (Sun, 21 Sep 2008) | 1 line
  
  Fix isfinite.
................
  r5850 | cdavid | 2008-09-21 01:12:59 +0900 (Sun, 21 Sep 2008) | 1 line
  
  Autoconf suggestion is totally bogus: isinf(nan) is false, not true.
................
  r5851 | cdavid | 2008-09-21 01:13:48 +0900 (Sun, 21 Sep 2008) | 1 line
  
  Define isfinite first, and define isinf in function of isfinite/isnan.
................
  r5852 | cdavid | 2008-09-21 01:26:30 +0900 (Sun, 21 Sep 2008) | 6 lines
  
  Fix for isfinite on VS 2003.
  
  VS 2003 seems to think it is ok to simplify x-x to 0 for float, but this is
  wrong for NaN and Inf. To  alleviate, we force the operation to occur with (x)
  + (-x).
................
  r5853 | cdavid | 2008-09-21 01:56:08 +0900 (Sun, 21 Sep 2008) | 1 line
  
  More intrinsics.
................
  r5855 | cdavid | 2008-09-21 20:39:08 +0900 (Sun, 21 Sep 2008) | 1 line
  
  Handle msvc intrisincs in check_func.
................
  r5856 | cdavid | 2008-09-21 20:39:27 +0900 (Sun, 21 Sep 2008) | 1 line
  
  Handle msvc intrisincs in check_funcs_once.
................
  r5857 | cdavid | 2008-09-21 20:50:32 +0900 (Sun, 21 Sep 2008) | 1 line
  
  define -> pragma, stupid mistake.
................
  r5858 | cdavid | 2008-09-21 20:54:48 +0900 (Sun, 21 Sep 2008) | 1 line
  
  Do not use MSVC workaround anymore, since we now can test for function even when they are intrinsincs.
................
  r5861 | cdavid | 2008-09-23 12:48:01 +0900 (Tue, 23 Sep 2008) | 9 lines
  
  Merged revisions 5844-5860 via svnmerge from 
  http://svn.scipy.org/svn/numpy/trunk
  
  ........
    r5860 | stefan | 2008-09-23 05:28:00 +0900 (Tue, 23 Sep 2008) | 2 lines
    
    Ignore unused converters in `loadtxt`.
  ........
................
  r5874 | charris | 2008-09-29 08:35:15 +0900 (Mon, 29 Sep 2008) | 4 lines
  
  Enhance code_generator to allow continuation lines.
  Small clarification in arraytypes.inc.src.
  Practice merging ;)
................
  r5882 | cdavid | 2008-09-30 13:40:13 +0900 (Tue, 30 Sep 2008) | 27 lines
  
  Merged revisions 5861-5881 via svnmerge from 
  http://svn.scipy.org/svn/numpy/trunk
  
  ........
    r5862 | ptvirtan | 2008-09-24 20:50:38 +0900 (Wed, 24 Sep 2008) | 1 line
    
    Fix python2.5 dependency in lookfor
  ........
    r5869 | pierregm | 2008-09-29 02:27:37 +0900 (Mon, 29 Sep 2008) | 3 lines
    
    core:
    * added __rmul and __radd__
    * fixed concatenate for flexible-dtype
  ........
    r5878 | ptvirtan | 2008-09-30 02:23:43 +0900 (Tue, 30 Sep 2008) | 1 line
    
    Umath tests: remove signed zero check on branch cut for log* as it fails on some platforms.
  ........
    r5879 | pierregm | 2008-09-30 05:24:29 +0900 (Tue, 30 Sep 2008) | 1 line
    
    use if ...: raise AssertionError instead of assert
  ........
    r5880 | pierregm | 2008-09-30 05:24:56 +0900 (Tue, 30 Sep 2008) | 1 line
    
    replaced assert with self.failUnless
  ........
................
  r5898 | cdavid | 2008-10-03 16:21:00 +0900 (Fri, 03 Oct 2008) | 1 line
  
  Start updating numscons configuration for new math config.
................
  r5899 | cdavid | 2008-10-03 16:21:15 +0900 (Fri, 03 Oct 2008) | 1 line
  
  Add an help function to check a list of functions in scons build.
................
  r5900 | cdavid | 2008-10-03 16:21:31 +0900 (Fri, 03 Oct 2008) | 1 line
  
  Fix typo in check_funcs.
................
  r5901 | cdavid | 2008-10-03 16:21:46 +0900 (Fri, 03 Oct 2008) | 1 line
  
  Check for some optional, C99 double math functions.
................
  r5902 | cdavid | 2008-10-03 16:22:02 +0900 (Fri, 03 Oct 2008) | 1 line
  
  Check for float/long double C99 functions.
................
  r5903 | cdavid | 2008-10-03 16:22:18 +0900 (Fri, 03 Oct 2008) | 1 line
  
  Add check for C99 macros related IEEE-754.
................
  r5904 | cdavid | 2008-10-03 16:22:34 +0900 (Fri, 03 Oct 2008) | 1 line
  
  Remove old configuration checks, supersded by new math config.
................
  r5905 | cdavid | 2008-10-03 16:22:57 +0900 (Fri, 03 Oct 2008) | 1 line
  
  Generate math_c99.inc in numscons build.
................
  r5912 | cdavid | 2008-10-05 16:00:33 +0900 (Sun, 05 Oct 2008) | 39 lines
  
  Merged revisions 5882-5911 via svnmerge from 
  http://svn.scipy.org/svn/numpy/trunk
  
  ........
    r5886 | charris | 2008-10-02 03:05:29 +0900 (Thu, 02 Oct 2008) | 4 lines
    
    Make some error messages more informative.
    Improve error handling.
    Make continuation lines work.
  ........
    r5887 | charris | 2008-10-02 03:06:04 +0900 (Thu, 02 Oct 2008) | 2 lines
    
    Small cleanup to clarify repeated string.
  ........
    r5888 | charris | 2008-10-02 03:08:41 +0900 (Thu, 02 Oct 2008) | 6 lines
    
    Cleanup ufunc loops.
    At this point loops are separated into variable kinds, so there is a fair amount
    of duplication. I will probably merge loops that look the same in a later
    commit. There are no changes to current behavior of loops, this will also be
    changed in later work to deal with nans and such.
  ........
    r5889 | oliphant | 2008-10-03 05:27:17 +0900 (Fri, 03 Oct 2008) | 1 line
    
    Fix problem with subclasses of object arrays.
  ........
    r5896 | cdavid | 2008-10-03 15:50:32 +0900 (Fri, 03 Oct 2008) | 1 line
    
    Update the minimum version for numscons: had to change to cope with Chuck changes to conv_template.py.
  ........
    r5897 | cdavid | 2008-10-03 15:51:03 +0900 (Fri, 03 Oct 2008) | 1 line
    
    Update doall script: take the python version to build binaries from the command line instead of global variable.
  ........
    r5906 | oliphant | 2008-10-04 00:55:52 +0900 (Sat, 04 Oct 2008) | 1 line
    
    Fix ticket #925
  ........
................

==
==================
50d1e8e;David Cournapeau;2008-10-05 07:00:33 +0000;Merged revisions 5882-5911 via svnmerge from http://svn.scipy.org/svn/numpy/trunk
........
  r5886 | charris | 2008-10-02 03:05:29 +0900 (Thu, 02 Oct 2008) | 4 lines
  
  Make some error messages more informative.
  Improve error handling.
  Make continuation lines work.
........
  r5887 | charris | 2008-10-02 03:06:04 +0900 (Thu, 02 Oct 2008) | 2 lines
  
  Small cleanup to clarify repeated string.
........
  r5888 | charris | 2008-10-02 03:08:41 +0900 (Thu, 02 Oct 2008) | 6 lines
  
  Cleanup ufunc loops.
  At this point loops are separated into variable kinds, so there is a fair amount
  of duplication. I will probably merge loops that look the same in a later
  commit. There are no changes to current behavior of loops, this will also be
  changed in later work to deal with nans and such.
........
  r5889 | oliphant | 2008-10-03 05:27:17 +0900 (Fri, 03 Oct 2008) | 1 line
  
  Fix problem with subclasses of object arrays.
........
  r5896 | cdavid | 2008-10-03 15:50:32 +0900 (Fri, 03 Oct 2008) | 1 line
  
  Update the minimum version for numscons: had to change to cope with Chuck changes to conv_template.py.
........
  r5897 | cdavid | 2008-10-03 15:51:03 +0900 (Fri, 03 Oct 2008) | 1 line
  
  Update doall script: take the python version to build binaries from the command line instead of global variable.
........
  r5906 | oliphant | 2008-10-04 00:55:52 +0900 (Sat, 04 Oct 2008) | 1 line
  
  Fix ticket #925
........

==
==================
2ee2f82;Charles Harris;2008-10-05 05:36:57 +0000;More constant type cleanups. USE CLE,CGE for complex compare macros instead of LE & GE.

==

numpy/core/src/umathmodule.c.src
==================
bdb51a6;Charles Harris;2008-10-05 05:29:09 +0000;Cleanup some floating constant types. Make cast from double explicit for integer kind reciprocal. Small style cleanup.

==

numpy/core/src/umathmodule.c.src
==================
10ed170;Charles Harris;2008-10-05 05:19:52 +0000;Fix invalid use of identity fmax,fmin.

==

numpy/core/code_generators/generate_umath.py
numpy/core/include/numpy/ufuncobject.h
==================
176328e;Charles Harris;2008-10-04 01:54:58 +0000;Try include fix in WTF_MathExtras.h file

==

numpy/core/include/numpy/WTF_MathExtras.h
==================
98f4cd2;Charles Harris;2008-10-04 01:02:11 +0000;Update to trunk. Add WTF_MathExtras.h from Apple to see if it fixes some windows problems.

==

numpy/core/include/numpy/WTF_MathExtras.h
numpy/core/src/ufuncobject.c
numpy/core/src/umathmodule.c.src
numpy/core/tests/test_umath.py
numpy/distutils/command/scons.py
tools/win32build/doall.py
==================
a0e082a;Travis Oliphant;2008-10-03 15:55:52 +0000;Fix ticket #925

==

numpy/core/code_generators/numpy_api_order.txt
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/core/tests/test_multiarray.py
==================
0273ac8;David Cournapeau;2008-10-03 07:22:57 +0000;Generate math_c99.inc in numscons build.

==

numpy/core/SConscript
==================
8b2ae8d;David Cournapeau;2008-10-03 07:22:34 +0000;Remove old configuration checks, supersded by new math config.

==

numpy/core/SConscript
==================
7bfd6f1;David Cournapeau;2008-10-03 07:22:18 +0000;Add check for C99 macros related IEEE-754.

==

numpy/core/SConscript
==================
26dc211;David Cournapeau;2008-10-03 07:22:02 +0000;Check for float/long double C99 functions.

==

numpy/core/SConscript
==================
f1cd9b0;David Cournapeau;2008-10-03 07:21:46 +0000;Check for some optional, C99 double math functions.

==

numpy/core/SConscript
==================
27f4075;David Cournapeau;2008-10-03 07:21:31 +0000;Fix typo in check_funcs.

==

numpy/core/SConscript
==================
48a01ee;David Cournapeau;2008-10-03 07:21:15 +0000;Add an help function to check a list of functions in scons build.

==

numpy/core/SConscript
==================
384e892;David Cournapeau;2008-10-03 07:21:00 +0000;Start updating numscons configuration for new math config.

==

numpy/core/SConscript
==================
b65b21c;David Cournapeau;2008-10-03 06:51:03 +0000;Update doall script: take the python version to build binaries from the command line instead of global variable.

==

tools/win32build/doall.py
==================
df327a9;David Cournapeau;2008-10-03 06:50:32 +0000;Update the minimum version for numscons: had to change to cope with Chuck changes to conv_template.py.

==

numpy/distutils/command/scons.py
==================
5055ae6;Charles Harris;2008-10-03 02:22:31 +0000;Make the complex nans returned from fmax/fmin/maximum/minimum have both real and imaginary parts set to nan.

==

numpy/core/src/umathmodule.c.src
==================
658bada;Charles Harris;2008-10-03 02:19:17 +0000;Add fmax, fmin functions for floats and complex. These conform to the ieee standard for these functions. For numpy they are extended to complex numbers, where a complex is considered a nan if either the real or complex part is. In this case nan + nan*1j is returned if both arguments are nans.
Modify maximum and minimum so that if either input is nan, then nan is returned.
Likewise for the complex version.

==

numpy/core/code_generators/generate_umath.py
numpy/core/src/umathmodule.c.src
==================
7469d1a;Charles Harris;2008-10-03 02:11:50 +0000;Add assert_ to testing module. Use as assert_(condition, message). This function does not disappear when python runs with the -OO option.

==

numpy/testing/utils.py
==================
823cda9;Charles Harris;2008-10-03 02:04:10 +0000;Add PyUFunc_Nan.

==

numpy/core/include/numpy/ufuncobject.h
==================
6d5283a;Travis Oliphant;2008-10-02 20:27:17 +0000;Fix problem with subclasses of object arrays.

==

numpy/core/src/ufuncobject.c
numpy/core/tests/test_umath.py
==================
dd96fbd;Charles Harris;2008-10-01 18:08:41 +0000;Cleanup ufunc loops. At this point loops are separated into variable kinds, so there is a fair amount of duplication. I will probably merge loops that look the same in a later commit. There are no changes to current behavior of loops, this will also be changed in later work to deal with nans and such.

==

numpy/core/src/umathmodule.c.src
==================
0e61aff;Charles Harris;2008-10-01 18:06:04 +0000;Small cleanup to clarify repeated string.

==

numpy/core/src/arraytypes.inc.src
==================
f9a3ee9;Charles Harris;2008-10-01 18:05:29 +0000;Make some error messages more informative. Improve error handling. Make continuation lines work.

==

numpy/distutils/conv_template.py
==================
1b55c85;Charles Harris;2008-10-01 17:16:05 +0000;Change conv_template.py to work with continuation lines. Clarify repeated substitution in arraytypes.inc.src. Cleanup ufunc loops.

==

numpy/core/src/arraytypes.inc.src
numpy/core/src/umathmodule.c.src
numpy/distutils/conv_template.py
==================
9ae2bfa;David Cournapeau;2008-09-30 04:40:13 +0000;Merged revisions 5861-5881 via svnmerge from http://svn.scipy.org/svn/numpy/trunk
........
  r5862 | ptvirtan | 2008-09-24 20:50:38 +0900 (Wed, 24 Sep 2008) | 1 line
  
  Fix python2.5 dependency in lookfor
........
  r5869 | pierregm | 2008-09-29 02:27:37 +0900 (Mon, 29 Sep 2008) | 3 lines
  
  core:
  * added __rmul and __radd__
  * fixed concatenate for flexible-dtype
........
  r5878 | ptvirtan | 2008-09-30 02:23:43 +0900 (Tue, 30 Sep 2008) | 1 line
  
  Umath tests: remove signed zero check on branch cut for log* as it fails on some platforms.
........
  r5879 | pierregm | 2008-09-30 05:24:29 +0900 (Tue, 30 Sep 2008) | 1 line
  
  use if ...: raise AssertionError instead of assert
........
  r5880 | pierregm | 2008-09-30 05:24:56 +0900 (Tue, 30 Sep 2008) | 1 line
  
  replaced assert with self.failUnless
........

==
==================
5916fc4;pierregm;2008-09-29 20:24:56 +0000;replaced assert with self.failUnless

==

numpy/ma/tests/test_core.py
numpy/ma/tests/test_extras.py
numpy/ma/tests/test_mrecords.py
numpy/ma/tests/test_subclassing.py
==================
05921b0;pierregm;2008-09-29 20:24:29 +0000;use if ...: raise AssertionError instead of assert

==

numpy/ma/testutils.py
==================
fb79230;Pauli Virtanen;2008-09-29 17:23:43 +0000;Umath tests: remove signed zero check on branch cut for log* as it fails on some platforms.

==

numpy/core/tests/test_umath.py
==================
c43202e;Charles Harris;2008-09-28 23:35:15 +0000;Enhance code_generator to allow continuation lines. Small clarification in arraytypes.inc.src. Practice merging ;)

==

numpy/core/src/arraytypes.inc.src
numpy/distutils/conv_template.py
==================
855ede0;pierregm;2008-09-28 17:27:37 +0000;core: * added __rmul and __radd__ * fixed concatenate for flexible-dtype

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
55f467b;Pauli Virtanen;2008-09-24 11:50:38 +0000;Fix python2.5 dependency in lookfor

==

numpy/lib/utils.py
==================
96b1aa6;David Cournapeau;2008-09-23 03:48:01 +0000;Merged revisions 5844-5860 via svnmerge from http://svn.scipy.org/svn/numpy/trunk
........
  r5860 | stefan | 2008-09-23 05:28:00 +0900 (Tue, 23 Sep 2008) | 2 lines
  
  Ignore unused converters in `loadtxt`.
........

==
==================
f1855ef;Stefan van der Walt;2008-09-22 20:28:00 +0000;Ignore unused converters in `loadtxt`.

==

numpy/lib/io.py
numpy/lib/tests/test_io.py
==================
9536dc2;David Cournapeau;2008-09-21 11:54:48 +0000;Do not use MSVC workaround anymore, since we now can test for function even when they are intrinsincs.

==

numpy/core/setup.py
==================
6584cd2;David Cournapeau;2008-09-21 11:50:32 +0000;define -> pragma, stupid mistake.

==

numpy/distutils/command/config.py
==================
65cb676;David Cournapeau;2008-09-21 11:39:27 +0000;Handle msvc intrisincs in check_funcs_once.

==

numpy/distutils/command/config.py
==================
1a55527;David Cournapeau;2008-09-21 11:39:08 +0000;Handle msvc intrisincs in check_func.

==

numpy/distutils/command/config.py
==================
bb8440c;David Cournapeau;2008-09-20 16:56:08 +0000;More intrinsics.

==

numpy/core/setup.py
==================
c372fc1;David Cournapeau;2008-09-20 16:26:30 +0000;Fix for isfinite on VS 2003.
VS 2003 seems to think it is ok to simplify x-x to 0 for float, but this is
wrong for NaN and Inf. To  alleviate, we force the operation to occur with (x)
+ (-x).

==

numpy/core/src/math_c99.inc.src
==================
bc45f6b;David Cournapeau;2008-09-20 16:13:48 +0000;Define isfinite first, and define isinf in function of isfinite/isnan.

==

numpy/core/src/math_c99.inc.src
==================
50a276b;David Cournapeau;2008-09-20 16:12:59 +0000;Autoconf suggestion is totally bogus: isinf(nan) is false, not true.

==

numpy/core/src/math_c99.inc.src
==================
b0747c0;David Cournapeau;2008-09-20 16:11:51 +0000;Fix isfinite.

==

numpy/core/src/math_c99.inc.src
==================
30c8fc7;David Cournapeau;2008-09-20 16:10:53 +0000;Move isfinite macro with isinf and isnan.

==

numpy/core/src/math_c99.inc.src
==================
5447965;David Cournapeau;2008-09-20 16:01:22 +0000;Use a single macro for isinf replacement.

==

numpy/core/src/math_c99.inc.src
==================
3595d10;David Cournapeau;2008-09-20 16:00:09 +0000;Use a single macro for isnan replacement.

==

numpy/core/src/math_c99.inc.src
==================
ef37f84;David Cournapeau;2008-09-20 15:58:44 +0000;Remove redundant definition of isnan and co in ufuncobject.h

==

numpy/core/include/numpy/ufuncobject.h
==================
99c765d;David Cournapeau;2008-09-20 11:39:20 +0000;Merged revisions 5812-5843 via svnmerge from http://svn.scipy.org/svn/numpy/trunk
........
  r5821 | alan.mcintyre | 2008-09-14 03:04:57 +0900 (Sun, 14 Sep 2008) | 3 lines
  
  Removed unused imports.
  Standardize NumPy import as "import numpy as np".
........
  r5822 | alan.mcintyre | 2008-09-14 03:10:48 +0900 (Sun, 14 Sep 2008) | 6 lines
  
  Rewrapped __all__ definition to conform to PEP8.
  Standardize NumPy import as "import numpy as np".
  Removed unused imports.
  Fixed undefined reference to ndarray (should be np.ndarray).
  Fixed undefined references to exp (should be math.exp).
........
  r5823 | alan.mcintyre | 2008-09-14 03:15:38 +0900 (Sun, 14 Sep 2008) | 3 lines
  
  Removed unused imports.
  Fixed undefined reference to "getpackage" (from nose.util).
........
  r5824 | pierregm | 2008-09-14 06:17:09 +0900 (Sun, 14 Sep 2008) | 1 line
  
  MaskedArray.__new__ : make sure that we inherit the _hardmask from data (if any) instead of reverting to default.
........
  r5826 | alan.mcintyre | 2008-09-18 12:29:56 +0900 (Thu, 18 Sep 2008) | 4 lines
  
  Added documentation for doctests and using the skipif and knownfailureif decorators.
  Fixed indentation on the last sample snippet in the "__init__.py and setup.py" 
  section.
........
  r5827 | alan.mcintyre | 2008-09-18 12:33:15 +0900 (Thu, 18 Sep 2008) | 3 lines
  
  Rewrapped __all__ to conform with PEP8.
  Removed unused imports.
........
  r5828 | alan.mcintyre | 2008-09-18 12:33:58 +0900 (Thu, 18 Sep 2008) | 2 lines
  
  Removed unused imports.
........
  r5829 | alan.mcintyre | 2008-09-18 12:45:53 +0900 (Thu, 18 Sep 2008) | 3 lines
  
  Removed unused/redundant imports.
  PEP8 conformance (only one import per line).
........
  r5830 | alan.mcintyre | 2008-09-18 12:57:47 +0900 (Thu, 18 Sep 2008) | 2 lines
  
  Removed redundant import.
........
  r5831 | pierregm | 2008-09-19 02:51:55 +0900 (Fri, 19 Sep 2008) | 1 line
  
  median : fixed a bug in _median1D (there shouldn't have been an axis)
........
  r5832 | jarrod.millman | 2008-09-19 03:53:53 +0900 (Fri, 19 Sep 2008) | 2 lines
  
  ReSTified an URL
........
  r5833 | rkern | 2008-09-19 06:48:57 +0900 (Fri, 19 Sep 2008) | 1 line
  
  BUG: Override setuptools' install.run() method to correctly allow 'python setup.py install' to work.
........
  r5834 | pierregm | 2008-09-19 12:33:40 +0900 (Fri, 19 Sep 2008) | 1 line
  
  * fixing view to recognize dtype and type parameters, for consistency with regular ndarrays.
........
  r5835 | pierregm | 2008-09-20 04:43:05 +0900 (Sat, 20 Sep 2008) | 8 lines
  
  core:
  * add dtype to the repr of masked arrays w/ flexible type
  * prevent __getitem__ to return masked on flexible-type masked array
  * make sure __str__ returns something sensible for flexible dtype w/ masked fields
  * simplify the count method
  
  mrecords:
  * fixed a pb with fromrecords when the number of fields cannot be determined from the first element.
........

==
==================
7e79e39;David Cournapeau;2008-09-20 10:53:27 +0000;Forgot to define float/long double version of log1p if not available on the platform.

==

numpy/core/src/math_c99.inc.src
==================
0645f2b;David Cournapeau;2008-09-20 10:51:35 +0000;Forgot to define M_PI if not available.

==

numpy/core/src/umathmodule.c.src
==================
ba58ed7;David Cournapeau;2008-09-20 10:49:01 +0000;Undef macro when using replacement functions in math_c99 module.

==

numpy/core/src/math_c99.inc.src
==================
52648a4;David Cournapeau;2008-09-20 10:18:59 +0000;Fix typo in CPP define.

==

numpy/core/setup.py
==================
db56d90;David Cournapeau;2008-09-20 10:05:52 +0000;Assume mandatory funcs available with MSVC.

==

numpy/core/setup.py
==================
b2e8222;David Cournapeau;2008-09-20 09:48:01 +0000;Test for MSVC, because we will need to special case for this F***** compiler once again.

==

numpy/core/setup.py
==================
f633298;David Cournapeau;2008-09-20 08:47:19 +0000;Remove the generated math_c99.c file from svn; generate it automatically from setup.py.

==

numpy/core/setup.py
numpy/core/src/math_c99.c
numpy/core/src/math_c99.c.src
numpy/core/src/math_c99.inc.src
numpy/core/src/umathmodule.c.src
==================
7fd5922;David Cournapeau;2008-09-20 08:22:25 +0000;Include Python.h before math.h for declaration tests in mathlib.

==

numpy/core/setup.py
==================
3060e39;pierregm;2008-09-19 19:43:05 +0000;core: * add dtype to the repr of masked arrays w/ flexible type * prevent __getitem__ to return masked on flexible-type masked array * make sure __str__ returns something sensible for flexible dtype w/ masked fields * simplify the count method
mrecords:
* fixed a pb with fromrecords when the number of fields cannot be determined from the first element.

==

numpy/ma/core.py
numpy/ma/mrecords.py
numpy/ma/tests/test_core.py
numpy/ma/tests/test_mrecords.py
==================
a632ae1;pierregm;2008-09-19 03:33:40 +0000;* fixing view to recognize dtype and type parameters, for consistency with regular ndarrays.

==

numpy/core/records.py
==================
4abde4a;Robert Kern;2008-09-18 21:48:57 +0000;BUG: Override setuptools' install.run() method to correctly allow 'python setup.py install' to work.

==

numpy/distutils/command/install.py
==================
cfc88c9;Jarrod Millman;2008-09-18 18:53:53 +0000;ReSTified an URL

==

doc/TESTS.txt
==================
0c4ca0c;pierregm;2008-09-18 17:51:55 +0000;median : fixed a bug in _median1D (there shouldn't have been an axis)

==

numpy/ma/extras.py
numpy/ma/tests/test_extras.py
==================
79690f0;Alan McIntyre;2008-09-18 03:57:47 +0000;Removed redundant import.

==

numpy/_import_tools.py
==================
95104b8;Alan McIntyre;2008-09-18 03:45:53 +0000;Removed unused/redundant imports. PEP8 conformance (only one import per line).

==

numpy/f2py/auxfuncs.py
numpy/f2py/cb_rules.py
numpy/f2py/cfuncs.py
numpy/f2py/common_rules.py
numpy/f2py/crackfortran.py
numpy/f2py/doc/collectinput.py
numpy/f2py/f2py2e.py
numpy/f2py/f2py_testing.py
numpy/f2py/f90mod_rules.py
numpy/f2py/func2subr.py
numpy/f2py/use_rules.py
==================
3c6341f;Alan McIntyre;2008-09-18 03:33:58 +0000;Removed unused imports.

==

numpy/lib/index_tricks.py
numpy/lib/twodim_base.py
numpy/lib/utils.py
==================
5db4b88;Alan McIntyre;2008-09-18 03:33:15 +0000;Rewrapped __all__ to conform with PEP8. Removed unused imports.

==

numpy/linalg/linalg.py
==================
ccae47f;Alan McIntyre;2008-09-18 03:29:56 +0000;Added documentation for doctests and using the skipif and knownfailureif decorators. Fixed indentation on the last sample snippet in the "__init__.py and setup.py" section.

==

doc/TESTS.txt
==================
0e400c8;pierregm;2008-09-13 21:17:09 +0000;MaskedArray.__new__ : make sure that we inherit the _hardmask from data (if any) instead of reverting to default.

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
2a5163a;Alan McIntyre;2008-09-13 18:15:38 +0000;Removed unused imports. Fixed undefined reference to "getpackage" (from nose.util).

==

numpy/testing/noseclasses.py
==================
83eba77;Alan McIntyre;2008-09-13 18:10:48 +0000;Rewrapped __all__ definition to conform to PEP8. Standardize NumPy import as "import numpy as np". Removed unused imports. Fixed undefined reference to ndarray (should be np.ndarray). Fixed undefined references to exp (should be math.exp).

==

numpy/oldnumeric/arrayfns.py
numpy/oldnumeric/compat.py
numpy/oldnumeric/mlab.py
numpy/oldnumeric/rng.py
==================
e8b5097;Alan McIntyre;2008-09-13 18:04:57 +0000;Removed unused imports. Standardize NumPy import as "import numpy as np".

==

numpy/ma/bench.py
numpy/ma/core.py
numpy/ma/mrecords.py
numpy/ma/tests/test_mrecords.py
numpy/ma/testutils.py
numpy/ma/timer_comparison.py
==================
d799888;David Cournapeau;2008-09-13 08:09:02 +0000;Rename signbit replacement to signbit_d to avoid clash between macro and function.

==

numpy/core/src/_signbit.c
numpy/core/src/math_c99.c
numpy/core/src/math_c99.c.src
==================
ed31041;David Cournapeau;2008-09-13 08:08:16 +0000;Do not depend on _isnan.c.

==

numpy/core/setup.py
==================
e40e9bb;David Cournapeau;2008-09-13 07:48:29 +0000;Fix typo in setup.py

==

numpy/core/setup.py
==================
a6f566f;David Cournapeau;2008-09-13 07:30:07 +0000;remove unused _isnan.c

==

numpy/core/src/_isnan.c
==================
82e7f1c;David Cournapeau;2008-09-13 07:28:08 +0000;Remove trailing spaces.

==

numpy/core/src/math_c99.c.src
==================
8d6282e;David Cournapeau;2008-09-13 07:27:25 +0000;Update generated math_c99 compat module.

==

numpy/core/src/math_c99.c
==================
db51738;David Cournapeau;2008-09-13 07:25:51 +0000;Clean IEEE handling: define them as macro.

==

numpy/core/src/math_c99.c.src
numpy/core/src/umathmodule.c.src
==================
cd71bfd;David Cournapeau;2008-09-13 07:16:32 +0000;Detect declaration of isnan and co only.

==

numpy/core/setup.py
==================
0282bcd;David Cournapeau;2008-09-13 07:04:41 +0000;Merged revisions 5762-5811 via svnmerge from http://svn.scipy.org/svn/numpy/trunk
........
  r5768 | ptvirtan | 2008-09-05 03:04:35 +0900 (Fri, 05 Sep 2008) | 1 line
  
  Ufunc docstrings: show the 'out' arguments in a more standard way
........
  r5769 | alan.mcintyre | 2008-09-05 03:23:48 +0900 (Fri, 05 Sep 2008) | 4 lines
  
  Replaced numpy.testing.decorators.skipknownfailure with knownfailureif, 
  which allows flagging tests as known failures rather than skips.
  Updated test_umath to use knownfailureif.
........
  r5770 | alan.mcintyre | 2008-09-05 06:13:29 +0900 (Fri, 05 Sep 2008) | 2 lines
  
  Renamed classes to conform to PEP 8.
........
  r5771 | alan.mcintyre | 2008-09-05 07:06:01 +0900 (Fri, 05 Sep 2008) | 2 lines
  
  Fix link to example.py.
........
  r5772 | alan.mcintyre | 2008-09-05 10:20:09 +0900 (Fri, 05 Sep 2008) | 2 lines
  
  Remove debugging code.
........
  r5788 | dhuard | 2008-09-05 22:58:00 +0900 (Fri, 05 Sep 2008) | 1 line
  
  Applied patch from R. May fixing ticket #905 (loadtxt). Fixed other bug occurring when both usecols and converters are provided. Added related regression tests.
........
  r5789 | oliphant | 2008-09-05 23:06:02 +0900 (Fri, 05 Sep 2008) | 1 line
  
  Add final date-time proposal.
........
  r5791 | pierregm | 2008-09-06 08:38:44 +0900 (Sat, 06 Sep 2008) | 1 line
  
  * fixed deepcopy of masked arrays (bug #906)
........
  r5793 | cdavid | 2008-09-07 16:16:28 +0900 (Sun, 07 Sep 2008) | 8 lines
  
  scons command: fix one more issue related to build dir.
  
  The distutils installation directory relative to the scons build directory was
  not always computed right. The relative position on the fs does not depend on
  the source directory (in out-of-place builds), but on the package *name*
  translated to a directly only.
........
  r5796 | pearu | 2008-09-09 19:55:30 +0900 (Tue, 09 Sep 2008) | 1 line
  
  Fix typo.
........
  r5797 | stefan | 2008-09-09 22:38:34 +0900 (Tue, 09 Sep 2008) | 2 lines
  
  FIX: Loadtxt raises on empty input (closes #908).
........
  r5799 | alan.mcintyre | 2008-09-10 02:48:47 +0900 (Wed, 10 Sep 2008) | 2 lines
  
  Removed unused imports.
........
  r5800 | pierregm | 2008-09-10 03:25:15 +0900 (Wed, 10 Sep 2008) | 1 line
  
  * make sure that minimum & maximum actually return a MaskedArray
........
  r5803 | pierregm | 2008-09-12 04:54:31 +0900 (Fri, 12 Sep 2008) | 1 line
  
  * fixed view for MaskedArrays w/ flexible dtype
........
  r5804 | jarrod.millman | 2008-09-13 04:20:26 +0900 (Sat, 13 Sep 2008) | 2 lines
  
  FIX: broken links
........
  r5805 | jarrod.millman | 2008-09-13 04:23:20 +0900 (Sat, 13 Sep 2008) | 2 lines
  
  FIX: broken links
........
  r5806 | alan.mcintyre | 2008-09-13 11:53:53 +0900 (Sat, 13 Sep 2008) | 2 lines
  
  Fix failing doctests.
........
  r5807 | alan.mcintyre | 2008-09-13 11:56:33 +0900 (Sat, 13 Sep 2008) | 2 lines
  
  Remove unused imports.
........
  r5808 | alan.mcintyre | 2008-09-13 12:40:57 +0900 (Sat, 13 Sep 2008) | 7 lines
  
  Removed unused/duplicate imports.
  Removed repeated members of __all__.
  Fixed reference to undefined "out" in functions.py:take function.
  Fixed references to undefined "N" in functions.py.
  Rewrapped lines to conform to PEP8.
  Fixed references to undefined FPE_* constants (from numpy) in util.py.
........
  r5809 | cdavid | 2008-09-13 15:03:30 +0900 (Sat, 13 Sep 2008) | 6 lines
  
  Fix cygwin compilation
  
  Recent version of binutils (2.18.50) do not accept 4 bytes operand for some
  opcodes like fnstsw (which always expected a 2 bytes operand). Replace the type
  of the argument from unsigned 2 bytes to unsigned 4 bytes unsigned integer.
........
  r5810 | cdavid | 2008-09-13 15:27:46 +0900 (Sat, 13 Sep 2008) | 1 line
  
  Tag ctypes load library tests as known failures on cygwin.
........

==
==================
ec1f783;David Cournapeau;2008-09-13 06:27:46 +0000;Tag ctypes load library tests as known failures on cygwin.

==

numpy/tests/test_ctypeslib.py
==================
39a7b4a;David Cournapeau;2008-09-13 06:03:30 +0000;Fix cygwin compilation
Recent version of binutils (2.18.50) do not accept 4 bytes operand for some
opcodes like fnstsw (which always expected a 2 bytes operand). Replace the type
of the argument from unsigned 2 bytes to unsigned 4 bytes unsigned integer.

==

numpy/core/include/numpy/fenv/fenv.h
==================
e091c84;Alan McIntyre;2008-09-13 03:40:57 +0000;Removed unused/duplicate imports. Removed repeated members of __all__. Fixed reference to undefined "out" in functions.py:take function. Fixed references to undefined "N" in functions.py. Rewrapped lines to conform to PEP8. Fixed references to undefined FPE_* constants (from numpy) in util.py.

==

numpy/numarray/alter_code2.py
numpy/numarray/functions.py
numpy/numarray/numerictypes.py
numpy/numarray/session.py
numpy/numarray/util.py
==================
b1e2466;Alan McIntyre;2008-09-13 02:56:33 +0000;Remove unused imports.

==

numpy/distutils/tests/test_misc_util.py
==================
b570fbb;Alan McIntyre;2008-09-13 02:53:53 +0000;Fix failing doctests.

==

numpy/core/fromnumeric.py
numpy/core/numeric.py
==================
212163e;Jarrod Millman;2008-09-12 19:23:20 +0000;FIX: broken links

==

doc/HOWTO_BUILD_DOCS.txt
==================
5659fa7;Jarrod Millman;2008-09-12 19:20:26 +0000;FIX: broken links

==

doc/HOWTO_DOCUMENT.txt
==================
91391ca;pierregm;2008-09-11 19:54:31 +0000;* fixed view for MaskedArrays w/ flexible dtype

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
d14ca83;pierregm;2008-09-09 18:25:15 +0000;* make sure that minimum & maximum actually return a MaskedArray

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
9351f2e;Alan McIntyre;2008-09-09 17:48:47 +0000;Removed unused imports.

==

numpy/core/tests/test_regression.py
numpy/core/tests/test_scalarmath.py
numpy/core/tests/test_umath.py
numpy/fft/tests/test_fftpack.py
numpy/fft/tests/test_helper.py
numpy/lib/arraysetops.py
numpy/lib/tests/test__datasource.py
numpy/lib/tests/test_function_base.py
numpy/ma/tests/test_old_ma.py
numpy/ma/tests/test_subclassing.py
numpy/testing/utils.py
==================
27d5aff;Stefan van der Walt;2008-09-09 13:38:34 +0000;FIX: Loadtxt raises on empty input (closes #908).

==

numpy/lib/io.py
numpy/lib/tests/test_io.py
==================
b01bf6f;Pearu Peterson;2008-09-09 10:55:30 +0000;Fix typo.

==

numpy/f2py/crackfortran.py
==================
f0e69ab;David Cournapeau;2008-09-07 07:16:28 +0000;scons command: fix one more issue related to build dir.
The distutils installation directory relative to the scons build directory was
not always computed right. The relative position on the fs does not depend on
the source directory (in out-of-place builds), but on the package *name*
translated to a directly only.


==

numpy/distutils/command/scons.py
==================
c265a81;pierregm;2008-09-05 23:38:44 +0000;* fixed deepcopy of masked arrays (bug #906)

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
454911c;Travis Oliphant;2008-09-05 14:06:02 +0000;Add final date-time proposal.

==

doc/neps/datetime-proposal3.rst
doc/neps/datetime.rst
==================
ce75d26;dhuard;2008-09-05 13:58:00 +0000;Applied patch from R. May fixing ticket #905 (loadtxt). Fixed other bug occurring when both usecols and converters are provided. Added related regression tests.

==

numpy/lib/io.py
numpy/lib/tests/test_io.py
==================
cf9b2c9;David Cournapeau;2008-09-05 07:00:12 +0000;ldexp is a mandatory function.

==

numpy/core/setup.py
==================
72a6d03;David Cournapeau;2008-09-05 06:59:44 +0000;Do not check for the same functions twice.

==

numpy/core/setup.py
==================
ba7a73a;David Cournapeau;2008-09-05 06:49:48 +0000;Check for isnan and isinf.

==

numpy/core/setup.py
==================
61f689b;David Cournapeau;2008-09-05 06:47:40 +0000;Remove HAVE_INVERSE_* for inverse hyperbolic funcs: not needed anymore.

==

numpy/core/setup.py
==================
5597bfb;David Cournapeau;2008-09-05 06:47:10 +0000;Remove HAVE_FLOAT_FUNCS, and use function-specific HAVE_ instead.

==

numpy/core/src/umathmodule.c.src
==================
5b25ac3;David Cournapeau;2008-09-05 06:34:55 +0000;Fix indentation.

==

numpy/core/setup.py
==================
9b0c566;David Cournapeau;2008-09-05 06:25:57 +0000;Speed up the math configuration using check_funcs_once.

==

numpy/core/setup.py
==================
8b6a9ea;David Cournapeau;2008-09-05 06:21:18 +0000;Use check_funcs_once to speed-up configuration on sane platforms.

==

numpy/core/setup.py
==================
12becb0;David Cournapeau;2008-09-05 06:11:26 +0000;Add a check_funcs_once function to speed up func checks.

==

numpy/distutils/command/config.py
==================
e7ed47c;David Cournapeau;2008-09-05 05:49:32 +0000;Add frexp and ldexp as the functions to lookf for C99 versions.

==

numpy/core/setup.py
==================
6da52cd;David Cournapeau;2008-09-05 05:44:39 +0000;Add fmod and modf as mandatory functions.

==

numpy/core/setup.py
==================
846f39d;David Cournapeau;2008-09-05 05:37:06 +0000;Tell vim to recognize umathmodule.c.src as a C file.

==

numpy/core/src/umathmodule.c.src
==================
dccc81b;David Cournapeau;2008-09-05 03:19:04 +0000;Use the way formely used by setup to set backward-compatible defines.

==

numpy/core/setup.py
==================
adbea45;David Cournapeau;2008-09-05 03:15:25 +0000;Use calling version of check func.

==

numpy/core/setup.py
==================
e364db1;David Cournapeau;2008-09-05 03:12:37 +0000;Check for all float/long double C99 math funcs explicitely.

==

numpy/core/setup.py
==================
bcaa179;Alan McIntyre;2008-09-05 01:20:09 +0000;Remove debugging code.

==

numpy/testing/noseclasses.py
==================
e818c37;Alan McIntyre;2008-09-04 22:06:01 +0000;Fix link to example.py.

==

doc/HOWTO_DOCUMENT.txt
==================
4e343cc;Alan McIntyre;2008-09-04 21:13:29 +0000;Renamed classes to conform to PEP 8.

==

numpy/testing/noseclasses.py
numpy/testing/nosetester.py
==================
ba9a02d;Alan McIntyre;2008-09-04 18:23:48 +0000;Replaced numpy.testing.decorators.skipknownfailure with knownfailureif, which allows flagging tests as known failures rather than skips. Updated test_umath to use knownfailureif.

==

numpy/core/tests/test_umath.py
numpy/testing/decorators.py
numpy/testing/noseclasses.py
numpy/testing/nosetester.py
==================
1a8809a;Pauli Virtanen;2008-09-04 18:04:35 +0000;Ufunc docstrings: show the 'out' arguments in a more standard way

==

numpy/core/src/ufuncobject.c
numpy/core/tests/test_umath.py
==================
2fefcef;David Cournapeau;2008-09-04 16:29:09 +0000;Keep the cruft for compatibility for now.

==

numpy/core/setup.py
==================
c64375a;David Cournapeau;2008-09-04 15:39:38 +0000;Manually generate math_c99.c
I did not find a way to generate math_c99.c from math_c99.src with distutils,
so let's include the generated file for now.

==

numpy/core/setup.py
numpy/core/src/math_c99.c
==================
ecde1e1;David Cournapeau;2008-09-04 15:32:29 +0000;Do not build math_c99.c, only set it as a dependency.

==

numpy/core/setup.py
==================
5de3918;David Cournapeau;2008-09-04 15:31:57 +0000;Check for non-mandatory, basic, double functions.

==

numpy/core/setup.py
==================
a6cb50d;David Cournapeau;2008-09-04 15:12:45 +0000;put the setup code to check for match cap in a separate function.

==

numpy/core/setup.py
==================
7f5cf31;David Cournapeau;2008-09-04 14:55:01 +0000;Merged revisions 5738-5761 via svnmerge from http://svn.scipy.org/svn/numpy/trunk
........
  r5739 | cdavid | 2008-09-01 21:50:46 +0900 (Mon, 01 Sep 2008) | 1 line
  
  Disable memmap test which crashes nose tests on cygwin.
........
  r5740 | cdavid | 2008-09-01 22:07:30 +0900 (Mon, 01 Sep 2008) | 2 lines
  
  Fix unused variable warning in object_arrtype_new.
........
  r5741 | cdavid | 2008-09-02 15:59:43 +0900 (Tue, 02 Sep 2008) | 5 lines
  
  Fix regression test #771 on 64 bits architecture.
  
  The test assumed an item was 4 bytes. Use itemsize instead of harcoding 4 bytes
  per item.
........
  r5742 | jarrod.millman | 2008-09-03 05:13:17 +0900 (Wed, 03 Sep 2008) | 2 lines
  
  pulling out testing docs from distutils docs
........
  r5743 | jarrod.millman | 2008-09-03 05:32:38 +0900 (Wed, 03 Sep 2008) | 2 lines
  
  reindenting prior to release
........
  r5745 | jarrod.millman | 2008-09-03 08:52:37 +0900 (Wed, 03 Sep 2008) | 2 lines
  
  trunk is open for 1.3 development
........
  r5748 | alan.mcintyre | 2008-09-03 14:10:39 +0900 (Wed, 03 Sep 2008) | 3 lines
  
  Fix __init__.py boilerplate example in DISTUTILS.txt, and moved content from 
  SciPy wiki entry on testing guidelines to TESTS.txt.
........
  r5749 | alan.mcintyre | 2008-09-03 15:11:28 +0900 (Wed, 03 Sep 2008) | 3 lines
  
  Updated TESTS.txt to actually be ReST.
  Capitalization nitpickery in DISTUTILS.txt: 'Scipy' -> 'SciPy'
........
  r5750 | alan.mcintyre | 2008-09-03 16:49:59 +0900 (Wed, 03 Sep 2008) | 2 lines
  
  Added section discussing using subclassing to create similar tests.
........
  r5751 | pierregm | 2008-09-04 01:48:52 +0900 (Thu, 04 Sep 2008) | 1 line
  
  docstring update
........
  r5752 | cdavid | 2008-09-04 01:54:37 +0900 (Thu, 04 Sep 2008) | 1 line
  
  Start a nep for warn-free numpy build.
........
  r5753 | cdavid | 2008-09-04 22:31:24 +0900 (Thu, 04 Sep 2008) | 1 line
  
  Update the warnfix nep.
........
  r5754 | cdavid | 2008-09-04 22:36:53 +0900 (Thu, 04 Sep 2008) | 1 line
  
  Start a nep for cleaning the math configuration.
........
  r5755 | cdavid | 2008-09-04 22:49:01 +0900 (Thu, 04 Sep 2008) | 1 line
  
  Update clean math config nep.
........

==
==================
200aab3;David Cournapeau;2008-09-04 14:45:33 +0000;Use C99 math compatibility module.
Completely broken for now, needs to update the configuration stage.

==

numpy/core/setup.py
numpy/core/src/math_c99.c.src
numpy/core/src/umathmodule.c.src
==================
9776d95;David Cournapeau;2008-09-04 14:40:00 +0000;Add expm1 function in c99 compat module.

==

numpy/core/src/math_c99.c.src
==================
3f86851;David Cournapeau;2008-09-04 14:37:29 +0000;move C99 math stuff to a .src file.

==

numpy/core/src/math_c99.c
numpy/core/src/math_c99.c.src
==================
ffefc0f;David Cournapeau;2008-09-04 14:35:51 +0000;Use code generator for c99_math.c

==

numpy/core/src/math_c99.c
==================
243f04b;David Cournapeau;2008-09-04 13:58:47 +0000;Add float and long double functions (C99).

==

numpy/core/src/math_c99.c
==================
be84c8d;David Cournapeau;2008-09-04 13:49:42 +0000;Add a math_c99 compatibility module.

==
==================
cdef62a;David Cournapeau;2008-09-04 13:49:01 +0000;Update clean math config nep.

==

doc/neps/math_config_clean.txt
==================
599e23e;David Cournapeau;2008-09-04 13:36:53 +0000;Start a nep for cleaning the math configuration.

==

doc/neps/math_config_clean.txt
==================
81510b5;David Cournapeau;2008-09-04 13:31:24 +0000;Update the warnfix nep.

==

doc/neps/warnfix.txt
==================
c4abfa7;David Cournapeau;2008-09-03 16:54:37 +0000;Start a nep for warn-free numpy build.

==

doc/neps/warnfix.txt
==================
72f0512;pierregm;2008-09-03 16:48:52 +0000;docstring update

==

numpy/ma/core.py
==================
88adfe5;Alan McIntyre;2008-09-03 07:49:59 +0000;Added section discussing using subclassing to create similar tests.

==

doc/TESTS.txt
==================
d9872fe;Alan McIntyre;2008-09-03 06:11:28 +0000;Updated TESTS.txt to actually be ReST. Capitalization nitpickery in DISTUTILS.txt: 'Scipy' -> 'SciPy'

==

doc/DISTUTILS.txt
doc/TESTS.txt
==================
15025cc;Alan McIntyre;2008-09-03 05:10:39 +0000;Fix __init__.py boilerplate example in DISTUTILS.txt, and moved content from SciPy wiki entry on testing guidelines to TESTS.txt.

==

doc/DISTUTILS.txt
doc/TESTS.txt
==================
fb6fcca;Jarrod Millman;2008-09-02 23:52:37 +0000;trunk is open for 1.3 development

==

numpy/version.py
==================
d29107a;Jarrod Millman;2008-09-02 20:32:38 +0000;reindenting prior to release

==

doc/numpybook/comparison/ctypes/filter.py
doc/numpybook/comparison/ctypes/interface.py
doc/numpybook/comparison/pyrex/setup.py
doc/numpybook/comparison/timing.py
doc/numpybook/comparison/weave/filter.py
doc/numpybook/comparison/weave/inline.py
doc/numpybook/runcode.py
numpy/core/code_generators/generate_umath.py
numpy/core/memmap.py
numpy/distutils/command/scons.py
numpy/doc/subclassing.py
numpy/lib/_datasource.py
numpy/lib/scimath.py
numpy/lib/tests/test_format.py
numpy/lib/ufunclike.py
numpy/ma/core.py
numpy/testing/nosetester.py
numpy/testing/parametric.py
tools/osxbuild/build.py
tools/osxbuild/install_and_test.py
tools/win32build/build.py
tools/win32build/prepare_bootstrap.py
==================
a4a7966;Jarrod Millman;2008-09-02 20:13:17 +0000;pulling out testing docs from distutils docs

==

doc/DISTUTILS.txt
doc/TESTS.txt
==================
87d85a0;David Cournapeau;2008-09-02 06:59:43 +0000;Fix regression test #771 on 64 bits architecture.
The test assumed an item was 4 bytes. Use itemsize instead of harcoding 4 bytes
per item.

==

numpy/core/tests/test_regression.py
==================
2312fcb;David Cournapeau;2008-09-01 13:07:30 +0000;Fix unused variable warning in object_arrtype_new.

==

numpy/core/src/scalartypes.inc.src
==================
8864e08;David Cournapeau;2008-09-01 12:50:46 +0000;Disable memmap test which crashes nose tests on cygwin.

==

numpy/lib/tests/test_format.py
==================
eb91adf;David Cournapeau;2008-08-31 22:46:43 +0000;Add a configuration test like AC_CHECK_FUNCS_ONCE.

==

numpy/distutils/command/config.py
==================
eae7e11;Jarrod Millman;2008-08-31 03:28:56 +0000;moving and adding neps

==

doc/neps/datetime.rst
doc/neps/npy-format.txt
doc/neps/pep_buffer.txt
doc/npy-format.txt
doc/pep_buffer.txt
==================
a33cf51;Jarrod Millman;2008-08-31 03:17:59 +0000;out of date

==

doc/README.txt
==================
f4f6f98;Jarrod Millman;2008-08-31 03:15:55 +0000;removing auto-generated epydocs

==

doc/html/api-objects.txt
doc/html/crarr.png
doc/html/epydoc.css
doc/html/epydoc.js
doc/html/example-module.html
doc/html/example-pysrc.html
doc/html/frames.html
doc/html/help.html
doc/html/identifier-index.html
doc/html/index.html
doc/html/module-tree.html
doc/html/redirect.html
doc/html/toc-everything.html
doc/html/toc-example-module.html
doc/html/toc.html
==================
d0db38a;Travis Oliphant;2008-08-29 12:58:42 +0000;Add test for ticket #882 fix.

==

numpy/core/tests/test_regression.py
==================
adc0cc2;Travis Oliphant;2008-08-29 12:47:34 +0000;Fix 0-length sequence error in #882.

==

numpy/core/src/multiarraymodule.c
==================
ec588c7;David Cournapeau;2008-08-29 02:33:38 +0000;Fix regression test for #771.

==

numpy/core/tests/test_regression.py
==================
d08c157;David Cournapeau;2008-08-29 02:29:14 +0000;Fix reshaping 0-sized arrays.
The nocopy logic does not handle 0-sized arrays correctly, so just copy. It is
a not really useful corner case, so doing a copy should not matter much.

==

numpy/core/src/multiarraymodule.c
==================
43a2c85;David Cournapeau;2008-08-29 02:28:52 +0000;Add a regression test to show #771 failure.

==

numpy/core/tests/test_regression.py
==================
6194dc0;Charles Harris;2008-08-29 01:29:30 +0000;Make testing functions work when python is called with the -OO flag.

==

numpy/testing/utils.py
==================
78daaef;Charles Harris;2008-08-29 01:23:43 +0000;Small cleanup.

==

numpy/testing/tests/test_utils.py
==================
e4656b5;Charles Harris;2008-08-28 22:53:06 +0000;Change convolve to raise ValueError on runtime error instead of relying on assert. The latter fails when run with python -OO.

==

numpy/core/numeric.py
numpy/core/tests/test_regression.py
==================
c84e0c0;Pauli Virtanen;2008-08-27 21:49:40 +0000;Import documentation topic modules when numpy.doc is imported, so that they are easier to use. Add instructions how to view each topic.

==

numpy/doc/__init__.py
==================
da4bbe9;Travis Oliphant;2008-08-27 20:03:59 +0000;Add missing '|' for byteorder.

==

numpy/core/src/multiarraymodule.c
==================
eda3f09;Travis Oliphant;2008-08-27 14:31:18 +0000;Apply modified version of Andrew Dalke's patch in #874 to create a quicker-loading numpy.

==

numpy/_import_tools.py
numpy/core/memmap.py
numpy/core/numerictypes.py
numpy/lib/_datasource.py
numpy/lib/format.py
==================
6aa2c46;Matthew Brett;2008-08-27 10:09:59 +0000;Point to example

==

numpy/doc/subclassing.py
==================
4f7b154;Matthew Brett;2008-08-27 10:05:41 +0000;Document on subclassing

==

numpy/doc/subclassing.py
==================
dfab452;Charles Harris;2008-08-27 04:46:17 +0000;Simplify (commented out) trunc.

==

numpy/core/src/umathmodule.c.src
==================
88c8abb;Charles Harris;2008-08-27 03:17:51 +0000;Revert r5698, r5699, and r5702 until build problems are fixed. Fix ticket #878 differently.

==

numpy/core/code_generators/generate_umath.py
numpy/core/src/arrayobject.c
numpy/core/src/umathmodule.c.src
numpy/lib/ufunclike.py
==================
d4a1e79;Alan McIntyre;2008-08-27 01:48:54 +0000;Bail out of _docmethod earlier if method has no docstring.

==

numpy/testing/nosetester.py
==================
d495708;Alan McIntyre;2008-08-27 01:18:26 +0000;Make _docmethod work correctly when run with -OO

==

numpy/testing/nosetester.py
==================
edc1465;pierregm;2008-08-26 22:34:13 +0000;* fixing botched previous commit

==

numpy/ma/core.py
==================
62e4b61;pierregm;2008-08-26 22:19:44 +0000;Updated doc + -OO compatibility

==

numpy/ma/core.py
numpy/ma/extras.py
==================
755cc21;Charles Harris;2008-08-26 19:32:02 +0000;Small style cleanup. Need work for ticket #893.

==

numpy/ma/extras.py
==================
2c7654a;Charles Harris;2008-08-26 19:30:50 +0000;BUG: fix part of ticket #893

==

numpy/ma/core.py
==================
21a1087;Alan McIntyre;2008-08-26 18:41:53 +0000;Added benchmarks directory to lib/setup.py so that numpy.lib benchmarks are available in an installed NumPy. Display system configuration information when benchmarks are run.

==

numpy/lib/setup.py
numpy/testing/nosetester.py
==================
971f9fa;Stefan van der Walt;2008-08-26 05:32:57 +0000;Add NPY_FEATURE_VERSION which can be used to mark minor API version increments.

==

numpy/core/include/numpy/ndarrayobject.h
==================
96bcaf6;David Cournapeau;2008-08-25 22:06:08 +0000;Use trunc as fix implementation.

==

numpy/lib/ufunclike.py
==================
1ea2360;David Cournapeau;2008-08-25 22:06:00 +0000;Fix fix tests.

==

numpy/lib/tests/test_ufunclike.py
==================
b2d4064;David Cournapeau;2008-08-25 22:05:51 +0000;Add trunc test.

==

numpy/core/tests/test_ufunc.py
==================
4406a13;David Cournapeau;2008-08-25 22:05:29 +0000;Add a trunc function in umath module.

==

numpy/core/code_generators/docstrings.py
numpy/core/code_generators/generate_umath.py
numpy/core/src/arrayobject.c
numpy/core/src/umathmodule.c.src
==================
5b38878;David Cournapeau;2008-08-25 22:05:21 +0000;Add pure C trunc function implementations for platform which do not have it.

==

numpy/core/src/umathmodule.c.src
==================
654da29;David Cournapeau;2008-08-25 22:05:06 +0000;Detect whether trunc is available or not.

==

numpy/core/SConscript
numpy/core/setup.py
==================
672fb17;pierregm;2008-08-25 16:36:27 +0000;core    : make sure that masked_equal works with a list as input mrecords: make sure that the keys of self._optinfo are recognized as valid attributes.

==

numpy/ma/core.py
numpy/ma/mrecords.py
numpy/ma/tests/test_core.py
==================
eb70884;Alan McIntyre;2008-08-25 13:35:27 +0000;Added deprecation warning for numpy.testing.ParametricTestCase

==

numpy/testing/parametric.py
==================
6f33684;Robert Kern;2008-08-24 23:22:11 +0000;BUG: Logarithmic series needs to exclude p==0 and p==1. When the conversion of the result to C longs gives a negative number (i.e. out of bounds), reject the sample and try again until we do get something in bounds.

==

numpy/random/mtrand/distributions.c
numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
==================
124149c;Matthew Brett;2008-08-24 21:02:55 +0000;Updated memmap sync to memmap flush

==

doc/numpybook/numpybook.lyx
==================
95ab3b5;Matthew Brett;2008-08-24 20:56:30 +0000;Note on mmap size on python 2.5 from numpy book

==

numpy/core/memmap.py
==================
59034c8;Pauli Virtanen;2008-08-24 12:16:50 +0000;Fix docstring indentation

==

numpy/core/code_generators/docstrings.py
==================
7d88266;Travis Oliphant;2008-08-24 09:01:21 +0000;Fix the test and fix the arrtype_new code for scalars a little bit.

==

numpy/core/src/scalartypes.inc.src
numpy/core/tests/test_regression.py
==================
3dcec2d;David Cournapeau;2008-08-24 06:53:22 +0000;Fix debug mode with fortran compiler: the tuple for debug was too big, with an extra None (#539)

==

numpy/distutils/fcompiler/__init__.py
==================
a51e8e3;Travis Oliphant;2008-08-24 02:26:44 +0000;BUG: Fix to ticket #816: calling object_() Segfaults.

==

numpy/core/src/scalartypes.inc.src
numpy/core/tests/test_regression.py
==================
b4d3f49;Stefan van der Walt;2008-08-24 01:31:08 +0000;Update credits.

==

THANKS.txt
==================
0ce8028;Matthew Brett;2008-08-24 01:19:20 +0000;Cleaned up logic and annotation of __del__ method, with test

==

numpy/core/memmap.py
numpy/core/tests/test_memmap.py
==================
4dbfac0;Stefan van der Walt;2008-08-24 00:56:32 +0000;Remove doc/reference from setup.

==

numpy/setup.py
==================
46facee;Stefan van der Walt;2008-08-23 23:55:01 +0000;Move book to docs directory.

==

doc/DISTUTILS.txt
doc/numpybook/Figures/contiguous.eps
doc/numpybook/Figures/contiguous.fig
doc/numpybook/Figures/contiguous.pdf
doc/numpybook/Figures/fig1.eps
doc/numpybook/Figures/fig1bw.eps
doc/numpybook/Figures/fig2.eps
doc/numpybook/Figures/fig2bw.eps
doc/numpybook/Figures/hierarchy.dia
doc/numpybook/Figures/hierarchy.eps
doc/numpybook/Figures/hierarchy.fig
doc/numpybook/Figures/hierarchy.pdf
doc/numpybook/Figures/hierarchy.png
doc/numpybook/Figures/threefundamental.eps
doc/numpybook/Figures/threefundamental.fig
doc/numpybook/Figures/threefundamental.png
doc/numpybook/capi.lyx
doc/numpybook/comparison/ctypes/code.c
doc/numpybook/comparison/ctypes/filter.py
doc/numpybook/comparison/ctypes/interface.py
doc/numpybook/comparison/ctypes/newfile.dat
doc/numpybook/comparison/ctypes/timeme
doc/numpybook/comparison/f2py/add.f
doc/numpybook/comparison/f2py/add.pyf
doc/numpybook/comparison/f2py/filter.f
doc/numpybook/comparison/f2py/filter.pyf
doc/numpybook/comparison/f2py/filtermodule.c
doc/numpybook/comparison/f2py/timeme
doc/numpybook/comparison/pyrex/add.c
doc/numpybook/comparison/pyrex/add.pyx
doc/numpybook/comparison/pyrex/c_numpy.pxd
doc/numpybook/comparison/pyrex/filter.c
doc/numpybook/comparison/pyrex/filter.pyx
doc/numpybook/comparison/pyrex/setup.py
doc/numpybook/comparison/pyrex/timeme
doc/numpybook/comparison/timing.py
doc/numpybook/comparison/weave/filter.py
doc/numpybook/comparison/weave/inline.py
doc/numpybook/comparison/weave/timeme
doc/numpybook/graphics/note.eps
doc/numpybook/graphics/note.fig
doc/numpybook/graphics/note.png
doc/numpybook/graphics/tip.eps
doc/numpybook/graphics/tip.fig
doc/numpybook/graphics/tip.png
doc/numpybook/graphics/tip.xfig.fig
doc/numpybook/graphics/warning.eps
doc/numpybook/graphics/warning.fig
doc/numpybook/graphics/warning.png
doc/numpybook/mybook.layout
doc/numpybook/numpybook.lyx
doc/numpybook/runcode.py
numpy/doc/numpybook/Figures/contiguous.eps
numpy/doc/numpybook/Figures/contiguous.fig
numpy/doc/numpybook/Figures/contiguous.pdf
numpy/doc/numpybook/Figures/fig1.eps
numpy/doc/numpybook/Figures/fig1bw.eps
numpy/doc/numpybook/Figures/fig2.eps
numpy/doc/numpybook/Figures/fig2bw.eps
numpy/doc/numpybook/Figures/hierarchy.dia
numpy/doc/numpybook/Figures/hierarchy.eps
numpy/doc/numpybook/Figures/hierarchy.fig
numpy/doc/numpybook/Figures/hierarchy.pdf
numpy/doc/numpybook/Figures/hierarchy.png
numpy/doc/numpybook/Figures/threefundamental.eps
numpy/doc/numpybook/Figures/threefundamental.fig
numpy/doc/numpybook/Figures/threefundamental.png
numpy/doc/numpybook/capi.lyx
numpy/doc/numpybook/comparison/ctypes/code.c
numpy/doc/numpybook/comparison/ctypes/filter.py
numpy/doc/numpybook/comparison/ctypes/interface.py
numpy/doc/numpybook/comparison/ctypes/newfile.dat
numpy/doc/numpybook/comparison/ctypes/timeme
numpy/doc/numpybook/comparison/f2py/add.f
numpy/doc/numpybook/comparison/f2py/add.pyf
numpy/doc/numpybook/comparison/f2py/filter.f
numpy/doc/numpybook/comparison/f2py/filter.pyf
numpy/doc/numpybook/comparison/f2py/filtermodule.c
numpy/doc/numpybook/comparison/f2py/timeme
numpy/doc/numpybook/comparison/pyrex/add.c
numpy/doc/numpybook/comparison/pyrex/add.pyx
numpy/doc/numpybook/comparison/pyrex/c_numpy.pxd
numpy/doc/numpybook/comparison/pyrex/filter.c
numpy/doc/numpybook/comparison/pyrex/filter.pyx
numpy/doc/numpybook/comparison/pyrex/setup.py
numpy/doc/numpybook/comparison/pyrex/timeme
numpy/doc/numpybook/comparison/timing.py
numpy/doc/numpybook/comparison/weave/filter.py
numpy/doc/numpybook/comparison/weave/inline.py
numpy/doc/numpybook/comparison/weave/timeme
numpy/doc/numpybook/graphics/note.eps
numpy/doc/numpybook/graphics/note.fig
numpy/doc/numpybook/graphics/note.png
numpy/doc/numpybook/graphics/tip.eps
numpy/doc/numpybook/graphics/tip.fig
numpy/doc/numpybook/graphics/tip.png
numpy/doc/numpybook/graphics/tip.xfig.fig
numpy/doc/numpybook/graphics/warning.eps
numpy/doc/numpybook/graphics/warning.fig
numpy/doc/numpybook/graphics/warning.png
numpy/doc/numpybook/mybook.layout
numpy/doc/numpybook/numpybook.lyx
numpy/doc/numpybook/runcode.py
numpy/doc/reference/__init__.py
==================
d14243c;Stefan van der Walt;2008-08-23 23:38:13 +0000;Remove directories left over from move.

==
==================
5c86844;Stefan van der Walt;2008-08-23 23:17:23 +0000;Move documentation outside of source tree.  Remove `doc` import from __init__.

==

doc/CAPI.txt
doc/DISTUTILS.txt
doc/EXAMPLE_DOCSTRING.txt
doc/HOWTO_BUILD_DOCS.txt
doc/HOWTO_DOCUMENT.txt
doc/README.txt
doc/cython/MANIFEST
doc/cython/Makefile
doc/cython/README.txt
doc/cython/c_numpy.pxd
doc/cython/c_python.pxd
doc/cython/numpyx.pyx
doc/cython/run_test.py
doc/cython/setup.py
doc/example.py
doc/html/api-objects.txt
doc/html/crarr.png
doc/html/epydoc.css
doc/html/epydoc.js
doc/html/example-module.html
doc/html/example-pysrc.html
doc/html/frames.html
doc/html/help.html
doc/html/identifier-index.html
doc/html/index.html
doc/html/module-tree.html
doc/html/redirect.html
doc/html/toc-everything.html
doc/html/toc-example-module.html
doc/html/toc.html
doc/newdtype_example/example.py
doc/newdtype_example/floatint.c
doc/newdtype_example/floatint/__init__.py
doc/newdtype_example/setup.py
doc/npy-format.txt
doc/pep_buffer.txt
doc/pyrex/MANIFEST
doc/pyrex/Makefile
doc/pyrex/README.txt
doc/pyrex/c_numpy.pxd
doc/pyrex/c_python.pxd
doc/pyrex/notes
doc/pyrex/numpyx.c
doc/pyrex/numpyx.pyx
doc/pyrex/run_test.py
doc/pyrex/setup.py
doc/records.txt
doc/swig/Makefile
doc/swig/README
doc/swig/doc/Makefile
doc/swig/doc/numpy_swig.html
doc/swig/doc/numpy_swig.pdf
doc/swig/doc/numpy_swig.txt
doc/swig/doc/testing.html
doc/swig/doc/testing.pdf
doc/swig/doc/testing.txt
doc/swig/numpy.i
doc/swig/pyfragments.swg
doc/swig/test/Array.i
doc/swig/test/Array1.cxx
doc/swig/test/Array1.h
doc/swig/test/Array2.cxx
doc/swig/test/Array2.h
doc/swig/test/Farray.cxx
doc/swig/test/Farray.h
doc/swig/test/Farray.i
doc/swig/test/Fortran.cxx
doc/swig/test/Fortran.h
doc/swig/test/Fortran.i
doc/swig/test/Makefile
doc/swig/test/Matrix.cxx
doc/swig/test/Matrix.h
doc/swig/test/Matrix.i
doc/swig/test/Tensor.cxx
doc/swig/test/Tensor.h
doc/swig/test/Tensor.i
doc/swig/test/Vector.cxx
doc/swig/test/Vector.h
doc/swig/test/Vector.i
doc/swig/test/setup.py
doc/swig/test/testArray.py
doc/swig/test/testFarray.py
doc/swig/test/testFortran.py
doc/swig/test/testMatrix.py
doc/swig/test/testTensor.py
doc/swig/test/testVector.py
doc/ufuncs.txt
numpy/__init__.py
numpy/doc/CAPI.txt
numpy/doc/DISTUTILS.txt
numpy/doc/EXAMPLE_DOCSTRING.txt
numpy/doc/HOWTO_BUILD_DOCS.txt
numpy/doc/HOWTO_DOCUMENT.txt
numpy/doc/README.txt
numpy/doc/__init__.py
numpy/doc/basics.py
numpy/doc/broadcasting.py
numpy/doc/creation.py
numpy/doc/cython/MANIFEST
numpy/doc/cython/Makefile
numpy/doc/cython/README.txt
numpy/doc/cython/c_numpy.pxd
numpy/doc/cython/c_python.pxd
numpy/doc/cython/numpyx.pyx
numpy/doc/cython/run_test.py
numpy/doc/cython/setup.py
numpy/doc/example.py
numpy/doc/glossary.py
numpy/doc/howtofind.py
numpy/doc/html/api-objects.txt
numpy/doc/html/crarr.png
numpy/doc/html/epydoc.css
numpy/doc/html/epydoc.js
numpy/doc/html/example-module.html
numpy/doc/html/example-pysrc.html
numpy/doc/html/frames.html
numpy/doc/html/help.html
numpy/doc/html/identifier-index.html
numpy/doc/html/index.html
numpy/doc/html/module-tree.html
numpy/doc/html/redirect.html
numpy/doc/html/toc-everything.html
numpy/doc/html/toc-example-module.html
numpy/doc/html/toc.html
numpy/doc/indexing.py
numpy/doc/internals.py
numpy/doc/io.py
numpy/doc/jargon.py
numpy/doc/methods_vs_functions.py
numpy/doc/misc.py
numpy/doc/newdtype_example/example.py
numpy/doc/newdtype_example/floatint.c
numpy/doc/newdtype_example/floatint/__init__.py
numpy/doc/newdtype_example/setup.py
numpy/doc/npy-format.txt
numpy/doc/pep_buffer.txt
numpy/doc/performance.py
numpy/doc/pyrex/MANIFEST
numpy/doc/pyrex/Makefile
numpy/doc/pyrex/README.txt
numpy/doc/pyrex/c_numpy.pxd
numpy/doc/pyrex/c_python.pxd
numpy/doc/pyrex/notes
numpy/doc/pyrex/numpyx.c
numpy/doc/pyrex/numpyx.pyx
numpy/doc/pyrex/run_test.py
numpy/doc/pyrex/setup.py
numpy/doc/records.txt
numpy/doc/reference/basics.py
numpy/doc/reference/broadcasting.py
numpy/doc/reference/creation.py
numpy/doc/reference/glossary.py
numpy/doc/reference/howtofind.py
numpy/doc/reference/indexing.py
numpy/doc/reference/internals.py
numpy/doc/reference/io.py
numpy/doc/reference/jargon.py
numpy/doc/reference/methods_vs_functions.py
numpy/doc/reference/misc.py
numpy/doc/reference/performance.py
numpy/doc/reference/structured_arrays.py
numpy/doc/reference/ufuncs.py
numpy/doc/structured_arrays.py
numpy/doc/swig/Makefile
numpy/doc/swig/README
numpy/doc/swig/doc/Makefile
numpy/doc/swig/doc/numpy_swig.html
numpy/doc/swig/doc/numpy_swig.pdf
numpy/doc/swig/doc/numpy_swig.txt
numpy/doc/swig/doc/testing.html
numpy/doc/swig/doc/testing.pdf
numpy/doc/swig/doc/testing.txt
numpy/doc/swig/numpy.i
numpy/doc/swig/pyfragments.swg
numpy/doc/swig/test/Array.i
numpy/doc/swig/test/Array1.cxx
numpy/doc/swig/test/Array1.h
numpy/doc/swig/test/Array2.cxx
numpy/doc/swig/test/Array2.h
numpy/doc/swig/test/Farray.cxx
numpy/doc/swig/test/Farray.h
numpy/doc/swig/test/Farray.i
numpy/doc/swig/test/Fortran.cxx
numpy/doc/swig/test/Fortran.h
numpy/doc/swig/test/Fortran.i
numpy/doc/swig/test/Makefile
numpy/doc/swig/test/Matrix.cxx
numpy/doc/swig/test/Matrix.h
numpy/doc/swig/test/Matrix.i
numpy/doc/swig/test/Tensor.cxx
numpy/doc/swig/test/Tensor.h
numpy/doc/swig/test/Tensor.i
numpy/doc/swig/test/Vector.cxx
numpy/doc/swig/test/Vector.h
numpy/doc/swig/test/Vector.i
numpy/doc/swig/test/setup.py
numpy/doc/swig/test/testArray.py
numpy/doc/swig/test/testFarray.py
numpy/doc/swig/test/testFortran.py
numpy/doc/swig/test/testMatrix.py
numpy/doc/swig/test/testTensor.py
numpy/doc/swig/test/testVector.py
numpy/doc/ufuncs.py
numpy/doc/ufuncs.txt
==================
376d483;Travis Oliphant;2008-08-23 22:52:55 +0000;Trial fix to ticket #698

==

numpy/core/memmap.py
numpy/core/src/scalarmathmodule.c.src
==================
1f58f4d;Robert Kern;2008-08-23 06:14:08 +0000;BUG: reinitialize_command(**kwds) is a setuptools override of the distutils API. Set the attribute directly, instead.

==

numpy/distutils/command/build_ext.py
==================
fddd716;Robert Kern;2008-08-23 06:12:01 +0000;BUG: Allow floating point argument n to negative binomial distribution.

==

numpy/random/mtrand/distributions.c
numpy/random/mtrand/distributions.h
numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
numpy/random/tests/test_random.py
==================
ef5df7a;Stefan van der Walt;2008-08-22 21:41:19 +0000;Add missing file.

==

numpy/core/src/umath_tests.c.src
==================
5e32ad6;Stefan van der Walt;2008-08-22 19:59:27 +0000;Remove unused variable.

==

numpy/core/numerictypes.py
==================
560b873;Jarrod Millman;2008-08-22 06:11:00 +0000;reverting C-API change from r5626

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
==================
26efcc6;Stefan van der Walt;2008-08-21 19:45:02 +0000;Add tests [patch by Wenjie Fu and Hans-Andreas Engel].

==

numpy/core/setup.py
numpy/core/tests/test_ufunc.py
==================
a172a77;Travis Oliphant;2008-08-21 18:05:00 +0000;Add Guide to NumPy to numpy svn.

==

numpy/doc/numpybook/Figures/contiguous.eps
numpy/doc/numpybook/Figures/contiguous.fig
numpy/doc/numpybook/Figures/contiguous.pdf
numpy/doc/numpybook/Figures/fig1.eps
numpy/doc/numpybook/Figures/fig1bw.eps
numpy/doc/numpybook/Figures/fig2.eps
numpy/doc/numpybook/Figures/fig2bw.eps
numpy/doc/numpybook/Figures/hierarchy.dia
numpy/doc/numpybook/Figures/hierarchy.eps
numpy/doc/numpybook/Figures/hierarchy.fig
numpy/doc/numpybook/Figures/hierarchy.pdf
numpy/doc/numpybook/Figures/hierarchy.png
numpy/doc/numpybook/Figures/threefundamental.eps
numpy/doc/numpybook/Figures/threefundamental.fig
numpy/doc/numpybook/Figures/threefundamental.png
numpy/doc/numpybook/capi.lyx
numpy/doc/numpybook/comparison/ctypes/code.c
numpy/doc/numpybook/comparison/ctypes/filter.py
numpy/doc/numpybook/comparison/ctypes/interface.py
numpy/doc/numpybook/comparison/ctypes/newfile.dat
numpy/doc/numpybook/comparison/ctypes/timeme
numpy/doc/numpybook/comparison/f2py/add.f
numpy/doc/numpybook/comparison/f2py/add.pyf
numpy/doc/numpybook/comparison/f2py/filter.f
numpy/doc/numpybook/comparison/f2py/filter.pyf
numpy/doc/numpybook/comparison/f2py/filtermodule.c
numpy/doc/numpybook/comparison/f2py/timeme
numpy/doc/numpybook/comparison/pyrex/add.c
numpy/doc/numpybook/comparison/pyrex/add.pyx
numpy/doc/numpybook/comparison/pyrex/c_numpy.pxd
numpy/doc/numpybook/comparison/pyrex/filter.c
numpy/doc/numpybook/comparison/pyrex/filter.pyx
numpy/doc/numpybook/comparison/pyrex/setup.py
numpy/doc/numpybook/comparison/pyrex/timeme
numpy/doc/numpybook/comparison/timing.py
numpy/doc/numpybook/comparison/weave/filter.py
numpy/doc/numpybook/comparison/weave/inline.py
numpy/doc/numpybook/comparison/weave/timeme
numpy/doc/numpybook/graphics/note.eps
numpy/doc/numpybook/graphics/note.fig
numpy/doc/numpybook/graphics/note.png
numpy/doc/numpybook/graphics/tip.eps
numpy/doc/numpybook/graphics/tip.fig
numpy/doc/numpybook/graphics/tip.png
numpy/doc/numpybook/graphics/tip.xfig.fig
numpy/doc/numpybook/graphics/warning.eps
numpy/doc/numpybook/graphics/warning.fig
numpy/doc/numpybook/graphics/warning.png
numpy/doc/numpybook/mybook.layout
numpy/doc/numpybook/numpybook.lyx
numpy/doc/numpybook/runcode.py
==================
8e53243;Stefan van der Walt;2008-08-21 16:41:34 +0000;Update `random` docstring.

==

numpy/random/info.py
==================
06ea402;David Cournapeau;2008-08-20 23:24:24 +0000;Run scons command in build_ext instead of build.
setuptools develop run build_ext inplace, not build, so develop command in
setuptools would not call the scons command. Now, the develop mode should work
with numscons.


==

numpy/distutils/command/build.py
numpy/distutils/command/build_ext.py
==================
4fd1035;David Cournapeau;2008-08-20 23:02:44 +0000;Add a setupsconsegg.py file to build with scons and setuptools.

==

setupsconsegg.py
==================
c2329b0;David Cournapeau;2008-08-20 22:03:19 +0000;Update fenv.h for cygwin: all asm calls should be tagged as volatile.

==

numpy/core/include/numpy/fenv/fenv.h
==================
14dd0de;David Cournapeau;2008-08-20 15:48:17 +0000;Add a note on scimath.sqrt for the definition of square root as the principal square root.

==

numpy/lib/scimath.py
==================
3ee0400;Charles Harris;2008-08-19 06:33:09 +0000;Add note telling users to add new functions to the end of the list.

==

numpy/core/code_generators/ufunc_api_order.txt
==================
dc94e7c;Stefan van der Walt;2008-08-18 23:30:34 +0000;Move PyUFunc_FromFuncAndDataAndSignature to bottom of ufunc_api_order.txt [for Hans-Andreas Engel].

==

numpy/core/code_generators/ufunc_api_order.txt
==================
902dc40;Stefan van der Walt;2008-08-15 23:39:04 +0000;Move generalised ufunc functionality to the gen_ufuncs branch.

==

THANKS.txt
numpy/core/code_generators/ufunc_api_order.txt
numpy/core/include/numpy/ndarrayobject.h
numpy/core/include/numpy/ufuncobject.h
numpy/core/src/ufuncobject.c
==================
65839d7;Travis Oliphant;2008-08-15 21:15:58 +0000;Re-factor code to remove dependency of numpy.core on numpy.lib by moving issubclass_, issubsctype, and issubdtype to numpy.core.numerictypes

==

numpy/core/defmatrix.py
numpy/core/numerictypes.py
numpy/lib/utils.py
==================
73d91a6;David Cournapeau;2008-08-15 12:30:37 +0000;Split generated docstring literals for compilers which cannot handle long strings.z

==

numpy/core/code_generators/generate_umath.py
==================
1ab7e8f;Stefan van der Walt;2008-08-14 22:30:17 +0000;Fix warnings in ufunc code [patch by Wenjie Fu].

==

numpy/core/src/ufuncobject.c
==================
988642e;Stefan van der Walt;2008-08-14 21:58:13 +0000;Whitespace cleanup.  Move definition of variable to beginning of function.

==

numpy/core/src/ufuncobject.c
==================
a463980;Stefan van der Walt;2008-08-14 21:28:01 +0000;Give credit for the generalised ufunc infrastructure.

==

THANKS.txt
==================
b09124e;Stefan van der Walt;2008-08-14 21:26:45 +0000;Move declaration to appease some compilers [patch by Hans-Andreas Engel].

==

numpy/core/src/ufuncobject.c
==================
3319490;David Cournapeau;2008-08-14 20:25:50 +0000;Do not setup any compiler in scons command if noscons scripts are used.

==

numpy/distutils/command/scons.py
==================
035e18d;Stefan van der Walt;2008-08-14 20:17:21 +0000;Bump NPY_VERSION for ufunc patch.

==

numpy/core/include/numpy/ndarrayobject.h
==================
99e9127;Stefan van der Walt;2008-08-14 17:24:32 +0000;Framework for generalised ufuncs [patch by Wenjie Fu and Hans-Andreas Engel].

==

numpy/core/code_generators/ufunc_api_order.txt
numpy/core/include/numpy/ufuncobject.h
numpy/core/src/ufuncobject.c
==================
c30bb0a;chris.burns;2008-08-14 05:22:21 +0000;Add install_and_test script for osxbuild.  Update README.

==

tools/osxbuild/README.txt
tools/osxbuild/install_and_test.py
==================
dcb2e6c;Pauli Virtanen;2008-08-13 20:51:02 +0000;Remove C99 test cases; they are not guaranteed to succeed on all plaftorms, so it's better to reintroduce them only after the inf/nan handling has been addressed.

==

numpy/core/tests/test_umath.py
==================
46aaaa5;David Cournapeau;2008-08-13 19:59:21 +0000;Do not special-case for mingw32: compiler detection takes care of that now.

==

numpy/distutils/command/scons.py
==================
11a69c2;David Cournapeau;2008-08-13 19:55:09 +0000;Fix typo in build script for win32.

==

tools/win32build/build.py
==================
8b54222;Stefan van der Walt;2008-08-13 17:23:25 +0000;Unique1d will now return unique as well as reverse indices.  Fix order of returns [patch by Robert Cimrman].

==

numpy/lib/arraysetops.py
numpy/lib/tests/test_arraysetops.py
==================
086afd5;David Cournapeau;2008-08-13 16:44:35 +0000;Disable memmap test on windows because it crashes the testsuite. This has to be fixed before a rc of numpy 1.2.0, though (see#827).

==

numpy/lib/tests/test_format.py
==================
83d7c02;Stefan van der Walt;2008-08-13 00:04:08 +0000;Add Roberto de Almeida's Arrayterator.

==

THANKS.txt
numpy/lib/__init__.py
numpy/lib/arrayterator.py
numpy/lib/tests/test_arrayterator.py
==================
c05d81d;Robert Kern;2008-08-12 22:01:42 +0000;BUG: F distributions need the appropriate scale factor.

==

numpy/random/mtrand/distributions.c
==================
31b18be;pierregm;2008-08-12 21:12:14 +0000;* masked_where : force a consistency check on the shapes of the inputs

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
96a6fcc;Stefan van der Walt;2008-08-12 18:46:31 +0000;Correctly handle Fortran-contiguous arrays in SWIG wrappers.

==

numpy/doc/swig/numpy.i
numpy/doc/swig/test/Fortran.cxx
numpy/doc/swig/test/Fortran.h
numpy/doc/swig/test/Fortran.i
numpy/doc/swig/test/Makefile
numpy/doc/swig/test/setup.py
numpy/doc/swig/test/testArray.py
numpy/doc/swig/test/testFortran.py
numpy/doc/swig/test/testMatrix.py
numpy/doc/swig/test/testTensor.py
numpy/doc/swig/test/testVector.py
==================
04a0ee1;Stefan van der Walt;2008-08-12 06:56:11 +0000;More consistent nan-operations.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
7349892;David Cournapeau;2008-08-10 22:21:49 +0000;Tweak error msg when python.h not compilable with scons.

==

numpy/core/SConscript
==================
363d209;David Cournapeau;2008-08-10 21:07:36 +0000;Depends on numscons >= 0.9.1.

==

numpy/distutils/command/scons.py
==================
7bb36be;Travis Oliphant;2008-08-10 20:19:58 +0000;Fix ticket #674.

==

numpy/core/src/arrayobject.c
numpy/core/tests/test_regression.py
==================
75c15c8;Travis Oliphant;2008-08-10 20:05:49 +0000;*Full recompile needed*:  changed the name of hasobject structure member to flags in the PyArray_Descr structure and increased it's size to int

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
==================
fd932a4;David Cournapeau;2008-08-09 23:55:21 +0000;Give better error message when testing python.h fails.

==

numpy/core/SConscript
==================
4db0437;David Cournapeau;2008-08-09 23:55:01 +0000;Improve error message when scons command fails.

==

numpy/distutils/command/scons.py
==================
3f45817;Jarrod Millman;2008-08-08 04:58:32 +0000;breaking API for median

==

numpy/lib/function_base.py
==================
70ed0f2;Jarrod Millman;2008-08-08 04:33:45 +0000;ran reindent

==

numpy/__init__.py
numpy/core/code_generators/docstrings.py
numpy/core/numeric.py
numpy/core/records.py
numpy/core/scons_support.py
numpy/core/setup.py
numpy/core/setupscons.py
numpy/core/tests/test_defchararray.py
numpy/core/tests/test_defmatrix.py
numpy/core/tests/test_memmap.py
numpy/core/tests/test_numeric.py
numpy/core/tests/test_numerictypes.py
numpy/core/tests/test_records.py
numpy/core/tests/test_regression.py
numpy/core/tests/test_scalarmath.py
numpy/core/tests/test_umath.py
numpy/core/tests/test_unicode.py
numpy/distutils/command/scons.py
numpy/distutils/misc_util.py
numpy/lib/__init__.py
numpy/lib/arraysetops.py
numpy/lib/function_base.py
numpy/lib/stride_tricks.py
numpy/lib/tests/test__datasource.py
numpy/lib/tests/test_arraysetops.py
numpy/lib/tests/test_financial.py
numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_index_tricks.py
numpy/lib/tests/test_io.py
numpy/lib/tests/test_polynomial.py
numpy/lib/tests/test_regression.py
numpy/lib/tests/test_shape_base.py
numpy/lib/tests/test_twodim_base.py
numpy/lib/tests/test_ufunclike.py
numpy/ma/core.py
numpy/ma/extras.py
numpy/ma/mrecords.py
numpy/ma/tests/test_core.py
numpy/ma/tests/test_extras.py
numpy/ma/tests/test_mrecords.py
numpy/ma/tests/test_old_ma.py
numpy/ma/testutils.py
numpy/setupscons.py
numpy/testing/__init__.py
numpy/testing/decorators.py
numpy/testing/noseclasses.py
numpy/testing/nosetester.py
numpy/testing/numpytest.py
numpy/testing/parametric.py
numpy/testing/utils.py
==================
0da812e;Pauli Virtanen;2008-08-08 00:08:07 +0000;Remove piece-by-piece docstring assembly; the full texts were inserted in the docstrings in r5610

==

numpy/lib/financial.py
==================
0e475a9;Pauli Virtanen;2008-08-07 23:41:02 +0000;Fix bad string escaping in mtrand.pyx docstrings (+ regenerate mtrand.c)

==

numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
==================
0bdef19;pierregm;2008-08-07 14:50:52 +0000;* core : minor doc formatting * test_extras: switched to assert_almost_equal in TestCov and TestCorrcoef

==

numpy/ma/core.py
numpy/ma/tests/test_extras.py
==================
469c4d3;pierregm;2008-08-07 02:25:19 +0000;core * use self.__name__ for private method instances extras * fixed corrcoef * introduced diagflat

==

numpy/ma/core.py
numpy/ma/extras.py
numpy/ma/tests/test_extras.py
==================
ded1bf7;Travis Oliphant;2008-08-06 17:34:56 +0000;Fix ticket #877 along with other bugs not yet reported for data-types with titles.

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
==================
db14896;pierregm;2008-08-06 00:12:01 +0000;* MaskedArray.__new__: prevents self._optinfo to be overwritten (it's defined w/ the call to .view)

==

numpy/ma/core.py
==================
64423fd;David Cournapeau;2008-08-06 00:11:22 +0000;Always define __STDC_FORMAT_MACROS for C++ support of PRIdPTR.

==

numpy/core/include/numpy/numpyconfig.h.in
numpy/core/setup.py
==================
127d6ed;pierregm;2008-08-05 23:21:31 +0000;* added cov and corrcoef to ma.extras for compatibility

==

numpy/ma/extras.py
numpy/ma/tests/test_extras.py
==================
7f3e634;dhuard;2008-08-05 18:01:14 +0000;added comment in histogram warning.

==

numpy/lib/function_base.py
==================
df9e25e;dhuard;2008-08-05 15:43:45 +0000;Follow-up on changes to histogram semantics. `new` is now set to None by default, which triggers the new behaviour and prints a warning.

==

numpy/core/tests/test_regression.py
numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
6647bf7;Stefan van der Walt;2008-08-05 09:20:07 +0000;Merge from documentation editor.

==

numpy/__init__.py
numpy/add_newdocs.py
numpy/core/arrayprint.py
numpy/core/code_generators/docstrings.py
numpy/core/defmatrix.py
numpy/core/fromnumeric.py
numpy/core/memmap.py
numpy/core/numeric.py
numpy/core/records.py
numpy/ctypeslib.py
numpy/doc/reference/basics.py
numpy/doc/reference/broadcasting.py
numpy/doc/reference/creation.py
numpy/doc/reference/glossary.py
numpy/doc/reference/indexing.py
numpy/doc/reference/internals.py
numpy/doc/reference/structured_arrays.py
numpy/doc/reference/ufuncs.py
numpy/doc/reference/zen.py
numpy/dual.py
numpy/fft/__init__.py
numpy/fft/fftpack.py
numpy/lib/_datasource.py
numpy/lib/arraysetops.py
numpy/lib/financial.py
numpy/lib/format.py
numpy/lib/function_base.py
numpy/lib/getlimits.py
numpy/lib/index_tricks.py
numpy/lib/io.py
numpy/lib/machar.py
numpy/lib/polynomial.py
numpy/lib/shape_base.py
numpy/lib/stride_tricks.py
numpy/lib/twodim_base.py
numpy/lib/type_check.py
numpy/lib/ufunclike.py
numpy/lib/utils.py
numpy/linalg/__init__.py
numpy/linalg/linalg.py
numpy/ma/__init__.py
numpy/ma/extras.py
numpy/random/__init__.py
numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
numpy/testing/utils.py
==================
f8f44a0;David Cournapeau;2008-08-05 08:25:04 +0000;Fix NPY_INTP_FMT when C99 format available (typo + forgot to include inttypes.h),

==

numpy/core/include/numpy/ndarrayobject.h
==================
1da04e1;David Cournapeau;2008-08-05 04:11:11 +0000;Use C99 print formatting if available for NPY_INTP.

==

numpy/core/SConscript
numpy/core/include/numpy/ndarrayobject.h
numpy/core/include/numpy/numpyconfig.h.in
numpy/core/setup.py
==================
af071cf;pierregm;2008-08-04 20:16:48 +0000;* extras: fixed the definition of median

==

numpy/ma/extras.py
==================
84dbd03;pierregm;2008-08-04 18:05:11 +0000;core MaskedArray.__new__: prevents data.mask to change shape and force a copy of _data.mask

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
ce5fc0a;David Cournapeau;2008-08-04 12:00:34 +0000;Add test for #844 (inner product pb with atlas).

==

numpy/core/tests/test_blasdot.py
==================
c3de90a;pierregm;2008-08-03 23:45:49 +0000;core: * renamed _basedict to _optinfo * prevented the back propagation of _optinfo in _update_from : the __dict__ is copied only if the underlying object is not a MaskedArray * fixed getmaskarray for flexible dtype * fixed __setitem__ when filling fields (the mask might still be nomask) * _arraymethod now stores the name of the method in both self._name and self.__name__

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
9156bdc;David Cournapeau;2008-08-03 11:11:24 +0000;Fix method list sentinel in sortmodule.

==

numpy/core/src/_sortmodule.c.src
==================
7aa43a6;David Cournapeau;2008-08-03 10:47:35 +0000;Fix buggy sentinel for blasdot docstring.

==

numpy/core/blasdot/_dotblas.c
==================
be0d287;David Cournapeau;2008-08-03 09:48:55 +0000;Fix generated file location for inclusion in sdist target when building with scons.

==

numpy/core/setupscons.py
==================
f20624a;David Cournapeau;2008-08-03 09:48:36 +0000;Add function to get per package build directory when building with scons in distutils.

==

numpy/distutils/command/scons.py
==================
18fb7c2;David Cournapeau;2008-08-03 09:39:42 +0000;Revert revision, 5596 commited by error.

==

numpy/core/include/numpy/ndarrayobject.h
==================
4a0807f;David Cournapeau;2008-08-03 09:35:15 +0000;Use inttypes format if available for NPY_INTP.

==

numpy/core/include/numpy/ndarrayobject.h
==================
62dbc75;David Cournapeau;2008-08-02 08:29:20 +0000;Handle MSI builds + python 2.3 for win32 build script.

==

tools/win32build/build.py
==================
331cf00;Robert Kern;2008-08-01 20:40:01 +0000;BUG: reverting mistaken checking.

==

numpy/core/tests/test_umath.py
==================
4957e5e;Robert Kern;2008-08-01 20:38:16 +0000;BUG: Fix email addresses.

==

numpy/core/tests/test_umath.py
setup.py
==================
12cfaa0;David Cournapeau;2008-08-01 06:04:24 +0000;Handle python version in prepare_bootstrap script.

==

tools/win32build/doall.py
==================
1006c22;chris.burns;2008-07-31 23:20:39 +0000;Add doc to osxbuild script.

==

tools/osxbuild/build.py
==================
3a87305;Stefan van der Walt;2008-07-31 23:12:36 +0000;Defer tempfile import to improve startup time.

==

numpy/lib/_datasource.py
==================
2db8628;David Cournapeau;2008-07-31 16:32:49 +0000;Cosmetic changes.

==

numpy/setupscons.py
==================
3f025b5;David Cournapeau;2008-07-31 16:31:10 +0000;Handle inplace generation of __config__.

==

numpy/setupscons.py
==================
23e03f2;David Cournapeau;2008-07-31 16:30:44 +0000;Pass current package name and scons command instance to post hook.

==

numpy/distutils/command/scons.py
==================
343347a;David Cournapeau;2008-07-31 16:07:04 +0000;Change API for pre/post hooks: they should be able to take arbitrary arguments.

==

numpy/core/setupscons.py
numpy/distutils/misc_util.py
==================
76a7161;David Cournapeau;2008-07-31 16:03:32 +0000;Remove add_configres function which did nothing...

==

numpy/core/setupscons.py
numpy/distutils/misc_util.py
numpy/linalg/setupscons.py
==================
89bd486;David Cournapeau;2008-07-31 15:18:08 +0000;Make it possible to execute post/pre hooks in scons command even when no scons script is used.

==

numpy/distutils/command/scons.py
numpy/distutils/misc_util.py
==================
33e3409;David Cournapeau;2008-07-31 14:26:58 +0000;Handle inplace build option for numscons.

==

numpy/distutils/command/scons.py
==================
04ad372;David Cournapeau;2008-07-31 14:12:52 +0000;Remove test.sh script which is a leftover from scons branch.

==

test.sh
==================
0d04757;Stefan van der Walt;2008-07-30 21:12:48 +0000;Fix string type comparisons.

==

numpy/lib/io.py
==================
a80dbfe;Alan McIntyre;2008-07-30 20:50:20 +0000;Delay import from inspect to reduce startup time.

==

numpy/testing/utils.py
==================
b78d3be;Alan McIntyre;2008-07-30 20:36:33 +0000;Delay import of shlex to reduce startup time.

==

numpy/testing/numpytest.py
==================
4b2252c;Alan McIntyre;2008-07-30 20:27:23 +0000;Delay import of difflib to reduce startup time.

==

numpy/testing/utils.py
==================
b4efbf8;Alan McIntyre;2008-07-30 20:22:24 +0000;Removed unused import of glob.

==

numpy/testing/numpytest.py
==================
10ce27c;David Cournapeau;2008-07-30 09:36:40 +0000;More explicit message wrt log level.

==

numpy/distutils/command/scons.py
==================
39c75c3;David Cournapeau;2008-07-30 08:22:42 +0000;Add log-level option to scons command.

==

numpy/distutils/command/scons.py
==================
e303070;David Cournapeau;2008-07-30 07:33:48 +0000;Do not use numscons rsplit (python >= 2.4 required for numpy >= 1.2.)

==

numpy/core/scons_support.py
==================
f8b801d;David Cournapeau;2008-07-30 07:31:06 +0000;Require 0.9.0 for numscons.

==

numpy/distutils/command/scons.py
==================
4cd620b;Robert Kern;2008-07-29 22:49:45 +0000;BUG: missing import.

==

numpy/ma/extras.py
==================
9d932d5;David Cournapeau;2008-07-29 07:02:09 +0000;Handle VS 2008 in msvc_runtime_library.

==

numpy/core/SConscript
numpy/distutils/misc_util.py
==================
98a17e8;pierregm;2008-07-28 20:45:51 +0000;* core : prevent ._basedict to be incorrectly propagated

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
e3f63ef;David Cournapeau;2008-07-28 05:25:04 +0000;Set build scripts to unix ff.

==

tools/win32build/README.txt
tools/win32build/build.py
tools/win32build/doall.py
==================
20efcc4;David Cournapeau;2008-07-28 05:22:41 +0000;Remove unused nsis scripts.

==

tools/win32build/nsis_scripts/numpy-superinstaller-2.4.nsi
tools/win32build/nsis_scripts/numpy-superinstaller-2.5.nsi
==================
0a02410;David Cournapeau;2008-07-28 05:07:59 +0000;prepare_bootstrap script now handles pyver correctly, and can be set from command line.

==

tools/win32build/prepare_bootstrap.py
==================
d42999f;David Cournapeau;2008-07-28 05:01:47 +0000;Update readme for win32build tools.

==

tools/win32build/README.txt
==================
6dde6a1;David Cournapeau;2008-07-28 04:39:26 +0000;Fix path issue in nsis script.

==

tools/win32build/nsis_scripts/numpy-superinstaller.nsi.in
==================
d23e5e4;David Cournapeau;2008-07-28 04:39:13 +0000;Add top script to generate binaries from scratch.

==

tools/win32build/doall.py
==================
1b4980a;David Cournapeau;2008-07-28 04:22:40 +0000;Bootstrap script now works from scratch.

==

tools/win32build/prepare_bootstrap.py
==================
5e47de2;David Cournapeau;2008-07-28 04:21:49 +0000;Set LZMA solid compressor.

==

tools/win32build/nsis_scripts/numpy-superinstaller.nsi.in
==================
f1ff5f9;David Cournapeau;2008-07-28 04:20:37 +0000;Build all ARCHS if arch arg not given to build script.

==

tools/win32build/build.py
==================
619ae0c;David Cournapeau;2008-07-28 03:48:57 +0000;Add code-generator files in MANIFEST because distutils does not pick them up.

==

MANIFEST.in
==================
ae80bef;David Cournapeau;2008-07-28 02:29:13 +0000;Fixing MANIFEST.in on win32.

==

MANIFEST.in
==================
8a946f6;David Cournapeau;2008-07-28 02:22:13 +0000;Uncomment bootstrap tasks.

==

tools/win32build/prepare_bootstrap.py
==================
c90b955;David Cournapeau;2008-07-28 02:21:17 +0000;Add nsis template, and bootstrap script, to bootstrap win32 binary build.

==

tools/win32build/nsis_scripts/numpy-superinstaller.nsi.in
tools/win32build/prepare_bootstrap.py
==================
bd8c4ce;David Cournapeau;2008-07-28 02:05:03 +0000;Use OptionParser for win32 build script.

==

tools/win32build/build.py
==================
e1bc01f;David Cournapeau;2008-07-26 06:29:08 +0000;Add cpu_caps nsis plugin sources (to detect SSE in nsis scripts).

==

tools/win32build/cpucaps/SConstruct
tools/win32build/cpucaps/cpucaps_main.c
tools/win32build/cpucaps/cpucaps_main.h
==================
1fddb21;chris.burns;2008-07-25 18:35:17 +0000;Add script for building osx installer.

==

tools/osxbuild/README.txt
tools/osxbuild/build.py
tools/osxbuild/docs/README.txt
==================
db05eda;Alan McIntyre;2008-07-25 16:43:32 +0000;Regenerated mtrand.c after standardizing NumPy import in mtrand.pyx.

==

numpy/random/mtrand/mtrand.c
==================
8936ecc;Alan McIntyre;2008-07-25 16:09:26 +0000;Standardize NumPy import as "import numpy as np".

==

numpy/oldnumeric/random_array.py
numpy/random/mtrand/mtrand.pyx
==================
e6f61c9;Alan McIntyre;2008-07-24 05:28:37 +0000;Added tests to improve coverage. Converted tests from doctests to unit tests.

==

numpy/lib/tests/test_financial.py
==================
d409225;David Cournapeau;2008-07-24 04:29:40 +0000;Start working on a INSTALL.txt document for building/installing numpy.

==

INSTALL.txt
==================
7ad4022;David Cournapeau;2008-07-24 04:12:37 +0000;Add some more info for installing numpy.

==

README.txt
==================
252e128;Alan McIntyre;2008-07-23 13:51:45 +0000;Standardized NumPy import as "import numpy as np". Moved unique1d benchmarking code to new benchmarks directory.

==

numpy/lib/arraysetops.py
numpy/lib/benchmarks/bench_arraysetops.py
==================
1ab04d3;Alan McIntyre;2008-07-23 13:23:52 +0000;Fix doctest command continuation line.

==

numpy/lib/io.py
==================
0175369;Alan McIntyre;2008-07-23 13:17:45 +0000;Removed unused private function _castCopyAndTranspose.

==

numpy/linalg/linalg.py
==================
681aa53;Alan McIntyre;2008-07-22 23:02:29 +0000;Standardize NumPy import as "import numpy as np".

==

numpy/ma/tests/test_subclassing.py
numpy/testing/tests/test_utils.py
==================
6dd88dc;pierregm;2008-07-22 20:52:48 +0000;* force the domain to the shape of the other element in DomainedBinaryOperation (bugfix 857)

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
e9ae63e;Pauli Virtanen;2008-07-22 19:52:34 +0000;Skip one more possibly failing C99 test

==

numpy/core/tests/test_umath.py
==================
856861c;Alan McIntyre;2008-07-22 18:18:42 +0000;Added tests to improve coverage of numpy.lib.

==

numpy/lib/tests/test_arraysetops.py
numpy/lib/tests/test_format.py
numpy/lib/tests/test_function_base.py
==================
b5e26c4;Stefan van der Walt;2008-07-22 15:12:12 +0000;Clean up loadtxt. Fix Python 2.3 compatibility.

==

numpy/lib/io.py
==================
a2dcde5;Charles Harris;2008-07-22 06:37:48 +0000;Apply Stefan's patch for Ryan's loadtext fix.

==

numpy/lib/io.py
numpy/lib/tests/test_io.py
==================
e41b0e3;dhuard;2008-07-22 00:49:31 +0000;Committed patch from Ryan May. It fixes error in loadtxt occurring when usecols is not None and dtypes are given. I added the test suggested by Ryan.

==

numpy/lib/io.py
numpy/lib/tests/test_io.py
==================
75779e8;pierregm;2008-07-21 19:19:27 +0000;core: * suppressed the debugging info...

==

numpy/ma/core.py
==================
923ef80;pierregm;2008-07-21 19:17:09 +0000;core: * Make sure that the .reshape method accepts a new shape as a list (and not as a tuple only)

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
70e9b49;pierregm;2008-07-21 18:51:47 +0000;core: * fixed the reshape function/method to accept an 'order' optional parameter

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
numpy/ma/tests/test_mrecords.py
numpy/ma/tests/test_old_ma.py
==================
b8ecdad;Alan McIntyre;2008-07-21 12:36:17 +0000;Removed unused private function _asarray1d.

==

numpy/lib/function_base.py
==================
8e86b69;Alan McIntyre;2008-07-21 06:55:48 +0000;Added numpy.testing.verbose, to allow tests to vary output accordingly. Added numpy.testing.print_assert_equal, to allow removing the multiple identical implementations of this function in SciPy tests. Display version info for NumPy, Python, and nose (and SciPy when running SciPy tests), in a manner similar to the original test framework.

==

numpy/testing/nosetester.py
numpy/testing/utils.py
==================
77effdd;Alan McIntyre;2008-07-21 06:29:58 +0000;Added tests to improve coverage of numpy.core. Removed unused methods from Vec class in test_numeric.py. Renamed test in test_regression so it would be seen by nose. Removed commented test_vector_elements test in test_defmatrix.py (same tems are now tested in test_matrix_element).

==

numpy/core/tests/test_defmatrix.py
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_numeric.py
numpy/core/tests/test_records.py
numpy/core/tests/test_regression.py
==================
bd2f3c0;Charles Harris;2008-07-20 23:59:29 +0000;Fix broken regression test.

==

numpy/core/tests/test_regression.py
==================
2ba50c2;Charles Harris;2008-07-20 23:34:11 +0000;Make regression test work for reverted NaN fix.

==

numpy/core/tests/test_regression.py
==================
d045a20;Charles Harris;2008-07-20 22:52:40 +0000;Revert r5470.

==

numpy/core/src/umathmodule.c.src
==================
2de0cbb;Charles Harris;2008-07-20 20:35:02 +0000;Fix _SIGN macros for MSVC compilers. Test.

==

numpy/core/src/umathmodule.c.src
==================
20a3dc5;Charles Harris;2008-07-20 19:24:54 +0000;Fix ticket #794.

==

numpy/core/src/umathmodule.c.src
numpy/core/tests/test_regression.py
==================
5808ab5;Pauli Virtanen;2008-07-20 16:28:04 +0000;Add a pydoc import in lookfor; missed in the import refactoring.

==

numpy/lib/utils.py
==================
3db00b1;Pauli Virtanen;2008-07-20 12:05:41 +0000;Fix errors in C99 tests. Skip tests failing on some platforms.

==

numpy/core/tests/test_umath.py
==================
7a15553;Charles Harris;2008-07-20 08:29:21 +0000;Undo test of SPARC alignment.

==

numpy/ma/tests/test_mrecords.py
==================
1c82d09;Charles Harris;2008-07-20 07:46:28 +0000;Testing SPARC alignment.

==

numpy/ma/tests/test_mrecords.py
==================
da36770;Robert Kern;2008-07-20 07:27:21 +0000;BUG: Allow longs as well as ints to satisfy Win64.

==

numpy/lib/format.py
==================
ecf30dc;Pauli Virtanen;2008-07-19 22:47:12 +0000;Fix some errors in C99 tests. Skip tests failing on Sparc64

==

numpy/core/tests/test_umath.py
==================
ca75c7e;Pauli Virtanen;2008-07-19 21:58:14 +0000;Add tests for complex functions: test against Python's cmath, check the branch cuts and C99 compliance at inf, nan special points.

==

numpy/core/tests/test_umath.py
==================
a7c080e;Pauli Virtanen;2008-07-19 21:56:46 +0000;Fix arccosh branch cut. Remove one unnecessary operation from nc_asinh.

==

numpy/core/src/umathmodule.c.src
==================
d5300c2;Alan McIntyre;2008-07-19 14:15:47 +0000;Comment out extension option since it is not used at present.

==

numpy/testing/noseclasses.py
==================
df1fc32;Alan McIntyre;2008-07-19 13:50:16 +0000;Instead of importing nose plugins, use the existing list of classes that nose.plugins.builtins imports. If --with-doctest is included in extra_argv, remove it and use the NumPy doctester instead.

==

numpy/testing/nosetester.py
==================
d7611a5;Travis Oliphant;2008-07-19 04:23:52 +0000;Fix other reference count leak pointed out in #848 due to missing DECREF for typecode.

==

numpy/core/src/scalartypes.inc.src
==================
c003f55;Robert Kern;2008-07-19 01:12:16 +0000;Generate headers in the right place for inplace builds.

==

numpy/core/setup.py
numpy/distutils/misc_util.py
numpy/random/setup.py
==================
f3bef65;Alan McIntyre;2008-07-18 13:00:29 +0000;Comment cleanup. Fixed __import__ calls for Python 2.4 (__import__ doesn't take keyword args in 2.4).

==

numpy/testing/noseclasses.py
numpy/testing/nosetester.py
==================
3e4f726;Alan McIntyre;2008-07-18 12:32:27 +0000;Use a subclass of the nose doctest plugin instead of monkeypatching the builtin plugin. Removed decorators for NoseTester methods.

==

numpy/testing/noseclasses.py
numpy/testing/nosetester.py
==================
f1104f8;pierregm;2008-07-18 02:02:19 +0000;* added .torecords(), to convert a masked array to a flexible array with fields '_data' and '_mask'

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
ab911fc;pierregm;2008-07-18 00:45:23 +0000;* fixed a pb with printing flexible ndarrays with subdtypes

==

numpy/ma/core.py
==================
7a47bfa;Stefan van der Walt;2008-07-17 13:17:45 +0000;Add numpy.doc.jargon entry.

==

numpy/doc/reference/jargon.py
==================
4bc3f39;Robert Kern;2008-07-17 09:09:04 +0000;FOR BUILDBOT: More unsavory workarounds for Sparc64. Change back when we've fixed the actual bug.

==

numpy/ma/tests/test_core.py
numpy/ma/tests/test_mrecords.py
==================
16146b4;Robert Kern;2008-07-17 08:56:08 +0000;FOR BUILDBOT: Change the test to make sure the double is aligned to a reasonable boundary. It does no harm to the test, but it shouldn't be necessary. However, I need the buildbots to test it out on the Sparc64 platform for me.

==

numpy/ma/tests/test_core.py
==================
e2df0c7;pierregm;2008-07-17 04:20:42 +0000;testutils * improved check on object/record arrays
core 
* fixed filled for flexible types
* fixed the definition of the mask for flexible types

mrecords:
* fixed a bug w/ titles/formats in __new__ and __array_finalize__

==

numpy/ma/core.py
numpy/ma/mrecords.py
numpy/ma/tests/test_core.py
numpy/ma/tests/test_mrecords.py
numpy/ma/testutils.py
==================
0a9ae13;Charles Harris;2008-07-16 21:32:41 +0000;Remove blank line.

==

numpy/core/blasdot/_dotblas.c
==================
f90a924;Charles Harris;2008-07-16 21:30:07 +0000;Fix ticket #849. Thanks to Michael Abbott. The added check for NULL descr isn't really needed here because the typenums used don't allow such returns. But knowing that requires knowledge of PyArray_DescrFromType internals and not checking makes the code fragile.

==

numpy/core/blasdot/_dotblas.c
==================
75a3b81;Charles Harris;2008-07-16 21:07:48 +0000;Coding style cleanups.

==

numpy/core/blasdot/_dotblas.c
==================
b788f25;Pauli Virtanen;2008-07-16 21:01:31 +0000;Fix ticket #837. Avoid infinite loop in fromfile/fromstring by ensuring that *_skip_separator always consumes at least one character or fails.

==

numpy/core/src/multiarraymodule.c
numpy/core/tests/test_multiarray.py
==================
f48abc5;Charles Harris;2008-07-16 20:23:29 +0000;Fix ticket #850. Thanks to Michael Abbott for the patch.

==

numpy/core/src/arrayobject.c
==================
a98f7c8;Charles Harris;2008-07-16 19:46:41 +0000;Coding style cleanup. Replace hard tabs with spaces.

==

numpy/core/src/multiarraymodule.c
numpy/core/src/scalartypes.inc.src
==================
120252e;Charles Harris;2008-07-16 05:38:55 +0000;Deprecate PyArray_As2D.

==

numpy/core/src/multiarraymodule.c
==================
e10e7d9;Alan McIntyre;2008-07-16 00:36:32 +0000;Added the measure function to utils.py in support of SciPy tests.

==

numpy/testing/utils.py
==================
dc850ae;Alan McIntyre;2008-07-15 17:42:50 +0000;Added isfunction and decorate_methods in support of SciPy switching to use numpy.testing.

==

numpy/testing/utils.py
==================
9ad992f;Stefan van der Walt;2008-07-15 07:06:38 +0000;Add place-holder for doc.glossary.

==

numpy/doc/reference/glossary.py
==================
b6b6345;Alan McIntyre;2008-07-15 02:20:49 +0000;Reset doctest.master on each test run to avoid messages about "'__main__' in both testers" when test() is run multiple times.

==

numpy/testing/nosetester.py
==================
8c69b7c;Charles Harris;2008-07-14 05:37:40 +0000;Make deprecation messages more informative.

==

numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
==================
775b05a;Alan McIntyre;2008-07-14 00:29:17 +0000;Make use of assert_raises from numpy.testing, and added run_module_suite to support running test module stand-alone.

==

numpy/lib/tests/test_stride_tricks.py
==================
e227d01;Alan McIntyre;2008-07-14 00:27:38 +0000;Added tests for eigenvalue/vector functions for Hermitian matrices..

==

numpy/linalg/tests/test_linalg.py
==================
39e3051;Charles Harris;2008-07-13 23:56:51 +0000;Move DEPRECATE macro to ndarrayobject.h. Deprecate PyArray_As1D. Remove deprecated functions from fftpack_listmodule.c. There may need to be further fixes on 64 bit platforms, we will see.

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/fft/fftpack_litemodule.c
==================
c62bdcb;Charles Harris;2008-07-13 22:15:13 +0000;Indentation and coding style cleanups.

==

numpy/fft/fftpack_litemodule.c
==================
13b05ee;Alan McIntyre;2008-07-13 22:06:13 +0000;Replaced utils.raises implementation with the nose function. Added utils.assert_raises (uses the function from nose). Wrapped text for test() deprecation warning.

==

numpy/testing/nosetester.py
numpy/testing/utils.py
==================
382db35;Alan McIntyre;2008-07-13 21:47:43 +0000;Added tests to improve coverage. Renamed TestPiecewise methods so that they will be picked up by nose.

==

numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_index_tricks.py
numpy/lib/tests/test_io.py
numpy/lib/tests/test_shape_base.py
numpy/lib/tests/test_type_check.py
==================
da2a994;Alan McIntyre;2008-07-13 21:43:50 +0000;Fix doctests to run properly under new execution context.

==

numpy/lib/index_tricks.py
==================
5f1b347;Alan McIntyre;2008-07-13 21:42:52 +0000;Add tests to improve coverage.

==

numpy/core/tests/test_multiarray.py
numpy/core/tests/test_numeric.py
==================
207e37a;Charles Harris;2008-07-13 19:22:26 +0000;Fix Deprecation warnings for python versions < 2.5.x

==

numpy/core/src/arrayobject.c
==================
3030692;Charles Harris;2008-07-13 18:19:16 +0000;Deprecate PyArray_FromDims and PyArray_FromDimsAndDataAndDescr. There will be warnings issued in np.test() until fftpack is fixed.

==

numpy/core/src/arrayobject.c
==================
1dc6cce;Charles Harris;2008-07-12 23:49:10 +0000;Replace snprintf with PyOS_snprintf. There remain four occurrences of sprintf that should be replaced.

==

numpy/core/src/arrayobject.c
numpy/core/src/ufuncobject.c
==================
000bded;Charles Harris;2008-07-12 22:01:20 +0000;Bit of whitespace removal.

==

numpy/core/src/scalartypes.inc.src
numpy/core/tests/test_print.py
==================
6748d60;Charles Harris;2008-07-12 21:46:29 +0000;Add basic tests of number str() formatting.

==

numpy/core/tests/test_print.py
==================
072d2e0;Charles Harris;2008-07-12 21:45:08 +0000;Make printing of complex numbers match Python.

==

numpy/core/src/scalartypes.inc.src
==================
d7717dd;Charles Harris;2008-07-12 06:26:40 +0000;Make buffers local for reentrancy.

==

numpy/core/src/scalartypes.inc.src
==================
b81c073;Charles Harris;2008-07-12 05:17:43 +0000;Small cleanups.

==

numpy/core/src/scalartypes.inc.src
==================
6f7d69a;Charles Harris;2008-07-12 05:14:39 +0000;Coding style cleanups. Check return of PyArray_DescrNew for NULL (possible memory error).

==

numpy/core/src/arraytypes.inc.src
==================
6257555;Charles Harris;2008-07-12 05:11:32 +0000;Coding style cleanups.

==

numpy/core/src/ufuncobject.c
==================
72172da;Charles Harris;2008-07-12 05:04:40 +0000;Coding style cleanups

==

numpy/core/src/multiarraymodule.c
==================
2e578e7;Charles Harris;2008-07-12 05:01:19 +0000;Coding style cleanups.

==

numpy/core/src/arrayobject.c
==================
f2abd63;Stefan van der Walt;2008-07-10 18:26:29 +0000;Sort numpy.doc names.

==

numpy/doc/reference/__init__.py
==================
9a27253;Stefan van der Walt;2008-07-10 17:43:25 +0000;Add stubs for reference documentation.

==

numpy/doc/reference/basics.py
numpy/doc/reference/creation.py
numpy/doc/reference/howtofind.py
numpy/doc/reference/internals.py
numpy/doc/reference/io.py
numpy/doc/reference/methods_vs_functions.py
numpy/doc/reference/misc.py
numpy/doc/reference/performance.py
numpy/doc/reference/structured_arrays.py
numpy/doc/reference/ufuncs.py
numpy/doc/reference/zen.py
==================
33ffa7b;Alan McIntyre;2008-07-10 14:24:16 +0000;Comment out failing portions of  __mul__ and __rmul__ until they are fixed in chararray.

==

numpy/core/tests/test_defchararray.py
==================
86409f0;Alan McIntyre;2008-07-10 12:47:28 +0000;Improve chararray __mul__/__rmul__ test so it should fail on 64-bit machines.

==

numpy/core/tests/test_defchararray.py
==================
dcf96aa;Alan McIntyre;2008-07-10 11:50:15 +0000;Added test module for chararray.

==

numpy/core/tests/test_defchararray.py
==================
7895d91;Alan McIntyre;2008-07-09 20:49:40 +0000;Make doctests pass under new execution context.

==

numpy/lib/index_tricks.py
numpy/lib/scimath.py
==================
a38f527;Alan McIntyre;2008-07-09 20:25:41 +0000;Removed matrix._get_truendim (unused).

==

numpy/core/defmatrix.py
==================
3f1e1be;Alan McIntyre;2008-07-09 20:19:55 +0000;Test coverage improvements.

==

numpy/core/tests/test_defmatrix.py
==================
8b00f36;Alan McIntyre;2008-07-09 20:07:25 +0000;Updated doctest for NoseTester to reflect actual usage, and added __file__ = '__main__' to doctest context to allow the updated test to run correctly. Added setupscons.py and setup.py to the list of files to ignore when looking for doctests. Cleaned up docstrings for readability.

==

numpy/testing/nosetester.py
==================
59e1ee9;Stefan van der Walt;2008-07-09 11:13:25 +0000;Use TestCase instead of NumpyTestCase.

==

numpy/lib/tests/test_function_base.py
==================
88b409f;Stefan van der Walt;2008-07-09 08:49:28 +0000;Fix example docstring.

==

numpy/doc/EXAMPLE_DOCSTRING.txt
==================
c114dd8;Stefan van der Walt;2008-07-09 08:13:18 +0000;Add numpy.doc topical documentation framework.

==

numpy/__init__.py
numpy/doc/__init__.py
numpy/doc/reference/__init__.py
numpy/doc/reference/broadcasting.py
numpy/doc/reference/indexing.py
numpy/setup.py
==================
89bdcf9;David Cournapeau;2008-07-09 06:05:18 +0000;Fix distutils issue on AIX with aix compilers.

==

numpy/distutils/ccompiler.py
==================
0dffd02;David Cournapeau;2008-07-09 06:03:35 +0000;Simplify a bit more scons scripts.

==

numpy/fft/SConscript
numpy/lib/SConscript
numpy/linalg/SConscript
numpy/numarray/SConscript
numpy/random/SConscript
==================
06e999f;David Cournapeau;2008-07-09 06:02:36 +0000;Bump min version for numscons to 0.8.2.

==

numpy/distutils/command/scons.py
==================
15e2c1a;David Cournapeau;2008-07-09 06:01:49 +0000;Use NumpyPythonExtension instead of DistutilsPythonExtension where possible.

==

numpy/fft/SConscript
numpy/lib/SConscript
numpy/linalg/SConscript
numpy/numarray/SConscript
numpy/random/SConscript
==================
cced510;Robert Kern;2008-07-09 01:55:33 +0000;BUG: Make sure the Zipf results are within the allowable range.

==

numpy/random/mtrand/distributions.c
==================
b724d59;Travis Oliphant;2008-07-08 17:13:53 +0000;Fix refleake discussed in #848.  Only applied part of the patch.

==

numpy/core/src/scalartypes.inc.src
==================
ebf8dce;Travis Oliphant;2008-07-08 17:02:15 +0000;Fix ref-count leak in Ticket #843

==

numpy/core/src/multiarraymodule.c
==================
048bc86;Stefan van der Walt;2008-07-08 08:24:37 +0000;Piecewise should not expose raw memory.  Closes #798.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
757b1fb;Stefan van der Walt;2008-07-08 07:49:25 +0000;Example of real docstring.

==

numpy/doc/EXAMPLE_DOCSTRING.txt
==================
e5da29a;Alan McIntyre;2008-07-08 07:29:23 +0000;Renamed check_recarray_from_repr to test_recarray_from_repr so it can be picked up by nose.

==

numpy/core/tests/test_records.py
==================
a4847b1;Robert Kern;2008-07-07 16:47:18 +0000;Return actual bools instead of 0 or 1.

==

numpy/core/numeric.py
numpy/core/tests/test_numeric.py
==================
01320e0;David Cournapeau;2008-07-06 05:22:17 +0000;Prepend bootstrapping include path to avoid problem with debian numpy.

==

numpy/core/SConscript
==================
297a4b8;David Cournapeau;2008-07-06 05:03:44 +0000;Remove f2py.lib from setupscons.py

==

numpy/f2py/setupscons.py
==================
73cc84b;Alan McIntyre;2008-07-05 14:50:19 +0000;Remove uses of set_package_path, set_local_path, restore_path, and associated sys.path manipulations.

==

numpy/distutils/tests/f2py_ext/tests/test_fib2.py
numpy/distutils/tests/f2py_f90_ext/tests/test_foo.py
numpy/distutils/tests/gen_ext/tests/test_fib3.py
numpy/distutils/tests/pyrex_ext/tests/test_primes.py
numpy/distutils/tests/swig_ext/tests/test_example.py
numpy/distutils/tests/swig_ext/tests/test_example2.py
numpy/f2py/tests/array_from_pyobj/tests/test_array_from_pyobj.py
==================
dcb2ea6;Alan McIntyre;2008-07-05 14:32:42 +0000;Removed convdtype.py as discussed on numpy-discussion list (code was intended for the Numeric to numpy transition, but was never used).

==

numpy/lib/convdtype.py
==================
36e0220;Alan McIntyre;2008-07-05 14:26:16 +0000;Use the implicit "import numpy as np" made available to all doctests instead of explicit imports or dependency on the local scope where the doctest is defined..

==

numpy/add_newdocs.py
numpy/lib/financial.py
numpy/lib/function_base.py
numpy/lib/io.py
numpy/lib/polynomial.py
numpy/lib/scimath.py
numpy/lib/shape_base.py
numpy/lib/twodim_base.py
numpy/linalg/linalg.py
numpy/ma/core.py
numpy/ma/extras.py
numpy/testing/decorators.py
==================
f07e385;Robert Kern;2008-07-05 01:17:03 +0000;BUG: C-style /**/ comments only.

==

numpy/core/src/umathmodule.c.src
==================
2f18f9d;Robert Kern;2008-07-03 20:21:20 +0000;Correct the oldnumeric typecodes, update the tests to work on 32-bit machines, make sure these tests are installed with numpy so they can be run with numpy.test().

==

numpy/oldnumeric/precision.py
numpy/oldnumeric/setup.py
numpy/oldnumeric/tests/test_oldnumeric.py
==================
5873cfd;Robert Kern;2008-07-03 20:01:36 +0000;Fix setup script. Exclude test that requires building from the main test suite.

==

numpy/f2py/setup.py
numpy/testing/nosetester.py
==================
484c100;Robert Kern;2008-07-03 19:57:24 +0000;Removing G3 f2py code. Development has moved to https://launchpad.net/f2py/

==

numpy/f2py/f2py2e.py
numpy/f2py/lib/__init__.py
numpy/f2py/lib/api.py
numpy/f2py/lib/doc.txt
numpy/f2py/lib/extgen/__init__.py
numpy/f2py/lib/extgen/base.py
numpy/f2py/lib/extgen/c_support.py
numpy/f2py/lib/extgen/doc.txt
numpy/f2py/lib/extgen/py_support.py
numpy/f2py/lib/extgen/setup_py.py
numpy/f2py/lib/extgen/utils.py
numpy/f2py/lib/main.py
numpy/f2py/lib/nary.py
numpy/f2py/lib/parser/Fortran2003.py
numpy/f2py/lib/parser/__init__.py
numpy/f2py/lib/parser/api.py
numpy/f2py/lib/parser/base_classes.py
numpy/f2py/lib/parser/block_statements.py
numpy/f2py/lib/parser/doc.txt
numpy/f2py/lib/parser/parsefortran.py
numpy/f2py/lib/parser/pattern_tools.py
numpy/f2py/lib/parser/readfortran.py
numpy/f2py/lib/parser/sourceinfo.py
numpy/f2py/lib/parser/splitline.py
numpy/f2py/lib/parser/statements.py
numpy/f2py/lib/parser/test_Fortran2003.py
numpy/f2py/lib/parser/test_parser.py
numpy/f2py/lib/parser/typedecl_statements.py
numpy/f2py/lib/parser/utils.py
numpy/f2py/lib/py_wrap.py
numpy/f2py/lib/py_wrap_subprogram.py
numpy/f2py/lib/py_wrap_type.py
numpy/f2py/lib/setup.py
numpy/f2py/lib/src/F_FUNC.cpp
numpy/f2py/lib/src/pyobj_to_string_len.c
numpy/f2py/lib/tests/test_derived_scalar.py
numpy/f2py/lib/tests/test_module_module.py
numpy/f2py/lib/tests/test_module_scalar.py
numpy/f2py/lib/tests/test_scalar_function_in.py
numpy/f2py/lib/tests/test_scalar_in_out.py
numpy/f2py/lib/wrapper_base.py
numpy/f2py/setup.py
numpy/f2py/setupscons.py
==================
0c817a5;Robert Kern;2008-07-03 19:02:15 +0000;BUG: Correctly stub out urllib2.urlopen() for tests given the refactoring of the local imports.

==

numpy/lib/_datasource.py
numpy/lib/tests/test__datasource.py
==================
c8f88c0;Robert Kern;2008-07-03 08:43:58 +0000;Clean up test output such that a completely-passing test suite has no extraneous output.

==

numpy/core/tests/test_regression.py
numpy/distutils/tests/test_fcompiler_gnu.py
numpy/doc/DISTUTILS.txt
numpy/f2py/lib/__init__.py
numpy/f2py/lib/parser/Fortran2003.py
numpy/f2py/lib/parser/test_Fortran2003.py
numpy/f2py/lib/tests/test_derived_scalar.py
numpy/f2py/lib/tests/test_module_module.py
numpy/f2py/lib/tests/test_module_scalar.py
numpy/f2py/lib/tests/test_scalar_function_in.py
numpy/f2py/lib/tests/test_scalar_in_out.py
numpy/fft/tests/test_fftpack.py
numpy/fft/tests/test_helper.py
numpy/lib/tests/test_function_base.py
numpy/linalg/tests/test_linalg.py
numpy/linalg/tests/test_regression.py
numpy/oldnumeric/tests/test_oldnumeric.py
==================
638f015;Robert Kern;2008-07-03 06:59:29 +0000;BUG: need to create exceptions correctly.

==

numpy/lib/_datasource.py
numpy/lib/tests/test__datasource.py
==================
f912322;Robert Kern;2008-07-03 06:42:28 +0000;ENH: Add broadcast_arrays() function to expose broadcasting to pure Python functions that cannot be made to be ufuncs.

==

numpy/lib/__init__.py
numpy/lib/stride_tricks.py
numpy/lib/tests/test_stride_tricks.py
==================
a74f0df;Robert Kern;2008-07-03 06:23:15 +0000;Added note to numpy developers about the policy on using finfo in numpy's codebase.

==

numpy/lib/getlimits.py
==================
102cdc2;Robert Kern;2008-07-03 06:15:14 +0000;Reduce numpy's import times by delaying a few time consuming imports to the point of actual use and global instantiations of finfo. Thanks to David Cournapeau for tracking down and fixing the import part of the problem.

==

numpy/lib/_datasource.py
numpy/lib/getlimits.py
numpy/lib/polynomial.py
numpy/lib/tests/test__datasource.py
numpy/lib/utils.py
numpy/ma/core.py
numpy/ma/extras.py
==================
590babe;Alan McIntyre;2008-07-03 03:57:29 +0000;Remove uses of set_package_path, set_local_path, restore_path. Clean up and (somewhat) standardize test module imports. Removed unneeded reload calls.

==

numpy/lib/tests/test_arraysetops.py
numpy/lib/tests/test_financial.py
numpy/lib/tests/test_format.py
numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_index_tricks.py
numpy/lib/tests/test_regression.py
numpy/lib/tests/test_shape_base.py
numpy/lib/tests/test_twodim_base.py
numpy/lib/tests/test_type_check.py
==================
94bc330;Alan McIntyre;2008-07-03 03:51:46 +0000;Use the implicit "import numpy as np" made available to all doctests instead of an explicit import. Remove ">>>" from bartlett plotting example since it currently requires matplotlib.

==

numpy/lib/function_base.py
numpy/lib/polynomial.py
numpy/lib/scimath.py
numpy/lib/shape_base.py
numpy/lib/utils.py
==================
24af452;Alan McIntyre;2008-07-03 03:35:50 +0000;Fixed line continuation in doctest for setastest. Remove unnecessary "import re". Limit doctest execution environment to "import numpy as np". Save and restore print options after each doctest (to clean up after some doctests that change them). Enable ellipsis for all doctests. Remove parameter to NumpyDocTestCase constructor that was specific to nose 0.11. Monkeypatch wantFile of doctest plugin to skip Python files related to the build process (scons_support.py and generate_numpy_api.py).

==

numpy/testing/decorators.py
numpy/testing/nosetester.py
==================
7bd1865;Alan McIntyre;2008-07-03 02:49:02 +0000;Remove uses of set_package_path, set_local_path, restore_path. Clean up and (somewhat) standardize test module imports. In test_scalararray.py and test_defmatrix.py, update tests that are commented out so that they will be picked up in case they are ever uncommented.

==

numpy/core/tests/test_defmatrix.py
numpy/core/tests/test_numeric.py
numpy/core/tests/test_numerictypes.py
numpy/core/tests/test_records.py
numpy/core/tests/test_regression.py
numpy/core/tests/test_scalarmath.py
numpy/core/tests/test_umath.py
numpy/core/tests/test_unicode.py
==================
0e2b763;Alan McIntyre;2008-07-03 02:34:59 +0000;Deprecate set_package_path, set_local_path, and restore_path.

==

numpy/testing/numpytest.py
==================
a1be9e6;Alan McIntyre;2008-07-03 02:23:34 +0000;Update doctests to assume only an "import numpy as np" has been executed prior to the example code. Updated numeric.py doctests to skip with-statements, and updated expected outputs to match current NumPy behavior.

==

numpy/core/fromnumeric.py
numpy/core/numeric.py
==================
6a4e465;pierregm;2008-07-02 21:46:01 +0000;Corrected a goof in .reshape()

==

numpy/ma/core.py
numpy/ma/tests/test_extras.py
==================
016b1f6;Alan McIntyre;2008-07-02 03:15:46 +0000;Update doctests to use the implicit "import numpy as np" made available to all doctests. Update doctests to use fully qualified names. Fixed typo in numerictypes.py: english_lower doctest has an example using english_upper

==

numpy/core/fromnumeric.py
numpy/core/numerictypes.py
numpy/core/records.py
==================
aa26afb;Alan McIntyre;2008-07-02 01:15:06 +0000;Update doctests to use the implicit "import numpy as np" made available to all doctests.

==

numpy/core/arrayprint.py
numpy/core/defmatrix.py
numpy/core/memmap.py
numpy/core/numeric.py
numpy/core/records.py
==================
bc01c96;pierregm;2008-07-01 22:01:09 +0000;prevent .reshape to update the whole __dict__ of the result, use ._update_from instead

==

numpy/ma/core.py
numpy/ma/testutils.py
==================
f843a88;Alan McIntyre;2008-07-01 15:20:23 +0000;Customize behavior of nose doctests: - Adding "#random" to an expected output line will skip the comparison with actual   output (but the command is still executed). - All doctests have the numpy module available in their execution context as "np". - Whitespace normalization is enabled for all doctests executed via nose.
Doctests added to check that the above behaviors are available.

Nose version check/message cleanup.

Fix typo in doctest for NoseTester (was still referencing scipy.testing).

Rewrapped comments/docstrings to 80 columns.


==

numpy/testing/nosetester.py
==================
b6bbec8;Charles Harris;2008-06-29 03:37:04 +0000;Use join instead of += to build string.

==

numpy/lib/format.py
==================
92ce54e;Charles Harris;2008-06-29 03:26:00 +0000;Add test for ticket #390.

==

numpy/core/tests/test_records.py
==================
ff52d4c;Charles Harris;2008-06-29 02:28:43 +0000;Fix ticket #390.

==

numpy/core/records.py
==================
22774bf;Charles Harris;2008-06-28 21:02:25 +0000;Shorten long lines.

==

numpy/lib/format.py
==================
a3adda5;Charles Harris;2008-06-28 17:05:37 +0000;Fix ticket #828 by explicitly sorting keys instead of relying on pprint. Thanks to Neil Muller for the analysis and patch.

==

numpy/lib/format.py
==================
8408929;Charles Harris;2008-06-27 05:26:25 +0000;Add regression test for #825.

==

numpy/core/tests/test_regression.py
==================
3fa280a;Charles Harris;2008-06-26 04:32:54 +0000;Test #825 fix.

==

numpy/core/src/arraytypes.inc.src
==================
662c797;pierregm;2008-06-25 19:43:56 +0000;MaskedArray.__new__ : compare data to cls and not to MaskedArray, in case __new__ is called from a subclass MaskedArray: add the iscontiguous method.

==

numpy/ma/core.py
==================
ec5f5ea;Charles Harris;2008-06-24 05:10:37 +0000;Basic reindentation.

==

numpy/core/src/scalartypes.inc.src
==================
8ae34d0;Charles Harris;2008-06-24 03:43:53 +0000;Code style cleanups. Whitespace. Fix typo rrlshift.

==

numpy/core/src/ufuncobject.c
==================
ec51473;Alan McIntyre;2008-06-23 08:24:48 +0000;Fixed imports for doctests. Removed ">>>" from sample code in defmatrix.py:bmat that was intended only as an example, not as a doctest.

==

numpy/core/defmatrix.py
numpy/core/fromnumeric.py
==================
008bb90;Alan McIntyre;2008-06-23 08:14:59 +0000;Fixed imports in doctests.

==

numpy/core/arrayprint.py
numpy/core/numerictypes.py
==================
b7ff8eb;Alan McIntyre;2008-06-23 07:12:36 +0000;Added "import numpy as N", and adjusted whitespace to allow doctests to run correctly.

==

numpy/core/records.py
==================
ddaa768;Charles Harris;2008-06-22 01:23:31 +0000;Small code cleanup. Added commented out alternate TypeError return in ufunc_generic_call.

==

numpy/core/src/ufuncobject.c
==================
a28c5ca;Charles Harris;2008-06-22 01:15:05 +0000;Small cleanup.

==

numpy/core/tests/test_ufunc.py
==================
9bd3e06;Alan McIntyre;2008-06-21 16:20:54 +0000;Restored parametric.py

==

numpy/testing/parametric.py
==================
af7f89e;Alan McIntyre;2008-06-21 15:50:17 +0000;Restore old test framework classes. Added numpy.testing.run_module_suite to simplify "if __name__ == '__main__'" boilerplate code in test modules. Removed numpy/testing/pkgtester.py since it just consisted of an import statement after porting SciPy r4424. Allow numpy.*.test() to accept the old keyword arguments (but issue a deprecation warning when old arguments are seen). numpy.*.test() returns a test result object as before. Fixed typo in distutils doc.

==

numpy/__init__.py
numpy/core/__init__.py
numpy/core/tests/test_defmatrix.py
numpy/core/tests/test_errstate.py
numpy/core/tests/test_memmap.py
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_numeric.py
numpy/core/tests/test_numerictypes.py
numpy/core/tests/test_records.py
numpy/core/tests/test_regression.py
numpy/core/tests/test_scalarmath.py
numpy/core/tests/test_ufunc.py
numpy/core/tests/test_umath.py
numpy/core/tests/test_unicode.py
numpy/distutils/__init__.py
numpy/distutils/tests/f2py_ext/tests/test_fib2.py
numpy/distutils/tests/f2py_f90_ext/tests/test_foo.py
numpy/distutils/tests/gen_ext/tests/test_fib3.py
numpy/distutils/tests/pyrex_ext/tests/test_primes.py
numpy/distutils/tests/swig_ext/tests/test_example.py
numpy/distutils/tests/swig_ext/tests/test_example2.py
numpy/distutils/tests/test_fcompiler_gnu.py
numpy/distutils/tests/test_misc_util.py
numpy/doc/DISTUTILS.txt
numpy/f2py/lib/parser/test_Fortran2003.py
numpy/f2py/lib/parser/test_parser.py
numpy/f2py/lib/tests/test_derived_scalar.py
numpy/f2py/lib/tests/test_module_module.py
numpy/f2py/lib/tests/test_module_scalar.py
numpy/f2py/lib/tests/test_scalar_function_in.py
numpy/f2py/lib/tests/test_scalar_in_out.py
numpy/f2py/tests/array_from_pyobj/tests/test_array_from_pyobj.py
numpy/fft/__init__.py
numpy/fft/tests/test_fftpack.py
numpy/fft/tests/test_helper.py
numpy/lib/__init__.py
numpy/lib/tests/test__datasource.py
numpy/lib/tests/test_arraysetops.py
numpy/lib/tests/test_financial.py
numpy/lib/tests/test_format.py
numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_getlimits.py
numpy/lib/tests/test_index_tricks.py
numpy/lib/tests/test_io.py
numpy/lib/tests/test_machar.py
numpy/lib/tests/test_polynomial.py
numpy/lib/tests/test_regression.py
numpy/lib/tests/test_shape_base.py
numpy/lib/tests/test_twodim_base.py
numpy/lib/tests/test_type_check.py
numpy/lib/tests/test_ufunclike.py
numpy/linalg/__init__.py
numpy/linalg/tests/test_linalg.py
numpy/linalg/tests/test_regression.py
numpy/ma/__init__.py
numpy/ma/tests/test_core.py
numpy/ma/tests/test_extras.py
numpy/ma/tests/test_mrecords.py
numpy/ma/tests/test_old_ma.py
numpy/ma/tests/test_subclassing.py
numpy/numarray/__init__.py
numpy/oldnumeric/__init__.py
numpy/oldnumeric/tests/test_oldnumeric.py
numpy/random/__init__.py
numpy/random/tests/test_random.py
numpy/testing/__init__.py
numpy/testing/nosetester.py
numpy/testing/numpytest.py
numpy/testing/pkgtester.py
numpy/testing/tests/test_utils.py
numpy/tests/test_ctypeslib.py
==================
03fbbff;David Cournapeau;2008-06-21 11:08:37 +0000;Temporary workaround for a numscons bug.

==

numpy/core/SConscript
==================
d2d7e7f;Fernando Perez;2008-06-20 18:24:10 +0000;Put import_array() back into the .pyx file.
M. Brett noticed that if it's only in the .pxd file, it does NOT get
included in the auto-generated C code, and will thus not be called at
module initialization time.


==

numpy/doc/cython/c_numpy.pxd
numpy/doc/cython/numpyx.pyx
==================
e4b8851;Fernando Perez;2008-06-20 04:17:54 +0000;Move the import_array() call directly into c_numpy.pxd.
This makes the user-visible API for Cython usage simpler and closer to
the Python one.

==

numpy/doc/cython/c_numpy.pxd
numpy/doc/cython/numpyx.pyx
==================
d2a19ae;pierregm;2008-06-20 00:18:32 +0000;* put maximum/minimum_fill_value back in __all__

==

numpy/ma/core.py
numpy/ma/mrecords.py
==================
a5f0cf1;Stefan van der Walt;2008-06-19 12:09:38 +0000;Use a colon instead of a semi-colon to separate index levels.

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
ab3df7f;Fernando Perez;2008-06-19 06:16:48 +0000;Updated Cython code to use .pxd files with cimport instead of .pxi/include.
Using cimport/pxd is the currently recommended approach by the Cython
team.

==

numpy/doc/cython/Makefile
numpy/doc/cython/Python.pxi
numpy/doc/cython/c_numpy.pxd
numpy/doc/cython/c_python.pxd
numpy/doc/cython/numpy.pxi
numpy/doc/cython/numpyx.pyx
==================
19da971;Robert Kern;2008-06-18 22:53:44 +0000;PyPI metadata fixes.

==

setup.py
==================
1a4abae;Stefan van der Walt;2008-06-18 15:31:50 +0000;Add `Methods` section to documentation standard.

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
273f995;Stefan van der Walt;2008-06-18 15:22:24 +0000;Add `ma` to __all__.

==

numpy/__init__.py
==================
00827d7;pierregm;2008-06-17 22:54:05 +0000;fixed dictionary update for compatibility with Python 2.3

==

numpy/ma/core.py
numpy/ma/mrecords.py
numpy/ma/tests/test_core.py
==================
660dace;Travis Oliphant;2008-06-17 20:08:28 +0000;Fix piecewise to handle 0-d inputs.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
3a917b8;Stefan van der Walt;2008-06-17 13:06:08 +0000;Update documentation standard.

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
2bdd23e;Alan McIntyre;2008-06-17 02:17:34 +0000;Update README.txt to indicate nose version dependency, and port SciPy r4424 to NumPy (prevent import of nose until actual execution of tests).  Restored "raises" function to numpy/testing/utils.py until it can be replaced with the function of the same name from nose.tools after the lazy import.

==

README.txt
numpy/testing/__init__.py
numpy/testing/decorators.py
numpy/testing/nosetester.py
numpy/testing/pkgtester.py
numpy/testing/utils.py
==================
70974af;Robert Kern;2008-06-17 01:11:43 +0000;When using PackageLoader, do not add subpackage names to __all__.

==

numpy/_import_tools.py
==================
c331857;Alan McIntyre;2008-06-17 00:23:20 +0000;Switched to use nose to run tests.  Added test and bench functions to all modules.

==

README.txt
numpy/__init__.py
numpy/core/__init__.py
numpy/core/tests/test_defmatrix.py
numpy/core/tests/test_errstate.py
numpy/core/tests/test_memmap.py
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_numeric.py
numpy/core/tests/test_numerictypes.py
numpy/core/tests/test_records.py
numpy/core/tests/test_regression.py
numpy/core/tests/test_scalarmath.py
numpy/core/tests/test_ufunc.py
numpy/core/tests/test_umath.py
numpy/core/tests/test_unicode.py
numpy/distutils/__init__.py
numpy/distutils/tests/f2py_ext/tests/test_fib2.py
numpy/distutils/tests/f2py_f90_ext/tests/test_foo.py
numpy/distutils/tests/gen_ext/tests/test_fib3.py
numpy/distutils/tests/pyrex_ext/tests/test_primes.py
numpy/distutils/tests/swig_ext/tests/test_example.py
numpy/distutils/tests/swig_ext/tests/test_example2.py
numpy/distutils/tests/test_fcompiler_gnu.py
numpy/distutils/tests/test_misc_util.py
numpy/doc/DISTUTILS.txt
numpy/f2py/lib/parser/test_Fortran2003.py
numpy/f2py/lib/parser/test_parser.py
numpy/f2py/lib/tests/test_derived_scalar.py
numpy/f2py/lib/tests/test_module_module.py
numpy/f2py/lib/tests/test_module_scalar.py
numpy/f2py/lib/tests/test_scalar_function_in.py
numpy/f2py/lib/tests/test_scalar_in_out.py
numpy/f2py/tests/array_from_pyobj/tests/test_array_from_pyobj.py
numpy/fft/__init__.py
numpy/fft/tests/test_fftpack.py
numpy/fft/tests/test_helper.py
numpy/lib/__init__.py
numpy/lib/tests/test__datasource.py
numpy/lib/tests/test_arraysetops.py
numpy/lib/tests/test_financial.py
numpy/lib/tests/test_format.py
numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_getlimits.py
numpy/lib/tests/test_index_tricks.py
numpy/lib/tests/test_io.py
numpy/lib/tests/test_machar.py
numpy/lib/tests/test_polynomial.py
numpy/lib/tests/test_regression.py
numpy/lib/tests/test_shape_base.py
numpy/lib/tests/test_twodim_base.py
numpy/lib/tests/test_type_check.py
numpy/lib/tests/test_ufunclike.py
numpy/linalg/__init__.py
numpy/linalg/tests/test_linalg.py
numpy/linalg/tests/test_regression.py
numpy/ma/__init__.py
numpy/ma/tests/test_core.py
numpy/ma/tests/test_extras.py
numpy/ma/tests/test_mrecords.py
numpy/ma/tests/test_old_ma.py
numpy/ma/tests/test_subclassing.py
numpy/ma/testutils.py
numpy/numarray/__init__.py
numpy/oldnumeric/__init__.py
numpy/oldnumeric/tests/test_oldnumeric.py
numpy/random/__init__.py
numpy/random/tests/test_random.py
numpy/testing/__init__.py
numpy/testing/decorators.py
numpy/testing/info.py
numpy/testing/nosetester.py
numpy/testing/nulltester.py
numpy/testing/numpytest.py
numpy/testing/parametric.py
numpy/testing/pkgtester.py
numpy/testing/tests/test_utils.py
numpy/testing/utils.py
numpy/tests/test_ctypeslib.py
==================
22ba788;Alan McIntyre;2008-06-17 00:11:02 +0000;test

==

THANKS.txt
==================
550eaf1;Jarrod Millman;2008-06-17 00:08:31 +0000;t

==

THANKS.txt
==================
5bb7b22;pierregm;2008-06-16 17:29:28 +0000;core.MaskedArray.__new__ * Force a mask to be created from a list of masked arrays when mask=nomask and keep_mask=True

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
8f85171;David Cournapeau;2008-06-14 06:06:13 +0000;Fix dotblas compilation on mac os X: scons scanner is not smart enough to interpret #include CPP_MACRO.

==

numpy/core/SConscript
==================
09791d2;David Cournapeau;2008-06-12 15:16:07 +0000;Do not fail scons command when cxx compiler is not available.

==

numpy/distutils/command/scons.py
==================
d46b162;David Cournapeau;2008-06-12 10:56:20 +0000;Make sure we are using numscons 0.8.0 or above.

==

numpy/distutils/command/scons.py
==================
3f04110;David Cournapeau;2008-06-12 10:05:12 +0000;adapt numpy.random to new scons build_dir architecture.

==

numpy/random/SConscript
numpy/random/SConstruct
==================
8c53a44;David Cournapeau;2008-06-12 10:00:37 +0000;adapt numpy.linalg to new scons build_dir architecture.

==

numpy/linalg/SConscript
numpy/linalg/SConstruct
==================
7148b1c;David Cournapeau;2008-06-12 09:56:55 +0000;Adapt numpy.fft to new build dir conventions.

==

numpy/fft/SConscript
numpy/fft/SConstruct
==================
fd5f2dc;David Cournapeau;2008-06-12 09:55:30 +0000;Adapt numpy.numarray to new build dir convention.

==

numpy/numarray/SConscript
numpy/numarray/SConstruct
==================
be47c6f;David Cournapeau;2008-06-12 09:49:16 +0000;Adapat numpy.lib scons build to new build_dir conventions.

==

numpy/lib/SConscript
==================
d039ec9;David Cournapeau;2008-06-12 09:48:42 +0000;Set numpy include path relatively to top setup callee when bootstrapping.

==

numpy/distutils/command/scons.py
==================
a7eb6e9;David Cournapeau;2008-06-12 09:01:13 +0000;Adapt numpy.lib to new scons build_dir behavior.

==

numpy/lib/SConscript
numpy/lib/SConstruct
==================
9ed41fe;David Cournapeau;2008-06-12 08:59:20 +0000;When src_dir is not null, takes it into account to retrieve distutils libdir.

==

numpy/distutils/command/scons.py
==================
95a9bef;David Cournapeau;2008-06-12 07:43:27 +0000;Adapt numpyconfig.h location in setup.py file.

==

numpy/core/setupscons.py
==================
607c8ff;David Cournapeau;2008-06-12 07:28:27 +0000;Adapt SConscript to new architecture for build dir.

==

numpy/core/SConscript
==================
067cbfa;David Cournapeau;2008-06-12 07:24:09 +0000;Add boilerplate SConstruct to set variant dir transparantly.

==

numpy/core/SConstruct
==================
2835b2f;David Cournapeau;2008-06-12 07:23:31 +0000;variant_dir: Rename SConscript for numpy.core.

==

numpy/core/SConscript
numpy/core/SConstruct
==================
1e11e53;David Cournapeau;2008-06-12 07:20:28 +0000;Remove distutils_dirs_emitter hacks: no need anymore since we use variant_dir.

==

numpy/core/scons_support.py
==================
e0b47b1;David Cournapeau;2008-06-12 06:35:22 +0000;scons command: set distutils libdir relatively to build directory.

==

numpy/distutils/command/scons.py
==================
327a4d2;Stefan van der Walt;2008-06-11 18:38:20 +0000;How to use variables in math markup.

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
c0bdc3a;pierregm;2008-06-08 23:04:42 +0000;CHANGES: core: * When creating a masked array with named fields, the mask has now a flexible type [(n,bool) for n in fields], which allows individual fields to be masked. * When a masked array has named fields, setting the mask to a sequence of booleans will set the mask of all the fields of the corresponding record. * A new property, recordmask, returns either the mask (when no named fields) or a boolean array where values are True if all the fields of one record are masked, False otherwise. * A new private attribute, _isfield, has been introduced to keep track whether an array is a field of a record-like masked array or not, and make sure that the mask is properly propagated. * Setting an existing mask to nomask will only fill the mask with False, not transform it to nomask
mrecords:
* _fieldmask is now only a synonym for _mask, kept for convenience
* revamped __getattribute__ to the example of numpy.core.records.recarray.__getattribute__
* __setslice__ and filled are now inhertied from MaskedArray

tests
* The tests in test_core have been reorganized to improve clarity and avoid duplication.
* test_extras now uses the convention "import numpy as np"


==

numpy/ma/core.py
numpy/ma/mrecords.py
numpy/ma/tests/test_core.py
numpy/ma/tests/test_extras.py
numpy/ma/tests/test_mrecords.py
==================
3cd9e03;pierregm;2008-06-08 18:10:55 +0000;* make_mask_none now accepts a fields argument to construct record-like masks easily * revamped where

==

numpy/ma/core.py
==================
cf89a25;Pauli Virtanen;2008-06-08 12:18:37 +0000;Move umath docstrings to a separate file. Make the automatic ufunc signature compatible with the documentation standard.

==

numpy/core/code_generators/docstrings.py
numpy/core/code_generators/generate_umath.py
numpy/core/src/ufuncobject.c
numpy/core/tests/test_umath.py
==================
8fac05d;David Cournapeau;2008-06-08 09:20:03 +0000;MSVC compiler does not have compiler_cxx member.

==

numpy/distutils/command/scons.py
==================
b7ba98c;pierregm;2008-06-08 03:57:56 +0000;* revamped the functions min/max so that the methods are called * revamped the methods sum/prod/var/std/min/max/round to accept an explicit out argument * Force var to return masked when a masked scalar was returned

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
b8c5c9c;Charles Harris;2008-06-07 22:43:03 +0000;Fix missing return value, closes ticket #813.

==

numpy/core/src/arrayobject.c
==================
942d2dc;David Cournapeau;2008-06-07 15:57:45 +0000;Merged revisions 5204-5257 via svnmerge from http://svn.scipy.org/svn/numpy/branches/cdavid
........
  r5205 | cdavid | 2008-05-20 17:14:30 +0900 (Tue, 20 May 2008) | 3 lines
  
  Initialized merge tracking via "svnmerge" with revisions "1-5204" from 
  http://svn.scipy.org/svn/numpy/trunk
........
  r5206 | cdavid | 2008-05-20 17:17:27 +0900 (Tue, 20 May 2008) | 7 lines
  
  
  Current handling of bootstrapping is flawed: I should handle it at the
  distutils level, not at the scons level. This is the first step to detect
  bootstrapping at distutils level, and pass its state to scons through command
  line.
........
  r5207 | cdavid | 2008-05-20 17:35:01 +0900 (Tue, 20 May 2008) | 1 line
  
  Fix typo when passing bootstrapping option to scons.
........
  r5208 | cdavid | 2008-05-20 17:41:11 +0900 (Tue, 20 May 2008) | 5 lines
  
  
  Do not mess with __NUMPY_SETUP__ in scons scripts anymore: this is handled in
  numscons.
........
  r5209 | cdavid | 2008-05-20 17:43:46 +0900 (Tue, 20 May 2008) | 1 line
  
  Forgot one file in lapack_lite when no LAPACK is available.
........
  r5210 | cdavid | 2008-05-20 18:24:38 +0900 (Tue, 20 May 2008) | 1 line
  
  Handle fortran compiler on open-solaris
........

==
==================
abd2bda;Christoph Weidemann;2008-06-07 05:08:06 +0000;Testcases for ticket #791

==

numpy/core/tests/test_regression.py
==================
7996e06;pierregm;2008-06-07 02:17:17 +0000;* revamped choose to accept the out and mode keywords * revamped argmin/argmax to accept the out keyword * revamped all/any to accept the out keyword

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
8c6fc02;Travis Oliphant;2008-06-05 23:27:52 +0000;Fix more in ticket #791.

==

numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/core/tests/test_regression.py
==================
222043b;dhuard;2008-06-05 17:40:15 +0000;added verbose argument to assert_array_equal in assert_equal. Fixes ticket #810.

==

numpy/testing/utils.py
==================
ce51b91;pierregm;2008-06-04 15:54:28 +0000;simplified MaskedArray.__setitem__ to fix setting object-ndarray elements

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
b8cc583;pierregm;2008-06-03 23:41:20 +0000;use tempfile.mkstemp for the creation of temporary files

==

numpy/ma/tests/test_mrecords.py
==================
29175fc;pierregm;2008-06-03 23:14:16 +0000;core * masked_values now accept a shrink argument * fixed the divide_tolerance to numpy.finfo(float).tiny (bug #807) * in MaskedArray.__idiv__, use np.where instead of np.putmask to mask the denominator

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
4bf8efd;Stefan van der Walt;2008-06-03 22:36:09 +0000;Update examples section.

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
b547bbf;pierregm;2008-06-03 21:23:15 +0000;core: * use the "import numpy as np" convention * use np.function instead of (from)numeric.function * CHANGE : when using named fields, the fill_value is now a void-ndarray (and no longer a tuple) * _check_fill_value now checks that an existing fill_value is compatible with a new dtype (bug #806) * fix_invalid now accepts the mask keyword * MaskedArray.__new__ doesn't run _check_fill_value when the fill_value is None * add the astype method, to support the conversion of fill_value when needed. * arange/empty/empty_like/ones/zeros are now available through _convert2ma
test_core:
* modified test_filled_value to reflect that fill_value is a void-ndrecord when using named fields
* added test_check_fill_value/test_check_fill_value_with_records

testutils: 
* use the "import numpy as np" convention
* assert_equal_records now uses getitem instead of getattr
* assert_array_compare now calls numpy.testing.utils.assert_array_compare on filled data
* the assert_xxx functions now accept the verbose keyword

mrecords:
* MaskedRecords inherit get_fill_value and set_fill_value from MaskedArray
* In filled, force the filling value to be a void-ndarray

==

numpy/ma/core.py
numpy/ma/mrecords.py
numpy/ma/tests/test_core.py
numpy/ma/testutils.py
==================
6cdeb71;Stefan van der Walt;2008-06-03 08:50:08 +0000;Update documentation standard.

==

numpy/doc/HOWTO_BUILD_DOCS.txt
numpy/doc/HOWTO_DOCUMENT.txt
numpy/doc/example.py
==================
e66e9ca;Pauli Virtanen;2008-06-01 00:53:50 +0000;Spell out namespace convention in Examples and See Also sections in docstrings

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
be21c42;Travis Oliphant;2008-05-29 15:15:45 +0000;Use memmove when memory areas can overlap.

==

numpy/core/src/ufuncobject.c
==================
7e29764;pierregm;2008-05-29 02:31:28 +0000;mrecords : Make sure a field shares its mask with the whole array mrecords : IMPORTANT : the mask of a field is no longer set to nomask when it's full of False, which simplifies masking specific fields. extras   : Reorganized personal comments

==

numpy/ma/core.py
numpy/ma/extras.py
numpy/ma/mrecords.py
numpy/ma/tests/test_mrecords.py
==================
47883f9;pierregm;2008-05-26 22:15:29 +0000;core    : __new__: keep the fill_value of the initializing object by default mrecords: force _guessvartypes to return numpy.dtypes instead of  types

==

numpy/ma/core.py
numpy/ma/mrecords.py
numpy/ma/tests/test_core.py
==================
24caeed;Charles Harris;2008-05-26 22:08:35 +0000;Fix regression in dtype='c' array creation.

==

numpy/core/src/arrayobject.c
numpy/core/tests/test_regression.py
==================
207754f;David Cournapeau;2008-05-26 11:29:37 +0000;Add cpuid + nsis scripts to build win32 installer.

==

tools/win32build/README.txt
tools/win32build/cpuid/SConstruct
tools/win32build/cpuid/cpuid.c
tools/win32build/cpuid/cpuid.h
tools/win32build/cpuid/test.c
tools/win32build/nsis_scripts/numpy-superinstaller-2.4.nsi
tools/win32build/nsis_scripts/numpy-superinstaller-2.5.nsi
==================
dd490ff;David Cournapeau;2008-05-25 09:27:57 +0000;Handle library with extension in their name for ctypes.load_library.

==

numpy/ctypeslib.py
numpy/tests/test_ctypeslib.py
==================
a73ef5e;Charles Harris;2008-05-25 06:35:51 +0000;Save preliminary work on testing ufuncs.

==

numpy/core/tests/test_ufunc.py
==================
4acc46e;Charles Harris;2008-05-24 23:04:06 +0000;Delete generate_array_api.py

==

numpy/core/code_generators/generate_array_api.py
==================
7deec36;Charles Harris;2008-05-24 23:02:56 +0000;Rename generate_array_api to generate_numpy_api.

==

numpy/core/code_generators/generate_numpy_api.py
numpy/core/scons_support.py
numpy/core/setup.py
==================
2472656;Charles Harris;2008-05-24 22:44:09 +0000;Start work on testing ufuncs.

==

numpy/core/tests/test_ufunc.py
==================
ca33dd3;Charles Harris;2008-05-24 16:41:19 +0000;Define copy_string to memcpy. Closes ticket #666.

==

numpy/core/src/_sortmodule.c.src
==================
b27ec44;Charles Harris;2008-05-24 15:07:31 +0000;Remove now unused files. They have been merged into numpy_api_order.txt.

==

numpy/core/code_generators/array_api_order.txt
numpy/core/code_generators/multiarray_api_order.txt
==================
9953e34;Charles Harris;2008-05-24 14:19:36 +0000;Merge OBJECT_API and MULTIARRAY_API as NUMPY_API.

==

numpy/core/SConstruct
numpy/core/code_generators/generate_array_api.py
numpy/core/code_generators/numpy_api_order.txt
numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
numpy/core/src/scalartypes.inc.src
==================
17951f6;Jarrod Millman;2008-05-24 08:19:21 +0000;trunk open for 1.2 development series

==

numpy/version.py
==================
ed22270;Charles Harris;2008-05-22 22:07:16 +0000;Add PyArray_CompareString to multiarray_api instead of array_api so as not to disturb the current order of the API.

==

numpy/core/code_generators/array_api_order.txt
numpy/core/code_generators/multiarray_api_order.txt
numpy/core/src/arrayobject.c
==================
39b8259;Charles Harris;2008-05-22 18:06:53 +0000;Add PyArray_CompareString to the API.

==

numpy/core/code_generators/array_api_order.txt
numpy/core/src/arrayobject.c
==================
e7e2cad;pierregm;2008-05-22 17:18:16 +0000;test_set_fields: filter out the warning

==

numpy/ma/tests/test_mrecords.py
==================
35c2f9f;Travis Oliphant;2008-05-22 15:09:28 +0000;Add one-more test case using getmap to supplement the setmap test.

==

numpy/core/tests/test_regression.py
==================
9525f46;Jarrod Millman;2008-05-22 06:43:22 +0000;fixed whitespace w/ reindent

==

numpy/__init__.py
numpy/core/scons_support.py
numpy/core/tests/test_defmatrix.py
numpy/core/tests/test_regression.py
numpy/distutils/command/scons.py
numpy/distutils/conv_template.py
numpy/doc/example.py
numpy/lib/tests/test_function_base.py
numpy/ma/core.py
numpy/ma/extras.py
numpy/ma/mrecords.py
numpy/ma/tests/test_core.py
numpy/ma/tests/test_mrecords.py
numpy/ma/testutils.py
==================
0e968fd;Travis Oliphant;2008-05-22 06:34:33 +0000;Fix bug reported on SciPy mailing list which arose when the results of a broadcast were too large to fit in memory and the simple MultiplyList function is not doing overflow detection.  Create a new funtion that does Overflow detection but apply it sparingly. morarge broadcast results could caus

==

numpy/core/code_generators/multiarray_api_order.txt
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/core/tests/test_regression.py
==================
ae31c23;Travis Oliphant;2008-05-22 03:43:55 +0000;Fix ticket #789 again.

==

numpy/core/src/multiarraymodule.c
numpy/core/tests/test_regression.py
==================
1181f98;David Cournapeau;2008-05-22 03:14:53 +0000;Remove trailing space.

==

numpy/core/src/multiarraymodule.c
==================
d8c0928;David Cournapeau;2008-05-22 02:02:36 +0000;Fix #789 by Alan Mcintyre.

==

numpy/core/src/multiarraymodule.c
numpy/core/tests/test_regression.py
==================
ceb9ec2;Charles Harris;2008-05-21 23:16:02 +0000;Make test(all=True) the default.

==

numpy/testing/numpytest.py
==================
a49dcfc;Travis Oliphant;2008-05-21 21:54:28 +0000;Fix comments in tests.

==

numpy/core/tests/test_regression.py
==================
7be946b;Travis Oliphant;2008-05-21 21:53:36 +0000;Fix the logic testing for potential problems with array subclasses.

==

numpy/core/src/arrayobject.c
numpy/core/tests/test_regression.py
==================
43cfd25;Charles Harris;2008-05-21 21:38:11 +0000;Fix ordering assumption in regression test.

==

numpy/linalg/tests/test_regression.py
==================
f5df20e;Charles Harris;2008-05-21 20:25:14 +0000;Fix one small error in test(all=1).

==

numpy/ma/tests/test_old_ma.py
==================
6cdb11f;Robert Kern;2008-05-21 20:18:40 +0000;Try again to fix the endianness tests.

==

numpy/core/tests/test_multiarray.py
==================
2a72de6;Stefan van der Walt;2008-05-20 16:07:23 +0000;Fix unit test capturing under Python 2.6.

==

numpy/testing/numpytest.py
==================
bc3cfee;David Cournapeau;2008-05-20 09:24:38 +0000;Handle fortran compiler on open-solaris

==

numpy/distutils/command/scons.py
==================
6128236;David Cournapeau;2008-05-20 08:43:46 +0000;Forgot one file in lapack_lite when no LAPACK is available.

==

numpy/linalg/SConstruct
==================
a29ca1a;David Cournapeau;2008-05-20 08:41:11 +0000;Do not mess with __NUMPY_SETUP__ in scons scripts anymore: this is handled in numscons.

==

numpy/fft/SConstruct
numpy/lib/SConstruct
numpy/linalg/SConstruct
numpy/numarray/SConstruct
numpy/random/SConstruct
==================
87fddf4;David Cournapeau;2008-05-20 08:35:01 +0000;Fix typo when passing bootstrapping option to scons.

==

numpy/distutils/command/scons.py
==================
04b163d;David Cournapeau;2008-05-20 08:17:27 +0000;Current handling of bootstrapping is flawed: I should handle it at the distutils level, not at the scons level. This is the first step to detect bootstrapping at distutils level, and pass its state to scons through command line.

==

numpy/distutils/command/scons.py
==================
aa4bc9e;David Cournapeau;2008-05-20 04:03:17 +0000;Update build script.

==

tools/win32build/build.py
==================
b6590c5;David Cournapeau;2008-05-20 03:33:24 +0000;- win32 build script is now functional. Still does not handle svn version,   though - Fix indentation on the win32 build script.

==

tools/win32build/build.py
==================
b7cb2d5;David Cournapeau;2008-05-20 03:11:36 +0000;Add a tools directory, to hold various things related to build, etc... Add a python script to build win32 binaries.

==

tools/win32build/build.py
==================
e94a129;Stefan van der Walt;2008-05-19 22:57:04 +0000;Use pyrexc to compile mtrand.pyx for 1.1.

==

numpy/random/mtrand/mtrand.c
==================
ebecbb1;Pearu Peterson;2008-05-19 22:10:36 +0000;f2py: Allow expressions that contain max/min calls, be used as dimension specifications. Defined macros min/max that are needed when --lower is used. Typical usage case: real a(min(1,n)).

==

numpy/f2py/cfuncs.py
numpy/f2py/crackfortran.py
==================
399147b;Stefan van der Walt;2008-05-19 21:42:16 +0000;Fix math markup in docstrings.

==

numpy/lib/function_base.py
numpy/linalg/linalg.py
numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
==================
7ee9981;Robert Kern;2008-05-19 20:40:56 +0000;Use endian-specific dtypes in tests which construct cross-type views.

==

numpy/core/tests/test_multiarray.py
==================
4856e09;Pauli Virtanen;2008-05-19 20:25:50 +0000;Fix accidentally replaced (r5190, r5193) alltrue code. Diff shows that fromnumeric.py has only docstrings changes from r5189 now.

==

numpy/core/fromnumeric.py
==================
89f1a4e;Stefan van der Walt;2008-05-19 19:53:13 +0000;Fix math in Bartlett docstring.

==

numpy/lib/function_base.py
==================
689f143;Stefan van der Walt;2008-05-19 19:52:04 +0000;Remove duplicate `alltrue`.

==

numpy/core/fromnumeric.py
==================
51adbb4;Stefan van der Walt;2008-05-19 15:30:03 +0000;Indexing tag was correct.  Revert.

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
b4e7ec3;Stefan van der Walt;2008-05-19 15:26:37 +0000;Fix typo in indexing tag.

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
40505ed;Stefan van der Walt;2008-05-19 10:45:14 +0000;Merge documentation changes from wiki.

==

numpy/add_newdocs.py
numpy/core/fromnumeric.py
numpy/lib/arraysetops.py
numpy/lib/financial.py
numpy/lib/function_base.py
numpy/lib/index_tricks.py
==================
10d7e08;David Cournapeau;2008-05-18 13:24:43 +0000;Put one example for mkl 10.0 in site.cfg.example.

==

site.cfg.example
==================
146479b;David Cournapeau;2008-05-18 08:37:24 +0000;Add --package-list to scons command, to speed-up no-op when working on scipy.

==

numpy/distutils/command/scons.py
==================
fa66a9b;Stefan van der Walt;2008-05-16 18:13:44 +0000;Minor update to example docstring.

==

numpy/doc/example.py
==================
4ee16c3;Stefan van der Walt;2008-05-16 18:10:28 +0000;Update documentation format and example.

==

numpy/doc/HOWTO_DOCUMENT.txt
numpy/doc/example.py
==================
cd650e6;pierregm;2008-05-16 15:45:01 +0000;mrecords : fixed fromarrays when importing only one record extras   : fixed a bug in the naming convention

==

numpy/ma/extras.py
numpy/ma/mrecords.py
numpy/ma/tests/test_mrecords.py
==================
4116872;Stefan van der Walt;2008-05-16 15:13:32 +0000;Update example.  Fix reference.

==

numpy/doc/HOWTO_DOCUMENT.txt
numpy/doc/example.py
==================
a715ab0;Stefan van der Walt;2008-05-16 14:56:52 +0000;Update documentation standard.

==

numpy/doc/HOWTO_BUILD_DOCS.txt
numpy/doc/HOWTO_DOCUMENT.txt
==================
46768e6;Stefan van der Walt;2008-05-16 09:16:36 +0000;Fix ReST markup in docstrings.

==

numpy/lib/function_base.py
==================
f83cffb;Pearu Peterson;2008-05-16 08:56:03 +0000;get_build_architecture is not available in python 2.4 and older, so use numpy.distutils one. This should fix undiscovered/not reported bug of building numpy with python 2.4 on windows systems.

==

numpy/core/setup.py
==================
a6f2148;Pearu Peterson;2008-05-15 14:37:02 +0000;f2py: disallow matching module procedure-s as module-s.

==

numpy/f2py/crackfortran.py
==================
a0cdbc6;Stefan van der Walt;2008-05-15 14:02:11 +0000;Merge `choose` docstring fix from wiki.

==

numpy/add_newdocs.py
==================
d5519c4;Stefan van der Walt;2008-05-15 09:50:58 +0000;Add test for #788 [patch by Eric Firing].

==

numpy/core/setup.py
numpy/core/tests/data/astype_copy.pkl
numpy/core/tests/data/recarray_from_file.fits
numpy/core/tests/test_records.py
numpy/core/tests/test_regression.py
numpy/core/tests/testdata.fits
==================
f968b18;Pearu Peterson;2008-05-15 07:56:05 +0000;Changed an idiom of appending strings to a buffer. Fixes numpy ticket 792.

==

numpy/f2py/src/fortranobject.c
==================
04fb428;Travis Oliphant;2008-05-15 02:06:28 +0000;Fix the unit tests and eliminate the dimensionality reduction assumption for non base-class arrays.

==

numpy/core/src/arrayobject.c
numpy/core/tests/test_defmatrix.py
==================
9bd719a;Pauli Virtanen;2008-05-14 22:52:08 +0000;Don't assemble numpy module docstring from several parts; removes duplication

==

numpy/__init__.py
==================
48729bf;Stefan van der Walt;2008-05-14 22:42:18 +0000;Minor reST cleanup in docstrings.

==

numpy/add_newdocs.py
==================
e3b120a;Stefan van der Walt;2008-05-14 22:41:16 +0000;Merge docstrings from wiki.

==

numpy/linalg/linalg.py
==================
d7c77aa;pierregm;2008-05-14 22:08:33 +0000;extras  : dropped the m prefix in mediff1d, mvander, mpolyfit mrecords: fixed __setitem__ to update the mask if needed.

==

numpy/ma/core.py
numpy/ma/extras.py
numpy/ma/mrecords.py
numpy/ma/tests/test_extras.py
numpy/ma/tests/test_mrecords.py
==================
8f60b48;Stefan van der Walt;2008-05-14 20:01:18 +0000;Restore change to docstring overwritten by wiki merge.

==

numpy/lib/io.py
==================
b12d078;Stefan van der Walt;2008-05-14 12:51:23 +0000;Merge docstrings from wiki.

==

numpy/__init__.py
numpy/core/defmatrix.py
numpy/lib/io.py
==================
7407ae4;Jarrod Millman;2008-05-14 05:57:52 +0000;test

==

TEST_COMMIT
==================
45de460;Jarrod Millman;2008-05-14 00:52:46 +0000;the trunk is still cooking 1.1

==

numpy/version.py
==================
e8f2d12;pierregm;2008-05-13 21:08:01 +0000;extras: introduced mvander and mpolyfit

==

numpy/ma/extras.py
numpy/ma/tests/test_extras.py
==================
b316f21;Travis Oliphant;2008-05-13 16:44:03 +0000;Back-out matrix changes from trunk.  This breaks some test which need to be fixed differently.

==

numpy/core/defmatrix.py
==================
e3d0fec;Travis Oliphant;2008-05-13 16:40:19 +0000;Fix ticket #791.

==

numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/core/tests/test_multiarray.py
numpy/lib/io.py
==================
b6ef006;Stefan van der Walt;2008-05-12 21:58:48 +0000;Fix reST markup.

==

numpy/ma/API_CHANGES.txt
==================
45c812d;pierregm;2008-05-12 17:09:08 +0000;power               : fixed a bug when a scalar is the first argument MaskedArray.__pow__ : call power MaskedArray.__ipow__: works in place. Note that the _data part gets "fixed" (NaNs/Infs set to fill_value)

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
c2b77e0;pierregm;2008-05-12 15:48:27 +0000;core : power : use the quick-and-dirty approach: compute everything and mask afterwards 	 : MaskedArray._update_from(obj) : ensure that _baseclass is a ndarray if obj wasn't one already 	 : introduced clip in the namespace, just for convenience

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
d6cbadd;Travis Oliphant;2008-05-11 03:08:06 +0000;Use EquivTypes instead of equality testing for data-type comparison.

==

numpy/core/src/arraymethods.c
==================
5345ed1;Charles Harris;2008-05-10 01:05:05 +0000;Break long line. Reformat a bit. Remove trailing whitespace.

==

numpy/add_newdocs.py
==================
04bf67f;Robert Kern;2008-05-10 00:18:03 +0000;Add the out= argument to the clip() function to bring it in line with the .clip() method.

==

numpy/core/fromnumeric.py
numpy/core/tests/test_numeric.py
==================
f9e14d9;pierregm;2008-05-09 17:17:12 +0000;core : power : mask all negative values when the exponent (b) doesn't satisfy b==b.astype(int)

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
c12a094;pierregm;2008-05-09 17:03:36 +0000;core : power : mask all negative values when the exponent (b) doesn't satisfy (abs(b-int(b))<np.finfo(float).precision)

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
8636d9e;aarchiba;2008-05-09 05:12:31 +0000;Moved docstrings to add_newdoc.py; added docstring for the class as a whole which describes __call__.

==

numpy/add_newdocs.py
numpy/core/src/ufuncobject.c
==================
e440221;aarchiba;2008-05-09 02:51:14 +0000;Docstrings for ufunc methods add, reduce, outer, and the arcane reduceat.

==

numpy/core/src/ufuncobject.c
==================
890c8cd;Pauli Virtanen;2008-05-08 08:02:15 +0000;Test for ticket #551 part of r5140

==

numpy/core/tests/test_regression.py
==================
be0d6b0;aarchiba;2008-05-08 00:33:43 +0000;Additional tests of matrix indexing.

==

numpy/core/tests/test_defmatrix.py
==================
20cf506;Charles Harris;2008-05-08 00:10:46 +0000;Add some tests for scalar indexing, tolist(), and fancy indexing.

==

numpy/core/tests/test_defmatrix.py
==================
bd089c2;Travis Oliphant;2008-05-07 21:19:32 +0000;Remove un-needed attribute lookup in 1.2

==

numpy/core/defmatrix.py
==================
c32a389;Travis Oliphant;2008-05-07 20:24:34 +0000; * Make matrices return 1-dimensional array on item selection for 1.2\n * Remove (now un-needed) tolist method from matrices\n * For ticket #551, copy data if start of memory is not aligned on itemsize location in optimized blas wrapper.

==

numpy/core/blasdot/_dotblas.c
numpy/core/defmatrix.py
numpy/core/src/arrayobject.c
==================
7c99e67;pierregm;2008-05-07 19:06:28 +0000;core : prevent power to mask negative values when it should not

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
a561c0d;Jarrod Millman;2008-05-07 06:10:11 +0000;trunk open for 1.2 development

==

numpy/version.py
==================
91c6c40;pierregm;2008-05-05 19:22:01 +0000;core : force .compressed() to return a type(_baseclass) object (usually a ndarray) 	 : fixed a bug in .compressed() when the _baseclass is a matrix

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
974b5f5;pierregm;2008-05-02 00:04:28 +0000;

==

numpy/ma/core.py
==================
3682f76;pierregm;2008-05-01 23:56:07 +0000;core : clean up update_from

==

numpy/ma/core.py
numpy/ma/mrecords.py
numpy/ma/tests/test_subclassing.py
==================
96b7ac6;Charles Harris;2008-05-01 21:34:11 +0000;Replace tabs with spaces.

==

numpy/doc/swig/numpy.i
==================
0f714da;Charles Harris;2008-05-01 21:33:44 +0000;Remove trailing whitespace.

==

numpy/doc/swig/pyfragments.swg
==================
54a6ea5;Charles Harris;2008-05-01 21:26:14 +0000;Remove trailing whitespace.

==

numpy/doc/swig/numpy.i
==================
1e17c6a;Charles Harris;2008-05-01 21:21:08 +0000;Fix grammar.

==

numpy/doc/swig/numpy.i
==================
59bdc5f;Travis Oliphant;2008-05-01 20:02:38 +0000;Remove dtype_or_type key word in favor of simpler interface.

==

numpy/core/src/arraymethods.c
==================
3d336c3;Stefan van der Walt;2008-05-01 19:26:58 +0000;Suppress test output.

==

numpy/lib/tests/test_machar.py
==================
3056ee6;Stefan van der Walt;2008-05-01 19:24:51 +0000;Support for Python types in x.view.

==

numpy/add_newdocs.py
numpy/core/src/arraymethods.c
numpy/core/tests/test_multiarray.py
==================
c402895;Charles Harris;2008-04-30 23:48:02 +0000;Small cleanup and whitespace removal.

==

numpy/core/src/scalartypes.inc.src
==================
e285208;Stefan van der Walt;2008-04-30 22:06:41 +0000;For x.view, change dtype into keyword argument.

==

numpy/add_newdocs.py
numpy/core/src/arraymethods.c
numpy/core/tests/test_multiarray.py
==================
21a7341;pierregm;2008-04-30 19:36:42 +0000;core      : fixed a bug w/ array((0,0))/0. testutils : introduced assert_almost_equal/assert_approx_equal: 			use assert_almost_equal(a,b,decimal) to compare a and b up to decimal places 			use assert_approx_equal(a,b,decimal) to compare a and b up to b*10.**-decimal

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
numpy/ma/testutils.py
==================
233af71;Travis Oliphant;2008-04-30 16:01:25 +0000;Check for error and fix spacing.

==

numpy/core/src/multiarraymodule.c
==================
59e7bda;David Cournapeau;2008-04-29 15:39:23 +0000;Disable underflow warning reporting when testing for arch + test (#759).

==

numpy/lib/machar.py
numpy/lib/tests/test_machar.py
==================
240d9a2;Charles Harris;2008-04-29 03:05:50 +0000;Keep singular values and eigenvalues as 1D arrays until the matrix indexing controversy is settled. This will also keep code that uses diag(ev), from breaking.

==

numpy/linalg/linalg.py
numpy/linalg/tests/test_linalg.py
==================
e4d0d76;Stefan van der Walt;2008-04-29 00:13:25 +0000;Fix python_xerbla for compilers that do not have inline strlen defined.

==

numpy/linalg/python_xerbla.c
==================
cdc4c0a;Stefan van der Walt;2008-04-28 23:41:48 +0000;Add comments to savetxt.

==

numpy/lib/io.py
==================
e311e8d;Stefan van der Walt;2008-04-28 23:27:11 +0000;Support for multi formatting elements in savetxt [patch by David Huard]. Closes #663.

==

numpy/lib/io.py
numpy/lib/tests/test_io.py
==================
e844ca2;Charles Harris;2008-04-28 23:07:12 +0000;Code style cleanups.

==

numpy/core/src/arrayobject.c
==================
56ec2be;Stefan van der Walt;2008-04-28 08:14:06 +0000;Rename and reformat pythonxerbla.

==

numpy/linalg/python_xerbla.c
numpy/linalg/pythonxerbla.c
numpy/linalg/setup.py
==================
28b0f98;Stefan van der Walt;2008-04-28 07:35:55 +0000;Site.cfg can still have DEFAULT section (closes #751).

==

site.cfg.example
==================
06c0d0e;Charles Harris;2008-04-27 18:44:47 +0000;Fix test of lstsqr to work with matrix tests. Fix lstsq

==

numpy/linalg/linalg.py
numpy/linalg/tests/test_linalg.py
==================
8d915a5;Charles Harris;2008-04-27 18:19:12 +0000;Add tests for matrix return types. Fix cond computations for matrices. lstsq is currently broken for matrices, will fix shortly.

==

numpy/linalg/linalg.py
numpy/linalg/tests/test_linalg.py
==================
8290941;Charles Harris;2008-04-27 15:27:30 +0000;Make functions in linalg.py accept nestes lists. Use wrap to keep matrix environment intact. Base patch from nmb.

==

numpy/linalg/linalg.py
numpy/linalg/tests/test_linalg.py
==================
a5b626c;Charles Harris;2008-04-26 23:36:55 +0000;Enclose macros with ifs in do {} while (0). Lets try this again with clean files.

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/include/numpy/ufuncobject.h
==================
95235b9;Charles Harris;2008-04-26 23:29:01 +0000;Code style cleanups and fix for ticket #743. Lets try this without corrupted merge files.

==

numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/core/src/ufuncobject.c
==================
2634ce0;Pauli Virtanen;2008-04-26 22:14:10 +0000;Docstring fixes to fromnumeric, to better mirror ndarray docstrings.

==

numpy/core/fromnumeric.py
==================
58d85b4;Pauli Virtanen;2008-04-26 22:09:30 +0000;Fix two typos in ndarray docstrings.

==

numpy/add_newdocs.py
==================
b660174;Charles Harris;2008-04-26 21:37:27 +0000;Revert to 5092.

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/include/numpy/ufuncobject.h
==================
5924d32;Pauli Virtanen;2008-04-26 21:37:11 +0000;Rewrite most ndarray docstrings: RST-reformat old and add new ones.
Most of the docstrings are adapted from those of the functions in
core.fromnumeric. I edited the ndarray method docstrings to closely match
the function docstrings.

I didn't yet fix the discrepancy in ndarray.reshape and fromnumeric.reshape
docstrings re ValueError raising.

==

numpy/add_newdocs.py
==================
f4554bd;Charles Harris;2008-04-26 21:31:54 +0000;revert to 5092

==

numpy/core/src/multiarraymodule.c
==================
ced3ea3;Charles Harris;2008-04-26 18:57:06 +0000;Add semicolons to end of macros. This helps editors and such get the formatting right. Do some small code cleanup.

==

numpy/core/src/multiarraymodule.c
==================
97f7b55;Charles Harris;2008-04-26 18:36:35 +0000;Sprinkle some do {} while (0) magic around macros with if statements. They should lose the semi-colons too, but I don't want to risk breaking out of tree code.

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/include/numpy/ufuncobject.h
==================
76d1305;Pauli Virtanen;2008-04-26 16:41:28 +0000;Docstrings: correct description of `dtype` in prod, cumsum, cumprod (was OK in sum, product)

==

numpy/core/fromnumeric.py
==================
ba40bc5;Pauli Virtanen;2008-04-26 15:34:37 +0000;Docstrings in fromnumeric: very small fixes.

==

numpy/core/fromnumeric.py
==================
a7c3802;Pauli Virtanen;2008-04-26 15:30:04 +0000;Docstring improvements for all, any, alltrue, sometrue, clip, compress + smaller stylistic changes to others.

==

numpy/core/fromnumeric.py
==================
319ff6a;Charles Harris;2008-04-26 03:11:08 +0000;Code style cleanups.

==

numpy/core/src/arrayobject.c
==================
1c89c15;dhuard;2008-04-25 21:04:16 +0000;histogram: an error is raised for varying bin widths only if normed=True.

==

numpy/lib/function_base.py
==================
b64dbce;dhuard;2008-04-25 18:13:46 +0000;Added an ignore warning in the test to avoid buildbot messages.

==

numpy/lib/tests/test_function_base.py
==================
bb61ebc;dhuard;2008-04-25 18:00:09 +0000;Fix to histogram with respect to block updating.a

==

numpy/lib/function_base.py
==================
c411951;dhuard;2008-04-25 17:41:04 +0000;Modified histogram according to the discussion on the numpy ML. This transitions from the old behavior to the new behavior using the new keyword.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
bf6e7a7;Stefan van der Walt;2008-04-25 17:31:19 +0000;Revert x[0][0] hack.

==

numpy/core/defmatrix.py
numpy/core/tests/test_defmatrix.py
==================
954e141;Charles Harris;2008-04-25 07:24:51 +0000;Add test for numeric type array creation from string values.

==

numpy/core/tests/test_multiarray.py
==================
9742ba4;Charles Harris;2008-04-25 06:03:18 +0000;Code style cleanups.

==

numpy/core/src/scalartypes.inc.src
==================
bbb83c0;Charles Harris;2008-04-25 06:01:52 +0000;Some cleanups

==

numpy/core/src/arrayobject.c
==================
8806030;Charles Harris;2008-04-25 03:01:33 +0000;Fix ticket #736. Try to cast strings numeric types when numbers needed.

==

numpy/core/src/arrayobject.c
==================
d78d052;Charles Harris;2008-04-25 02:23:31 +0000;Coding style cleanups.

==

numpy/core/src/arrayobject.c
==================
ceb4702;pierregm;2008-04-25 00:48:33 +0000;removed tests/test_mstat and tests/test_morestats (now available in scipy)

==

numpy/ma/tests/test_morestats.py
numpy/ma/tests/test_mstats.py
==================
aefed7e;pierregm;2008-04-24 06:57:13 +0000;suppressed mstats and morestats: the modules are now part of scipy.stats

==

numpy/ma/morestats.py
numpy/ma/mstats.py
==================
e722d7d;Charles Harris;2008-04-24 05:14:41 +0000;Fix conv_template to correctly handle nested loops with surrounding code. Add some template debugging aids.

==

numpy/distutils/conv_template.py
==================
8e4c9e1;Charles Harris;2008-04-24 00:58:38 +0000;Add some section headings to the file.

==

numpy/core/src/umathmodule.c.src
==================
3e1ebbe;Charles Harris;2008-04-23 23:16:53 +0000;Add true nesting of loops to the template processing. The previous attempt wasn't very useful. Loops can now be nested within each other using /**begin repeat1 and /**end repeat1**/ and cousins, starting with the current tags for the outermost loops.

==

numpy/distutils/conv_template.py
==================
5d954e2;Robert Kern;2008-04-23 20:49:48 +0000;In C, you shouldn't have trailing commas on the last item in an enum.

==

numpy/core/include/numpy/ndarrayobject.h
==================
7b2239f;Stefan van der Walt;2008-04-23 20:32:02 +0000;Hack to let x[0][0] return a scalar for matrices.

==

numpy/core/defmatrix.py
numpy/core/tests/test_defmatrix.py
==================
1da799e;pierregm;2008-04-23 14:46:29 +0000;__float__ : raises a TypeError exception for arrays longer than 1 __int__   : raises a TypeError exception for arrays longer than 1

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
numpy/ma/tests/test_old_ma.py
==================
1e3d6e6;Stefan van der Walt;2008-04-23 09:58:58 +0000;Add regression test for changeset #5065.

==

numpy/core/tests/test_regression.py
==================
1bb1226;David Cournapeau;2008-04-23 09:44:57 +0000;Fix double line in MANIFEST.in.

==

MANIFEST.in
==================
3063ef6;David Cournapeau;2008-04-23 09:44:26 +0000;Add some files in MANIFEST.in which cannot be picked up by distutils.

==

MANIFEST.in
==================
5e879e5;David Cournapeau;2008-04-23 09:35:15 +0000;Does not replace g++ by c++ compiler name.

==

numpy/distutils/command/scons.py
==================
99f7707;Charles Harris;2008-04-23 04:57:00 +0000;Add nested loops to the template processor. The syntax is to separate the nested loops with lines containing strings like
#repeat = 1#
#repeat = 2#
...

The number doesn't really matter, but it helps document the depth.

Example:

The file containing

/**begin repeat
 * # a = 1,2,3#
 * # b = 1,2,3#
 * # repeat = 1#
 * # c = 1,2#
 * # d = 1,2#
 */
@a@@b@@c@@d@
/**end repeat**/

produces


#line 1 "template.c.src"

/*
 *****************************************************************************
 **       This file was autogenerated from a template  DO NOT EDIT!!!!      **
 **       Changes should be made to the original source (.src) file         **
 *****************************************************************************
 */

#line 8
1111

#line 8
1122

#line 8
2211

#line 8
2222

#line 8
3311

#line 8
3322



==

numpy/distutils/conv_template.py
==================
54b45e7;Charles Harris;2008-04-23 00:20:57 +0000;Make None be NaN for float types.

==

numpy/core/src/arraytypes.inc.src
==================
0a6d8a6;cookedm;2008-04-22 19:09:02 +0000;generate_umath.py: move chartoname higher for documentation purposes (i.e., make it easier to answer the question, "what's ? or M mean?")

==

numpy/core/code_generators/generate_umath.py
==================
487612c;Charles Harris;2008-04-22 03:50:35 +0000;Uncomment tests for PyUfunc_O_O_method and PyUFunc_OO_O_method.

==

numpy/core/tests/test_ufunc.py
==================
772b0da;Charles Harris;2008-04-22 03:48:21 +0000;Fix incorrect output types for some ufuncs. This fixes ticket #747.

==

numpy/core/code_generators/generate_umath.py
==================
44b36da;David Cournapeau;2008-04-21 10:57:11 +0000;Scons build: put builders creation into scons_support, and add action strings for silent modes.

==

numpy/core/SConstruct
numpy/core/scons_support.py
==================
a37458b;David Cournapeau;2008-04-21 10:54:01 +0000;Do not show the whole scons command for silent modes.

==

numpy/distutils/command/scons.py
==================
9e68e5d;David Cournapeau;2008-04-21 10:24:50 +0000;Do not specify target names for generated code, because it is not needed.

==

numpy/core/SConstruct
==================
b053e86;David Cournapeau;2008-04-21 10:14:30 +0000;Expand tab in core scons script.

==

numpy/core/SConstruct
==================
563656f;Charles Harris;2008-04-21 01:52:59 +0000;Generic loop cleanup. Cut and pasted from template generated file.

==

numpy/core/src/ufuncobject.c
==================
462f65a;pierregm;2008-04-20 22:58:22 +0000;mrecords: clean-up core: MaskedArray.__setitem__ : when hardmask is False, force the data to be updated before the mask. core: MaskedArray.round_ : fixed to keep the dates on TimeSeries core: round : simplified

==

numpy/ma/core.py
numpy/ma/mrecords.py
numpy/ma/tests/test_core.py
==================
8c66331;Jarrod Millman;2008-04-20 11:49:35 +0000;ran reindent in preparation for the 1.1 release

==

numpy/__init__.py
numpy/add_newdocs.py
numpy/core/defmatrix.py
numpy/core/fromnumeric.py
numpy/core/memmap.py
numpy/core/numerictypes.py
numpy/core/tests/test_numerictypes.py
numpy/core/tests/test_regression.py
numpy/core/tests/test_scalarmath.py
numpy/distutils/cpuinfo.py
numpy/doc/newdtype_example/example.py
numpy/doc/newdtype_example/setup.py
numpy/lib/financial.py
numpy/lib/function_base.py
numpy/lib/index_tricks.py
numpy/lib/io.py
numpy/lib/tests/test__datasource.py
numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_io.py
numpy/lib/tests/test_regression.py
numpy/lib/twodim_base.py
numpy/lib/utils.py
numpy/linalg/linalg.py
numpy/linalg/tests/test_regression.py
numpy/ma/core.py
numpy/ma/extras.py
numpy/ma/morestats.py
numpy/ma/mrecords.py
numpy/ma/mstats.py
numpy/ma/tests/test_core.py
numpy/ma/tests/test_extras.py
numpy/ma/tests/test_mrecords.py
numpy/ma/testutils.py
numpy/oldnumeric/compat.py
numpy/oldnumeric/ma.py
numpy/testing/utils.py
==================
cb7de97;Jarrod Millman;2008-04-20 11:24:30 +0000;Reverting r4481, see #723

==

numpy/distutils/ccompiler.py
==================
7592038;Charles Harris;2008-04-20 02:45:19 +0000;Make the object loops tests less susceptiple to reference counting errors. The tests are still counting errors, and I may change these back when they are fixed.

==

numpy/core/tests/test_ufunc.py
==================
09a1d56;Charles Harris;2008-04-20 02:42:23 +0000;More clean up the generic object loops. There is a reference counting error in the code that calls these loops.

==

numpy/core/src/ufuncobject.c
==================
8081338;Charles Harris;2008-04-20 00:45:27 +0000;Cleanup code style in generic ufunc loops.

==

numpy/core/src/ufuncobject.c
==================
a4923ca;Charles Harris;2008-04-19 23:59:26 +0000;Add tests for generic ufunct loops preparatory to some code cleanup. Two tests currently fail and are commented out.
PyUFunc_O_O_method -- fails
PyUFunc_OO_O_method -- fails

==

numpy/core/tests/test_ufunc.py
==================
b4be377;Pauli Virtanen;2008-04-19 23:28:05 +0000;Fixing #738: Even more careful drive letter handling. And make the tests actually pass on Windows.

==

numpy/lib/_datasource.py
numpy/lib/tests/test__datasource.py
==================
3888ac4;Pauli Virtanen;2008-04-19 22:29:47 +0000;Fixing #738: remember to sanitize away also Windows drive letters

==

numpy/lib/_datasource.py
==================
5fc5deb;Pauli Virtanen;2008-04-19 21:45:35 +0000;Fix bug #738 and add corresponding tests.
lib._datasource.DataSource.abspath now sanitizes path names more carefully,
making sure that all file paths reside in destdir, also on Windows.  (Where
both '/' and os.sep function as path separators, as far as os.path.join is
concerned.)


==

numpy/lib/_datasource.py
numpy/lib/tests/test__datasource.py
==================
db8970d;Pearu Peterson;2008-04-18 19:59:42 +0000;Fix bug in parsing initexpr in 'INTEGER, PARAMETER :: ny = nx + 2'

==

numpy/f2py/crackfortran.py
==================
376a36e;Charles Harris;2008-04-18 16:16:05 +0000;Cleanup white space, fix a spelling, align some comments.

==

numpy/core/src/arrayobject.c
==================
2d69b48;Stefan van der Walt;2008-04-18 12:43:33 +0000;Fast implementation of take [patch by Eric Firing].

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
numpy/core/tests/test_multiarray.py
==================
44e4ead;cookedm;2008-04-18 06:42:49 +0000;Add comments to numerictypes.py about what the 'kind' field of dtypes can be (Also see the DtypesKind page on the numpy wiki)

==

numpy/core/numerictypes.py
==================
e653089;Robert Kern;2008-04-17 20:51:03 +0000;Correct dependency on missing code.

==

numpy/testing/tests/test_utils.py
numpy/testing/utils.py
==================
0d69810;Robert Kern;2008-04-17 20:23:30 +0000;De-obfuscate some test code.

==

numpy/core/tests/test_multiarray.py
==================
ddde39b;Robert Kern;2008-04-17 20:16:11 +0000;Don't require gzip or bz2 until the actual functionality is requested.

==

numpy/lib/_datasource.py
numpy/lib/io.py
numpy/lib/tests/test__datasource.py
==================
6e78d7d;Stefan van der Walt;2008-04-16 21:03:41 +0000;Use the default terminal colour to print out INFO messages in distutils. This prevents visibility problems on backgrounds other than black.

==

numpy/distutils/log.py
numpy/distutils/misc_util.py
==================
49a26ff;Stefan van der Walt;2008-04-16 15:21:22 +0000;Include "sudo" as part of system-wide installation instructions.

==

README.txt
==================
13f9b4a;dhuard;2008-04-16 14:28:11 +0000;Added and fixed some tests for loadtxt and savetxt. Cleaned up the docstring of savetxt, added some info on formatting.

==

numpy/lib/io.py
numpy/lib/tests/test_io.py
==================
3b6397f;Jarrod Millman;2008-04-15 05:08:04 +0000;bumping version to 1.1.0 to signify the minor API breakage and numerous new features

==

numpy/version.py
==================
8efa5d9;Robert Kern;2008-04-14 21:46:55 +0000;Test for r5034.

==

numpy/core/tests/test_regression.py
==================
1a39332;Travis Oliphant;2008-04-14 20:46:55 +0000;Fix up swap choice for FillWithScalar.

==

numpy/core/src/arrayobject.c
==================
4e8e2b5;Travis Oliphant;2008-04-14 20:41:53 +0000;Remove R files?

==

numpy/ma/.RData
numpy/ma/.Rhistory
==================
8bf74cc;pierregm;2008-04-14 16:07:22 +0000;core: fix_invalid : use isfinite & skip setting a mask is there's no invalid data _update_from: force the default hardmask to False (instead of relying on class default)
extras:
cleanup

mrecords:
modified to meet new standards (import numpy as np)
__array_finalize__ : skip the call to _update_from and directly update __dict__
__setmask__        : allow an update from a valid fieldmask
mask               : as recognizable property

==

numpy/ma/.RData
numpy/ma/.Rhistory
numpy/ma/core.py
numpy/ma/extras.py
numpy/ma/mrecords.py
numpy/ma/tests/test_mrecords.py
==================
221f6d7;David Cournapeau;2008-04-13 21:26:04 +0000;Add one more level for silent modes in scons command.

==

numpy/distutils/command/scons.py
==================
1a18d62;Charles Harris;2008-04-13 17:51:58 +0000;Make integers smaller than Long convert strings when possible. There is still a problem with the dimensions of the resulting array, but that problem is in the array creation code.

==

numpy/core/src/arraytypes.inc.src
==================
45be95f;Charles Harris;2008-04-13 17:43:32 +0000;Simplify code in MyPyFloat_AsDouble and MyPyLong_As*. Add MyPyLong_AsLong. Use code generator for repeated code.

==

numpy/core/src/arraytypes.inc.src
==================
f7e4d33;Jarrod Millman;2008-04-13 10:04:14 +0000;adding abreviation for pyplot

==

numpy/doc/example.py
==================
823aed7;Charles Harris;2008-04-13 06:05:28 +0000;Reindent. Needs style cleanup too. Small cleanup of MyPyFloat_AsDouble.

==

numpy/core/src/arraytypes.inc.src
==================
65dd4ae;Stefan van der Walt;2008-04-12 23:18:27 +0000;Fix fromregex, add documentation and tests [patch by Pauli Virtanen].

==

numpy/lib/io.py
numpy/lib/tests/test_io.py
==================
1ea8005;Robert Kern;2008-04-12 03:12:09 +0000;Compare against native-endian types, not endian-specific types.

==

numpy/lib/tests/test_io.py
==================
a0726b5;Travis Oliphant;2008-04-11 07:08:13 +0000;Add lookfor function from ticket #734

==

numpy/lib/utils.py
==================
3811cb8;Travis Oliphant;2008-04-11 06:59:11 +0000;Add one more test from ticket #728

==

numpy/lib/tests/test_index_tricks.py
==================
445f8e4;Charles Harris;2008-04-11 06:56:57 +0000;Remove debugging. Python 2.6 still raises ValueError for bitwise operations involving floats, as it should. Numpy doesn't.

==

numpy/core/tests/test_regression.py
==================
7e1350d;Travis Oliphant;2008-04-11 06:53:49 +0000;Fixed #728 scalar coercion problem with mixed types and r_

==

numpy/core/numerictypes.py
numpy/core/tests/test_numerictypes.py
numpy/lib/index_tricks.py
numpy/lib/tests/test_index_tricks.py
==================
cb7f01c;Charles Harris;2008-04-11 06:34:20 +0000;More debugging.

==

numpy/core/tests/test_regression.py
==================
71e14f5;Charles Harris;2008-04-11 06:20:03 +0000;More debugging.

==

numpy/core/tests/test_regression.py
==================
82e196a;Charles Harris;2008-04-11 06:03:14 +0000;More object casting debugging.

==

numpy/core/tests/test_regression.py
==================
d798d8e;Charles Harris;2008-04-11 05:31:21 +0000;Debugging test for check_object_casting.

==

numpy/core/tests/test_regression.py
==================
7174467;Charles Harris;2008-04-11 04:20:11 +0000;Remove test of repr precision for longdouble. This varies between compilers and at some point may vary between architectures when quadprecision gets loose in the wild.

==

numpy/core/tests/test_regression.py
==================
7839590;Charles Harris;2008-04-11 02:55:55 +0000;Add test for precision of longdouble repr. Need to add tests for all printing precisions.

==

numpy/core/tests/test_regression.py
==================
eddda26;Charles Harris;2008-04-11 02:44:43 +0000;Fix missing format code so longdoubles print with proper precision.

==

numpy/core/src/scalartypes.inc.src
==================
afa4406;Charles Harris;2008-04-11 01:54:18 +0000;Add functions for str instead of defining them to the same as repr. Reduce repr precision of longdouble to 20 and set str precision of longdouble to the same as double. This is a first cut at looking through the formatting used to print numbers.
The precisions are now

#define FLOATPREC_REPR 8
#define FLOATPREC_STR 6
#define DOUBLEPREC_REPR 17
#define DOUBLEPREC_STR 12
#if SIZEOF_LONGDOUBLE == SIZEOF_DOUBLE
#define LONGDOUBLEPREC_REPR DOUBLEPREC_REPR
#define LONGDOUBLEPREC_STR DOUBLEPREC_STR
#else /* More than probably needed on Intel FP */
#define LONGDOUBLEPREC_REPR 20
#define LONGDOUBLEPREC_STR 12
#endif

This line, and those below, will be ignored--

M    numpy/core/src/scalartypes.inc.src

==

numpy/core/src/scalartypes.inc.src
==================
0323900;Robert Kern;2008-04-10 23:58:42 +0000;Fix a long-standing typo preventing the build of scipy.stats.mvn. Sorry Stefan, no unittest; the original code is not amenable to unittests without a large refactoring.

==

numpy/f2py/crackfortran.py
==================
34e3f49;Pearu Peterson;2008-04-10 11:05:16 +0000;Fix issue 715.

==

numpy/distutils/interactive.py
==================
be25d94;Stefan van der Walt;2008-04-10 09:15:00 +0000;Add check for printing complex dtypes, closes #693.

==

numpy/core/tests/test_regression.py
==================
5e37d1c;Charles Harris;2008-04-09 23:52:17 +0000;Fix bound in error message. Patch from Andrew Straw, fixes ticket 732.

==

numpy/core/src/arrayobject.c
==================
74ed7dd;Robert Kern;2008-04-09 20:30:07 +0000;Add the cached Gaussian to the state tuple. Preserve backwards compatibility with the old state tuple.

==

numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
numpy/random/tests/test_random.py
==================
9b56ad4;Robert Kern;2008-04-09 20:13:22 +0000;Fix #581.

==

numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
numpy/random/tests/test_random.py
==================
7e0f986;Stefan van der Walt;2008-04-09 20:05:57 +0000;Fix vander docstring.

==

numpy/lib/twodim_base.py
==================
5704671;Charles Harris;2008-04-09 18:19:23 +0000;Add test for string to float conversions of various types.

==

numpy/core/tests/test_regression.py
==================
1e56633;Charles Harris;2008-04-09 18:04:59 +0000;Apply patch supplied by philbinj to fix ticket 630.

==

numpy/core/src/arraytypes.inc.src
==================
7051296;Pearu Peterson;2008-04-09 15:31:28 +0000;Fix import error.

==

numpy/linalg/setup.py
==================
9af440d;Pearu Peterson;2008-04-09 15:28:36 +0000;Disable  pythonxerbla.c patch for win32 (the MSVC linker failes on multiple defined symbols) when using optimized lapack.

==

numpy/linalg/setup.py
==================
72bc6f7;Pearu Peterson;2008-04-09 15:15:05 +0000;Fixing compile error from MSVC. Try 3.

==

numpy/linalg/pythonxerbla.c
==================
ef7d8ef;Pearu Peterson;2008-04-09 15:07:33 +0000;Fixing compile error from MSVC. Try 2.

==

numpy/linalg/pythonxerbla.c
==================
338ae19;Pearu Peterson;2008-04-09 14:58:30 +0000;Fixing compile error from MSVC.

==

numpy/linalg/pythonxerbla.c
numpy/linalg/setup.py
==================
6796393;Pearu Peterson;2008-04-09 14:47:44 +0000;Cleanup.

==

numpy/linalg/pythonxerbla.c
==================
6a94903;Pearu Peterson;2008-04-09 14:38:15 +0000;Apply modified patch from ticket 673. The patch is effective when using unoptimized lapack shipped with numpy [tested] or if optimized lapack library does not have xerbla_ defined [not tested]

==

numpy/linalg/blas_lite.c
numpy/linalg/pythonxerbla.c
numpy/linalg/setup.py
==================
e50fa8e;Pearu Peterson;2008-04-09 11:53:02 +0000;Fix issue 587

==

numpy/f2py/auxfuncs.py
numpy/f2py/rules.py
==================
bda689e;Stefan van der Walt;2008-04-09 11:38:26 +0000;Regression test for ticket #714.

==

numpy/core/tests/test_regression.py
==================
5e31a42;Fernando Perez;2008-04-09 01:54:54 +0000;Add up to date (and slightly cleaned up) support for Cython after porting the existing Pyrex one, put in deprecation markers in the old Pyrex dir.
The pyrex dir can be removed in a subsequent commit.


==

numpy/doc/cython/MANIFEST
numpy/doc/cython/Makefile
numpy/doc/cython/Python.pxi
numpy/doc/cython/README.txt
numpy/doc/cython/numpy.pxi
numpy/doc/cython/numpyx.pyx
numpy/doc/cython/run_test.py
numpy/doc/cython/setup.py
numpy/doc/pyrex/README.txt
numpy/doc/pyrex/numpyx.pyx
numpy/doc/pyrex/setup.py
==================
0b0a389;dhuard;2008-04-09 00:57:23 +0000;Added test for handling missing data using loadtxt.

==

numpy/lib/tests/test_io.py
==================
737f9a1;dhuard;2008-04-09 00:56:39 +0000;Formatted the docstring. Added comment regarding the handling of missing values. Addresses ticket #717.

==

numpy/lib/io.py
==================
e4c01f2;Travis Oliphant;2008-04-09 00:16:09 +0000;Improve empty_like and zeros_like to respect sub-type.

==

numpy/core/numeric.py
==================
b21be67;Travis Oliphant;2008-04-08 20:43:07 +0000;Fix doc-tests for financial.py so they don't rely on floating-point exactness.  Start filling in final function.

==

numpy/lib/financial.py
numpy/lib/tests/test_financial.py
==================
e4e3018;aarchiba;2008-04-08 18:49:18 +0000;Added function for computing condition number, with tests and docs; closes #622.

==

numpy/linalg/linalg.py
numpy/linalg/tests/test_linalg.py
==================
2ba8132;David Cournapeau;2008-04-08 18:04:33 +0000;Fix test for assert* with nan values + string formatting issue when handling nan.

==

numpy/testing/tests/test_utils.py
numpy/testing/utils.py
==================
0035f91;Travis Oliphant;2008-04-08 05:02:03 +0000;Improve comments.

==

numpy/lib/financial.py
==================
7d51a22;Travis Oliphant;2008-04-08 04:56:12 +0000;Add docs and examples for financial functions.

==

numpy/__init__.py
numpy/lib/__init__.py
numpy/lib/financial.py
numpy/lib/tests/test_financial.py
numpy/ma/API_CHANGES.txt
numpy/ma/README.txt
==================
04fdbe5;David Cournapeau;2008-04-08 00:09:12 +0000;Handle nan in assert_array* funcs correctly. All numpy tests pass

==

numpy/testing/utils.py
==================
bfc33fd;David Cournapeau;2008-04-08 00:06:57 +0000;Add basic tests for assert_array_almost_equal.

==

numpy/testing/tests/test_utils.py
==================
7e107ac;David Cournapeau;2008-04-07 23:59:17 +0000;assert* funcs: Add generic test for rank 3 arrays.

==

numpy/testing/tests/test_utils.py
==================
ca295de;David Cournapeau;2008-04-07 23:57:42 +0000;assert* funcs test: add generic test for rank1 arrays for all dtype.

==

numpy/testing/tests/test_utils.py
==================
dff4020;David Cournapeau;2008-04-07 23:53:13 +0000;Test assert* funcs for arrays with Nan and rec arrays.

==

numpy/testing/tests/test_utils.py
==================
dd33570;David Cournapeau;2008-04-07 23:18:47 +0000;Some more tests for assert_* functions.

==

numpy/testing/tests/test_utils.py
==================
640018f;David Cournapeau;2008-04-07 23:18:32 +0000;Add the tests in setup file for testing package.

==

numpy/testing/setup.py
==================
e18fb0b;David Cournapeau;2008-04-07 23:02:05 +0000;Start testing test functions.

==

numpy/testing/tests/test_utils.py
==================
8ec8775;David Cournapeau;2008-04-07 22:40:42 +0000;Revert comparison function; nan handling broken.

==

numpy/testing/utils.py
==================
9842632;David Cournapeau;2008-04-07 21:34:08 +0000;Fix broken detection of nan in comparison function.

==

numpy/testing/utils.py
==================
51f8399;David Cournapeau;2008-04-07 21:23:10 +0000;Handling nan values for assert_ functions.

==

numpy/testing/utils.py
==================
a5574c3;aarchiba;2008-04-07 18:12:09 +0000;Fix maskedarray's std and var of complex arrays, with test. Add test for ddof.

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
99cbf12;pierregm;2008-04-07 14:42:50 +0000;core: compressed    : make sure that the result is always an array. count         : make sure that a regular ndarray is returned. added the get_fill_value function
extras:
added the expand_dims function
deleted varu/stdu (redundant with the ddof=1 parameter)

==

numpy/ma/core.py
numpy/ma/extras.py
numpy/ma/mstats.py
numpy/ma/tests/test_core.py
numpy/ma/tests/test_mstats.py
numpy/ma/tests/test_old_ma.py
==================
d1e8d75;aarchiba;2008-04-07 02:59:18 +0000;Documented  and tested new behaviour of std and var on complex numbers. Added ddof argument and its documentation to the std and var methods of matrix. Documented ddof for std and var methods of ma. Note that stdu and varu in ma still have the old, peculiar, behaviour for complex values.

==

numpy/add_newdocs.py
numpy/core/defmatrix.py
numpy/core/fromnumeric.py
numpy/core/tests/test_numeric.py
numpy/ma/core.py
==================
5b82c49;aarchiba;2008-04-07 02:07:04 +0000;Test that matrix_power behaves correctly for boolean matrices.

==

numpy/linalg/tests/test_linalg.py
==================
2058775;Travis Oliphant;2008-04-06 21:59:28 +0000;Remove redundant check because PyObject_TypeCheck already includes an exact check.

==

numpy/core/include/numpy/ndarrayobject.h
==================
f339b6c;Stefan van der Walt;2008-04-06 02:34:19 +0000;Factor out matrix_multiply from defmatrix.  Based on a patch by Anne Archibald.

==

numpy/core/defmatrix.py
numpy/linalg/info.py
numpy/linalg/linalg.py
numpy/linalg/tests/test_linalg.py
==================
c24510c;Stefan van der Walt;2008-04-06 00:40:20 +0000;Add tests for ddof parameter in var/std [patch by Anne Archibald].

==

numpy/core/tests/test_numeric.py
numpy/ma/tests/test_core.py
==================
3c26a66;Stefan van der Walt;2008-04-05 22:34:51 +0000;Add tests for changeset 4822 [patch by Anne Archibald].

==

numpy/core/tests/test_multiarray.py
numpy/core/tests/test_scalarmath.py
==================
481c25d;Stefan van der Walt;2008-04-05 22:28:10 +0000;Test effect of newaxis indexing on array scalar.

==

numpy/core/tests/test_scalarmath.py
==================
af85565;David Cournapeau;2008-04-05 16:49:18 +0000;Use newly available emitter in numscons to handle distutils build dir issues instead of setting them manually in scons script.

==

numpy/core/SConstruct
==================
1983fc0;David Cournapeau;2008-04-05 06:38:02 +0000;Replace Copy by Clone call in scons script (Copy is deprecated).

==

numpy/core/SConstruct
==================
f2e6d8e;dhuard;2008-04-04 20:13:24 +0000;Modified io._getconv to allow loading values stored as float as integers arrays. Added test to check the behavior as suggested in the comment from b. southey in ticket #623

==

numpy/lib/io.py
numpy/lib/tests/test_io.py
==================
3438413;Travis Oliphant;2008-04-04 06:37:45 +0000;Add modified internal rate of return calculation which is more conservative and takes into account re-investing profits and expense of financing losses.

==

numpy/lib/financial.py
numpy/lib/tests/test_financial.py
==================
effc09b;Travis Oliphant;2008-04-04 06:11:24 +0000;Add fromregex function (needs more testing) and some simple spreadsheet-like financial calculations.

==

numpy/lib/financial.py
numpy/lib/io.py
numpy/lib/tests/test_financial.py
==================
d396f12;Travis Oliphant;2008-04-03 20:44:22 +0000;Fix typo.

==

numpy/oldnumeric/ma.py
==================
4f8d0c8;Travis Oliphant;2008-04-03 15:38:18 +0000;Fix typo reported in #637.

==

numpy/core/src/scalarmathmodule.c.src
==================
1b8a670;dhuard;2008-04-03 14:17:08 +0000;added 1D tests for loadtxt and savetxt. Fixed a bug

==

numpy/lib/io.py
numpy/lib/tests/test_io.py
==================
8784a1a;dhuard;2008-04-03 14:06:33 +0000;Fixed a bug with loadtxt and savetxt failing on record arrays. This addresses ticket #623. Added simple tests for loadtxt and savetxt.

==

numpy/lib/io.py
numpy/lib/tests/test_io.py
==================
5fc40c0;Stefan van der Walt;2008-04-03 07:06:46 +0000;Fix mean docstring.

==

numpy/core/fromnumeric.py
==================
0762885;Travis Oliphant;2008-04-01 17:03:17 +0000;Fix-up a few errors in oldnumeric.

==

numpy/oldnumeric/ma.py
==================
f4fd214;Travis Oliphant;2008-04-01 14:26:07 +0000;fix-up imports in oldnumeric/ma.py

==

numpy/oldnumeric/ma.py
==================
87af946;Travis Oliphant;2008-04-01 14:23:48 +0000;Add old ma.py interface to oldnumeric compatibility layer so that it stays the same.

==

numpy/oldnumeric/ma.py
==================
b9f8725;Travis Oliphant;2008-03-30 03:04:26 +0000;Longdouble printing of nan's causes problems on some machines.

==

numpy/core/tests/test_scalarmath.py
==================
5827ec1;pierregm;2008-03-28 18:17:56 +0000;added common_fill_value and set_fill_value in __all__

==

numpy/ma/core.py
==================
a0cac20;Travis Oliphant;2008-03-28 05:08:21 +0000;Add test for fix to #713.

==

numpy/core/tests/test_regression.py
==================
b8f582d;Travis Oliphant;2008-03-28 05:03:50 +0000;Fix some Py_INCREF's to Py_XINCREF to avoid segfault when NULL is stored.

==

numpy/core/src/arrayobject.c
numpy/core/src/ufuncobject.c
==================
b303721;pierregm;2008-03-27 22:04:54 +0000;(forgot to get rid of my personal tests... sorry about that)

==

numpy/ma/core.py
==================
3474b70;pierregm;2008-03-27 21:56:44 +0000;new methods   : round new functions : frombuffer, fromfunction, identity, indices, trace to fix        : fromfile/tofile raise a NotImplementedError. For now.

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
738f70a;Travis Oliphant;2008-03-27 05:26:04 +0000;Change var and std for complex valued arrays to compute z*conj(z) to match signal processing convention.

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/multiarraymodule.c
==================
02ea9dd;Travis Oliphant;2008-03-27 04:27:35 +0000;Fix ticket #676: flattening in Fortran order for ndim > 2

==

numpy/core/src/arrayobject.c
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_scalarmath.py
==================
620653b;Travis Oliphant;2008-03-27 03:54:00 +0000;Add better test for inexact numbers.

==

numpy/core/tests/test_scalarmath.py
==================
084582b;Travis Oliphant;2008-03-27 03:38:14 +0000;Added patch from ticket #610 to allow floats in interp.

==

numpy/lib/function_base.py
==================
53cf422;Travis Oliphant;2008-03-25 04:49:47 +0000;Fix typo from last checkin.

==

numpy/oldnumeric/compat.py
==================
a9a3a8c;Travis Oliphant;2008-03-25 04:28:49 +0000;Improve support for old pickles.

==

numpy/oldnumeric/compat.py
numpy/oldnumeric/misc.py
==================
4d1418a;Stefan van der Walt;2008-03-25 01:24:36 +0000;Add regression test for PyArray_FromIter issue mentioned on list.

==

numpy/core/tests/test_regression.py
==================
4863250;Robert Kern;2008-03-24 22:05:53 +0000;NotImplementedError is the exception, not NotImplemented

==

numpy/oldnumeric/misc.py
==================
e2488d6;David Cournapeau;2008-03-23 17:16:06 +0000;Do not fail test when ctypes is not available; print a message about skipping the test instead.

==

numpy/tests/test_ctypeslib.py
==================
4825660;Stefan van der Walt;2008-03-23 14:21:31 +0000;Fix ReST syntax in HOWTO_DOCUMENT.

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
59cf27d;Stefan van der Walt;2008-03-23 13:53:33 +0000;Add numeric doctests (patch by Gael).

==

numpy/core/numeric.py
==================
1a159d1;Stefan van der Walt;2008-03-23 11:15:12 +0000;Remove broken ma test.

==

numpy/ma/tests/test_old_ma.py
==================
c336354;David Cournapeau;2008-03-23 06:17:53 +0000;mimic gcc driver detection for nocona cpu detection.

==

numpy/distutils/cpuinfo.py
==================
c0c85e0;David Cournapeau;2008-03-23 06:16:32 +0000;Revert accidentally commited changes to TestLoadLibrary unittest for ctypes.

==

numpy/tests/test_ctypeslib.py
==================
8eed71c;David Cournapeau;2008-03-23 06:13:17 +0000;Fix has_sse3 and add has_ssse3 function for cpuinfo on linux.

==

numpy/distutils/cpuinfo.py
numpy/tests/test_ctypeslib.py
==================
5cb370e;pierregm;2008-03-22 20:03:03 +0000;core    : fixed sort when axis is None mstats  : fixed mmedian, renamed to median and moved to numpy.ma.extras for compatibility extras  : introduced median from mstats mrecords: * fixed __array_finalize__ to keep the mask of a masked array when viewing it as a mrecarray           * simplified _getdata

==

numpy/ma/core.py
numpy/ma/extras.py
numpy/ma/morestats.py
numpy/ma/mrecords.py
numpy/ma/mstats.py
numpy/ma/tests/test_extras.py
numpy/ma/tests/test_mstats.py
==================
a70012a;Stefan van der Walt;2008-03-22 18:20:44 +0000;Fix order of arguments to test.

==

numpy/core/tests/test_scalarmath.py
==================
004082f;Stefan van der Walt;2008-03-22 17:45:01 +0000;Fix comparison to 0 in scalarmath test.

==

numpy/core/tests/test_scalarmath.py
==================
5025237;Stefan van der Walt;2008-03-22 16:31:25 +0000;Add test for ticket #632.

==

numpy/core/tests/test_regression.py
==================
2805147;Stefan van der Walt;2008-03-22 16:25:58 +0000;Add test for #629.

==

numpy/core/tests/test_scalarmath.py
==================
f49d66a;Stefan van der Walt;2008-03-22 16:25:21 +0000;Fix typo.

==

numpy/core/tests/test_regression.py
==================
23779dd;Stefan van der Walt;2008-03-22 16:20:41 +0000;Move test for #562 to the right place.

==

numpy/core/tests/test_regression.py
==================
50a4053;Stefan van der Walt;2008-03-22 14:47:02 +0000;Add regression test for ticket #702.

==

numpy/core/tests/test_regression.py
==================
64d3185;Stefan van der Walt;2008-03-22 14:38:22 +0000;Add regression test for #555.

==

numpy/core/tests/test_regression.py
==================
568bbbf;Stefan van der Walt;2008-03-22 14:31:17 +0000;Add test for #583.  Fix invalid test for #99.

==

numpy/core/tests/test_regression.py
==================
fd1cbdf;David Cournapeau;2008-03-22 07:04:43 +0000;Include patch from jsbronder to fix ticket #644 related to nocona cpu detection.

==

numpy/distutils/cpuinfo.py
==================
b2bbe26;Travis Oliphant;2008-03-22 06:55:41 +0000;Re-generated the pyrex mtrand code after fixing seed setting bug: ticket #555

==

numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
numpy/random/mtrand/numpy.pxi
==================
a3e6098;Travis Oliphant;2008-03-22 06:45:57 +0000;Attempt to fix ticket #555

==

numpy/random/mtrand/mtrand.pyx
numpy/random/mtrand/numpy.pxi
==================
7081815;David Cournapeau;2008-03-22 06:43:19 +0000;Handle typo (sse3 vs ssse3) in the cpu arch flags as found in /proc/cpuinfo for some linux kernels (at least 2.6.23).

==

numpy/distutils/cpuinfo.py
==================
466fa4b;David Cournapeau;2008-03-22 06:25:07 +0000;Add VisualCompaq compiler to the list of fortran compilers if platform is cygwin.

==

numpy/distutils/fcompiler/compaq.py
==================
6e6c5c4;Travis Oliphant;2008-03-22 04:46:19 +0000;Fix ticket #583 : error when using str as data-type for fromiter.

==

numpy/core/src/multiarraymodule.c
==================
5696770;Travis Oliphant;2008-03-22 04:23:42 +0000;Change iteration loop number to a defined value and increment it.  Should fix ticket #706.

==

numpy/linalg/dlapack_lite.c
==================
f8fb34d;Travis Oliphant;2008-03-22 04:15:24 +0000;Comment out NotImplemented error when using setup tools.

==

numpy/distutils/core.py
==================
dd868d8;Travis Oliphant;2008-03-22 03:06:28 +0000;Fix ticket #702 (as well as other speed ups).

==

numpy/core/src/arrayobject.c
==================
3ee0852;Travis Oliphant;2008-03-22 01:43:02 +0000;Fix reference count problems due to indiscriminate use of DescrConverter in PyArg_ParseTuple.  Tests need to be run to make sure this works.

==

numpy/core/src/arraymethods.c
numpy/core/src/multiarraymodule.c
numpy/core/src/scalartypes.inc.src
numpy/core/src/ufuncobject.c
==================
e949b18;Travis Oliphant;2008-03-22 01:00:25 +0000;Fix ticket #670.

==

numpy/core/src/ufuncobject.c
==================
be077da;Travis Oliphant;2008-03-22 00:24:21 +0000;More complete fix to #647 so that fast copy is not attempted on portions of record arrays.

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/arrayobject.c
==================
9b9fcfc;Travis Oliphant;2008-03-22 00:10:11 +0000;Add regression test in Ticket #711 which is the fix by pv

==

numpy/core/tests/test_regression.py
==================
e26b067;Travis Oliphant;2008-03-21 23:54:58 +0000;Fix ticket #711 by more carefully guarding object array reference counting.

==

numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
==================
4a562ed;Travis Oliphant;2008-03-21 19:34:19 +0000;Fix reference count pattern for object arrays so that a decref is followed by an incref on the *same* array.  This should fix reference count issues on object arrays.

==

numpy/core/src/arrayobject.c
==================
a5f7aaf;Stefan van der Walt;2008-03-21 14:54:34 +0000;Revert r4897, which fixed one memory error in exchange for another.

==

numpy/core/src/multiarraymodule.c
==================
971218b;David Cournapeau;2008-03-21 13:35:50 +0000;Add regression for #627.

==

numpy/linalg/tests/test_regression.py
==================
ea1b836;David Cournapeau;2008-03-21 13:28:29 +0000;Add regression test for #662.

==

numpy/linalg/tests/test_regression.py
==================
51a6dc7;David Cournapeau;2008-03-21 13:24:30 +0000;Add regression test for ticket #652.

==

numpy/linalg/tests/test_regression.py
==================
948e086;David Cournapeau;2008-03-21 13:08:21 +0000;Add regression test for #628.

==

numpy/lib/tests/test_regression.py
==================
c9e6f30;David Cournapeau;2008-03-21 12:49:41 +0000;Fix typo (bug #704).

==

numpy/distutils/command/build_clib.py
==================
344a859;Stefan van der Walt;2008-03-21 09:15:56 +0000;Fix memory leak in _copy_from0d.  Investigated by Matthieu, patched by pv.  Closes #633.

==

numpy/core/src/arrayobject.c
numpy/core/tests/test_regression.py
==================
bb41c67;dhuard;2008-03-20 13:41:19 +0000;added docstring to diagflat.

==

numpy/lib/twodim_base.py
==================
51a6222;Stefan van der Walt;2008-03-20 00:12:12 +0000;Fix memory leaks as reported in #562.  Patch by Matthieu Brucher.

==

numpy/core/src/multiarraymodule.c
numpy/core/tests/test_regression.py
==================
0291676;Stefan van der Walt;2008-03-19 15:10:11 +0000;Remove check for OverflowError in intp test.

==

numpy/core/tests/test_regression.py
==================
4f9812e;Stefan van der Walt;2008-03-19 15:08:50 +0000;Fix typo.

==

numpy/core/tests/test_regression.py
==================
cde8f10;Stefan van der Walt;2008-03-19 14:45:16 +0000;Fix another occurrence of intp in the regression tests.

==

numpy/core/tests/test_regression.py
==================
f92decf;Stefan van der Walt;2008-03-19 11:20:10 +0000;Fix test for intp conversion on win32 running 64-bit hardware.  Intp is a numpy type, and does not allow two parameters in the constructor, unlike the Python integer type.

==

numpy/core/tests/test_regression.py
==================
004d77e;Stefan van der Walt;2008-03-19 09:29:52 +0000;In site.cfg, change DEFAULT section to ALL to accommodate building on Python 2.6.

==

numpy/distutils/environment.py
numpy/distutils/system_info.py
site.cfg.example
==================
9807248;Charles Harris;2008-03-19 06:17:50 +0000;And add bincount to error message.

==

numpy/lib/src/_compiled_base.c
==================
8ae9e39;Charles Harris;2008-03-19 06:16:07 +0000;More typo fixing.

==

numpy/lib/src/_compiled_base.c
==================
fd291ca;Charles Harris;2008-03-19 05:59:13 +0000;Fix histogram references in arr_bincount.

==

numpy/lib/src/_compiled_base.c
==================
4482e5f;dhuard;2008-03-19 01:33:11 +0000;Clean up of average function. weights now should have the same shape as a, or be 1D with length equal to the shape of a along axis. A number of tests are added.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
38ad50e;pierregm;2008-03-18 23:17:50 +0000;reverted to a proper version of __getitem__

==

numpy/ma/core.py
==================
c70befd;pierregm;2008-03-18 22:03:34 +0000;- fixed masked_where (bug #703) - simplified 'masked_invalid' and added it to __all__ - added the 'out' optional parameter to .mean

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
ac13c03;Charles Harris;2008-03-18 18:02:31 +0000;Get actual and desired in right order in tests.

==

numpy/core/tests/test_umath.py
==================
6d98ace;Stefan van der Walt;2008-03-18 11:56:24 +0000;Ctypes loads .so/.pyd if library is not found.

==

numpy/ctypeslib.py
==================
4b76f62;Stefan van der Walt;2008-03-18 11:17:21 +0000;Fix multiarray from/to-file test under Windows.

==

numpy/core/tests/test_multiarray.py
==================
faad13f;Charles Harris;2008-03-17 15:20:18 +0000;Use a more accurate expression for arccosh of complex numbers. The implementations of the other special functions should be examined to see if similar improvements can be made.

==

numpy/core/src/umathmodule.c.src
==================
e99ac66;Charles Harris;2008-03-17 14:52:17 +0000;Fix arccosh for complex. The previous implementation could take the sqrt of a number on the branch cut of sqrt, leading to roundoff problems. This seems to have come about because the formula was derived using the non principal branch of the sqrt, i.e., it used 1=(-1)*(-1).

==

numpy/core/src/umathmodule.c.src
==================
49a78cc;Charles Harris;2008-03-17 08:36:25 +0000;Add tests for consistency of complex ufuncs of different precisions. Rename some tests so they actually run. We've been missing errors. Arccosh currently fails. IMHO, we use the wrong branch of the complex function and I won't change anything until we decide on the proper usage.

==

numpy/core/tests/test_umath.py
==================
d76f7cf;Charles Harris;2008-03-17 03:48:57 +0000;ticket 641 Fix unary ufuncs for clongdouble. Still needs test functions. Needs verification that it fixes the segfault.

==

numpy/core/src/ufuncobject.c
==================
07ed95f;Charles Harris;2008-03-16 17:08:32 +0000;Change ValueError to TypeError in average

==

numpy/lib/function_base.py
==================
345b13d;Charles Harris;2008-03-16 16:59:08 +0000;Fix average to preserve matrices. Fix average documentation.

==

numpy/lib/function_base.py
==================
9318f7a;Stefan van der Walt;2008-03-16 16:37:08 +0000;In ctypes.load_library, also attempt to load .so files on failure. Build processes sometimes produce libraries with incorrect suffixes on non-linux platforms.

==

numpy/ctypeslib.py
numpy/tests/test_ctypeslib.py
==================
94766ae;David Cournapeau;2008-03-16 03:57:00 +0000;Add pkg name at the beginning of logging scons call.

==

numpy/distutils/command/scons.py
==================
d40e565;Charles Harris;2008-03-16 02:40:57 +0000;Rewrite average and document it. Remove inappropriate test of average. This should close ticket 700, but someone else should check the documentation to see if the new function does what it is supposed to, whatever the heck that was.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
857b6ba;Charles Harris;2008-03-15 18:54:01 +0000;Clean up polyfit documentation. Add documentation for polyval.

==

numpy/lib/polynomial.py
==================
ebab42e;Charles Harris;2008-03-15 18:27:45 +0000;Fix polyfit for 2D case and add test for same. Fixes ticket 697.

==

numpy/lib/polynomial.py
numpy/lib/tests/test_polynomial.py
==================
dee3e75;Charles Harris;2008-03-15 18:25:15 +0000;Break lines.

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
96bf0c7;dhuard;2008-03-14 16:17:44 +0000;Added a test for average. It uncovers a bug related to the shape of the weights.

==

numpy/lib/tests/test_function_base.py
==================
6b3b8d4;dhuard;2008-03-14 15:19:58 +0000;Added test for 4D histogramdd case. Ticket 690.

==

numpy/lib/tests/test_function_base.py
==================
f50f4b4;David Cournapeau;2008-03-13 07:29:56 +0000;Put a more meaningful message when importing numpy from its source tree.

==

numpy/__init__.py
==================
fd6d555;Travis Oliphant;2008-03-13 04:44:55 +0000;Fix oldnumeric compatibility with ma

==

numpy/oldnumeric/ma.py
==================
e3fbd79;Stefan van der Walt;2008-03-12 08:08:57 +0000;Add regression test for r4798 (ticket #658).

==

numpy/core/tests/test_regression.py
==================
9be99bb;Stefan van der Walt;2008-03-12 08:06:22 +0000;Add test for r4797.

==

numpy/core/tests/test_regression.py
==================
d1eeb41;Robert Kern;2008-03-11 20:37:07 +0000;BUG: Python 2.3 compatibility. We cannot use generator expressions in numpy.

==

numpy/ma/extras.py
==================
c33da3d;Stefan van der Walt;2008-03-11 07:17:03 +0000;Fix pseudo-inverse description.  Closes #631.

==

numpy/linalg/info.py
==================
5db434d;Stefan van der Walt;2008-03-11 07:14:54 +0000;Add regression test for ticket #608.

==

numpy/core/tests/test_regression.py
==================
3667424;Stefan van der Walt;2008-03-11 07:11:54 +0000;Clear sign-bit when calculating absolute value.

==

numpy/core/src/umathmodule.c.src
==================
b071bae;Charles Harris;2008-03-11 05:47:42 +0000;Rename check to be closer to actual test.

==

numpy/core/tests/test_regression.py
==================
d80ffe5;Charles Harris;2008-03-11 05:40:14 +0000;Fix MyPyLong_AsUnsignedLong. I think this will fix the problem with uint64 conversions on 64 bit OS, but it needs to be tested.

==

numpy/core/src/arraytypes.inc.src
==================
e894486;Stefan van der Walt;2008-03-11 05:14:09 +0000;Try to access file only once to make Windows tests pass.

==

numpy/core/tests/test_memmap.py
==================
8e10198;Stefan van der Walt;2008-03-11 02:59:00 +0000;Use mktemp as a last resort to fix the memmap tests that break under Windows.

==

numpy/core/tests/test_memmap.py
==================
c851443;Stefan van der Walt;2008-03-11 02:30:12 +0000;Allow file-like object to be used to create a memmap. Fix NamedTemporaryFile problem for Windows platforms.

==

numpy/core/memmap.py
numpy/core/tests/test_memmap.py
==================
a804623;Matthew Brett;2008-03-10 16:56:38 +0000;Fixed setting of distutils.[plat]ccompiler.[plat]ccompiler leading to attribute error

==

numpy/distutils/ccompiler.py
==================
5a6dce2;chris.burns;2008-03-08 00:42:40 +0000;Refactor __del__ so views of memmaps do not close the python mmap.

==

numpy/core/memmap.py
==================
62e9949;Travis Oliphant;2008-03-07 21:32:04 +0000;Add ddof parameter to std and var computations.

==

numpy/core/fromnumeric.py
numpy/core/src/arraymethods.c
numpy/core/src/multiarraymodule.c
numpy/ma/core.py
==================
0ef3f8b;Charles Harris;2008-03-06 05:03:02 +0000;Apply David's patch to fix ticket 653.

==

numpy/distutils/cpuinfo.py
==================
2439416;Charles Harris;2008-03-05 07:00:18 +0000;Simplify MyPyLong_AsUnsignedLongLong and make it compatible with old C compilers. This function will still fail for numbers less than -2**63, which is not quite correct. The problem is with the conversion functions provided by Python. The alternative is to write our own or call the Python modulus function to convert to the valid C ranges. The other conversion functions have the same problem.

==

numpy/core/src/arraytypes.inc.src
==================
a783bfd;Charles Harris;2008-03-05 06:20:04 +0000;Fix ticket 597. The conversion of negative numbers to uint64 returned the wrong values.

==

numpy/core/src/arraytypes.inc.src
numpy/core/tests/test_regression.py
==================
4b3dd3d;David Cournapeau;2008-03-05 05:19:07 +0000;Remove debug pring statement in numpy.core SConstruct.

==

numpy/core/SConstruct
==================
0dba087;Travis Oliphant;2008-03-04 22:04:46 +0000;Finish simple example for new data-type and add test.

==

numpy/doc/newdtype_example/example.py
numpy/doc/newdtype_example/floatint.c
==================
91ee5fe;Travis Oliphant;2008-03-04 20:06:39 +0000;Add _default_copyswapn for extended data-types.  Fix recent format error.

==

numpy/core/src/arrayobject.c
==================
52c2183;Travis Oliphant;2008-03-04 20:05:40 +0000;Simple example of an extended data-type.

==

numpy/doc/newdtype_example/floatint.c
numpy/doc/newdtype_example/floatint/__init__.py
numpy/doc/newdtype_example/setup.py
==================
0264b78;Stefan van der Walt;2008-03-04 05:17:38 +0000;Add test for dtype field renaming.

==

numpy/core/tests/test_multiarray.py
==================
43cddec;Travis Oliphant;2008-03-04 00:21:29 +0000;Deprecate close method on memmap arrays.

==

numpy/core/memmap.py
==================
0ccc03e;Travis Oliphant;2008-03-03 00:42:42 +0000;Re-raise the MemoryError for 0-bytes read even if it is not the right thing... Change in 1.1

==

numpy/core/src/multiarraymodule.c
==================
4cbe8fd;Travis Oliphant;2008-03-02 16:35:09 +0000;Fix realloc problem by making sure it is never called with 0.

==

numpy/core/src/multiarraymodule.c
==================
16add82;Travis Oliphant;2008-03-02 08:21:48 +0000;Fix the way memory maps are created to avoid masked_array and memory mapped.

==

numpy/core/memmap.py
==================
59a3975;Travis Oliphant;2008-03-02 08:20:03 +0000;Improve the way ufuncs look up 1d loops for registered data-types.

==

numpy/core/src/ufuncobject.c
==================
5fcca15;Travis Oliphant;2008-03-02 03:28:03 +0000;Allow names to be changed for data type objects without creating an entirely new data-type.

==

numpy/core/src/arrayobject.c
==================
2459acb;Stefan van der Walt;2008-03-01 17:17:46 +0000;Add test for scalar indexing.

==

numpy/core/tests/test_scalarmath.py
==================
0863e65;Stefan van der Walt;2008-03-01 08:20:07 +0000;Add basic usage docstring for dtype.

==

numpy/add_newdocs.py
==================
6a63cc3;Robert Kern;2008-02-29 21:21:04 +0000;Fix #643. This doesn't resolve *all* of the issues of working within a Turkish locale, but this will work around the bug that the OLPC project found.

==

numpy/core/code_generators/generate_umath.py
numpy/core/numerictypes.py
==================
709bd50;Travis Oliphant;2008-02-29 06:35:47 +0000;Alter NumPy docstring to remove ad and give a litte more info.

==

numpy/__init__.py
==================
75b86e1;Travis Oliphant;2008-02-28 16:07:59 +0000;Try to speed up fftfreq a bit.

==

numpy/fft/helper.py
==================
3cbfb32;Robert Kern;2008-02-28 07:06:24 +0000;Omit loadtxt and savetxt from __all__

==

numpy/core/numeric.py
==================
bcbba6f;Robert Kern;2008-02-28 06:42:48 +0000;loadtxt and savetxt moved to lib/io.py

==

numpy/core/numeric.py
==================
f01d8e5;Robert Kern;2008-02-28 06:39:28 +0000;Correct condition.

==

numpy/lib/io.py
==================
7615661;Robert Kern;2008-02-28 06:31:48 +0000;Typo.

==

numpy/lib/io.py
==================
466ee4b;Robert Kern;2008-02-27 23:53:39 +0000;Add PEP-style document describing the NPY format.

==

numpy/doc/npy-format.txt
==================
4bff077;Robert Kern;2008-02-27 23:00:48 +0000;One dtype representation issue got fixed. Documented the remaining one.

==

numpy/lib/format.py
==================
a5615d4;Robert Kern;2008-02-27 22:56:07 +0000;Handle the no-comment case correctly.

==

numpy/lib/io.py
==================
984bd6c;Travis Oliphant;2008-02-27 20:59:20 +0000;Fix printing of complicated dtypes.

==

numpy/core/_internal.py
==================
2cb12ec;Robert Kern;2008-02-27 19:37:11 +0000;Documentation update for the NPY format.

==

numpy/lib/format.py
==================
bccc9d0;Travis Oliphant;2008-02-27 00:51:51 +0000;Don't use FAST moves on aligned flexible data-types to avoid bus errors on SPARC archiecture.

==

numpy/core/src/arrayobject.c
==================
fb61bf2;Travis Oliphant;2008-02-26 21:17:13 +0000;Make sure that mp is an array before testing for 0-d ness.

==

numpy/core/src/arrayobject.c
==================
fa547b8;Travis Oliphant;2008-02-25 22:51:21 +0000;Allow numpy scalars to be indexed in limited ways, but not be iterable.  Fix consistency bug with [...] indexing and remove useless check and allow 0-d boolean arrays to work as masks for scalars.

==

numpy/core/src/arrayobject.c
numpy/core/src/scalartypes.inc.src
==================
5089f5d;Matthew Brett;2008-02-24 18:01:43 +0000;Return to condition where overwrite_output for median raises error for non-ndarray input

==

numpy/lib/function_base.py
==================
0abaf57;Travis Oliphant;2008-02-23 06:37:45 +0000;Add Anne Archibald's fix to average to remove eval.

==

numpy/lib/function_base.py
==================
1cc67dd;Travis Oliphant;2008-02-23 01:14:40 +0000;Fix bug reported by Debian package maintainer.

==

numpy/lib/function_base.py
==================
6cd2d6d;chris.burns;2008-02-22 22:42:06 +0000;Small sync-to-flush doc update.

==

numpy/core/memmap.py
==================
3a9c922;Stefan van der Walt;2008-02-22 08:58:25 +0000;Deprecate 'sync' in favour of 'flush'.

==

numpy/core/memmap.py
numpy/core/tests/test_memmap.py
==================
16eddde;chris.burns;2008-02-21 23:37:43 +0000;Remove type-checking which failed with MaskedArrays.  Add documentation and tests.

==

numpy/core/memmap.py
numpy/core/tests/test_memmap.py
==================
3937248;Robert Kern;2008-02-20 22:04:52 +0000;Use x.any() instead of any(x)

==

numpy/lib/function_base.py
==================
5fb36c0;Stefan van der Walt;2008-02-20 09:07:45 +0000;Restructure and add to documentation.

==

numpy/core/fromnumeric.py
==================
9555d91;Matthew Brett;2008-02-19 23:49:50 +0000;cumprod docstring, median input array coercion

==

numpy/core/fromnumeric.py
numpy/lib/function_base.py
==================
3174838;Stefan van der Walt;2008-02-19 19:43:56 +0000;Remove 'Blah, blah' from docstrings.

==

numpy/core/fromnumeric.py
==================
e6f97dc;pierregm;2008-02-15 19:39:10 +0000;updated API_CHANGES.txt mstats : updated docstrings morestats : updated docstrings core : fixed __setitem__ for records

==
==================
5cc1b4e;dhuard;2008-02-15 16:20:15 +0000;For 4D samples, histogramdd returned badly shaped histograms once in a while. This should be fixed now.

==

numpy/lib/function_base.py
==================
b46333f;Charles Harris;2008-02-14 07:24:13 +0000;Add type specific mergesort for strings and unicode. Use adaptive string_copy function suggested by Francesc. Make the sorting code more consistent across types.

==

numpy/core/src/_sortmodule.c.src
numpy/core/tests/test_multiarray.py
==================
4e1fbfd;pierregm;2008-02-14 01:32:35 +0000;numpy.ma : docs + API_CHANGES.txt updates

==

numpy/ma/API_CHANGES.txt
numpy/ma/extras.py
numpy/ma/morestats.py
numpy/ma/mstats.py
==================
c1408e3;Matthew Brett;2008-02-14 01:32:20 +0000;Fixed median axis=None raveling in case of copy

==

numpy/lib/function_base.py
==================
0bbfbbc;Charles Harris;2008-02-13 23:10:44 +0000;Add type specific heapsort for strings and unicode.

==

numpy/core/src/_sortmodule.c.src
numpy/core/tests/test_multiarray.py
==================
e7c5358;Charles Harris;2008-02-13 21:41:47 +0000;Add type specific heapsort to argsort kind options for strings and unicode.

==

numpy/core/src/_sortmodule.c.src
numpy/core/tests/test_multiarray.py
==================
4ded091;Stefan van der Walt;2008-02-13 20:37:28 +0000;Add regression tests for tickets #657 and #658.

==

numpy/core/tests/test_regression.py
==================
e64f298;David Cournapeau;2008-02-13 09:53:32 +0000;scons build: fail as soon as possible if Python.h is not found. This is particularly useful on windows if the platform sdk is not available

==

numpy/core/SConstruct
==================
7711db0;Travis Oliphant;2008-02-13 06:11:19 +0000;Fix ticket #658 which is a segfault on a corner case for copy detection.

==

numpy/core/src/multiarraymodule.c
==================
e8c4f97;Travis Oliphant;2008-02-13 05:54:52 +0000;Fix swap error for indexing flat attribute.  The data-type of the returned object keeps the byte-swap information so there is no need to swap.

==

THANKS.txt
numpy/core/src/arrayobject.c
==================
908adda;Charles Harris;2008-02-13 02:56:50 +0000;Add type specific quicksort for strings and unicode in sort and argsort methods.

==

numpy/core/src/_sortmodule.c.src
==================
441f59e;Charles Harris;2008-02-13 02:54:50 +0000;Fix some indentation.

==

numpy/core/src/multiarraymodule.c
==================
90543a6;Matthew Brett;2008-02-13 02:44:43 +0000;Fix missing mean for median calculation, missing dtype from defmatrix mean signature

==

numpy/core/defmatrix.py
numpy/lib/function_base.py
==================
2b608e1;Matthew Brett;2008-02-13 02:26:58 +0000;Fix, uncomment import in median doctest

==

numpy/lib/function_base.py
==================
e072ab0;Matthew Brett;2008-02-13 02:16:05 +0000;New implementation of median allowing axis, out keywords

==

numpy/lib/function_base.py
==================
82f37ae;chris.burns;2008-02-12 22:13:00 +0000;Add datasource test file that didn't make it in the move from scipy.io to numpy.lib.

==

numpy/lib/tests/test__datasource.py
==================
829fc89;Robert Kern;2008-02-12 21:31:58 +0000;Make sure that multivariate_normal() uses the standard_normal() method rather than the function so as to use the same consistent state.

==

numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
==================
1f67119;Charles Harris;2008-02-12 18:19:37 +0000;Add tests of the sort and argsort methods preparatory to merging new type specific versions for strings and unicode.

==

numpy/core/tests/test_multiarray.py
==================
ba07a50;Pearu Peterson;2008-02-12 11:49:11 +0000;Fix type. Sorry about that.

==

numpy/distutils/fcompiler/hpux.py
==================
56d1562;Pearu Peterson;2008-02-12 11:37:06 +0000;hpux fortran compiler support: patch from an user feedback.

==

numpy/distutils/fcompiler/hpux.py
==================
541c0e5;Jarrod Millman;2008-02-10 15:22:01 +0000;initial port from Moin Moin site

==

numpy/ma/README.txt
==================
9109ba9;Charles Harris;2008-02-10 06:38:37 +0000;Fix whitespace and compiler warning. _compiled_base.c is full of ugly code and is in terrific need of reformating.

==

numpy/lib/src/_compiled_base.c
==================
2bd3c4c;Charles Harris;2008-02-10 06:19:42 +0000;Add tests for sorting strings containing zeros.

==

numpy/core/tests/test_regression.py
==================
382e672;Charles Harris;2008-02-10 05:11:58 +0000;Fix STRING_compare function to work correctly with strings containing zeros.

==

numpy/core/src/arraytypes.inc.src
==================
ec93d80;Charles Harris;2008-02-10 04:57:45 +0000;Add inline string compare functions for strings and UCS4. The indirect merge sort now works correctly for strings. The new functions use the const keyword, which may be a problem with very old C compilers.

==

numpy/core/src/_sortmodule.c.src
==================
43901a8;Charles Harris;2008-02-10 04:53:58 +0000;Add PyArray_CompareString function, but don't add it to the OBJECT_API yet. A function not used warning will be issued during compile, but it is harmless.

==

numpy/core/src/arrayobject.c
==================
16aff17;David Cournapeau;2008-02-09 18:08:40 +0000;Add ma for scons build

==

numpy/ma/setupscons.py
numpy/setupscons.py
==================
c9687d1;David Cournapeau;2008-02-09 13:01:45 +0000;Do not install config.h, since it not needed anymore for numpy API

==

numpy/core/setup.py
==================
ce2316f;Stefan van der Walt;2008-02-09 01:35:25 +0000;Merge maskedarray branch.

==
==================
fbc211d;Stefan van der Walt;2008-02-09 00:45:11 +0000;Merge maskedarray branch up to r4776.

==
==================
d42ab15;chris.burns;2008-02-08 20:20:55 +0000;Add numpyconfig.h to the install

==

numpy/core/setup.py
==================
c66da19;Jarrod Millman;2008-02-08 10:54:01 +0000;ran reindent

==

benchmarks/simpleindex.py
numpy/_import_tools.py
numpy/add_newdocs.py
numpy/core/code_generators/generate_ufunc_api.py
numpy/core/defmatrix.py
numpy/core/numeric.py
numpy/core/records.py
numpy/core/scons_support.py
numpy/core/setup.py
numpy/core/setupscons.py
numpy/distutils/command/scons.py
numpy/distutils/misc_util.py
numpy/doc/example.py
numpy/fft/setupscons.py
numpy/lib/arraysetops.py
numpy/lib/format.py
numpy/lib/io.py
numpy/lib/scimath.py
numpy/lib/setupscons.py
numpy/lib/tests/test_format.py
numpy/lib/utils.py
numpy/linalg/linalg.py
numpy/linalg/setupscons.py
numpy/random/setupscons.py
==================
0b7800b;Jarrod Millman;2008-02-08 10:12:16 +0000;merging David Cournapeau's build_with_scons branch, which adds scons support to numpy.distutils and modifies the configuration of numpy/core

==
==================
fb3f711;Jarrod Millman;2008-02-08 09:48:31 +0000;Merge revisions 4721:4771 from the trunk

==
==================
a2df3f7;pierregm;2008-02-07 17:00:02 +0000;comments cleaning and docstring updates.

==

numpy/ma/core.py
numpy/ma/extras.py
==================
1845fe9;Stefan van der Walt;2008-02-07 11:42:03 +0000;Remove .data comparisons in tests.  Fix whitespace.

==

numpy/ma/tests/test_core.py
numpy/ma/tests/test_old_ma.py
==================
5bcb91d;Stefan van der Walt;2008-02-06 23:17:35 +0000;Ignore DeprecationWarning during testing.

==

numpy/ma/tests/test_core.py
==================
9ed6591;Stefan van der Walt;2008-02-06 23:11:09 +0000;Remove print statement from test.

==

numpy/ma/tests/test_core.py
==================
82b730f;pierregm;2008-02-01 23:40:35 +0000;maskedarray.core: tolist : make sure that a masked record is output as a tuple of None
maskedarray.mrecords:
* introduced mrecarray as the equivalent of recarray w/ fieldmask
* simplified fromarrays/fromrecords

==

numpy/ma/core.py
numpy/ma/mrecords.py
numpy/ma/tests/test_core.py
numpy/ma/tests/test_mrecords.py
==================
964727a;Stefan van der Walt;2008-02-01 11:17:39 +0000;Add regression test for searchsorted on variable-length arrays.

==

numpy/core/tests/test_regression.py
==================
0604754;Travis Oliphant;2008-01-31 19:19:26 +0000;Remove unused variable in last change.

==

numpy/core/src/multiarraymodule.c
==================
3378ea7;Travis Oliphant;2008-01-31 19:13:26 +0000;Fix type-coercion for search sorted so that it works with variable-length arrays.

==

numpy/core/src/multiarraymodule.c
==================
25b3334;Pearu Peterson;2008-01-31 12:47:01 +0000;Fix intent(callback) when used inside Fortran source.

==

numpy/f2py/crackfortran.py
==================
3af7329;pierregm;2008-01-30 18:32:11 +0000;maskedarray.core: * fixed __getitem__ on records when fill_value is not set * fixed _extrema_operation.reduce to accept non arrays as arguments (ticket #645)

==

numpy/ma/core.py
==================
5af6ff3;Stefan van der Walt;2008-01-29 09:32:43 +0000;Add regression test for fromstring.

==

numpy/core/tests/test_regression.py
==================
74eec4e;Travis Oliphant;2008-01-29 03:14:01 +0000;Fix fromstring to match fromfile behavior when parsing integers (base-10 only).  Ticket #650

==

numpy/add_newdocs.py
numpy/core/src/arraytypes.inc.src
==================
b65ebf5;Stefan van der Walt;2008-01-28 23:14:08 +0000;Merge maskedarray branch to r4758.

==
==================
c87c162;pierregm;2008-01-28 22:45:54 +0000;maskedarray.core: * fixed compress (third time the charm?) * fixed a pb w/ get_fill_value when fill_value is None: now recognized records.

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
2f3f1a8;David Cournapeau;2008-01-26 06:53:45 +0000;Import numpy.distutils before distutils, to let numpy.distutils do its monkey patching correctly

==

setupscons.py
==================
7e33f2e;Pearu Peterson;2008-01-25 18:32:14 +0000;Catch wrong array sizes when the length of an array is 1.

==

numpy/f2py/src/fortranobject.c
==================
ea5fb6f;David Cournapeau;2008-01-25 07:08:41 +0000;Detect if numscons is not available ASAP in top setupscons.py

==

setupscons.py
==================
b11c4f8;David Cournapeau;2008-01-25 06:58:46 +0000;Return as soon as possible of no sconscripts is detected in scons command, to avoid importing numscons when not needed

==

numpy/distutils/command/scons.py
==================
230b4b6;David Cournapeau;2008-01-25 06:51:35 +0000;Make distutils command build run scons command

==

numpy/distutils/command/build.py
==================
a1394fa;Travis Oliphant;2008-01-25 04:21:51 +0000;Add Thomas Heller's ctypes_array code to ctypeslib providing the functions as_ctypes and as_array to convert back and forth between numpy arrays and ctypes objects.

==

numpy/ctypeslib.py
==================
52937c9;pierregm;2008-01-24 09:57:22 +0000;

==

numpy/ma/core.py
==================
fdc9364;pierregm;2008-01-24 09:53:36 +0000;core: fixed compress to ensure that a.compress(cond)==a[cond] in most cases

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
90f8ba7;pierregm;2008-01-24 01:43:05 +0000;ma.core : add the compress method/function

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
e71a28f;Stefan van der Walt;2008-01-23 22:13:10 +0000;Add 'compress'.

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
1447cc9;Stefan van der Walt;2008-01-23 12:27:26 +0000;Update documentation format.

==

numpy/ma/core.py
==================
7bce5e9;David Cournapeau;2008-01-23 12:19:44 +0000;Use eval instead of dynamic import in scons_generate_config_py, so that we do not generate spurious *.pyc files.

==

numpy/distutils/misc_util.py
==================
c9c4c25;David Cournapeau;2008-01-23 12:16:45 +0000;Handle NO_SIGNAL for platforms which do not define it

==

numpy/core/SConstruct
numpy/core/include/numpy/numpyconfig.h.in
==================
d40d6ef;Stefan van der Walt;2008-01-23 11:56:59 +0000;Import add_newdocs earlier, so maskedarray can extend the added documentation.

==

numpy/__init__.py
==================
c1efbb1;Travis Oliphant;2008-01-22 19:44:13 +0000;Fix bug in ticket #592 for non-array sequence bin arguments.

==

numpy/lib/function_base.py
==================
797fd12;Stefan van der Walt;2008-01-22 10:26:31 +0000;Merge patch fixing mask dimensions on concatenation.

==

numpy/ma/core.py
numpy/ma/mrecords.py
numpy/ma/tests/test_core.py
==================
d1c740c;Robert Kern;2008-01-22 06:31:01 +0000;Set __docformat__ such that epydoc knows it's looking at reST instead of epytext.

==

numpy/doc/HOWTO_DOCUMENT.txt
numpy/doc/example.py
numpy/doc/html/example-module.html
numpy/doc/html/example-pysrc.html
numpy/doc/html/help.html
numpy/doc/html/identifier-index.html
numpy/doc/html/module-tree.html
==================
7e4b151;Jarrod Millman;2008-01-22 06:14:05 +0000;add more explanation for new standard

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
1cdc236;Jarrod Millman;2008-01-22 05:22:01 +0000;typo

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
70d815d;Jarrod Millman;2008-01-22 05:19:42 +0000;explanation of current situation

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
251b760;David Cournapeau;2008-01-21 17:02:06 +0000;Fixes for config and numpyconfig header generation:  - Replace CheckFunc by CheckDeclaration + CheckFunc for math functions, to    stay compatible with numpy.distutils.

==

numpy/core/SConstruct
==================
606e654;David Cournapeau;2008-01-21 06:07:50 +0000;Remove unneeded comment in numpyconfig.h template

==

numpy/core/include/numpy/numpyconfig.h.in
==================
add1361;David Cournapeau;2008-01-21 06:05:24 +0000;Fixes for config and numpyconfig header generation:  - Replace #ifdef CHAR_BIT by a scons declaration check.

==

numpy/core/SConstruct
numpy/core/include/numpy/numpyconfig.h.in
==================
d3e6c0c;David Cournapeau;2008-01-21 05:52:58 +0000;Fixes for config and numpyconfig header generation:  - Replace #ifdef PY_LONG_LONG logic in numpyconfig.h by a declaration check in    scons, and uses the result directly in the generated header.

==

numpy/core/SConstruct
numpy/core/include/numpy/numpyconfig.h.in
==================
41ca4b1;David Cournapeau;2008-01-21 05:35:20 +0000;Fixes for config and numpyconfig header generation:  - Replace NPY_NOSMP by NPY_NO_SMP in numpyconfig.h, and remove the NPY_NO_SMP    define in config.h, because it is not needed.

==

numpy/core/SConstruct
numpy/core/include/numpy/numpyconfig.h.in
==================
7a18c98;David Cournapeau;2008-01-21 05:29:36 +0000;Fixes for config and numpyconfig header generation:  - signal stuff test result was wrongly put in NPY_NOSMP variable in    numpyconfig.h header: replaced by correct NPY_NO_SIGNAL  - Replace NPY_NO_SIGNAL by a private __NPY_PRIVATE_NO_SIGNAL in config.h, to    avoid clash between config.h and numpyconfig.h

==

numpy/core/SConstruct
numpy/core/include/numpy/numpyconfig.h.in
==================
6068062;Stefan van der Walt;2008-01-20 20:42:07 +0000;Fix concatenator usage (patch by Pierre). Change N to np in regression test.

==

numpy/core/tests/test_regression.py
numpy/ma/extras.py
==================
942aec1;Stefan van der Walt;2008-01-18 23:25:32 +0000;Merge maskedarray branch up to r4729.

==
==================
74d86a8;David Cournapeau;2008-01-18 10:04:48 +0000;Merge changes in cleanconfig_rtm

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/setup.py
numpy/core/src/multiarraymodule.c
==================
9918dd1;David Cournapeau;2008-01-18 06:24:13 +0000;Add simple test script to build/test numpy

==

test.sh
==================
bced46f;David Cournapeau;2008-01-13 07:44:53 +0000;Typo in numpy.core SConstruct

==

numpy/core/SConstruct
==================
39097a8;David Cournapeau;2008-01-13 07:41:46 +0000;Merge revisions 4706:4720 from the trunk

==

numpy/core/numeric.py
==================
db45fc7;Stefan van der Walt;2008-01-10 19:33:10 +0000;Fix concatenation.  Closes ticket #642.

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
2bf5fa1;Stefan van der Walt;2008-01-10 19:09:35 +0000;Fix inplace test.

==

numpy/ma/tests/test_core.py
==================
80f6f50;Stefan van der Walt;2008-01-10 15:52:25 +0000;Apply patch by Pierre.  Move tests from __main__ to the tests directory.
fix_invalid - change the default to copy=True

_MaskedUnaryOperation - make sure the result gets updated from the
input (for subclasses)

_MaskedBinaryOperation - make sure the result gets updated from the
inputs (for subclasses)

_DomainedBinaryOperation - make sure the result gets updated from the
inputs (for subclasses)

MaskedArray.__new__ - added the ndmin keyword
MaskedArray.__getitem__ - works with fields, using the global mask

MaskedArray.__setitem__ - works with fields. The global mask is NOT
updated

MaskedArray.ids - fixed when nomask

MaskedArray.min/.max - force masked to be returned when the whole
array is masked

array - added the ndmin keyword

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
98b5558;Jarrod Millman;2008-01-08 23:59:54 +0000;typo

==

numpy/core/numeric.py
==================
775bac0;David Cournapeau;2008-01-08 15:56:46 +0000;Trivial cleaning of numpy.core SConstruct

==

numpy/core/SConstruct
==================
75ba283;David Cournapeau;2008-01-08 15:48:36 +0000;Fix typo in numpy.core SConstruct

==

numpy/core/SConstruct
==================
73ab47e;David Cournapeau;2008-01-08 14:11:53 +0000;Trivial cleanings in numpy.core SConstruct

==

numpy/core/SConstruct
numpy/core/scons_support.py
==================
dc318e7;David Cournapeau;2008-01-08 14:02:05 +0000;More cleaning of numpy.core SConstruct

==

numpy/core/SConstruct
==================
1e9b52e;David Cournapeau;2008-01-08 13:54:13 +0000;Simplify math funcs check in SConstruct

==

numpy/core/SConstruct
==================
9c8ebbf;David Cournapeau;2008-01-08 13:49:39 +0000;Remove deprecated builder for config.h

==

numpy/core/SConstruct
numpy/core/scons_support.py
==================
e8e3268;David Cournapeau;2008-01-08 13:46:46 +0000;Now we use automatically generated config header instead of old kludge taken from setup.py.

==

numpy/core/SConstruct
numpy/core/scons_support.py
==================
4904ae7;David Cournapeau;2008-01-08 13:31:21 +0000;Add groupe of math functions availability in generated config header

==

numpy/core/SConstruct
==================
7812e46;David Cournapeau;2008-01-08 13:10:52 +0000;More work on automatic generation of config.h (not ready yet)

==

numpy/core/SConstruct
==================
d3e3bbe;David Cournapeau;2008-01-08 12:45:12 +0000;Add PyOS_ascii_strtod test for automatic config header generation

==

numpy/core/SConstruct
==================
415d4e8;David Cournapeau;2008-01-08 12:18:46 +0000;Refactor the check for m library + functions in numpy.core SConstruct

==

numpy/core/SConstruct
numpy/core/scons_support.py
==================
389ccca;David Cournapeau;2008-01-08 05:50:36 +0000;Merged revisions 4677-4704 from http://svn.scipy.org/svn/numpy/trunk

==

numpy/core/src/scalartypes.inc.src
==================
733eeb7;Travis Oliphant;2008-01-07 21:20:06 +0000;Fix scalar __array_interface__ by making sure to retain a reference the 0-d array created in the returned dictionary.

==

numpy/core/src/scalartypes.inc.src
==================
b96a71d;David Cournapeau;2008-01-07 14:59:16 +0000;Change write_info imports, put in top numscons namespace

==

numpy/core/SConstruct
numpy/linalg/SConstruct
==================
f161fe8;David Cournapeau;2008-01-07 02:48:27 +0000;numpy.linalg now builds with scons

==

numpy/linalg/SConstruct
numpy/linalg/setupscons.py
==================
fe79167;David Cournapeau;2008-01-07 02:47:36 +0000;numpy.lib now builds with scons

==

numpy/lib/SConstruct
numpy/lib/setupscons.py
==================
f7f3de7;David Cournapeau;2008-01-07 02:46:49 +0000;numarray now builds with scons

==

numpy/numarray/SConstruct
numpy/numarray/setupscons.py
==================
2bcb222;David Cournapeau;2008-01-07 02:44:56 +0000;Add setupscons.py for pure python packages

==

numpy/distutils/setupscons.py
numpy/f2py/setupscons.py
numpy/oldnumeric/setupscons.py
numpy/testing/setupscons.py
==================
38bd49d;David Cournapeau;2008-01-07 02:43:05 +0000;numpy.random now builds with scons

==

numpy/random/SConstruct
numpy/random/setupscons.py
==================
022f76e;David Cournapeau;2008-01-07 02:42:16 +0000;numpy.fft builds with scons

==

numpy/fft/SConstruct
numpy/fft/setupscons.py
==================
d3a2b34;David Cournapeau;2008-01-07 02:40:39 +0000;Re-enable write_info, since the related bug in numscons has been fixed

==

numpy/core/SConstruct
==================
91cb723;David Cournapeau;2008-01-07 02:39:35 +0000;Fix missing import from numscons

==

numpy/distutils/misc_util.py
==================
3307613;David Cournapeau;2008-01-06 14:18:51 +0000;More work on building numpy.core with scons (still does not work)

==

numpy/core/SConstruct
numpy/core/include/numpy/numpyconfig.h.in
numpy/core/setupscons.py
==================
6e91f21;David Cournapeau;2008-01-06 14:18:02 +0000;Import get_configres* functions from numscons

==

numpy/distutils/misc_util.py
==================
c37beb2;David Cournapeau;2008-01-06 14:14:23 +0000;Add function add_configres for numpy.distutils.Configuration

==

numpy/distutils/misc_util.py
==================
6123f38;David Cournapeau;2008-01-06 14:09:03 +0000;Adding scons scripts + support for numpy.core (do not work yet)

==

numpy/core/SConstruct
numpy/core/scons_support.py
numpy/core/setupscons.py
==================
d57e886;David Cournapeau;2008-01-06 14:08:19 +0000;Make code_generators a package to import its functions

==

numpy/core/code_generators/__init__.py
==================
e68d581;David Cournapeau;2008-01-06 12:19:35 +0000;Modify ufunc api generator to be compatible with scons builder

==

numpy/core/code_generators/generate_ufunc_api.py
==================
f1b0e0c;David Cournapeau;2008-01-06 12:18:13 +0000;Modify array api generator to be compatible with scons builder

==

numpy/core/code_generators/generate_array_api.py
==================
caca466;David Cournapeau;2008-01-06 12:11:48 +0000;Define various scons related functions to call numscons instead of being defined directly in numpy, for bootstrapping issues.

==

numpy/distutils/command/scons.py
==================
e1eac74;David Cournapeau;2008-01-06 10:49:23 +0000;Add root setupscons.py files, to start working on building numpy with numscons.

==

numpy/setupscons.py
setupscons.py
==================
73269fe;David Cournapeau;2008-01-06 10:43:05 +0000;Add scons_make_config function to numpy distutils Configuration.

==

numpy/distutils/misc_util.py
==================
077fb8e;David Cournapeau;2008-01-06 10:42:26 +0000;Use separate numscons package instead of internal local copy

==

numpy/distutils/command/scons.py
==================
470e98b;David Cournapeau;2008-01-06 10:35:44 +0000;Add facilities to generate config file for future sconsified modules.

==

numpy/distutils/misc_util.py
==================
e5c30c1;David Cournapeau;2008-01-06 10:34:40 +0000;add an option to change setup filenames to numpy.distutils.Configuration

==

numpy/distutils/misc_util.py
==================
8a93d38;David Cournapeau;2008-01-06 10:33:00 +0000;Add the infrastructure to add SConstruct files in numpy.distutils.Configuration.

==

numpy/distutils/misc_util.py
==================
f9dbe28;David Cournapeau;2008-01-06 10:32:14 +0000;Add scons command to numpy distutils.

==

numpy/distutils/command/scons.py
numpy/distutils/core.py
==================
dfc2efb;David Cournapeau;2008-01-06 10:31:05 +0000;Use a custom NumpyDistribution instead of distutils Distribution, to handle scons scripts.

==

numpy/distutils/core.py
numpy/distutils/numpy_distribution.py
==================
9cb2d68;David Cournapeau;2008-01-06 10:09:33 +0000;Merged revisions 4612-4617,4628-4631,4638 via svnmerge from http://svn.scipy.org/svn/numpy/branches/cleanconfig_rtm
................
  r4612 | cdavid | 2007-12-18 17:58:13 +0900 (Tue, 18 Dec 2007) | 3 lines
  
  Initialized merge tracking via "svnmerge" with revisions "1-4611" from 
  http://svn.scipy.org/svn/numpy/trunk
................
  r4613 | cdavid | 2007-12-18 18:26:38 +0900 (Tue, 18 Dec 2007) | 1 line
  
  Clean ndarrayobject.h headers: do not use SIZEOF_*, but NPY_SIZEOF...
................
  r4614 | cdavid | 2007-12-18 18:33:11 +0900 (Tue, 18 Dec 2007) | 1 line
  
  Refactor the NPY_ALLOW_THREAD logic outside config.h generation, and put it inside numpy headers
................
  r4615 | cdavid | 2007-12-18 18:46:34 +0900 (Tue, 18 Dec 2007) | 1 line
  
  separate config.h (private header) and numpyconfig.h (public header)
................
  r4616 | cdavid | 2007-12-18 18:57:21 +0900 (Tue, 18 Dec 2007) | 2 lines
  
  Add CHAR_BITS as a public symbol in numpyconfig header
................
  r4617 | cdavid | 2007-12-18 19:05:38 +0900 (Tue, 18 Dec 2007) | 1 line
  
  Fix escaping problem when generating numpyconfig.h on win32
................
  r4628 | cdavid | 2007-12-22 12:20:08 +0900 (Sat, 22 Dec 2007) | 1 line
  
  Add code to test for a declaration in header
................
  r4629 | cdavid | 2007-12-22 14:52:38 +0900 (Sat, 22 Dec 2007) | 1 line
  
  Add a check_decl function to check for declaration
................
  r4630 | cdavid | 2007-12-22 15:28:11 +0900 (Sat, 22 Dec 2007) | 1 line
  
  Remove distutils test for C declaration from numpy.core, since it is put in distutils now
................
  r4631 | cdavid | 2007-12-22 15:58:15 +0900 (Sat, 22 Dec 2007) | 18 lines
  
  Merged revisions 4612-4630 via svnmerge from 
  http://svn.scipy.org/svn/numpy/trunk
  
  ........
    r4620 | cdavid | 2007-12-18 19:41:22 +0900 (Tue, 18 Dec 2007) | 3 lines
    
    Initialized merge tracking via "svnmerge" with revisions "1-4619" from 
    http://svn.scipy.org/svn/numpy/branches/distutils_scons_command
  ........
    r4624 | rc | 2007-12-20 19:30:45 +0900 (Thu, 20 Dec 2007) | 2 lines
    
    fixed setmember1d for string arrays
  ........
    r4626 | stefan | 2007-12-21 18:00:24 +0900 (Fri, 21 Dec 2007) | 2 lines
    
    Add test for setdiff1d on character arrays.
  ........
................
  r4638 | cdavid | 2007-12-22 18:21:25 +0900 (Sat, 22 Dec 2007) | 1 line
  
  Get MATHLIB from numpyconfig.h, not from config.h anymore
................

==
==================
055499c;cookedm;2008-01-05 18:44:28 +0000;Fix regression in r4659; matlib.py should use from numpy import *

==

numpy/matlib.py
==================
721e160;Travis Oliphant;2008-01-02 17:04:15 +0000;Removed dependency on nose.tools.  Ripped nose.tools.raise and placed it in numpy.testing

==

numpy/lib/tests/test_format.py
numpy/testing/utils.py
==================
1b62935;Stefan van der Walt;2007-12-30 17:57:53 +0000;Fix test_file under Windows.

==

numpy/core/tests/test_multiarray.py
==================
676d5b5;Stefan van der Walt;2007-12-30 17:32:49 +0000;Workaround for TemporaryFile problem under Windows.

==

numpy/core/tests/test_multiarray.py
==================
bcd6797;Stefan van der Walt;2007-12-30 11:13:45 +0000;Add description of get/seterrobj.

==

numpy/add_newdocs.py
==================
79d187a;Travis Oliphant;2007-12-30 11:10:41 +0000;Fix deprecate_with_doc and deprecate for builtin functions.

==

numpy/lib/io.py
numpy/lib/utils.py
==================
5896cb8;Travis Oliphant;2007-12-30 09:59:39 +0000;Add a Raises section to the docstring suggestions.

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
fdeac74;Travis Oliphant;2007-12-30 09:32:31 +0000;Merge the lib_for_io branch back into the trunk.

==
==================
50b26d2;Travis Oliphant;2007-12-30 03:36:50 +0000;Merge changes to the trunk to this branch.

==

arraysetops.py
getlimits.py
index_tricks.py
scimath.py
tests/test_arraysetops.py
tests/test_getlimits.py
tests/test_polynomial.py
==================
89d0310;Travis Oliphant;2007-12-30 03:19:20 +0000;Fix-up the .npz implementation.

==

io.py
==================
083ca64;Fernando Perez;2007-12-30 03:04:17 +0000;Modify the setup routine to indicate that it is being run via a system global.  This allows the main __init__ to detect the setup and avoid attempting to load things that aren't built yet.
This is hackish, but the previously used method would fail if there was an
existing system-wide numpy already installed, for example (which users might
have no control over).  There were frequent reports of problems with the
previous method:

- http://projects.scipy.org/pipermail/scipy-user/2007-November/014511.html
- Tickets #561 and #565


==

numpy/__init__.py
setup.py
==================
b4a25a4;Fernando Perez;2007-12-30 02:59:35 +0000;Add docstrings with examples for all functions, according to current standard.
If you have nose installed, the examples can be used as doctests with:

nosetests --with-doctest numpy.lib.scimath



==

numpy/lib/scimath.py
==================
2fec52f;Stefan van der Walt;2007-12-29 23:28:11 +0000;Change remaining N's to np.

==

numpy/core/tests/test_multiarray.py
numpy/core/tests/test_regression.py
==================
19a2902;Travis Oliphant;2007-12-29 20:09:51 +0000;Added .npz file loading and saveing.

==

io.py
==================
72297ed;Jarrod Millman;2007-12-29 02:21:56 +0000;more janitorial work

==

numpy/core/tests/test_scalarmath.py
numpy/core/tests/test_ufunc.py
numpy/doc/swig/test/testFarray.py
numpy/doc/swig/test/testMatrix.py
numpy/doc/swig/test/testTensor.py
numpy/doc/swig/test/testVector.py
numpy/lib/getlimits.py
numpy/lib/tests/test_getlimits.py
numpy/lib/tests/test_polynomial.py
numpy/matlib.py
numpy/oldnumeric/functions.py
numpy/oldnumeric/typeconv.py
numpy/random/tests/test_random.py
numpy/tests/test_ctypeslib.py
==================
423b195;Jarrod Millman;2007-12-29 01:48:15 +0000;braino

==

numpy/f2py/f90mod_rules.py
==================
a7b5072;Jarrod Millman;2007-12-29 01:41:30 +0000;typo

==

numpy/numarray/functions.py
==================
3b7ce3a;Jarrod Millman;2007-12-29 01:36:43 +0000;more docstring improvements from Pauli Virtanen

==

numpy/linalg/linalg.py
==================
b35941f;Jarrod Millman;2007-12-29 01:35:09 +0000;typo

==

numpy/numarray/functions.py
==================
e7191fc;Jarrod Millman;2007-12-29 01:32:27 +0000;janitorial work

==

numpy/core/tests/test_multiarray.py
numpy/core/tests/test_regression.py
numpy/doc/swig/test/testArray.py
numpy/f2py/f90mod_rules.py
numpy/fft/tests/test_fftpack.py
numpy/numarray/functions.py
==================
e31192f;Jarrod Millman;2007-12-29 00:30:47 +0000;docstring improvements from Pauli Virtanen

==

numpy/linalg/info.py
numpy/linalg/linalg.py
==================
4d2dd4b;Travis Oliphant;2007-12-28 23:56:04 +0000;Add disambiguation code to load

==

io.py
==================
15437fc;Travis Oliphant;2007-12-28 22:14:14 +0000;Improve docstrings

==

numpy/__init__.py
numpy/_import_tools.py
numpy/add_newdocs.py
numpy/core/defmatrix.py
numpy/core/numeric.py
numpy/core/records.py
==================
49c8cd2;Travis Oliphant;2007-12-28 22:13:43 +0000;Improve some docstrings

==

io.py
src/_compiled_base.c
==================
efbe398;Travis Oliphant;2007-12-28 07:29:22 +0000;Improve the documentation style for human-readability in plain-text

==

numpy/doc/HOWTO_DOCUMENT.txt
numpy/doc/example.py
numpy/doc/html/epydoc.css
numpy/doc/html/epydoc.js
numpy/doc/html/example-module.html
numpy/doc/html/example-pysrc.html
numpy/doc/html/help.html
numpy/doc/html/identifier-index.html
numpy/doc/html/module-tree.html
numpy/doc/html/toc-everything.html
numpy/doc/html/toc-example-module.html
numpy/doc/html/toc.html
==================
f499d58;Jarrod Millman;2007-12-28 05:52:59 +0000;typo

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
cd5a68a;Travis Oliphant;2007-12-27 03:20:04 +0000;Improve packbits and unpackbits so that striding works correctly.

==

src/_compiled_base.c
==================
3fa9b3e;Travis Oliphant;2007-12-27 03:20:04 +0000;Improve packbits and unpackbits so that striding works correctly.

==

numpy/core/src/multiarraymodule.c
==================
72ef1ec;Travis Oliphant;2007-12-26 23:04:04 +0000;Fix packbits and unpackbits for new io in numpy.

==

io.py
src/_compiled_base.c
==================
80db3b3;Travis Oliphant;2007-12-26 23:04:04 +0000;Fix packbits and unpackbits for new io in numpy.

==

numpy/core/code_generators/multiarray_api_order.txt
numpy/core/src/arrayobject.c
numpy/doc/HOWTO_DOCUMENT.txt
==================
87f61ab;cookedm;2007-12-26 07:08:16 +0000;Replace numpy.distutils.exec_command.splitcmdline with shlex.split instead. It has the same problems as our old numpy.distutils.ccompiler.split_quoted. splitcmdline still exists, but uses shlex.split, and issues a DeprecationWarning
This has the positive side effect of not having numpy.distutils pulled in
when numpy is imported -- there was a use of splitcmdline in numpy.testing.

==

numpy/distutils/command/build_src.py
numpy/distutils/exec_command.py
numpy/distutils/interactive.py
numpy/doc/DISTUTILS.txt
numpy/testing/numpytest.py
==================
2a726d2;cookedm;2007-12-26 07:04:24 +0000;Convert some internal classes in index_tricks.py to CamelCase

==

numpy/lib/index_tricks.py
==================
cba82ad;cookedm;2007-12-26 07:03:34 +0000;Add an 'if 0''d block of code to numpy.distutils.log to ignore some log messages. Especially useful to turn on if you're developing by using eggs.

==

numpy/distutils/log.py
==================
cf2217e;cookedm;2007-12-24 16:44:31 +0000;testing/numpytest.py: only handle IgnoreException when we have a test result that we can actually work with (for instance, not nose's ResultProxy objects)

==

numpy/testing/numpytest.py
==================
b785d55;cookedm;2007-12-24 16:38:23 +0000;Don't add test to numpy.__all__: it's not something that needs to be exported

==

numpy/__init__.py
==================
9964880;David Cournapeau;2007-12-22 09:21:25 +0000;Get MATHLIB from numpyconfig.h, not from config.h anymore

==

numpy/distutils/misc_util.py
==================
b1729a1;David Cournapeau;2007-12-22 06:58:15 +0000;Merged revisions 4612-4630 via svnmerge from http://svn.scipy.org/svn/numpy/trunk
........
  r4620 | cdavid | 2007-12-18 19:41:22 +0900 (Tue, 18 Dec 2007) | 3 lines
  
  Initialized merge tracking via "svnmerge" with revisions "1-4619" from 
  http://svn.scipy.org/svn/numpy/branches/distutils_scons_command
........
  r4624 | rc | 2007-12-20 19:30:45 +0900 (Thu, 20 Dec 2007) | 2 lines
  
  fixed setmember1d for string arrays
........
  r4626 | stefan | 2007-12-21 18:00:24 +0900 (Fri, 21 Dec 2007) | 2 lines
  
  Add test for setdiff1d on character arrays.
........

==
==================
5df69a9;David Cournapeau;2007-12-22 06:28:11 +0000;Remove distutils test for C declaration from numpy.core, since it is put in distutils now

==

numpy/core/setup.py
==================
622b142;David Cournapeau;2007-12-22 05:52:38 +0000;Add a check_decl function to check for declaration

==

numpy/distutils/command/config.py
==================
2d914ba;David Cournapeau;2007-12-22 03:20:08 +0000;Add code to test for a declaration in header

==

numpy/core/setup.py
==================
da78ac7;Stefan van der Walt;2007-12-21 09:33:46 +0000;Document API changes.

==

numpy/ma/API_CHANGES.txt
==================
c7b8c28;Stefan van der Walt;2007-12-21 09:00:24 +0000;Add test for setdiff1d on character arrays.

==

numpy/lib/tests/test_arraysetops.py
==================
11c95e3;Stefan van der Walt;2007-12-21 08:33:02 +0000;Fix unit tests.  Prevent nomask from being copied.

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
numpy/ma/tests/test_old_ma.py
==================
6509e21;Robert Cimrman;2007-12-20 10:30:45 +0000;fixed setmember1d for string arrays

==

numpy/lib/arraysetops.py
==================
0c72812;Robert Kern;2007-12-20 07:38:28 +0000;* Warn potential users about format instability. * Implement mmap capability.

==

format.py
tests/test_format.py
==================
c9fe4c3;Stefan van der Walt;2007-12-20 07:36:21 +0000;Apply Pierre's patch.

==

numpy/ma/core.py
numpy/ma/tests/test_core.py
==================
b8964ed;David Cournapeau;2007-12-18 10:05:38 +0000;Fix escaping problem when generating numpyconfig.h on win32

==

numpy/core/setup.py
==================
359978d;David Cournapeau;2007-12-18 09:57:21 +0000;Add CHAR_BITS as a public symbol in numpyconfig header

==

numpy/core/setup.py
==================
4035e42;David Cournapeau;2007-12-18 09:46:34 +0000;separate config.h (private header) and numpyconfig.h (public header)

==

numpy/core/setup.py
numpy/core/src/arraytypes.inc.src
numpy/core/src/umathmodule.c.src
==================
23fcc89;David Cournapeau;2007-12-18 09:33:11 +0000;Refactor the NPY_ALLOW_THREAD logic outside config.h generation, and put it inside numpy headers

==

numpy/core/setup.py
==================
37fdc20;David Cournapeau;2007-12-18 09:26:38 +0000;Clean ndarrayobject.h headers: do not use SIZEOF_*, but NPY_SIZEOF...

==

numpy/core/include/numpy/ndarrayobject.h
==================
7ce5348;chris.burns;2007-12-17 22:15:47 +0000;Add PYSETERROR from scipy.io.numpyiomodule.c to resolve undefined symbol.

==

src/_compiled_base.c
==================
3d01d9f;Travis Oliphant;2007-12-17 08:32:20 +0000;Fixes to packbits.  Not done yet.

==

src/_compiled_base.c
==================
6ede27f;Stefan van der Walt;2007-12-17 08:25:57 +0000;Add regression test for binary_repr.

==

numpy/core/tests/test_regression.py
==================
84566c5;Stefan van der Walt;2007-12-16 11:11:45 +0000;API has changed for put and putmask; remove two outdated tests.

==

numpy/ma/core.py
numpy/ma/tests/test_old_ma.py
==================
9f25dd8;Robert Kern;2007-12-16 07:52:44 +0000;Code establishing a simple format for .npy files.

==

format.py
tests/test_format.py
utils.py
==================
b7808b3;Jarrod Millman;2007-12-16 07:41:41 +0000;formatting

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
a03a45c;Travis Oliphant;2007-12-16 06:55:19 +0000;Remove tests that are not set-up to deal with float32 repr.

==

numpy/core/tests/test_scalarmath.py
==================
2c37d25;Travis Oliphant;2007-12-16 06:47:50 +0000;Add comment to add Fortran ordering argument to ToFile.  Fix repr for floating point scalars.

==

numpy/core/src/arrayobject.c
numpy/core/src/scalartypes.inc.src
numpy/core/tests/test_scalarmath.py
==================
cf73c9d;Robert Kern;2007-12-16 06:06:55 +0000;* Remove unimplemented functions from __all__. * Remove warning about moving DataSource since that's what we're doing here.

==

_datasource.py
io.py
==================
4bd4ec9;Robert Kern;2007-12-16 05:43:03 +0000;Clean up imports.

==

io.py
==================
25c161b;Travis Oliphant;2007-12-16 05:30:41 +0000;Changes to io layer of NumPy

==

io.py
src/_compiled_base.c
utils.py
==================
0ed3e12;Robert Kern;2007-12-16 05:23:30 +0000;Also link with Python.

==

numpy/distutils/fcompiler/intel.py
==================
bd16a4f;Robert Kern;2007-12-16 05:23:02 +0000;Interfaces have attributes.

==

numpy/f2py/lib/parser/block_statements.py
==================
e5789a3;Robert Kern;2007-12-16 05:21:28 +0000;Make array_getcharbuf be the same as array_getreadbuf.

==

numpy/core/src/arrayobject.c
==================
22fbdc5;chris.burns;2007-12-15 23:27:14 +0000;Added docstrings to deprecate funcs

==

utils.py
==================
5455500;Jarrod Millman;2007-12-15 22:29:10 +0000;added new import standards to how to doc

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
94e351c;Travis Oliphant;2007-12-15 22:27:46 +0000;Add deprecate with doc.

==

utils.py
==================
1c913bc;Jarrod Millman;2007-12-15 20:35:18 +0000;updating to us import numpy as np convention

==

benchmarks/benchmark.py
benchmarks/creating.py
benchmarks/simpleindex.py
benchmarks/sorting.py
==================
b539432;Travis Oliphant;2007-12-15 19:53:29 +0000;Flesh out some infrastructure for what is going to be there in io.py

==

io.py
==================
0ce4792;Travis Oliphant;2007-12-15 18:56:40 +0000;Start changes for numpy.lib to support deprecations in scipy.io

==

__init__.py
_datasource.py
io.py
utils.py
==================
e76b5fa;Travis Oliphant;2007-12-15 18:54:52 +0000;Create a branch for io work in NumPy

==

COMPATIBILITY
DEV_README.txt
LICENSE.txt
MANIFEST.in
README.txt
TEST_COMMIT
THANKS.txt
__init__.py
arraysetops.py
benchmarks/benchmark.py
benchmarks/casting.py
benchmarks/creating.py
benchmarks/simpleindex.py
benchmarks/sorting.py
convdtype.py
function_base.py
getlimits.py
index_tricks.py
info.py
machar.py
numpy/__init__.py
numpy/_import_tools.py
numpy/add_newdocs.py
numpy/core/__init__.py
numpy/core/_internal.py
numpy/core/arrayprint.py
numpy/core/blasdot/_dotblas.c
numpy/core/blasdot/cblas.h
numpy/core/code_generators/array_api_order.txt
numpy/core/code_generators/genapi.py
numpy/core/code_generators/generate_array_api.py
numpy/core/code_generators/generate_ufunc_api.py
numpy/core/code_generators/generate_umath.py
numpy/core/code_generators/multiarray_api_order.txt
numpy/core/code_generators/ufunc_api_order.txt
numpy/core/defchararray.py
numpy/core/defmatrix.py
numpy/core/fromnumeric.py
numpy/core/include/numpy/arrayobject.h
numpy/core/include/numpy/arrayscalars.h
numpy/core/include/numpy/fenv/fenv.c
numpy/core/include/numpy/fenv/fenv.h
numpy/core/include/numpy/ndarrayobject.h
numpy/core/include/numpy/noprefix.h
numpy/core/include/numpy/npy_interrupt.h
numpy/core/include/numpy/old_defines.h
numpy/core/include/numpy/oldnumeric.h
numpy/core/include/numpy/ufuncobject.h
numpy/core/info.py
numpy/core/ma.py
numpy/core/memmap.py
numpy/core/numeric.py
numpy/core/numerictypes.py
numpy/core/records.py
numpy/core/setup.py
numpy/core/src/_isnan.c
numpy/core/src/_signbit.c
numpy/core/src/_sortmodule.c.src
numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
numpy/core/src/scalarmathmodule.c.src
numpy/core/src/scalartypes.inc.src
numpy/core/src/ucsnarrow.c
numpy/core/src/ufuncobject.c
numpy/core/src/umathmodule.c.src
numpy/core/tests/test_defmatrix.py
numpy/core/tests/test_errstate.py
numpy/core/tests/test_ma.py
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_numeric.py
numpy/core/tests/test_numerictypes.py
numpy/core/tests/test_records.py
numpy/core/tests/test_regression.py
numpy/core/tests/test_scalarmath.py
numpy/core/tests/test_ufunc.py
numpy/core/tests/test_umath.py
numpy/core/tests/test_unicode.py
numpy/core/tests/testdata.fits
numpy/ctypeslib.py
numpy/distutils/__init__.py
numpy/distutils/__version__.py
numpy/distutils/ccompiler.py
numpy/distutils/command/__init__.py
numpy/distutils/command/bdist_rpm.py
numpy/distutils/command/build.py
numpy/distutils/command/build_clib.py
numpy/distutils/command/build_ext.py
numpy/distutils/command/build_py.py
numpy/distutils/command/build_scripts.py
numpy/distutils/command/build_src.py
numpy/distutils/command/config.py
numpy/distutils/command/config_compiler.py
numpy/distutils/command/develop.py
numpy/distutils/command/egg_info.py
numpy/distutils/command/install.py
numpy/distutils/command/install_data.py
numpy/distutils/command/install_headers.py
numpy/distutils/command/sdist.py
numpy/distutils/conv_template.py
numpy/distutils/core.py
numpy/distutils/cpuinfo.py
numpy/distutils/environment.py
numpy/distutils/exec_command.py
numpy/distutils/extension.py
numpy/distutils/fcompiler/__init__.py
numpy/distutils/fcompiler/absoft.py
numpy/distutils/fcompiler/compaq.py
numpy/distutils/fcompiler/g95.py
numpy/distutils/fcompiler/gnu.py
numpy/distutils/fcompiler/hpux.py
numpy/distutils/fcompiler/ibm.py
numpy/distutils/fcompiler/intel.py
numpy/distutils/fcompiler/lahey.py
numpy/distutils/fcompiler/mips.py
numpy/distutils/fcompiler/nag.py
numpy/distutils/fcompiler/none.py
numpy/distutils/fcompiler/pg.py
numpy/distutils/fcompiler/sun.py
numpy/distutils/fcompiler/vast.py
numpy/distutils/from_template.py
numpy/distutils/info.py
numpy/distutils/intelccompiler.py
numpy/distutils/interactive.py
numpy/distutils/lib2def.py
numpy/distutils/line_endings.py
numpy/distutils/log.py
numpy/distutils/mingw32ccompiler.py
numpy/distutils/misc_util.py
numpy/distutils/setup.py
numpy/distutils/system_info.py
numpy/distutils/tests/f2py_ext/__init__.py
numpy/distutils/tests/f2py_ext/setup.py
numpy/distutils/tests/f2py_ext/src/fib1.f
numpy/distutils/tests/f2py_ext/src/fib2.pyf
numpy/distutils/tests/f2py_ext/tests/test_fib2.py
numpy/distutils/tests/f2py_f90_ext/__init__.py
numpy/distutils/tests/f2py_f90_ext/include/body.f90
numpy/distutils/tests/f2py_f90_ext/setup.py
numpy/distutils/tests/f2py_f90_ext/src/foo_free.f90
numpy/distutils/tests/f2py_f90_ext/tests/test_foo.py
numpy/distutils/tests/gen_ext/__init__.py
numpy/distutils/tests/gen_ext/setup.py
numpy/distutils/tests/gen_ext/tests/test_fib3.py
numpy/distutils/tests/pyrex_ext/__init__.py
numpy/distutils/tests/pyrex_ext/primes.pyx
numpy/distutils/tests/pyrex_ext/setup.py
numpy/distutils/tests/pyrex_ext/tests/test_primes.py
numpy/distutils/tests/setup.py
numpy/distutils/tests/swig_ext/__init__.py
numpy/distutils/tests/swig_ext/setup.py
numpy/distutils/tests/swig_ext/src/example.c
numpy/distutils/tests/swig_ext/src/example.i
numpy/distutils/tests/swig_ext/src/zoo.cc
numpy/distutils/tests/swig_ext/src/zoo.h
numpy/distutils/tests/swig_ext/src/zoo.i
numpy/distutils/tests/swig_ext/tests/test_example.py
numpy/distutils/tests/swig_ext/tests/test_example2.py
numpy/distutils/tests/test_fcompiler_gnu.py
numpy/distutils/tests/test_misc_util.py
numpy/distutils/unixccompiler.py
numpy/doc/CAPI.txt
numpy/doc/DISTUTILS.txt
numpy/doc/HOWTO_DOCUMENT.txt
numpy/doc/README.txt
numpy/doc/example.py
numpy/doc/html/api-objects.txt
numpy/doc/html/crarr.png
numpy/doc/html/epydoc.css
numpy/doc/html/epydoc.js
numpy/doc/html/example-module.html
numpy/doc/html/example-pysrc.html
numpy/doc/html/frames.html
numpy/doc/html/help.html
numpy/doc/html/identifier-index.html
numpy/doc/html/index.html
numpy/doc/html/module-tree.html
numpy/doc/html/redirect.html
numpy/doc/html/toc-everything.html
numpy/doc/html/toc-example-module.html
numpy/doc/html/toc.html
numpy/doc/pep_buffer.txt
numpy/doc/pyrex/MANIFEST
numpy/doc/pyrex/Makefile
numpy/doc/pyrex/c_numpy.pxd
numpy/doc/pyrex/c_python.pxd
numpy/doc/pyrex/notes
numpy/doc/pyrex/numpyx.c
numpy/doc/pyrex/numpyx.pyx
numpy/doc/pyrex/run_test.py
numpy/doc/pyrex/setup.py
numpy/doc/records.txt
numpy/doc/swig/Makefile
numpy/doc/swig/README
numpy/doc/swig/doc/Makefile
numpy/doc/swig/doc/numpy_swig.html
numpy/doc/swig/doc/numpy_swig.pdf
numpy/doc/swig/doc/numpy_swig.txt
numpy/doc/swig/doc/testing.html
numpy/doc/swig/doc/testing.pdf
numpy/doc/swig/doc/testing.txt
numpy/doc/swig/numpy.i
numpy/doc/swig/pyfragments.swg
numpy/doc/swig/test/Array.i
numpy/doc/swig/test/Array1.cxx
numpy/doc/swig/test/Array1.h
numpy/doc/swig/test/Array2.cxx
numpy/doc/swig/test/Array2.h
numpy/doc/swig/test/Farray.cxx
numpy/doc/swig/test/Farray.h
numpy/doc/swig/test/Farray.i
numpy/doc/swig/test/Makefile
numpy/doc/swig/test/Matrix.cxx
numpy/doc/swig/test/Matrix.h
numpy/doc/swig/test/Matrix.i
numpy/doc/swig/test/Tensor.cxx
numpy/doc/swig/test/Tensor.h
numpy/doc/swig/test/Tensor.i
numpy/doc/swig/test/Vector.cxx
numpy/doc/swig/test/Vector.h
numpy/doc/swig/test/Vector.i
numpy/doc/swig/test/setup.py
numpy/doc/swig/test/testArray.py
numpy/doc/swig/test/testFarray.py
numpy/doc/swig/test/testMatrix.py
numpy/doc/swig/test/testTensor.py
numpy/doc/swig/test/testVector.py
numpy/doc/ufuncs.txt
numpy/dual.py
numpy/f2py/BUGS.txt
numpy/f2py/Makefile
numpy/f2py/NEWS.txt
numpy/f2py/README.txt
numpy/f2py/TODO.txt
numpy/f2py/__init__.py
numpy/f2py/__version__.py
numpy/f2py/auxfuncs.py
numpy/f2py/capi_maps.py
numpy/f2py/cb_rules.py
numpy/f2py/cfuncs.py
numpy/f2py/common_rules.py
numpy/f2py/crackfortran.py
numpy/f2py/diagnose.py
numpy/f2py/doc/Makefile
numpy/f2py/doc/Release-1.x.txt
numpy/f2py/doc/Release-2.x.txt
numpy/f2py/doc/Release-3.x.txt
numpy/f2py/doc/Release-4.x.txt
numpy/f2py/doc/apps.tex
numpy/f2py/doc/bugs.tex
numpy/f2py/doc/collectinput.py
numpy/f2py/doc/commands.tex
numpy/f2py/doc/ex1/arr.f
numpy/f2py/doc/ex1/bar.f
numpy/f2py/doc/ex1/foo.f
numpy/f2py/doc/ex1/foobar-smart.f90
numpy/f2py/doc/ex1/foobar.f90
numpy/f2py/doc/ex1/foobarmodule.tex
numpy/f2py/doc/ex1/runme
numpy/f2py/doc/f2py2e.tex
numpy/f2py/doc/f2python9-final/README.txt
numpy/f2py/doc/f2python9-final/aerostructure.jpg
numpy/f2py/doc/f2python9-final/flow.jpg
numpy/f2py/doc/f2python9-final/mk_html.sh
numpy/f2py/doc/f2python9-final/mk_pdf.sh
numpy/f2py/doc/f2python9-final/mk_ps.sh
numpy/f2py/doc/f2python9-final/src/examples/exp1.f
numpy/f2py/doc/f2python9-final/src/examples/exp1mess.txt
numpy/f2py/doc/f2python9-final/src/examples/exp1session.txt
numpy/f2py/doc/f2python9-final/src/examples/foo.pyf
numpy/f2py/doc/f2python9-final/src/examples/foom.pyf
numpy/f2py/doc/f2python9-final/structure.jpg
numpy/f2py/doc/fortranobject.tex
numpy/f2py/doc/index.html
numpy/f2py/doc/intro.tex
numpy/f2py/doc/multiarray/array_from_pyobj.c
numpy/f2py/doc/multiarray/bar.c
numpy/f2py/doc/multiarray/foo.f
numpy/f2py/doc/multiarray/fortran_array_from_pyobj.txt
numpy/f2py/doc/multiarray/fun.pyf
numpy/f2py/doc/multiarray/run.pyf
numpy/f2py/doc/multiarray/transpose.txt
numpy/f2py/doc/multiarrays.txt
numpy/f2py/doc/notes.tex
numpy/f2py/doc/oldnews.html
numpy/f2py/doc/options.tex
numpy/f2py/doc/python9.tex
numpy/f2py/doc/signaturefile.tex
numpy/f2py/doc/using_F_compiler.txt
numpy/f2py/doc/win32_notes.txt
numpy/f2py/docs/FAQ.txt
numpy/f2py/docs/HISTORY.txt
numpy/f2py/docs/OLDNEWS.txt
numpy/f2py/docs/README.txt
numpy/f2py/docs/TESTING.txt
numpy/f2py/docs/THANKS.txt
numpy/f2py/docs/default.css
numpy/f2py/docs/docutils.conf
numpy/f2py/docs/hello.f
numpy/f2py/docs/pyforttest.pyf
numpy/f2py/docs/pytest.py
numpy/f2py/docs/simple.f
numpy/f2py/docs/simple_session.dat
numpy/f2py/docs/usersguide/allocarr.f90
numpy/f2py/docs/usersguide/allocarr_session.dat
numpy/f2py/docs/usersguide/array.f
numpy/f2py/docs/usersguide/array_session.dat
numpy/f2py/docs/usersguide/calculate.f
numpy/f2py/docs/usersguide/calculate_session.dat
numpy/f2py/docs/usersguide/callback.f
numpy/f2py/docs/usersguide/callback2.pyf
numpy/f2py/docs/usersguide/callback_session.dat
numpy/f2py/docs/usersguide/common.f
numpy/f2py/docs/usersguide/common_session.dat
numpy/f2py/docs/usersguide/compile_session.dat
numpy/f2py/docs/usersguide/default.css
numpy/f2py/docs/usersguide/docutils.conf
numpy/f2py/docs/usersguide/extcallback.f
numpy/f2py/docs/usersguide/extcallback_session.dat
numpy/f2py/docs/usersguide/fib1.f
numpy/f2py/docs/usersguide/fib1.pyf
numpy/f2py/docs/usersguide/fib2.pyf
numpy/f2py/docs/usersguide/fib3.f
numpy/f2py/docs/usersguide/ftype.f
numpy/f2py/docs/usersguide/ftype_session.dat
numpy/f2py/docs/usersguide/index.txt
numpy/f2py/docs/usersguide/moddata.f90
numpy/f2py/docs/usersguide/moddata_session.dat
numpy/f2py/docs/usersguide/run_main_session.dat
numpy/f2py/docs/usersguide/scalar.f
numpy/f2py/docs/usersguide/scalar_session.dat
numpy/f2py/docs/usersguide/setup_example.py
numpy/f2py/docs/usersguide/spam.pyf
numpy/f2py/docs/usersguide/spam_session.dat
numpy/f2py/docs/usersguide/string.f
numpy/f2py/docs/usersguide/string_session.dat
numpy/f2py/docs/usersguide/var.pyf
numpy/f2py/docs/usersguide/var_session.dat
numpy/f2py/f2py.1
numpy/f2py/f2py2e.py
numpy/f2py/f2py_testing.py
numpy/f2py/f90mod_rules.py
numpy/f2py/func2subr.py
numpy/f2py/info.py
numpy/f2py/lib/__init__.py
numpy/f2py/lib/api.py
numpy/f2py/lib/doc.txt
numpy/f2py/lib/extgen/__init__.py
numpy/f2py/lib/extgen/base.py
numpy/f2py/lib/extgen/c_support.py
numpy/f2py/lib/extgen/doc.txt
numpy/f2py/lib/extgen/py_support.py
numpy/f2py/lib/extgen/setup_py.py
numpy/f2py/lib/extgen/utils.py
numpy/f2py/lib/main.py
numpy/f2py/lib/nary.py
numpy/f2py/lib/parser/Fortran2003.py
numpy/f2py/lib/parser/__init__.py
numpy/f2py/lib/parser/api.py
numpy/f2py/lib/parser/base_classes.py
numpy/f2py/lib/parser/block_statements.py
numpy/f2py/lib/parser/doc.txt
numpy/f2py/lib/parser/parsefortran.py
numpy/f2py/lib/parser/pattern_tools.py
numpy/f2py/lib/parser/readfortran.py
numpy/f2py/lib/parser/sourceinfo.py
numpy/f2py/lib/parser/splitline.py
numpy/f2py/lib/parser/statements.py
numpy/f2py/lib/parser/test_Fortran2003.py
numpy/f2py/lib/parser/test_parser.py
numpy/f2py/lib/parser/typedecl_statements.py
numpy/f2py/lib/parser/utils.py
numpy/f2py/lib/py_wrap.py
numpy/f2py/lib/py_wrap_subprogram.py
numpy/f2py/lib/py_wrap_type.py
numpy/f2py/lib/setup.py
numpy/f2py/lib/src/F_FUNC.cpp
numpy/f2py/lib/src/pyobj_to_string_len.c
numpy/f2py/lib/tests/test_derived_scalar.py
numpy/f2py/lib/tests/test_module_module.py
numpy/f2py/lib/tests/test_module_scalar.py
numpy/f2py/lib/tests/test_scalar_function_in.py
numpy/f2py/lib/tests/test_scalar_in_out.py
numpy/f2py/lib/wrapper_base.py
numpy/f2py/rules.py
numpy/f2py/setup.cfg
numpy/f2py/setup.py
numpy/f2py/src/fortranobject.c
numpy/f2py/src/fortranobject.h
numpy/f2py/src/test/Makefile
numpy/f2py/src/test/bar.f
numpy/f2py/src/test/foo.f
numpy/f2py/src/test/foo90.f90
numpy/f2py/src/test/foomodule.c
numpy/f2py/src/test/wrap.f
numpy/f2py/tests/array_from_pyobj/__init__.py
numpy/f2py/tests/array_from_pyobj/setup.py
numpy/f2py/tests/array_from_pyobj/tests/test_array_from_pyobj.py
numpy/f2py/tests/array_from_pyobj/wrapmodule.c
numpy/f2py/tests/c/return_real.py
numpy/f2py/tests/f77/callback.py
numpy/f2py/tests/f77/return_character.py
numpy/f2py/tests/f77/return_complex.py
numpy/f2py/tests/f77/return_integer.py
numpy/f2py/tests/f77/return_logical.py
numpy/f2py/tests/f77/return_real.py
numpy/f2py/tests/f90/return_character.py
numpy/f2py/tests/f90/return_complex.py
numpy/f2py/tests/f90/return_integer.py
numpy/f2py/tests/f90/return_logical.py
numpy/f2py/tests/f90/return_real.py
numpy/f2py/tests/mixed/foo.f
numpy/f2py/tests/mixed/foo_fixed.f90
numpy/f2py/tests/mixed/foo_free.f90
numpy/f2py/tests/mixed/run.py
numpy/f2py/tests/run_all.py
numpy/f2py/use_rules.py
numpy/fft/__init__.py
numpy/fft/fftpack.c
numpy/fft/fftpack.h
numpy/fft/fftpack.py
numpy/fft/fftpack_litemodule.c
numpy/fft/helper.py
numpy/fft/info.py
numpy/fft/setup.py
numpy/fft/tests/test_fftpack.py
numpy/fft/tests/test_helper.py
numpy/lib/__init__.py
numpy/lib/arraysetops.py
numpy/lib/convdtype.py
numpy/lib/function_base.py
numpy/lib/getlimits.py
numpy/lib/index_tricks.py
numpy/lib/info.py
numpy/lib/machar.py
numpy/lib/polynomial.py
numpy/lib/scimath.py
numpy/lib/setup.py
numpy/lib/shape_base.py
numpy/lib/src/_compiled_base.c
numpy/lib/tests/test_arraysetops.py
numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_getlimits.py
numpy/lib/tests/test_index_tricks.py
numpy/lib/tests/test_polynomial.py
numpy/lib/tests/test_shape_base.py
numpy/lib/tests/test_twodim_base.py
numpy/lib/tests/test_type_check.py
numpy/lib/tests/test_ufunclike.py
numpy/lib/twodim_base.py
numpy/lib/type_check.py
numpy/lib/ufunclike.py
numpy/lib/user_array.py
numpy/lib/utils.py
numpy/linalg/__init__.py
numpy/linalg/blas_lite.c
numpy/linalg/dlamch.c
numpy/linalg/dlapack_lite.c
numpy/linalg/f2c.h
numpy/linalg/f2c_lite.c
numpy/linalg/info.py
numpy/linalg/lapack_lite/README
numpy/linalg/lapack_lite/clapack_scrub.py
numpy/linalg/lapack_lite/fortran.py
numpy/linalg/lapack_lite/make_lite.py
numpy/linalg/lapack_lite/wrapped_routines
numpy/linalg/lapack_litemodule.c
numpy/linalg/linalg.py
numpy/linalg/setup.py
numpy/linalg/tests/test_linalg.py
numpy/linalg/zlapack_lite.c
numpy/matlib.py
numpy/numarray/__init__.py
numpy/numarray/_capi.c
numpy/numarray/alter_code1.py
numpy/numarray/alter_code2.py
numpy/numarray/compat.py
numpy/numarray/convolve.py
numpy/numarray/fft.py
numpy/numarray/functions.py
numpy/numarray/image.py
numpy/numarray/linear_algebra.py
numpy/numarray/ma.py
numpy/numarray/matrix.py
numpy/numarray/mlab.py
numpy/numarray/nd_image.py
numpy/numarray/numerictypes.py
numpy/numarray/numpy/arraybase.h
numpy/numarray/numpy/cfunc.h
numpy/numarray/numpy/ieeespecial.h
numpy/numarray/numpy/libnumarray.h
numpy/numarray/numpy/numcomplex.h
numpy/numarray/numpy/nummacro.h
numpy/numarray/random_array.py
numpy/numarray/session.py
numpy/numarray/setup.py
numpy/numarray/ufuncs.py
numpy/numarray/util.py
numpy/oldnumeric/__init__.py
numpy/oldnumeric/alter_code1.py
numpy/oldnumeric/alter_code2.py
numpy/oldnumeric/array_printer.py
numpy/oldnumeric/arrayfns.py
numpy/oldnumeric/compat.py
numpy/oldnumeric/fft.py
numpy/oldnumeric/fix_default_axis.py
numpy/oldnumeric/functions.py
numpy/oldnumeric/linear_algebra.py
numpy/oldnumeric/ma.py
numpy/oldnumeric/matrix.py
numpy/oldnumeric/misc.py
numpy/oldnumeric/mlab.py
numpy/oldnumeric/precision.py
numpy/oldnumeric/random_array.py
numpy/oldnumeric/rng.py
numpy/oldnumeric/rng_stats.py
numpy/oldnumeric/setup.py
numpy/oldnumeric/tests/test_oldnumeric.py
numpy/oldnumeric/typeconv.py
numpy/oldnumeric/ufuncs.py
numpy/oldnumeric/user_array.py
numpy/random/__init__.py
numpy/random/info.py
numpy/random/mtrand/Python.pxi
numpy/random/mtrand/distributions.c
numpy/random/mtrand/distributions.h
numpy/random/mtrand/generate_mtrand_c.py
numpy/random/mtrand/initarray.c
numpy/random/mtrand/initarray.h
numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
numpy/random/mtrand/numpy.pxi
numpy/random/mtrand/randomkit.c
numpy/random/mtrand/randomkit.h
numpy/random/setup.py
numpy/random/tests/test_random.py
numpy/setup.py
numpy/testing/__init__.py
numpy/testing/info.py
numpy/testing/numpytest.py
numpy/testing/parametric.py
numpy/testing/setup.py
numpy/testing/utils.py
numpy/tests/test_ctypeslib.py
numpy/version.py
polynomial.py
scimath.py
setup.py
setupegg.py
shape_base.py
site.cfg.example
src/_compiled_base.c
tests/test_arraysetops.py
tests/test_function_base.py
tests/test_getlimits.py
tests/test_index_tricks.py
tests/test_polynomial.py
tests/test_shape_base.py
tests/test_twodim_base.py
tests/test_type_check.py
tests/test_ufunclike.py
twodim_base.py
type_check.py
ufunclike.py
user_array.py
utils.py
==================
f278a3e;Stefan van der Walt;2007-12-15 11:42:00 +0000;Reformat extras docstrings.

==

numpy/ma/extras.py
==================
3d250d0;Stefan van der Walt;2007-12-15 11:29:33 +0000;Reformat docstrings for 80 columns.

==

numpy/ma/core.py
numpy/ma/tests/test_old_ma.py
==================
be2d0ca;Stefan van der Walt;2007-12-15 02:43:35 +0000;Pull in old tests.

==

numpy/core/tests/test_ma.py
numpy/ma/tests/test_core.py
numpy/ma/tests/test_old_ma.py
==================
fc15061;Stefan van der Walt;2007-12-15 02:16:30 +0000;Ignore warning raised during testing.

==

numpy/ma/tests/test_core.py
==================
02ee35a;Stefan van der Walt;2007-12-15 02:07:45 +0000;Assign default values to max_val and min_val to prevent compiler warnings.

==

numpy/core/src/arraytypes.inc.src
==================
4fc786e;Stefan van der Walt;2007-12-15 01:48:01 +0000;Fix benchmarks.  Remove remaining imports of maskedarray.

==

numpy/ma/bench.py
numpy/ma/core.py
numpy/ma/extras.py
numpy/ma/morestats.py
numpy/ma/mrecords.py
numpy/ma/mstats.py
numpy/ma/testutils.py
numpy/ma/timer_comparison.py
==================
703e8d6;Stefan van der Walt;2007-12-15 01:15:26 +0000;Move ma to numpy root.  Fix unit tests.  Remove references to numpy.core.ma.

==

THANKS.txt
numpy/__init__.py
numpy/core/__init__.py
numpy/core/ma/LICENSE
numpy/core/ma/__init__.py
numpy/core/ma/bench.py
numpy/core/ma/core.py
numpy/core/ma/extras.py
numpy/core/ma/morestats.py
numpy/core/ma/mrecords.py
numpy/core/ma/mstats.py
numpy/core/ma/setup.py
numpy/core/ma/tests/test_core.py
numpy/core/ma/tests/test_extras.py
numpy/core/ma/tests/test_morestats.py
numpy/core/ma/tests/test_mrecords.py
numpy/core/ma/tests/test_mstats.py
numpy/core/ma/tests/test_subclassing.py
numpy/core/ma/testutils.py
numpy/core/ma/timer_comparison.py
numpy/core/ma/version.py
numpy/core/tests/test_regression.py
numpy/ma/LICENSE
numpy/ma/__init__.py
numpy/ma/bench.py
numpy/ma/core.py
numpy/ma/extras.py
numpy/ma/morestats.py
numpy/ma/mrecords.py
numpy/ma/mstats.py
numpy/ma/setup.py
numpy/ma/tests/test_core.py
numpy/ma/tests/test_extras.py
numpy/ma/tests/test_morestats.py
numpy/ma/tests/test_mrecords.py
numpy/ma/tests/test_mstats.py
numpy/ma/tests/test_subclassing.py
numpy/ma/testutils.py
numpy/ma/timer_comparison.py
numpy/ma/version.py
numpy/setup.py
==================
61f9f6d;Stefan van der Walt;2007-12-15 00:38:47 +0000;Merge Pierre's implementation of MaskedArray.

==

numpy/core/ma.py
numpy/core/ma/LICENSE
numpy/core/ma/__init__.py
numpy/core/ma/bench.py
numpy/core/ma/core.py
numpy/core/ma/extras.py
numpy/core/ma/morestats.py
numpy/core/ma/mrecords.py
numpy/core/ma/mstats.py
numpy/core/ma/setup.py
numpy/core/ma/tests/test_core.py
numpy/core/ma/tests/test_extras.py
numpy/core/ma/tests/test_morestats.py
numpy/core/ma/tests/test_mrecords.py
numpy/core/ma/tests/test_mstats.py
numpy/core/ma/tests/test_subclassing.py
numpy/core/ma/testutils.py
numpy/core/ma/timer_comparison.py
numpy/core/ma/version.py
==================
8e82b04;cookedm;2007-12-14 22:19:54 +0000;Add degrees() and radians() ufuncs

==

numpy/core/code_generators/generate_umath.py
numpy/core/src/umathmodule.c.src
numpy/core/tests/test_umath.py
==================
d3c469c;Stefan van der Walt;2007-12-14 13:39:15 +0000;Fix building on freebsd [patch by Joe Peterson].

==

numpy/core/include/numpy/ufuncobject.h
numpy/numarray/_capi.c
==================
dd955bd;dhuard;2007-12-13 19:24:43 +0000;Fixed binary_repr to make sure that evaluation at 0 returns a string of length width.

==

numpy/core/numeric.py
==================
8e6f085;Robert Kern;2007-12-12 23:59:59 +0000;Make sure the develop command can handle generated script files.

==

numpy/distutils/command/build_scripts.py
numpy/distutils/command/develop.py
==================
ec1b789;Robert Kern;2007-12-12 20:12:10 +0000;Make the 'develop' command from setuptools run build_src --inplace in addition to build_ext --inplace. This allows SWIG wrappers to be correctly generated.

==

numpy/distutils/command/develop.py
numpy/distutils/command/egg_info.py
numpy/distutils/core.py
==================
170d785;Travis Oliphant;2007-12-11 05:51:28 +0000;Re-work slow clip to use minimum followed by maximum.

==

numpy/core/src/multiarraymodule.c
==================
9405a87;Travis Oliphant;2007-12-11 04:48:31 +0000;Allow clip method to have either min or max passed in.

==

numpy/core/src/arraymethods.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
numpy/core/tests/test_multiarray.py
==================
0a5bcc8;Robert Kern;2007-12-06 05:18:54 +0000;Use a correct upper bound for the inversion search in binomial distributions.

==

numpy/random/mtrand/distributions.c
==================
89fa0fd;Pearu Peterson;2007-12-05 19:59:29 +0000;Fix typo.

==

numpy/f2py/crackfortran.py
==================
687f1ae;Stefan van der Walt;2007-12-04 12:57:48 +0000;Add test_ufunc.

==

numpy/core/tests/test_ufunc.py
==================
67bc27b;Robert Kern;2007-12-04 08:02:06 +0000;Typo.

==

numpy/distutils/fcompiler/intel.py
==================
941a93a;Robert Kern;2007-12-04 07:58:37 +0000;Use the correct link parameters for shared libraries with Intel Fortran on OS X.

==

numpy/distutils/fcompiler/intel.py
==================
8610fb8;Robert Kern;2007-12-04 06:58:41 +0000;Another string method conversion typo.

==

numpy/f2py/rules.py
==================
ffd9adc;Robert Kern;2007-12-04 05:33:42 +0000;The PIC flag changed in the 10 version of the Intel Fortran compiler.

==

numpy/distutils/fcompiler/intel.py
==================
ec6e942;Stefan van der Walt;2007-12-03 07:15:55 +0000;Increase test code coverage.  Add documentation.

==

numpy/add_newdocs.py
numpy/core/tests/test_multiarray.py
numpy/fft/tests/test_fftpack.py
==================
0f4730e;Robert Kern;2007-12-03 06:39:46 +0000;BUG: fix incorrect ordering of the 'good' and 'bad' objects in the hypergeometric distribution.

==

numpy/random/mtrand/distributions.c
==================
37689e0;David Cournapeau;2007-12-02 11:55:33 +0000;More mime-type fixes in repository

==
==================
3882585;David Cournapeau;2007-12-02 11:54:16 +0000;Fix typo in mime-type svn prop for swig html doc

==
==================
c377fe8;David Cournapeau;2007-12-02 11:53:05 +0000;Set mime-type in repository for generated doc for swig

==
==================
65293fc;wfspotz@sandia.gov;2007-12-02 04:17:23 +0000;Corrected casting logic for numpy array scalars

==

numpy/doc/swig/pyfragments.swg
==================
69645b8;wfspotz@sandia.gov;2007-12-01 18:16:42 +0000;Argout typemap documentation made more clear.

==

numpy/doc/swig/doc/numpy_swig.html
numpy/doc/swig/doc/numpy_swig.pdf
numpy/doc/swig/doc/numpy_swig.txt
==================
ab3cfae;wfspotz@sandia.gov;2007-12-01 18:09:40 +0000;Changed setting of fortran-order array's flag; corrected documentaion

==

numpy/doc/swig/doc/numpy_swig.html
numpy/doc/swig/doc/numpy_swig.pdf
numpy/doc/swig/doc/numpy_swig.txt
numpy/doc/swig/numpy.i
numpy/doc/swig/pyfragments.swg
==================
b0e8c78;wfspotz@sandia.gov;2007-11-30 03:58:34 +0000;* Added support for FORTRAN-ordered arrays to numpy.i.
* Added new tests that test some of the FORTRAN-ordered typemaps.

* Updated the documentation to include the new FORTRAN-ordering
  support.


==

numpy/doc/swig/doc/numpy_swig.html
numpy/doc/swig/doc/numpy_swig.pdf
numpy/doc/swig/doc/numpy_swig.txt
numpy/doc/swig/numpy.i
numpy/doc/swig/pyfragments.swg
numpy/doc/swig/test/Farray.cxx
numpy/doc/swig/test/Farray.h
numpy/doc/swig/test/Farray.i
numpy/doc/swig/test/Makefile
numpy/doc/swig/test/setup.py
numpy/doc/swig/test/testFarray.py
==================
49a0503;wfspotz@sandia.gov;2007-11-29 19:52:29 +0000;* Added a new typemap suite, ARGOUTVIEW, which takes a view of a data   buffer and converts it to an output numpy array (1D, 2D and 3D, with   before- and after- dimension specifications.)
* Added new tests for the ARGOUTVIEW typemaps in the test directory
  (Array1 and Array2 classes, both included in the Array python
  extension module, tested in testArray.py).

* Updated the documentation to reflect the latest changes.


==

numpy/doc/swig/doc/numpy_swig.html
numpy/doc/swig/doc/numpy_swig.pdf
numpy/doc/swig/doc/numpy_swig.txt
numpy/doc/swig/doc/testing.pdf
numpy/doc/swig/numpy.i
numpy/doc/swig/test/Array.i
numpy/doc/swig/test/Array1.cxx
numpy/doc/swig/test/Array1.h
numpy/doc/swig/test/Array2.cxx
numpy/doc/swig/test/Array2.h
numpy/doc/swig/test/Makefile
numpy/doc/swig/test/setup.py
numpy/doc/swig/test/testArray.py
==================
cbc162f;David Cournapeau;2007-11-29 05:05:39 +0000;Adding an example for MKL in site.cfg.example (for recent versions)

==

site.cfg.example
==================
6c00b11;Jarrod Millman;2007-11-28 05:12:37 +0000;use 'in' keyword to test dictionary membership

==

numpy/_import_tools.py
numpy/core/tests/test_defmatrix.py
numpy/distutils/command/build_ext.py
numpy/distutils/command/build_src.py
numpy/distutils/core.py
numpy/distutils/cpuinfo.py
numpy/distutils/from_template.py
numpy/distutils/misc_util.py
numpy/distutils/system_info.py
numpy/f2py/auxfuncs.py
numpy/f2py/capi_maps.py
numpy/f2py/cb_rules.py
numpy/f2py/cfuncs.py
numpy/f2py/crackfortran.py
numpy/f2py/f2py2e.py
numpy/f2py/f90mod_rules.py
numpy/f2py/func2subr.py
numpy/f2py/lib/extgen/base.py
numpy/f2py/lib/extgen/py_support.py
numpy/f2py/lib/parser/Fortran2003.py
numpy/f2py/lib/parser/block_statements.py
numpy/f2py/lib/parser/parsefortran.py
numpy/f2py/lib/parser/statements.py
numpy/f2py/lib/parser/utils.py
numpy/f2py/rules.py
numpy/f2py/use_rules.py
numpy/numarray/numerictypes.py
numpy/numarray/session.py
numpy/testing/numpytest.py
numpy/testing/utils.py
==================
3fe715c;Jarrod Millman;2007-11-26 05:37:46 +0000;replaced apply() with direct function call

==

numpy/lib/utils.py
==================
5eabfa7;Jarrod Millman;2007-11-26 05:08:55 +0000;using identity testing for None

==

numpy/fft/fftpack.py
==================
6daa0bb;wfspotz@sandia.gov;2007-11-24 02:19:50 +0000;Added min and max macros to Backward Compatibility fragments

==

numpy/doc/swig/numpy.i
numpy/doc/swig/pyfragments.swg
==================
eaae1d0;wfspotz@sandia.gov;2007-11-24 02:04:19 +0000;Added new fragment dependency to unsigned long fragment

==

numpy/doc/swig/numpy.i
numpy/doc/swig/pyfragments.swg
==================
01c13fc;wfspotz@sandia.gov;2007-11-23 22:39:37 +0000;Added %fragment 'NumPy_Fragments' for convenience

==

numpy/doc/swig/numpy.i
==================
9f40bb0;wfspotz@sandia.gov;2007-11-23 19:43:20 +0000;Changed #define to %#define so that they delay implementation

==

numpy/doc/swig/numpy.i
==================
aaaf84c;wfspotz@sandia.gov;2007-11-23 19:30:04 +0000;Fixed some typos in the comments

==

numpy/doc/swig/pyfragments.swg
==================
0fa45d7;wfspotz@sandia.gov;2007-11-23 19:24:59 +0000;Changed numpy.i so that helper macros and helper functions are now implemented as swig %fragments.  This allows me to implement the backward compatibility macros without duplicating them.

==

numpy/doc/swig/numpy.i
numpy/doc/swig/pyfragments.swg
==================
a9f446d;Stefan van der Walt;2007-11-23 15:20:41 +0000;Fix randint for negative interval.

==

numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
numpy/random/tests/test_random.py
==================
8b60ca4;Stefan van der Walt;2007-11-23 14:53:33 +0000;Update SWIG typemaps to be C89 compliant (patch by Matthieu Brucher). Fix filenames in setup.py.  Fix tests in Makefile.

==

numpy/doc/swig/numpy.i
numpy/doc/swig/test/Makefile
numpy/doc/swig/test/setup.py
==================
f1f6ff2;wfspotz@sandia.gov;2007-11-22 18:34:50 +0000;Updated documentation to include pyfragments.swg explanation

==

numpy/doc/swig/doc/numpy_swig.html
numpy/doc/swig/doc/numpy_swig.pdf
numpy/doc/swig/doc/numpy_swig.txt
==================
b8b489f;wfspotz@sandia.gov;2007-11-22 16:14:03 +0000;Added pyfragments.swg, which expands integer type-checking to accept numpy array scalars

==

numpy/doc/swig/numpy.i
numpy/doc/swig/pyfragments.swg
==================
415f217;Jarrod Millman;2007-11-21 06:22:43 +0000;removed split_quoted as per #619

==

numpy/distutils/ccompiler.py
==================
d9976a9;Robert Cimrman;2007-11-20 14:26:44 +0000;Edited module docstring.

==

numpy/lib/arraysetops.py
==================
4ed186d;wfspotz@sandia.gov;2007-11-20 13:58:47 +0000;Added Eric Jones to the list of acknowledgements

==

numpy/doc/swig/doc/numpy_swig.html
numpy/doc/swig/doc/numpy_swig.pdf
numpy/doc/swig/doc/numpy_swig.txt
numpy/doc/swig/doc/testing.pdf
==================
5bb7ee6;Jarrod Millman;2007-11-19 04:17:36 +0000;ran reindent.py to cleanup whitespaces

==

benchmarks/simpleindex.py
numpy/numarray/numerictypes.py
==================
6dbe4f3;Stefan van der Walt;2007-11-18 22:44:06 +0000;Fix indexing with array scalar. Closes #603.

==

numpy/core/src/arrayobject.c
numpy/core/tests/test_regression.py
==================
7254dd7;Stefan van der Walt;2007-11-18 20:49:47 +0000;Fix indexing with booleans (patch by Achim Gaedke). Closes #614.

==

numpy/core/src/arrayobject.c
numpy/core/tests/test_regression.py
==================
4ae613d;Stefan van der Walt;2007-11-18 00:00:37 +0000;Fix arange output byteorder.  Closes ticket #616.

==

numpy/core/src/multiarraymodule.c
numpy/core/tests/test_regression.py
==================
a81039b;David Cournapeau;2007-11-13 13:10:59 +0000;Fix get_mathlib when path argument is None

==

numpy/distutils/misc_util.py
==================
4f13010;Travis Oliphant;2007-11-09 20:48:17 +0000;Fix up empty if statement probem.

==

numpy/core/src/scalartypes.inc.src
==================
529384d;Travis Oliphant;2007-11-08 21:57:44 +0000;Back out change made in r4380 which causes scipy.fftpack not to build correctly.

==

numpy/distutils/command/build_ext.py
==================
064d8fe;cookedm;2007-11-08 16:12:38 +0000;Fix for #609: numpy/linalg/lapack_litemodule.c:lapack_lite_zgeqrf int vs. long

==

numpy/linalg/lapack_litemodule.c
==================
0cb0309;chanley;2007-11-07 21:46:06 +0000;test commit

==

TEST_COMMIT
==================
a974a4b;Jarrod Millman;2007-11-05 20:47:43 +0000;This is the development code for the 1.0.5 release

==

numpy/version.py
==================
47baaba;Jarrod Millman;2007-11-05 20:36:03 +0000;remove old reference to deleted file (r4384)

==

setup.py
==================
eccd9db;cookedm;2007-11-05 09:32:43 +0000;Remove old file scipy_compatibility

==

scipy_compatibility
==================
2d596da;cookedm;2007-11-03 16:09:06 +0000;numpy.distutils.command.build_ext: append build C libraries as dependencies of the extension, to force recompiling if they change. (It should really only force relinking, but adding that is tougher.)

==

numpy/distutils/command/build_ext.py
==================
d89f34a;cookedm;2007-11-03 06:28:14 +0000;Refactor Pyrex source building into a separate method in build_src.py

==

numpy/distutils/command/build_src.py
==================
18d3af5;cookedm;2007-11-03 06:02:55 +0000;Expand linspace docstring.

==

numpy/lib/function_base.py
==================
4cd7a18;Jarrod Millman;2007-10-29 15:48:12 +0000;another typo

==

numpy/f2py/rules.py
==================
8d91e0a;Jarrod Millman;2007-10-29 15:37:11 +0000;typo

==

numpy/f2py/capi_maps.py
==================
7171e1c;Jarrod Millman;2007-10-29 15:16:34 +0000;cleaning up after reindent.py

==

numpy/numarray/numerictypes.py
==================
0b77f0e;Jarrod Millman;2007-10-29 14:58:18 +0000;ran reindent.py to clean up whitespace

==

numpy/core/memmap.py
numpy/core/numeric.py
numpy/core/records.py
numpy/core/setup.py
numpy/core/tests/test_numeric.py
numpy/distutils/ccompiler.py
numpy/distutils/command/build_src.py
numpy/distutils/command/config.py
numpy/distutils/core.py
numpy/distutils/fcompiler/__init__.py
numpy/distutils/misc_util.py
numpy/distutils/system_info.py
numpy/doc/example.py
numpy/f2py/cb_rules.py
numpy/f2py/lib/extgen/base.py
numpy/f2py/lib/extgen/c_support.py
numpy/f2py/lib/extgen/py_support.py
numpy/f2py/lib/extgen/setup_py.py
numpy/f2py/lib/extgen/utils.py
numpy/f2py/lib/main.py
numpy/f2py/lib/py_wrap_type.py
numpy/f2py/lib/tests/test_module_module.py
numpy/lib/function_base.py
numpy/lib/index_tricks.py
numpy/lib/shape_base.py
numpy/lib/tests/test_shape_base.py
numpy/lib/twodim_base.py
numpy/lib/type_check.py
numpy/lib/utils.py
numpy/linalg/lapack_lite/clapack_scrub.py
numpy/matlib.py
numpy/numarray/image.py
numpy/numarray/matrix.py
numpy/numarray/numerictypes.py
numpy/oldnumeric/arrayfns.py
numpy/oldnumeric/ma.py
numpy/oldnumeric/random_array.py
numpy/testing/numpytest.py
setup.py
==================
aa3c27c;Jarrod Millman;2007-10-29 14:43:48 +0000;typo

==

numpy/matlib.py
==================
06b3165;Jarrod Millman;2007-10-29 14:37:37 +0000;using faster string methods rather than deprecated string module

==

numpy/core/code_generators/generate_umath.py
numpy/core/defchararray.py
numpy/core/defmatrix.py
numpy/distutils/ccompiler.py
numpy/distutils/misc_util.py
numpy/f2py/auxfuncs.py
numpy/f2py/capi_maps.py
numpy/f2py/cb_rules.py
numpy/f2py/common_rules.py
numpy/f2py/crackfortran.py
numpy/f2py/doc/collectinput.py
numpy/f2py/f2py2e.py
numpy/f2py/f90mod_rules.py
numpy/f2py/func2subr.py
numpy/f2py/rules.py
numpy/f2py/tests/mixed/run.py
numpy/f2py/use_rules.py
numpy/oldnumeric/matrix.py
numpy/oldnumeric/precision.py
==================
3cb37bb;Jarrod Millman;2007-10-29 09:09:59 +0000;Using the in operator to find substrings.  It is shorter and easier to understand.

==

numpy/distutils/ccompiler.py
numpy/distutils/core.py
numpy/f2py/crackfortran.py
numpy/f2py/f2py2e.py
numpy/linalg/lapack_lite/make_lite.py
==================
dea664f;Jarrod Millman;2007-10-29 08:33:07 +0000;fixed typo

==

numpy/oldnumeric/random_array.py
==================
f6f20d9;Jarrod Millman;2007-10-29 08:31:02 +0000;added reference to another style guide checking script

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
86a257e;Travis Oliphant;2007-10-29 01:07:46 +0000;Fix memory leak in seterr exposed during str(a).  Fixes #602

==

numpy/core/src/ufuncobject.c
==================
1f0d060;Travis Oliphant;2007-10-26 22:33:14 +0000;Fix ticket #599

==

numpy/core/fromnumeric.py
==================
623c64f;Travis Oliphant;2007-10-26 22:19:25 +0000;Fix label problem on wide builds.

==

numpy/core/src/scalartypes.inc.src
==================
0dbf6c3;Travis Oliphant;2007-10-26 21:44:47 +0000;Add test for #600 fix.

==

numpy/core/tests/test_regression.py
==================
9034d6b;Travis Oliphant;2007-10-26 21:39:08 +0000;Finish fixing ticket #600

==

numpy/core/src/scalartypes.inc.src
==================
02eca61;Travis Oliphant;2007-10-26 21:26:22 +0000;Fix pickling of numpy.unicode_ objects on narrow builds of Python.

==

numpy/core/src/multiarraymodule.c
numpy/core/src/scalartypes.inc.src
numpy/core/src/ucsnarrow.c
==================
440a5f9;Travis Oliphant;2007-10-19 19:31:16 +0000;Avoid extra copy if otype is object on output.

==

numpy/lib/function_base.py
==================
e052f24;Travis Oliphant;2007-10-19 19:06:21 +0000;Fix so that vectorize passes sub-classes through.

==

numpy/lib/function_base.py
==================
21b4bee;Jarrod Millman;2007-10-19 04:33:58 +0000;raise error if histogram is called with a decending range to bin into (see #586)

==

numpy/lib/function_base.py
==================
e41b3a4;Jarrod Millman;2007-10-19 03:47:00 +0000;removing decorators (see #580)

==

numpy/f2py/lib/extgen/base.py
==================
b1ff17a;Travis Oliphant;2007-10-18 23:41:59 +0000;Allow subclasses through vectorize.

==

numpy/lib/function_base.py
==================
8f7a0f5;Travis Oliphant;2007-10-18 15:18:57 +0000;Fix vectorize to work with strings. Fix where 64-bit looks for X11 libraries. Fix comment.

==

numpy/core/include/numpy/ndarrayobject.h
numpy/distutils/system_info.py
numpy/lib/function_base.py
==================
bee1070;Travis Oliphant;2007-10-17 04:06:29 +0000;Fix ticket #592: segfault with bitwise_or inplace

==

numpy/core/src/ufuncobject.c
numpy/core/tests/test_regression.py
==================
8095de4;Travis Oliphant;2007-10-09 03:08:26 +0000;Fix Ticket #588: problem with negative striding and fast blas implementation of dot

==

numpy/core/blasdot/_dotblas.c
numpy/core/src/arraytypes.inc.src
numpy/core/tests/test_regression.py
numpy/lib/function_base.py
==================
382beab;chris.burns;2007-10-04 19:40:50 +0000;Some documentation cleanup of disutils.

==

numpy/doc/DISTUTILS.txt
==================
ac3329b;chris.burns;2007-10-02 23:35:32 +0000;Add Docutils dependency for Epydoc.

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
fb53cd4;cookedm;2007-10-02 19:18:29 +0000;distutils/fcompiler/gnu.py: add -march=k8 when cpu.is_AMD64()

==

numpy/distutils/fcompiler/gnu.py
==================
f38bc34;cookedm;2007-10-02 19:14:52 +0000;Update distutils/cpuinfo.py  * convert class names to CamelCase  * Add PentiumM to LinuxCPUInfo and Win32CPUInfo. Also add it to SSE2 detection.  * remove is_Athlon64() and is_Operton() from Win32CPUInfo, and add    is_AMD64(). We can't reliably distinguish between the two (or from    other 64-bit Athlons). Also add is_AMD64() to LinuxCPUInfo.  * Factor out common command output checking, and remove (most) of the    bare try/excepts used in the __init__ methods (exception is    Win32CPUInfo; don't know what exceptions could be thrown). Use    warnings.warn instead of printing exceptions to stderr

==

numpy/distutils/cpuinfo.py
==================
610438f;Stefan van der Walt;2007-10-02 07:54:11 +0000;Rename test classes to CapWords.

==

numpy/core/tests/test_defmatrix.py
numpy/core/tests/test_errstate.py
numpy/core/tests/test_ma.py
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_numeric.py
numpy/core/tests/test_numerictypes.py
numpy/core/tests/test_records.py
numpy/core/tests/test_regression.py
numpy/core/tests/test_scalarmath.py
numpy/core/tests/test_umath.py
numpy/distutils/tests/f2py_ext/tests/test_fib2.py
numpy/distutils/tests/f2py_f90_ext/tests/test_foo.py
numpy/distutils/tests/gen_ext/tests/test_fib3.py
numpy/distutils/tests/pyrex_ext/tests/test_primes.py
numpy/distutils/tests/swig_ext/tests/test_example.py
numpy/distutils/tests/swig_ext/tests/test_example2.py
numpy/distutils/tests/test_fcompiler_gnu.py
numpy/distutils/tests/test_misc_util.py
numpy/f2py/lib/parser/test_Fortran2003.py
numpy/f2py/lib/parser/test_parser.py
numpy/f2py/lib/tests/test_derived_scalar.py
numpy/f2py/lib/tests/test_module_module.py
numpy/f2py/lib/tests/test_module_scalar.py
numpy/f2py/lib/tests/test_scalar_function_in.py
numpy/f2py/lib/tests/test_scalar_in_out.py
numpy/fft/tests/test_fftpack.py
numpy/fft/tests/test_helper.py
numpy/lib/tests/test_arraysetops.py
numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_getlimits.py
numpy/lib/tests/test_index_tricks.py
numpy/lib/tests/test_polynomial.py
numpy/lib/tests/test_shape_base.py
numpy/lib/tests/test_twodim_base.py
numpy/lib/tests/test_type_check.py
numpy/lib/tests/test_ufunclike.py
numpy/random/tests/test_random.py
numpy/tests/test_ctypeslib.py
==================
b4bb63c;cookedm;2007-10-02 07:32:06 +0000;Remove use of the string module in distutils/cpuinfo.py

==

numpy/distutils/cpuinfo.py
==================
9e50c58;Pearu Peterson;2007-10-02 06:57:10 +0000;apply gen_lib_options overwrite only when a compiler module is imported

==

numpy/distutils/ccompiler.py
==================
fadbb42;Jarrod Millman;2007-10-02 06:21:37 +0000;more rest corrections

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
6bb10cb;Jarrod Millman;2007-10-02 06:19:44 +0000;trying to get the rest right

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
432bad5;Jarrod Millman;2007-10-02 06:19:01 +0000;typo

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
2aa8f46;Jarrod Millman;2007-10-02 06:17:47 +0000;more on documentation

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
c7108cb;Jarrod Millman;2007-10-02 04:07:12 +0000;allow TestCase classes to be prefixed with either 'test' or 'Test'

==

numpy/testing/numpytest.py
==================
cc3e7f3;Stefan van der Walt;2007-09-30 10:47:58 +0000;ma: output of .sum() should be scalar (patch by reggie, closes ticket #557).

==

numpy/core/ma.py
==================
325cd58;Stefan van der Walt;2007-09-30 10:41:27 +0000;Fix tri when dtype is bool (closes ticket #574).

==

numpy/lib/tests/test_twodim_base.py
numpy/lib/twodim_base.py
==================
38cb2ac;cookedm;2007-09-25 15:57:55 +0000;Add msvccompiler to those injected with gen_lib_options

==

numpy/distutils/ccompiler.py
==================
0d9ad16;cookedm;2007-09-25 15:41:49 +0000;Inject our numpy.distutils.ccompiler.gen_lib_options into the various distutils.*compiler modules (esp. msvccompiler)

==

numpy/distutils/ccompiler.py
==================
703a49e;cookedm;2007-09-25 14:56:33 +0000;Back out pearu's r4101 that added a warning about importing distutils before numpy.distutils. This warning triggered when setuptools was imported first.

==

numpy/distutils/__init__.py
==================
1468285;Stefan van der Walt;2007-09-25 11:32:19 +0000;ReST fixes.

==

numpy/doc/CAPI.txt
numpy/doc/pep_buffer.txt
numpy/doc/records.txt
numpy/doc/ufuncs.txt
==================
0f3ebdb;Stefan van der Walt;2007-09-25 10:56:04 +0000;ReST markup fixes.

==

numpy/doc/pep_buffer.txt
==================
518e9b2;Stefan van der Walt;2007-09-25 10:39:34 +0000;Update formatting.  Mention how to handle blank lines in doctests. Minor rephrasing.

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
07039cc;Jarrod Millman;2007-09-23 20:49:11 +0000;point to a link that actually works

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
067d642;Jarrod Millman;2007-09-23 20:30:51 +0000;correcting epydoc output

==

numpy/doc/html/example-module.html
numpy/doc/html/example-pysrc.html
numpy/doc/html/help.html
numpy/doc/html/identifier-index.html
numpy/doc/html/module-tree.html
==================
7a1c007;Jarrod Millman;2007-09-23 14:39:10 +0000;another typo

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
fe3c788;Jarrod Millman;2007-09-23 14:38:31 +0000;typo

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
6d231a9;Jarrod Millman;2007-09-23 14:36:47 +0000;one more try

==

numpy/doc/html/api-objects.txt
numpy/doc/html/crarr.png
numpy/doc/html/epydoc.css
numpy/doc/html/epydoc.js
numpy/doc/html/example-module.html
numpy/doc/html/example-pysrc.html
numpy/doc/html/frames.html
numpy/doc/html/help.html
numpy/doc/html/identifier-index.html
numpy/doc/html/index.html
numpy/doc/html/module-tree.html
numpy/doc/html/redirect.html
numpy/doc/html/toc-everything.html
numpy/doc/html/toc-example-module.html
numpy/doc/html/toc.html
==================
35c7155;Jarrod Millman;2007-09-23 14:32:08 +0000;backing out the last thing i did

==

numpy/doc/html/api-objects.txt
numpy/doc/html/crarr.png
numpy/doc/html/epydoc.css
numpy/doc/html/epydoc.js
numpy/doc/html/example-module.html
numpy/doc/html/example-pysrc.html
numpy/doc/html/frames.html
numpy/doc/html/help.html
numpy/doc/html/identifier-index.html
numpy/doc/html/index.html
numpy/doc/html/module-tree.html
numpy/doc/html/redirect.html
numpy/doc/html/toc-everything.html
numpy/doc/html/toc-example-module.html
numpy/doc/html/toc.html
==================
1794d8a;Jarrod Millman;2007-09-23 14:29:19 +0000;get the example working

==

numpy/doc/HOWTO_DOCUMENT.txt
numpy/doc/example.py
numpy/doc/html/api-objects.txt
numpy/doc/html/crarr.png
numpy/doc/html/epydoc.css
numpy/doc/html/epydoc.js
numpy/doc/html/example-module.html
numpy/doc/html/example-pysrc.html
numpy/doc/html/frames.html
numpy/doc/html/help.html
numpy/doc/html/identifier-index.html
numpy/doc/html/index.html
numpy/doc/html/module-tree.html
numpy/doc/html/redirect.html
numpy/doc/html/toc-everything.html
numpy/doc/html/toc-example-module.html
numpy/doc/html/toc.html
==================
7afbac2;Pearu Peterson;2007-09-23 13:56:50 +0000;fixing link error: fixed. Removing debug messages and added a warning message on the situation that triggered this issue: numpy.distutils must always be imported before distutils.

==

numpy/distutils/__init__.py
numpy/distutils/ccompiler.py
numpy/distutils/command/build_ext.py
==================
aba52ae;Pearu Peterson;2007-09-23 13:39:22 +0000;fixing link error: wrong gen_lib_options is being used, may be it is a import problem.

==

numpy/distutils/misc_util.py
==================
0ac6c30;Jarrod Millman;2007-09-23 13:36:54 +0000;more doc work

==

numpy/doc/example.py
==================
1b388dd;Pearu Peterson;2007-09-23 13:27:54 +0000;fixing link error: added debug message, 3.

==

numpy/distutils/command/build_ext.py
==================
0ae9b49;Jarrod Millman;2007-09-23 13:25:31 +0000;more documentation

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
7b49084;Jarrod Millman;2007-09-23 13:22:55 +0000;typo

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
dfc8625;Jarrod Millman;2007-09-23 13:20:53 +0000;more doc work

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
c5a845f;Pearu Peterson;2007-09-23 13:16:28 +0000;fixing link error: added debug message, 2.

==

numpy/distutils/ccompiler.py
==================
baa8156;Pearu Peterson;2007-09-23 12:57:12 +0000;fixing link error: added debug message

==

numpy/distutils/ccompiler.py
==================
02a8223;Pearu Peterson;2007-09-23 12:55:51 +0000;fix missing string import

==

numpy/distutils/misc_util.py
==================
412700d;Jarrod Millman;2007-09-23 12:35:17 +0000;docs

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
f71aa54;Jarrod Millman;2007-09-23 12:34:24 +0000;docs

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
424bdd9;Jarrod Millman;2007-09-23 12:32:41 +0000;cont. documentation

==

numpy/doc/HOWTO_DOCUMENT.txt
numpy/doc/example.py
==================
76ab788;Jarrod Millman;2007-09-23 12:21:04 +0000;more documentation

==

numpy/doc/HOWTO_DOCUMENT.txt
numpy/doc/example.py
==================
0b12d90;Jarrod Millman;2007-09-23 11:53:11 +0000;documentation

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
5e444ee;Jarrod Millman;2007-09-23 11:44:07 +0000;more documentation

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
dcac742;Jarrod Millman;2007-09-23 11:36:49 +0000;more documentation

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
88e1fad;Jarrod Millman;2007-09-23 11:32:41 +0000;more documentation work

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
47dc804;Jarrod Millman;2007-09-23 11:14:05 +0000;updating file extension to .txt

==

numpy/doc/HOWTO_DOCUMENT.py
numpy/doc/HOWTO_DOCUMENT.txt
==================
007331a;Jarrod Millman;2007-09-23 11:12:12 +0000;documentation

==

numpy/doc/HOWTO_DOCUMENT.py
numpy/doc/example.py
==================
42dc14c;Pearu Peterson;2007-09-22 07:28:45 +0000;backport the usage of get_build_architecture to pyhton <=2.4

==

numpy/distutils/misc_util.py
==================
5f83bc0;Travis Oliphant;2007-09-21 17:32:21 +0000;A little refactoring of memmap

==

numpy/core/memmap.py
==================
6f149aa;Travis Oliphant;2007-09-21 17:21:06 +0000;Raise an error if you try to close a memory-map that you don't own.

==

numpy/core/memmap.py
==================
1091b67;Travis Oliphant;2007-09-21 17:14:57 +0000;Fix memmap passing on it's mmap attribute to views but not closing the file unless it owns the memmap

==

numpy/core/memmap.py
==================
a64b5f0;Travis Oliphant;2007-09-21 16:54:38 +0000;Add a fix for ticket #582 by adding a framework for clearing the floating point exception registers for extension modules compiled with different compilers.

==

numpy/core/code_generators/generate_ufunc_api.py
numpy/core/include/numpy/ufuncobject.h
==================
393718f;Travis Oliphant;2007-09-21 05:23:46 +0000;Apply patch to fix ticket #557 (pinv causing error with empty arrays)

==

numpy/linalg/linalg.py
numpy/linalg/tests/test_linalg.py
==================
a4652fb;Chris Barker;2007-09-21 04:25:10 +0000;Just a check to make sure I can log in

==

DEV_README.txt
==================
88c8fe6;Travis Oliphant;2007-09-21 04:19:00 +0000;Fix places where RENEW is called so that if reallocation fails, cleanup is done gracefully.

==

numpy/core/src/multiarraymodule.c
==================
907294e;Travis Oliphant;2007-09-21 01:56:03 +0000;Fix missing import.

==

numpy/core/tests/test_regression.py
==================
06832eb;Travis Oliphant;2007-09-21 01:22:44 +0000;Fix ticket #546: invalid argmax for non-native arrays.

==

numpy/core/src/multiarraymodule.c
numpy/core/tests/test_regression.py
==================
0848862;Stefan van der Walt;2007-09-20 21:12:04 +0000;Update documentation for `where`.

==

numpy/add_newdocs.py
==================
8ba0325;Stefan van der Walt;2007-09-20 19:30:24 +0000;Add test -- dimensions for rot90.

==

numpy/lib/tests/test_twodim_base.py
==================
64111f4;Stefan van der Walt;2007-09-20 19:26:09 +0000;Remove trailing whitespace.  Add a reminder about unit tests.

==

DEV_README.txt
==================
c189d6d;Stefan van der Walt;2007-09-20 06:45:23 +0000;Add regression test for ticket #572.

==

numpy/core/tests/test_regression.py
==================
2ce8e59;Travis Oliphant;2007-09-20 02:59:49 +0000;Get rid of print statement.

==

numpy/distutils/cpuinfo.py
==================
1f501ab;Travis Oliphant;2007-09-20 02:44:19 +0000;Fix problem with msvc_on_amd64 not working prior to Python 2.5

==

numpy/distutils/misc_util.py
==================
eb83f90;Travis Oliphant;2007-09-20 02:29:24 +0000;Fix so that rot90 only works on first two axes.

==

numpy/lib/twodim_base.py
==================
b1cc248;Travis Oliphant;2007-09-20 02:08:54 +0000;Fix ticket #572:  memory leak in _insert for 0-d input.

==

numpy/lib/src/_compiled_base.c
==================
45cc025;Chris Barker;2007-09-19 19:05:07 +0000;test

==

DEV_README.txt
==================
01fd4aa;Charles Harris;2007-09-16 05:44:05 +0000;Make HOWTO_DOCUMENT a python file. This may fix attempts to post the output of epydoc.

==

numpy/doc/HOWTO_DOCUMENT.py
numpy/doc/HOWTO_DOCUMENT.txt
==================
0aa8dd7;Charles Harris;2007-09-16 05:42:01 +0000;More documentation.

==

numpy/core/fromnumeric.py
==================
1cc500a;Charles Harris;2007-09-16 05:40:34 +0000;Put type in {}.

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
149c1b4;Charles Harris;2007-09-14 03:45:59 +0000;More documentation.

==

numpy/core/fromnumeric.py
==================
27d4f73;wfspotz@sandia.gov;2007-09-13 21:43:16 +0000;Reorganized swig directory with subdirectories for documentation and testing

==

numpy/doc/swig/Makefile
numpy/doc/swig/Matrix.cxx
numpy/doc/swig/Matrix.h
numpy/doc/swig/Matrix.i
numpy/doc/swig/README
numpy/doc/swig/Tensor.cxx
numpy/doc/swig/Tensor.h
numpy/doc/swig/Tensor.i
numpy/doc/swig/Vector.cxx
numpy/doc/swig/Vector.h
numpy/doc/swig/Vector.i
numpy/doc/swig/doc/Makefile
numpy/doc/swig/doc/numpy_swig.html
numpy/doc/swig/doc/numpy_swig.pdf
numpy/doc/swig/doc/numpy_swig.txt
numpy/doc/swig/doc/testing.html
numpy/doc/swig/doc/testing.pdf
numpy/doc/swig/doc/testing.txt
numpy/doc/swig/numpy_swig.html
numpy/doc/swig/numpy_swig.pdf
numpy/doc/swig/numpy_swig.txt
numpy/doc/swig/setup.py
numpy/doc/swig/test/Makefile
numpy/doc/swig/test/Matrix.cxx
numpy/doc/swig/test/Matrix.h
numpy/doc/swig/test/Matrix.i
numpy/doc/swig/test/Tensor.cxx
numpy/doc/swig/test/Tensor.h
numpy/doc/swig/test/Tensor.i
numpy/doc/swig/test/Vector.cxx
numpy/doc/swig/test/Vector.h
numpy/doc/swig/test/Vector.i
numpy/doc/swig/test/setup.py
numpy/doc/swig/test/testMatrix.py
numpy/doc/swig/test/testTensor.py
numpy/doc/swig/test/testVector.py
numpy/doc/swig/testMatrix.py
numpy/doc/swig/testTensor.py
numpy/doc/swig/testVector.py
numpy/doc/swig/testing.html
numpy/doc/swig/testing.pdf
numpy/doc/swig/testing.txt
==================
34946e3;wfspotz@sandia.gov;2007-09-13 17:53:08 +0000;Changed freearg typemaps to use brackets to avoid 'ambiguous else' warning under C

==

numpy/doc/swig/numpy.i
==================
8497bf4;wfspotz@sandia.gov;2007-09-13 17:41:01 +0000;Fixed C++ code to be C-compliant

==

numpy/doc/swig/numpy.i
==================
844e856;wfspotz@sandia.gov;2007-09-13 17:08:01 +0000;Updated date on documentation

==

numpy/doc/swig/numpy_swig.html
numpy/doc/swig/numpy_swig.pdf
numpy/doc/swig/numpy_swig.txt
==================
da505fb;wfspotz@sandia.gov;2007-09-13 17:05:48 +0000;Added proper exception handling to dot example

==

numpy/doc/swig/numpy_swig.html
numpy/doc/swig/numpy_swig.pdf
numpy/doc/swig/numpy_swig.txt
==================
f6f7985;Charles Harris;2007-09-13 05:34:26 +0000;Do more documentation formating. Rename some variables for consistency.

==

numpy/core/fromnumeric.py
==================
1fa7397;cookedm;2007-09-10 20:23:25 +0000;Add support for universal GCC Fortran compilers on OS X (#571)

==

numpy/distutils/fcompiler/gnu.py
==================
208d3c2;Travis Oliphant;2007-09-09 04:44:11 +0000;Fix Von Mises random number generation algorithm to match that of Python and R.

==

numpy/core/numerictypes.py
numpy/random/mtrand/distributions.c
==================
774441c;Travis Oliphant;2007-09-04 16:28:04 +0000;Add longcomplex and singlecomplex to the type namespace.

==

numpy/core/numerictypes.py
==================
c492f3e;Pearu Peterson;2007-08-31 11:28:36 +0000;Added assert_string_equal function to numpy.testing.

==

numpy/testing/utils.py
==================
1e2610a;Pearu Peterson;2007-08-30 09:37:20 +0000;Make test() to return TestResult instance.

==

numpy/testing/numpytest.py
==================
5ebd53c;Pearu Peterson;2007-08-30 07:45:21 +0000;Added testcase pattern feature to testing interface to run only those tests that match given pattern.

==

numpy/testing/numpytest.py
==================
399cf65;Charles Harris;2007-08-30 00:41:01 +0000;Blank lines removed due to popular demand.

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
10a6b61;Stefan van der Walt;2007-08-29 15:46:21 +0000;Remove another generator.

==

numpy/core/tests/test_multiarray.py
==================
ea0c782;Charles Harris;2007-08-29 15:16:32 +0000;Add blank lines between list items. This may be controversial because the result is less compact, but I think it reads better on a terminal. Add bit about putting alternative values for keyword arguments in curly brackets, default first.

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
4eb3857;Stefan van der Walt;2007-08-28 22:26:59 +0000;Temporary workaround for problem with 'multivariate' when specifying zero probabilities.

==

numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
numpy/random/setup.py
numpy/random/tests/test_random.py
==================
97c4dd0;Stefan van der Walt;2007-08-28 22:19:35 +0000;Replace generator expressions for compatibility with Python 2.3.

==

numpy/core/tests/test_multiarray.py
numpy/testing/parametric.py
==================
2b25d30;Charles Harris;2007-08-28 17:26:43 +0000;Some cleanups and rearrangement of comments.

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
216a123;Charles Harris;2007-08-28 04:37:50 +0000;Revise HOWTO_DOCUMENT.txt to make it work.

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
98a307e;Stefan van der Walt;2007-08-27 01:43:26 +0000;Remove hack to fix putmask and apply Eric's patch instead.

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
numpy/core/tests/test_multiarray.py
==================
4a81031;Stefan van der Walt;2007-08-26 09:06:05 +0000;Fix putmask for byte-swapped arrays.

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
numpy/core/tests/test_multiarray.py
==================
64a264a;Stefan van der Walt;2007-08-25 22:07:38 +0000;Temporarily remove failing test which exposes endian problems with putmask (old and new).

==

numpy/core/tests/test_multiarray.py
==================
f362b39;Stefan van der Walt;2007-08-21 18:36:06 +0000;Fix whitespace to conform to Python 3000 convention.

==

numpy/core/src/_isnan.c
numpy/core/src/_signbit.c
numpy/core/src/_sortmodule.c.src
numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/core/src/scalarmathmodule.c.src
numpy/core/src/ucsnarrow.c
numpy/core/src/ufuncobject.c
numpy/core/src/umathmodule.c.src
numpy/distutils/tests/swig_ext/src/example.c
numpy/f2py/lib/src/pyobj_to_string_len.c
numpy/f2py/src/fortranobject.c
numpy/f2py/src/test/foomodule.c
numpy/lib/src/_compiled_base.c
==================
cffb971;Stefan van der Walt;2007-08-21 18:31:51 +0000;Fix parametric test names under Python 2.4.

==

numpy/testing/parametric.py
==================
c8b44bc;Stefan van der Walt;2007-08-21 08:14:20 +0000;Add record array test for putmask.

==

numpy/core/tests/test_multiarray.py
==================
a46f16e;Stefan van der Walt;2007-08-21 07:57:01 +0000;Fast putmask implementation (patch by Eric Firing).

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
numpy/core/tests/test_multiarray.py
==================
859439e;Stefan van der Walt;2007-08-21 06:58:53 +0000;Fix record assignment (based on a patch by Sameer DCosta).

==

numpy/core/records.py
numpy/core/tests/test_records.py
==================
47221fe;Stefan van der Walt;2007-08-20 16:42:16 +0000;Fix parametric testing for Python 2.4.

==

numpy/testing/parametric.py
==================
ba77c98;Stefan van der Walt;2007-08-20 16:29:03 +0000;Fix parametric tests for Python 2.4.

==

numpy/testing/parametric.py
==================
30c6bca;Stefan van der Walt;2007-08-20 13:46:55 +0000;Fix allclose and add tests (based on a patch by Matthew Brett).

==

numpy/core/numeric.py
numpy/core/tests/test_numeric.py
==================
0306400;Stefan van der Walt;2007-08-20 13:43:21 +0000;Add parametric unit tests (contributed by Fernando Perez).

==

numpy/testing/__init__.py
numpy/testing/parametric.py
==================
42fd346;cookedm;2007-08-17 18:32:01 +0000;exec_command.py: remove a version check for > Python 2.1

==

numpy/distutils/exec_command.py
==================
c4e38d2;cookedm;2007-08-17 18:31:24 +0000;in ccompiler.CCompiler_customize_cmd, allow a list of command attributes to ignore when customising. This will be used to simplify some of the compiler customisation in command/

==

numpy/distutils/ccompiler.py
==================
83f13bc;cookedm;2007-08-17 18:29:08 +0000;- remove .a static libs and recreate, instead of updating (ar on OS X can't   handle updating universal .a) - in unixccompiler, use ccompiler.replace_method instead of new.instance_method

==

numpy/distutils/unixccompiler.py
==================
4400da2;cookedm;2007-08-17 18:23:46 +0000;- fix specification of noopt, etc. in the config_fc command - check that Fortran compiler aliases aren't duplicated - don't use the superclass alias in the VAST fcompiler class

==

numpy/distutils/fcompiler/__init__.py
numpy/distutils/fcompiler/vast.py
==================
fc3d818;wfspotz@sandia.gov;2007-08-15 21:36:38 +0000;Improved formatting for rms docstring

==

numpy/doc/swig/numpy_swig.html
numpy/doc/swig/numpy_swig.pdf
numpy/doc/swig/numpy_swig.txt
==================
14dd6a9;wfspotz@sandia.gov;2007-08-15 20:48:11 +0000;Improved formatting of typemap signature lists

==

numpy/doc/swig/numpy_swig.html
numpy/doc/swig/numpy_swig.pdf
numpy/doc/swig/numpy_swig.txt
numpy/doc/swig/testing.pdf
==================
9fc1daf;Pearu Peterson;2007-08-10 15:30:24 +0000;extgen: removing old files

==

numpy/f2py/lib/extgen/c_code.py
numpy/f2py/lib/extgen/c_type.py
numpy/f2py/lib/extgen/converters.py
numpy/f2py/lib/extgen/extension_module.py
numpy/f2py/lib/extgen/predefined_components.py
numpy/f2py/lib/extgen/pyc_argument.py
numpy/f2py/lib/extgen/pyc_function.py
==================
a6148b2;Pearu Peterson;2007-08-10 15:25:44 +0000;extgen: restored numpy support, fixed bugs.

==

numpy/f2py/lib/extgen/base.py
numpy/f2py/lib/extgen/c_support.py
numpy/f2py/lib/extgen/py_support.py
numpy/f2py/lib/extgen/setup_py.py
==================
d4375f2;Pearu Peterson;2007-08-10 13:57:35 +0000;extgen: rewrite, clean up, update docs, simple example from Python reference manual.

==

numpy/f2py/lib/extgen/__init__.py
numpy/f2py/lib/extgen/base.py
numpy/f2py/lib/extgen/c_support.py
numpy/f2py/lib/extgen/doc.txt
numpy/f2py/lib/extgen/py_support.py
numpy/f2py/lib/extgen/setup_py.py
numpy/f2py/lib/extgen/utils.py
==================
907a90f;Pearu Peterson;2007-08-09 10:01:56 +0000;Fix an incorrect usage of log.set_verbosity(INFO) causing log always to be at DEBUG level, INFO is for set_threshold.

==

numpy/distutils/exec_command.py
numpy/distutils/log.py
==================
5da18aa;Robert Kern;2007-08-08 22:31:50 +0000;Optionally use setuptools for commands that setuptools customizes.

==

numpy/distutils/command/bdist_rpm.py
numpy/distutils/command/sdist.py
==================
ad48c03;Pearu Peterson;2007-08-07 11:39:58 +0000;extgen: added initial values to C declarations.

==

numpy/f2py/lib/extgen/c_type.py
==================
7edfd74;Pearu Peterson;2007-08-07 11:21:53 +0000;extgen: impl support to all scalar C types and strings that Python supports.

==

numpy/f2py/lib/extgen/c_type.py
numpy/f2py/lib/extgen/doc.txt
numpy/f2py/lib/extgen/pyc_argument.py
numpy/f2py/lib/extgen/pyc_function.py
==================
ff21b48;Stefan van der Walt;2007-08-07 10:31:44 +0000;Make sure we import numpy's configuration. Closes ticket #565.

==

numpy/__init__.py
==================
45176ed;Pearu Peterson;2007-08-07 09:03:40 +0000;extgen: added argument dependecies support, reviewed reference counting of input and output arguments.

==

numpy/f2py/lib/extgen/c_type.py
numpy/f2py/lib/extgen/pyc_argument.py
numpy/f2py/lib/extgen/pyc_function.py
==================
9bee053;Pearu Peterson;2007-08-06 13:07:03 +0000;Added numpy array and scalar support to PyCTypePython.

==

numpy/f2py/lib/extgen/base.py
numpy/f2py/lib/extgen/c_type.py
numpy/f2py/lib/extgen/doc.txt
==================
5d48245;Stefan van der Walt;2007-08-06 12:42:58 +0000;Fix string conversion of polynomial when leading coefficients are zero. Closes ticket #564.

==

numpy/lib/polynomial.py
numpy/lib/tests/test_polynomial.py
==================
7a605b4;Pearu Peterson;2007-08-06 09:51:47 +0000;extgen: Impl argument support to all Python types.

==

numpy/f2py/lib/extgen/base.py
numpy/f2py/lib/extgen/c_type.py
numpy/f2py/lib/extgen/doc.txt
numpy/f2py/lib/extgen/pyc_argument.py
numpy/f2py/lib/extgen/pyc_function.py
==================
c7f8d0d;Pearu Peterson;2007-08-05 21:13:49 +0000;ExtGen: impl PObject* and C int support, minor improvements.

==

numpy/f2py/lib/extgen/__init__.py
numpy/f2py/lib/extgen/base.py
numpy/f2py/lib/extgen/c_code.py
numpy/f2py/lib/extgen/c_type.py
numpy/f2py/lib/extgen/converters.py
numpy/f2py/lib/extgen/doc.txt
numpy/f2py/lib/extgen/extension_module.py
numpy/f2py/lib/extgen/pyc_argument.py
numpy/f2py/lib/extgen/pyc_function.py
==================
4196b72;Pearu Peterson;2007-08-05 15:23:30 +0000;Impl CType classes and rewrote docs.

==

numpy/f2py/lib/extgen/__init__.py
numpy/f2py/lib/extgen/base.py
numpy/f2py/lib/extgen/c_code.py
numpy/f2py/lib/extgen/c_type.py
numpy/f2py/lib/extgen/doc.txt
numpy/f2py/lib/extgen/extension_module.py
numpy/f2py/lib/extgen/predefined_components.py
numpy/f2py/lib/extgen/pyc_argument.py
numpy/f2py/lib/extgen/pyc_function.py
==================
2ff91f9;Stefan van der Walt;2007-08-04 21:03:20 +0000;Add extgen subpackage.

==

numpy/f2py/lib/setup.py
==================
0cd859e;Pearu Peterson;2007-08-04 20:10:05 +0000;ExtGen: doc update.

==

numpy/f2py/lib/extgen/doc.txt
==================
0a24806;Pearu Peterson;2007-08-04 19:58:57 +0000;Impl basic argument support and documentation generation.

==

numpy/f2py/lib/extgen/__init__.py
numpy/f2py/lib/extgen/base.py
numpy/f2py/lib/extgen/doc.txt
numpy/f2py/lib/extgen/extension_module.py
numpy/f2py/lib/extgen/pyc_argument.py
numpy/f2py/lib/extgen/pyc_function.py
==================
8092698;Robert Kern;2007-08-03 22:19:13 +0000;* Allow an Intel Fortran 10.0 for 64-bit version string that I've seen in the wild. * Use -fPIC instead of -KPIC for said wild compiler.

==

numpy/distutils/fcompiler/intel.py
==================
5bd291e;wfspotz@sandia.gov;2007-08-03 21:21:10 +0000;In documentation, removed one of the reasons for not providing (out) typemaps, which turns out not to be true.

==

numpy/doc/swig/numpy_swig.html
numpy/doc/swig/numpy_swig.pdf
numpy/doc/swig/numpy_swig.txt
==================
66650bd;Pearu Peterson;2007-08-03 19:44:53 +0000;Initial commit of extgen - Python Extension module Generator package.

==

numpy/f2py/lib/extgen/__init__.py
numpy/f2py/lib/extgen/base.py
numpy/f2py/lib/extgen/c_code.py
numpy/f2py/lib/extgen/c_type.py
numpy/f2py/lib/extgen/doc.txt
numpy/f2py/lib/extgen/extension_module.py
numpy/f2py/lib/extgen/predefined_components.py
numpy/f2py/lib/extgen/pyc_function.py
==================
73001f4;Robert Kern;2007-08-02 19:26:40 +0000;Ignore blank lines when determining Fortran free format.

==

numpy/f2py/crackfortran.py
==================
b6406a5;Stefan van der Walt;2007-08-01 23:48:41 +0000;Fix asfarray to return an array instead of a matrix.

==

numpy/lib/tests/test_type_check.py
numpy/lib/type_check.py
==================
cde8914;Pearu Peterson;2007-07-28 19:44:07 +0000;Trying to fix unknown symbol __imp_tanhf linking error, using nc_tanhf.

==

numpy/core/src/umathmodule.c.src
==================
1fc87e8;Pearu Peterson;2007-07-28 19:23:16 +0000;Trying to fix unknown symbol __imp_tanhf linking error.

==

numpy/core/src/umathmodule.c.src
==================
5283f9b;Pearu Peterson;2007-07-28 19:04:45 +0000;Initializing funcname_data inside InitOperators to fix compilation errors on Win32 AMD64 using SDK.

==

numpy/core/code_generators/generate_umath.py
==================
5f96d3e;Pearu Peterson;2007-07-28 13:28:18 +0000;Fix more compiler warnings.

==

numpy/core/src/ufuncobject.c
==================
3aac603;Pearu Peterson;2007-07-28 13:16:12 +0000;Fixed typos.

==

numpy/core/src/umathmodule.c.src
==================
73f4ef1;Pearu Peterson;2007-07-28 13:13:33 +0000;Trying to fix compiler wrarnings, 5. Defined ldexpf when DISTUTILS_USE_SDK.

==

numpy/core/src/umathmodule.c.src
==================
8ddf292;Pearu Peterson;2007-07-28 13:07:50 +0000;Trying to fix compiler wrarnings, 5. Defined frexpf when DISTUTILS_USE_SDK.

==

numpy/core/src/umathmodule.c.src
==================
ab035bb;Pearu Peterson;2007-07-28 12:59:13 +0000;Trying to fix compiler wrarnings, 4.

==

numpy/core/src/umathmodule.c.src
==================
a797a63;Pearu Peterson;2007-07-28 12:56:02 +0000;Trying to fix compiler wrarnings, 3.

==

numpy/core/src/umathmodule.c.src
==================
a8839aa;Pearu Peterson;2007-07-28 12:41:40 +0000;Trying to fix compiler wrarnings, 2.

==

numpy/core/src/umathmodule.c.src
==================
0e41f9a;Pearu Peterson;2007-07-28 12:36:16 +0000;Trying to fix compiler wrarnings: conversion from 'double' to 'float'

==

numpy/core/src/umathmodule.c.src
==================
ce21271;Pearu Peterson;2007-07-28 12:29:04 +0000;Trying to fix mingw32 build.

==

numpy/core/src/umathmodule.c.src
==================
52f2eca;Pearu Peterson;2007-07-28 12:24:51 +0000;Fix rint error and castings.

==

numpy/core/src/umathmodule.c.src
==================
e4ac22a;Pearu Peterson;2007-07-28 12:19:04 +0000;Using DLL_IMPORT only when DISTUTILS_USE_SDK.

==

numpy/core/src/umathmodule.c.src
==================
8e3f559;Pearu Peterson;2007-07-28 12:16:34 +0000;Defining fabsf, hypotf, rintf when DISTUTILS_USE_SDK.

==

numpy/core/src/umathmodule.c.src
==================
c34c294;Pearu Peterson;2007-07-28 12:02:52 +0000;Trying to use DL_IMPORT for logf, sqrtf.

==

numpy/core/setup.py
numpy/core/src/umathmodule.c.src
==================
f7dfa5f;Pearu Peterson;2007-07-28 11:22:01 +0000;Trying to fix inconsisted dll linkage warning, 8: Dont understand why my changes have no effect, giving up for now.

==

numpy/core/src/umathmodule.c.src
==================
704e0d0;Pearu Peterson;2007-07-28 11:16:26 +0000;Fix typo.

==

numpy/core/setup.py
==================
b4093dd;Pearu Peterson;2007-07-28 11:01:24 +0000;Trying to fix inconsisted dll linkage warning, 7.

==

numpy/core/setup.py
==================
821e6e9;Pearu Peterson;2007-07-28 10:33:44 +0000;Trying to fix inconsisted dll linkage warning, 6.

==

numpy/core/setup.py
numpy/core/src/umathmodule.c.src
==================
1c6f114;Pearu Peterson;2007-07-28 10:28:44 +0000;Trying to fix inconsisted dll linkage warning, 5.

==

numpy/core/setup.py
==================
f4a2af4;Pearu Peterson;2007-07-28 10:24:20 +0000;Trying to fix inconsisted dll linkage warning, 4.

==

numpy/core/setup.py
numpy/core/src/umathmodule.c.src
==================
fab6ff3;Pearu Peterson;2007-07-28 10:19:01 +0000;Trying to fix inconsisted dll linkage warning, 3.

==

numpy/core/src/umathmodule.c.src
==================
a187b6e;Pearu Peterson;2007-07-28 10:16:34 +0000;Trying to fix inconsisted dll linkage warning, 2.

==

numpy/core/src/umathmodule.c.src
==================
7c194a1;Pearu Peterson;2007-07-28 10:07:47 +0000;remove debug messages.

==

numpy/distutils/ccompiler.py
numpy/distutils/misc_util.py
==================
8e6960b;Pearu Peterson;2007-07-28 10:07:12 +0000;Trying to fix inconsisted dll linkage warning, clean up.

==

numpy/core/src/umathmodule.c.src
==================
ec11afa;Pearu Peterson;2007-07-27 22:32:40 +0000;msvc_on_amd64 must be applied *after* importing ccompiler module, apply quote_args also to include_dirs.

==

numpy/distutils/ccompiler.py
numpy/distutils/misc_util.py
==================
70899ea;Pearu Peterson;2007-07-27 22:09:23 +0000;Added debug messages to see if quote_args are applied properly.

==

numpy/distutils/ccompiler.py
numpy/distutils/misc_util.py
==================
458af75;Pearu Peterson;2007-07-27 21:12:35 +0000;Fix type error on setting os.environ item.

==

numpy/distutils/misc_util.py
==================
d03073f;Pearu Peterson;2007-07-27 20:48:48 +0000;Try to fix build on AMD64 with MSVC compiler.

==

numpy/distutils/misc_util.py
==================
e4cf341;Pearu Peterson;2007-07-27 16:44:39 +0000;Doc update 2.

==

numpy/f2py/lib/doc.txt
==================
2994141;Stefan van der Walt;2007-07-27 14:36:28 +0000;Convert large integer scalars to long instead of to int [patch by Xavier].  Closes ticket #549.

==

numpy/core/src/scalarmathmodule.c.src
numpy/core/tests/test_scalarmath.py
==================
e4ccde2;Pearu Peterson;2007-07-27 13:57:12 +0000;Doc update.

==

numpy/f2py/lib/doc.txt
==================
0b60733;Pearu Peterson;2007-07-27 12:33:50 +0000;Added doc file for the g3 f2py library package.

==

numpy/f2py/lib/doc.txt
==================
a39ebbc;Pearu Peterson;2007-07-27 09:20:08 +0000;Trying to fix Windows XP x86_64 MSVC build.

==

numpy/distutils/fcompiler/compaq.py
==================
6eab657;Pearu Peterson;2007-07-27 09:02:31 +0000;Using own quote_args, trying to fix build failures with MSVC compiler.

==

numpy/distutils/ccompiler.py
numpy/distutils/fcompiler/__init__.py
numpy/distutils/misc_util.py
==================
468e653;Pearu Peterson;2007-07-25 21:47:16 +0000;More fixes for building scipy with Mingw32 compilers.

==

numpy/distutils/command/build_clib.py
numpy/distutils/command/build_ext.py
numpy/distutils/command/config.py
numpy/distutils/exec_command.py
numpy/distutils/fcompiler/__init__.py
numpy/distutils/fcompiler/gnu.py
numpy/distutils/system_info.py
==================
1f4f410;Pearu Peterson;2007-07-25 11:42:39 +0000;Give a hint when getting "Too many open files" failure.

==

numpy/distutils/ccompiler.py
==================
1222a4a;Pearu Peterson;2007-07-25 11:21:35 +0000;Don't use _nt_quote_args as exec_command should handle spaces in program path. This fixes building numpy/scipy on Windows using mingw32 g77 with full path=C:\Program Files\MinGW\g77.exe.

==

numpy/distutils/ccompiler.py
numpy/distutils/fcompiler/__init__.py
numpy/distutils/fcompiler/gnu.py
==================
c3c9401;Stefan van der Walt;2007-07-25 09:02:55 +0000;Add regression test for eye.

==

numpy/lib/tests/test_twodim_base.py
==================
fb8c49f;Robert Kern;2007-07-25 05:36:05 +0000;Make sure we always return a value from eye(). It wasn't returning a value when dtype==bool.

==

numpy/lib/twodim_base.py
==================
19713cf;Pearu Peterson;2007-07-24 12:08:46 +0000;

==

numpy/distutils/exec_command.py
numpy/distutils/fcompiler/compaq.py
==================
eb12ad4;Stefan van der Walt;2007-07-24 07:46:07 +0000;Fix polygon division. Closes ticket #553.

==

numpy/core/tests/test_regression.py
numpy/lib/polynomial.py
==================
393473f;Stefan van der Walt;2007-07-24 07:33:28 +0000;Fix polynomial comparison. Closes ticket #554.

==

numpy/core/tests/test_regression.py
numpy/lib/polynomial.py
==================
134e4bb;Stefan van der Walt;2007-07-23 13:12:55 +0000;Fix randint. Closes ticket #552.

==

numpy/core/tests/test_regression.py
numpy/oldnumeric/random_array.py
==================
db59310;Pearu Peterson;2007-07-20 11:28:43 +0000;Fixed LAPACK_SRC build for lapack-3.1.1.

==

numpy/distutils/system_info.py
==================
f20f87b;Pearu Peterson;2007-07-20 09:28:37 +0000;Added a new option to NumpyTest.run command line: -s somestring will replace sys.argv\[1:\] with splitcmdline(somestring)

==

numpy/testing/numpytest.py
==================
c41545e;Pearu Peterson;2007-07-19 11:12:38 +0000;update fortran parser docs, 2

==

numpy/f2py/lib/parser/doc.txt
==================
830b621;Pearu Peterson;2007-07-19 11:04:25 +0000;update fortran parser docs.

==

numpy/f2py/lib/parser/doc.txt
==================
02212b6;Pearu Peterson;2007-07-19 09:45:27 +0000;updated fortran parser docs to rest

==

numpy/f2py/lib/parser/doc.txt
==================
13fca8d;Stefan van der Walt;2007-07-17 13:46:16 +0000;Regression test for ticket #396.

==

numpy/core/tests/test_regression.py
==================
a3e3548;Stefan van der Walt;2007-07-17 12:31:52 +0000;Fix documentation for 'where'.

==

numpy/add_newdocs.py
==================
855587e;Stefan van der Walt;2007-07-16 17:42:56 +0000;Clean up fromnumeric docstrings.  Closes ticket #543.

==

numpy/core/fromnumeric.py
==================
18bc84c;Stefan van der Walt;2007-07-10 16:10:25 +0000;Tile empty arrays.

==

numpy/lib/shape_base.py
numpy/lib/tests/test_shape_base.py
==================
e02d2e2;Travis Oliphant;2007-07-06 19:42:46 +0000;Remove un-necessary DECREF

==

numpy/core/src/ufuncobject.c
==================
3bbfa8a;cookedm;2007-07-06 15:05:09 +0000;Add support for aliases for Fortran compilers.  - 'g77' for gnu, 'gfortran' for gnu95, 'ifort' for intel

==

numpy/distutils/fcompiler/__init__.py
numpy/distutils/fcompiler/gnu.py
numpy/distutils/fcompiler/intel.py
==================
2b7dcc2;Charles Harris;2007-07-05 07:00:57 +0000;Working in  _sortmodule.c.src
Reindent code to conform to later python style guidelines.
Add macros for string and unicode comparisons.

Todo:
    Fix swap macro to not use magic variable.
    Add tests for sorts.
    Add full compliment of sorting types for string and unicode.
    Separate out insertion sort?

==

numpy/core/src/_sortmodule.c.src
==================
7ea8b73;Robert Kern;2007-07-02 19:32:02 +0000;Import Pyrex.Compiler.Main explicitly since in 0.9.5.1, it does not appear to be imported with a plain 'import Pyrex.Compiler'

==

numpy/distutils/command/build_src.py
==================
59e6af2;cookedm;2007-07-02 16:59:03 +0000;Add the `inexact` dtype to the tree of types in the numerictypes.py docstring. Also add some ASCII lines to make the tree clearer.

==

numpy/core/numerictypes.py
==================
00f72c9;chanley;2007-07-02 16:09:57 +0000;Fix new typo added to arrayprint.py in r3877

==

numpy/core/arrayprint.py
==================
c7dd6e4;cookedm;2007-07-02 14:55:12 +0000;NaN and Inf in arrays print always as NaN or Inf (not platform-dependent)  - strings used for NaN and Inf can be set with `set_printoptions`  - `get_printoptions` returns a dict instead of a tuple now  - an array of complex longfloats prints negative imaginary components    correctly (no more 1--2j).  - minor cleanups to use Python 2.3 idioms

==

numpy/core/arrayprint.py
==================
57042cc;Charles Harris;2007-06-30 14:42:31 +0000;Replace <= by < in the insertion sort part of argsort(kind='mergesort') for strings. Fixes ticket #540.

==

numpy/add_newdocs.py
numpy/core/src/_sortmodule.c.src
numpy/core/tests/test_regression.py
==================
4c49c18;Fernando Perez;2007-06-20 00:30:11 +0000;Small fix for numpy.info(), which was unconditionally broken

==

numpy/numarray/functions.py
==================
af6c835;cookedm;2007-06-17 19:17:58 +0000;Print install location, numpy version, and python verstion in numpy.test()

==

numpy/__init__.py
==================
bc86e4a;wfspotz@sandia.gov;2007-06-17 18:18:22 +0000;Fixed format string warning

==

numpy/doc/swig/numpy.i
==================
827bc40;Pearu Peterson;2007-06-16 08:44:24 +0000;Fix build breakage.

==

numpy/distutils/fcompiler/__init__.py
==================
635a9fb;cookedm;2007-06-15 21:24:46 +0000;Better version handling in fcompiler  * Remove FCompiler.get_version_cmd, FCompiler.get_flags_version,    FCompiler.get_linker_so_cmd, and FCompiler.get_linker_exe_cmd;    subclasses should do this in FCompiler.update_executables()  * FCompiler attributes .compiler_f77, .version_cmd, etc., are now    properties that read from the .executables dictionary.  * Update intel.py and absoft.py for above  * Add extra asserts for defensive programming. Most of our problems    here seem to come from bad values being generated, and the error not    being caught until later.      * must call FCompiler.customize() before FCompiler.get_version();        command/build_ext.py and command/config.py updated      * verify that commands make sense earlier -- must be None or        lists of strings
Also,
 * add IA-32 as another pattern to search for in 32-bit Intel
   compiler version.
 * minor formatting
 * add debugging helpers to environment.py:EnvironmentConfig class

==

numpy/distutils/ccompiler.py
numpy/distutils/command/build_ext.py
numpy/distutils/command/config.py
numpy/distutils/environment.py
numpy/distutils/fcompiler/__init__.py
numpy/distutils/fcompiler/absoft.py
numpy/distutils/fcompiler/gnu.py
numpy/distutils/fcompiler/intel.py
==================
46f195b;cookedm;2007-06-15 20:55:41 +0000;Minor refactoring of build_clib (break up build_library a bit)

==

numpy/distutils/command/build_clib.py
==================
448d360;cookedm;2007-06-12 20:06:18 +0000;add fdebug as distutils key in [config_fc] for compiler flags to use when compiling Fortran in debug mode.

==

numpy/distutils/fcompiler/__init__.py
==================
2dd0839;Pearu Peterson;2007-06-08 14:14:38 +0000;Fix f2py --fcompiler=.. option.

==

numpy/f2py/f2py2e.py
==================
9c81f9c;Pearu Peterson;2007-06-08 07:36:33 +0000;Fix typo.

==

numpy/distutils/fcompiler/__init__.py
==================
cb082e0;Pearu Peterson;2007-06-08 07:32:05 +0000;use get_flags_version to set version cmd flags.

==

numpy/distutils/fcompiler/__init__.py
==================
14d5854;Pearu Peterson;2007-06-08 06:29:34 +0000;Typo fix: expose memusage for nt OS.

==

numpy/testing/utils.py
==================
047ec0c;Travis Oliphant;2007-06-08 06:08:04 +0000;Restore back to original .transpose behavior in memmap.py with explanation of the problem.

==

numpy/core/memmap.py
==================
5f6e314;Travis Oliphant;2007-06-08 05:51:08 +0000;Fix so that _mmap gets carried through .transpose

==

numpy/core/memmap.py
==================
33a80a6;Travis Oliphant;2007-06-08 05:50:09 +0000;Fix so that _mmap gets carried through .transpose

==

numpy/core/memmap.py
==================
5ed8acc;cookedm;2007-06-07 05:51:11 +0000;f2py_testing: remove jiffies, memusage definitions. Use numpy.testing.util versions instead

==

numpy/f2py/f2py_testing.py
==================
7b76ca7;Pearu Peterson;2007-06-05 18:54:28 +0000;Fix ticket 535.

==

setup.py
==================
75ac806;Pearu Peterson;2007-06-05 10:41:43 +0000;Updated intel compiler arch flags -- intel compiler users should recheck these options.

==

numpy/distutils/fcompiler/intel.py
==================
bbfdf12;cookedm;2007-06-03 04:26:22 +0000;Fix #534, introduced by r3856. The return when exe_cache had something in it meant that FCompiler.find_executables would be executed *once*, regardless of how many subclasses called it.

==

numpy/distutils/fcompiler/__init__.py
==================
6f509f6;cookedm;2007-06-01 19:29:37 +0000;add __neg__ and __pos__ methods to poly1d

==

numpy/lib/polynomial.py
==================
e11e876;Pearu Peterson;2007-06-01 13:57:24 +0000;Reduced find_executables messages.

==

numpy/distutils/fcompiler/__init__.py
==================
47dfa70;Pearu Peterson;2007-06-01 13:36:59 +0000;Fixed detecting fortran compilers under windows.

==

numpy/distutils/ccompiler.py
numpy/distutils/fcompiler/__init__.py
==================
d91fcb0;Pearu Peterson;2007-06-01 10:42:04 +0000;Fix: _dotblas will not ork with fortran compiled blas.

==

numpy/core/setup.py
==================
84e68dd;Pearu Peterson;2007-06-01 10:15:17 +0000;Undo changeset 3839: interactive support is being used (this convinient on windows where one can click on setup.py and build the numpy or whatever package in 2 keystrokes).

==

numpy/distutils/core.py
numpy/distutils/interactive.py
==================
9949bc6;cookedm;2007-05-31 22:11:24 +0000;Add __iter__ method to poly1d so that list() on a poly1d doesn't go into an infinite loop

==

numpy/lib/polynomial.py
==================
94900c3;Travis Oliphant;2007-05-31 17:26:31 +0000;Fix 64-bit zgeqrf on trunk.

==

numpy/linalg/lapack_litemodule.c
==================
47478cb;Pearu Peterson;2007-05-31 08:45:30 +0000;Fix issues with undetected Fortran compilers.

==

numpy/distutils/ccompiler.py
numpy/distutils/command/build_ext.py
numpy/distutils/command/config.py
==================
b8066ba;Pearu Peterson;2007-05-31 08:16:15 +0000;Resolved issues in changeset 3846.

==

numpy/distutils/misc_util.py
==================
28b4885;Pearu Peterson;2007-05-31 07:37:04 +0000;Undo change in 3845.

==

numpy/distutils/misc_util.py
==================
00a3587;Travis Oliphant;2007-05-31 04:57:01 +0000;Fix some problems with data-files not being added in top-level and extra version information added to the name of development distributions.

==

numpy/distutils/misc_util.py
setup.py
==================
aaba782;cookedm;2007-05-31 00:51:48 +0000;do an appropiate behaviour in the distutils commands when new_fcompiler returns None

==

numpy/distutils/command/build_clib.py
numpy/distutils/command/build_ext.py
numpy/distutils/command/config.py
==================
1228e04;cookedm;2007-05-31 00:05:15 +0000;new_fcompiler returns None when it can't match the platform. Hopefully clears up Windows compiling problem.

==

numpy/distutils/fcompiler/__init__.py
==================
2f0c2a5;Travis Oliphant;2007-05-29 20:43:37 +0000;Make changeset 3830 in the right place.

==

numpy/core/include/numpy/ndarrayobject.h
==================
a1f45e3;cookedm;2007-05-29 10:36:27 +0000;Add a convert procedure to the flag-getting logic in fcompiler and environment. Otherwise, flags (for instance) from environment variables or setup.cfg are are strings, where lists are expected.

==

numpy/distutils/environment.py
numpy/distutils/fcompiler/__init__.py
==================
5f88e3d;cookedm;2007-05-28 18:00:22 +0000;Remove interactive support. No one uses it.

==

numpy/distutils/core.py
numpy/distutils/interactive.py
==================
9474991;cookedm;2007-05-28 17:59:49 +0000;fix my mistake in fcompiler/absoft.py and fcompiler/intel.py

==

numpy/distutils/fcompiler/absoft.py
numpy/distutils/fcompiler/intel.py
==================
60eed2d;cookedm;2007-05-28 17:49:55 +0000;Better temporary file handling by using one temporary directory for numpy.distutils, and removing that at exit. Replaces using tempfile.mktemp.

==

numpy/distutils/exec_command.py
numpy/distutils/fcompiler/__init__.py
numpy/distutils/fcompiler/absoft.py
numpy/distutils/fcompiler/ibm.py
numpy/distutils/fcompiler/intel.py
numpy/distutils/misc_util.py
==================
bfb1633;cookedm;2007-05-28 17:48:49 +0000;Use log.debug instead of print in setup.py's

==

numpy/f2py/setup.py
==================
95bfa16;cookedm;2007-05-28 17:48:14 +0000;numpy/setup.py shouldn't be run as a script

==

numpy/setup.py
==================
0f7dfd7;cookedm;2007-05-28 17:47:47 +0000;Use log.info instead of print in setup.py's

==

numpy/core/setup.py
numpy/distutils/command/build_src.py
==================
092c732;cookedm;2007-05-28 17:24:26 +0000;When checking for the _WIN32 preprocessor symbol, don't #error on failure

==

numpy/random/setup.py
==================
a27258e;Stefan van der Walt;2007-05-28 12:55:25 +0000;Clean up select docstring.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
944c32a;Stefan van der Walt;2007-05-28 11:51:55 +0000;Select should not modify output arguments. Add test for basic select functionality.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
840bd64;cookedm;2007-05-25 19:38:39 +0000;distutils: clean up imports (found by running pyflakes)

==

numpy/distutils/command/build_clib.py
numpy/distutils/command/build_src.py
numpy/distutils/command/config_compiler.py
numpy/distutils/exec_command.py
numpy/distutils/fcompiler/__init__.py
numpy/distutils/fcompiler/absoft.py
numpy/distutils/fcompiler/compaq.py
numpy/distutils/fcompiler/g95.py
numpy/distutils/fcompiler/gnu.py
numpy/distutils/fcompiler/hpux.py
numpy/distutils/fcompiler/ibm.py
numpy/distutils/fcompiler/intel.py
numpy/distutils/fcompiler/lahey.py
numpy/distutils/fcompiler/mips.py
numpy/distutils/fcompiler/nag.py
numpy/distutils/fcompiler/none.py
numpy/distutils/fcompiler/pg.py
numpy/distutils/fcompiler/sun.py
numpy/distutils/fcompiler/vast.py
numpy/distutils/intelccompiler.py
numpy/distutils/lib2def.py
numpy/distutils/line_endings.py
numpy/distutils/unixccompiler.py
==================
888d6ed;cookedm;2007-05-25 15:17:20 +0000;Fix at least one bug in fcompiler introduced by me

==

numpy/distutils/fcompiler/__init__.py
==================
4b9536c;cookedm;2007-05-25 15:05:55 +0000;Add a few more log.debug's in fcompiler

==

numpy/distutils/fcompiler/__init__.py
==================
56e555c;cookedm;2007-05-25 14:47:42 +0000;Add a numpy.distutils.log.good function, which when WARN messages would be logged, logs a "nice" anti-warn version. Use this for finding executables to report when we do actually find one.

==

numpy/distutils/exec_command.py
numpy/distutils/log.py
numpy/distutils/misc_util.py
==================
f7b399a;cookedm;2007-05-25 11:41:55 +0000;merge from distutils-revamp branch (step 3) - minor command/build_src cleanup

==

numpy/distutils/command/build_src.py
==================
5267b3e;cookedm;2007-05-25 11:41:16 +0000;merge from distutils-revamp branch (step 2) - fcompiler changes. All flags, executables, etc., should be overridable   by the user with config_fc (either command line or setup.cfg) or by   environment variables

==

numpy/distutils/environment.py
numpy/distutils/fcompiler/__init__.py
numpy/distutils/fcompiler/absoft.py
numpy/distutils/fcompiler/compaq.py
numpy/distutils/fcompiler/g95.py
numpy/distutils/fcompiler/gnu.py
numpy/distutils/fcompiler/hpux.py
numpy/distutils/fcompiler/ibm.py
numpy/distutils/fcompiler/intel.py
numpy/distutils/fcompiler/lahey.py
numpy/distutils/fcompiler/mips.py
numpy/distutils/fcompiler/nag.py
numpy/distutils/fcompiler/none.py
numpy/distutils/fcompiler/pg.py
numpy/distutils/fcompiler/sun.py
numpy/distutils/fcompiler/vast.py
numpy/distutils/interactive.py
==================
d11dbc7;cookedm;2007-05-25 11:20:02 +0000;merge from distutils-revamp branch (step 1) - minor cleanups - find_executable returns None when no file found (instead of having to   check with os.path.isfile)

==
==================
9ddd860;Pearu Peterson;2007-05-25 08:16:26 +0000;fix ticket 526

==

numpy/distutils/fcompiler/__init__.py
==================
fe2f8b8;edschofield;2007-05-24 19:17:17 +0000;Fix the formatting of docstrings for all functions in fromnumeric.py so they don't wrap when using help() from an 80-character terminal.

==

numpy/core/fromnumeric.py
==================
d7cee5d;edschofield;2007-05-24 18:52:25 +0000;Change scipy -> numpy in who() docstring

==

numpy/lib/utils.py
==================
de20de7;edschofield;2007-05-24 18:48:47 +0000;Improve docstring formatting for NumpyTest

==

numpy/testing/numpytest.py
==================
633def1;edschofield;2007-05-24 18:40:58 +0000;Fix docstring formatting for PackageLoader class

==

numpy/_import_tools.py
==================
57ccbf2;edschofield;2007-05-24 18:31:28 +0000;Fix docstring typo for vstack()

==

numpy/lib/shape_base.py
==================
01900f6;Travis Oliphant;2007-05-23 22:18:54 +0000;Update version number on trunk.

==

numpy/version.py
==================
50dff22;Travis Oliphant;2007-05-23 22:04:51 +0000;Fix tab/space.

==

numpy/lib/getlimits.py
==================
d4c96ca;Travis Oliphant;2007-05-23 22:03:42 +0000;Fix up getlimits to work with Python2.3

==

numpy/lib/getlimits.py
==================
8d3338b;Travis Oliphant;2007-05-23 20:32:17 +0000;Fix some compiler warnings.

==

numpy/core/src/multiarraymodule.c
==================
b429ae5;Travis Oliphant;2007-05-23 20:25:31 +0000;Properly decrement references for _internal.py imports

==

numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/core/src/scalartypes.inc.src
==================
8f0db8c;Travis Oliphant;2007-05-23 19:30:18 +0000;Expose numpy.iinfo and re-implement so it supports big-endian as well.

==

numpy/lib/getlimits.py
==================
519e621;Travis Oliphant;2007-05-23 18:47:08 +0000;Fix so that _internal.py gets imported when it is needed.  Perhaps this will fix the problem with multiple-interpreters not working correctly.

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/core/src/scalartypes.inc.src
==================
5b87029;Travis Oliphant;2007-05-23 18:12:52 +0000;Add an dummy import statement so that freeze programs pick up _internal.p

==

numpy/core/__init__.py
==================
16d829c;Travis Oliphant;2007-05-23 18:07:27 +0000;Remove import multiarray from top of _internal.py

==

numpy/core/_internal.py
numpy/core/src/multiarraymodule.c
==================
b6664e2;Stefan van der Walt;2007-05-23 12:43:09 +0000;Add regression test for ticket #501 [patch by Andrew Straw].

==

numpy/core/tests/test_regression.py
==================
9fa5c5a;Travis Oliphant;2007-05-23 02:49:54 +0000;Re-think the byte-swapping unicode tests.  They were correct to begin with.  Try to fix the new bug on narrow builds.

==

numpy/core/src/arrayobject.c
numpy/core/tests/test_unicode.py
==================
984df2b;Travis Oliphant;2007-05-22 23:33:01 +0000;Remove tests for inequality on unicode scalars --- not sure why they were there in the first place. Fix bug in masked_array.

==

numpy/core/ma.py
numpy/core/src/arraymethods.c
numpy/core/tests/test_unicode.py
==================
74057de;Travis Oliphant;2007-05-22 23:12:03 +0000;Fix ticket #501 which caused some array printing problems

==

numpy/core/arrayprint.py
==================
0a1fa4d;Travis Oliphant;2007-05-22 22:55:13 +0000;Added most of patch from #422.

==

numpy/core/ma.py
==================
4cfa770;Travis Oliphant;2007-05-22 22:36:10 +0000;Add a few more checks to make sure that numpy unicode scalars report correctly on narrow builds.  Fix a long-standing seg-fault that arose when calling u.imag on an object with numpy.unicode_ type.

==

numpy/core/src/arrayobject.c
numpy/core/src/scalartypes.inc.src
==================
4de81d3;Travis Oliphant;2007-05-22 09:18:38 +0000;Fix scalar inf comparison in allclose.

==

numpy/core/numeric.py
==================
1a1f2ea;Stefan van der Walt;2007-05-22 06:25:44 +0000;Fix array interface url.

==

numpy/core/include/numpy/ndarrayobject.h
==================
887f06b;Robert Kern;2007-05-22 00:54:42 +0000;Be robust when the shared distribution object exists does not have data_files set. This can happen when easy_install automatically builds dependencies.

==

numpy/distutils/misc_util.py
==================
3484afa;Robert Kern;2007-05-21 23:34:44 +0000;Use a more robust method for finding the directory of the setup.py file calling Configuration(). easy_install spoofs __name__, thus confusing the old method.

==

numpy/distutils/misc_util.py
==================
6ac33ee;cookedm;2007-05-21 13:15:45 +0000;[distutils-revamp] Merged revisions 3769-3794 via svnmerge from http://svn.scipy.org/svn/numpy/trunk/numpy/distutils
........
  r3775 | pearu | 2007-05-18 10:32:33 -0400 (Fri, 18 May 2007) | 1 line
  
  build_src: introduced --swig and other related options (as in std distutils build_ext command), use --f2py-opts instead of --f2pyflags, improved error messages.
........
  r3776 | pearu | 2007-05-18 12:41:44 -0400 (Fri, 18 May 2007) | 1 line
  
  Extension modules and libraries are built with suitable compilers/linkers. Improved failure handling.
........
  r3779 | pearu | 2007-05-18 13:33:15 -0400 (Fri, 18 May 2007) | 1 line
  
  Fixed warnings on language changes.
........
  r3780 | pearu | 2007-05-18 16:17:48 -0400 (Fri, 18 May 2007) | 1 line
  
  unify config_fc, build_clib, build_ext commands --fcompiler options so that --fcompiler can be specified only once in a command line
........
  r3781 | pearu | 2007-05-18 16:41:10 -0400 (Fri, 18 May 2007) | 1 line
  
  added config to --fcompiler option unification method. introduced config_cc for unifying --compiler options.
........
  r3782 | pearu | 2007-05-18 16:49:09 -0400 (Fri, 18 May 2007) | 1 line
  
  Added --help-fcompiler option to build_ext command.
........
  r3783 | pearu | 2007-05-18 17:00:17 -0400 (Fri, 18 May 2007) | 1 line
  
  show less messages in --help-fcompiler
........
  r3784 | pearu | 2007-05-18 17:25:23 -0400 (Fri, 18 May 2007) | 1 line
  
  Added --fcompiler,--help-fcompiler options to build command parallel to --compiler,--help-compiler options.
........
  r3785 | pearu | 2007-05-18 17:33:07 -0400 (Fri, 18 May 2007) | 1 line
  
  Add descriptions to config_fc and config_cc commands.
........
  r3786 | pearu | 2007-05-19 05:54:00 -0400 (Sat, 19 May 2007) | 1 line
  
  Fix for win32 platform.
........
  r3787 | pearu | 2007-05-19 06:23:16 -0400 (Sat, 19 May 2007) | 1 line
  
  Fix fcompiler/compiler unification warning.
........
  r3788 | pearu | 2007-05-19 11:20:48 -0400 (Sat, 19 May 2007) | 1 line
  
  Fix atlas version detection when using MSVC compiler
........
  r3789 | pearu | 2007-05-19 11:21:41 -0400 (Sat, 19 May 2007) | 1 line
  
  Fix typo.
........
  r3790 | pearu | 2007-05-19 11:24:20 -0400 (Sat, 19 May 2007) | 1 line
  
  More typo fixes.
........
  r3791 | pearu | 2007-05-19 13:01:39 -0400 (Sat, 19 May 2007) | 1 line
  
  win32: fix install when build has been carried out earlier.
........
  r3792 | pearu | 2007-05-19 15:44:42 -0400 (Sat, 19 May 2007) | 1 line
  
  Clean up and completed (hopefully) MSVC support.
........
  r3794 | cookedm | 2007-05-21 09:01:20 -0400 (Mon, 21 May 2007) | 1 line
  
  minor cleanups in numpy.distutils (style mostly)
........

==

ccompiler.py
command/build.py
command/build_clib.py
command/build_ext.py
command/build_src.py
command/config.py
command/config_compiler.py
core.py
fcompiler/__init__.py
misc_util.py
system_info.py
==================
aac0689;cookedm;2007-05-21 13:01:20 +0000;minor cleanups in numpy.distutils (style mostly)

==

numpy/distutils/command/build.py
numpy/distutils/command/build_clib.py
numpy/distutils/command/build_ext.py
numpy/distutils/command/config.py
numpy/distutils/command/config_compiler.py
==================
b93a94b;cookedm;2007-05-21 12:51:32 +0000;[distutils-rework] fix getting ar flags

==

fcompiler/__init__.py
==================
02df1be;Pearu Peterson;2007-05-19 19:44:42 +0000;Clean up and completed (hopefully) MSVC support.

==

numpy/distutils/ccompiler.py
numpy/distutils/command/build_ext.py
numpy/distutils/command/config.py
==================
0168bce;Pearu Peterson;2007-05-19 17:01:39 +0000;win32: fix install when build has been carried out earlier.

==

numpy/distutils/command/config.py
==================
2f70b97;Pearu Peterson;2007-05-19 15:24:20 +0000;More typo fixes.

==

numpy/distutils/command/config.py
==================
ba1beff;Pearu Peterson;2007-05-19 15:21:41 +0000;Fix typo.

==

numpy/distutils/command/config.py
==================
6ad1f67;Pearu Peterson;2007-05-19 15:20:48 +0000;Fix atlas version detection when using MSVC compiler

==

numpy/distutils/command/config.py
numpy/distutils/system_info.py
==================
5c2ffbb;Pearu Peterson;2007-05-19 10:23:16 +0000;Fix fcompiler/compiler unification warning.

==

numpy/distutils/command/config_compiler.py
==================
637069d;Pearu Peterson;2007-05-19 09:54:00 +0000;Fix for win32 platform.

==

numpy/distutils/command/build_ext.py
==================
8f503fb;Pearu Peterson;2007-05-18 21:33:07 +0000;Add descriptions to config_fc and config_cc commands.

==

numpy/distutils/command/config_compiler.py
==================
2fe22c4;Pearu Peterson;2007-05-18 21:25:23 +0000;Added --fcompiler,--help-fcompiler options to build command parallel to --compiler,--help-compiler options.

==

numpy/distutils/command/build.py
numpy/distutils/command/config_compiler.py
numpy/distutils/fcompiler/__init__.py
==================
24b8ecc;Pearu Peterson;2007-05-18 21:00:17 +0000;show less messages in --help-fcompiler

==

numpy/distutils/command/config_compiler.py
==================
5321be5;Pearu Peterson;2007-05-18 20:49:09 +0000;Added --help-fcompiler option to build_ext command.

==

numpy/distutils/command/build_ext.py
==================
63c6325;Pearu Peterson;2007-05-18 20:41:10 +0000;added config to --fcompiler option unification method. introduced config_cc for unifying --compiler options.

==

numpy/distutils/command/build.py
numpy/distutils/command/config.py
numpy/distutils/command/config_compiler.py
numpy/distutils/core.py
==================
6f82e1e;Pearu Peterson;2007-05-18 20:17:48 +0000;unify config_fc, build_clib, build_ext commands --fcompiler options so that --fcompiler can be specified only once in a command line

==

numpy/distutils/command/build.py
numpy/distutils/command/build_clib.py
numpy/distutils/command/build_ext.py
numpy/distutils/command/config_compiler.py
==================
571f167;Pearu Peterson;2007-05-18 17:33:15 +0000;Fixed warnings on language changes.

==

numpy/distutils/command/build_ext.py
numpy/distutils/misc_util.py
==================
a95189e;Pearu Peterson;2007-05-18 16:58:30 +0000;Minor for Python 2.3 support.

==

numpy/f2py/lib/main.py
==================
0683bce;Pearu Peterson;2007-05-18 16:44:43 +0000;g3 f2py: impl. compiling Fortran codes online (function numpy.f2py.lib.compile), clean up testing.

==

numpy/f2py/lib/main.py
numpy/f2py/lib/nary.py
numpy/f2py/lib/test_derived_scalar.py
numpy/f2py/lib/test_module_module.py
numpy/f2py/lib/test_module_scalar.py
numpy/f2py/lib/test_scalar_function_in.py
numpy/f2py/lib/test_scalar_in_out.py
numpy/f2py/lib/tests/test_derived_scalar.py
numpy/f2py/lib/tests/test_module_module.py
numpy/f2py/lib/tests/test_module_scalar.py
numpy/f2py/lib/tests/test_scalar_function_in.py
numpy/f2py/lib/tests/test_scalar_in_out.py
==================
b3caec6;Pearu Peterson;2007-05-18 16:41:44 +0000;Extension modules and libraries are built with suitable compilers/linkers. Improved failure handling.

==

numpy/distutils/command/build_clib.py
numpy/distutils/command/build_ext.py
==================
5fcecff;Pearu Peterson;2007-05-18 14:32:33 +0000;build_src: introduced --swig and other related options (as in std distutils build_ext command), use --f2py-opts instead of --f2pyflags, improved error messages.

==

numpy/distutils/command/build_src.py
==================
698fe10;cookedm;2007-05-18 12:56:45 +0000;fix typo: iteratable -> iterator

==

numpy/core/src/multiarraymodule.c
==================
4eb3bf5;Travis Oliphant;2007-05-17 11:55:11 +0000;Fix ticekt #511 and start to handle allclose problems.

==

numpy/core/numeric.py
numpy/core/src/arrayobject.c
==================
5089495;Travis Oliphant;2007-05-17 10:37:08 +0000;Fix some bugs with isposinf and isneginf as well as with how allclose dealt with infinities.  See ticket #519

==

numpy/core/numeric.py
numpy/lib/ufunclike.py
==================
5b4e40b;Travis Oliphant;2007-05-17 10:13:39 +0000;Propagate changes made to umathmodule.c to fix the problem with division and remainder not being consistent for negative numbers.

==

numpy/core/src/scalarmathmodule.c.src
==================
fadee7a;Travis Oliphant;2007-05-17 07:23:17 +0000;Perhaps fix the problem with multiarray_module_loaded.

==

numpy/core/src/multiarraymodule.c
==================
4c657ed;cookedm;2007-05-16 15:27:12 +0000;Merged revisions 3732-3768 via svnmerge from http://svn.scipy.org/svn/numpy/trunk/numpy/distutils
........
  r3740 | cookedm | 2007-05-10 13:26:20 -0400 (Thu, 10 May 2007) | 2 lines
  
  Use a try/finally instead of try/except Exception for cleanup in numpy/distutils/core.py
........
  r3745 | pearu | 2007-05-11 08:50:42 -0400 (Fri, 11 May 2007) | 1 line
  
  Clean up setup() calls.
........
  r3746 | pearu | 2007-05-11 08:58:31 -0400 (Fri, 11 May 2007) | 1 line
  
  Using meaningful NotFoundError exception for blas_opt and lapack_opt resources.
........
  r3747 | pearu | 2007-05-11 09:37:31 -0400 (Fri, 11 May 2007) | 1 line
  
  Raise exception when pyrex is required.
........
  r3759 | cookedm | 2007-05-14 05:25:11 -0400 (Mon, 14 May 2007) | 2 lines
  
  With gfortran, compile modern Xeon's with EM64T with -march=nocona (#515)
........
  r3763 | pearu | 2007-05-14 08:17:49 -0400 (Mon, 14 May 2007) | 1 line
  
  Workaround Python distutils bug sf 1718574.
........
  r3764 | cookedm | 2007-05-14 20:35:49 -0400 (Mon, 14 May 2007) | 2 lines
  
  #520: don't add arch-specific flags when linking with Intel Fortran
........

==

command/build_clib.py
command/build_src.py
fcompiler/gnu.py
fcompiler/intel.py
misc_util.py
setup.py
system_info.py
tests/f2py_ext/setup.py
tests/f2py_f90_ext/setup.py
tests/gen_ext/setup.py
tests/pyrex_ext/setup.py
tests/setup.py
tests/swig_ext/setup.py
==================
07b1228;Travis Oliphant;2007-05-16 07:10:37 +0000;Fixed a place where unicode itemsize was being counted twice.  This led to array([u'abc'],'U') returning the wrong itemsize.

==

numpy/core/src/arrayobject.c
==================
f79ec5f;Travis Oliphant;2007-05-15 23:23:57 +0000;Fix problem with records with object elements and add pretty-printing to record objects.  Remove the global _multiarray_module_loaded.

==

numpy/core/records.py
numpy/core/src/multiarraymodule.c
==================
3f08181;cookedm;2007-05-15 12:33:27 +0000;Add stacklevel=2 to DeprecationWarning for ScipyTestCase

==

numpy/testing/numpytest.py
==================
a10da32;cookedm;2007-05-15 11:19:28 +0000;#513: fix up include of fenv.c in numarray for cygwin

==

numpy/core/include/numpy/fenv/fenv.c
numpy/core/include/numpy/fenv/fenv.h
numpy/numarray/_capi.c
numpy/numarray/setup.py
==================
f999341;cookedm;2007-05-15 00:35:49 +0000;#520: don't add arch-specific flags when linking with Intel Fortran

==

numpy/distutils/fcompiler/intel.py
==================
8b8f690;Pearu Peterson;2007-05-14 12:17:49 +0000;Workaround Python distutils bug sf 1718574.

==

numpy/distutils/command/build_clib.py
==================
6a0074d;Pearu Peterson;2007-05-14 10:35:03 +0000;Fix f2py command line doc.

==

numpy/f2py/f2py2e.py
numpy/f2py/lib/parser/doc.txt
==================
72f78a7;Pearu Peterson;2007-05-14 10:24:35 +0000;Fix doc rest formatting - 2.

==

numpy/f2py/lib/parser/doc.txt
==================
0176d33;Pearu Peterson;2007-05-14 10:20:41 +0000;Fix doc rest formatting.

==

numpy/f2py/lib/parser/doc.txt
==================
1135754;cookedm;2007-05-14 09:25:11 +0000;With gfortran, compile modern Xeon's with EM64T with -march=nocona (#515)

==

numpy/distutils/fcompiler/gnu.py
==================
7833a6d;Charles Harris;2007-05-14 05:55:19 +0000;Restructure documentation of sort, argsort, searchsorted, var, mean, std, and diagonal.

==

numpy/core/fromnumeric.py
==================
3584753;Charles Harris;2007-05-13 23:22:17 +0000;Add patch from dhuard to histogramdd. Fixes ticket #509.
Restructure restructured comments; avoid consolidated lists, they are too ugly
to contemplate and move around where they aren't wanted. They can be fixed later
if epydoc fixes things up.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
6ec4281;Charles Harris;2007-05-13 20:15:09 +0000;Fix ticket #506 by applying the patch from cdavid.

==

numpy/fft/fftpack_litemodule.c
==================
008ff0e;Stefan van der Walt;2007-05-13 17:36:19 +0000;Add iinfo based on a patch by Albert Strasheim (ticket #250).

==

numpy/lib/getlimits.py
numpy/lib/tests/test_getlimits.py
==================
a34f98b;Stefan van der Walt;2007-05-13 08:19:11 +0000;Add regression tests for tickets 469, 503, 514 and 516.

==

numpy/core/tests/test_regression.py
==================
a5a774b;Charles Harris;2007-05-13 06:23:08 +0000;Add documentation for eigvals, eigvalsh, eig, and eigh.

==

numpy/linalg/linalg.py
==================
bae04d1;Charles Harris;2007-05-13 00:35:09 +0000;Add documentation for diagonal. Reformat documentation of sort, argsort, lexsort, and searchsorted.

==

numpy/add_newdocs.py
numpy/core/defmatrix.py
numpy/core/fromnumeric.py
==================
a721919;Charles Harris;2007-05-12 19:58:43 +0000;Add/edit documentation for mean, std, var.

==

numpy/add_newdocs.py
numpy/core/defmatrix.py
numpy/core/fromnumeric.py
==================
9fbf719;Travis Oliphant;2007-05-11 23:13:27 +0000;Special check for common error in arange.

==

numpy/core/src/multiarraymodule.c
==================
56aa233;Travis Oliphant;2007-05-11 22:35:26 +0000;Fix nan functions to allow sub-class.

==

numpy/lib/function_base.py
==================
d8d0b7a;Pearu Peterson;2007-05-11 13:37:31 +0000;Raise exception when pyrex is required.

==

numpy/distutils/command/build_src.py
==================
2e72fd9;Pearu Peterson;2007-05-11 12:58:31 +0000;Using meaningful NotFoundError exception for blas_opt and lapack_opt resources.

==

numpy/distutils/system_info.py
==================
cc7d893;Pearu Peterson;2007-05-11 12:50:42 +0000;Clean up setup() calls.

==

numpy/core/setup.py
numpy/distutils/misc_util.py
numpy/distutils/setup.py
numpy/distutils/tests/f2py_ext/setup.py
numpy/distutils/tests/f2py_f90_ext/setup.py
numpy/distutils/tests/gen_ext/setup.py
numpy/distutils/tests/pyrex_ext/setup.py
numpy/distutils/tests/setup.py
numpy/distutils/tests/swig_ext/setup.py
numpy/f2py/tests/array_from_pyobj/setup.py
numpy/fft/setup.py
numpy/lib/setup.py
numpy/linalg/setup.py
numpy/numarray/setup.py
numpy/oldnumeric/setup.py
numpy/random/setup.py
numpy/testing/setup.py
==================
3757ca1;Pearu Peterson;2007-05-11 08:20:41 +0000;Improved error message for missing Python.h.

==

numpy/core/setup.py
==================
6d8010c;Travis Oliphant;2007-05-10 22:42:48 +0000;Fix ticket #514 (and probably others) due to inappropriate fixing of largest string type on common type conversion.

==

numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
==================
ae13dc3;Travis Oliphant;2007-05-10 21:49:22 +0000;Remove wasteful check.  Fix problem with PyArray_Transpose for large arrays.

==

numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
==================
4474ba3;cookedm;2007-05-10 18:14:29 +0000;Improvement of separator handling for fromstring and fromfile.  * fromstring and fromfile should behave identically on text.  * added more test cases for fromstring  * the dtype gets passed to the C code doing the type-specific string    conversions. We don't use it, but someone making their own dtype could.  * separator handling for fromfile is moved out of the type-specific conversion.    I've left the argument in for backwards compatibility; when the API version    is next bumped up, it can be removed.  * separator handling in fromfile is now safe (no fscanf(fp, sep) anymore)

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
numpy/core/tests/test_multiarray.py
==================
9dacbb9;cookedm;2007-05-10 17:26:20 +0000;Use a try/finally instead of try/except Exception for cleanup in numpy/distutils/core.py

==

numpy/distutils/core.py
==================
2ae73db;cookedm;2007-05-10 17:24:44 +0000;Better warning when using ScipyTest

==

numpy/testing/numpytest.py
==================
35a03ae;cookedm;2007-05-10 17:23:52 +0000;Add docstrings to numpy/core/code_generators/genapi.py

==

numpy/core/code_generators/genapi.py
==================
de17a87;Travis Oliphant;2007-05-09 16:27:06 +0000;Change recarray attribute getting to return a view using the class instead of pure recarray when fields are present.

==

numpy/core/records.py
==================
140887c;Robert Kern;2007-05-04 21:17:20 +0000;assert_approx_equal used significant digit more than requested.

==

numpy/testing/utils.py
==================
5b270e2;Travis Oliphant;2007-05-04 04:08:15 +0000;Fix compatibility layer definition of std

==

numpy/oldnumeric/mlab.py
==================
7a837ba;Jarrod Millman;2007-05-01 05:59:49 +0000;adding toc to distutils docs

==

numpy/doc/DISTUTILS.txt
==================
9795a2c;cookedm;2007-04-30 22:11:03 +0000;[distutils-revamp branch] Merged revisions 3485-3731 via svnmerge from http://svn.scipy.org/svn/numpy/trunk/numpy/distutils
........
  r3501 | stefan | 2007-01-08 16:56:54 -0500 (Mon, 08 Jan 2007) | 2 lines
  
  Whitespace cleanup.
........
  r3520 | timl | 2007-01-25 23:16:37 -0500 (Thu, 25 Jan 2007) | 1 line
  
  remove some remaining references to scipy. fixes #428
........
  r3521 | rkern | 2007-01-26 19:35:17 -0500 (Fri, 26 Jan 2007) | 1 line
  
  Generalize the setting of MACOSX_DEPLOYMENT_TARGET.
........
  r3523 | rkern | 2007-01-30 14:18:06 -0500 (Tue, 30 Jan 2007) | 1 line
  
  Revert semi-intelligent handling of MACOSX_DEPLOYMENT_TARGET to work around broken MacPorts Python.
........
  r3538 | edschofield | 2007-02-04 19:24:42 -0500 (Sun, 04 Feb 2007) | 2 lines
  
  Fixed detection of Core2 CPUs (scipy ticket #349)
........
  r3549 | stefan | 2007-02-18 16:02:46 -0500 (Sun, 18 Feb 2007) | 2 lines
  
  Fix docstrings for loading with DocFileSuite.
........
  r3563 | pearu | 2007-02-28 08:12:06 -0500 (Wed, 28 Feb 2007) | 1 line
  
  Added support for xml Fortran V10 compiler (needs testing).
........
  r3564 | pearu | 2007-02-28 13:32:18 -0500 (Wed, 28 Feb 2007) | 1 line
  
  Fixing xlf compiler for AIX with 9.x and 10.x version support (needs testing and checking that xlf 8.x compilers are still detected)
........
  r3568 | pearu | 2007-03-02 11:49:00 -0500 (Fri, 02 Mar 2007) | 1 line
  
  Applying info from Hans-Joachim Ehlers to improve xlf compiler support (on AIX using lslpp to determine compiler version).
........
  r3569 | timl | 2007-03-04 05:47:08 -0500 (Sun, 04 Mar 2007) | 1 line
  
  add a delete flag to make_svn_version_py to allow the __svn_version.py to not be deleted
........
  r3598 | rkern | 2007-03-25 19:12:00 -0400 (Sun, 25 Mar 2007) | 1 line
  
  Make the gfortran version matching regex accept gfortran 4.3 on OS X
........
  r3615 | cookedm | 2007-03-29 17:37:58 -0400 (Thu, 29 Mar 2007) | 1 line
  
  cpuinfo: Nocona is a PentiumIV, not 686. Fixes #438
........
  r3636 | cookedm | 2007-04-01 16:32:07 -0400 (Sun, 01 Apr 2007) | 2 lines
  
  Make numpy.get_include() and numpy.get_numarray_include() not pull in numpy.distutils.
........
  r3658 | cookedm | 2007-04-04 08:56:47 -0400 (Wed, 04 Apr 2007) | 2 lines
  
  Fix for making Fortran extensions on AIX.
........
  r3660 | rkern | 2007-04-04 13:25:29 -0400 (Wed, 04 Apr 2007) | 1 line
  
  Fix #491
........
  r3664 | cookedm | 2007-04-04 14:10:30 -0400 (Wed, 04 Apr 2007) | 2 lines
  
  Really fix linking with Fortran on AIX
........
  r3715 | rkern | 2007-04-15 00:38:59 -0400 (Sun, 15 Apr 2007) | 1 line
  
  Fix command dependencies for build_ext. This should fix a number of problems where the full 'build_src build_clib build_ext' chain of commands needed to be specified.
........
  r3716 | rkern | 2007-04-15 00:46:07 -0400 (Sun, 15 Apr 2007) | 1 line
  
  Add another place to check for configuration, namely ~/.numpy-site.cfg, to help automatic installation where one can't edit the source checkout. I've added the alternate name to make it hidden because that's just considerate.
........
  r3723 | cookedm | 2007-04-22 16:57:58 -0400 (Sun, 22 Apr 2007) | 9 lines
  
  Better version handling for gnu and intel Fortran compilers
  
  - gnu compilers check if the version is >= 4, in which case it's gfortran
  - add a test file for gnu compiler check
  - simplify version matching on intel compilers to be more flexible
  - add FCompiler.find_executables so that subclasses can find executables
    at .customize() time, instead of when the class is created.
........
  r3724 | cookedm | 2007-04-22 17:12:57 -0400 (Sun, 22 Apr 2007) | 14 lines
  
  Some distutils work:
  
  - Add better support for C++ in numpy.distutils. Instead of munging the
    C compiler command, build_clib and build_ext call the new
    Compiler.cxx_compiler() method to get a version of the compiler suitable for
    C++ (this also takes care of the special needs of AIX).
  - If config_fc is specified in the Extension definition, merge that info
    instead of replacing it (otherwise, the name of the Fortran compiler is
    overwritten). This is done at the key level (ex., compiler options are
    replaced instead of appended).
  - clean up compiler.py a bit
  - clean up linking in build_ext
........
  r3726 | oliphant | 2007-04-24 15:15:33 -0400 (Tue, 24 Apr 2007) | 1 line
  
  Add patch to system_info for building with MKL on Win32 #504
........
  r3731 | rkern | 2007-04-30 12:29:51 -0400 (Mon, 30 Apr 2007) | 1 line
  
  Fix typo.
........

==
==================
9bcf5d8;Robert Kern;2007-04-30 16:29:51 +0000;Fix typo.

==

numpy/distutils/system_info.py
==================
5eefd7a;Stefan van der Walt;2007-04-30 08:53:00 +0000;Add regression test.  Fix order of arguments in test_multiarray.

==

numpy/core/tests/test_multiarray.py
numpy/core/tests/test_regression.py
==================
4e442de;Travis Oliphant;2007-04-27 20:37:55 +0000;Fix silly initialization of input variable.

==

numpy/core/src/multiarraymodule.c
==================
26a9e81;cookedm;2007-04-25 09:12:45 +0000;Add test case for integer division

==

numpy/core/tests/test_umath.py
==================
bfa4be3;Travis Oliphant;2007-04-24 21:56:06 +0000;Restore invariant of (x == (x/y)*y + (x%y)) by making integer division with mixed-sign operands match Python.

==

numpy/core/src/umathmodule.c.src
==================
feb86b4;Travis Oliphant;2007-04-24 19:15:33 +0000;Add patch to system_info for building with MKL on Win32 #504

==

numpy/distutils/system_info.py
==================
6a3e80e;cookedm;2007-04-22 21:18:20 +0000;NumpyTest.test() takes an extra argument, all, which, if true, makes it act like NumpyTest.testall(). This comes from some refactoring to remove duplicate code in .test and .testall().

==

numpy/__init__.py
numpy/testing/numpytest.py
==================
03b278b;cookedm;2007-04-22 21:12:57 +0000;Some distutils work:
- Add better support for C++ in numpy.distutils. Instead of munging the
  C compiler command, build_clib and build_ext call the new
  Compiler.cxx_compiler() method to get a version of the compiler suitable for
  C++ (this also takes care of the special needs of AIX).
- If config_fc is specified in the Extension definition, merge that info
  instead of replacing it (otherwise, the name of the Fortran compiler is
  overwritten). This is done at the key level (ex., compiler options are
  replaced instead of appended).
- clean up compiler.py a bit
- clean up linking in build_ext


==

numpy/distutils/ccompiler.py
numpy/distutils/command/build_clib.py
numpy/distutils/command/build_ext.py
==================
06cc693;cookedm;2007-04-22 20:57:58 +0000;Better version handling for gnu and intel Fortran compilers
- gnu compilers check if the version is >= 4, in which case it's gfortran
- add a test file for gnu compiler check
- simplify version matching on intel compilers to be more flexible
- add FCompiler.find_executables so that subclasses can find executables
  at .customize() time, instead of when the class is created.


==

numpy/distutils/fcompiler/__init__.py
numpy/distutils/fcompiler/gnu.py
numpy/distutils/fcompiler/intel.py
numpy/distutils/fcompiler/vast.py
numpy/distutils/tests/test_fcompiler_gnu.py
==================
fcb7fd2;Travis Oliphant;2007-04-22 04:29:42 +0000;Add loadtxt and savetxt adapted from matplotlib.

==

COMPATIBILITY
numpy/core/numeric.py
==================
41861b5;Travis Oliphant;2007-04-20 20:27:01 +0000;Fix byte-swapping error on conversion to Object array from big-endian array (byte-swapping was happening twice in that case).  This fixes #503.

==

numpy/core/src/arrayobject.c
==================
e52ea92;Stefan van der Walt;2007-04-20 12:12:43 +0000;Fix pointer size for F90 allocatable arrays on 64-bit platform. Closes ticket #147.

==

numpy/f2py/f90mod_rules.py
==================
d8f883a;Pearu Peterson;2007-04-17 10:34:54 +0000;f2py: support for assumed shape arrays of fortran callback functions (will not work with python callback functions, for instance).

==

numpy/f2py/capi_maps.py
==================
461565d;cookedm;2007-04-17 04:54:49 +0000;Sort module names when running tests

==

numpy/testing/numpytest.py
==================
f13e905;Robert Kern;2007-04-15 04:46:07 +0000;Add another place to check for configuration, namely ~/.numpy-site.cfg, to help automatic installation where one can't edit the source checkout. I've added the alternate name to make it hidden because that's just considerate.

==

numpy/distutils/system_info.py
site.cfg.example
==================
e7172c9;Robert Kern;2007-04-15 04:38:59 +0000;Fix command dependencies for build_ext. This should fix a number of problems where the full 'build_src build_clib build_ext' chain of commands needed to be specified.

==

numpy/distutils/command/build_ext.py
==================
0760252;wfspotz@sandia.gov;2007-04-13 20:44:24 +0000;Updated date, example function documentation and python links

==

numpy/doc/swig/numpy_swig.html
numpy/doc/swig/numpy_swig.pdf
numpy/doc/swig/numpy_swig.txt
==================
ee95f34;wfspotz@sandia.gov;2007-04-13 20:38:36 +0000;Reformatted numpy.i routines descriptions

==

numpy/doc/swig/numpy_swig.html
numpy/doc/swig/numpy_swig.pdf
numpy/doc/swig/numpy_swig.txt
==================
cfb606b;wfspotz@sandia.gov;2007-04-13 17:04:02 +0000;Fixed typo in documentation

==

numpy/doc/swig/numpy.i
numpy/doc/swig/numpy_swig.html
numpy/doc/swig/numpy_swig.pdf
numpy/doc/swig/numpy_swig.txt
==================
e574efa;Travis Oliphant;2007-04-13 06:55:55 +0000;A few more changes to pep_buffer.txt

==

numpy/doc/pep_buffer.txt
==================
3325b1b;Tim Leslie;2007-04-13 05:49:41 +0000;remove unneeded semi-colon, add missing import, whitespace cleanups

==

numpy/core/records.py
==================
a1ccad7;Travis Oliphant;2007-04-12 08:42:21 +0000;Add check for fix to allowing types to create arrays.

==

numpy/core/tests/test_scalarmath.py
==================
f78cdaf;Travis Oliphant;2007-04-12 08:38:23 +0000;Fix scalar creation function so it can take sequences.

==

numpy/core/src/scalartypes.inc.src
==================
7cc1a81;Travis Oliphant;2007-04-12 08:37:38 +0000;Fixes to pep_buffer.txt

==

numpy/doc/pep_buffer.txt
==================
1ae9e6b;Travis Oliphant;2007-04-12 02:02:44 +0000;Add example to buffer interface.

==

numpy/doc/pep_buffer.txt
==================
ff81cac;Charles Harris;2007-04-11 17:41:19 +0000;Cleanup whitespace.

==

numpy/core/blasdot/_dotblas.c
numpy/core/blasdot/cblas.h
==================
d594e08;wfspotz@sandia.gov;2007-04-11 16:50:38 +0000;Provided more sophisticated typecheck typemap for IN_ARRAYs

==

numpy/doc/swig/numpy.i
==================
9e0cfaf;Eric Jones;2007-04-11 07:32:05 +0000;long lost author was... eric.

==

numpy/doc/swig/numpy.i
==================
1453e75;Eric Jones;2007-04-11 02:09:59 +0000;added simple test for weighted average

==

numpy/lib/tests/test_function_base.py
==================
98ab993;Eric Jones;2007-04-11 02:05:06 +0000;fixed a typecode Float->float issue in average.
This is not pretty code it seems overly complicated, and it has an "eval"
statement in it where it builds a string and evaluates it.  I can't imagine
this is the best approach to this -- but I also am not going to spend the
time to examine it right now.

==

numpy/lib/function_base.py
==================
e50171f;wfspotz@sandia.gov;2007-04-10 15:44:17 +0000;Changed remaining ->nd struct accesses to use array_numdims() macro

==

numpy/doc/swig/numpy.i
==================
f2101ee;wfspotz@sandia.gov;2007-04-10 15:21:28 +0000;Added 'array_data()' macros and used it in the typemaps; added new macro to the documentation

==

numpy/doc/swig/numpy.i
numpy/doc/swig/numpy_swig.html
numpy/doc/swig/numpy_swig.pdf
numpy/doc/swig/numpy_swig.txt
==================
d62e119;Eric Jones;2007-04-10 01:51:17 +0000;test commit

==

TEST_COMMIT
==================
5e64e48;Travis Oliphant;2007-04-10 00:55:16 +0000;More fixes to buffer.

==

numpy/doc/pep_buffer.txt
==================
e48d396;Travis Oliphant;2007-04-09 23:17:50 +0000;Cleaned-up

==

numpy/doc/pep_buffer.txt
==================
c5fda58;Travis Oliphant;2007-04-09 22:53:12 +0000;Buffer PEP has a number.

==

numpy/doc/pep_buffer.txt
==================
0bbd945;wfspotz@sandia.gov;2007-04-08 22:37:21 +0000;Added %typecheck directive for IN_ARRAY typemaps

==

numpy/doc/swig/numpy.i
==================
5f9a7be;Charles Harris;2007-04-08 21:28:42 +0000;Parenthesize some defined expressions just to be clean.

==

numpy/core/include/numpy/ndarrayobject.h
==================
77aad40;wfspotz@sandia.gov;2007-04-08 02:29:39 +0000;Standardized PyArrayObject naming

==

numpy/doc/swig/numpy.i
==================
a083ce5;Charles Harris;2007-04-07 20:19:17 +0000;Make sorting benchmarks all sort integers

==

benchmarks/sorting.py
==================
ada65fd;wfspotz@sandia.gov;2007-04-06 21:24:54 +0000;Added testing documentation

==

numpy/doc/swig/Makefile
numpy/doc/swig/numpy_swig.pdf
numpy/doc/swig/testing.html
numpy/doc/swig/testing.pdf
numpy/doc/swig/testing.txt
==================
eb366f6;Travis Oliphant;2007-04-06 20:19:47 +0000;Change defined(linux) to defined(__GLIBC__)

==

numpy/core/include/numpy/ufuncobject.h
numpy/numarray/_capi.c
==================
9d14fc9;wfspotz@sandia.gov;2007-04-06 19:45:03 +0000;Added 'bad list' tests to IN_ARRAY typemap tests

==

numpy/doc/swig/testMatrix.py
numpy/doc/swig/testTensor.py
numpy/doc/swig/testVector.py
==================
4b9f5d9;wfspotz@sandia.gov;2007-04-06 19:13:15 +0000;Added more testing of 3D typemaps, specifically error checking

==

numpy/doc/swig/testTensor.py
==================
3322fd1;wfspotz@sandia.gov;2007-04-06 18:00:17 +0000;Added more testing of 2D typemaps, specifically error checkings

==

numpy/doc/swig/testMatrix.py
==================
836762a;wfspotz@sandia.gov;2007-04-06 17:33:48 +0000;Added more testing of 1D typemaps, specifically error checking; found and fixed bug where INPLACE_ARRAY1 typemaps didn't check number of dimensions

==

numpy/doc/swig/numpy.i
numpy/doc/swig/testVector.py
==================
1ea3f17;Travis Oliphant;2007-04-06 00:11:02 +0000;Fix maximum_sctype for integer data-types.

==

numpy/core/numerictypes.py
==================
c6992ef;wfspotz@sandia.gov;2007-04-05 22:20:15 +0000;Removed test1D.py, test2D.py and test3D.py in favor of testVector.py, testMatrix.py and testTensor.py because these new tests use inheritance to duplicate same tests for different data types

==

numpy/doc/swig/Makefile
numpy/doc/swig/README
numpy/doc/swig/test1D.py
numpy/doc/swig/test2D.py
numpy/doc/swig/test3D.py
numpy/doc/swig/testMatrix.py
numpy/doc/swig/testTensor.py
numpy/doc/swig/testVector.py
==================
8517180;cookedm;2007-04-05 19:24:10 +0000;Add note about running tests to the README.txt

==

README.txt
==================
9e17a29;Travis Oliphant;2007-04-05 16:05:45 +0000;Include fenv.h the second time for CYGWIN.  Change a few defines.

==

numpy/numarray/_capi.c
==================
cca1f49;wfspotz@sandia.gov;2007-04-04 22:58:23 +0000;Updated documentation for 3D typemaps

==

numpy/doc/swig/README
numpy/doc/swig/numpy_swig.html
numpy/doc/swig/numpy_swig.pdf
numpy/doc/swig/numpy_swig.txt
==================
7fc01dd;wfspotz@sandia.gov;2007-04-04 22:43:43 +0000;Added 3D tests to Makefile

==

numpy/doc/swig/Makefile
==================
c070fab;wfspotz@sandia.gov;2007-04-04 22:41:56 +0000;Added tests for 3D typemaps

==

numpy/doc/swig/Makefile
numpy/doc/swig/Tensor.cxx
numpy/doc/swig/Tensor.h
numpy/doc/swig/Tensor.i
numpy/doc/swig/setup.py
numpy/doc/swig/test3D.py
==================
13b70a2;wfspotz@sandia.gov;2007-04-04 20:07:06 +0000;Updated documentation in README file

==

numpy/doc/swig/README
==================
081af11;wfspotz@sandia.gov;2007-04-04 19:57:37 +0000;Split Series header/code/interface tests into Vector and Matrix components

==

numpy/doc/swig/Makefile
numpy/doc/swig/Matrix.cxx
numpy/doc/swig/Matrix.h
numpy/doc/swig/Matrix.i
numpy/doc/swig/Series.i
numpy/doc/swig/Vector.cxx
numpy/doc/swig/Vector.h
numpy/doc/swig/Vector.i
numpy/doc/swig/series.cxx
numpy/doc/swig/series.h
numpy/doc/swig/setup.py
numpy/doc/swig/test1D.py
numpy/doc/swig/test2D.py
==================
07c0893;cookedm;2007-04-04 18:10:30 +0000;Really fix linking with Fortran on AIX

==

numpy/distutils/fcompiler/__init__.py
numpy/distutils/fcompiler/ibm.py
==================
2207b5a;wfspotz@sandia.gov;2007-04-04 17:47:57 +0000;Completed update of README file

==

numpy/doc/swig/README
==================
876a44b;wfspotz@sandia.gov;2007-04-04 17:44:03 +0000;Updated the README file and added testing to the Makefile

==

numpy/doc/swig/Makefile
numpy/doc/swig/README
==================
a9aab74;wfspotz@sandia.gov;2007-04-04 17:35:36 +0000;Added first cut at (untested) 3D typemaps; split testSeries.py into test1D.py and test2D.py

==

numpy/doc/swig/numpy.i
numpy/doc/swig/test1D.py
numpy/doc/swig/test2D.py
numpy/doc/swig/testSeries.py
==================
ad22a17;Robert Kern;2007-04-04 17:25:29 +0000;Fix #491

==

numpy/distutils/misc_util.py
numpy/f2py/__version__.py
numpy/version.py
==================
498186f;wfspotz@sandia.gov;2007-04-04 16:11:49 +0000;Updated documentation to include a Summary, as well as a sample of the code generated by swig

==

numpy/doc/swig/numpy_swig.html
numpy/doc/swig/numpy_swig.pdf
numpy/doc/swig/numpy_swig.txt
==================
d31dac0;cookedm;2007-04-04 12:56:47 +0000;Fix for making Fortran extensions on AIX.

==

numpy/distutils/fcompiler/ibm.py
==================
145babe;Travis Oliphant;2007-04-04 03:14:32 +0000;Avoid some compiler complaints about non-constants in initialization.

==

numpy/core/src/ufuncobject.c
==================
03d6cb1;Travis Oliphant;2007-04-03 23:13:30 +0000;Add integer format codes to sctypeNA.  Fixes ticket #399

==

numpy/core/numerictypes.py
==================
5b0355a;Travis Oliphant;2007-04-03 22:33:54 +0000;Re-order struct module changes.

==

numpy/doc/pep_buffer.txt
==================
ecfdc74;Travis Oliphant;2007-04-03 22:05:50 +0000;Place PEP on trunk.

==

numpy/doc/pep_buffer.txt
==================
bcd1eaf;wfspotz@sandia.gov;2007-04-03 21:57:43 +0000;Updated documentation to reflect changes to internal macros and routines, the new error-checking in the INPLACE typemaps, and an updated Acknowledgement section

==

numpy/doc/swig/numpy.i
numpy/doc/swig/numpy_swig.html
numpy/doc/swig/numpy_swig.pdf
numpy/doc/swig/numpy_swig.txt
==================
6e372ad;wfspotz@sandia.gov;2007-04-03 21:31:01 +0000;Modified INPLACE typemaps to check for native byte order, and for 2D case, require that the python argument be 2D as well

==

numpy/doc/swig/numpy.i
==================
9821ee7;Travis Oliphant;2007-04-02 21:39:29 +0000;Update version of this trunk.

==

numpy/version.py
==================
468629d;Travis Oliphant;2007-04-02 21:24:52 +0000;Add a few more functions to arrayfns compatibility file and fix typo.

==

numpy/core/tests/test_multiarray.py
numpy/oldnumeric/arrayfns.py
==================
934e907;Travis Oliphant;2007-04-02 20:26:47 +0000;Add the arrayfns compatibility library -- not finished.

==

numpy/oldnumeric/arrayfns.py
==================
1cd5403;Travis Oliphant;2007-04-02 20:21:57 +0000;Add interp to numpy.lib adapted from arrayfns.  Add an unfinished arrayfns compatibility module to old_numeric.

==

numpy/add_newdocs.py
numpy/core/src/arraymethods.c
numpy/lib/function_base.py
numpy/lib/src/_compiled_base.c
==================
a1f65e1;Travis Oliphant;2007-04-02 18:25:50 +0000;Add patch in Ticket #189 for histogramdd.  Fixes bug reported by Ben Granett

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_twodim_base.py
numpy/lib/twodim_base.py
==================
471ee74;cookedm;2007-04-02 13:27:42 +0000;Fix #484: random state not portable between 32-bit and 64-bit architectures The random state now uses a uint32 array on both architectures. It should also handle old pickles.

==

numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
==================
f03bfae;cookedm;2007-04-02 12:08:34 +0000;Fixes #488. In rk_interval, use rk_random if the interval size is less than 2**32. For 64-bit machines, this means results will agree with 32-bit machines, and will be faster for these interval sizes (one less rk_random evaluation).

==

numpy/random/mtrand/randomkit.c
==================
f11fdae;cookedm;2007-04-02 12:06:06 +0000;binary_repr handles negative numbers now, and takes an optional width argument. base_repr raise ValueError if the number is negative or base > 36

==

numpy/core/numeric.py
numpy/core/tests/test_numeric.py
==================
5c8f992;Pearu Peterson;2007-04-02 06:56:49 +0000;Applying patch from ticket 437.

==

numpy/f2py/cb_rules.py
==================
45b5a6a;Travis Oliphant;2007-04-01 23:22:15 +0000;Do not use floating-point numbers to copy data as it will not work when high-order bits are set that do not fit in the floating-point representation.

==

numpy/core/src/arrayobject.c
==================
83d602f;Travis Oliphant;2007-04-01 23:06:02 +0000;Fix ticket #463 wherein hex and oct did not work for values that could not be converted to an integer.

==

numpy/core/src/scalarmathmodule.c.src
==================
396b1ab;cookedm;2007-04-01 21:01:12 +0000;Fix compiler warning on AMD64

==

numpy/core/src/arrayobject.c
==================
fc796af;cookedm;2007-04-01 20:32:07 +0000;Make numpy.get_include() and numpy.get_numarray_include() not pull in numpy.distutils.

==

numpy/distutils/misc_util.py
numpy/lib/utils.py
==================
2d1cb57;cookedm;2007-04-01 20:12:27 +0000;Regression test for ticket #483.

==

numpy/core/tests/test_regression.py
==================
120c385;Travis Oliphant;2007-04-01 19:56:03 +0000;Apply patch to fix ticket #483 regarding junk at the end of an expression (which probably was introduced after recent changes to string comparisons) and handling of NULLs inside strings.

==

numpy/core/src/arraytypes.inc.src
==================
b158139;Travis Oliphant;2007-04-01 19:49:58 +0000;Fix segfault in ticket #487

==

numpy/core/src/arraytypes.inc.src
==================
7518548;Travis Oliphant;2007-04-01 04:02:49 +0000;Fix ticket #482 caused by using the wrong index variable in PyArray_BroadCastToShape.  The strides was being filled in by bogus strides data.

==

numpy/core/src/arrayobject.c
==================
da06774;Travis Oliphant;2007-04-01 03:44:27 +0000;Make sure dot product is not too large for dimensions array in PyArray_MatrixProduct.  Fixes ticket #418

==

numpy/core/src/multiarraymodule.c
==================
a1bdbab;wfspotz@sandia.gov;2007-04-01 02:35:36 +0000;Added documentation to series.h and series.cxx

==

numpy/doc/swig/series.cxx
numpy/doc/swig/series.h
==================
020c1dd;wfspotz@sandia.gov;2007-04-01 02:31:40 +0000;Added (DATA_TYPE* ARGOUT_ARRAY1, DIM_TYPE DIM1) and (DIM_TYPE DIM1, DATA_TYPE* ARGOUT_ARRAY1) typemaps, and tests, and documentation

==

numpy/doc/swig/Series.i
numpy/doc/swig/numpy.i
numpy/doc/swig/numpy_swig.html
numpy/doc/swig/numpy_swig.pdf
numpy/doc/swig/numpy_swig.txt
numpy/doc/swig/series.cxx
numpy/doc/swig/series.h
numpy/doc/swig/testSeries.py
==================
fd85bb2;wfspotz@sandia.gov;2007-04-01 01:06:47 +0000;Added tests for ARGOUT_ARRAY1 and ARGOUT_ARRAY2 typemaps

==

numpy/doc/swig/Series.i
numpy/doc/swig/numpy.i
numpy/doc/swig/series.cxx
numpy/doc/swig/series.h
numpy/doc/swig/testSeries.py
==================
cf82afd;Travis Oliphant;2007-03-31 23:45:45 +0000;Speed up indicies significantly (about 10x).

==

numpy/core/numeric.py
==================
f80ab5e;Travis Oliphant;2007-03-31 22:56:19 +0000;Add new MACRO.  Fix ticket #454 by changing pkgload to a function instead of an object.

==

numpy/__init__.py
numpy/_import_tools.py
numpy/core/include/numpy/ndarrayobject.h
==================
dad8714;Travis Oliphant;2007-03-31 07:40:31 +0000;Finish adding and checking remaining tests for clip (and choose).   All tests now pass for new clip method.

==

THANKS.txt
numpy/core/src/multiarraymodule.c
numpy/core/tests/test_numeric.py
==================
701a913;Stefan van der Walt;2007-03-31 00:15:41 +0000;Split tests. Make them run quietly.

==

numpy/core/tests/test_numeric.py
==================
e784b53;Travis Oliphant;2007-03-30 23:47:39 +0000;Add tests for clipping.  Also some good tests on choose and convert_tocommontype.  Fix some mixed-type problems.  Fix problems with clipping. More to be done to close ticket #425

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_numeric.py
==================
72dea1a;Travis Oliphant;2007-03-30 19:25:13 +0000;Add comments to PyArray_Clip.  Fix unsigned problem.  Fix reference counting problem with the output array to fix certain memory errors.

==

numpy/core/src/multiarraymodule.c
==================
1b80499;Travis Oliphant;2007-03-30 18:25:12 +0000;Change 0-d record arrays so that field selection returns a 0-d array and not a scalar.

==

numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
==================
9c6f421;Travis Oliphant;2007-03-30 18:19:07 +0000;Allow Boolean mask indexing for 0-d arrays.

==

numpy/core/ma.py
numpy/core/src/arrayobject.c
numpy/core/tests/test_ma.py
==================
ef39218;Stefan van der Walt;2007-03-30 15:39:22 +0000;Add test for record array clipping.

==

numpy/core/tests/test_multiarray.py
==================
0b26cf1;Stefan van der Walt;2007-03-30 15:03:18 +0000;Check clip for byteorder.

==

numpy/core/tests/test_multiarray.py
==================
7ba1891;Stefan van der Walt;2007-03-30 13:17:40 +0000;Add basic tests for clip.

==

numpy/core/tests/test_multiarray.py
==================
228bbb7;Travis Oliphant;2007-03-30 05:09:53 +0000;Make a fastclip function (adapted from ticket #425 and fix conjugate method to use ufunc when complex matrix

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
==================
19cc4b9;cookedm;2007-03-29 21:37:58 +0000;cpuinfo: Nocona is a PentiumIV, not 686. Fixes #438

==

numpy/distutils/cpuinfo.py
==================
6f4ca87;wfspotz@sandia.gov;2007-03-29 20:47:40 +0000;Updated examples in the documentation

==

numpy/doc/swig/numpy_swig.html
numpy/doc/swig/numpy_swig.pdf
numpy/doc/swig/numpy_swig.txt
==================
f89443c;Travis Oliphant;2007-03-29 19:21:58 +0000;Fix ticket #485 by improving how a dtype variable reports its length.

==

numpy/core/src/arrayobject.c
==================
cc21968;Travis Oliphant;2007-03-29 18:23:11 +0000;Fix mgrid inconsistency ticket #467

==

numpy/lib/index_tricks.py
==================
2b30803;Travis Oliphant;2007-03-28 23:59:15 +0000;More Buffer protocol fixes.

==

numpy/doc/pep_buffer.txt
==================
ae074d6;Travis Oliphant;2007-03-28 05:45:16 +0000;More pep_buffer changes.

==

numpy/doc/pep_buffer.txt
==================
e459e77;Travis Oliphant;2007-03-28 05:21:18 +0000;Modified buffer PEP.

==

numpy/doc/pep_buffer.txt
==================
393a186;Travis Oliphant;2007-03-28 05:20:23 +0000;Modified buffer PEP.

==

numpy/doc/pep_buffer.txt
==================
1794a61;Travis Oliphant;2007-03-27 19:43:06 +0000;Updates to Buffer PEP

==

numpy/doc/pep_buffer.txt
==================
cd4d041;Travis Oliphant;2007-03-27 00:10:49 +0000;Revised buffer.

==

numpy/doc/pep_buffer.txt
==================
1da3aae;Travis Oliphant;2007-03-26 22:28:04 +0000;Fix ticket #476: string comparisons with leading NULL

==

numpy/core/src/arrayobject.c
==================
2ff5b35;Travis Oliphant;2007-03-26 22:13:28 +0000;Fix ticket #459

==

numpy/lib/function_base.py
==================
bb10e40;Travis Oliphant;2007-03-26 21:41:45 +0000;Added patch in ticket #458 for compilation on Cygwin.

==

numpy/numarray/_capi.c
==================
12b18ae;Travis Oliphant;2007-03-26 21:28:30 +0000;Fix scalar coercion rules so that mixed scalar array coercion with arrays of different types uses normal rules when the kind of the scalar is larger than the kind of the array.

==

numpy/core/src/ufuncobject.c
==================
37372d6;Travis Oliphant;2007-03-26 20:47:11 +0000;Fix some errors with recent scalar coercion changes.

==

numpy/core/src/multiarraymodule.c
==================
336d765;Travis Oliphant;2007-03-26 20:40:01 +0000;Fix scalar coercion rules between different basic kinds.

==

numpy/core/src/multiarraymodule.c
numpy/core/src/ufuncobject.c
==================
14a5747;Charles Harris;2007-03-26 19:23:04 +0000;Fix errors involving matrix*sparse

==

numpy/core/defmatrix.py
==================
3b8ce02;Robert Kern;2007-03-25 23:12:00 +0000;Make the gfortran version matching regex accept gfortran 4.3 on OS X

==

numpy/distutils/fcompiler/gnu.py
==================
78f4e51;wfspotz@sandia.gov;2007-03-25 03:04:27 +0000;Added typemaps for signatures (TYPE INPLACE_ARRAY1[ANY]) and (TYPE INPLACE_ARRAY2[ANY][ANY])

==

numpy/doc/swig/Series.i
numpy/doc/swig/numpy.i
numpy/doc/swig/numpy_swig.html
numpy/doc/swig/numpy_swig.pdf
numpy/doc/swig/numpy_swig.txt
numpy/doc/swig/series.cxx
numpy/doc/swig/series.h
numpy/doc/swig/testSeries.py
==================
e3a1828;Charles Harris;2007-03-24 23:46:03 +0000;Fix matrix-scalar multiplication. Add test for case Matrix*1d-vector

==

numpy/core/defmatrix.py
numpy/core/tests/test_regression.py
==================
7a2733c;Charles Harris;2007-03-24 23:14:07 +0000;Fix matrix multiply to return error when has is a 1-D vector. Fixes ticket #473

==

numpy/core/defmatrix.py
==================
352587d;wfspotz@sandia.gov;2007-03-24 20:34:05 +0000;Added typemaps for signatures (TYPE IN_ARRAY1[ANY]) and (TYPE IN_ARRAY2[ANY][ANY])

==

numpy/doc/swig/Series.i
numpy/doc/swig/numpy.i
numpy/doc/swig/numpy_swig.html
numpy/doc/swig/numpy_swig.pdf
numpy/doc/swig/numpy_swig.txt
numpy/doc/swig/series.cxx
numpy/doc/swig/series.h
numpy/doc/swig/testSeries.py
==================
2a07a54;wfspotz@sandia.gov;2007-03-23 18:04:37 +0000;Added typecheck typemaps to INPLACE_ARRAY typemap suites

==

numpy/doc/swig/numpy.i
==================
32a2519;wfspotz@sandia.gov;2007-03-23 17:36:16 +0000;Added '#ifdef SWIGPYTHON' protection

==

numpy/doc/swig/numpy.i
numpy/doc/swig/numpy_swig.html
numpy/doc/swig/numpy_swig.pdf
numpy/doc/swig/numpy_swig.txt
==================
25526d1;Stefan van der Walt;2007-03-23 12:08:06 +0000;Replace tabs with spaces.

==

numpy/core/memmap.py
numpy/lib/tests/test_function_base.py
==================
f48806e;Stefan van der Walt;2007-03-22 22:49:17 +0000;Replace tabs with spaces (see ticket #470).

==

numpy/lib/function_base.py
numpy/lib/polynomial.py
==================
a07c823;Travis Oliphant;2007-03-21 21:19:11 +0000;Buffer interface changes -- add array-of-array possibility, allow optional buf and len variables, and add 2 C-API calls.

==

numpy/doc/pep_buffer.txt
==================
2379743;cookedm;2007-03-20 18:43:28 +0000;ReSTify pep_buffer.txt (hope that's ok, Travis)

==

numpy/doc/pep_buffer.txt
==================
fcfc55e;Travis Oliphant;2007-03-20 10:34:04 +0000;More fixes to mtrand from recent speed ups.

==

numpy/random/mtrand/Python.pxi
numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
==================
8175ff7;Travis Oliphant;2007-03-20 10:16:03 +0000;More fixes related to #471

==

numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
==================
7016639;Travis Oliphant;2007-03-20 10:14:14 +0000;Fix ticket #471

==

numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
==================
827ac8a;Travis Oliphant;2007-03-20 10:05:43 +0000;Update buffer interface PEP.

==

numpy/doc/pep_buffer.txt
==================
be32214;wfspotz@sandia.gov;2007-03-19 19:15:23 +0000;Removed stubs for CHAR and OBJECT; added macro variable for dimension type; updated documentation

==

numpy/doc/swig/README
numpy/doc/swig/numpy.i
numpy/doc/swig/numpy_swig.html
numpy/doc/swig/numpy_swig.pdf
numpy/doc/swig/numpy_swig.txt
numpy/doc/swig/series.cxx
numpy/doc/swig/series.h
==================
02f660f;Travis Oliphant;2007-03-19 17:19:39 +0000;Make random number generators faster for scalar parameters.

==

numpy/random/mtrand/Python.pxi
numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
==================
7af974d;Stefan van der Walt;2007-03-16 12:53:05 +0000;Remove invalid part of r_ docstring.

==

numpy/lib/index_tricks.py
==================
acbc1b6;Travis Oliphant;2007-03-15 14:45:35 +0000;Fix missing addition bug.

==

numpy/core/src/arrayobject.c
==================
adca10a;wfspotz@sandia.gov;2007-03-14 21:11:59 +0000;Updated README file

==

numpy/doc/swig/README
==================
511059c;wfspotz@sandia.gov;2007-03-14 21:08:25 +0000;Fixed typo in Makefile

==

numpy/doc/swig/Makefile
==================
f06a5c3;wfspotz@sandia.gov;2007-03-14 21:07:05 +0000;Added LaTeX/PDF documentation

==

numpy/doc/swig/Makefile
numpy/doc/swig/numpy_swig.html
numpy/doc/swig/numpy_swig.pdf
==================
d99202e;wfspotz@sandia.gov;2007-03-14 20:15:31 +0000;testSeries.py now prints numpy version; documentation updated

==

numpy/doc/swig/Makefile
numpy/doc/swig/README
numpy/doc/swig/testSeries.py
==================
df77160;wfspotz@sandia.gov;2007-03-14 19:57:23 +0000;Added typemap signatures where the dimensions come before the data pointer

==

numpy/doc/swig/README
numpy/doc/swig/Series.i
numpy/doc/swig/numpy.i
numpy/doc/swig/numpy_swig.html
numpy/doc/swig/numpy_swig.txt
numpy/doc/swig/series.cxx
numpy/doc/swig/series.h
numpy/doc/swig/testSeries.py
==================
6a23ed3;wfspotz@sandia.gov;2007-03-14 15:47:12 +0000;In numpy.i:
  * I consolidated several macros

      TYPEMAP_IN1
      TYPEMAP_IN2
      TYPEMAP_INPLACE1
      TYPEMAP_INPLACE2
      TYPEMAP_ARGOUT1
      TYPEMAP_ARGOUT2

    into a single macros, %numpy_typemaps().  This makes expanding the
    typemaps for a given data type much easier.

  * The %numpy_typemaps() macro is now expanded for::

      signed char
      unsigned char
      short
      unsigned short
      int
      unsigned int
      long
      unsigned long
      long long
      unsigned long long
      float
      double
      PyObject
      char

  * I changed the ARGOUT typemaps to check for multiple output
    arguments, and form a tuple if necessary.

  * Updated the code to work with released numpy versions 0.9.6,
    0.9.8, 1.0 and 1.0.1.

  * Upgraded the dimension arrays to use type npy_intp.

I also added documentation: numpy_swig.txt is a numpy.i users guide in
restructured text format; numpy_swig.html is the same content in
HTML.  The Makefile can produce this with 'make html', assuming
docutils is installed.

The series.h and series.cxx files have been refactored to use macros
to generate repetitive code for different types.  All the supported
types have tests for all of the non-ARGOUT typemaps.  ARGOUT typemap
tests still need to be written.

==

numpy/doc/swig/HelperFunctions.txt
numpy/doc/swig/Makefile
numpy/doc/swig/README
numpy/doc/swig/Series.i
numpy/doc/swig/numpy.i
numpy/doc/swig/numpy_swig.html
numpy/doc/swig/numpy_swig.txt
numpy/doc/swig/series.cxx
numpy/doc/swig/series.h
numpy/doc/swig/setup.py
numpy/doc/swig/testSeries.py
==================
19ab75e;Stefan van der Walt;2007-03-12 17:07:19 +0000;Add test for ticket #449.

==

numpy/core/tests/test_regression.py
==================
27c69f6;Travis Oliphant;2007-03-07 19:12:26 +0000;Fix problem 64-bit linalg.qr problem.

==

numpy/linalg/lapack_litemodule.c
==================
3239042;Tim Leslie;2007-03-05 06:06:12 +0000;scratch that last one. my bad

==

numpy/testing/numpytest.py
==================
85eeb47;Tim Leslie;2007-03-05 06:03:54 +0000;fix bug with test_suite being called incorrectly

==

numpy/testing/numpytest.py
==================
d8ccf22;Tim Leslie;2007-03-04 10:47:08 +0000;add a delete flag to make_svn_version_py to allow the __svn_version.py to not be deleted

==

numpy/distutils/misc_util.py
==================
8fa1768;Pearu Peterson;2007-03-02 16:49:00 +0000;Applying info from Hans-Joachim Ehlers to improve xlf compiler support (on AIX using lslpp to determine compiler version).

==

numpy/distutils/fcompiler/ibm.py
==================
2288ef6;Travis Oliphant;2007-02-28 23:52:12 +0000;Fix string comparison so it is not fooled by NULLs in the string.

==

numpy/core/src/arrayobject.c
==================
9f71c0f;Stefan van der Walt;2007-02-28 21:35:10 +0000;Regression test for changeset 3557.

==

numpy/core/tests/test_regression.py
==================
6481ff2;Stefan van der Walt;2007-02-28 20:21:39 +0000;Fix searchsorted docstring. Closes #457.

==

numpy/core/fromnumeric.py
==================
a3aacd3;Pearu Peterson;2007-02-28 18:32:18 +0000;Fixing xlf compiler for AIX with 9.x and 10.x version support (needs testing and checking that xlf 8.x compilers are still detected)

==

numpy/distutils/fcompiler/ibm.py
==================
a353043;Pearu Peterson;2007-02-28 13:12:06 +0000;Added support for xml Fortran V10 compiler (needs testing).

==

numpy/distutils/fcompiler/ibm.py
==================
702042f;Travis Oliphant;2007-02-28 05:24:26 +0000;Fix buffer PEP.

==

numpy/doc/pep_buffer.txt
==================
c71975b;Travis Oliphant;2007-02-28 05:14:30 +0000;buffer pep changes.

==

numpy/doc/pep_buffer.txt
==================
430183c;Travis Oliphant;2007-02-28 04:32:41 +0000;Changes to pep.

==

numpy/doc/pep_buffer.txt
==================
f26b78b;Travis Oliphant;2007-02-28 04:32:25 +0000;Changes to pep.

==

numpy/doc/pep_buffer.txt
==================
514e1f7;Travis Oliphant;2007-02-28 04:13:31 +0000;Fix numarray.fromstring

==

numpy/numarray/functions.py
==================
9edb7d7;Travis Oliphant;2007-02-28 04:01:10 +0000;Fix getitem on a string to just truncate trailing NULLs rather than stop at interior NULLs

==

numpy/core/src/arraytypes.inc.src
==================
645a6bf;Travis Oliphant;2007-02-28 03:22:18 +0000;Fix copyswap when a field is a sub-array

==

numpy/core/src/arraytypes.inc.src
==================
df839eb;Travis Oliphant;2007-02-28 01:15:59 +0000;Update to buffer interface PEP

==

numpy/doc/pep_buffer.txt
==================
e3241d3;Travis Oliphant;2007-02-28 01:09:01 +0000;

==

numpy/doc/pep_buffer.txt
==================
447f283;Travis Oliphant;2007-02-28 01:00:07 +0000;Add buffer interface pep to doc

==

DEV_README.txt
numpy/doc/pep_buffer.txt
==================
866d620;Travis Oliphant;2007-02-22 07:38:53 +0000;Undo the change.  It breaks the desired behavior.

==

numpy/core/src/multiarraymodule.c
==================
ef89617;Travis Oliphant;2007-02-22 07:37:28 +0000;Fix mixed-kind scalar operations to use the standard in each kind.

==

numpy/core/src/multiarraymodule.c
==================
9bcf9ef;Stefan van der Walt;2007-02-18 22:43:40 +0000;Fix doctests.

==

numpy/core/arrayprint.py
numpy/core/fromnumeric.py
numpy/core/numeric.py
numpy/lib/function_base.py
numpy/lib/index_tricks.py
numpy/lib/polynomial.py
numpy/lib/shape_base.py
numpy/lib/utils.py
==================
b860a39;Stefan van der Walt;2007-02-18 21:02:46 +0000;Fix docstrings for loading with DocFileSuite.

==

numpy/core/numerictypes.py
numpy/distutils/ccompiler.py
numpy/lib/function_base.py
numpy/lib/index_tricks.py
numpy/lib/polynomial.py
numpy/lib/shape_base.py
==================
ff2ceaa;Stefan van der Walt;2007-02-18 20:34:30 +0000;Fix numpy.core.records doctests.

==

numpy/core/records.py
==================
5cb3d75;Stefan van der Walt;2007-02-17 18:36:16 +0000;Refactor benchmarks.

==

benchmarks/benchmark.py
benchmarks/casting.py
benchmarks/creating.py
benchmarks/sorting.py
==================
70c899f;Stefan van der Walt;2007-02-10 00:43:37 +0000;Prepare for doctest-runner.

==

numpy/testing/numpytest.py
==================
96660d8;Travis Oliphant;2007-02-09 20:00:48 +0000;Fix error in implementation of itemset for >= 2-d arrays.

==

numpy/core/src/arraymethods.c
==================
de63203;Stefan van der Walt;2007-02-09 17:55:37 +0000;Do not attempt to convolve empty arrays.

==

numpy/core/numeric.py
numpy/core/tests/test_regression.py
==================
e7a51c3;Stefan van der Walt;2007-02-09 17:34:23 +0000;Fix polymul bug.

==

numpy/core/tests/test_regression.py
numpy/lib/polynomial.py
==================
a3237e0;Travis Oliphant;2007-02-07 23:29:59 +0000;Remove DECREF in userdef portion of ufuncobject.c because it is a borrowed reference.

==

numpy/core/src/ufuncobject.c
==================
aeaf38d;Travis Oliphant;2007-02-07 23:17:28 +0000;Fix possible segfault.

==

numpy/core/src/multiarraymodule.c
==================
a9a155c;Travis Oliphant;2007-02-06 04:03:04 +0000;Fix nan_to_num on complex arrays. Fixes ticket #443

==

numpy/lib/type_check.py
==================
7dc2930;Robert Kern;2007-02-05 20:58:32 +0000;Flesh out the docstring for histogram() to address the concerns of #445.

==

numpy/lib/function_base.py
==================
a9300ad;edschofield;2007-02-05 00:24:42 +0000;Fixed detection of Core2 CPUs (scipy ticket #349)

==

numpy/distutils/cpuinfo.py
numpy/distutils/fcompiler/gnu.py
==================
9432b43;Stefan van der Walt;2007-02-03 15:30:00 +0000;Update docstrings.

==

numpy/core/arrayprint.py
==================
a6546ce;Stefan van der Walt;2007-02-03 11:34:42 +0000;Comment on __docformat__ in documentation standard.  Fix reference to math, :lm:eqn -> :lm:`eqn`.

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
0594183;Stefan van der Walt;2007-02-03 10:33:58 +0000;Import NewAxis for numarray compatibility.

==

numpy/numarray/__init__.py
==================
7a5ce8a;Travis Oliphant;2007-02-02 00:57:43 +0000;Fix docstring and rename to byte_bounds.

==

numpy/lib/utils.py
==================
a36ce17;Travis Oliphant;2007-02-02 00:55:40 +0000;Fix a comment string.

==

numpy/lib/utils.py
==================
e122f07;Travis Oliphant;2007-02-02 00:47:34 +0000;Add memory_bounds and may_share_memory functions to numpy.

==

numpy/lib/utils.py
==================
59ae3b5;Travis Oliphant;2007-02-01 21:14:12 +0000;Added dirichlet random number generator to NumPy

==

THANKS.txt
numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
==================
4a56cab;Travis Oliphant;2007-02-01 20:34:56 +0000;Allow matrices to pass through more functions.

==

numpy/lib/type_check.py
numpy/lib/ufunclike.py
==================
c1bcd90;Travis Oliphant;2007-02-01 20:34:23 +0000;Add new-line to end of file.

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
57d211f;Travis Oliphant;2007-02-01 20:32:21 +0000;Add a HOWTO_DOCUMENT.txt for documentation standardization

==

numpy/doc/HOWTO_DOCUMENT.txt
==================
53d4e2f;Travis Oliphant;2007-02-01 00:26:25 +0000;Add a close method to memmap arrays.

==

numpy/core/memmap.py
==================
e7b63c6;Robert Kern;2007-01-31 17:57:42 +0000;Correct c_numpy.pxd

==

numpy/doc/pyrex/c_numpy.pxd
numpy/doc/pyrex/numpyx.c
==================
7763133;Stefan van der Walt;2007-01-31 13:32:31 +0000;Use get_include instead of get_numpy_include.

==

numpy/doc/pyrex/setup.py
==================
2ba9faa;Travis Oliphant;2007-01-30 21:47:05 +0000;Fix ticket #439 --- poly1d objects can now be pickled because an AttributeError is raised instead of the old KeyError when __getstate__ is accessed.

==

numpy/lib/polynomial.py
==================
8fcedfd;Robert Kern;2007-01-30 19:18:06 +0000;Revert semi-intelligent handling of MACOSX_DEPLOYMENT_TARGET to work around broken MacPorts Python.

==

numpy/distutils/fcompiler/gnu.py
==================
4bb28f2;Robert Kern;2007-01-28 02:57:51 +0000;Correct mtrand for Pyrex 0.9.5

==

numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
numpy/random/mtrand/numpy.pxi
==================
56a6330;Robert Kern;2007-01-27 00:35:17 +0000;Generalize the setting of MACOSX_DEPLOYMENT_TARGET.

==

numpy/distutils/fcompiler/gnu.py
==================
37953a5;Tim Leslie;2007-01-26 04:16:37 +0000;remove some remaining references to scipy. fixes #428

==

numpy/distutils/cpuinfo.py
numpy/distutils/system_info.py
numpy/testing/numpytest.py
numpy/testing/setup.py
==================
d7c5a1e;Robert Kern;2007-01-26 03:46:52 +0000;Fix the regression test to not use 2.4's sorted function.

==

numpy/core/tests/test_regression.py
==================
1d5bd2e;Travis Oliphant;2007-01-25 21:57:52 +0000;Fix-up iterator macros so that they can take Python Objects (which are returned from the creation function).  Add NOTDONE macros.

==

numpy/core/include/numpy/ndarrayobject.h
==================
29c5d91;Travis Oliphant;2007-01-25 17:10:33 +0000;Fix include directory for fenv.c

==

numpy/numarray/_capi.c
==================
bdb4305;Travis Oliphant;2007-01-24 21:59:33 +0000;Fix location of fenv.h file for CYGWIN to correct compilation of NumPy on CYGWIN

==

numpy/numarray/_capi.c
==================
20097b5;Travis Oliphant;2007-01-21 09:34:59 +0000;Add a NOTDONE test for iterators.

==

numpy/core/include/numpy/ndarrayobject.h
==================
65f5782;Robert Kern;2007-01-19 22:57:02 +0000;Correct the .args attribute of MAError. It needs to be a tuple. Python 2.5 depends on this.

==

numpy/core/ma.py
==================
3437457;Travis Oliphant;2007-01-19 07:01:20 +0000;Fix missing import statement.  Fix bug where random.permutation did not accept numpy scalars.

==

numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
numpy/testing/numpytest.py
==================
1214839;Pearu Peterson;2007-01-18 10:25:55 +0000;G3 F2PY: Fixed parsing a*b**c expression.

==

numpy/f2py/lib/parser/pattern_tools.py
==================
d84df7b;Tim Leslie;2007-01-15 06:53:06 +0000;deprecate the use of ScipyTest and ScipyTestCase. fixes #421

==

numpy/testing/numpytest.py
==================
36a3272;Robert Kern;2007-01-10 06:14:26 +0000;Expanded docstrings. This is a tedious and slow process, so please jump in and help if you can.

==

numpy/core/fromnumeric.py
==================
cdb170a;Robert Kern;2007-01-09 08:00:26 +0000;Use the out= parameter supplied by the user in defmatrix.sum()

==

numpy/core/defmatrix.py
==================
64aeb4d;Robert Kern;2007-01-09 06:10:27 +0000;Regenerate mtrand.c with the lxml project's branch of Pyrex in order to fi a 2.5-related bug in the official Pyrex distribution.

==

numpy/random/mtrand/mtrand.c
==================
3a4f10d;Tim Leslie;2007-01-09 05:14:09 +0000;whitespace cleanup

==

numpy/linalg/linalg.py
==================
206a502;Robert Kern;2007-01-09 04:57:50 +0000;Add regression test for reduction with noncommutative ufuncs.

==

numpy/core/tests/test_regression.py
==================
e56a09a;Tim Leslie;2007-01-09 04:45:31 +0000;clean up unused imports and bad whitespace

==

numpy/core/defmatrix.py
numpy/core/fromnumeric.py
numpy/core/ma.py
numpy/core/setup.py
numpy/ctypeslib.py
numpy/f2py/auxfuncs.py
numpy/fft/helper.py
numpy/fft/setup.py
numpy/lib/convdtype.py
numpy/lib/function_base.py
numpy/lib/index_tricks.py
numpy/lib/polynomial.py
numpy/lib/setup.py
numpy/lib/shape_base.py
numpy/lib/twodim_base.py
numpy/lib/utils.py
numpy/linalg/linalg.py
numpy/linalg/setup.py
numpy/oldnumeric/compat.py
numpy/oldnumeric/random_array.py
==================
4d9b87e;Travis Oliphant;2007-01-09 03:10:09 +0000;Fix reduce problem with non-commutative arrays.

==

numpy/core/src/ufuncobject.c
==================
16a1d42;Travis Oliphant;2007-01-09 01:44:40 +0000;Fix segfault in N.float64, ticket #412.

==

numpy/core/src/scalartypes.inc.src
numpy/lib/tests/test_shape_base.py
==================
1bd2d49;Stefan van der Walt;2007-01-08 21:56:54 +0000;Whitespace cleanup.

==

numpy/__init__.py
numpy/add_newdocs.py
numpy/core/_internal.py
numpy/core/arrayprint.py
numpy/core/code_generators/generate_array_api.py
numpy/core/code_generators/generate_umath.py
numpy/core/defchararray.py
numpy/core/defmatrix.py
numpy/core/fromnumeric.py
numpy/core/ma.py
numpy/core/numeric.py
numpy/core/numerictypes.py
numpy/core/records.py
numpy/core/setup.py
numpy/core/tests/test_defmatrix.py
numpy/core/tests/test_errstate.py
numpy/core/tests/test_ma.py
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_numeric.py
numpy/core/tests/test_numerictypes.py
numpy/core/tests/test_scalarmath.py
numpy/core/tests/test_umath.py
numpy/distutils/ccompiler.py
numpy/distutils/command/build_clib.py
numpy/distutils/command/config_compiler.py
numpy/distutils/fcompiler/g95.py
numpy/distutils/fcompiler/gnu.py
numpy/distutils/interactive.py
numpy/distutils/misc_util.py
numpy/distutils/system_info.py
numpy/f2py/capi_maps.py
numpy/f2py/f2py_testing.py
numpy/f2py/lib/main.py
numpy/f2py/lib/parser/Fortran2003.py
numpy/f2py/lib/parser/base_classes.py
numpy/f2py/lib/parser/block_statements.py
numpy/f2py/lib/parser/parsefortran.py
numpy/f2py/lib/parser/readfortran.py
numpy/f2py/lib/parser/sourceinfo.py
numpy/f2py/lib/parser/splitline.py
numpy/f2py/lib/parser/statements.py
numpy/f2py/lib/parser/test_Fortran2003.py
numpy/f2py/lib/parser/test_parser.py
numpy/f2py/lib/parser/typedecl_statements.py
numpy/f2py/lib/py_wrap.py
numpy/f2py/lib/py_wrap_subprogram.py
numpy/f2py/lib/py_wrap_type.py
numpy/f2py/lib/test_derived_scalar.py
numpy/f2py/lib/test_scalar_function_in.py
numpy/f2py/lib/test_scalar_in_out.py
numpy/f2py/lib/wrapper_base.py
numpy/f2py/rules.py
numpy/f2py/tests/array_from_pyobj/setup.py
numpy/f2py/tests/c/return_real.py
numpy/f2py/tests/f77/callback.py
numpy/f2py/tests/f77/return_character.py
numpy/f2py/tests/f77/return_complex.py
numpy/f2py/tests/f77/return_integer.py
numpy/f2py/tests/f77/return_logical.py
numpy/f2py/tests/f77/return_real.py
numpy/f2py/tests/f90/return_character.py
numpy/f2py/tests/f90/return_complex.py
numpy/f2py/tests/f90/return_integer.py
numpy/f2py/tests/f90/return_logical.py
numpy/fft/fftpack.py
numpy/lib/__init__.py
numpy/lib/arraysetops.py
numpy/lib/convdtype.py
numpy/lib/function_base.py
numpy/lib/index_tricks.py
numpy/lib/polynomial.py
numpy/lib/setup.py
numpy/lib/shape_base.py
numpy/lib/tests/test_arraysetops.py
numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_index_tricks.py
numpy/lib/tests/test_polynomial.py
numpy/lib/tests/test_shape_base.py
numpy/lib/tests/test_twodim_base.py
numpy/lib/tests/test_type_check.py
numpy/lib/twodim_base.py
numpy/lib/user_array.py
numpy/lib/utils.py
numpy/linalg/info.py
numpy/matlib.py
numpy/numarray/alter_code1.py
numpy/numarray/alter_code2.py
numpy/numarray/convolve.py
numpy/numarray/functions.py
numpy/numarray/image.py
numpy/numarray/numerictypes.py
numpy/numarray/session.py
numpy/numarray/setup.py
numpy/numarray/util.py
numpy/oldnumeric/__init__.py
numpy/oldnumeric/alter_code1.py
numpy/oldnumeric/alter_code2.py
numpy/oldnumeric/compat.py
numpy/oldnumeric/fix_default_axis.py
numpy/oldnumeric/functions.py
numpy/oldnumeric/linear_algebra.py
numpy/oldnumeric/matrix.py
numpy/oldnumeric/misc.py
numpy/oldnumeric/mlab.py
numpy/oldnumeric/precision.py
numpy/oldnumeric/random_array.py
numpy/oldnumeric/rng.py
numpy/oldnumeric/tests/test_oldnumeric.py
numpy/oldnumeric/typeconv.py
numpy/oldnumeric/ufuncs.py
numpy/random/setup.py
numpy/testing/numpytest.py
numpy/tests/test_ctypeslib.py
==================
98b6d48;Stefan van der Walt;2007-01-08 21:37:21 +0000;Refer to NumpyTest instead of ScipyTest.

==

numpy/testing/info.py
==================
025a217;Stefan van der Walt;2007-01-08 21:35:13 +0000;Refer to NumpyTest instead of ScipyTest.

==

numpy/__init__.py
==================
0ab9ae3;Robert Kern;2007-01-08 05:19:16 +0000;* Fix #410 by using the stable mergesort instead of the unstable default sort in setmember1d(). * Add some more information to the function docstrings. * Reduced the "See also" sections of the docstrings to point to the module instead of the full list of functions (some of which were not entirely relevant).

==

numpy/lib/arraysetops.py
==================
0f1df3f;Tim Leslie;2007-01-08 04:01:52 +0000;fix for #407 and add unit test for it

==

numpy/lib/shape_base.py
numpy/lib/tests/test_shape_base.py
==================
2e832de;Tim Leslie;2007-01-08 03:43:54 +0000;add a docstring to nan_to_num. closes #406

==

numpy/lib/type_check.py
==================
099247b;Tim Leslie;2007-01-08 02:22:12 +0000;Fix docstring typo as per #397

==

numpy/add_newdocs.py
==================
26c9019;Travis Oliphant;2007-01-05 01:29:57 +0000;Make it so that array scalars can be sub-classed.

==

numpy/core/src/scalartypes.inc.src
==================
6d7432a;Stefan van der Walt;2007-01-03 14:15:17 +0000;Test for ticket #374.

==

numpy/core/tests/test_regression.py
==================
0410265;Travis Oliphant;2006-12-24 09:02:34 +0000;Fix tests for Boolean.

==

numpy/lib/tests/test_ufunclike.py
==================
3fa7474;Pearu Peterson;2006-12-23 13:56:35 +0000;Cont. implementing F2000 parser.

==

numpy/f2py/lib/parser/Fortran2003.py
numpy/f2py/lib/parser/pattern_tools.py
numpy/f2py/lib/parser/test_Fortran2003.py
==================
0b5b7b6;Travis Oliphant;2006-12-23 07:08:57 +0000;Fix-up boolean Formatting so that true and false line up.

==

numpy/core/arrayprint.py
==================
7729588;Travis Oliphant;2006-12-23 06:37:39 +0000;Fix ticket #408 --- chararray problem with argsort

==

numpy/core/defchararray.py
==================
9ec5076;cookedm;2006-12-14 14:57:08 +0000;[distutils-rework] Fix up how the Fortran compiler is chosen and used. config_fc sets up an object referencing the compiler, which the other commands (build_clib, build_ext) use. This object keeps track of whether we need an F90 compiler at any point.

==

command/build_clib.py
command/build_ext.py
command/config.py
command/config_compiler.py
fcompiler/__init__.py
fcompiler/gnu.py
interactive.py
==================
32789fd;Travis Oliphant;2006-12-14 09:54:03 +0000;Fix typo in oldnumeric and add Rick White's improvement to histogram for large arrays.

==

numpy/lib/function_base.py
numpy/oldnumeric/compat.py
==================
e776ee6;cookedm;2006-12-13 05:16:09 +0000;[distutils-rework] Merged revisions 2922,2924-3484 via svnmerge from http://svn.scipy.org/svn/numpy/trunk/numpy/distutils
Biggest problem in merging was appropiately choosing a f90 compiler in
build_clib and build_ext.

........
  r2979 | cookedm | 2006-08-08 17:16:05 -0400 (Tue, 08 Aug 2006) | 1 line
  
  fix #234: IntelVisualFCompiler is broken
........
  r3014 | stefan | 2006-08-14 06:05:22 -0400 (Mon, 14 Aug 2006) | 2 lines
  
  Ignore *.pyc files [for Albert Strasheim].
........
  r3061 | oliphant | 2006-08-24 16:07:59 -0400 (Thu, 24 Aug 2006) | 1 line
  
  update g95 version pattern
........
  r3138 | rkern | 2006-09-08 12:56:50 -0400 (Fri, 08 Sep 2006) | 1 line
  
  Fix #198
........
  r3164 | oliphant | 2006-09-15 17:06:47 -0400 (Fri, 15 Sep 2006) | 1 line
  
  Fix subversion number getting for 1.4 clients.  Also works for pre 1.4 clients.
........
  r3165 | oliphant | 2006-09-15 17:13:09 -0400 (Fri, 15 Sep 2006) | 1 line
  
  Fix when svnversion is not present.
........
  r3166 | oliphant | 2006-09-15 17:18:33 -0400 (Fri, 15 Sep 2006) | 1 line
  
  Small code re-org in _get_svn_revision
........
  r3228 | cookedm | 2006-09-28 07:23:18 -0400 (Thu, 28 Sep 2006) | 1 line
  
  For the MKL library, define the macro SCIPY_MKL_H
........
  r3240 | rkern | 2006-10-02 12:41:47 -0400 (Mon, 02 Oct 2006) | 1 line
  
  Add .dylib as a valid OS X shared library extension.
........
  r3290 | pearu | 2006-10-08 05:30:17 -0400 (Sun, 08 Oct 2006) | 1 line
  
  numpy.distutils: use language flag or source file extension to select default f77 or f90 compiler.
........
  r3291 | pearu | 2006-10-08 05:38:12 -0400 (Sun, 08 Oct 2006) | 1 line
  
  numpy.distutils: fixed bug.
........
  r3302 | pearu | 2006-10-10 16:27:23 -0400 (Tue, 10 Oct 2006) | 1 line
  
  Improved is_free_format.
........
  r3371 | pearu | 2006-10-19 18:03:23 -0400 (Thu, 19 Oct 2006) | 1 line
  
  Add Intel Itanium compiler 9.x support (needs testing).
........
  r3372 | oliphant | 2006-10-19 18:55:23 -0400 (Thu, 19 Oct 2006) | 1 line
  
  Fix missing comment characters in intel.py.  Check for None in .reshape and .resize
........
  r3430 | stefan | 2006-11-04 16:19:03 -0500 (Sat, 04 Nov 2006) | 2 lines
  
  Fix typo.
........
  r3450 | pearu | 2006-11-19 15:56:57 -0500 (Sun, 19 Nov 2006) | 1 line
  
  Skip interactive mode when using script_args argument.
........
  r3467 | oliphant | 2006-12-01 23:34:25 -0500 (Fri, 01 Dec 2006) | 1 line
  
  Try updating version command for NAG compiler.
........

==

ccompiler.py
command/build_clib.py
command/build_ext.py
command/build_src.py
command/config_compiler.py
core.py
fcompiler/__init__.py
fcompiler/g95.py
fcompiler/gnu.py
fcompiler/intel.py
fcompiler/nag.py
misc_util.py
system_info.py
==================
fac08c6;cookedm;2006-12-12 01:07:51 +0000;[distutils-revamp] Minor cleanup of command/build_src.py

==

command/build_src.py
==================
8bd6fb7;Travis Oliphant;2006-12-09 22:39:26 +0000;Fix random.shuffle

==

numpy/random/mtrand/generate_mtrand_c.py
numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
==================
6d8631d;Travis Oliphant;2006-12-09 20:00:27 +0000;Fix shuffle and chararray printing for empty strings.

==

numpy/core/defchararray.py
numpy/random/mtrand/mtrand.pyx
==================
db487c2;Travis Oliphant;2006-12-08 03:23:10 +0000;Add feature so that user-defined types can be recognized when instances of scalars of those types are present in the nested sequence.

==

numpy/core/arrayprint.py
numpy/core/src/arrayobject.c
==================
e3a1550;Travis Oliphant;2006-12-08 02:54:38 +0000;Fix some problems with user-defined ufunc registration.

==

numpy/core/src/multiarraymodule.c
numpy/core/src/ufuncobject.c
==================
9c5f0d8;Travis Oliphant;2006-12-06 20:48:30 +0000;Fix hanging eig computation when inf or nan values are in the array.  This check is already in SciPy.  We need it in NumPy too for some LaPack calls.

==

numpy/linalg/linalg.py
==================
51799cf;Travis Oliphant;2006-12-06 20:29:38 +0000;Fix overlapping copy problems with object arrays by incrementing the source reference counts before decrementing the destination reference counts.

==

numpy/core/src/arrayobject.c
==================
b4e8ba7;Travis Oliphant;2006-12-05 05:39:24 +0000;Fix compiler warnings.'

==

numpy/core/src/multiarraymodule.c
==================
5e670a9;Travis Oliphant;2006-12-04 20:33:09 +0000;Fix reference counting with PyArray_ArgSort

==

numpy/core/src/multiarraymodule.c
==================
fb09e79;Travis Oliphant;2006-12-04 20:32:39 +0000;Fix reference counting with PyArray_ArgSort

==

numpy/core/src/multiarraymodule.c
==================
57dbc1b;Robert Kern;2006-12-04 02:32:45 +0000;Fleshed-out site.cfg example.

==

site.cfg.example
==================
d3527fa;Travis Oliphant;2006-12-02 06:58:04 +0000;Trunk is 1.0.2

==

numpy/version.py
==================
91e3f40;Travis Oliphant;2006-12-02 05:43:15 +0000;Allow 1-element arrays to be index arrays in Python 2.5

==

numpy/core/src/arrayobject.c
==================
42655ec;Travis Oliphant;2006-12-02 05:40:00 +0000;Add space to error message.

==

numpy/core/src/arrayobject.c
==================
3a93adc;Travis Oliphant;2006-12-02 05:07:35 +0000;Fix warnings found by Intel compiler due to unused variables that were set.  Make ones work for compound types.

==

numpy/core/blasdot/_dotblas.c
numpy/core/numeric.py
numpy/core/src/_sortmodule.c.src
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/core/src/scalarmathmodule.c.src
numpy/core/src/ufuncobject.c
numpy/core/src/umathmodule.c.src
numpy/fft/fftpack.c
numpy/numarray/_capi.c
==================
921fa08;Travis Oliphant;2006-12-02 04:34:25 +0000;Try updating version command for NAG compiler.

==

numpy/distutils/fcompiler/nag.py
==================
bf677ca;Travis Oliphant;2006-12-02 04:11:31 +0000;Allow argsort and sort functions and argsort method to take None as an argument.  Add order= keyword to sort and argsort functions.

==

numpy/core/fromnumeric.py
numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
==================
574fe36;Travis Oliphant;2006-12-02 00:35:09 +0000;Add order keyword to argsort and fix documentation of sort and argsort.  Also, fix so that a Python long is passed to mmap instead of an array scalar.   Fix setting when using mixed array indices and slice objects by making sure to swap the object in the reverse direction to the swapping that takes place on the MapGet operations.

==

numpy/add_newdocs.py
numpy/core/memmap.py
numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
==================
5898c2c;Travis Oliphant;2006-12-01 19:33:05 +0000;Fix arr.flat[ind] = obj  when ind is 1-element and obj is a 1-element sequence.

==

numpy/core/src/arrayobject.c
==================
7ba40d2;Robert Kern;2006-11-30 19:04:09 +0000;Docstring improvements.

==

numpy/core/numeric.py
==================
1c4ad37;Stefan van der Walt;2006-11-27 06:54:44 +0000;Revert previous change and rather check for both possible outcomes.

==

numpy/core/tests/test_regression.py
==================
1e6992d;Stefan van der Walt;2006-11-27 06:47:56 +0000;Remove dependencies on default integer type in test for ticket #372.

==

numpy/core/tests/test_regression.py
==================
bdb5ec1;Travis Oliphant;2006-11-22 17:03:19 +0000;Fix early return in polysub.

==

numpy/lib/polynomial.py
==================
f11c32a;Travis Oliphant;2006-11-22 17:02:43 +0000;Fix early return in polyadd.

==

numpy/lib/polynomial.py
==================
76ccf85;Stefan van der Walt;2006-11-22 11:19:08 +0000;Don't share __all__ between numarray.linear_algebra and oldnumeric.linear_algebra.

==

numpy/numarray/linear_algebra.py
numpy/oldnumeric/matrix.py
numpy/oldnumeric/mlab.py
==================
886c1db;cookedm;2006-11-21 17:13:14 +0000;better doc for a.dump and a.dumps

==

numpy/add_newdocs.py
==================
c090cbc;Charles Harris;2006-11-20 21:24:20 +0000;Parenthesize a macro argument. Break some long lines. Lineup macro line continuations for easy reading. Insert some empty lines for clarity.

==

numpy/core/include/numpy/ndarrayobject.h
==================
763d250;Stefan van der Walt;2006-11-20 07:26:29 +0000;Add test for chararray.startswith.

==

numpy/core/tests/test_regression.py
==================
9f036ec;Stefan van der Walt;2006-11-20 07:24:53 +0000;Fix startswith operation on character arrays.

==

numpy/core/defchararray.py
==================
1ad56e6;Stefan van der Walt;2006-11-20 07:06:48 +0000;Add test for fftpack.

==

numpy/fft/tests/test_fftpack.py
==================
8fe987a;Stefan van der Walt;2006-11-20 07:01:35 +0000;Refuse to compute FFT for invalid number of data points.

==

numpy/fft/fftpack.py
==================
97fe6fa;Charles Harris;2006-11-20 02:27:26 +0000;Parenthesize some arguments in macros. Cleanup whitespace. Fixes ticket #383

==

numpy/core/include/numpy/arrayscalars.h
numpy/core/include/numpy/ndarrayobject.h
numpy/core/include/numpy/npy_interrupt.h
numpy/core/include/numpy/oldnumeric.h
numpy/core/include/numpy/ufuncobject.h
==================
7078ccf;Pearu Peterson;2006-11-19 20:56:57 +0000;Skip interactive mode when using script_args argument.

==

numpy/distutils/core.py
==================
b1f1201;Stefan van der Walt;2006-11-19 20:52:52 +0000;Test refcount for changeset #3443.

==

numpy/core/tests/test_regression.py
==================
9265071;Travis Oliphant;2006-11-18 14:53:47 +0000;Remove Py_CLEAR and set ptr to NULL manually

==

numpy/core/src/ufuncobject.c
==================
005583c;Travis Oliphant;2006-11-17 20:40:54 +0000;Allow array_descriptor format to also use alignment.  Force objects with _fields_ attribute to use alignment (ctypes case).

==

numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
==================
ccd6338;Travis Oliphant;2006-11-17 20:17:30 +0000;Allow data-type objects to be 'repeated' using '*' like ctypes.

==

numpy/core/src/arrayobject.c
==================
e2756cb;Travis Oliphant;2006-11-17 19:39:02 +0000;Understand array's of ctypes types.

==

numpy/core/src/multiarraymodule.c
==================
9356329;Travis Oliphant;2006-11-17 19:28:56 +0000;Understand ctypes basic types and structures.

==

numpy/core/src/multiarraymodule.c
==================
c4a0dbf;Travis Oliphant;2006-11-17 18:45:17 +0000;Fix reference count problem with dtypes in vdot

==

numpy/core/blasdot/_dotblas.c
numpy/core/src/arrayobject.c
==================
6bd9d2f;Stefan van der Walt;2006-11-17 11:01:35 +0000;Test for ticket #378.

==

numpy/core/tests/test_regression.py
==================
f552cf5;Travis Oliphant;2006-11-17 00:45:36 +0000;Fix some compiler errors.

==

numpy/core/src/scalarmathmodule.c.src
numpy/numarray/numpy/arraybase.h
==================
e6ef040;Travis Oliphant;2006-11-17 00:33:28 +0000;Add docstring to correlate.

==

numpy/core/numeric.py
==================
20cd8f3;Travis Oliphant;2006-11-17 00:28:50 +0000;Applied tecki's patch for ufunc's involving objects

==

numpy/core/src/ufuncobject.c
==================
8b48eb0;Robert Kern;2006-11-17 00:05:37 +0000;Moving the research/ directory out of the trunk as it takes up space in the source distribution without being useful for users.

==

numpy/f2py/lib/research/04-007.pdf
numpy/f2py/lib/research/pointers/pointer_size.c
numpy/f2py/lib/research/pointers/settypeinfo.f90
numpy/f2py/lib/research/rat/main.c
numpy/f2py/lib/research/rat/main.f90
numpy/f2py/lib/research/rat/rational.f90
numpy/f2py/lib/research/rat/wrap.f90
==================
3e2d1f8;Travis Oliphant;2006-11-16 23:59:19 +0000;Used an adapted setArrayFromSequence from numarray to increase speed of Assign_Array dramatically

==

numpy/core/src/arrayobject.c
==================
7dc0cb1;Stefan van der Walt;2006-11-13 21:49:43 +0000;Expose fromiter's docstring.

==

numpy/add_newdocs.py
==================
6dca582;Charles Harris;2006-11-11 23:09:59 +0000;Fix bogus unitialized variable warning by removing unneeded variable. Cleanup whitespace.

==

numpy/linalg/lapack_litemodule.c
==================
0a4064e;Charles Harris;2006-11-11 22:32:42 +0000;Fix typo in lapack_litemodule.c

==

numpy/linalg/lapack_litemodule.c
==================
ad31bbd;Robert Kern;2006-11-11 12:22:10 +0000;Coerce to floating point arrays in cov to avoid errors when integer arrays are passed.

==

numpy/lib/function_base.py
==================
a3ff162;Stefan van der Walt;2006-11-06 21:20:46 +0000;Only raise ctypes version warning on load_library. Whitespace cleanup.

==

numpy/ctypeslib.py
==================
a15d0d9;Stefan van der Walt;2006-11-05 23:10:29 +0000;Add test for ticket #372. Whitespace cleanup.

==

numpy/core/tests/test_regression.py
==================
c2b5203;Stefan van der Walt;2006-11-04 21:19:03 +0000;Fix typo.

==

numpy/distutils/command/build_ext.py
==================
c0c1bea;Travis Oliphant;2006-11-04 21:17:24 +0000;Fix auto-naming in records.py

==

numpy/core/records.py
==================
2b5e6e4;Travis Oliphant;2006-11-04 01:47:36 +0000;Allow order keyword to sort for sorting record arrays.

==

numpy/core/_internal.py
numpy/core/src/arraymethods.c
==================
ed184cd;Pearu Peterson;2006-11-03 21:57:11 +0000;F2PY G3: continued F2003 parser implementation and unittesting.

==

numpy/f2py/lib/main.py
numpy/f2py/lib/parser/Fortran2003.py
numpy/f2py/lib/parser/api.py
numpy/f2py/lib/parser/base_classes.py
numpy/f2py/lib/parser/pattern_tools.py
numpy/f2py/lib/parser/test_Fortran2003.py
numpy/f2py/lib/parser/test_expressions.py
numpy/f2py/lib/parser/test_statements2.py
==================
df18ca8;Travis Oliphant;2006-11-02 16:12:34 +0000;Fix #369: windows returning invalid results for M=1

==

numpy/lib/function_base.py
==================
8cc0bab;Travis Oliphant;2006-11-02 16:07:43 +0000;Apply #368

==

numpy/f2py/crackfortran.py
numpy/lib/shape_base.py
==================
39242cb;Travis Oliphant;2006-11-02 04:35:04 +0000;Fix problem with dgesdd where the optimal work size is not computed correctly.

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/multiarraymodule.c
numpy/linalg/lapack_litemodule.c
numpy/linalg/linalg.py
==================
a39c1cd;Pearu Peterson;2006-11-01 10:09:49 +0000;F2PY G3: Cont impl F2003 parser; defined all syntax rules.

==

numpy/f2py/lib/parser/Fortran2003.py
numpy/f2py/lib/parser/pattern_tools.py
numpy/f2py/lib/parser/test_Fortran2003.py
==================
66e484b;Travis Oliphant;2006-10-31 14:58:19 +0000;Revert hasobject to returning True or False

==

numpy/core/src/arrayobject.c
==================
d02c44d;Pearu Peterson;2006-10-31 13:28:31 +0000;F2PY: Cont implementing Fortran 2003 parser. Clean up.

==

numpy/f2py/lib/parser/Fortran2003.py
numpy/f2py/lib/parser/expressions.py
numpy/f2py/lib/parser/readfortran.py
numpy/f2py/lib/parser/statements2.py
numpy/f2py/lib/parser/test_expressions.py
numpy/f2py/lib/parser/test_statements2.py
==================
b18a794;Travis Oliphant;2006-10-31 05:17:46 +0000;Fix OBJECT_argmax problem and add test.

==

numpy/core/src/arraytypes.inc.src
numpy/core/tests/test_regression.py
==================
2f43a2f;Travis Oliphant;2006-10-30 22:45:31 +0000;Fix some reference-count problems in f2py with data-type objects.

==

numpy/f2py/src/fortranobject.c
==================
6d3f78e;Travis Oliphant;2006-10-30 22:05:11 +0000;Fixes when fielddict is None

==

numpy/core/records.py
==================
4d11fdf;Pearu Peterson;2006-10-30 19:21:25 +0000;F2PY: Cont. unifying Fortran stmt and expr parsers.

==

numpy/f2py/lib/parser/Fortran2003.py
numpy/f2py/lib/parser/api.py
numpy/f2py/lib/parser/expressions.py
numpy/f2py/lib/parser/pattern_tools.py
numpy/f2py/lib/parser/readfortran.py
numpy/f2py/lib/parser/splitline.py
numpy/f2py/lib/parser/statements2.py
numpy/f2py/lib/parser/test_expressions.py
numpy/f2py/lib/parser/test_statements2.py
==================
693762b;Travis Oliphant;2006-10-29 07:38:25 +0000;Add test for recent fixes to recarray setattr.  Replace sb.ndarray with global variable ndarray

==

numpy/core/records.py
numpy/core/tests/test_records.py
==================
163ae26;Travis Oliphant;2006-10-29 06:39:30 +0000;Fix the inability of record arrays to be able to set field data by setting the attribute of that field name to some value.

==

numpy/core/records.py
==================
5de1934;Travis Oliphant;2006-10-28 18:46:24 +0000;Fix usage of 'as' as a variable

==

numpy/core/numeric.py
==================
585f922;Travis Oliphant;2006-10-28 09:27:49 +0000;Use more general notion.

==

numpy/core/src/scalartypes.inc.src
==================
668574c;Travis Oliphant;2006-10-28 09:26:36 +0000;One more fix for allowing use of setitem in PyArray_FromScalar instead of memcpy

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/scalartypes.inc.src
==================
c355157;Travis Oliphant;2006-10-28 09:18:00 +0000;Expand usage of hasobject to be a flag-like entity keeping track of how the data-type should be used.

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
==================
6a56d81;Travis Oliphant;2006-10-27 21:42:27 +0000;Fix to allow typeobjects in array descriptors which are not sub-types of array scalars.

==

numpy/core/src/arrayobject.c
numpy/core/src/scalartypes.inc.src
==================
0051241;Travis Oliphant;2006-10-27 20:44:32 +0000;fixes to last commits.

==

numpy/core/src/arrayobject.c
numpy/core/src/scalartypes.inc.src
==================
cc32637;Travis Oliphant;2006-10-27 20:43:01 +0000;scalar value doesn't fail.

==

numpy/core/src/arrayobject.c
numpy/core/src/scalartypes.inc.src
==================
791fa38;Travis Oliphant;2006-10-27 20:41:58 +0000;More fixes to allow user-defined types in C.

==

numpy/core/src/arrayobject.c
numpy/core/src/scalartypes.inc.src
==================
3c64ccd;Travis Oliphant;2006-10-27 16:56:32 +0000;Allow subtypes of all array scalars and fix-up scalar_value to accept sub-types.

==

numpy/core/src/arrayobject.c
numpy/core/src/scalartypes.inc.src
==================
50c0847;Travis Oliphant;2006-10-27 16:10:34 +0000;Re-organize user-defined check.

==

numpy/core/src/scalartypes.inc.src
==================
4a8eb74;Travis Oliphant;2006-10-27 16:03:16 +0000;Fix PyArray_Scalar to handle user-defined types.

==

numpy/core/src/arrayobject.c
numpy/core/src/scalartypes.inc.src
==================
9bc2e05;Pearu Peterson;2006-10-27 06:26:54 +0000;F2PY: start unifying Fortran statement and expression parsers.

==

numpy/f2py/lib/parser/Fortran2003.py
numpy/f2py/lib/parser/expressions.py
numpy/f2py/lib/parser/statements2.py
==================
937e4db;Travis Oliphant;2006-10-26 17:55:30 +0000;Eliminate test for longfloat.

==

numpy/core/tests/test_regression.py
==================
9e44f62;Travis Oliphant;2006-10-26 17:20:55 +0000;Fix-up the THANKS file.

==

THANKS.txt
==================
5db1af4;Travis Oliphant;2006-10-26 17:20:22 +0000;Fix-up the THANKS file.

==

THANKS.txt
==================
1dd7c93;Pearu Peterson;2006-10-25 15:40:10 +0000;F2PY G3: more tests for Fortran expr parser.

==

numpy/f2py/lib/parser/expressions.py
numpy/f2py/lib/parser/test_expressions.py
==================
cf818fd;Travis Oliphant;2006-10-25 11:37:30 +0000;Fix vectorize bug ignoring otypes.

==

numpy/lib/function_base.py
==================
2d3a2f6;Pearu Peterson;2006-10-25 10:41:11 +0000;F2PY: Optimised Fortran expr parser. Fixed bugs.

==

numpy/f2py/lib/parser/expressions.py
numpy/f2py/lib/parser/test_expressions.py
==================
b2eb929;Travis Oliphant;2006-10-25 09:05:07 +0000;Update version number of trunk.

==

numpy/version.py
==================
75981b8;Travis Oliphant;2006-10-25 06:21:04 +0000;Add test for recent bug in indexing optimization.

==

numpy/core/tests/test_regression.py
==================
24b485d;Travis Oliphant;2006-10-25 06:15:40 +0000;Fix optimization so that array's of 1-element are not interpeted as integers.

==

numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
==================
1e25ae2;Pearu Peterson;2006-10-24 21:51:42 +0000;F2PY G3: finished Fortran expression parser implementation, comes with complete unittests.

==

numpy/f2py/lib/parser/expressions.py
numpy/f2py/lib/parser/pattern_tools.py
numpy/f2py/lib/parser/test_expressions.py
==================
ef8c2a7;Travis Oliphant;2006-10-24 07:26:55 +0000;Fix some typos and allow use of F_CONTIGUOUS and C_CONTIGUOUS in requires.

==

numpy/core/numeric.py
numpy/core/src/arraymethods.c
==================
3f4f586;Travis Oliphant;2006-10-24 07:15:28 +0000;Add more keys to _flagdict.  Fix uses of F_CONTIGUOUS and C_CONTIGUOUS up a bit and make sure flags in num_to_flags includes only full flag names.

==

numpy/core/include/numpy/noprefix.h
numpy/core/src/multiarraymodule.c
numpy/ctypeslib.py
==================
3347ff8;Travis Oliphant;2006-10-24 06:52:30 +0000;Add warning for ctypes < 1.0.1 and fix test and add C_CONTIGUOUS and F_CONTIGUOUS to multiarray._flagdict

==

numpy/core/src/multiarraymodule.c
numpy/core/tests/test_defmatrix.py
numpy/ctypeslib.py
==================
88254d5;Travis Oliphant;2006-10-23 23:17:22 +0000;Initialize pos before calling PyDict_Next.

==

numpy/core/src/ufuncobject.c
==================
5817ed4;Travis Oliphant;2006-10-23 23:08:00 +0000;Add .A1 property to matrices to be equivalent to .__array__().ravel()

==

numpy/core/defmatrix.py
==================
4ea6483;Pearu Peterson;2006-10-23 22:41:47 +0000;F2PY G3: Cont implementing Fortran expression parser, almost finished.

==

numpy/f2py/lib/parser/expressions.py
numpy/f2py/lib/parser/pattern_tools.py
numpy/f2py/lib/parser/test_expressions.py
==================
b98a6d7;Travis Oliphant;2006-10-23 22:22:41 +0000;Don't allow builtin data-type objects to be deallocated.

==

numpy/core/src/arrayobject.c
==================
440a262;Travis Oliphant;2006-10-23 22:03:14 +0000;Add ability to sort arrays with fields defined more intelligently.

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
==================
ce92c89;Travis Oliphant;2006-10-23 20:44:07 +0000;Add ticket #358 to improve detection of reshape that does not require a copy.

==

numpy/core/src/multiarraymodule.c
numpy/core/tests/test_regression.py
==================
46d56d0;Travis Oliphant;2006-10-23 19:42:59 +0000;Use fp_swap_flag(0) to reset flags on AIX.  Ticket #362

==

numpy/core/include/numpy/ufuncobject.h
==================
90372cf;Stefan van der Walt;2006-10-23 16:30:18 +0000;In ix_, do not modify shape of input array.

==

numpy/lib/index_tricks.py
==================
400ba83;Pearu Peterson;2006-10-23 11:42:09 +0000;F2PY G3: Cont. implementing Fortran expression parser and unittests.

==

numpy/f2py/lib/parser/expressions.py
numpy/f2py/lib/parser/pattern_tools.py
numpy/f2py/lib/parser/test_expressions.py
==================
0de69a4;Pearu Peterson;2006-10-22 21:42:46 +0000;F2PY G3: implementingg Fortran expression parser cont.

==

numpy/f2py/lib/parser/expressions.py
numpy/f2py/lib/parser/pattern_tools.py
numpy/f2py/lib/parser/test_expressions.py
==================
0397a05;Pearu Peterson;2006-10-21 09:55:23 +0000;F2PY G3: fixed bugs (ticket 361), impl expression parser.

==

numpy/f2py/lib/parser/base_classes.py
numpy/f2py/lib/parser/expressions.py
numpy/f2py/lib/parser/pattern_tools.py
==================
6b7adee;Travis Oliphant;2006-10-21 05:48:11 +0000;Fix possible unitialized 'i' to fix #359

==

numpy/core/src/ufuncobject.c
==================
b5a1759;Pearu Peterson;2006-10-20 12:32:23 +0000;F2PY G3: Impl. pattern tools for expression parsing.

==

numpy/f2py/lib/parser/expressions.py
numpy/f2py/lib/parser/pattern_tools.py
numpy/f2py/lib/parser/test_expressions.py
==================
5e6ae5b;Pearu Peterson;2006-10-20 06:44:43 +0000;F2PY G3: started impl array support.

==

numpy/f2py/lib/main.py
numpy/f2py/lib/py_wrap_subprogram.py
numpy/f2py/lib/py_wrap_type.py
numpy/f2py/lib/test_scalar_in_out.py
==================
b489d3b;Pearu Peterson;2006-10-20 06:43:31 +0000;F2PY G3: started impl array support and expression parser.

==

numpy/f2py/lib/parser/base_classes.py
numpy/f2py/lib/parser/expressions.py
numpy/f2py/lib/parser/test_expressions.py
numpy/f2py/lib/parser/typedecl_statements.py
numpy/f2py/lib/parser/utils.py
==================
d4b47b7;Travis Oliphant;2006-10-19 22:55:23 +0000;Fix missing comment characters in intel.py.  Check for None in .reshape and .resize

==

numpy/core/src/arraymethods.c
numpy/distutils/fcompiler/intel.py
==================
ec2c2bc;Pearu Peterson;2006-10-19 22:03:23 +0000;Add Intel Itanium compiler 9.x support (needs testing).

==

numpy/distutils/fcompiler/intel.py
==================
0d9589d;Tim Hochberg;2006-10-19 18:26:00 +0000;Added tests for errstate(call=x). Made minor change to errstate so that an existing call can be suppressed using None during a block as well replaced.

==

numpy/core/numeric.py
numpy/core/tests/test_errstate.py
==================
c08e80e;Travis Oliphant;2006-10-19 17:27:55 +0000;Eliminate more warnings in testing.

==

numpy/core/numeric.py
numpy/core/tests/test_ma.py
==================
e84754a;Tim Hochberg;2006-10-19 16:45:36 +0000;Fix tests to run cleanly with new, tighter error handling.

==

numpy/core/tests/test_ma.py
numpy/lib/tests/test_type_check.py
numpy/lib/tests/test_ufunclike.py
==================
ab5a8a2;Travis Oliphant;2006-10-19 15:18:55 +0000;Fix longfloat test on platforms where they are the same as doubles.  Add ability to set error call-back/logging-object in errstate object.

==

numpy/core/numeric.py
numpy/core/tests/test_regression.py
==================
bea2f1c;Travis Oliphant;2006-10-19 14:36:44 +0000;Fix length early in IntpConverter.

==

numpy/core/src/multiarraymodule.c
==================
88c3c46;Pearu Peterson;2006-10-19 10:11:40 +0000;f2py-2e is not ready for PyArray_STRING, using PyArray_CHAR for now (character*n support has improved in f2py-g3.).

==

numpy/f2py/capi_maps.py
==================
bafa719;Travis Oliphant;2006-10-19 00:26:05 +0000;Fix test.

==

numpy/core/tests/test_regression.py
==================
448f385;Travis Oliphant;2006-10-19 00:13:48 +0000;Add print and log facilities to error handling and change the default error mode to divide='print', over='print', invalid='print', and under='ignore'

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/include/numpy/ufuncobject.h
numpy/core/numeric.py
numpy/core/src/scalarmathmodule.c.src
numpy/core/src/ufuncobject.c
numpy/core/src/umathmodule.c.src
==================
42ec061;Travis Oliphant;2006-10-18 22:52:29 +0000;Allow F_CONTIGUOUS and C_CONTIGUOUS as aliases to FORTRAN and CONTIGUOUS

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/arrayobject.c
==================
b022765;Travis Oliphant;2006-10-18 18:15:26 +0000;Fix-up so that if on creation, a string or unicode data-type has an empty elsize it is reset to the size of one character.

==

numpy/core/src/arrayobject.c
==================
2e7c822;Travis Oliphant;2006-10-18 18:05:35 +0000;Fix Ticket #352

==

THANKS.txt
numpy/core/src/arrayobject.c
numpy/core/tests/test_regression.py
==================
ed7b368;Travis Oliphant;2006-10-18 07:09:19 +0000;Change to sig (signature) keyword.

==

numpy/core/src/ufuncobject.c
==================
5d17dd0;Travis Oliphant;2006-10-18 07:08:13 +0000;Allow entry in self->types to type= keyword.  Change from dtype= keyword because it doesn't always follow the rules of data-type conversion.

==

numpy/core/src/ufuncobject.c
==================
0bcccc6;Travis Oliphant;2006-10-18 06:38:26 +0000;Add ability to select specific 1-d loop to use when calling a ufunc, either by the output type or an exact signature.  An error occurs if a 1-d loop is not found to match the specification.

==

numpy/core/src/ufuncobject.c
==================
4590e9b;Travis Oliphant;2006-10-18 04:44:28 +0000;Fix so that reshape copies fewer times. Fix so that arr.ctypes.data returns the integer and arr.ctypes._as_parameter_ returns the c_void_p type

==

numpy/core/_internal.py
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
==================
0e70085;Travis Oliphant;2006-10-17 23:53:52 +0000;Increase the C-API and allow ufuncs to be given keyword arguments.  Re-compile extension modules after updating to this revision number.  extobj= and dtype= keywords are possible, but only extobj= is implemented in this revision.

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/numeric.py
numpy/core/src/ufuncobject.c
==================
8a142f7;Travis Oliphant;2006-10-17 21:43:08 +0000;Allow ability to reset the string function to the builtin string function.

==

numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
==================
32b16bb;Travis Oliphant;2006-10-17 17:19:29 +0000;Change the 'array' function so that forcecast is true.

==

numpy/core/src/multiarraymodule.c
==================
a70ebab;Travis Oliphant;2006-10-17 17:14:25 +0000;Fix PyArray_FromAny so that it raises an exception on casting unless FORCECAST is True.

==

numpy/core/src/arrayobject.c
==================
637f70c;Travis Oliphant;2006-10-17 16:35:20 +0000;Fix #350 by changing wording.

==

numpy/core/src/ufuncobject.c
==================
cf7a96e;Travis Oliphant;2006-10-17 16:07:42 +0000;include <signal.h> when trying check for SIGSEGV

==

numpy/core/src/multiarraymodule.c
==================
1e263c2;Travis Oliphant;2006-10-17 16:01:37 +0000;Re-format THANKS.txt and add check for reshape order argument.

==

THANKS.txt
numpy/core/tests/test_regression.py
==================
405115b;Travis Oliphant;2006-10-17 15:53:59 +0000;Fix reshape for FORTRAN order from 1-d arrays.

==

numpy/core/src/multiarraymodule.c
==================
6130751;edschofield;2006-10-17 15:29:20 +0000;Added yours truly to THANKS.txt

==

THANKS.txt
==================
fcc5b25;Travis Oliphant;2006-10-16 18:11:31 +0000;Applied patch for ticket #345: fix to test_errstate for Python 2.5

==

numpy/core/tests/test_errstate.py
==================
15155cf;Charles Harris;2006-10-16 17:55:30 +0000;Fix qr decomposition. The dimensions m,n were taken from the fortran ordered array instead of from the numpy ordered array and consequently were reversed.

==

numpy/lib/polynomial.py
numpy/linalg/linalg.py
==================
ff1c663;Travis Oliphant;2006-10-16 17:44:09 +0000;Fix finfo eps and huge to be array scalars of the appropriate type.  And use finfo interface instead of MachAr.

==

numpy/lib/getlimits.py
numpy/lib/polynomial.py
==================
533fba2;Charles Harris;2006-10-16 05:07:45 +0000;Change error exception to RankWarning. Add keyword argument full to get full fit info. Make 'always' the default of RankWarning. Improve documentation.

==

numpy/lib/polynomial.py
==================
c951acd;Charles Harris;2006-10-15 04:37:30 +0000;Make sure order is an integer

==

numpy/lib/polynomial.py
==================
658b94a;Charles Harris;2006-10-15 03:05:06 +0000;Set rcond to precision of x as default. Make error message more informative.

==

numpy/lib/polynomial.py
==================
62e610e;Charles Harris;2006-10-14 21:34:16 +0000;Scale the x vector in polyfit to improve condition of Vandermonde matrix. Throw error on rank reduction in polyfit. Error should probably be replace with a warning at some point. Add argument checks in polyfit.

==

numpy/lib/polynomial.py
==================
f1c9d44;Pearu Peterson;2006-10-14 21:22:07 +0000;F2PY G3: fixed compiler warnings.

==

numpy/f2py/lib/main.py
numpy/f2py/lib/py_wrap.py
numpy/f2py/lib/py_wrap_subprogram.py
numpy/f2py/lib/py_wrap_type.py
==================
1c36f49;Stefan van der Walt;2006-10-14 09:50:35 +0000;Add test for ticket #339.

==

numpy/core/tests/test_regression.py
==================
81e481b;Stefan van der Walt;2006-10-14 00:09:29 +0000;Add tests for tickets #335, #341, #342 and #344.

==

numpy/core/tests/test_regression.py
==================
099f140;Travis Oliphant;2006-10-13 20:50:00 +0000;Add roll function from ticket #293

==

numpy/core/numeric.py
numpy/lib/shape_base.py
==================
ec5a391;Pearu Peterson;2006-10-13 20:41:27 +0000;F2PY G3: modules can import f90 derived type wrappers from other modules.

==

numpy/f2py/lib/py_wrap_subprogram.py
numpy/f2py/lib/py_wrap_type.py
numpy/f2py/lib/test_module_module.py
numpy/f2py/lib/wrapper_base.py
==================
2d2cc2c;Travis Oliphant;2006-10-13 20:13:17 +0000;Fix ticket #342.

==

numpy/core/src/arrayobject.c
==================
9416787;Travis Oliphant;2006-10-13 19:56:17 +0000;Fix ticket #344: normalize repr of dtypes with shapes.  Also change align argument in dtype constructor to be a boolean.

==

numpy/core/src/arrayobject.c
==================
58541aa;Charles Harris;2006-10-13 19:37:48 +0000;Mention scaling in the polyfit docstring.

==

numpy/lib/polynomial.py
==================
10f2827;Travis Oliphant;2006-10-13 19:26:43 +0000;Fix mgrid for count of 1

==

numpy/lib/index_tricks.py
==================
bee7545;Travis Oliphant;2006-10-13 19:09:04 +0000;Fix ticket #341: part with 'c' arrays not being comparable to strings.

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/arrayobject.c
==================
81abf63;Travis Oliphant;2006-10-13 18:54:02 +0000;Fixes from 64-bit warnings in ticket #337

==

numpy/core/src/arrayobject.c
numpy/core/src/scalartypes.inc.src
numpy/core/src/ufuncobject.c
==================
96140d2;Travis Oliphant;2006-10-13 18:45:44 +0000;Add fix so that '()type' is detected

==

numpy/core/src/multiarraymodule.c
==================
4f83a34;Travis Oliphant;2006-10-13 18:18:18 +0000;Fix-up tensor solve and tensor inv and rename to match tensordot.

==

numpy/core/numeric.py
numpy/linalg/linalg.py
==================
45f9558;Pearu Peterson;2006-10-13 17:18:28 +0000;F2PY G3: exposing f90 type information via _API variable for other modules.

==

numpy/f2py/lib/py_wrap.py
numpy/f2py/lib/py_wrap_type.py
numpy/f2py/lib/test_module_module.py
==================
4a69a27;Charles Harris;2006-10-13 17:08:24 +0000;Add a rcond parameter to the polyfit function and give it the double precision default value that dgelsd uses (rcondx=-1) on the principle of least surprise. Values of rcond less than this can also be useful, so a warning message and a bit of explanation was added to the documentation.
The default value used by lstsq was set to the default (-1), and rcond in pinv
has a default value of 1e-15.

==

numpy/lib/polynomial.py
numpy/linalg/linalg.py
==================
9361c17;Pearu Peterson;2006-10-13 11:52:25 +0000;F2PY: Impl. (suboptimal) solution for nested f90 module wrapping.

==

numpy/f2py/lib/parser/block_statements.py
numpy/f2py/lib/py_wrap.py
numpy/f2py/lib/py_wrap_subprogram.py
numpy/f2py/lib/py_wrap_type.py
numpy/f2py/lib/test_module_module.py
numpy/f2py/lib/wrapper_base.py
==================
0aaac11;Travis Oliphant;2006-10-13 00:41:44 +0000;Add solvetensor and invtensor

==

numpy/core/numeric.py
numpy/linalg/linalg.py
==================
f2d36cc;Tim Hochberg;2006-10-12 19:29:12 +0000;Forgot this file in last commit:
Added docstring and tests to errstate. Also added 'all' option for seterr so that we can set all the options at once. Note that tests on errstate are only run in Python 2.5 and higher.



==

numpy/core/tests/test_errstate.py
==================
abb7a32;Tim Hochberg;2006-10-12 19:19:04 +0000;Added docstring and tests to errstate. Also added 'all' option for seterr so that we can set all the options at once. Note that tests on errstate are only run in Python 2.5 and higher.

==

numpy/core/numeric.py
numpy/core/tests/test_numeric.py
==================
61d36f3;Tim Hochberg;2006-10-12 19:16:55 +0000;Under Python 2.5 on windows test_multiarray was failing mysteriously. Applying normpath to set_local_path cured that.

==

numpy/testing/numpytest.py
==================
53bf14a;Robert Cimrman;2006-10-12 11:19:01 +0000;

==

numpy/lib/arraysetops.py
==================
b5fc735;Robert Cimrman;2006-10-12 11:14:55 +0000;modernized to use new numpy features, speed-up of unique1d, doc update

==

numpy/lib/arraysetops.py
==================
e5bb060;Travis Oliphant;2006-10-12 06:18:04 +0000;Fix asbuffer -> int_asbuffer so that it checks for read (and write) ability to the memory to be used as a buffer by catching SIG_SEGV

==

numpy/core/numeric.py
numpy/core/src/multiarraymodule.c
==================
cf3eb93;Travis Oliphant;2006-10-11 23:52:53 +0000;Add errstate object to be created in new 'with' statement

==

numpy/core/numeric.py
==================
1031df2;Travis Oliphant;2006-10-11 23:28:16 +0000;Fix scimath.power for negative integer input.

==

numpy/lib/scimath.py
==================
bafea8e;Stefan van der Walt;2006-10-11 21:22:58 +0000;Test for ticket #334.

==

numpy/core/tests/test_regression.py
==================
7338a7e;Travis Oliphant;2006-10-11 20:56:27 +0000;Fix some name-space errors in scimath.

==

numpy/lib/scimath.py
==================
a6f8d27;Pearu Peterson;2006-10-11 19:38:06 +0000;F2PY G3: Impl. F90 module subprogram support and simple tests.

==

numpy/f2py/lib/py_wrap_subprogram.py
numpy/f2py/lib/test_module_scalar.py
==================
87e3010;Travis Oliphant;2006-10-11 19:10:51 +0000;Make (type,()) return type

==

numpy/core/src/multiarraymodule.c
==================
d6c1b18;Pearu Peterson;2006-10-11 11:25:58 +0000;F2PY G3: Impl. scalar function support and tests.

==

numpy/f2py/lib/main.py
numpy/f2py/lib/py_wrap.py
numpy/f2py/lib/py_wrap_subprogram.py
numpy/f2py/lib/py_wrap_type.py
numpy/f2py/lib/test_derived_scalar.py
numpy/f2py/lib/test_scalar_function_in.py
numpy/f2py/lib/test_scalar_in_out.py
==================
92a2537;Pearu Peterson;2006-10-11 11:25:02 +0000;F2PY G3: improved public/private spec handling. Added function wrapping support.

==

numpy/f2py/lib/parser/base_classes.py
numpy/f2py/lib/parser/block_statements.py
numpy/f2py/lib/parser/statements.py
numpy/f2py/lib/parser/typedecl_statements.py
==================
c0f1f96;Travis Oliphant;2006-10-11 00:39:23 +0000;Fix asbuffer function.

==

numpy/core/src/multiarraymodule.c
==================
02b451e;Stefan van der Walt;2006-10-10 23:19:05 +0000;Remove extra semi-colon.

==

numpy/add_newdocs.py
==================
7147b21;Stefan van der Walt;2006-10-10 23:17:54 +0000;Fidget with average/mean docstrings.

==

numpy/add_newdocs.py
numpy/lib/function_base.py
==================
f52ca5b;Stefan van der Walt;2006-10-10 23:15:58 +0000;Simplify mean and average docstrings.

==

numpy/add_newdocs.py
numpy/lib/function_base.py
==================
349a841;Pearu Peterson;2006-10-10 20:27:23 +0000;Improved is_free_format.

==

numpy/distutils/fcompiler/__init__.py
==================
cc44342;Stefan van der Walt;2006-10-10 12:25:44 +0000;Test for ticket #330.

==

numpy/core/tests/test_regression.py
==================
f558fbb;Pearu Peterson;2006-10-10 09:08:28 +0000;Resolved ticket 285: imporved error messages

==

numpy/f2py/f2py2e.py
==================
0330812;Travis Oliphant;2006-10-10 08:52:18 +0000;Fix segfault in .imag for real array scalars.  Be specific about infix multiplication.

==

numpy/core/src/scalartypes.inc.src
numpy/lib/shape_base.py
==================
a307a7f;Travis Oliphant;2006-10-09 20:44:45 +0000;Get rid of warning on main trunk.

==

numpy/core/src/multiarraymodule.c
==================
f9b93a7;Pearu Peterson;2006-10-09 20:31:16 +0000;F2PY G3: refactored Python specific wrapper code from parser.

==

numpy/f2py/lib/parser/block_statements.py
numpy/f2py/lib/parser/typedecl_statements.py
numpy/f2py/lib/py_wrap_subprogram.py
numpy/f2py/lib/py_wrap_type.py
numpy/f2py/lib/test_derived_scalar.py
==================
ecbabb3;Travis Oliphant;2006-10-09 08:45:20 +0000;Speed up concatenate and choose when sequence is an array.

==

numpy/core/src/multiarraymodule.c
==================
9c9f739;Travis Oliphant;2006-10-09 07:47:06 +0000;Fix kron for multiple-dimensions.  kron is defined so tile(b, s) is the same as kron(ones(s,b.dtype), b)

==

numpy/lib/shape_base.py
numpy/lib/tests/test_shape_base.py
==================
b7f719a;Pearu Peterson;2006-10-08 13:16:13 +0000;F2PY G3: added simple test for subroutine with derived type intent(in,out) argument. Fixed bugs.

==

numpy/f2py/lib/main.py
numpy/f2py/lib/parser/base_classes.py
numpy/f2py/lib/parser/block_statements.py
numpy/f2py/lib/parser/statements.py
numpy/f2py/lib/parser/typedecl_statements.py
numpy/f2py/lib/py_wrap_type.py
numpy/f2py/lib/test_derived_scalar.py
numpy/f2py/lib/test_scalar_in_out.py
==================
416f306;Pearu Peterson;2006-10-08 09:38:12 +0000;numpy.distutils: fixed bug.

==

numpy/distutils/fcompiler/__init__.py
==================
45e9246;Pearu Peterson;2006-10-08 09:30:17 +0000;numpy.distutils: use language flag or source file extension to select default f77 or f90 compiler.

==

numpy/distutils/command/build_clib.py
numpy/distutils/command/build_ext.py
numpy/distutils/fcompiler/__init__.py
numpy/distutils/fcompiler/gnu.py
numpy/distutils/misc_util.py
==================
cc7fd3d;Pearu Peterson;2006-10-08 06:37:50 +0000;F2PY G3: added support and tests for character*(*) types.

==

numpy/f2py/lib/generate_pyobj_tofrom_funcs.py
numpy/f2py/lib/parser/typedecl_statements.py
numpy/f2py/lib/py_wrap_subprogram.py
numpy/f2py/lib/py_wrap_type.py
numpy/f2py/lib/test_scalar_in_out.py
numpy/f2py/lib/wrapper_base.py
==================
fd52a61;Pearu Peterson;2006-10-07 18:05:18 +0000;F2PY G3: Impl. support and tests for scalar logical and character*<len> types.

==

numpy/f2py/lib/parser/typedecl_statements.py
numpy/f2py/lib/py_wrap_type.py
numpy/f2py/lib/test_scalar_in_out.py
==================
dbe29f4;Stefan van der Walt;2006-10-07 15:13:03 +0000;Kron is now N-dimensional, so remove rank check.

==

numpy/lib/tests/test_shape_base.py
==================
0d127c8;Stefan van der Walt;2006-10-07 15:04:51 +0000;Add test for insert.

==

numpy/lib/tests/test_function_base.py
==================
a09fa7d;Stefan van der Walt;2006-10-07 14:52:08 +0000;Close ticket #328.

==

numpy/lib/function_base.py
==================
8d93420;Pearu Peterson;2006-10-07 08:50:25 +0000;F2PY G3: clean up.

==

numpy/f2py/lib/src/SCALARS_IN_BITS.cpp
numpy/f2py/lib/src/pyobj_to_Py_complex.c
numpy/f2py/lib/src/pyobj_to_double.c
numpy/f2py/lib/src/pyobj_to_long.c
numpy/f2py/lib/src/pyobj_to_npy_longlong.c
==================
90d11ae;Pearu Peterson;2006-10-07 08:49:08 +0000;F2PY G3: completed test site for int,float,complex scalar support. Fixed bugs.

==

numpy/f2py/lib/generate_pyobj_tofrom_funcs.py
numpy/f2py/lib/parser/base_classes.py
numpy/f2py/lib/parser/typedecl_statements.py
numpy/f2py/lib/py_wrap_type.py
numpy/f2py/lib/python_wrapper.py
numpy/f2py/lib/src/pyobj_to_Py_complex.c
numpy/f2py/lib/src/pyobj_to_double.c
numpy/f2py/lib/src/pyobj_to_long.c
numpy/f2py/lib/src/pyobj_to_npy_longlong.c
numpy/f2py/lib/test_scalar_in_out.py
==================
79f992d;Pearu Peterson;2006-10-07 08:00:20 +0000;Added NPY_<CLS><BITS>_FMT macros.

==

numpy/core/include/numpy/ndarrayobject.h
==================
e518185;Travis Oliphant;2006-10-07 02:59:33 +0000;Fix kron to be N-dimensional.

==

numpy/lib/shape_base.py
==================
ba6b099;Stefan van der Walt;2006-10-07 02:44:41 +0000;Fix typo in tile.

==

numpy/lib/shape_base.py
==================
c75bd2d;Travis Oliphant;2006-10-07 02:23:35 +0000;Add tests for tile and fix error.

==

numpy/lib/shape_base.py
numpy/lib/tests/test_shape_base.py
==================
1ff0cd9;Travis Oliphant;2006-10-07 02:12:09 +0000;Add tile to numpy and move repmat to matlib.py

==

numpy/lib/shape_base.py
numpy/matlib.py
==================
831feb7;Travis Oliphant;2006-10-07 01:45:32 +0000;Get rid of unused variables.

==

numpy/core/src/arraytypes.inc.src
==================
54fc7a4;Stefan van der Walt;2006-10-07 01:42:57 +0000;Add test for ticket #325.

==

numpy/core/tests/test_regression.py
==================
1e339d7;Travis Oliphant;2006-10-07 01:42:39 +0000;Fix last OBJECT function to handle NULLS.

==

numpy/core/src/arraytypes.inc.src
==================
ce24459;Stefan van der Walt;2006-10-07 01:36:39 +0000;Test for ticket #327.

==

numpy/core/tests/test_regression.py
==================
fe0b9ed;Travis Oliphant;2006-10-07 01:35:17 +0000;Fix ticket #325

==

numpy/core/src/arraytypes.inc.src
numpy/lib/function_base.py
==================
505a95a;Stefan van der Walt;2006-10-07 01:34:24 +0000;Fix ticket #327.

==

numpy/core/src/ufuncobject.c
==================
d79e367;Stefan van der Walt;2006-10-07 01:09:36 +0000;Add test for ticket #302.

==

numpy/core/tests/test_regression.py
==================
1ce64f7;Stefan van der Walt;2006-10-07 01:04:00 +0000;Add test for ticket #324.

==

numpy/core/tests/test_regression.py
==================
a2e090a;Travis Oliphant;2006-10-07 00:09:02 +0000;Fix ticket #324: not returning minimum array.

==

numpy/core/src/multiarraymodule.c
==================
1c88a77;Stefan van der Walt;2006-10-06 18:56:24 +0000;Add tests for tickets #312, #322, for polynomial roots and for setting elements in object arrays.

==

numpy/core/tests/test_regression.py
numpy/lib/tests/test_polynomial.py
==================
2c40600;Pearu Peterson;2006-10-06 04:57:17 +0000;F2PY G3: fixed bugs, started adding features.

==

numpy/f2py/lib/main.py
numpy/f2py/lib/parser/base_classes.py
numpy/f2py/lib/parser/typedecl_statements.py
numpy/f2py/lib/py_wrap_subprogram.py
==================
30cdb16;Travis Oliphant;2006-10-05 23:36:47 +0000;Re-work flat index setting to handle integer case better for objects arrays.

==

numpy/core/src/arrayobject.c
==================
ee3d027;Travis Oliphant;2006-10-05 19:05:47 +0000;Fix ticket #323 --- problem with roots all zeros and all zero coefficients.

==

numpy/lib/polynomial.py
==================
be91788;Travis Oliphant;2006-10-05 19:02:34 +0000;Fix ticket #322

==

numpy/core/records.py
==================
310966e;Travis Oliphant;2006-10-05 18:53:05 +0000;Fix ticket #320

==

numpy/core/records.py
==================
d8459ee;Travis Oliphant;2006-10-05 18:51:37 +0000;Fix ticket #319.  There may still be a problem in casting from one data-type with nested fields to another.

==

numpy/core/src/multiarraymodule.c
==================
22f16b3;Pearu Peterson;2006-10-05 16:59:15 +0000;Bug fix for DATA statement with components containing subexpressions.

==

numpy/f2py/crackfortran.py
==================
f0bfc44;Pearu Peterson;2006-10-05 16:44:52 +0000;F2PY G3: added basic support for wrapping Fortran subprograms, scalar input only.

==

numpy/f2py/lib/generate_pyobj_tofrom_funcs.py
numpy/f2py/lib/main.py
numpy/f2py/lib/py_wrap.py
numpy/f2py/lib/py_wrap_subprogram.py
numpy/f2py/lib/py_wrap_type.py
numpy/f2py/lib/wrapper_base.py
==================
73eef3a;Pearu Peterson;2006-10-05 16:05:00 +0000;Defined Py<Cls><bitsize>ScalarObject and Py<Cls><bitsize>ArrType_Type CPP macros

==

numpy/core/include/numpy/arrayscalars.h
numpy/core/include/numpy/ndarrayobject.h
==================
d6abf85;Travis Oliphant;2006-10-05 13:37:20 +0000;Speed up broadcasting ufuncs by making sure the loop axis is the one with the smallest strides.

==

numpy/core/code_generators/array_api_order.txt
numpy/core/include/numpy/old_defines.h
numpy/core/src/arrayobject.c
numpy/core/src/ufuncobject.c
==================
97390cc;Pearu Peterson;2006-10-05 13:35:06 +0000;Fixed typos.

==

numpy/f2py/lib/main.py
numpy/f2py/lib/py_wrap_type.py
numpy/f2py/lib/wrapper_base.py
==================
d0899e7;Travis Oliphant;2006-10-05 11:45:28 +0000;Use .view in-place of astype in rec.array when new dtype is given.

==

numpy/core/records.py
==================
99fab64;Travis Oliphant;2006-10-05 11:37:56 +0000;Fix #317 typo.

==

numpy/core/records.py
==================
c6aa52d;Pearu Peterson;2006-10-05 07:23:48 +0000;F2PY G3: started subprogram support addition.

==

numpy/f2py/lib/main.py
numpy/f2py/lib/py_wrap.py
numpy/f2py/lib/py_wrap_subprogram.py
numpy/f2py/lib/py_wrap_type.py
numpy/f2py/lib/wrapper_base.py
==================
3a6607f;Travis Oliphant;2006-10-05 06:52:38 +0000;Fix so that rec.array copies by default.

==

numpy/core/records.py
==================
31016a0;Travis Oliphant;2006-10-05 06:40:42 +0000;Fix issue #313.  Also make sure shape attribute of dtype object always returns a tuple.

==

numpy/core/records.py
numpy/core/src/arrayobject.c
==================
c76a2c4;Travis Oliphant;2006-10-05 05:49:08 +0000;Fix up __array_interface__ getting and depth discovery for scalars.

==

numpy/core/src/arrayobject.c
numpy/core/src/scalartypes.inc.src
numpy/lib/function_base.py
==================
c620acd;Pearu Peterson;2006-10-04 09:49:54 +0000;F2PY G3: exposed wrappers via f2py script. A working example: wrap F90 module containing derived type with scalar components.

==

numpy/f2py/lib/main.py
numpy/f2py/lib/parser/api.py
numpy/f2py/lib/parser/base_classes.py
numpy/f2py/lib/parser/block_statements.py
numpy/f2py/lib/parser/parsefortran.py
numpy/f2py/lib/parser/statements.py
numpy/f2py/lib/py_wrap.py
numpy/f2py/lib/python_wrapper.py
==================
ac93e95;Travis Oliphant;2006-10-03 15:52:44 +0000;Fix typo.

==

numpy/core/records.py
==================
c7e811c;Travis Oliphant;2006-10-03 15:15:54 +0000;Allow lists to work with rec.array using fromrecords.py.  But, tuples are the standard for records as the ndarray only allows tuples to be used for records.

==

numpy/core/records.py
numpy/core/tests/test_regression.py
==================
6cef646;Travis Oliphant;2006-10-03 15:08:04 +0000;Convert to arrays earlier.

==

numpy/core/records.py
==================
e1a62e0;Travis Oliphant;2006-10-03 01:44:48 +0000;experiment with iterator speed up.

==

numpy/core/include/numpy/ndarrayobject.h
==================
0934daa;Travis Oliphant;2006-10-02 22:51:07 +0000;Use sb.array to handle the array interface.

==

numpy/core/records.py
==================
5c876be;Travis Oliphant;2006-10-02 22:48:14 +0000;Fix bugs: uncaught error, way record data-types print, asbuffer function fixed.

==

numpy/core/numeric.py
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
==================
d0791f7;Travis Oliphant;2006-10-02 22:17:56 +0000;Fix ticket #308 by sending more than just ndarray to fromarray.  Also, allow conversion of array-interfacing object to recarray.  Also add the asbuffer function to multiarray (but don't expose it) which allows creating buffer objects from memory locations.  User must be sure the object holding the memory is not deallocated before the new buffer.

==

numpy/core/records.py
numpy/core/src/multiarraymodule.c
==================
d03ee64;Travis Oliphant;2006-10-02 21:21:22 +0000;Fix #302 by being careful about situations where the index method is defined but the object is a sequence.

==

numpy/core/src/arrayobject.c
==================
022b06b;Pearu Peterson;2006-10-02 20:21:11 +0000;F2PY G3: exposing G3 to f2py script, fixed bugs, wrote source docs.

==

numpy/f2py/f2py2e.py
numpy/f2py/lib/__init__.py
numpy/f2py/lib/api.py
numpy/f2py/lib/generate_pyobj_tofrom_funcs.py
numpy/f2py/lib/main.py
numpy/f2py/lib/parser/api.py
numpy/f2py/lib/parser/base_classes.py
numpy/f2py/lib/parser/block_statements.py
numpy/f2py/lib/parser/statements.py
numpy/f2py/lib/python_wrapper.py
numpy/f2py/lib/setup.py
numpy/f2py/lib/src/pyobj_to_Py_complex.c
numpy/f2py/setup.py
==================
58c4378;Robert Kern;2006-10-02 16:41:47 +0000;Add .dylib as a valid OS X shared library extension.

==

numpy/distutils/system_info.py
==================
bd4a480;Pearu Peterson;2006-10-01 20:48:37 +0000;F2PY G3: fixed bugs, added float and complex scalars support.

==

numpy/f2py/lib/generate_pyobj_tofrom_funcs.py
numpy/f2py/lib/parser/typedecl_statements.py
numpy/f2py/lib/python_wrapper.py
numpy/f2py/lib/src/SCALARS_IN_BITS.cpp
==================
c3c53e6;Pearu Peterson;2006-10-01 11:49:23 +0000;F2PY G3: Moved Fortran parser related code to subpackage parser.

==

numpy/f2py/lib/analyzefortran.py
numpy/f2py/lib/base_classes.py
numpy/f2py/lib/block_statements.py
numpy/f2py/lib/doc.txt
numpy/f2py/lib/generate_pyobj_tofrom_funcs.py
numpy/f2py/lib/parsefortran.py
numpy/f2py/lib/parser/__init__.py
numpy/f2py/lib/parser/api.py
numpy/f2py/lib/parser/base_classes.py
numpy/f2py/lib/parser/block_statements.py
numpy/f2py/lib/parser/doc.txt
numpy/f2py/lib/parser/parsefortran.py
numpy/f2py/lib/parser/readfortran.py
numpy/f2py/lib/parser/sourceinfo.py
numpy/f2py/lib/parser/splitline.py
numpy/f2py/lib/parser/statements.py
numpy/f2py/lib/parser/test_parser.py
numpy/f2py/lib/parser/typedecl_statements.py
numpy/f2py/lib/parser/utils.py
numpy/f2py/lib/python_wrapper.py
numpy/f2py/lib/readfortran.py
numpy/f2py/lib/sourceinfo.py
numpy/f2py/lib/splitline.py
numpy/f2py/lib/statements.py
numpy/f2py/lib/test_parser.py
numpy/f2py/lib/typedecl_statements.py
numpy/f2py/lib/utils.py
==================
6c52e6f;Travis Oliphant;2006-09-30 23:33:23 +0000;Fix setting unicode/string arrays with 0-d arrays of type unicode and/or string.

==

numpy/core/src/arraytypes.inc.src
numpy/core/tests/test_multiarray.py
==================
87a1a60;Pearu Peterson;2006-09-30 21:02:52 +0000;F2PY G3: wrapping nested derived types.

==

numpy/f2py/lib/block_statements.py
numpy/f2py/lib/generate_pyobj_tofrom_funcs.py
numpy/f2py/lib/python_wrapper.py
numpy/f2py/lib/src/pyobj_to_Py_complex.c
numpy/f2py/lib/src/pyobj_to_long.c
numpy/f2py/lib/src/pyobj_to_npy_longlong.c
numpy/f2py/lib/src/pyobj_to_string_len.c
numpy/f2py/lib/typedecl_statements.py
numpy/f2py/lib/wrapper_base.py
==================
186a475;Travis Oliphant;2006-09-29 18:02:25 +0000;Only use the LongLong conversion if negative conversion worked.

==

numpy/core/src/arraytypes.inc.src
==================
aedd3d9;Travis Oliphant;2006-09-29 17:58:55 +0000;Allow -1 to be used on uint32 and uint64

==

numpy/core/src/arraytypes.inc.src
==================
b821b5c;Travis Oliphant;2006-09-28 17:46:22 +0000;Create PyArray_HasArrayInterface macro to simplify getting an array from the array interface.

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/arrayobject.c
==================
c9eba74;Stefan van der Walt;2006-09-28 16:22:43 +0000;Change unique1d's argument name from retindx to return_index.

==

numpy/lib/arraysetops.py
==================
5a490d0;Stefan van der Walt;2006-09-28 15:56:19 +0000;Add test for ticket #298.

==

numpy/core/tests/test_regression.py
==================
feb91f4;Travis Oliphant;2006-09-28 12:58:14 +0000;Update lexsort documentation a bit to give a hint as to how to use the keys to implement primary and secondary sorting

==

numpy/add_newdocs.py
==================
1b5e91c;Travis Oliphant;2006-09-28 12:49:01 +0000;Fix merge argsort for strings. Code was not indexing correctly into the array of strings.  Add object-detection so future addition of an object MERGE sort doesn't cause lexsort and threading to die.

==

numpy/core/src/_sortmodule.c.src
numpy/core/src/multiarraymodule.c
==================
a40b05b;cookedm;2006-09-28 11:23:18 +0000;For the MKL library, define the macro SCIPY_MKL_H

==

numpy/distutils/system_info.py
==================
0698cb7;cookedm;2006-09-28 11:20:52 +0000;Python 2.5 fixes: replace int with Py_ssize_t where appropiate

==

numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/scalartypes.inc.src
numpy/core/src/ufuncobject.c
numpy/numarray/_capi.c
==================
f9409c5;Travis Oliphant;2006-09-28 10:06:08 +0000;Fix documentation of fft sub-package to eliminate references to refft.

==

numpy/fft/info.py
==================
7906451;Travis Oliphant;2006-09-28 09:56:41 +0000;Fix the fromfunction routine to use float as default.  Update oldnumeric and numarray compatibility modules.

==

numpy/core/info.py
numpy/core/numeric.py
numpy/numarray/functions.py
numpy/oldnumeric/functions.py
numpy/oldnumeric/misc.py
==================
483ce06;Travis Oliphant;2006-09-28 02:22:21 +0000;Don't copy arrays inside ix_

==

numpy/lib/index_tricks.py
==================
38124a0;Travis Oliphant;2006-09-27 23:20:24 +0000;Fix printing of arrays with records so that nested arrays print as lists instead of using array syntax

==

numpy/core/arrayprint.py
numpy/core/src/scalartypes.inc.src
==================
74b68e3;Travis Oliphant;2006-09-27 22:46:11 +0000;Add quotes to printing strings.

==

numpy/core/arrayprint.py
==================
92d3aaf;Travis Oliphant;2006-09-27 17:40:14 +0000;Fix setting string and unicode arrays so that non-string sequences are not allowed.

==

numpy/core/src/arraytypes.inc.src
==================
9cfb0c6;Travis Oliphant;2006-09-27 17:01:35 +0000;Fix so that 'i4' and 'int32' are allways inserted into sctypeDict together.

==

numpy/core/numerictypes.py
==================
306f126;Travis Oliphant;2006-09-26 22:39:14 +0000;Allow scalars to be constructed with default values of 0.

==

numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
numpy/core/src/scalartypes.inc.src
==================
61fbe0e;Stefan van der Walt;2006-09-26 17:01:15 +0000;Sort only once in median.

==

numpy/lib/function_base.py
==================
aaaa7af;Stefan van der Walt;2006-09-26 11:20:17 +0000;Draft documentation for ndpointer.

==

numpy/ctypeslib.py
==================
c7eb199;Travis Oliphant;2006-09-25 17:51:52 +0000;Add oldtypecodes to oldnumeric.typeconv so that old Numeric character codes can be identified.

==

numpy/oldnumeric/typeconv.py
==================
25b594e;Travis Oliphant;2006-09-25 16:26:43 +0000;Fix back repr of arrays to not have quote unless flexible.

==

numpy/core/numeric.py
numpy/lib/tests/test_ufunclike.py
==================
46bd2a3;Travis Oliphant;2006-09-24 07:08:26 +0000;Fix doctests for new dtype

==

numpy/lib/tests/test_ufunclike.py
==================
d0d5a92;Travis Oliphant;2006-09-23 18:35:46 +0000;Fix ticket #289 plus improve the way array data-types print and arrays represent themselves.

==

numpy/core/numeric.py
numpy/core/src/arrayobject.c
==================
61838cf;Travis Oliphant;2006-09-23 18:04:13 +0000;Fix Ticket #288

==

numpy/core/src/arrayobject.c
==================
6d9195d;Travis Oliphant;2006-09-23 17:59:06 +0000;Fix for #291

==

numpy/lib/shape_base.py
==================
65f0d8a;Travis Oliphant;2006-09-23 04:45:08 +0000;Add test for default axis in method and functions.

==

numpy/core/tests/test_regression.py
==================
dff8d9e;Travis Oliphant;2006-09-23 03:47:27 +0000;Fix the Python2.5-compatibility macros so that conflicts with other libraries are avoided.

==

numpy/core/include/numpy/ndarrayobject.h
==================
12467b6;Travis Oliphant;2006-09-23 03:32:14 +0000;Fix .take() default-axis argument bug.

==

numpy/core/src/arraymethods.c
==================
310b6d0;Travis Oliphant;2006-09-22 19:42:43 +0000;Switch order of .put arguments to match the function call.  Eliminate .putmask as a method and make it only a function.

==

numpy/add_newdocs.py
numpy/core/fromnumeric.py
numpy/core/numeric.py
numpy/core/src/arraymethods.c
numpy/core/src/multiarraymodule.c
numpy/core/src/scalartypes.inc.src
numpy/lib/shape_base.py
numpy/oldnumeric/misc.py
==================
9894006;Stefan van der Walt;2006-09-22 08:02:11 +0000;Refer to "length of a" instead of "a" in fftpack docstrings.

==

numpy/fft/fftpack.py
==================
5453138;Stefan van der Walt;2006-09-22 07:25:18 +0000;Fix docstring for delete.

==

numpy/lib/function_base.py
==================
4c856fa;Travis Oliphant;2006-09-21 16:58:07 +0000;Add Object-type to maximum and minimum ufuncs.

==

numpy/core/code_generators/generate_umath.py
numpy/core/src/umathmodule.c.src
==================
b07ee45;Charles Harris;2006-09-21 15:51:00 +0000;Small changes of searchsorted error messages.

==

numpy/core/src/arraymethods.c
numpy/core/src/multiarraymodule.c
==================
d0b67d8;Charles Harris;2006-09-21 07:58:41 +0000;Make a PyArray_SearchsideConverter for the side keyword in searchsorted. Rename some searchsorted variables with more descriptive names. Do some documentation markup in case we ever run doxygen over the source.

==

numpy/core/code_generators/multiarray_api_order.txt
numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/arraymethods.c
numpy/core/src/multiarraymodule.c
==================
3e47b24;Travis Oliphant;2006-09-21 00:02:22 +0000;Fix problem with alter_code1.py

==

numpy/numarray/alter_code1.py
numpy/oldnumeric/alter_code1.py
==================
b1d84f9;Travis Oliphant;2006-09-20 19:17:56 +0000;Next numpy release should be 1.0

==

numpy/version.py
==================
b630525;Travis Oliphant;2006-09-20 19:11:56 +0000;Up version number on trunk.

==

numpy/version.py
==================
7a8ebd2;Travis Oliphant;2006-09-20 19:01:00 +0000;Remove sorted from unique1d.  Add testall to test if level > 10.  Remove compiler warning.

==

numpy/__init__.py
numpy/core/src/multiarraymodule.c
numpy/lib/arraysetops.py
==================
289b1c6;Travis Oliphant;2006-09-20 10:53:30 +0000;Only alter data-type of integer and bool types on reduce-like functions for 'add' and 'multiply'

==

numpy/core/src/ufuncobject.c
==================
1f4b858;Travis Oliphant;2006-09-20 00:12:21 +0000;Remove dft from build.

==

numpy/setup.py
==================
1f0508e;Travis Oliphant;2006-09-20 00:10:42 +0000;Remove UserArray.py and dft sub-package.

==

numpy/dft/__init__.py
numpy/lib/UserArray.py
==================
b8d9549;Travis Oliphant;2006-09-19 23:05:28 +0000;Rework logic a bit for clean-up

==

numpy/core/src/arraymethods.c
==================
2a99ea8;Travis Oliphant;2006-09-19 23:03:14 +0000;Fix mean, std, and var methods so that they reduce over double data-type with integer inputs.

==

numpy/core/src/arraymethods.c
==================
ee7a0be;Robert Kern;2006-09-19 17:29:34 +0000;oldnumeric.argmin should use numpy.argmin

==

numpy/oldnumeric/functions.py
==================
2d9f628;Charles Harris;2006-09-19 16:56:07 +0000;Fix ticket #284

==

numpy/add_newdocs.py
numpy/core/fromnumeric.py
==================
60d18d2;Pearu Peterson;2006-09-19 13:19:07 +0000;Fixed compiler errors when using Python 2.5rc.

==

numpy/core/src/arrayobject.c
==================
f54a116;Travis Oliphant;2006-09-19 08:44:44 +0000;Add one more import possibility.

==

numpy/numarray/alter_code1.py
numpy/oldnumeric/alter_code1.py
==================
5be3af7;Travis Oliphant;2006-09-19 07:58:41 +0000;Add convertsrc to alter_code1 and clean it up so it doesn't always write the .orig file

==

numpy/numarray/alter_code1.py
numpy/oldnumeric/alter_code1.py
==================
b18173d;Stefan van der Walt;2006-09-19 00:20:56 +0000;Add tests to arraysetops for empty arrays.

==

numpy/lib/tests/test_arraysetops.py
==================
bdadc1b;Stefan van der Walt;2006-09-19 00:17:10 +0000;Support empty arrays in setxor1d and setdiff1d.

==

numpy/lib/arraysetops.py
==================
06db31e;Stefan van der Walt;2006-09-19 00:00:03 +0000;Fix unique1d for empty sets. Closes r208.

==

numpy/lib/arraysetops.py
==================
371f8c6;Stefan van der Walt;2006-09-18 23:27:24 +0000;Add ediff1d support for empty arrays. Fix ediff1d for to_begin or to_end = 0. Allow insert to operate on empty arrays.

==

numpy/lib/arraysetops.py
numpy/lib/function_base.py
numpy/lib/tests/test_arraysetops.py
==================
29cb5ff;Travis Oliphant;2006-09-18 21:04:31 +0000;Add tests for recent void byteswap problem.

==

numpy/core/tests/test_regression.py
==================
ab1d154;Travis Oliphant;2006-09-18 20:50:10 +0000;Fix copyswap for VOID arrays when src is NULL

==

numpy/core/src/arraytypes.inc.src
==================
adb82ed;Travis Oliphant;2006-09-18 20:36:43 +0000;Rework fix to #282

==

numpy/core/src/multiarraymodule.c
==================
79b158b;Travis Oliphant;2006-09-18 20:25:17 +0000;Fixed #282

==

numpy/core/src/multiarraymodule.c
==================
a035984;Travis Oliphant;2006-09-18 20:12:21 +0000;Fix #280

==

numpy/core/src/ufuncobject.c
==================
eff272c;Travis Oliphant;2006-09-18 19:14:35 +0000;Fix so that astype and transpose return 0-d arrays if given 0-d arrays.

==

numpy/core/src/arraymethods.c
==================
ab485b5;Pearu Peterson;2006-09-17 18:00:33 +0000;Fixed typos, started impl. derived type support.

==

numpy/f2py/lib/base_classes.py
numpy/f2py/lib/python_wrapper.py
numpy/f2py/lib/typedecl_statements.py
==================
292d5d9;Travis Oliphant;2006-09-17 06:34:16 +0000;Fix typo.

==

numpy/core/src/arrayobject.c
==================
562be02;Travis Oliphant;2006-09-16 22:34:36 +0000;Add test for recent fix.

==

numpy/core/tests/test_regression.py
==================
ae85925;Travis Oliphant;2006-09-16 22:27:38 +0000;Fix type-coercion for void-type arrays.

==

numpy/core/src/arrayobject.c
==================
cf56f94;Pearu Peterson;2006-09-16 06:03:58 +0000;Added Fortran Standard reference manual.

==

numpy/f2py/lib/research/04-007.pdf
==================
617b46e;Pearu Peterson;2006-09-16 05:56:18 +0000;4G f2py: first working example.

==

numpy/f2py/lib/analyzefortran.py
numpy/f2py/lib/base_classes.py
numpy/f2py/lib/block_statements.py
numpy/f2py/lib/doc.txt
numpy/f2py/lib/parsefortran.py
numpy/f2py/lib/python_wrapper.py
numpy/f2py/lib/research/pointers/pointer_size.c
numpy/f2py/lib/research/pointers/settypeinfo.f90
numpy/f2py/lib/src/F_FUNC.cpp
numpy/f2py/lib/src/pyobj_to_Py_complex.c
numpy/f2py/lib/src/pyobj_to_double.c
numpy/f2py/lib/src/pyobj_to_long.c
numpy/f2py/lib/src/pyobj_to_npy_longlong.c
numpy/f2py/lib/src/pyobj_to_string_len.c
numpy/f2py/lib/statements.py
numpy/f2py/lib/typedecl_statements.py
numpy/f2py/lib/utils.py
==================
8b6db6e;Travis Oliphant;2006-09-16 02:08:59 +0000;Fix ticket #188 by returning the name of the dtype objects for data-type objects without fields or sub-arrays that are in correct byte-order

==

numpy/core/src/arrayobject.c
numpy/lib/twodim_base.py
numpy/lib/utils.py
numpy/numarray/functions.py
==================
f74f1d1;Travis Oliphant;2006-09-15 22:58:26 +0000;Rename to histogramdd as original author said.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
972ae97;Travis Oliphant;2006-09-15 22:40:54 +0000;Add rollaxis command and fix cross function

==

numpy/core/numeric.py
==================
bef75b3;Travis Oliphant;2006-09-15 21:18:33 +0000;Small code re-org in _get_svn_revision

==

numpy/distutils/misc_util.py
==================
1236637;Travis Oliphant;2006-09-15 21:13:09 +0000;Fix when svnversion is not present.

==

numpy/distutils/misc_util.py
==================
8433270;Travis Oliphant;2006-09-15 21:06:47 +0000;Fix subversion number getting for 1.4 clients.  Also works for pre 1.4 clients.

==

numpy/distutils/misc_util.py
==================
69de980;Travis Oliphant;2006-09-15 19:48:27 +0000;Clean up info(ndarray)

==

numpy/lib/utils.py
==================
9ac3b0e;Travis Oliphant;2006-09-15 19:31:48 +0000;Add 'a' to sctypeDict. Fixes #279

==

numpy/core/numerictypes.py
==================
3cf31df;Travis Oliphant;2006-09-15 18:24:30 +0000;Fix .descr of aligned structures

==

numpy/core/_internal.py
==================
a761817;Travis Oliphant;2006-09-15 18:05:27 +0000;Add DescrAlignConverter

==

numpy/core/code_generators/multiarray_api_order.txt
numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
==================
b3a5ff5;Travis Oliphant;2006-09-15 17:24:44 +0000;Don't raise errors when setting with a zero-sized array, just exit

==

numpy/core/src/arrayobject.c
==================
ac9c473;Travis Oliphant;2006-09-15 16:59:14 +0000;Fix numarray.info function

==

numpy/numarray/functions.py
numpy/numarray/numerictypes.py
==================
2259299;Travis Oliphant;2006-09-14 23:40:52 +0000;Fix problem with .item(n) for 1-d case.

==

numpy/core/src/arraymethods.c
==================
b2d5113;Travis Oliphant;2006-09-14 21:39:21 +0000;Eliminate unnecessary check.

==

numpy/core/src/arrayobject.c
==================
7633701;Travis Oliphant;2006-09-14 18:55:14 +0000;Fix a.flat = []

==

numpy/core/src/arrayobject.c
==================
0bb5f4c;Travis Oliphant;2006-09-14 09:00:57 +0000;ndpointer will still work even without ctypes installed.

==

numpy/ctypeslib.py
==================
5a4affa;Travis Oliphant;2006-09-14 03:52:21 +0000;Don't deprecate c_.  Use it as short-hand for a common case

==

numpy/lib/index_tricks.py
==================
2ef6aa9;Travis Oliphant;2006-09-14 03:36:03 +0000;Add a few more defined checks for FreeBSD and NetBSD

==

numpy/core/include/numpy/ufuncobject.h
==================
41f4504;Travis Oliphant;2006-09-14 03:19:04 +0000;Fix transpose implementation to work with higher dimensional arrays as well

==

numpy/lib/index_tricks.py
==================
d6ce2d7;Travis Oliphant;2006-09-14 02:33:55 +0000;Fix up r_ so you can specify the minimum number of dimensions to force arrays to and allow alteration of the concatenation axis and whether or not to transpose 1d arrays

==

numpy/lib/function_base.py
numpy/lib/index_tricks.py
numpy/lib/tests/test_index_tricks.py
==================
4e76e00;Travis Oliphant;2006-09-14 01:49:10 +0000;Add histogramnd and fix histogram2d

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_twodim_base.py
numpy/lib/twodim_base.py
numpy/oldnumeric/functions.py
==================
6359dcc;Travis Oliphant;2006-09-14 01:20:52 +0000;Fix column-stack to not transpose 2-d inputs.  Fix iscomplex for strings.  Add deprecation warning for c_

==

numpy/lib/index_tricks.py
numpy/lib/shape_base.py
numpy/lib/type_check.py
==================
aa27298;Travis Oliphant;2006-09-13 23:55:37 +0000;Fix random.poisson(0) to return 0 (#229)

==

numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/tests/test_defmatrix.py
numpy/random/mtrand/distributions.c
numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
==================
795e498;Travis Oliphant;2006-09-13 22:06:48 +0000;Add itemset method to parallel item method

==

numpy/core/ma.py
numpy/core/src/arraymethods.c
numpy/core/src/scalartypes.inc.src
==================
27775e9;Travis Oliphant;2006-09-13 20:15:39 +0000;Allow .item(<index>) for fast selection of Python scalars from a numpy array.  Re-name a few confusing constants in ufuncobject.c

==

numpy/core/src/arraymethods.c
numpy/core/src/ufuncobject.c
==================
4fa9955;Travis Oliphant;2006-09-12 00:38:39 +0000;Update type comparison to be based on equivalence classes and safe casting defining the ordering.

==

numpy/core/src/ufuncobject.c
==================
c816ddc;Travis Oliphant;2006-09-11 23:31:20 +0000;Add some comments about grabbing the CObject implementation.

==

numpy/core/src/ufuncobject.c
==================
c4608ed;Travis Oliphant;2006-09-11 23:22:54 +0000;Improve the getting and setting of ufunc loops for user-defined types.

==

numpy/core/include/numpy/ufuncobject.h
numpy/core/src/multiarraymodule.c
numpy/core/src/ufuncobject.c
==================
6686ee2;Robert Kern;2006-09-11 22:32:39 +0000;Pass the converted array arguments instead of the scalars.

==

numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
==================
b473660;Travis Oliphant;2006-09-11 16:52:31 +0000;Fix ReplaceLoopBySignature.

==

numpy/core/src/ufuncobject.c
==================
14fbb3b;Travis Oliphant;2006-09-08 17:17:31 +0000;Fix functions in oldnumeric.mlab

==

numpy/oldnumeric/mlab.py
==================
9109c6a;Robert Kern;2006-09-08 16:56:50 +0000;Fix #198

==

numpy/distutils/ccompiler.py
==================
8f65191;Pearu Peterson;2006-09-08 08:29:12 +0000;Add analyze fortran hooks.

==

numpy/f2py/lib/analyzefortran.py
numpy/f2py/lib/block_statements.py
numpy/f2py/lib/parsefortran.py
numpy/f2py/lib/research/rat/rational.f90
numpy/f2py/lib/statements.py
numpy/f2py/lib/test_parser.py
numpy/f2py/lib/typedecl_statements.py
==================
4963af2;Stefan van der Walt;2006-09-08 00:18:21 +0000;Add ticket for ticket #243.

==

numpy/core/tests/test_regression.py
==================
e650de1;Stefan van der Walt;2006-09-08 00:11:23 +0000;Tests for tickets #246 and #251.

==

numpy/core/tests/test_regression.py
==================
2173026;Stefan van der Walt;2006-09-07 23:52:34 +0000;Tests for tickets #254 and #270.

==

numpy/core/tests/test_regression.py
==================
9e10fed;Stefan van der Walt;2006-09-07 22:43:47 +0000;Add test for ticket #271.

==

numpy/core/tests/test_regression.py
==================
6041738;Stefan van der Walt;2006-09-07 22:27:48 +0000;Add unit test for ticket #273.

==

numpy/core/tests/test_regression.py
==================
aa2c09a;Travis Oliphant;2006-09-07 18:12:53 +0000;Fix invalid keyword argument error in reshape method.

==

numpy/core/src/arraymethods.c
==================
49f41ff;Charles Harris;2006-09-07 17:13:42 +0000;Documentation tweaks for searchsorted and round.

==

numpy/add_newdocs.py
numpy/core/fromnumeric.py
==================
8c26971;Travis Oliphant;2006-09-07 07:04:13 +0000;Whitespace change in alter_code1.py

==

numpy/numarray/alter_code1.py
==================
2b6af2c;Travis Oliphant;2006-09-07 06:36:54 +0000;Add c_intp to ctypeslib.  Add converttree to alter_code functions.  Fix ctypeslib when ctypes is not available.

==

numpy/core/_internal.py
numpy/ctypeslib.py
numpy/numarray/alter_code1.py
numpy/numarray/alter_code2.py
numpy/oldnumeric/alter_code1.py
numpy/oldnumeric/alter_code2.py
numpy/oldnumeric/fix_default_axis.py
==================
c4b98bd;Travis Oliphant;2006-09-07 00:34:30 +0000;More code cleanup

==

numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
==================
f34278f;Travis Oliphant;2006-09-06 22:49:46 +0000;Code clean-up

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/arrayobject.c
==================
bc12240;Travis Oliphant;2006-09-06 15:33:22 +0000;Fix segfault in BroadcastToShape

==

numpy/core/src/arrayobject.c
==================
61c3159;Travis Oliphant;2006-09-06 05:56:32 +0000;Fix memory leak in corner case of lexsort.

==

numpy/core/src/multiarraymodule.c
==================
1072ff3;Charles Harris;2006-09-06 03:19:32 +0000;Break up more of the documentation in add_newdocs

==

numpy/add_newdocs.py
==================
fc61d8a;Charles Harris;2006-09-05 18:36:49 +0000;Docstring for tostring and small formatting change to PyArray_SearchSorted.

==

numpy/add_newdocs.py
numpy/core/src/multiarraymodule.c
==================
341e0be;Travis Oliphant;2006-09-05 16:58:59 +0000;Fix dimension error for object arrays.

==

numpy/core/src/arrayobject.c
==================
1fcb79a;Stefan van der Walt;2006-09-05 08:32:14 +0000;Optimize fftfreq.

==

numpy/fft/helper.py
==================
802450e;Travis Oliphant;2006-09-05 06:58:18 +0000;Fixes for Python2.5

==

numpy/core/src/arrayobject.c
==================
887544f;Travis Oliphant;2006-09-05 03:50:20 +0000;Bump up version number to rc1

==

numpy/version.py
==================
ae4e6ce;Charles Harris;2006-09-05 01:43:27 +0000;Add more docs to function fromfile()

==

numpy/add_newdocs.py
==================
2e66885;Charles Harris;2006-09-05 00:54:09 +0000;Document the method tofile()

==

numpy/add_newdocs.py
==================
9ae4fd0;Travis Oliphant;2006-09-04 23:23:40 +0000;Fix ticket #271 and turn default printing of warnings off

==

numpy/_import_tools.py
numpy/core/ma.py
==================
9c736b3;Travis Oliphant;2006-09-04 22:42:18 +0000;Fix object array creation to revert to previous behavior

==

numpy/core/src/arrayobject.c
numpy/core/tests/test_regression.py
==================
0982d6e;Charles Harris;2006-09-04 22:04:31 +0000;Update ndarray.round docs to match Travis' mods

==

numpy/add_newdocs.py
==================
33a5ed7;Travis Oliphant;2006-09-04 21:52:13 +0000;Fix rounding of integers with decimal < 0

==

numpy/__init__.py
numpy/core/code_generators/generate_umath.py
numpy/core/fromnumeric.py
numpy/core/src/multiarraymodule.c
numpy/core/src/umathmodule.c.src
==================
b1e4fe0;Travis Oliphant;2006-09-04 19:31:30 +0000;Add Index checking for integer conversion and Python 2.5

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/arrayobject.c
==================
cd71708;Charles Harris;2006-09-04 17:06:31 +0000;Add documentation to round and around to clear up confusion from numpy's choice to round to even.

==

numpy/add_newdocs.py
numpy/core/fromnumeric.py
==================
2d72b34;Charles Harris;2006-09-03 19:01:47 +0000;More document tweaks for searchsorted.

==

numpy/add_newdocs.py
==================
c268f1d;Charles Harris;2006-09-03 18:51:51 +0000;Small fix to the insert document string. Cleanup whitespace.

==

numpy/lib/function_base.py
==================
581f6b1;Charles Harris;2006-09-03 17:49:51 +0000;Change ndarray.searchsorted keyword "value" to "keys". Tweak documentation of searchsorted. Indent many docstrings in add_newdocs.

==

numpy/add_newdocs.py
numpy/core/fromnumeric.py
numpy/core/src/arraymethods.c
==================
6f31fbc;Charles Harris;2006-09-03 02:26:26 +0000;Add new keyword <side> to the searchsorted method and function. Add documentation thereto. Cleanup whitespace.

==

numpy/add_newdocs.py
numpy/core/fromnumeric.py
numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
==================
92abb27;Charles Harris;2006-09-02 22:33:40 +0000;Oops, previous commit was accidental and had a temporary mod I was using for testing. Remove that mod. Meanwhile, have added a local_search_right function.

==

numpy/core/src/multiarraymodule.c
==================
e9b1afb;Charles Harris;2006-09-02 22:27:28 +0000;In multiarray.c rename function local_where to local_search_left.

==

numpy/core/src/multiarraymodule.c
==================
639077b;Charles Harris;2006-09-02 15:42:26 +0000;In multiarray.c rename function local_where to local_search_left.

==

numpy/core/src/multiarraymodule.c
==================
f4c25ba;Travis Oliphant;2006-09-01 06:09:52 +0000;Fix default type of empty array.  Fix test for strtod on Python 2.3

==

numpy/core/setup.py
numpy/core/src/arrayobject.c
==================
8a53914;Travis Oliphant;2006-09-01 05:53:54 +0000;Fix so that VOID arrays are not found during a search but instead object arrays.

==

numpy/core/include/numpy/ndarrayobject.h
numpy/core/src/arrayobject.c
==================
f21c08b;Travis Oliphant;2006-08-29 18:29:53 +0000;Add a module/script to fix the default axis issue for code already converted to NumPy

==

numpy/oldnumeric/fix_default_axis.py
==================
6332618;Travis Oliphant;2006-08-29 17:56:21 +0000;Clean-up some un-needed default axes. Fix default axes of ma.sum and ma.product

==

numpy/core/ma.py
numpy/f2py/tests/array_from_pyobj/tests/test_array_from_pyobj.py
numpy/fft/fftpack.py
numpy/lib/arraysetops.py
numpy/lib/function_base.py
numpy/lib/shape_base.py
numpy/lib/utils.py
numpy/linalg/linalg.py
numpy/numarray/functions.py
numpy/oldnumeric/random_array.py
==================
064c8eb;Charles Harris;2006-08-29 17:20:29 +0000;Finish moving comments from arraymethods to add_newdocs. Replace hardcoded 1 by METH_VARARGS in arraymethods.

==

numpy/add_newdocs.py
numpy/core/src/arraymethods.c
==================
19a9479;Travis Oliphant;2006-08-29 17:15:31 +0000;Fix problem with randn in matlib.  Acutally add min, max, round, abs to the numpy name-space without over-writing builtins on from numpy import *

==

numpy/__init__.py
numpy/core/__init__.py
numpy/core/fromnumeric.py
numpy/core/numeric.py
numpy/matlib.py
==================
775a47d;Travis Oliphant;2006-08-29 10:28:11 +0000;Add axis arguments to various functions so as not to rely on the defaults.

==

numpy/add_newdocs.py
numpy/core/ma.py
numpy/core/tests/test_ma.py
numpy/core/tests/test_numeric.py
numpy/f2py/tests/array_from_pyobj/tests/test_array_from_pyobj.py
numpy/fft/fftpack.py
numpy/lib/arraysetops.py
numpy/lib/function_base.py
numpy/lib/shape_base.py
numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_type_check.py
numpy/lib/utils.py
numpy/linalg/linalg.py
numpy/numarray/functions.py
numpy/oldnumeric/random_array.py
numpy/oldnumeric/rng_stats.py
==================
ce7a968;Travis Oliphant;2006-08-29 09:37:47 +0000;Restore un-needed axis arguments

==

numpy/lib/arraysetops.py
numpy/lib/shape_base.py
==================
936b14b;Travis Oliphant;2006-08-29 06:52:33 +0000;Add axis argument to usages of take

==

numpy/lib/arraysetops.py
numpy/lib/shape_base.py
==================
7b9df71;Charles Harris;2006-08-29 06:02:10 +0000;Move more documentation from arraymethods to add_newdocs.

==

numpy/add_newdocs.py
numpy/core/src/arraymethods.c
==================
762dacd;Travis Oliphant;2006-08-29 02:47:39 +0000;Add float, int, etc. to numpy name-space.  Flesh out tensordot.  Fix-up getcharbuf to allow all 8-bit types to be returned as a charbuf.

==

numpy/__init__.py
numpy/core/numeric.py
numpy/core/src/arrayobject.c
==================
8d80b96;Travis Oliphant;2006-08-28 20:56:23 +0000;Fix flags on numpy array scalars for array interface.

==

numpy/core/src/scalartypes.inc.src
==================
527937e;Travis Oliphant;2006-08-28 20:01:34 +0000;Fix sundry errors.

==

numpy/core/fromnumeric.py
numpy/core/numeric.py
numpy/lib/function_base.py
==================
0f23250;Travis Oliphant;2006-08-28 19:46:08 +0000;Merge changes mistakenly added to 1.0b4 tag to the main trunk

==

numpy/core/numeric.py
numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
numpy/oldnumeric/misc.py
==================
59286e9;Charles Harris;2006-08-28 05:56:49 +0000;Break up the documentation of ndarray attributes into separate calls.

==

numpy/add_newdocs.py
numpy/core/src/arraymethods.c
==================
4dcd244;Charles Harris;2006-08-28 00:37:14 +0000;Move most of the remaining documentation from arraymethods to add_newdocs. The formatting is still very crude and the docs need expansion.

==

numpy/add_newdocs.py
numpy/core/src/arraymethods.c
==================
c5f1772;Charles Harris;2006-08-27 18:08:18 +0000;Move the documentation of the sort, argsort, and searchsorted methods into add_newdocs. Rewrite the documentation of sort and argsort. Replace the documentation of these functions in fromnumeric with the new documentation.

==

numpy/add_newdocs.py
numpy/core/fromnumeric.py
numpy/core/src/arraymethods.c
==================
9c4eb86;Travis Oliphant;2006-08-26 09:16:02 +0000;Up version of trunk.

==

numpy/version.py
==================
d42af63;Travis Oliphant;2006-08-26 08:50:30 +0000;Fixes to the deletefrom, insertinto, functions...

==

numpy/lib/function_base.py
==================
307b1cf;Travis Oliphant;2006-08-26 08:28:20 +0000;Fix how deletefrom and insertinto handle objects with __array_wrap__ defined.

==

numpy/lib/function_base.py
==================
5dd5498;Travis Oliphant;2006-08-26 07:50:53 +0000;Fix broadcast-copy on fancy set-item.

==

numpy/core/code_generators/multiarray_api_order.txt
numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/lib/function_base.py
==================
c37cfa5;Travis Oliphant;2006-08-26 00:49:30 +0000;Add deletefrom, insertinto, and appendonto

==

numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/lib/function_base.py
==================
28e44d3;Travis Oliphant;2006-08-25 22:14:06 +0000;Fix a problem with __all__ not being copied in oldnumeric.

==

numpy/core/include/numpy/old_defines.h
numpy/core/include/numpy/oldnumeric.h
numpy/oldnumeric/random_array.py
numpy/oldnumeric/user_array.py
==================
1bc555d;Travis Oliphant;2006-08-25 21:33:42 +0000;Add more import_array possibilities so it can be used inside a function.

==

numpy/core/code_generators/generate_array_api.py
numpy/core/code_generators/generate_ufunc_api.py
numpy/core/include/numpy/oldnumeric.h
==================
3458c50;Travis Oliphant;2006-08-25 20:52:39 +0000;Revert import_array so that it doesn't return anything

==

numpy/core/code_generators/generate_array_api.py
==================
7dd9a56;Travis Oliphant;2006-08-25 20:21:29 +0000;Added a delete function

==

numpy/lib/function_base.py
==================
b4e76e3;Travis Oliphant;2006-08-25 03:59:57 +0000;Fix coercion in multiarray to be like ufunc coercion.

==

numpy/core/src/arrayobject.c
==================
93d2d8f;Travis Oliphant;2006-08-25 03:44:22 +0000;Fix warning...

==

numpy/numarray/_capi.c
==================
f769cef;Travis Oliphant;2006-08-25 02:39:50 +0000;Don't use LONGJMP on windows.

==

numpy/core/setup.py
==================
2266ec6;Travis Oliphant;2006-08-25 00:10:24 +0000;Add allow threads code

==

numpy/core/src/multiarraymodule.c
==================
a15155f;Travis Oliphant;2006-08-24 23:39:18 +0000;Move signal handler and global variable getter to C-API

==

numpy/core/code_generators/multiarray_api_order.txt
numpy/core/include/numpy/ndarrayobject.h
numpy/core/include/numpy/npy_interrupt.h
numpy/core/src/multiarraymodule.c
==================
960e674;Travis Oliphant;2006-08-24 22:50:26 +0000;Fix NA_NewAllFromBuffer when shape is given

==

numpy/numarray/_capi.c
==================
63b2e73;Travis Oliphant;2006-08-24 22:39:57 +0000;Add an example of using PyOS_InterruptOccurred() to the test_interuppt function.

==

numpy/core/src/multiarraymodule.c
==================
060b124;Travis Oliphant;2006-08-24 20:07:59 +0000;update g95 version pattern

==

numpy/distutils/fcompiler/g95.py
==================
0b3285c;Travis Oliphant;2006-08-24 16:38:00 +0000;Also include signal.h

==

numpy/core/include/numpy/npy_interrupt.h
==================
dafda7f;Travis Oliphant;2006-08-24 16:35:08 +0000;Make sure test_interrupt ends at some point.

==

numpy/core/src/multiarraymodule.c
==================
090cb0a;Travis Oliphant;2006-08-24 16:12:59 +0000;Remove automatic setting of tp_free and tp_hash when it could be a Python function

==

numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
==================
d9650b6;Travis Oliphant;2006-08-24 15:55:15 +0000;Fixed issues with ticket #267

==

numpy/core/include/numpy/npy_interrupt.h
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
==================
ca059fb;Travis Oliphant;2006-08-24 08:36:48 +0000;Add rudimentary interrupt handliNG.  Add max, min, round, abs to the numpy space.

==

numpy/core/code_generators/generate_array_api.py
numpy/core/fromnumeric.py
numpy/core/include/numpy/ndarrayobject.h
numpy/core/include/numpy/npy_interrupt.h
numpy/core/ma.py
numpy/core/numeric.py
numpy/core/src/arraymethods.c
numpy/core/src/multiarraymodule.c
==================
9ab77ec;cookedm;2006-08-23 23:39:42 +0000;add .abs() as a method on the array object

==

numpy/core/ma.py
numpy/core/src/arraymethods.c
==================
eb334fc;Travis Oliphant;2006-08-23 19:56:28 +0000;Move complex multiply and divide from the generic interface to the specific interface --- saves about 10% speed increase.

==

numpy/core/code_generators/generate_umath.py
numpy/core/include/numpy/arrayobject.h
numpy/core/include/numpy/npy_interrupt.h
numpy/core/src/umathmodule.c.src
==================
6bda066;cookedm;2006-08-23 00:37:52 +0000;Fix a formatting bug in CAPI.txt

==

numpy/doc/CAPI.txt
==================
877df47;Travis Oliphant;2006-08-22 16:30:10 +0000;Fix copyswapn for complex data-types

==

numpy/core/src/arraytypes.inc.src
numpy/core/tests/test_regression.py
==================
548412c;Travis Oliphant;2006-08-22 16:02:52 +0000;Fix real and imag attributes for byte-swapped arrays. Fixes ticket #265

==

numpy/core/src/arrayobject.c
==================
7a9ac3e;Travis Oliphant;2006-08-21 21:22:03 +0000;Fix silly version number

==

numpy/version.py
==================
d73e71e;Travis Oliphant;2006-08-21 21:05:33 +0000;Make trunk 1.0b4.dev release

==

numpy/version.py
==================
52bb927;Travis Oliphant;2006-08-21 20:55:33 +0000;Fix shape attributes of data-types with no shape

==

numpy/core/src/arrayobject.c
==================
38fb6d0;Travis Oliphant;2006-08-21 20:45:00 +0000;Re-factor fix to linspace

==

numpy/lib/function_base.py
==================
9737794;Travis Oliphant;2006-08-21 19:55:37 +0000;Remove usage of FatalError and fix linspace to end at stop if endpoint is True

==

numpy/core/code_generators/generate_array_api.py
numpy/core/code_generators/generate_ufunc_api.py
numpy/core/src/ufuncobject.c
numpy/f2py/rules.py
numpy/lib/function_base.py
numpy/numarray/numpy/libnumarray.h
==================
77732fa;Travis Oliphant;2006-08-21 19:04:25 +0000;Fix missing #endif

==

numpy/core/include/numpy/arrayobject.h
==================
35b2e72;Travis Oliphant;2006-08-21 19:03:29 +0000;Include interrupt stub.

==

numpy/core/include/numpy/npy_interrupt.h
==================
a7b8441;Travis Oliphant;2006-08-21 18:52:06 +0000;Add simple function to replace Ufunc

==

numpy/core/code_generators/ufunc_api_order.txt
numpy/core/include/numpy/arrayobject.h
numpy/core/src/ufuncobject.c
==================
b9ce939;Travis Oliphant;2006-08-19 06:01:10 +0000;Fix white-space issues.

==

numpy/core/include/numpy/arrayobject.h
numpy/core/include/numpy/ndarrayobject.h
numpy/core/include/numpy/noprefix.h
numpy/core/include/numpy/old_defines.h
numpy/core/include/numpy/oldnumeric.h
numpy/core/include/numpy/ufuncobject.h
numpy/core/numerictypes.py
numpy/core/src/_isnan.c
numpy/core/src/_signbit.c
numpy/core/src/_sortmodule.c.src
numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
numpy/core/src/scalarmathmodule.c.src
numpy/core/src/scalartypes.inc.src
numpy/core/src/ucsnarrow.c
numpy/core/src/ufuncobject.c
numpy/core/src/umathmodule.c.src
==================
262dff2;Travis Oliphant;2006-08-18 21:29:36 +0000;Fix missing numeric type issues.

==

numpy/core/numerictypes.py
==================
12d22f9;Travis Oliphant;2006-08-18 19:18:18 +0000;Fix missing bool8

==

numpy/core/numerictypes.py
==================
a601525;Travis Oliphant;2006-08-18 19:09:11 +0000;Fix logic for using THREADS

==

numpy/core/setup.py
==================
6e809f2;Travis Oliphant;2006-08-18 17:06:11 +0000;Add ndarrayobject.h file and fix ticket #255

==

numpy/core/include/numpy/ndarrayobject.h
==================
543e764;Travis Oliphant;2006-08-18 17:01:19 +0000;Fix ticket #254 and allow defining NPY_NO_PREFIX instead of including 'noprefix.h'

==

numpy/core/include/numpy/arrayobject.h
numpy/core/include/numpy/noprefix.h
numpy/core/ma.py
==================
44b8093;Travis Oliphant;2006-08-17 22:03:38 +0000;Fix ticket #252

==

numpy/oldnumeric/alter_code1.py
==================
6475055;Travis Oliphant;2006-08-17 18:19:27 +0000;Alter the naming of un-specified fields to start at 0

==

numpy/core/src/multiarraymodule.c
==================
a764a20;Travis Oliphant;2006-08-17 07:53:01 +0000;Fix mismatch between tp_name and pickle name so that pickles of scalar types will work.

==

numpy/core/include/numpy/arrayobject.h
numpy/core/numeric.py
numpy/core/numerictypes.py
numpy/core/src/arrayobject.c
numpy/core/src/scalartypes.inc.src
==================
9e244f2;Travis Oliphant;2006-08-17 01:01:14 +0000;Fix ambiguity of list data-type objects.  Lists are always interpeted as array_descriptor format.  Use a comma-separated string for the other approach.  Add 'int', 'float', etc. to the sctypeDict so they can be interpreted in strings.

==

numpy/core/_internal.py
numpy/core/numerictypes.py
numpy/core/records.py
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
==================
bd9dc9e;Travis Oliphant;2006-08-16 23:14:10 +0000;Allow titles to be used as 'meta-data'

==

numpy/core/src/multiarraymodule.c
==================
9b0c090;Travis Oliphant;2006-08-16 14:49:27 +0000;Fix error in oldnumeric.empty

==

numpy/oldnumeric/functions.py
==================
680266e;cookedm;2006-08-16 06:32:39 +0000;[distutils-rework] look in environment for more things (programs, flags) for Fortran compiler

==

command/config_compiler.py
fcompiler/__init__.py
==================
fcee1ad;Travis Oliphant;2006-08-15 09:53:49 +0000;import ctypeslib on numpy load and change name from ctypes_load_library to load_library

==

numpy/__init__.py
numpy/ctypeslib.py
==================
9a0c3eb;Stefan van der Walt;2006-08-15 09:37:43 +0000;Test for lexsort.

==

numpy/core/tests/test_regression.py
==================
18b1f90;Travis Oliphant;2006-08-15 06:25:51 +0000;Handle 0-d case in IterAllButAxis

==

numpy/core/src/arrayobject.c
==================
325aad6;Travis Oliphant;2006-08-15 00:28:18 +0000;Fix-up issubdtype to be more useful

==

numpy/lib/utils.py
==================
5d9449f;Travis Oliphant;2006-08-14 23:27:00 +0000;Add a test function to the ctypeslib module.

==

numpy/ctypeslib.py
==================
f77587b;Travis Oliphant;2006-08-14 23:15:21 +0000;Fix Python 2.5 compatibility to work with new b3 release

==

numpy/core/include/numpy/arrayobject.h
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/core/src/scalarmathmodule.c.src
numpy/core/src/scalartypes.inc.src
numpy/ctypeslib.py
numpy/lib/tests/test_utils.py
numpy/numarray/alter_code1.py
numpy/numarray/alter_code2.py
numpy/oldnumeric/alter_code1.py
numpy/oldnumeric/alter_code2.py
numpy/setup.py
numpy/testing/numpytest.py
numpy/tests/test_ctypeslib.py
==================
06acb95;Travis Oliphant;2006-08-14 21:30:52 +0000;Move ctypes-related functions out of top-level

==

numpy/ctypeslib.py
numpy/lib/utils.py
==================
c347f57;Travis Oliphant;2006-08-14 21:10:27 +0000;Remove strnlen and fix unicode copy and strip

==

numpy/core/src/arrayobject.c
==================
c3fc219;Travis Oliphant;2006-08-14 20:27:39 +0000;Check for return value in linalg.det

==

numpy/linalg/linalg.py
==================
5836733;Travis Oliphant;2006-08-14 20:20:56 +0000;Fix == --> = error in ufuncobject.c

==

numpy/core/src/ufuncobject.c
==================
a06ddf3;Travis Oliphant;2006-08-14 20:13:33 +0000;Fix ndpointer and add tests from ticket #245

==

numpy/lib/tests/test_utils.py
numpy/lib/utils.py
==================
c70b3c6;Travis Oliphant;2006-08-14 20:01:12 +0000;Strip characters from chararrays during comparision

==

numpy/core/defchararray.py
numpy/core/numeric.py
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/core/src/ufuncobject.c
==================
779dc15;Travis Oliphant;2006-08-14 07:33:54 +0000;Update version to 1.0b3

==

numpy/version.py
==================
7b50608;Travis Oliphant;2006-08-14 07:32:22 +0000;Remove un-needed functions.

==

numpy/oldnumeric/mlab.py
==================
9ad90f5;Travis Oliphant;2006-08-13 23:08:42 +0000;Restore numpy.oldnumeric.mlab.cov to MLab.cov behavior

==

numpy/oldnumeric/mlab.py
==================
7aa30ae;Travis Oliphant;2006-08-13 21:31:47 +0000;datatype --> dtype in ndpointer and fix logic of from_param checks

==

numpy/lib/utils.py
==================
7168ea1;Travis Oliphant;2006-08-13 10:06:48 +0000;Allow for type-less ndpointer.

==

numpy/lib/utils.py
==================
3fa71a7;Travis Oliphant;2006-08-13 10:03:13 +0000;Improve ndpointer to allow shape and flags checking as well.

==

numpy/lib/utils.py
==================
eee00f8;Travis Oliphant;2006-08-13 09:04:39 +0000;Remove _as_parameter_ attribute from arrays and add it to the ctypes object.  Create an ndpointer class factory to return classes that check for specific array types.  These can be used in argtypes list to ctypes functions.

==

numpy/core/_internal.py
numpy/core/src/arrayobject.c
numpy/lib/utils.py
==================
8e24ef8;Travis Oliphant;2006-08-13 07:23:58 +0000;Fix ticket #243

==

numpy/core/src/multiarraymodule.c
==================
01a0309;Travis Oliphant;2006-08-13 07:15:52 +0000;Change default axis argument of average and several masked array functions. Move old behaviors to compatibility layer.

==

numpy/core/ma.py
numpy/core/tests/test_ma.py
numpy/lib/function_base.py
numpy/numarray/functions.py
numpy/oldnumeric/functions.py
numpy/oldnumeric/ma.py
numpy/oldnumeric/misc.py
==================
9584e27;Stefan van der Walt;2006-08-12 22:00:55 +0000;Minor change in test for ticket #239.

==

numpy/core/tests/test_regression.py
==================
747579e;Stefan van der Walt;2006-08-12 21:57:03 +0000;Add test for object array creation.

==

numpy/core/tests/test_regression.py
==================
937013b;cookedm;2006-08-12 18:27:04 +0000;numpy.core.setup: remove forgotten kws_args

==

numpy/core/setup.py
==================
26d3328;Travis Oliphant;2006-08-11 22:14:56 +0000;Some fixes to array interface on Numpy side --- make sure descr pointer is NULL if not used and XDECREF it on interface free.

==

numpy/core/src/arrayobject.c
numpy/core/src/scalartypes.inc.src
==================
ec2a036;Travis Oliphant;2006-08-11 20:46:36 +0000;Check for errors when casting from non-number types.

==

numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
==================
5a04bc9;Travis Oliphant;2006-08-11 20:16:43 +0000;Allow .astype method to work on data-types with fields.

==

numpy/core/src/arraymethods.c
==================
59a421d;Travis Oliphant;2006-08-11 07:09:36 +0000;Rework meaning of isnative so it takes into account the fields.

==

numpy/core/src/arrayobject.c
==================
cceb25c;Travis Oliphant;2006-08-11 02:12:22 +0000;Fix record class so that it returns chararrays and record arrays as needed as well.

==

numpy/core/records.py
==================
b963f88;Travis Oliphant;2006-08-11 01:58:47 +0000;Fix silly mistake in chararray.

==

numpy/core/defchararray.py
==================
6628b41;Travis Oliphant;2006-08-10 23:31:53 +0000;Finish adding the rest of numarray compatibility

==

numpy/numarray/fft.py
numpy/numarray/ma.py
numpy/numarray/matrix.py
numpy/numarray/mlab.py
numpy/numarray/random_array.py
==================
e74b65a;Travis Oliphant;2006-08-10 23:06:54 +0000;Fix ticket #240

==

numpy/core/src/arraytypes.inc.src
==================
2c7b4a5;Travis Oliphant;2006-08-10 22:45:29 +0000;Add qr decomposition to linalg

==

numpy/linalg/lapack_lite/wrapped_routines
numpy/linalg/lapack_litemodule.c
numpy/linalg/linalg.py
numpy/numarray/fft.py
numpy/numarray/linear_algebra.py
numpy/numarray/ma.py
numpy/numarray/matrix.py
numpy/numarray/mlab.py
numpy/numarray/random_array.py
==================
7be6aec;cookedm;2006-08-10 21:16:20 +0000;The code generators for the API now create a .txt file (in ReST format) with the API functions and the documentation comment from the source. Currently, this is put in the header file directory (`src.<platform>/numpy/core/include` in the `build` directory). Also fixed up dependency checking: API changes should force a rebuild of all the C extensions using the API.

==

numpy/core/code_generators/genapi.py
numpy/core/code_generators/generate_array_api.py
numpy/core/code_generators/generate_ufunc_api.py
numpy/core/setup.py
==================
056a264;Travis Oliphant;2006-08-10 21:07:31 +0000;Finished up numpy.numarray.alter_code1

==

README.txt
numpy/numarray/alter_code1.py
numpy/numarray/alter_code2.py
numpy/numarray/functions.py
numpy/oldnumeric/alter_code1.py
numpy/oldnumeric/alter_code2.py
==================
7451ebe;Travis Oliphant;2006-08-10 19:38:46 +0000;Fix ticket #239

==

numpy/core/src/arrayobject.c
==================
a9314ac;Travis Oliphant;2006-08-10 18:51:25 +0000;fix more argument lists for ma.py --- output arrays are ignored for masked arrays

==

numpy/core/ma.py
==================
123a435;Travis Oliphant;2006-08-10 13:37:43 +0000;Don't use masked output values for output array

==

numpy/core/ma.py
==================
c261b1f;Travis Oliphant;2006-08-10 13:33:45 +0000;More fixes to masked array support of output arrays.

==

numpy/core/fromnumeric.py
numpy/core/ma.py
numpy/lib/utils.py
==================
a085eeb;Travis Oliphant;2006-08-10 13:03:55 +0000;Change name of function -- no re-compile necessary.

==

numpy/core/code_generators/multiarray_api_order.txt
numpy/core/include/numpy/arrayobject.h
numpy/core/src/arraymethods.c
numpy/core/src/multiarraymodule.c
==================
c6f48c8;Travis Oliphant;2006-08-10 12:48:04 +0000;Add output arguments to a few more functions for consistency

==

numpy/core/blasdot/_dotblas.c
numpy/core/defmatrix.py
numpy/core/fromnumeric.py
numpy/core/include/numpy/arrayobject.h
numpy/core/src/arraymethods.c
numpy/core/src/multiarraymodule.c
numpy/numarray/functions.py
numpy/oldnumeric/functions.py
numpy/oldnumeric/misc.py
==================
b772c97;Travis Oliphant;2006-08-10 11:55:33 +0000;Update C-API to add features needed for numarray compatibility.  Output argument added for several functions and clipmode argument added for a few others.

==

numpy/core/code_generators/multiarray_api_order.txt
numpy/core/defmatrix.py
numpy/core/fromnumeric.py
numpy/core/include/numpy/arrayobject.h
numpy/core/include/numpy/ufuncobject.h
numpy/core/numeric.py
numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/core/src/scalartypes.inc.src
numpy/core/src/ufuncobject.c
numpy/numarray/__init__.py
numpy/numarray/compat.py
numpy/numarray/functions.py
numpy/numarray/numerictypes.py
numpy/numarray/session.py
numpy/numarray/ufuncs.py
==================
4b1569e;Travis Oliphant;2006-08-10 00:24:48 +0000;Add unit-test for recent comma-string updates

==

numpy/core/tests/test_numerictypes.py
==================
8959e33;Travis Oliphant;2006-08-10 00:14:42 +0000;Fix byte-order problems in comma-string formats and size-specified fields.

==

numpy/core/_internal.py
numpy/core/src/multiarraymodule.c
==================
217ae0e;cookedm;2006-08-08 21:16:05 +0000;fix #234: IntelVisualFCompiler is broken

==

numpy/distutils/fcompiler/intel.py
==================
4172148;Travis Oliphant;2006-08-08 16:10:34 +0000;Add bitwise_not to numpy

==

numpy/core/numeric.py
==================
2322210;Travis Oliphant;2006-08-08 16:05:59 +0000;Fix numarray compatibility layer so it at least imports.  It's not finished yet, but some functionality is there.

==

numpy/numarray/functions.py
numpy/numarray/ufuncs.py
==================
5e385c9;Travis Oliphant;2006-08-08 15:48:38 +0000;Fix import problem

==

numpy/numarray/functions.py
==================
3e3dd66;Travis Oliphant;2006-08-08 07:49:10 +0000;Add numarray compatibility.

==

numpy/core/src/multiarraymodule.c
numpy/numarray/__init__.py
numpy/numarray/alter_code1.py
numpy/numarray/compat.py
numpy/numarray/functions.py
numpy/numarray/numclass.py
numpy/numarray/numerictypes.py
numpy/numarray/ufuncs.py
==================
50a5044;Travis Oliphant;2006-08-08 05:13:02 +0000;Fix segfault in Ticket #238

==

numpy/core/src/arraymethods.c
numpy/numarray/alter_code1.py
==================
fec6f08;Travis Oliphant;2006-08-05 22:29:46 +0000;Fix adding docstrings of digitize, bincount, and add_docstring so it doesn't happen twice.

==

numpy/lib/function_base.py
==================
88f59b3;Travis Oliphant;2006-08-05 22:25:56 +0000;Add complex types correctly.

==

numpy/core/numerictypes.py
==================
d76c27d;Travis Oliphant;2006-08-05 20:36:39 +0000;Minor changes to alter_code scripts

==

numpy/numarray/alter_code2.py
numpy/oldnumeric/alter_code2.py
==================
db34967;Travis Oliphant;2006-08-05 20:24:55 +0000;Move source, info, and who to NumPy

==

numpy/lib/utils.py
numpy/numarray/alter_code1.py
numpy/numarray/convolve.py
numpy/numarray/image.py
numpy/numarray/nd_image.py
==================
0072bd2;Travis Oliphant;2006-08-05 18:02:33 +0000;Un-deprecate some names in Numeric.

==

numpy/oldnumeric/alter_code1.py
numpy/oldnumeric/compat.py
numpy/oldnumeric/functions.py
numpy/oldnumeric/misc.py
numpy/oldnumeric/ufuncs.py
==================
6983e3f;Travis Oliphant;2006-08-05 17:00:03 +0000;Move converting code

==

numpy/lib/convertnumericA.py
numpy/lib/convertnumericB.py
numpy/numarray/alter_code1.py
numpy/numarray/alter_code2.py
numpy/oldnumeric/alter_code1.py
numpy/oldnumeric/alter_code2.py
==================
e292dc4;Travis Oliphant;2006-08-05 08:59:42 +0000;Fix convertnumericA.py to fix transition from 'b' to 'B'

==

numpy/lib/convertnumericA.py
numpy/lib/convertnumericB.py
==================
1a83cc8;Travis Oliphant;2006-08-05 08:05:11 +0000;Update eye and tri to take dtype in mlab

==

numpy/oldnumeric/mlab.py
==================
d372798;Travis Oliphant;2006-08-05 07:50:50 +0000;Move location of flatnonzero

==

numpy/core/numeric.py
numpy/lib/function_base.py
numpy/linalg/linalg.py
==================
3457ac3;Travis Oliphant;2006-08-05 07:48:48 +0000;Fix uses of nonzero and add flatnonzero

==

numpy/core/fromnumeric.py
numpy/core/ma.py
numpy/core/tests/test_ma.py
numpy/lib/convertnumericA.py
numpy/lib/function_base.py
numpy/lib/polynomial.py
numpy/linalg/linalg.py
==================
0820b2a;Travis Oliphant;2006-08-05 07:01:54 +0000;Alter typeconv to ignore 'b'

==

numpy/oldnumeric/typeconv.py
==================
04d79b5;Travis Oliphant;2006-08-05 06:44:20 +0000;Fixes for the recent change to oldnumeric

==

numpy/fft/old.py
numpy/oldnumeric/__init__.py
numpy/oldnumeric/fft.py
numpy/oldnumeric/functions.py
numpy/oldnumeric/ma.py
numpy/oldnumeric/matrix.py
numpy/oldnumeric/misc.py
numpy/oldnumeric/mlab.py
numpy/oldnumeric/precision.py
numpy/oldnumeric/typeconv.py
numpy/oldnumeric/ufuncs.py
==================
d6eb562;Travis Oliphant;2006-08-05 02:04:29 +0000;Redo nonzero change --- head for the hills...

==

numpy/core/fromnumeric.py
==================
50c0c44;Travis Oliphant;2006-08-05 02:01:26 +0000;Final fixes to oldnumeric

==

numpy/core/fromnumeric.py
==================
87cb586;Travis Oliphant;2006-08-05 02:00:43 +0000;Final fixes to oldnumeric

==

numpy/core/fromnumeric.py
numpy/oldnumeric/functions.py
==================
65343e5;Travis Oliphant;2006-08-05 01:52:55 +0000;Fix-up oldnumeric compatibility layer.

==

numpy/oldnumeric/compat.py
numpy/oldnumeric/functions.py
numpy/oldnumeric/misc.py
==================
9d8e202;Travis Oliphant;2006-08-05 01:20:56 +0000;More fixes to backward compatibility

==

numpy/oldnumeric/__init__.py
numpy/oldnumeric/array_printer.py
numpy/oldnumeric/compat.py
numpy/oldnumeric/functions.py
numpy/oldnumeric/ma.py
numpy/oldnumeric/matrix.py
numpy/oldnumeric/misc.py
numpy/oldnumeric/olddefaults.py
numpy/oldnumeric/precision.py
numpy/oldnumeric/typeconv.py
numpy/oldnumeric/ufuncs.py
numpy/oldnumeric/user_array.py
==================
9d98d9d;Travis Oliphant;2006-08-04 23:38:27 +0000;Add back dft stub and alter warning.

==

numpy/dft/__init__.py
numpy/lib/UserArray.py
==================
06ad634;Travis Oliphant;2006-08-04 23:35:03 +0000;Add back a compatibility UserArray.

==

numpy/lib/UserArray.py
==================
f1cca04;Travis Oliphant;2006-08-04 23:32:12 +0000;Many name-changes in oldnumeric.  This may break some numpy code that was using the oldnumeric interface.

==

numpy/__init__.py
numpy/dft/__init__.py
numpy/dft/fftpack.c
numpy/dft/fftpack.h
numpy/dft/fftpack.py
numpy/dft/fftpack_litemodule.c
numpy/dft/helper.py
numpy/dft/info.py
numpy/dft/old.py
numpy/dft/setup.py
numpy/dft/tests/test_helper.py
numpy/dual.py
numpy/fft/__init__.py
numpy/fft/fftpack.c
numpy/fft/fftpack.h
numpy/fft/fftpack.py
numpy/fft/fftpack_litemodule.c
numpy/fft/helper.py
numpy/fft/info.py
numpy/fft/old.py
numpy/fft/setup.py
numpy/fft/tests/test_helper.py
numpy/lib/UserArray.py
numpy/lib/convertnumericA.py
numpy/lib/convertnumericB.py
numpy/lib/mlab.py
numpy/lib/user_array.py
numpy/linalg/old.py
numpy/oldnumeric/__init__.py
numpy/oldnumeric/compat.py
numpy/oldnumeric/linear_algebra.py
numpy/oldnumeric/mlab.py
numpy/oldnumeric/olddefaults.py
numpy/oldnumeric/random_array.py
numpy/oldnumeric/rng.py
numpy/oldnumeric/rng_stats.py
numpy/random/old.py
numpy/random/oldrng.py
numpy/random/oldrngstats.py
numpy/setup.py
==================
8f26568;Travis Oliphant;2006-08-04 20:54:57 +0000;Change axis=0 to axis=None to be consistent with methods and move axis=0 functions to oldnumeric

==

numpy/lib/convertcode.py
numpy/lib/convertnumericA.py
numpy/lib/convertnumericB.py
==================
a904655;Travis Oliphant;2006-08-04 18:47:25 +0000;Convert so that axis arguments are consistent for methods and functions.  Place functions for which this changes the Numeric default into oldnumeric.

==

numpy/add_newdocs.py
numpy/core/blasdot/_dotblas.c
numpy/core/fromnumeric.py
numpy/core/numeric.py
numpy/lib/tests/test_function_base.py
numpy/oldnumeric/__init__.py
numpy/oldnumeric/compat.py
==================
7ffd787;Travis Oliphant;2006-08-03 23:37:00 +0000;Make sure the scalars corresponding to intp and uintp are added.

==

numpy/core/numerictypes.py
==================
63c8a61;Travis Oliphant;2006-08-03 20:19:30 +0000;A few corrections to scalar-type tests

==

numpy/core/numeric.py
numpy/core/numerictypes.py
==================
6689502;Travis Oliphant;2006-08-03 20:14:09 +0000;Clean up scalar-types functions a bit.

==

numpy/core/__init__.py
numpy/core/numeric.py
numpy/core/numerictypes.py
numpy/core/src/arrayobject.c
==================
fad726e;Travis Oliphant;2006-08-03 17:00:19 +0000;Strip white-space on element retrieval

==

numpy/core/defchararray.py
numpy/oldnumeric/compat.py
==================
77187d2;Stefan van der Walt;2006-08-03 13:19:50 +0000;Format docstrings to be consistent with others.

==

numpy/lib/function_base.py
==================
079b1d8;cookedm;2006-08-03 02:42:25 +0000;[distutils-revamp] Rework building of extensions using Fortran.
* less stuff done in Fortran compiler modules at import time

* list of available compilers built up from modules in
  numpy.distutils.fcompiler

* finding executables centralized in one place and made sane. For instance,
  setting the Fortran 77 or 90 compilers will also make the right compiler
  used for the version command and the linker.

* environment configuration for FCompiler put into one place. The environment
  module takes care of environment variables and distutils configs, and
  the FCompiler class has everything that's configurable grouped in one
  place. Much easier to tell how to customize it now.

* fcompiler only set in config_fc

* build_ext implies build_clib

* some other cleanups

There's still some rough edges here.

==

ccompiler.py
command/build_clib.py
command/build_ext.py
command/config.py
command/config_compiler.py
environment.py
exec_command.py
fcompiler/__init__.py
fcompiler/absoft.py
fcompiler/compaq.py
fcompiler/g95.py
fcompiler/gnu.py
fcompiler/hpux.py
fcompiler/ibm.py
fcompiler/intel.py
fcompiler/lahey.py
fcompiler/mips.py
fcompiler/nag.py
fcompiler/none.py
fcompiler/pg.py
fcompiler/sun.py
fcompiler/vast.py
intelccompiler.py
system_info.py
==================
33d3fde;Stefan van der Walt;2006-08-02 20:44:43 +0000;Fix rstrip for character arrays (ticket #222).

==

numpy/core/defchararray.py
numpy/core/tests/test_regression.py
==================
a2031b1;Travis Oliphant;2006-08-02 17:30:48 +0000;Make it so that .T is *always* .transpose()

==

numpy/core/src/arrayobject.c
==================
a1e9a90;Travis Oliphant;2006-08-02 16:37:59 +0000;Add diagflat.  Begin to add numarray compatibility

==

numpy/lib/twodim_base.py
numpy/matlib.py
numpy/numarray/__init__.py
numpy/numarray/numclass.py
numpy/numarray/numerictypes.py
==================
b5048dd;Travis Oliphant;2006-08-01 20:23:15 +0000;Add PyArray_ContiguousFromObject to numpy.pxi

==

numpy/random/mtrand/mtrand.c
numpy/random/mtrand/numpy.pxi
==================
d777c28;Travis Oliphant;2006-08-01 06:36:28 +0000;Add IntpArrType_Type

==

numpy/core/include/numpy/arrayobject.h
==================
bb74b1f;cookedm;2006-08-01 00:07:42 +0000;[distutils-revamp] Merged revisions 2923 via svnmerge from http://svn.scipy.org/svn/numpy/trunk/numpy/distutils
{{{
........
  r2923 | cookedm | 2006-07-29 10:14:08 -0400 (Sat, 29 Jul 2006) | 2 lines
  
  Fix bugs in gnu and vast fcompilers (should fix #214)
........
}}}

==

fcompiler/gnu.py
fcompiler/vast.py
==================
b83179e;Travis Oliphant;2006-07-31 23:35:02 +0000;Fix ticket #218

==

numpy/core/src/arrayobject.c
==================
9051aee;Travis Oliphant;2006-07-31 22:26:25 +0000;Revert change to lwork

==

numpy/linalg/linalg.py
==================
ba7e34f;Travis Oliphant;2006-07-31 22:23:12 +0000;Revert change and add better test for umath

==

numpy/core/tests/test_umath.py
numpy/linalg/linalg.py
==================
3f18558;Travis Oliphant;2006-07-31 22:05:49 +0000;Add test for ufunc complex-problems fixed in previous commit.

==

numpy/core/tests/test_umath.py
==================
b3eb6e2;Travis Oliphant;2006-07-31 21:55:21 +0000;Fix prodi when intput and output are the same.  This fixes a problem with arcsin

==

numpy/core/src/umathmodule.c.src
==================
e9d3752;Travis Oliphant;2006-07-31 21:42:45 +0000;Move more docstrings to add_newdocs

==

numpy/add_newdocs.py
numpy/core/src/arrayobject.c
==================
0c7be2c;Travis Oliphant;2006-07-31 20:33:49 +0000;Fix longdouble machar problem (iterations too low)

==

numpy/lib/machar.py
==================
3bbf6b2;Travis Oliphant;2006-07-31 20:19:53 +0000;Fix segfault from last commit.

==

numpy/core/src/multiarraymodule.c
==================
7d50c63;Travis Oliphant;2006-07-31 20:17:29 +0000;Fix ticket #216.  Also fix uses of DATA_RENEW so that object arrays will raise an error instead of possibly memory-leak when reference counts aren't freed.  Fix uses of longlong to Py_ssize_t and apppropriate FORMAT string.

==

numpy/core/include/numpy/arrayobject.h
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/lib/index_tricks.py
==================
0bd7d94;Travis Oliphant;2006-07-31 19:34:57 +0000;Fix-up invalid casting back to real when complex result.

==

numpy/linalg/linalg.py
==================
e4c823d;Travis Oliphant;2006-07-31 19:24:58 +0000;Py_OptimizeFlag is available from Python.h

==

numpy/lib/src/_compiled_base.c
==================
4b9387a;Travis Oliphant;2006-07-31 19:22:51 +0000;Don't add docstrings in add_newdoc if run with -OO

==

numpy/add_newdocs.py
numpy/lib/src/_compiled_base.c
==================
43165e8;Stefan van der Walt;2006-07-31 09:02:31 +0000;Use spaces instead of tabs.

==

numpy/core/tests/test_regression.py
==================
b4384f3;Stefan van der Walt;2006-07-31 09:00:40 +0000;Fix test for intp on 64 bit systems.

==

numpy/core/tests/test_regression.py
==================
4ad281e;Stefan van der Walt;2006-07-31 06:29:00 +0000;Add docstrings for multiarray to numpy.core.multiarray instead of to numpy.core.  Fix some typos in function names.

==

numpy/add_newdocs.py
==================
162f816;Stefan van der Walt;2006-07-31 05:47:17 +0000;Move docstrings from multiarraymodule.c to add_newdocs.py.

==

numpy/add_newdocs.py
numpy/core/src/multiarraymodule.c
==================
3b49529;cookedm;2006-07-29 14:14:08 +0000;Fix bugs in gnu and vast fcompilers (should fix #214)

==

numpy/distutils/fcompiler/gnu.py
numpy/distutils/fcompiler/vast.py
==================
d48ab36;cookedm;2006-07-28 21:19:31 +0000;[distutils-revamp] Merged revisions 2758-2921 via svnmerge from http://svn.scipy.org/svn/numpy/trunk/numpy/distutils
........
  r2813 | cookedm | 2006-07-12 22:48:24 -0400 (Wed, 12 Jul 2006) | 2 lines
  
  Fix use of os.WEXITSTATUS and friends: only use if they exist
........
  r2824 | cookedm | 2006-07-17 00:31:04 -0400 (Mon, 17 Jul 2006) | 1 line
  
  fix arch flags for ifort on machines in em64t mode
........
  r2825 | cookedm | 2006-07-17 19:43:21 -0400 (Mon, 17 Jul 2006) | 2 lines
  
  Replace ScipyTestCase with NumpyTestCase
........
  r2916 | oliphant | 2006-07-27 23:59:59 -0400 (Thu, 27 Jul 2006) | 1 line
  
  Add NPY_MAXARGS to arrayobject.h for Multi-iterator object.  Don't fail if get_atlas_version can't execute the code.
........
  r2917 | oliphant | 2006-07-28 00:08:05 -0400 (Fri, 28 Jul 2006) | 1 line
  
  Typo
........
  r2919 | cookedm | 2006-07-28 16:02:07 -0400 (Fri, 28 Jul 2006) | 2 lines
  
  Fix #114: Problems with building with MSVC and GCC under Cygwin
........

==

ccompiler.py
command/build_ext.py
command/config.py
fcompiler/gnu.py
fcompiler/intel.py
mingw32ccompiler.py
misc_util.py
system_info.py
tests/f2py_ext/tests/test_fib2.py
tests/f2py_f90_ext/tests/test_foo.py
tests/gen_ext/tests/test_fib3.py
tests/pyrex_ext/tests/test_primes.py
tests/swig_ext/tests/test_example.py
tests/swig_ext/tests/test_example2.py
tests/test_misc_util.py
==================
02926b0;cookedm;2006-07-28 20:12:00 +0000;numpy.lib.getlimits: replace typecodes with dtypes

==

numpy/lib/getlimits.py
==================
39bd37d;cookedm;2006-07-28 20:11:08 +0000;numpy.lib.machar: replace 'while 1' loops with 'for _ in max_iter' If there are bugs in the scalar objects, the 'while 1' loops can potentially run forever, so we make sure they only go at most 1000 times.

==

numpy/lib/machar.py
==================
b878328;cookedm;2006-07-28 20:02:07 +0000;Fix #114: Problems with building with MSVC and GCC under Cygwin

==

numpy/distutils/ccompiler.py
numpy/distutils/command/build_ext.py
numpy/distutils/fcompiler/gnu.py
numpy/distutils/mingw32ccompiler.py
numpy/distutils/misc_util.py
numpy/distutils/system_info.py
==================
471419f;Travis Oliphant;2006-07-28 16:27:18 +0000;Remove clash of string module and string numpy object by renaming string scalar object to string_.  Fix up tickets #210 and #211

==

numpy/core/defchararray.py
numpy/core/numerictypes.py
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
==================
444891f;Travis Oliphant;2006-07-28 04:08:05 +0000;Typo

==

numpy/distutils/system_info.py
==================
1bb6210;Travis Oliphant;2006-07-28 03:59:59 +0000;Add NPY_MAXARGS to arrayobject.h for Multi-iterator object.  Don't fail if get_atlas_version can't execute the code.

==

numpy/core/include/numpy/arrayobject.h
numpy/core/include/numpy/ufuncobject.h
numpy/core/src/arrayobject.c
numpy/distutils/system_info.py
==================
006cee5;Travis Oliphant;2006-07-27 19:00:53 +0000;Fix-up version.py so that a release just changes a variable to True.

==

numpy/version.py
==================
1d012e6;Travis Oliphant;2006-07-27 18:57:34 +0000;Last version change.

==

numpy/version.py
==================
e267467;Travis Oliphant;2006-07-27 18:52:47 +0000;Fix revision numbers.

==

numpy/version.py
==================
19ce2ea;Stefan van der Walt;2006-07-26 22:47:44 +0000;Add test for ticket #203.

==

numpy/core/tests/test_regression.py
==================
4bba31c;Travis Oliphant;2006-07-26 22:22:46 +0000;Back to 0.9.9 version

==

numpy/lib/function_base.py
==================
05cdc86;Stefan van der Walt;2006-07-26 22:12:06 +0000;Add tests for ticket #205.

==

numpy/core/tests/test_regression.py
==================
ec6d062;Travis Oliphant;2006-07-26 21:14:14 +0000;Make version number 0.9.9 until 1.0 comes out

==

numpy/lib/function_base.py
numpy/version.py
==================
04dfae6;Travis Oliphant;2006-07-26 20:50:25 +0000;Fix-up problems with iterator subscripting.

==

numpy/core/src/arrayobject.c
==================
fd96933;Travis Oliphant;2006-07-26 17:46:05 +0000;Update to use pyrex 0.9.4.1

==

numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
==================
ce00aea;Travis Oliphant;2006-07-26 17:24:59 +0000;Fix random.uniform

==

numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
numpy/random/mtrand/numpy.pxi
==================
44011bc;Travis Oliphant;2006-07-26 16:55:07 +0000;Merge non-white space changes from ver1.0 branch.  Change to Py_ssize_t and better error on align=True with array_descr conversion.

==

numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/scalartypes.inc.src
==================
c47dfad;Travis Oliphant;2006-07-26 16:38:32 +0000;Merge changes from ver1.0 branch.

==
==================
5508e33;Travis Oliphant;2006-07-26 16:25:14 +0000;Fix unnecessary use of NULL in scalar_value and remove tabs.

==

numpy/core/ma.py
numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/scalartypes.inc.src
==================
f44b685;cookedm;2006-07-26 12:29:49 +0000;merge from ver1.0 (r2896): fix for #207

==

numpy/core/src/scalartypes.inc.src
==================
da18fe3;cookedm;2006-07-26 12:28:06 +0000;Fix for #207. Need to convert void * to char * before doing pointer arithmetic.

==

numpy/core/src/scalartypes.inc.src
==================
e0cf775;cookedm;2006-07-26 11:51:30 +0000;Merge fix from trunk r2894 for longdouble failing on OS X (ticket #183).

==

numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/scalartypes.inc.src
==================
598e6ff;cookedm;2006-07-26 11:37:51 +0000;Fix for longdouble not working on OS X with gcc 4 (#183). Replace the _SOFFSET_ macro (which got the address of the obval member by casting to a PyScalarObject) with a function scalar_value, which checks the type_num. This allows Py*ScalarObject's to have different binary layout than PyScalarObject (PyLongDoubleObject had its obval at a different place due to alignment issues).

==

numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/scalartypes.inc.src
==================
7fbac39;Travis Oliphant;2006-07-25 22:36:18 +0000;Fix missing return.

==

numpy/linalg/linalg.py
==================
9bda193;Travis Oliphant;2006-07-25 22:06:02 +0000;Add broadcasting behavior to random-number generators.  Fix cholesky to keep matrix return.

==

numpy/core/include/numpy/arrayobject.h
numpy/doc/pyrex/c_numpy.pxd
numpy/linalg/linalg.py
numpy/random/mtrand/generate_mtrand_c.py
numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
numpy/random/mtrand/numpy.pxi
==================
e116574;Travis Oliphant;2006-07-25 17:17:08 +0000;Fix-up convertcode and CAPI docs

==

numpy/doc/CAPI.txt
numpy/lib/convertcode.py
==================
0adda1b;Travis Oliphant;2006-07-25 08:14:35 +0000;Fix ticket #202

==

numpy/core/records.py
numpy/core/src/multiarraymodule.c
==================
23aa0cf;Travis Oliphant;2006-07-25 07:16:21 +0000;Undo typo-change.

==

numpy/core/include/numpy/arrayobject.h
==================
4eea418;Travis Oliphant;2006-07-25 07:14:05 +0000;Update check for no-threading and change wording of error.

==

numpy/core/setup.py
numpy/core/src/arrayobject.c
==================
b2eafe4;Travis Oliphant;2006-07-25 07:00:48 +0000;Change all uses of PyObject_AsReadBuffer and PyObject_AsWriteBuffer to use Py_ssize_t for Python 2.5

==

numpy/core/include/numpy/arrayobject.h
numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
numpy/core/src/scalartypes.inc.src
==================
96d053c;Travis Oliphant;2006-07-24 20:56:16 +0000;Fix matrix getitem to return column matrices when appropriate.

==

numpy/core/defmatrix.py
numpy/core/src/arrayobject.c
==================
19c85f1;Stefan van der Walt;2006-07-24 14:14:00 +0000;Fix spelling mistake [for Albert Strasheim].

==

numpy/core/src/multiarraymodule.c
==================
f68d431;Stefan van der Walt;2006-07-24 14:11:09 +0000;Fix spelling mistake [for Albert Strasheim].

==

numpy/core/src/multiarraymodule.c
==================
d758945;Stefan van der Walt;2006-07-24 12:41:49 +0000;Close ticket #203 [for Andrew Straw].

==

numpy/matlib.py
==================
f9a971e;Stefan van der Walt;2006-07-24 12:37:51 +0000;Fix ticket #203 [for Andrew Straw].

==

numpy/matlib.py
==================
9355b1c;Stefan van der Walt;2006-07-21 23:27:35 +0000;Remove test that fails on windows.

==

numpy/core/tests/test_regression.py
==================
324e7f2;Stefan van der Walt;2006-07-21 12:00:44 +0000;Add more regression tests.

==

numpy/core/tests/test_regression.py
==================
07e319e;Travis Oliphant;2006-07-21 08:04:46 +0000;Change version number.

==

numpy/version.py
==================
dcad2ce;Travis Oliphant;2006-07-21 08:03:27 +0000;Change trunk to version 1.1

==

numpy/version.py
==================
3e0ef32;Travis Oliphant;2006-07-21 08:01:58 +0000;Change version to 01000000

==

numpy/core/include/numpy/arrayobject.h
==================
83d1d47;Travis Oliphant;2006-07-21 08:00:51 +0000;Change c-api to 1.0

==

numpy/core/include/numpy/arrayobject.h
==================
3faacbb;Travis Oliphant;2006-07-21 07:57:12 +0000;Fix memory leak and Fix segfault on Python2.3 by disabling threading.

==

numpy/core/setup.py
numpy/core/src/multiarraymodule.c
==================
edb7967;Travis Oliphant;2006-07-21 02:09:17 +0000;Fix up segfault problem in #196

==

numpy/core/src/arraytypes.inc.src
==================
bb8bf82;Stefan van der Walt;2006-07-21 02:02:17 +0000;Rename test.

==

numpy/core/tests/test_regression.py
==================
fa9dab8;Stefan van der Walt;2006-07-21 02:00:08 +0000;Use StringIO instead of TempFile. Add two more tests.

==

numpy/core/tests/test_regression.py
==================
4c2a11b;Travis Oliphant;2006-07-21 00:21:33 +0000;Add regression tests so they get loaded.

==

numpy/core/tests/test_multiarray.py
==================
da03634;Travis Oliphant;2006-07-21 00:20:00 +0000;Update tests.

==

numpy/core/tests/test_regression.py
==================
948354a;Stefan van der Walt;2006-07-21 00:16:48 +0000;Keep valgrind happy: assign values to memory before using.

==

numpy/core/tests/test_regression.py
==================
b087a1d;Stefan van der Walt;2006-07-21 00:12:42 +0000;Test for #194.

==

numpy/core/tests/test_regression.py
==================
748de97;Travis Oliphant;2006-07-21 00:01:56 +0000;Fix so that broadcast copy and broadcast cast do not allow the broadcasted result to be larger than the destination.

==

numpy/core/src/arrayobject.c
==================
270c4fb;Stefan van der Walt;2006-07-20 23:57:53 +0000;Fix spelling of 'threshold'.

==

numpy/core/arrayprint.py
==================
6471522;Stefan van der Walt;2006-07-20 23:53:26 +0000;Remove unused names from __all__ in arrayprint.

==

numpy/core/arrayprint.py
==================
7b68d6b;Travis Oliphant;2006-07-20 23:40:30 +0000;Add explicit imports patch in #193

==

numpy/__init__.py
==================
ee4083f;Travis Oliphant;2006-07-20 22:58:35 +0000;Fixed a memory-leak in EnsureArray.  Added __array_priority__ to array scalars.  Added bug-fixes part of david huard's histogramdd ticket.

==

numpy/core/include/numpy/arrayobject.h
numpy/core/src/arrayobject.c
numpy/core/src/scalartypes.inc.src
numpy/lib/tests/test_twodim_base.py
numpy/lib/twodim_base.py
==================
feb0f3a;Stefan van der Walt;2006-07-20 22:48:49 +0000;Add more regression tests from recent tickets.

==

numpy/core/tests/test_regression.py
==================
046388a;Robert Kern;2006-07-20 22:18:51 +0000;Make sure we deal with null bytes appropriate when getting a random stream of bytes as a Python string.

==

numpy/random/mtrand/Python.pxi
numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
==================
e6b71b7;Stefan van der Walt;2006-07-20 21:55:39 +0000;Fixed spelling of type object to be consistent with rest of code.

==

numpy/add_newdocs.py
==================
9281fc7;Travis Oliphant;2006-07-20 21:20:43 +0000;Change file reading and writing to call file object instead of using PyFile_FromString

==

numpy/core/src/arraymethods.c
numpy/core/src/multiarraymodule.c
==================
3a4fd7e;Travis Oliphant;2006-07-20 20:57:30 +0000;Add more documentation.  Fix #99

==

numpy/add_newdocs.py
numpy/core/src/scalartypes.inc.src
==================
622701d;Travis Oliphant;2006-07-20 17:58:45 +0000;Clean up docstrings.

==

numpy/core/fromnumeric.py
numpy/lib/function_base.py
numpy/lib/utils.py
==================
999b6cd;Travis Oliphant;2006-07-20 01:58:39 +0000;Fix ticket #192

==

numpy/core/src/arrayobject.c
==================
9780ffa;Stefan van der Walt;2006-07-19 23:50:23 +0000;More regression tests from tickets.

==

numpy/core/tests/test_regression.py
==================
7b597d5;Travis Oliphant;2006-07-19 17:39:28 +0000;Remove TODO.txt

==

TODO.txt
==================
20a9e65;Stefan van der Walt;2006-07-19 16:37:08 +0000;Add more regression tests, provided by Albert Strasheim.

==

numpy/core/tests/test_regression.py
==================
5083166;Travis Oliphant;2006-07-19 16:19:00 +0000;Apply patch for unique from #154

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
0991c5d;Travis Oliphant;2006-07-19 15:55:43 +0000;Fix-up optimization for assignment.  Fix threading one more time.

==

numpy/core/include/numpy/arrayobject.h
numpy/core/src/arrayobject.c
==================
f78f75e;Travis Oliphant;2006-07-19 15:36:12 +0000;Don't release GIL for casting involving extended data-types.

==

numpy/core/src/arrayobject.c
==================
5172ae3;Travis Oliphant;2006-07-19 15:24:47 +0000;Fix up rec.array when dtype and formats are both None for cases that support it.  Alter dtype=object parsing so that tuples and lists are recognized as sequences.

==

numpy/core/records.py
numpy/core/src/arrayobject.c
numpy/core/tests/test_records.py
==================
b884d99;Travis Oliphant;2006-07-19 07:08:41 +0000;Improve creation of object arrays when dtype=object is specified.

==

numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
==================
48ef07d;Travis Oliphant;2006-07-19 03:33:22 +0000;Fix a couple of issues with object matrices

==

numpy/core/defmatrix.py
numpy/core/src/arrayobject.c
==================
d5a13c5;cookedm;2006-07-18 21:10:39 +0000;add some more docstrings

==

numpy/core/fromnumeric.py
numpy/core/src/arraymethods.c
numpy/lib/function_base.py
==================
ba41f2f;Travis Oliphant;2006-07-18 19:19:28 +0000;Fix sub-classing of matrices..

==

numpy/core/defmatrix.py
==================
fe95087;Travis Oliphant;2006-07-18 19:02:34 +0000;Fix pickling of dtype objects with hasobject set so hasobject gets set on un-pickle.

==

numpy/core/src/arrayobject.c
==================
70ff09c;Travis Oliphant;2006-07-18 17:16:08 +0000;Add GIL-releases to tofile method.

==

numpy/core/src/arrayobject.c
==================
eefce91;Travis Oliphant;2006-07-18 16:56:24 +0000;Fix ticket #175

==

numpy/core/ma.py
==================
bc0e889;Travis Oliphant;2006-07-18 16:52:28 +0000;Fixed order of DECREF and END_THREADS

==

numpy/core/src/multiarraymodule.c
==================
f1f0e0d;Travis Oliphant;2006-07-18 16:48:48 +0000;Fix FORTRANORDER support in tostring for discontiguous arrays.

==

numpy/core/src/arrayobject.c
==================
565f8c3;Travis Oliphant;2006-07-18 16:32:12 +0000;Added PyArray_ToString to C-API and made default .tostring() method return C-order.

==

numpy/core/code_generators/array_api_order.txt
numpy/core/include/numpy/arrayobject.h
numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
==================
b1015e1;Stefan van der Walt;2006-07-18 13:08:23 +0000;Regression tests from previous tickets.

==

numpy/core/tests/test_regression.py
==================
702655e;Travis Oliphant;2006-07-18 08:55:56 +0000;Change so that WITH_THREAD is used in a define statement

==

numpy/core/setup.py
==================
958601c;Travis Oliphant;2006-07-18 08:10:31 +0000;Fix ticket #178 which was an error whenever multiple buffers needed to be used to cast.

==

numpy/core/include/numpy/arrayobject.h
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/linalg/linalg.py
==================
3acb430;Travis Oliphant;2006-07-18 07:14:06 +0000;Fix to example.

==

benchmarks/simpleindex.py
==================
ae4de66;cookedm;2006-07-18 07:11:08 +0000;Add test that scalar types work (i.e., scalartype(number) == number) PPC OS X fails this for longdouble.

==

numpy/core/tests/test_scalarmath.py
==================
5211f02;cookedm;2006-07-18 07:10:08 +0000;fix small typo

==

numpy/core/src/scalartypes.inc.src
==================
b098d62;Travis Oliphant;2006-07-18 06:24:09 +0000;Fix-up usage of NPY_ALLOW_THREADS.  Default is now WITH_THREAD but an environment variable NUMPY_NOSMP can be set which will make the default 0

==

numpy/core/blasdot/_dotblas.c
numpy/core/include/numpy/arrayobject.h
numpy/core/include/numpy/old_defines.h
numpy/core/include/numpy/ufuncobject.h
numpy/core/setup.py
numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
numpy/core/src/ufuncobject.c
numpy/doc/pyrex/c_numpy.pxd
==================
6e37900;Travis Oliphant;2006-07-18 03:59:49 +0000;Make sure generated C-API uses new names.

==

numpy/core/blasdot/_dotblas.c
numpy/core/code_generators/generate_array_api.py
numpy/core/include/numpy/arrayobject.h
numpy/core/include/numpy/noprefix.h
numpy/core/include/numpy/old_defines.h
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
==================
78a9dbd;Travis Oliphant;2006-07-18 02:29:05 +0000;Allow threads at several places in the code.

==

numpy/core/blasdot/_dotblas.c
numpy/core/code_generators/array_api_order.txt
numpy/core/include/numpy/arrayobject.h
numpy/core/src/_sortmodule.c.src
numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
==================
10943b6;cookedm;2006-07-17 23:43:21 +0000;Replace ScipyTestCase with NumpyTestCase

==

numpy/core/tests/test_ma.py
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_umath.py
numpy/core/tests/test_unicode.py
numpy/dft/tests/test_helper.py
numpy/distutils/tests/f2py_ext/tests/test_fib2.py
numpy/distutils/tests/f2py_f90_ext/tests/test_foo.py
numpy/distutils/tests/gen_ext/tests/test_fib3.py
numpy/distutils/tests/pyrex_ext/tests/test_primes.py
numpy/distutils/tests/swig_ext/tests/test_example.py
numpy/distutils/tests/swig_ext/tests/test_example2.py
numpy/distutils/tests/test_misc_util.py
numpy/f2py/tests/array_from_pyobj/tests/test_array_from_pyobj.py
numpy/lib/tests/test_arraysetops.py
numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_getlimits.py
numpy/lib/tests/test_index_tricks.py
numpy/lib/tests/test_polynomial.py
numpy/lib/tests/test_shape_base.py
numpy/lib/tests/test_type_check.py
==================
2acb0e7;cookedm;2006-07-17 04:31:04 +0000;fix arch flags for ifort on machines in em64t mode

==

numpy/distutils/fcompiler/intel.py
==================
c47e6cb;cookedm;2006-07-14 19:49:44 +0000;make printed errors from approx_array_* better

==

numpy/testing/utils.py
==================
cf0dd87;cookedm;2006-07-14 19:49:19 +0000;Fix failing linalg.tests.test_det on 32-bit machines for csingle. This compares det() with the product of the eigenvalues, which were being calculated as csingles. Changing that to cdouble makes this work. I have no clue why this fails for 32-bit linux, but not 64-bit.

==

numpy/linalg/tests/test_linalg.py
==================
46fa7a1;cookedm;2006-07-14 09:42:54 +0000;numpy.linalg: fix bug where complex arrays weren't being returned. Also improved test cases.

==

numpy/linalg/linalg.py
numpy/linalg/tests/test_linalg.py
==================
acd97c6;cookedm;2006-07-14 08:05:55 +0000;linalg routines will try to return their results as the same type as the arguments. i.e., if you pass in a single or csingle array, that's what you get back. (Routines still use double-precision, though). Also some cleanups.

==

numpy/linalg/linalg.py
==================
f57a662;cookedm;2006-07-14 08:03:25 +0000;numpy.linalg.setup.py: include the test cases

==

numpy/linalg/setup.py
==================
26a4597;cookedm;2006-07-14 08:02:52 +0000;Add test cases for linalg

==

numpy/linalg/tests/test_linalg.py
==================
b9cb27d;cookedm;2006-07-14 08:02:08 +0000;`` -> repr in numpy.testing

==

numpy/testing/numpytest.py
numpy/testing/utils.py
==================
c517a81;cookedm;2006-07-13 21:25:17 +0000;squash remaining uses of typecodes in linalg

==

numpy/linalg/linalg.py
==================
af40b19;cookedm;2006-07-13 21:08:44 +0000;fix bug in eig with complex solutions

==

numpy/linalg/linalg.py
==================
de0ac34;cookedm;2006-07-13 21:06:26 +0000;convertcode: replace ArrayType, NewAxis, and typecode =

==

numpy/lib/convertcode.py
==================
705fa01;cookedm;2006-07-13 02:48:24 +0000;Fix use of os.WEXITSTATUS and friends: only use if they exist

==

numpy/distutils/command/config.py
==================
e30882f;Travis Oliphant;2006-07-12 20:39:13 +0000;Fix ticket #177

==

numpy/core/blasdot/_dotblas.c
numpy/core/src/multiarraymodule.c
==================
1a9ba98;Travis Oliphant;2006-07-12 19:04:25 +0000;Keep rand and randn in matlib and make them take tuples as well as individual arguments.

==

numpy/matlib.py
==================
3e05403;Travis Oliphant;2006-07-12 08:50:53 +0000;Fix docstrings.

==

numpy/core/fromnumeric.py
numpy/core/src/arraymethods.c
==================
27c212b;Stefan van der Walt;2006-07-12 08:36:01 +0000;Change occurrences of N.rand to N.random.rand.

==

benchmarks/simpleindex.py
numpy/matlib.py
==================
cadbb5f;Travis Oliphant;2006-07-12 06:49:51 +0000;Fix a bug due to optimizing compilers.  See http://www.nanoengineer-1.net/mediawiki/index.php?title=Bug_1058

==

numpy/linalg/dlamch.c
==================
0d68afb;Travis Oliphant;2006-07-12 06:42:35 +0000;Fix names used in dft.old refft->rfft

==

numpy/dft/old.py
==================
eb9f5f7;Travis Oliphant;2006-07-12 06:39:51 +0000;Remove global symbols from numpy. Remove use of replacetypechars in convertcode.

==

numpy/dft/info.py
numpy/lib/convertcode.py
numpy/random/info.py
==================
36d3c16;Fernando Perez;2006-07-12 06:02:28 +0000;Remove MANIFEST file at startup time, since distutils fails to properly update it.  Also add proper shebang line.

==

setup.py
==================
6a882ae;Travis Oliphant;2006-07-12 00:01:01 +0000;Add GIL-releasing calls

==

numpy/core/src/arrayobject.c
==================
d48cd46;Travis Oliphant;2006-07-11 21:50:11 +0000;Fix base when using array interface and a buffer object.

==

numpy/core/src/arrayobject.c
==================
a345bd2;Travis Oliphant;2006-07-11 21:39:04 +0000;Fix .choose docstring and allow more functions to be 'vectorized'

==

numpy/core/src/arraymethods.c
numpy/lib/function_base.py
==================
107a45f;Travis Oliphant;2006-07-11 16:04:38 +0000;Fix casting of signed ints to unsigned ints and Change aligned=0 to aligned=False in records.py

==

numpy/core/records.py
numpy/core/src/arrayobject.c
==================
e438206;Travis Oliphant;2006-07-11 05:42:27 +0000;Fix so formats as dtype is not accepted.

==

numpy/core/records.py
==================
6880ab5;Travis Oliphant;2006-07-11 05:32:26 +0000;Alter order of records.py keyword arguments and allow dtype= keyword or formats= keyword to determine type.

==

numpy/core/records.py
==================
1e689a2;Travis Oliphant;2006-07-11 04:48:54 +0000;Add the dtype= keyword to records.py functions

==

numpy/core/records.py
==================
9e82f3c;Travis Oliphant;2006-07-11 04:37:03 +0000;Add dtype= keyword to functions for record arrays so that pre-built descriptors can be used.

==

numpy/core/records.py
numpy/core/src/arrayobject.c
==================
bedbd80;Travis Oliphant;2006-07-11 04:05:28 +0000;Make third argument to recarray.__new__ a keyword.

==

numpy/core/records.py
==================
ac7ff77;Travis Oliphant;2006-07-10 23:05:09 +0000;MADE NPY_ versions of all PyArray_ prefixes corresponding to CONSTANTS.  Created a names member of PyArray_Descr and changed usages that extracted -1 out of the fields dict.

==

numpy/core/_internal.py
numpy/core/code_generators/array_api_order.txt
numpy/core/code_generators/generate_array_api.py
numpy/core/include/numpy/arrayobject.h
numpy/core/include/numpy/old_defines.h
numpy/core/records.py
numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
numpy/core/src/scalartypes.inc.src
==================
b4ca1e1;cookedm;2006-07-10 23:00:58 +0000;replace some bare except:'s

==

numpy/core/records.py
numpy/lib/index_tricks.py
==================
18cecea;cookedm;2006-07-10 22:23:13 +0000;fix warning about comparisions in scalarmathmodule.c.src

==

numpy/core/src/scalarmathmodule.c.src
==================
0a7f9f5;Stefan van der Walt;2006-07-10 21:11:05 +0000;Use dtype in numeric.indices.

==

numpy/core/numeric.py
==================
c245978;Tim Leslie;2006-07-10 12:44:46 +0000;fix tabs -> spaces

==

numpy/core/fromnumeric.py
==================
6e4374e;Tim Leslie;2006-07-10 12:28:50 +0000;remove unused import

==

numpy/core/memmap.py
==================
1643267;Tim Leslie;2006-07-10 12:20:04 +0000;fix clobbering of N

==

numpy/matlib.py
==================
23c7be5;Travis Oliphant;2006-07-08 09:36:50 +0000;Comment changes.

==

numpy/core/src/arrayobject.c
==================
16013d9;Travis Oliphant;2006-07-08 09:26:41 +0000;Fix 0-stride contiguous bug.

==

numpy/core/src/arrayobject.c
numpy/core/tests/test_multiarray.py
==================
adeeb81;Travis Oliphant;2006-07-08 04:00:53 +0000;Add CopyAnyInto and CastAnyInto functions for implementing UPDATEIFCOPY functionality when source and destination are not broadcastable but the same shape.

==

numpy/core/code_generators/array_api_order.txt
numpy/core/include/numpy/arrayobject.h
numpy/core/src/arrayobject.c
==================
36c839a;Travis Oliphant;2006-07-08 03:04:28 +0000;Add simple get_numarray_include() function and typedefs for completeness

==

numpy/core/include/numpy/arrayobject.h
numpy/lib/utils.py
==================
3655a56;Travis Oliphant;2006-07-08 02:21:36 +0000;Fix problem with CheckFromAny when descr is NULL

==

numpy/core/src/arrayobject.c
==================
56d04a8;Travis Oliphant;2006-07-08 02:08:07 +0000;fix numarray package a bit.

==

numpy/core/include/numpy/noprefix.h
numpy/numarray/__init__.py
numpy/numarray/util.py
==================
a8b6880;Travis Oliphant;2006-07-08 01:54:48 +0000;Add definition to avoid repeat noprefix.h defines

==

numpy/core/include/numpy/noprefix.h
==================
21e52f0;Travis Oliphant;2006-07-08 01:50:46 +0000;Fix f2py and doc

==

numpy/core/include/numpy/ufuncobject.h
numpy/doc/CAPI.txt
numpy/f2py/cfuncs.py
numpy/f2py/src/fortranobject.h
==================
b6f0858;Travis Oliphant;2006-07-08 01:17:35 +0000;More f2py changes

==

numpy/f2py/cb_rules.py
numpy/f2py/src/fortranobject.c
numpy/f2py/tests/array_from_pyobj/tests/test_array_from_pyobj.py
numpy/f2py/tests/array_from_pyobj/wrapmodule.c
==================
5694ae7;Travis Oliphant;2006-07-08 00:52:49 +0000;More fixes to f2py

==

numpy/f2py/src/fortranobject.c
==================
d1b4920;Travis Oliphant;2006-07-08 00:49:35 +0000;Fix f2py to use new names

==

numpy/core/include/numpy/arrayobject.h
numpy/f2py/cb_rules.py
numpy/f2py/cfuncs.py
numpy/f2py/rules.py
numpy/f2py/src/fortranobject.c
numpy/f2py/src/fortranobject.h
==================
a29b0e2;Travis Oliphant;2006-07-08 00:33:54 +0000;Remove tMIN and tMAX macros

==

numpy/core/include/numpy/arrayobject.h
==================
546ad88;Travis Oliphant;2006-07-08 00:32:06 +0000;Make _FLAGS names available in noprefix.h

==

numpy/core/include/numpy/noprefix.h
==================
6fbdc96;Travis Oliphant;2006-07-08 00:28:33 +0000;Fix added files.

==

numpy/core/include/noprefix.h
numpy/core/include/numpy/noprefix.h
numpy/core/include/numpy/oldnumeric.h
==================
62af9ad;Travis Oliphant;2006-07-08 00:26:22 +0000;Add noprefix.h header

==

numpy/core/include/noprefix.h
==================
1acf453;Travis Oliphant;2006-07-08 00:24:12 +0000;Apply npy_ and NPY_ prefixes to all C-API names that don't already have PyArray_ prefixes.

==

numpy/core/blasdot/_dotblas.c
numpy/core/code_generators/genapi.py
numpy/core/code_generators/generate_array_api.py
numpy/core/include/numpy/arrayobject.h
numpy/core/include/numpy/arrayscalars.h
numpy/core/include/numpy/ufuncobject.h
numpy/core/src/_sortmodule.c.src
numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
numpy/core/src/scalarmathmodule.c.src
numpy/core/src/scalartypes.inc.src
numpy/core/src/ufuncobject.c
numpy/core/src/umathmodule.c.src
numpy/lib/src/_compiled_base.c
numpy/linalg/lapack_litemodule.c
numpy/numarray/_capi.c
numpy/numarray/numpy/arraybase.h
numpy/numarray/numpy/nummacro.h
==================
8904c7a;Stefan van der Walt;2006-07-07 22:42:15 +0000;Fix numeric.indices on 64-bit platforms.

==

numpy/core/numeric.py
==================
46cb8b1;Travis Oliphant;2006-07-07 20:04:06 +0000;Fix-up uses of Bool as return type in C-API

==

numpy/core/include/numpy/arrayobject.h
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
==================
d896e9e;Travis Oliphant;2006-07-07 18:55:19 +0000;Make .T == .transpose()

==

numpy/core/ma.py
numpy/core/src/arrayobject.c
==================
5ee1481;Travis Oliphant;2006-07-07 18:50:08 +0000;Add library of matrix functions.

==

numpy/core/defmatrix.py
numpy/matlib.py
==================
876176a;Stefan van der Walt;2006-07-07 16:46:58 +0000;Don't want to assign test to NumpyTest().test (which instantiates NumpyTest), so rather bring over its docstring.

==

numpy/__init__.py
==================
6dc0d80;Stefan van der Walt;2006-07-07 16:24:53 +0000;Add docstring for bincount.

==

numpy/lib/function_base.py
==================
7979112;Stefan van der Walt;2006-07-07 15:45:41 +0000;Scan for abs(level) tests.

==

numpy/testing/numpytest.py
==================
80f1d78;Travis Oliphant;2006-07-07 08:18:02 +0000;Remove .M .A .H attribute.  Keep .T attribute as .transpose for >=2d.  Creates 2-d from 1-d and returns self for 0-d.  Fix-up flag-checking when stride 0 is coupled with dim == 1

==

numpy/core/defmatrix.py
numpy/core/ma.py
numpy/core/src/arrayobject.c
numpy/core/src/scalartypes.inc.src
==================
ddfe20b;Travis Oliphant;2006-07-07 04:03:29 +0000;Fix memory leak in #172

==

numpy/core/src/multiarraymodule.c
==================
3ea289e;Travis Oliphant;2006-07-06 21:41:57 +0000;Speed up mod function using fmod and add use_pythonmath and use_scalarmath functions to alter the tables of the appropriate array scalars.

==

numpy/core/__init__.py
numpy/core/src/scalarmathmodule.c.src
numpy/core/src/umathmodule.c.src
==================
03908e3;chanley;2006-07-06 20:32:49 +0000;Fix to NA_OptionalOutputArray so that resulting array is a copy of the master when the specified output array is NULL or None,  i.e. omitted.  flags. Submitted on behalf of jmiller.

==

numpy/numarray/_capi.c
==================
e1d2437;cookedm;2006-07-06 17:15:36 +0000;[distutils-revamp] some more cleanups. Use core.get_distribution() instead of distutils.core._setup_distribution

==

ccompiler.py
command/config_compiler.py
fcompiler/__init__.py
misc_util.py
==================
a880c68;cookedm;2006-07-06 17:12:43 +0000;[distutils-revamp] Some initial cleanups.

==

conv_template.py
core.py
from_template.py
==================
be3e208;cookedm;2006-07-06 17:05:04 +0000;Patch from David Huard to future-proof histogram2d test

==

numpy/lib/tests/test_twodim_base.py
==================
6782a92;cookedm;2006-07-06 16:57:20 +0000;Branch numpy.distutils to distutils-revamp

==

COMPATIBILITY
DEV_README.txt
LICENSE.txt
MANIFEST.in
README.txt
TEST_COMMIT
THANKS.txt
TODO.txt
__init__.py
__version__.py
benchmarks/casting.py
benchmarks/creating.py
benchmarks/simpleindex.py
benchmarks/sorting.py
ccompiler.py
command/__init__.py
command/bdist_rpm.py
command/build.py
command/build_clib.py
command/build_ext.py
command/build_py.py
command/build_scripts.py
command/build_src.py
command/config.py
command/config_compiler.py
command/egg_info.py
command/install.py
command/install_data.py
command/install_headers.py
command/sdist.py
conv_template.py
core.py
cpuinfo.py
exec_command.py
extension.py
fcompiler/__init__.py
fcompiler/absoft.py
fcompiler/compaq.py
fcompiler/g95.py
fcompiler/gnu.py
fcompiler/hpux.py
fcompiler/ibm.py
fcompiler/intel.py
fcompiler/lahey.py
fcompiler/mips.py
fcompiler/nag.py
fcompiler/none.py
fcompiler/pg.py
fcompiler/sun.py
fcompiler/vast.py
from_template.py
info.py
intelccompiler.py
interactive.py
lib2def.py
line_endings.py
log.py
mingw32ccompiler.py
misc_util.py
numpy/__init__.py
numpy/_import_tools.py
numpy/add_newdocs.py
numpy/core/__init__.py
numpy/core/_internal.py
numpy/core/arrayprint.py
numpy/core/blasdot/_dotblas.c
numpy/core/blasdot/cblas.h
numpy/core/code_generators/array_api_order.txt
numpy/core/code_generators/genapi.py
numpy/core/code_generators/generate_array_api.py
numpy/core/code_generators/generate_ufunc_api.py
numpy/core/code_generators/generate_umath.py
numpy/core/code_generators/multiarray_api_order.txt
numpy/core/code_generators/ufunc_api_order.txt
numpy/core/defchararray.py
numpy/core/defmatrix.py
numpy/core/fromnumeric.py
numpy/core/include/numpy/arrayobject.h
numpy/core/include/numpy/arrayscalars.h
numpy/core/include/numpy/fenv/fenv.c
numpy/core/include/numpy/fenv/fenv.h
numpy/core/include/numpy/ufuncobject.h
numpy/core/info.py
numpy/core/ma.py
numpy/core/memmap.py
numpy/core/numeric.py
numpy/core/numerictypes.py
numpy/core/records.py
numpy/core/setup.py
numpy/core/src/_isnan.c
numpy/core/src/_signbit.c
numpy/core/src/_sortmodule.c.src
numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
numpy/core/src/scalarmathmodule.c.src
numpy/core/src/scalartypes.inc.src
numpy/core/src/ucsnarrow.c
numpy/core/src/ufuncobject.c
numpy/core/src/umathmodule.c.src
numpy/core/tests/test_defmatrix.py
numpy/core/tests/test_ma.py
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_numeric.py
numpy/core/tests/test_numerictypes.py
numpy/core/tests/test_records.py
numpy/core/tests/test_scalarmath.py
numpy/core/tests/test_umath.py
numpy/core/tests/test_unicode.py
numpy/core/tests/testdata.fits
numpy/dft/__init__.py
numpy/dft/fftpack.c
numpy/dft/fftpack.h
numpy/dft/fftpack.py
numpy/dft/fftpack_litemodule.c
numpy/dft/helper.py
numpy/dft/info.py
numpy/dft/old.py
numpy/dft/setup.py
numpy/dft/tests/test_helper.py
numpy/distutils/__init__.py
numpy/distutils/__version__.py
numpy/distutils/ccompiler.py
numpy/distutils/command/__init__.py
numpy/distutils/command/bdist_rpm.py
numpy/distutils/command/build.py
numpy/distutils/command/build_clib.py
numpy/distutils/command/build_ext.py
numpy/distutils/command/build_py.py
numpy/distutils/command/build_scripts.py
numpy/distutils/command/build_src.py
numpy/distutils/command/config.py
numpy/distutils/command/config_compiler.py
numpy/distutils/command/egg_info.py
numpy/distutils/command/install.py
numpy/distutils/command/install_data.py
numpy/distutils/command/install_headers.py
numpy/distutils/command/sdist.py
numpy/distutils/conv_template.py
numpy/distutils/core.py
numpy/distutils/cpuinfo.py
numpy/distutils/exec_command.py
numpy/distutils/extension.py
numpy/distutils/fcompiler/__init__.py
numpy/distutils/fcompiler/absoft.py
numpy/distutils/fcompiler/compaq.py
numpy/distutils/fcompiler/g95.py
numpy/distutils/fcompiler/gnu.py
numpy/distutils/fcompiler/hpux.py
numpy/distutils/fcompiler/ibm.py
numpy/distutils/fcompiler/intel.py
numpy/distutils/fcompiler/lahey.py
numpy/distutils/fcompiler/mips.py
numpy/distutils/fcompiler/nag.py
numpy/distutils/fcompiler/none.py
numpy/distutils/fcompiler/pg.py
numpy/distutils/fcompiler/sun.py
numpy/distutils/fcompiler/vast.py
numpy/distutils/from_template.py
numpy/distutils/info.py
numpy/distutils/intelccompiler.py
numpy/distutils/interactive.py
numpy/distutils/lib2def.py
numpy/distutils/line_endings.py
numpy/distutils/log.py
numpy/distutils/mingw32ccompiler.py
numpy/distutils/misc_util.py
numpy/distutils/setup.py
numpy/distutils/system_info.py
numpy/distutils/tests/f2py_ext/__init__.py
numpy/distutils/tests/f2py_ext/setup.py
numpy/distutils/tests/f2py_ext/src/fib1.f
numpy/distutils/tests/f2py_ext/src/fib2.pyf
numpy/distutils/tests/f2py_ext/tests/test_fib2.py
numpy/distutils/tests/f2py_f90_ext/__init__.py
numpy/distutils/tests/f2py_f90_ext/include/body.f90
numpy/distutils/tests/f2py_f90_ext/setup.py
numpy/distutils/tests/f2py_f90_ext/src/foo_free.f90
numpy/distutils/tests/f2py_f90_ext/tests/test_foo.py
numpy/distutils/tests/gen_ext/__init__.py
numpy/distutils/tests/gen_ext/setup.py
numpy/distutils/tests/gen_ext/tests/test_fib3.py
numpy/distutils/tests/pyrex_ext/__init__.py
numpy/distutils/tests/pyrex_ext/primes.pyx
numpy/distutils/tests/pyrex_ext/setup.py
numpy/distutils/tests/pyrex_ext/tests/test_primes.py
numpy/distutils/tests/setup.py
numpy/distutils/tests/swig_ext/__init__.py
numpy/distutils/tests/swig_ext/setup.py
numpy/distutils/tests/swig_ext/src/example.c
numpy/distutils/tests/swig_ext/src/example.i
numpy/distutils/tests/swig_ext/src/zoo.cc
numpy/distutils/tests/swig_ext/src/zoo.h
numpy/distutils/tests/swig_ext/src/zoo.i
numpy/distutils/tests/swig_ext/tests/test_example.py
numpy/distutils/tests/swig_ext/tests/test_example2.py
numpy/distutils/tests/test_misc_util.py
numpy/distutils/unixccompiler.py
numpy/doc/CAPI.txt
numpy/doc/DISTUTILS.txt
numpy/doc/README.txt
numpy/doc/pyrex/MANIFEST
numpy/doc/pyrex/Makefile
numpy/doc/pyrex/c_numpy.pxd
numpy/doc/pyrex/c_python.pxd
numpy/doc/pyrex/notes
numpy/doc/pyrex/numpyx.c
numpy/doc/pyrex/numpyx.pyx
numpy/doc/pyrex/run_test.py
numpy/doc/pyrex/setup.py
numpy/doc/records.txt
numpy/doc/swig/HelperFunctions.txt
numpy/doc/swig/Makefile
numpy/doc/swig/README
numpy/doc/swig/Series.i
numpy/doc/swig/numpy.i
numpy/doc/swig/series.cxx
numpy/doc/swig/series.h
numpy/doc/swig/setup.py
numpy/doc/swig/testSeries.py
numpy/doc/ufuncs.txt
numpy/dual.py
numpy/f2py/BUGS.txt
numpy/f2py/Makefile
numpy/f2py/NEWS.txt
numpy/f2py/README.txt
numpy/f2py/TODO.txt
numpy/f2py/__init__.py
numpy/f2py/__version__.py
numpy/f2py/auxfuncs.py
numpy/f2py/capi_maps.py
numpy/f2py/cb_rules.py
numpy/f2py/cfuncs.py
numpy/f2py/common_rules.py
numpy/f2py/crackfortran.py
numpy/f2py/diagnose.py
numpy/f2py/doc/Makefile
numpy/f2py/doc/Release-1.x.txt
numpy/f2py/doc/Release-2.x.txt
numpy/f2py/doc/Release-3.x.txt
numpy/f2py/doc/Release-4.x.txt
numpy/f2py/doc/apps.tex
numpy/f2py/doc/bugs.tex
numpy/f2py/doc/collectinput.py
numpy/f2py/doc/commands.tex
numpy/f2py/doc/ex1/arr.f
numpy/f2py/doc/ex1/bar.f
numpy/f2py/doc/ex1/foo.f
numpy/f2py/doc/ex1/foobar-smart.f90
numpy/f2py/doc/ex1/foobar.f90
numpy/f2py/doc/ex1/foobarmodule.tex
numpy/f2py/doc/ex1/runme
numpy/f2py/doc/f2py2e.tex
numpy/f2py/doc/f2python9-final/README.txt
numpy/f2py/doc/f2python9-final/aerostructure.jpg
numpy/f2py/doc/f2python9-final/flow.jpg
numpy/f2py/doc/f2python9-final/mk_html.sh
numpy/f2py/doc/f2python9-final/mk_pdf.sh
numpy/f2py/doc/f2python9-final/mk_ps.sh
numpy/f2py/doc/f2python9-final/src/examples/exp1.f
numpy/f2py/doc/f2python9-final/src/examples/exp1mess.txt
numpy/f2py/doc/f2python9-final/src/examples/exp1session.txt
numpy/f2py/doc/f2python9-final/src/examples/foo.pyf
numpy/f2py/doc/f2python9-final/src/examples/foom.pyf
numpy/f2py/doc/f2python9-final/structure.jpg
numpy/f2py/doc/fortranobject.tex
numpy/f2py/doc/index.html
numpy/f2py/doc/intro.tex
numpy/f2py/doc/multiarray/array_from_pyobj.c
numpy/f2py/doc/multiarray/bar.c
numpy/f2py/doc/multiarray/foo.f
numpy/f2py/doc/multiarray/fortran_array_from_pyobj.txt
numpy/f2py/doc/multiarray/fun.pyf
numpy/f2py/doc/multiarray/run.pyf
numpy/f2py/doc/multiarray/transpose.txt
numpy/f2py/doc/multiarrays.txt
numpy/f2py/doc/notes.tex
numpy/f2py/doc/oldnews.html
numpy/f2py/doc/options.tex
numpy/f2py/doc/python9.tex
numpy/f2py/doc/signaturefile.tex
numpy/f2py/doc/using_F_compiler.txt
numpy/f2py/doc/win32_notes.txt
numpy/f2py/docs/FAQ.txt
numpy/f2py/docs/HISTORY.txt
numpy/f2py/docs/OLDNEWS.txt
numpy/f2py/docs/README.txt
numpy/f2py/docs/TESTING.txt
numpy/f2py/docs/THANKS.txt
numpy/f2py/docs/default.css
numpy/f2py/docs/docutils.conf
numpy/f2py/docs/hello.f
numpy/f2py/docs/pyforttest.pyf
numpy/f2py/docs/pytest.py
numpy/f2py/docs/simple.f
numpy/f2py/docs/simple_session.dat
numpy/f2py/docs/usersguide/allocarr.f90
numpy/f2py/docs/usersguide/allocarr_session.dat
numpy/f2py/docs/usersguide/array.f
numpy/f2py/docs/usersguide/array_session.dat
numpy/f2py/docs/usersguide/calculate.f
numpy/f2py/docs/usersguide/calculate_session.dat
numpy/f2py/docs/usersguide/callback.f
numpy/f2py/docs/usersguide/callback2.pyf
numpy/f2py/docs/usersguide/callback_session.dat
numpy/f2py/docs/usersguide/common.f
numpy/f2py/docs/usersguide/common_session.dat
numpy/f2py/docs/usersguide/compile_session.dat
numpy/f2py/docs/usersguide/default.css
numpy/f2py/docs/usersguide/docutils.conf
numpy/f2py/docs/usersguide/extcallback.f
numpy/f2py/docs/usersguide/extcallback_session.dat
numpy/f2py/docs/usersguide/fib1.f
numpy/f2py/docs/usersguide/fib1.pyf
numpy/f2py/docs/usersguide/fib2.pyf
numpy/f2py/docs/usersguide/fib3.f
numpy/f2py/docs/usersguide/ftype.f
numpy/f2py/docs/usersguide/ftype_session.dat
numpy/f2py/docs/usersguide/index.txt
numpy/f2py/docs/usersguide/moddata.f90
numpy/f2py/docs/usersguide/moddata_session.dat
numpy/f2py/docs/usersguide/run_main_session.dat
numpy/f2py/docs/usersguide/scalar.f
numpy/f2py/docs/usersguide/scalar_session.dat
numpy/f2py/docs/usersguide/setup_example.py
numpy/f2py/docs/usersguide/spam.pyf
numpy/f2py/docs/usersguide/spam_session.dat
numpy/f2py/docs/usersguide/string.f
numpy/f2py/docs/usersguide/string_session.dat
numpy/f2py/docs/usersguide/var.pyf
numpy/f2py/docs/usersguide/var_session.dat
numpy/f2py/f2py.1
numpy/f2py/f2py2e.py
numpy/f2py/f2py_testing.py
numpy/f2py/f90mod_rules.py
numpy/f2py/func2subr.py
numpy/f2py/info.py
numpy/f2py/lib/__init__.py
numpy/f2py/lib/base_classes.py
numpy/f2py/lib/block_statements.py
numpy/f2py/lib/parsefortran.py
numpy/f2py/lib/readfortran.py
numpy/f2py/lib/research/rat/main.c
numpy/f2py/lib/research/rat/main.f90
numpy/f2py/lib/research/rat/rational.f90
numpy/f2py/lib/research/rat/wrap.f90
numpy/f2py/lib/sourceinfo.py
numpy/f2py/lib/splitline.py
numpy/f2py/lib/statements.py
numpy/f2py/lib/test_parser.py
numpy/f2py/lib/typedecl_statements.py
numpy/f2py/lib/utils.py
numpy/f2py/rules.py
numpy/f2py/setup.cfg
numpy/f2py/setup.py
numpy/f2py/src/fortranobject.c
numpy/f2py/src/fortranobject.h
numpy/f2py/src/test/Makefile
numpy/f2py/src/test/bar.f
numpy/f2py/src/test/foo.f
numpy/f2py/src/test/foo90.f90
numpy/f2py/src/test/foomodule.c
numpy/f2py/src/test/wrap.f
numpy/f2py/tests/array_from_pyobj/__init__.py
numpy/f2py/tests/array_from_pyobj/setup.py
numpy/f2py/tests/array_from_pyobj/tests/test_array_from_pyobj.py
numpy/f2py/tests/array_from_pyobj/wrapmodule.c
numpy/f2py/tests/c/return_real.py
numpy/f2py/tests/f77/callback.py
numpy/f2py/tests/f77/return_character.py
numpy/f2py/tests/f77/return_complex.py
numpy/f2py/tests/f77/return_integer.py
numpy/f2py/tests/f77/return_logical.py
numpy/f2py/tests/f77/return_real.py
numpy/f2py/tests/f90/return_character.py
numpy/f2py/tests/f90/return_complex.py
numpy/f2py/tests/f90/return_integer.py
numpy/f2py/tests/f90/return_logical.py
numpy/f2py/tests/f90/return_real.py
numpy/f2py/tests/mixed/foo.f
numpy/f2py/tests/mixed/foo_fixed.f90
numpy/f2py/tests/mixed/foo_free.f90
numpy/f2py/tests/mixed/run.py
numpy/f2py/tests/run_all.py
numpy/f2py/use_rules.py
numpy/lib/UserArray.py
numpy/lib/__init__.py
numpy/lib/arraysetops.py
numpy/lib/convdtype.py
numpy/lib/convertcode.py
numpy/lib/function_base.py
numpy/lib/getlimits.py
numpy/lib/index_tricks.py
numpy/lib/info.py
numpy/lib/machar.py
numpy/lib/mlab.py
numpy/lib/polynomial.py
numpy/lib/scimath.py
numpy/lib/setup.py
numpy/lib/shape_base.py
numpy/lib/src/_compiled_base.c
numpy/lib/tests/test_arraysetops.py
numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_getlimits.py
numpy/lib/tests/test_index_tricks.py
numpy/lib/tests/test_polynomial.py
numpy/lib/tests/test_shape_base.py
numpy/lib/tests/test_twodim_base.py
numpy/lib/tests/test_type_check.py
numpy/lib/tests/test_ufunclike.py
numpy/lib/twodim_base.py
numpy/lib/type_check.py
numpy/lib/ufunclike.py
numpy/lib/utils.py
numpy/linalg/__init__.py
numpy/linalg/blas_lite.c
numpy/linalg/dlamch.c
numpy/linalg/dlapack_lite.c
numpy/linalg/f2c.h
numpy/linalg/f2c_lite.c
numpy/linalg/info.py
numpy/linalg/lapack_lite/README
numpy/linalg/lapack_lite/clapack_scrub.py
numpy/linalg/lapack_lite/fortran.py
numpy/linalg/lapack_lite/make_lite.py
numpy/linalg/lapack_lite/wrapped_routines
numpy/linalg/lapack_litemodule.c
numpy/linalg/linalg.py
numpy/linalg/old.py
numpy/linalg/setup.py
numpy/linalg/zlapack_lite.c
numpy/numarray/__init__.py
numpy/numarray/_capi.c
numpy/numarray/numpy/arraybase.h
numpy/numarray/numpy/cfunc.h
numpy/numarray/numpy/ieeespecial.h
numpy/numarray/numpy/libnumarray.h
numpy/numarray/numpy/numcomplex.h
numpy/numarray/numpy/nummacro.h
numpy/numarray/setup.py
numpy/numarray/util.py
numpy/oldnumeric/__init__.py
numpy/oldnumeric/compat.py
numpy/oldnumeric/olddefaults.py
numpy/oldnumeric/setup.py
numpy/oldnumeric/tests/test_oldnumeric.py
numpy/random/__init__.py
numpy/random/info.py
numpy/random/mtrand/Python.pxi
numpy/random/mtrand/distributions.c
numpy/random/mtrand/distributions.h
numpy/random/mtrand/generate_mtrand_c.py
numpy/random/mtrand/initarray.c
numpy/random/mtrand/initarray.h
numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
numpy/random/mtrand/numpy.pxi
numpy/random/mtrand/randomkit.c
numpy/random/mtrand/randomkit.h
numpy/random/old.py
numpy/random/oldrng.py
numpy/random/oldrngstats.py
numpy/random/setup.py
numpy/setup.py
numpy/testing/__init__.py
numpy/testing/info.py
numpy/testing/numpytest.py
numpy/testing/setup.py
numpy/testing/utils.py
numpy/version.py
scipy_compatibility
setup.py
setupegg.py
site.cfg.example
system_info.py
tests/f2py_ext/__init__.py
tests/f2py_ext/setup.py
tests/f2py_ext/src/fib1.f
tests/f2py_ext/src/fib2.pyf
tests/f2py_ext/tests/test_fib2.py
tests/f2py_f90_ext/__init__.py
tests/f2py_f90_ext/include/body.f90
tests/f2py_f90_ext/setup.py
tests/f2py_f90_ext/src/foo_free.f90
tests/f2py_f90_ext/tests/test_foo.py
tests/gen_ext/__init__.py
tests/gen_ext/setup.py
tests/gen_ext/tests/test_fib3.py
tests/pyrex_ext/__init__.py
tests/pyrex_ext/primes.pyx
tests/pyrex_ext/setup.py
tests/pyrex_ext/tests/test_primes.py
tests/setup.py
tests/swig_ext/__init__.py
tests/swig_ext/setup.py
tests/swig_ext/src/example.c
tests/swig_ext/src/example.i
tests/swig_ext/src/zoo.cc
tests/swig_ext/src/zoo.h
tests/swig_ext/src/zoo.i
tests/swig_ext/tests/test_example.py
tests/swig_ext/tests/test_example2.py
tests/test_misc_util.py
unixccompiler.py
==================
216f071;Travis Oliphant;2006-07-06 16:55:18 +0000;Fix UserArray.

==

numpy/doc/pyrex/numpyx.c
numpy/doc/pyrex/numpyx.pyx
numpy/lib/UserArray.py
==================
fb83db1;cookedm;2006-07-06 16:40:38 +0000;cache the ATLAS version computation

==

numpy/distutils/system_info.py
==================
18db7b3;Travis Oliphant;2006-07-06 13:57:38 +0000;Find reference-counting problem leading to memory leak in PyArray_Round

==

numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
==================
aa17d93;Travis Oliphant;2006-07-06 12:57:33 +0000;Get rid of silly returns in scalar-math module which was preventing it's working.

==

numpy/core/src/arrayobject.c
numpy/core/src/scalarmathmodule.c.src
==================
c1b2fc1;Travis Oliphant;2006-07-06 12:25:01 +0000;Optimize 1-d indexing and re-factor code that handles negative numbers in dimensions.

==

numpy/core/src/arrayobject.c
==================
a7b4952;Travis Oliphant;2006-07-06 11:09:46 +0000;Fix error in linalg.py

==

numpy/linalg/linalg.py
==================
42477d7;Travis Oliphant;2006-07-06 10:52:57 +0000;Fix missing ) in numpy.i

==

numpy/doc/swig/numpy.i
==================
a6d06e1;Travis Oliphant;2006-07-06 10:50:32 +0000;Add .M .A .T .H to array scalars.

==

numpy/core/src/arrayobject.c
numpy/core/src/scalartypes.inc.src
==================
11aa95a;Travis Oliphant;2006-07-06 09:29:19 +0000;Add .M .A .T .H attributes to MA

==

numpy/core/ma.py
==================
2a37179;Travis Oliphant;2006-07-06 09:17:02 +0000;Add .A, .H, .T, .M attributes to the ndarray.

==

numpy/core/defmatrix.py
numpy/core/src/arrayobject.c
==================
0f17838;edschofield;2006-07-06 08:50:35 +0000;Fixed typos in distutils.system_info

==

numpy/distutils/system_info.py
==================
fdd32af;Travis Oliphant;2006-07-06 08:24:25 +0000;Add comments for VOID_compare)

==

numpy/core/src/arraytypes.inc.src
==================
2f4f567;Travis Oliphant;2006-07-06 08:01:27 +0000;Add support for == and != comparison of void-type arrays.

==

numpy/core/src/arrayobject.c
==================
640a99d;Travis Oliphant;2006-07-06 07:06:44 +0000;Fix assert_array_compare to handle boolean return from equality testing (which can happen)

==

numpy/testing/utils.py
==================
485f171;Travis Oliphant;2006-07-06 06:57:03 +0000;Fix buffered reduce, accumulate, and reduceat.

==

numpy/core/include/numpy/arrayobject.h
numpy/core/src/ufuncobject.c
numpy/linalg/linalg.py
==================
823ca7e;Stefan van der Walt;2006-07-05 20:09:11 +0000;In meshgrid, use views on the input parameters to avoid changing their shapes. Fixes #169.

==

numpy/lib/function_base.py
==================
8027438;sasha;2006-07-05 18:52:23 +0000;default dtype conversion

==

numpy/lib/convdtype.py
==================
085ea43;Pearu Peterson;2006-07-05 09:49:16 +0000;Working on Fortran analyzer.

==

numpy/f2py/lib/base_classes.py
numpy/f2py/lib/block_statements.py
numpy/f2py/lib/parsefortran.py
numpy/f2py/lib/readfortran.py
numpy/f2py/lib/statements.py
numpy/f2py/lib/typedecl_statements.py
numpy/f2py/lib/utils.py
==================
f72e5a8;cookedm;2006-07-04 21:06:15 +0000;Redo mtrand.pyx with Pyrex 0.9.4.1: fixes bug in test_histogram2d on Python 2.3.5

==

numpy/random/mtrand/mtrand.c
==================
d4840f8;cookedm;2006-07-04 20:43:11 +0000;Convert linalg to use dtypes instead of typecodes

==

numpy/linalg/linalg.py
==================
a8672c2;Pearu Peterson;2006-07-04 12:12:47 +0000;Working on Fortran analyzer.

==

numpy/f2py/lib/base_classes.py
numpy/f2py/lib/block_statements.py
numpy/f2py/lib/parsefortran.py
numpy/f2py/lib/research/rat/rational.f90
numpy/f2py/lib/research/rat/wrap.f90
numpy/f2py/lib/splitline.py
numpy/f2py/lib/statements.py
numpy/f2py/lib/test_parser.py
numpy/f2py/lib/typedecl_statements.py
numpy/f2py/lib/utils.py
==================
17d8921;Travis Oliphant;2006-07-03 22:32:32 +0000;Check for error and asthetic spacing change.

==

numpy/core/numeric.py
numpy/core/src/ufuncobject.c
==================
fb9e2b0;Travis Oliphant;2006-07-03 21:10:52 +0000;Fix .ctypes.strides and .ctypes.shape to return None (interpreted as NULL by ctypes) if the array is 0-d.

==

numpy/core/_internal.py
==================
dbee46a;Travis Oliphant;2006-07-03 20:18:57 +0000;Change the name to ctypes_load_library

==

numpy/lib/utils.py
==================
7a90a21;Travis Oliphant;2006-07-03 20:17:32 +0000;Add a require function, a issubdtype, and a load_ctypes_function to NumPy

==

numpy/core/numeric.py
numpy/lib/utils.py
==================
6b7f236;Travis Oliphant;2006-07-03 09:41:49 +0000;Convert docstrings to reflect change to floating-point defaults.

==

numpy/core/_internal.py
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
==================
c5f757c;Travis Oliphant;2006-07-02 21:44:24 +0000;Fixed missing case in casting call.

==

numpy/core/src/arrayobject.c
==================
105354f;Pearu Peterson;2006-07-02 17:19:26 +0000;Added more Fortran parser tests.

==

numpy/f2py/lib/block_statements.py
numpy/f2py/lib/statements.py
numpy/f2py/lib/test_parser.py
==================
7221c11;Travis Oliphant;2006-07-02 08:18:08 +0000;Improve docstrings a little.

==

numpy/core/src/arrayobject.c
==================
e458361;Travis Oliphant;2006-07-02 07:58:48 +0000;Add _as_parameter_ method so arrays can be used directly as ctypes

==

numpy/core/_internal.py
numpy/core/src/arrayobject.c
==================
9ad24c5;Travis Oliphant;2006-07-02 05:30:14 +0000;Fix up failing tests.

==

numpy/core/_internal.py
numpy/core/ma.py
numpy/core/tests/test_defmatrix.py
==================
da42cda;Travis Oliphant;2006-07-02 02:59:54 +0000;Remove dependency on _internal.py from pickles. Clean up Py_ssize_t usage.  Add .ctypes attribute for use with the ctypes module if it's available.

==

benchmarks/casting.py
benchmarks/creating.py
numpy/core/_internal.py
numpy/core/include/numpy/arrayobject.h
numpy/core/numerictypes.py
numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/core/src/scalartypes.inc.src
==================
c00b400;Travis Oliphant;2006-07-01 20:54:24 +0000;Improve c_numpy.pxd a bit.  Re-name get_numpy_include() to get_include() and deprecate old name.  Add PyArray_ZEROS and PyArray_EMPTY macros which take type-number instead of data-type object.

==

numpy/core/include/numpy/arrayobject.h
numpy/doc/pyrex/c_numpy.pxd
numpy/lib/twodim_base.py
numpy/lib/utils.py
==================
b803061;Travis Oliphant;2006-07-01 17:36:14 +0000;Adjust histogram2d a bit.  Fix doc for logspace.

==

numpy/lib/function_base.py
numpy/lib/twodim_base.py
==================
3bf7055;Travis Oliphant;2006-07-01 17:11:27 +0000;Added histogram2d #161

==

numpy/lib/tests/test_twodim_base.py
numpy/lib/twodim_base.py
numpy/oldnumeric/olddefaults.py
==================
355f943;Travis Oliphant;2006-07-01 16:53:14 +0000;Fix typo shown in #164 and change dummy to two in PyArrayInterface

==

numpy/core/include/numpy/arrayobject.h
numpy/core/src/arrayobject.c
numpy/core/src/scalartypes.inc.src
==================
3584a11;Stefan van der Walt;2006-06-30 21:56:21 +0000;Make 'assert_equal' handle tuples (not only lists). Closes #163.

==

numpy/testing/utils.py
==================
7d4055d;Pearu Peterson;2006-06-30 21:45:16 +0000;More unit-tests for Fortran parser.

==

numpy/f2py/lib/statements.py
numpy/f2py/lib/test_parser.py
==================
7ab5d9e;cookedm;2006-06-30 20:45:55 +0000;For repr() of a matrix, add an extra space at the beginning of lines to line up columns.

==

numpy/core/defmatrix.py
==================
8ba48b0;Travis Oliphant;2006-06-30 20:28:48 +0000;Fix up numarray requirements flags.

==

numpy/numarray/numpy/nummacro.h
==================
7d4c3ed;Travis Oliphant;2006-06-30 20:04:28 +0000;Make the default array type float.

==

numpy/core/include/numpy/arrayobject.h
numpy/core/ma.py
numpy/core/numeric.py
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/core/tests/test_multiarray.py
numpy/lib/mlab.py
numpy/lib/twodim_base.py
numpy/oldnumeric/__init__.py
numpy/oldnumeric/olddefaults.py
==================
ec1662f;Pearu Peterson;2006-06-30 13:36:13 +0000;Writting parser unittests, fixed bugs.

==

numpy/f2py/lib/base_classes.py
numpy/f2py/lib/block_statements.py
numpy/f2py/lib/parsefortran.py
numpy/f2py/lib/readfortran.py
numpy/f2py/lib/splitline.py
numpy/f2py/lib/statements.py
numpy/f2py/lib/test_parser.py
numpy/f2py/lib/typedecl_statements.py
==================
9068554;Pearu Peterson;2006-06-30 13:28:59 +0000;Workout a way to access Fortran derived objects from C.

==

numpy/f2py/lib/research/rat/main.c
numpy/f2py/lib/research/rat/main.f90
numpy/f2py/lib/research/rat/rational.f90
==================
2b06537;Stefan van der Walt;2006-06-30 12:21:17 +0000;Cast to double instead of float in digitize.

==

numpy/lib/src/_compiled_base.c
numpy/lib/tests/test_function_base.py
==================
bbabc5c;Stefan van der Walt;2006-06-30 11:59:07 +0000;Add docstring and tests for digitize.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
339afa6;Travis Oliphant;2006-06-30 00:27:30 +0000;Fixed lapack finding on intel-mac

==

numpy/distutils/system_info.py
==================
f570f13;Travis Oliphant;2006-06-29 22:59:09 +0000;Fix up mtrand compile again.

==

numpy/random/mtrand/mtrand.c
==================
8af73d5;Pearu Peterson;2006-06-29 09:38:32 +0000;Fixed import error.

==

numpy/f2py/lib/parsefortran.py
==================
ac36767;Pearu Peterson;2006-06-29 09:35:39 +0000;Removed old files.

==

numpy/f2py/lib/block.py
numpy/f2py/lib/init.py
numpy/f2py/lib/stmt.py
==================
109772b;Pearu Peterson;2006-06-29 09:33:15 +0000;Finished impl. Fortran 77-2003 parse pattern classes.

==

numpy/f2py/lib/base_classes.py
numpy/f2py/lib/block_statements.py
numpy/f2py/lib/parsefortran.py
numpy/f2py/lib/readfortran.py
numpy/f2py/lib/sourceinfo.py
numpy/f2py/lib/splitline.py
numpy/f2py/lib/statements.py
numpy/f2py/lib/typedecl_statements.py
==================
9913769;Travis Oliphant;2006-06-29 01:41:03 +0000;Fix some compiler_cxx errors.

==

numpy/distutils/ccompiler.py
==================
b173aa1;Travis Oliphant;2006-06-28 19:12:46 +0000;Add simple indexing test.

==

benchmarks/simpleindex.py
==================
05bb6eb;cookedm;2006-06-28 19:08:32 +0000;Put back the test for bdist_egg when using setuptools

==

numpy/distutils/core.py
==================
d5a14e4;cookedm;2006-06-28 19:05:48 +0000;Don't import setuptools by default, but do use it if it has been imported. The setupegg.py script can be used instead of setup.py to use setuptools.

==

numpy/distutils/core.py
setupegg.py
==================
59ae2e8;Travis Oliphant;2006-06-28 18:41:09 +0000;Fix-up matrix indexing.

==

numpy/core/defmatrix.py
==================
b75bb07;cookedm;2006-06-28 18:35:16 +0000;from Neilen Marais: make numpy.testing compatible with the nosetest package with a trivial patch

==

numpy/testing/numpytest.py
==================
145d10c;Travis Oliphant;2006-06-28 01:10:10 +0000;Add benchmark for creating new arrays.

==

benchmarks/creating.py
==================
36c72bf;Travis Oliphant;2006-06-27 22:08:07 +0000;Add a function to retrieve a user-defined type number from the name of the associated type-object

==

benchmarks/casting.py
numpy/core/code_generators/multiarray_api_order.txt
numpy/core/src/arrayobject.c
==================
47c92e4;Travis Oliphant;2006-06-27 18:50:37 +0000;Fix setting of sub-classes that over-ride __getitem__

==

numpy/core/src/arrayobject.c
numpy/core/tests/test_defmatrix.py
==================
f3ecc66;cookedm;2006-06-27 18:44:29 +0000;Add the code that generates lapack_lite from LAPACK sources. This is from Numeric. I think we're still using the same generated sources.

==

numpy/linalg/lapack_lite/README
numpy/linalg/lapack_lite/clapack_scrub.py
numpy/linalg/lapack_lite/fortran.py
numpy/linalg/lapack_lite/make_lite.py
numpy/linalg/lapack_lite/wrapped_routines
==================
8290d01;Travis Oliphant;2006-06-27 11:27:42 +0000;Add some documentation to linalg.py

==

numpy/linalg/linalg.py
==================
3263664;Travis Oliphant;2006-06-27 03:32:19 +0000;allow _fillobject to handle non-object cases.

==

numpy/core/src/arrayobject.c
numpy/core/src/scalartypes.inc.src
==================
e3af921;Travis Oliphant;2006-06-27 03:12:04 +0000;Add support for fields in VOID_nonzero

==

numpy/core/src/arraytypes.inc.src
==================
7ae3b47;Travis Oliphant;2006-06-27 02:52:49 +0000;Add unit-test for record-arrays with object field.

==

numpy/core/records.py
numpy/core/tests/test_records.py
==================
41471a6;Travis Oliphant;2006-06-27 01:32:28 +0000;Back out accidental change.

==

numpy/core/records.py
==================
7e4a505;Travis Oliphant;2006-06-27 01:31:41 +0000;Fixes for objects in arrays.

==

numpy/core/records.py
numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
numpy/core/src/scalartypes.inc.src
==================
db8442b;Travis Oliphant;2006-06-27 00:11:59 +0000;Add support for object-arrays inside of other recorcd types.

==

numpy/core/code_generators/array_api_order.txt
numpy/core/include/numpy/arrayobject.h
numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
==================
4f442b4;Travis Oliphant;2006-06-26 22:05:54 +0000;Undo move to numpy_numarray.

==

numpy/numarray/_capi.c
numpy/numarray/numpy/arraybase.h
numpy/numarray/numpy/cfunc.h
numpy/numarray/numpy/ieeespecial.h
numpy/numarray/numpy/libnumarray.h
numpy/numarray/numpy/numcomplex.h
numpy/numarray/numpy/nummacro.h
numpy/numarray/numpy_numarray/arraybase.h
numpy/numarray/numpy_numarray/cfunc.h
numpy/numarray/numpy_numarray/ieeespecial.h
numpy/numarray/numpy_numarray/libnumarray.h
numpy/numarray/numpy_numarray/numcomplex.h
numpy/numarray/numpy_numarray/nummacro.h
numpy/numarray/setup.py
==================
a73855c;chanley;2006-06-26 21:43:23 +0000;Renamed numpy/numarray/numpy directory to numpy/numarray/numpy_numarray to be consistent with setup file and usage instructions.  Modified _capi.c to use the new directory name.

==

numpy/numarray/_capi.c
numpy/numarray/numpy/arraybase.h
numpy/numarray/numpy/cfunc.h
numpy/numarray/numpy/ieeespecial.h
numpy/numarray/numpy/libnumarray.h
numpy/numarray/numpy/numcomplex.h
numpy/numarray/numpy/nummacro.h
numpy/numarray/numpy_numarray/arraybase.h
numpy/numarray/numpy_numarray/cfunc.h
numpy/numarray/numpy_numarray/ieeespecial.h
numpy/numarray/numpy_numarray/libnumarray.h
numpy/numarray/numpy_numarray/numcomplex.h
numpy/numarray/numpy_numarray/nummacro.h
numpy/numarray/setup.py
==================
bc7a2ec;Travis Oliphant;2006-06-26 21:14:55 +0000;Fix missing error checks.

==

numpy/core/src/multiarraymodule.c
numpy/core/tests/test_numeric.py
==================
ce9de27;Travis Oliphant;2006-06-26 19:40:20 +0000;Fix #157

==

numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
==================
270fb0d;Travis Oliphant;2006-06-26 18:21:19 +0000;Reduce size of buffers for small cases.  Improve reference count handling for OBJECT arrays in new broadcast_cast code. Fix swapping test.

==

numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
==================
b2c84d9;Stefan van der Walt;2006-06-26 09:15:27 +0000;Revert previous change but add unit test to catch ticket #156.

==

numpy/core/src/arrayobject.c
numpy/core/tests/test_numeric.py
==================
e70feca;Stefan van der Walt;2006-06-26 08:32:08 +0000;Temporarily revert change made in r2665 that breaks dot.

==

numpy/core/src/arrayobject.c
==================
ff660cb;Pearu Peterson;2006-06-26 05:54:44 +0000;Cont. impl. Fortran parser.

==

numpy/f2py/lib/base_classes.py
numpy/f2py/lib/block_statements.py
numpy/f2py/lib/parsefortran.py
numpy/f2py/lib/readfortran.py
numpy/f2py/lib/splitline.py
numpy/f2py/lib/statements.py
numpy/f2py/lib/typedecl_statements.py
==================
ecd8d3e;Robert Kern;2006-06-25 04:08:34 +0000;Fix typo in README.

==

README.txt
==================
645875e;Travis Oliphant;2006-06-24 23:21:32 +0000;Allow void-type scalars to be sequences if they have fields.

==

numpy/core/src/arraymethods.c
numpy/core/src/scalartypes.inc.src
==================
b299336;Robert Kern;2006-06-24 20:55:00 +0000;Fix init_by_array to properly initialize the has_gauss and has_binomial members. Fixes #155.

==

numpy/random/mtrand/initarray.c
==================
bc4afd8;Travis Oliphant;2006-06-24 00:34:36 +0000;Fix copyswapn to take strides.

==

numpy/core/include/numpy/arrayobject.h
numpy/core/src/arraymethods.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/ufuncobject.c
==================
94bb3f5;Travis Oliphant;2006-06-24 00:00:27 +0000;Removed unnecessary use of copyswap.  Fixed up argsort (and lexsort) on byte-swapped data.

==

numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
==================
0ae9294;Travis Oliphant;2006-06-23 23:17:31 +0000;Move code and fix VOID_copyswap to recurse through fields.

==

numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
==================
cf80c72;Travis Oliphant;2006-06-23 22:43:08 +0000;Add code to descend through a field and increment (or decrement) any object reference counts.

==

numpy/core/include/numpy/arrayobject.h
numpy/core/src/arrayobject.c
numpy/lib/function_base.py
==================
96b0a3a;Travis Oliphant;2006-06-23 21:19:38 +0000;Implement rich comparisons for flatiter objects.

==

numpy/core/src/arrayobject.c
==================
ff9041e;Travis Oliphant;2006-06-23 21:07:31 +0000;Fix __array__ method of flatiter object to return base-class array

==

numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
==================
dd9f5c4;Travis Oliphant;2006-06-23 20:54:50 +0000;Fix unaligned object arrays a bit.

==

numpy/core/src/arraytypes.inc.src
==================
39ca507;Travis Oliphant;2006-06-23 20:44:53 +0000;Get Object arrays ready to be part of a structure (could have misaligned object arrays.

==

numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
==================
7dd0e2b;Travis Oliphant;2006-06-23 20:09:55 +0000;Clean up diag documentation.  Clean up PyArray_INCREF and PyArray_XDECREF to use new iterators.

==

numpy/core/src/arrayobject.c
numpy/lib/twodim_base.py
==================
6965183;Travis Oliphant;2006-06-22 23:44:33 +0000;Fix the problems with SciPy.

==

numpy/core/include/numpy/arrayobject.h
numpy/core/src/arrayobject.c
==================
bfd4274;cookedm;2006-06-22 19:53:02 +0000;Use INTP_FMT for formatting intp in strings

==

numpy/core/include/numpy/arrayobject.h
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/core/src/ufuncobject.c
==================
1d7c063;Travis Oliphant;2006-06-22 18:53:16 +0000;Cleaned up casting code to also handle broadcasting.  Several SciPy tests are still failing...

==

numpy/core/include/numpy/arrayobject.h
numpy/core/ma.py
numpy/core/src/arrayobject.c
numpy/numarray/numpy/arraybase.h
==================
d5a5da5;Pearu Peterson;2006-06-22 10:25:57 +0000;Cont. impl. Fortran parser.

==

numpy/f2py/lib/base_classes.py
numpy/f2py/lib/block.py
numpy/f2py/lib/block_statements.py
numpy/f2py/lib/init.py
numpy/f2py/lib/parsefortran.py
numpy/f2py/lib/readfortran.py
numpy/f2py/lib/statements.py
numpy/f2py/lib/stmt.py
numpy/f2py/lib/typedecl_statements.py
==================
1fe0237;Travis Oliphant;2006-06-22 08:48:54 +0000;Fix ticket #76 -- copying now uses broadcasting.

==

numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
==================
bcc293b;Travis Oliphant;2006-06-22 01:20:16 +0000;Speed up some copying code.  Add MoveInto and CopyInto variants of PyArray_<...>.  Add PyArray_CopyObject to C-API.

==

numpy/core/code_generators/array_api_order.txt
numpy/core/include/numpy/arrayobject.h
numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
==================
9b6417c;Travis Oliphant;2006-06-21 19:42:24 +0000;Add optimization for integer selection from array.

==

numpy/core/src/arrayobject.c
==================
851cbaa;Travis Oliphant;2006-06-21 18:21:54 +0000;Fix memory leak in indexing code.

==

numpy/core/src/arrayobject.c
==================
1c2110f;Travis Oliphant;2006-06-21 17:24:29 +0000;Add boolean indexing capability mixed with slice objects.

==

numpy/core/src/arrayobject.c
numpy/core/src/scalartypes.inc.src
numpy/core/tests/test_numeric.py
numpy/lib/index_tricks.py
==================
165a1f5;Stefan van der Walt;2006-06-21 14:04:00 +0000;Fix binary_repr for large numbers and add test.

==

numpy/core/numeric.py
numpy/core/tests/test_numeric.py
==================
1e40d58;Travis Oliphant;2006-06-21 00:27:10 +0000;Eliminate more warnings and add fixes from #149 and #150

==

numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/distutils/fcompiler/compaq.py
==================
b8e7ced;Travis Oliphant;2006-06-20 19:28:35 +0000;Remove PyArrayinterface Version string from __array_struct__ and add consumption support for the descr member (when it's present in the PyArrayInterface struct.

==

numpy/core/src/arrayobject.c
numpy/core/src/scalartypes.inc.src
==================
a44ae08;chanley;2006-06-20 15:55:02 +0000;Fixed build problem with Solaris compilers.  Needed to remove return values from void functions in numarray c-api.

==

numpy/numarray/_capi.c
==================
d33a8f6;Stefan van der Walt;2006-06-20 14:27:18 +0000;Use hexadecimal lookup table for binary_repr. Fix for input 0.

==

numpy/core/numeric.py
==================
d8645d7;Travis Oliphant;2006-06-20 09:27:40 +0000;Fix-up C-API support for numarray

==

numpy/core/src/arrayobject.c
==================
24b88b2;Travis Oliphant;2006-06-20 09:25:00 +0000;Changes suggested by experimentation with new data-types

==

numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
==================
4343bb6;Travis Oliphant;2006-06-20 09:05:48 +0000;One more name change.

==

numpy/numarray/_capi.c
numpy/numarray/numpy/arraybase.h
numpy/numarray/numpy/cfunc.h
numpy/numarray/numpy/ieeespecial.h
numpy/numarray/numpy/libnumarray.h
numpy/numarray/numpy/numcomplex.h
numpy/numarray/numpy/nummacro.h
numpy/numarray/numpy_numarray/arraybase.h
numpy/numarray/numpy_numarray/cfunc.h
numpy/numarray/numpy_numarray/ieeespecial.h
numpy/numarray/numpy_numarray/libnumarray.h
numpy/numarray/numpy_numarray/numcomplex.h
numpy/numarray/numpy_numarray/nummacro.h
==================
4854f60;Travis Oliphant;2006-06-20 09:04:03 +0000;Add numarray configuration command.

==

numpy/distutils/misc_util.py
==================
f17405e;Travis Oliphant;2006-06-20 08:55:58 +0000;More fixes to C-API for numarray

==

numpy/numarray/setup.py
numpy/numarray/util.py
==================
669c823;Travis Oliphant;2006-06-20 08:46:02 +0000;Fix-up C-API support for numarray

==

numpy/core/code_generators/multiarray_api_order.txt
numpy/core/include/numpy/arrayobject.h
numpy/core/src/arrayobject.c
numpy/numarray/_capi.c
numpy/numarray/numpy_numarray/arraybase.h
numpy/numarray/numpy_numarray/libnumarray.h
numpy/numarray/numpy_numarray/nummacro.h
numpy/setup.py
==================
b29b590;Travis Oliphant;2006-06-20 07:27:43 +0000;Fix reference-count problem in z **= 1 and more numarray compatiblity fixes.

==

numpy/core/include/numpy_numarray/arraybase.h
numpy/core/include/numpy_numarray/cfunc.h
numpy/core/include/numpy_numarray/ieeespecial.h
numpy/core/include/numpy_numarray/libnumarray.h
numpy/core/include/numpy_numarray/numcomplex.h
numpy/core/include/numpy_numarray/nummacro.h
numpy/core/src/arrayobject.c
numpy/numarray/_capi.c
numpy/numarray/numpy_numarray/arraybase.h
numpy/numarray/numpy_numarray/libnumarray.h
numpy/numarray/setup.py
numpy/numarray/util.py
==================
4f3c375;Travis Oliphant;2006-06-20 05:38:29 +0000;Add missing setup.py

==

numpy/numarray/setup.py
==================
b89e398;Travis Oliphant;2006-06-20 05:36:20 +0000;Move include files.

==

numpy/numarray/numpy_numarray/arraybase.h
numpy/numarray/numpy_numarray/cfunc.h
numpy/numarray/numpy_numarray/ieeespecial.h
numpy/numarray/numpy_numarray/libnumarray.h
numpy/numarray/numpy_numarray/numcomplex.h
numpy/numarray/numpy_numarray/nummacro.h
==================
be04d9c;Travis Oliphant;2006-06-20 01:31:48 +0000;Adding numarray C-API

==

numpy/numarray/__init__.py
numpy/numarray/_capi.c
numpy/setup.py
==================
69ec66b;Travis Oliphant;2006-06-20 01:24:25 +0000;Rename compat headers to numpy_numarray

==

numpy/core/include/numarray/arraybase.h
numpy/core/include/numarray/cfunc.h
numpy/core/include/numarray/ieeespecial.h
numpy/core/include/numarray/libnumarray.h
numpy/core/include/numarray/numcomplex.h
numpy/core/include/numarray/nummacro.h
numpy/core/include/numpy_numarray/arraybase.h
numpy/core/include/numpy_numarray/cfunc.h
numpy/core/include/numpy_numarray/ieeespecial.h
numpy/core/include/numpy_numarray/libnumarray.h
numpy/core/include/numpy_numarray/numcomplex.h
numpy/core/include/numpy_numarray/nummacro.h
==================
d953529;Travis Oliphant;2006-06-20 01:23:52 +0000;Add ieeespecial.h to numarray compat.

==

numpy/core/include/numarray/ieeespecial.h
==================
f1e6e2b;Travis Oliphant;2006-06-20 01:03:25 +0000;Make import_array and import_ufunc MACROS again.

==

numpy/core/code_generators/generate_array_api.py
numpy/core/code_generators/generate_ufunc_api.py
numpy/core/include/numarray/arraybase.h
numpy/core/include/numarray/cfunc.h
numpy/core/include/numarray/libnumarray.h
numpy/core/include/numarray/nummacro.h
numpy/core/src/_sortmodule.c.src
numpy/core/src/scalarmathmodule.c.src
numpy/core/src/umathmodule.c.src
numpy/lib/src/_compiled_base.c
numpy/linalg/lapack_litemodule.c
==================
c6c3f19;Travis Oliphant;2006-06-20 00:45:43 +0000;Draft of libnumarray C-API.

==

numpy/numarray/_capi.c
numpy/numarray/util.py
==================
aa2c114;Robert Kern;2006-06-19 23:26:36 +0000;Fix bad syntax in generated __config__.py files.

==

numpy/distutils/misc_util.py
==================
1dc30f8;Tim Hochberg;2006-06-19 21:14:39 +0000;**= Was being invoked twice when it should have gone through the fast path. Fixed and added a test that should capture it. Results was that that [0, 1, 2] **= 2 => [0, 1, 16].

==

numpy/core/src/arrayobject.c
numpy/core/tests/test_umath.py
==================
4eca928;Travis Oliphant;2006-06-19 20:08:41 +0000;Adding numarray c-api compatibility.

==

numpy/core/include/numarray/arraybase.h
numpy/core/include/numarray/libnumarray.h
numpy/core/include/numarray/numcomplex.h
numpy/core/include/numarray/nummacro.h
numpy/core/include/numpy/arraybase.h
numpy/core/include/numpy/libnumarray.h
numpy/core/include/numpy/numcomplex.h
numpy/core/include/numpy/nummacro.h
numpy/numarray/_capi.c
==================
4962bf9;Travis Oliphant;2006-06-19 20:04:39 +0000;Adding numarray compatibility C-API

==

numpy/core/include/numpy/arraybase.h
numpy/core/include/numpy/libnumarray.h
numpy/core/include/numpy/numcomplex.h
numpy/core/include/numpy/nummacro.h
==================
da320f4;Travis Oliphant;2006-06-19 18:58:21 +0000;Fix docstrings in numpy.dft

==

numpy/dft/fftpack.py
==================
43de54a;Travis Oliphant;2006-06-19 18:56:03 +0000;Add meshgrid to NumPy

==

numpy/lib/function_base.py
==================
8456d54;Travis Oliphant;2006-06-17 00:03:25 +0000;Updates and fixes to make NumPy compliant with array interface Version 3.  Still works with Numeric.

==

numpy/core/src/arrayobject.c
==================
23954ea;Travis Oliphant;2006-06-16 23:03:08 +0000;Clean up array interface...

==

numpy/core/include/numpy/arrayobject.h
numpy/core/src/arrayobject.c
numpy/core/src/scalartypes.inc.src
==================
ee966df;Travis Oliphant;2006-06-16 17:10:46 +0000;Fix abs(<complexscalar>) to return real

==

numpy/core/src/scalarmathmodule.c.src
==================
8a12952;cookedm;2006-06-16 05:18:39 +0000;Fix Python 2.3 incompatibilities - use of a generator in core/tests/test_numeric.py - you can't set __name__ on a function in 2.3

==

numpy/core/tests/test_numeric.py
numpy/core/tests/test_numerictypes.py
numpy/lib/utils.py
==================
b05d85b;cookedm;2006-06-15 18:58:59 +0000;Fix deprecated for when the function doesn't have a __dict__

==

numpy/lib/utils.py
==================
1174b73;cookedm;2006-06-15 17:46:48 +0000;For `deprecated`, include a note about the function being deprecated in its docstring. Also set the __name__ attribute and copy over function attributes.

==

numpy/lib/utils.py
==================
bd83339;Travis Oliphant;2006-06-15 16:16:55 +0000;Fix name issues in fftpack.  Add OpenBSD support to floating-point handling.

==

numpy/core/include/numpy/ufuncobject.h
numpy/dft/fftpack.py
==================
2f4a967;Travis Oliphant;2006-06-15 03:39:43 +0000;Expose deprecate function

==

numpy/dft/fftpack.py
numpy/lib/utils.py
numpy/oldnumeric/compat.py
==================
439ea9d;Travis Oliphant;2006-06-15 03:29:11 +0000;Make refft -> rfft and have old names for backwards compatibility.

==

numpy/core/src/arrayobject.c
numpy/dft/fftpack.py
==================
d5a134b;Travis Oliphant;2006-06-15 02:41:16 +0000;Fix-up unicode comparison for mis-aligned arrays.

==

numpy/core/src/arrayobject.c
==================
d1e359d;sasha;2006-06-14 23:28:39 +0000;modernized ufunc attribute access

==

numpy/core/src/ufuncobject.c
numpy/core/tests/test_umath.py
==================
80d85d6;Travis Oliphant;2006-06-14 21:40:16 +0000;Remove print statement.

==

numpy/lib/function_base.py
==================
b91fea2;Travis Oliphant;2006-06-14 18:53:17 +0000;Add error message.

==

numpy/core/src/ufuncobject.c
==================
4cd71bf;Travis Oliphant;2006-06-14 18:47:54 +0000;Fix bug in _myunincmp.

==

numpy/core/numeric.py
numpy/core/src/arrayobject.c
numpy/core/src/scalartypes.inc.src
numpy/core/tests/test_numerictypes.py
==================
11869d3;Travis Oliphant;2006-06-14 01:34:36 +0000;Compress Python-side array interface to __array_interface__ attribute.

==

numpy/core/defchararray.py
numpy/core/include/numpy/arrayobject.h
numpy/core/src/arrayobject.c
==================
6a4ff2d;cookedm;2006-06-14 01:21:22 +0000;Rework numpy.testing.utils. This tightens up equality tests a bit; some tests in numpy an scipy fail.

==

numpy/testing/utils.py
==================
b65ac29;Fernando Perez;2006-06-13 23:45:27 +0000;Remove -Wstrict-prototypes from C++ compilations (it's an invalid option for C++).

==

numpy/distutils/ccompiler.py
==================
fcf1365;Robert Kern;2006-06-13 16:54:08 +0000;Add CObject API

==

numpy/random/mtrand/Python.pxi
==================
7a95781;Travis Oliphant;2006-06-13 00:00:14 +0000;Preserve matrices.  Fix #142

==

numpy/lib/function_base.py
numpy/lib/shape_base.py
==================
bc5dc0a;Travis Oliphant;2006-06-12 23:24:04 +0000;Fix-up imports a bit.

==

numpy/lib/mlab.py
==================
6408d0d;Travis Oliphant;2006-06-12 23:13:30 +0000;Fix-up oldnumeric module

==

numpy/lib/mlab.py
numpy/oldnumeric/__init__.py
numpy/oldnumeric/setup.py
==================
fbf0b47;Travis Oliphant;2006-06-12 22:58:43 +0000;Check-in name-space changes so that numpy.oldnumeric is the compatibility module and numpy does not contain all of the names.

==

numpy/__init__.py
numpy/core/__init__.py
numpy/core/arrayprint.py
numpy/core/fromnumeric.py
numpy/core/ma.py
numpy/core/numeric.py
numpy/core/numerictypes.py
numpy/core/oldnumeric.py
numpy/core/tests/test_ma.py
numpy/core/tests/test_oldnumeric.py
numpy/lib/convertcode.py
numpy/lib/function_base.py
numpy/lib/machar.py
numpy/lib/mlab.py
numpy/lib/shape_base.py
numpy/oldnumeric/compat.py
numpy/oldnumeric/tests/test_oldnumeric.py
numpy/random/oldrngstats.py
numpy/setup.py
==================
b5e35c7;cookedm;2006-06-12 22:55:32 +0000;Checkin another error I found and not checked in, in numpy.distutils.system_info

==

numpy/distutils/system_info.py
==================
353954f;cookedm;2006-06-12 22:29:42 +0000;Fix 'UnboundLocalError' in numpy.distutils.command.config

==

numpy/distutils/command/config.py
==================
cc961e3;Travis Oliphant;2006-06-12 20:50:59 +0000;Fix ticket #140 where objects in a field could be specified but resulted in segfaults.

==

numpy/core/src/multiarraymodule.c
==================
c0d3293;Travis Oliphant;2006-06-12 20:24:52 +0000;Apply patch #137

==

numpy/core/defmatrix.py
numpy/dft/fftpack.py
numpy/lib/function_base.py
numpy/lib/index_tricks.py
numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
numpy/testing/utils.py
==================
844fd39;Travis Oliphant;2006-06-12 20:15:30 +0000;Changed normpath to normcase to close #129

==

numpy/distutils/conv_template.py
==================
275ac5f;Travis Oliphant;2006-06-12 20:05:10 +0000;Fix logging when 'None' is used to disable environment-variable

==

numpy/distutils/system_info.py
==================
ac34fb9;cookedm;2006-06-10 23:44:41 +0000;Fix incorrect type in PyArray_FromIter

==

numpy/core/src/multiarraymodule.c
==================
9bd3b4e;Tim Hochberg;2006-06-10 20:08:53 +0000;Replace Python version of fromiter with one coded in C.

==

numpy/core/numeric.py
numpy/core/src/multiarraymodule.c
numpy/core/tests/test_numeric.py
==================
7776215;cookedm;2006-06-10 03:44:30 +0000;clean up scalar assert_*_equal in numpy.distutils.util

==

numpy/testing/utils.py
==================
2e40c90;cookedm;2006-06-10 02:25:15 +0000;Add docstrings, update common_type to return a scalar type instead of a typecode.

==

numpy/lib/type_check.py
==================
4d42244;cookedm;2006-06-10 01:55:48 +0000;Add a version number to pickles of ndarray and dtype. This is backwards compatible. Also added test cases to make sure.

==

numpy/core/_internal.py
numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/tests/test_multiarray.py
==================
de1dedc;cookedm;2006-06-10 01:46:34 +0000;Fix syntax error in numpy/random/old.py: can't use import * in functions anymore

==

numpy/random/old.py
==================
6768d24;Travis Oliphant;2006-06-09 23:52:23 +0000;Add RNG interface and clean up old-interfaces to be separate from newer ones.

==

numpy/core/include/numpy/arrayobject.h
numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/dft/fftpack.py
numpy/dft/old.py
numpy/lib/convertcode.py
numpy/random/old.py
numpy/random/oldrng.py
numpy/random/oldrngstats.py
==================
e0bd761;cookedm;2006-06-09 20:04:58 +0000;Fix typo in system_info (at 6am 'libray' looks like 'library')

==

numpy/distutils/system_info.py
==================
8360b0b;Travis Oliphant;2006-06-09 19:55:30 +0000;Update mtrand code

==

numpy/random/mtrand/mtrand.c
==================
13c9eef;Travis Oliphant;2006-06-09 19:50:46 +0000;Use dot instead of matrixmultiply

==

numpy/random/mtrand/mtrand.pyx
==================
a5b115b;cookedm;2006-06-09 09:54:34 +0000;Add patch for #141 from Andrew Straw: standard setuptools install idiom fails

==

numpy/distutils/command/install.py
==================
d4ea24a;cookedm;2006-06-09 09:45:56 +0000;Make system_info saner. * Add a get_output() method to the config command, which compiles, links,   and runs a program, and returns the output from that program. * Also cleaned up some stuff. system_info uses log instead of print.

==

numpy/distutils/ccompiler.py
numpy/distutils/command/config.py
numpy/distutils/log.py
numpy/distutils/system_info.py
==================
79ab0f4;cookedm;2006-06-06 20:04:32 +0000;Add power to integer scalar types.

==

numpy/core/src/scalarmathmodule.c.src
numpy/core/tests/test_scalarmath.py
numpy/distutils/ccompiler.py
numpy/distutils/fcompiler/gnu.py
==================
d1db955;cookedm;2006-06-06 20:01:22 +0000;Add docstrings to numeric.py, especially for seterr and geterr.

==

numpy/core/numeric.py
==================
8f7d59f;Stefan van der Walt;2006-06-06 15:39:46 +0000;Fix unravel_index docstring.

==

numpy/lib/index_tricks.py
==================
858fdce;Pearu Peterson;2006-06-05 20:58:13 +0000;Impl. Fortran parser cont.

==

numpy/f2py/lib/block.py
numpy/f2py/lib/init.py
numpy/f2py/lib/parsefortran.py
numpy/f2py/lib/readfortran.py
numpy/f2py/lib/splitline.py
numpy/f2py/lib/stmt.py
==================
d3d8f52;Travis Oliphant;2006-06-02 23:49:29 +0000;Remove TIMSORT

==

numpy/core/src/arraytypes.inc.src
==================
c78cdbb;Travis Oliphant;2006-06-02 23:47:18 +0000;Remove TIMSORT.

==

numpy/core/src/multiarraymodule.c
==================
38d4b85;Travis Oliphant;2006-06-02 23:45:52 +0000;Comment changes and remove TIMSORT.

==

numpy/core/include/numpy/arrayobject.h
==================
ec90f8f;Travis Oliphant;2006-06-02 22:13:29 +0000;Change rand and randn back to not take tuple argument.  Alter docstring to alert user what function to use to pass in a tuple.

==

numpy/random/mtrand/mtrand.c
==================
252b09d;Travis Oliphant;2006-06-02 22:12:58 +0000;Change rand and randn back to not take tuple argument.  Alter docstring to alert user what function to use to pass in a tuple.

==

numpy/random/mtrand/mtrand.pyx
==================
241a113;Travis Oliphant;2006-06-02 22:06:58 +0000;Allow user-defined data-types to participate in the casting infrastructure.  By default they cannot cast to any other data-type.  But, this can be changed by using RegisterCanCast.

==

numpy/core/code_generators/multiarray_api_order.txt
numpy/core/include/numpy/arrayobject.h
numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
numpy/core/src/ufuncobject.c
==================
c747102;Travis Oliphant;2006-06-02 19:20:30 +0000;Fix so that user-defined data-types aren't silently attempted.

==

numpy/core/src/arraytypes.inc.src
numpy/core/src/ufuncobject.c
==================
71ec2db;Travis Oliphant;2006-06-02 18:16:18 +0000;Allow registering casting functions to built-in datatypes.:

==

numpy/core/src/arrayobject.c
==================
ba90d59;Travis Oliphant;2006-06-02 17:48:02 +0000;Allow tuple argument to rand and randn

==

numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
==================
ebc3848;Travis Oliphant;2006-06-02 17:38:54 +0000;Remove deprecated names from ma and tests.

==

numpy/core/ma.py
numpy/core/tests/test_ma.py
numpy/lib/shape_base.py
numpy/linalg/linalg.py
==================
ce9414d;Travis Oliphant;2006-06-02 17:31:54 +0000;Use convertcode to replace matrixmultiply with dot.  Add DeprecationWarning to several old Numeric calls.

==

numpy/core/oldnumeric.py
numpy/lib/convertcode.py
==================
4327fae;Travis Oliphant;2006-06-02 08:04:21 +0000;Add some checks for RegisterDataType

==

numpy/core/src/arrayobject.c
==================
f68932a;Travis Oliphant;2006-06-02 07:12:43 +0000;Fix syntax errors from last commit.

==

numpy/core/src/arrayobject.c
==================
f116819;Travis Oliphant;2006-06-02 07:10:19 +0000;Updated NDARRAY_VERSION**  Added RegisterCastFunc and moved RegisterDataType.

==

numpy/core/code_generators/array_api_order.txt
numpy/core/code_generators/multiarray_api_order.txt
numpy/core/include/numpy/arrayobject.h
numpy/core/src/arrayobject.c
==================
aba0c68;Travis Oliphant;2006-06-02 06:52:33 +0000;Improve registered ufuncs so that they can coerce data to and from user-defined data-types.  Clean-up _SOFFSET_ macro.  Make sure that user-defined types always succeed in CanCastSafely.  This is a hack but there is currently no way to record this information.

==

numpy/core/include/numpy/arrayobject.h
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/core/src/scalartypes.inc.src
numpy/core/src/ufuncobject.c
==================
98533e5;Travis Oliphant;2006-06-02 03:05:14 +0000;Fix-up casting so that registered data-types can register casting functions as well.

==

numpy/core/code_generators/array_api_order.txt
numpy/core/include/numpy/arrayobject.h
numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/ufuncobject.c
==================
0293199;Travis Oliphant;2006-06-02 01:23:31 +0000;Fix-up handling of registering of data-types.  Now it is done using a PyArray_Descr * object as it should be.  Any Pyarray_Descr * object will do.

==

numpy/core/code_generators/array_api_order.txt
numpy/core/include/numpy/arrayobject.h
numpy/core/numeric.py
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/core/src/scalartypes.inc.src
==================
ce75dc9;Travis Oliphant;2006-06-01 23:25:18 +0000;Allow lexsort to take any sequence as an input.

==

numpy/core/src/multiarraymodule.c
==================
24ed9eb;Travis Oliphant;2006-06-01 22:43:05 +0000;Fix up comments and checks in buffer setting and error-function setting.

==

numpy/core/numeric.py
==================
ce2f12b;Travis Oliphant;2006-06-01 21:32:22 +0000;Remove broken optimization...

==

numpy/core/src/umathmodule.c.src
==================
9f88ecb;Travis Oliphant;2006-06-01 21:11:10 +0000;Comment changes and change var and std to divide by N instead of N-1

==

numpy/core/src/multiarraymodule.c
numpy/lib/index_tricks.py
==================
5a85dd3;Travis Oliphant;2006-06-01 04:37:36 +0000;Fix-up test_scalarmath to compare against ufuncs.

==

numpy/core/numeric.py
numpy/core/tests/test_scalarmath.py
==================
56be9fd;Travis Oliphant;2006-06-01 04:07:59 +0000;Change squeeze to not return array scalars.

==

numpy/core/src/arraymethods.c
==================
1258bc1;Travis Oliphant;2006-06-01 00:45:48 +0000;Fix-up the work-around.

==

numpy/core/src/scalartypes.inc.src
==================
db819d9;Travis Oliphant;2006-06-01 00:40:05 +0000;Work-around Python bug in complex_number new for subtypes.  Also change a few comments.

==

numpy/core/src/arrayobject.c
numpy/core/src/scalartypes.inc.src
numpy/core/tests/test_scalarmath.py
==================
4b27d22;Stefan van der Walt;2006-05-31 19:45:23 +0000;Add more complete docstring to ones_like.

==

numpy/core/code_generators/generate_umath.py
==================
c81bb83;Pearu Peterson;2006-05-31 14:21:29 +0000;Updated g95 version pattern.

==

numpy/distutils/fcompiler/g95.py
==================
89294ae;Travis Oliphant;2006-05-31 02:36:14 +0000;Improve compatibility with Numeric character arrays.

==

numpy/core/src/arrayobject.c
==================
69b323a;Travis Oliphant;2006-05-31 01:36:05 +0000;Add constants for backwards compatibility

==

numpy/core/include/numpy/arrayobject.h
==================
30c9eeb;Travis Oliphant;2006-05-30 21:47:10 +0000;Added scalarmath tests.

==

numpy/core/tests/test_scalarmath.py
==================
526039a;Travis Oliphant;2006-05-30 16:05:47 +0000;Add Macro for PyArray_DECREF_ERR to improve recovery on an error condition for arrays with the UPDATEIFCOPY flag set.

==

numpy/core/include/numpy/arrayobject.h
numpy/core/src/ufuncobject.c
==================
b5d7bcc;Travis Oliphant;2006-05-28 21:53:44 +0000;Add _scan for BOOL, BYTE, and UBYTE.

==

numpy/core/src/arraytypes.inc.src
==================
7e7b874;Pearu Peterson;2006-05-26 14:34:15 +0000;Fixed new fortran reader and parser bugs.

==

numpy/f2py/lib/block.py
numpy/f2py/lib/parsefortran.py
numpy/f2py/lib/readfortran.py
numpy/f2py/lib/sourceinfo.py
==================
9b18570;Travis Oliphant;2006-05-26 10:25:43 +0000;Factor simple subscripting out into separate functions.  Can't really do it first because of Boolean arrays and list-treated as integer arrays.

==

numpy/core/src/arrayobject.c
==================
a12cb7b;Pearu Peterson;2006-05-25 10:54:57 +0000;Cont. impl. fortran parser, added do and ifthen blocks.

==

numpy/f2py/lib/block.py
numpy/f2py/lib/parsefortran.py
numpy/f2py/lib/readfortran.py
numpy/f2py/lib/sourceinfo.py
numpy/f2py/lib/splitline.py
==================
4de4ac8;Travis Oliphant;2006-05-25 04:43:47 +0000;Add row_stack as alias to vstack to complement column_stack.

==

numpy/lib/shape_base.py
==================
6dac6a0;Travis Oliphant;2006-05-25 04:23:40 +0000;Apply Stephan's recommendation to fix issue #129 with line directives on mingw32 build

==

numpy/distutils/conv_template.py
==================
fff3c3f;Pearu Peterson;2006-05-24 13:44:36 +0000;Impl. simple fortran parser.

==

numpy/f2py/lib/block.py
numpy/f2py/lib/parsefortran.py
numpy/f2py/lib/readfortran.py
==================
f3d3c4b;Pearu Peterson;2006-05-24 08:59:29 +0000;Removed win32all dependence from numpy/testing/utils.py

==

numpy/testing/utils.py
==================
95d1996;Pearu Peterson;2006-05-24 08:31:24 +0000;Add inline f2py directive support to new fortran reader.

==

numpy/f2py/lib/readfortran.py
==================
0c7da8a;Pearu Peterson;2006-05-24 07:39:50 +0000;Impl. new and improved fortran file reader (remembers line numbers, comments, gracefully reports errors and warnings etc.).

==

numpy/f2py/lib/__init__.py
numpy/f2py/lib/readfortran.py
numpy/f2py/lib/sourceinfo.py
numpy/f2py/lib/splitline.py
==================
5c82faf;Travis Oliphant;2006-05-22 18:44:49 +0000;Fix reduceat reference count bug.

==

numpy/core/src/ufuncobject.c
==================
1558871;Travis Oliphant;2006-05-21 03:25:45 +0000;Fixed bug in scalar casting..

==

numpy/core/src/multiarraymodule.c
==================
0af4c99;cookedm;2006-05-20 02:20:36 +0000;Do replacing nulls with ' ' after strncpy correctly in f2py.cfuncs. Also corrects some problems with buffer sizes

==

numpy/f2py/cfuncs.py
==================
09a1eb6;cookedm;2006-05-20 00:54:48 +0000;label g95 as the G95 Fortran Compiler, not GNU Fortran 95

==

numpy/distutils/fcompiler/__init__.py
==================
4aa8a92;Travis Oliphant;2006-05-19 22:29:02 +0000;Fix problem causing segfault in ticket #126

==

numpy/core/src/scalarmathmodule.c.src
==================
267228a;cookedm;2006-05-19 22:13:19 +0000;Intialize the has_binomial field of the mtrand state.

==

numpy/random/mtrand/mtrand.pyx
numpy/random/mtrand/randomkit.c
==================
dc90886;Travis Oliphant;2006-05-19 08:42:59 +0000;Fix unitialized error for 0d arrays.  Tickt #124

==

numpy/core/src/ufuncobject.c
==================
7ce372c;Travis Oliphant;2006-05-19 08:39:15 +0000;Simplify argwhere (maybe prematurely added), and fix memory leak in #125

==

numpy/core/numeric.py
numpy/core/src/arrayobject.c
==================
d382977;Pearu Peterson;2006-05-19 07:00:23 +0000;Add feature: read f77 compiler flags from source. Added a section for extra features in numpy.distutils.

==

numpy/distutils/fcompiler/__init__.py
numpy/doc/DISTUTILS.txt
==================
72c0d33;Pearu Peterson;2006-05-19 06:35:03 +0000;Add comment.

==

numpy/distutils/command/bdist_rpm.py
==================
4e6f53a;Pearu Peterson;2006-05-18 20:38:31 +0000;Set NUMERIX env variable in get_info('numerix')

==

numpy/distutils/system_info.py
==================
2243283;edschofield;2006-05-18 17:10:49 +0000;Added transpose tip to where() docstring; cleaned up lexsort docstring

==

numpy/core/src/multiarraymodule.c
==================
e600101;edschofield;2006-05-18 10:21:13 +0000;Better docstring for the nonzero method.

==

numpy/core/src/arraymethods.c
==================
3f7fc98;Travis Oliphant;2006-05-18 00:09:27 +0000;Update head revision to 0.9.9

==

numpy/version.py
==================
1b425c5;Travis Oliphant;2006-05-17 22:49:41 +0000;Rename fromflat to unravel_index.  Add argwhere function.  Change where docstring to reflect truth.

==

numpy/core/numeric.py
numpy/core/src/multiarraymodule.c
numpy/lib/index_tricks.py
==================
a27f468;Travis Oliphant;2006-05-17 22:02:40 +0000;Change from C++ comments

==

numpy/doc/swig/Series.i
numpy/doc/swig/numpy.i
==================
0f8a564;Travis Oliphant;2006-05-17 21:57:21 +0000;Fix memory leak in PyArray_Round that probably caused error in ticket #110

==

numpy/core/src/multiarraymodule.c
==================
6fcac57;Travis Oliphant;2006-05-17 21:35:06 +0000;Remove memory leak from scalarmath in ticket #123

==

numpy/core/src/scalarmathmodule.c.src
==================
0eadb36;Travis Oliphant;2006-05-17 21:15:11 +0000;Add test for multidimensional argmax.

==

numpy/core/tests/test_multiarray.py
==================
cdaebaa;Travis Oliphant;2006-05-17 21:09:28 +0000;Fix argmax and argmin problems for multi-dimensional arrays.  Closes ticket #119

==

numpy/core/src/multiarraymodule.c
==================
8cfbbe1;cookedm;2006-05-17 20:53:44 +0000;Fix for using NAG Fortran 95, due to James Graham <jg307@cam.ac.uk>

==

numpy/distutils/fcompiler/nag.py
==================
c3f83e9;cookedm;2006-05-17 08:55:00 +0000;Better handling of string representation of longfloat and clongfloat arrays.

==

numpy/core/arrayprint.py
numpy/core/src/multiarraymodule.c
numpy/core/src/scalartypes.inc.src
==================
2733a07;cookedm;2006-05-17 07:56:53 +0000;Fix #120: array.transpose() too lenient with its arguments. Change PyArray_Transpose() to either take a NULL argument, or a valid permutation of the axes (has to be the same length as the number of axes, and no repeats).

==

numpy/core/src/multiarraymodule.c
numpy/core/tests/test_multiarray.py
==================
887e22a;cookedm;2006-05-17 00:16:30 +0000;#107: Directory name build/srcipts-pythonversion needs platform information

==

numpy/distutils/command/build.py
==================
6cf0da7;cookedm;2006-05-17 00:07:48 +0000;Imperfect fix to longfloat arrays printing with inf (#112); use '%s' as the format.

==

numpy/core/arrayprint.py
==================
b686a42;cookedm;2006-05-17 00:06:45 +0000;Fix for linspace (#118) was incomplete; good now.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
a144516;cookedm;2006-05-16 23:34:24 +0000;#118: linspace should always return floats Patch from stefan; fix special case which could return an array of one int.

==

numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
==================
38c83ab;cookedm;2006-05-16 23:30:55 +0000;Initialize a potentially uninitialized variable in scalarmathmodule

==

numpy/core/src/scalarmathmodule.c.src
==================
7b4dcf8;cookedm;2006-05-16 23:30:01 +0000;Use sasha's patch to add #line to generated files (#85). Already helped with some compiler warnings, so I'm liking it.

==

numpy/distutils/conv_template.py
==================
2e18a06;cookedm;2006-05-16 23:22:16 +0000;Better a.transpose() docstring (fixes #121)

==

numpy/core/src/arraymethods.c
==================
a0ff0db;cookedm;2006-05-16 21:54:44 +0000;Use a hack to get numpy to install with easy_install (#81) I couldn't find any other way; see the comments in the code or my discussion at #81 for why this is necessary.

==

numpy/distutils/misc_util.py
==================
b6f1d9f;Travis Oliphant;2006-05-16 18:18:44 +0000;Add 'q' to _array_kind and fix argmax which doesn't need to swap back axes.

==

numpy/core/src/multiarraymodule.c
numpy/linalg/linalg.py
==================
57acda4;cookedm;2006-05-15 08:53:40 +0000;Warning messages from numpy.distutils.misc_util.Configuration are printed in blue

==

numpy/distutils/misc_util.py
==================
88698f4;Travis Oliphant;2006-05-14 03:54:12 +0000;Fix defect #115

==

numpy/core/blasdot/_dotblas.c
numpy/core/src/arrayobject.c
==================
1f5827c;Travis Oliphant;2006-05-13 02:18:40 +0000;Fix defect #111

==

numpy/core/src/multiarraymodule.c
==================
834d4dd;Travis Oliphant;2006-05-13 01:58:58 +0000;Fix up warnings.

==

numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
numpy/core/src/scalarmathmodule.c.src
numpy/core/src/umathmodule.c.src
==================
7cd1911;Travis Oliphant;2006-05-12 02:51:10 +0000;Fix crash for zero-size arrays.

==

numpy/core/src/ufuncobject.c
numpy/lib/index_tricks.py
==================
916b29a;Travis Oliphant;2006-05-12 02:44:07 +0000;Fix crash for zero-size arrays.

==

numpy/core/src/ufuncobject.c
==================
650e266;Travis Oliphant;2006-05-11 04:27:43 +0000;Fix ticket #109

==

numpy/core/blasdot/_dotblas.c
==================
e8afda1;Travis Oliphant;2006-05-11 04:23:23 +0000;Finish adding scalarmath and import it.  Mixed-types are handled with ufuncs still.

==

numpy/core/__init__.py
numpy/core/include/numpy/arrayscalars.h
numpy/core/src/scalarmathmodule.c.src
numpy/core/tests/test_defmatrix.py
==================
0823dec;Travis Oliphant;2006-05-10 21:36:53 +0000;Apply patch for ticket #83 to make matrices return scalars on axis=None reductions.

==

numpy/core/defmatrix.py
==================
ac244d2;Travis Oliphant;2006-05-10 20:58:54 +0000;Fix ticket #106

==

numpy/core/blasdot/_dotblas.c
==================
67eeb36;Travis Oliphant;2006-05-10 18:20:15 +0000;Fix ticket #104

==

numpy/core/records.py
==================
8ff1ade;Travis Oliphant;2006-05-10 17:25:57 +0000;Fix byte-swapping problem for ticket #105

==

numpy/core/src/arrayobject.c
==================
249e8aa;Travis Oliphant;2006-05-09 22:01:11 +0000;Fix ticket #102 and a few other 1-field descriptions.

==

numpy/core/_internal.py
numpy/core/records.py
numpy/core/src/multiarraymodule.c
==================
6d3dd20;Travis Oliphant;2006-05-09 21:39:44 +0000;Added matrix method test from ticket #84

==

numpy/core/records.py
numpy/core/tests/test_defmatrix.py
==================
d874c8b;Travis Oliphant;2006-05-09 19:56:23 +0000;Fix field method to always return fields.  Fixes ticket #101

==

numpy/core/records.py
==================
4a0b997;Travis Oliphant;2006-05-09 08:54:39 +0000;Add missing Py_INCREF to fix ticket #95

==

numpy/lib/src/_compiled_base.c
==================
56dc16d;Travis Oliphant;2006-05-09 08:48:01 +0000;resolve ticket #89

==

numpy/testing/utils.py
==================
8fa6275;Travis Oliphant;2006-05-09 08:32:31 +0000;Fix-up optimized dot when strides is not a multiple of the element size.

==

numpy/core/blasdot/_dotblas.c
numpy/core/code_generators/array_api_order.txt
numpy/core/include/numpy/arrayobject.h
numpy/core/src/arrayobject.c
==================
a504789;Travis Oliphant;2006-05-09 07:24:01 +0000;Fix field-comparisons for EquivTypes.  Fixes ticket #94

==

numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
==================
f700848;Travis Oliphant;2006-05-09 06:43:37 +0000;Fix type-error oddity in defect #92

==

numpy/core/src/arrayobject.c
==================
865200d;Travis Oliphant;2006-05-09 06:19:09 +0000;Fix for ticket #86

==

numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
==================
8cc0a08;Travis Oliphant;2006-05-09 03:48:26 +0000;Fix Issue #93

==

numpy/core/src/multiarraymodule.c
==================
a14d6fe;Travis Oliphant;2006-05-09 03:37:12 +0000;Fix-up swapping error in iter_subscript.

==

numpy/core/src/arrayobject.c
==================
0198361;chanley;2006-05-08 17:07:43 +0000;Moved the declaration of retstatus above the variable assignments in the #if/else block to make the syntax C like instead of C++.  This is a slight modification to revision 2472.

==

numpy/core/src/scalarmathmodule.c.src
==================
29bdfcd;Robert Kern;2006-05-08 01:05:49 +0000;Removing bool scalar nb_add and nb_multiply functions as they appear to give incorrect behavior and break clip.

==

numpy/core/src/scalartypes.inc.src
==================
9098bf3;Pearu Peterson;2006-05-03 21:49:04 +0000;get_info returns deep copy of a dictionary, fixes bugs when one modifies info dictionary objects.

==

numpy/distutils/system_info.py
==================
1418439;Pearu Peterson;2006-05-03 19:25:40 +0000;Added numerix info class to choose between different array backends using env variable NUMERIX.

==

numpy/distutils/system_info.py
==================
aa00fd2;Pearu Peterson;2006-05-03 16:02:23 +0000;Fixed doctest usage 2.4-ism.

==

numpy/testing/numpytest.py
==================
30581a5;abaecker;2006-05-03 06:53:16 +0000;fix: `emath` instead of `nmath`

==

numpy/lib/__init__.py
==================
b280889;abaecker;2006-05-03 06:35:18 +0000;fix compile problem (patch by Ted Horst)

==

numpy/core/src/scalarmathmodule.c.src
==================
087ef6d;Travis Oliphant;2006-05-02 23:20:22 +0000;numpy.lib.scimath --> numpy.emath

==

numpy/lib/__init__.py
==================
f544e77;Travis Oliphant;2006-05-02 23:19:56 +0000;Add math module to numpy namespace so numpy.math works same as Numeric.math.  Change numpy.math to numpy.nmath

==

numpy/lib/__init__.py
numpy/lib/function_base.py
==================
4533018;Travis Oliphant;2006-05-02 22:56:02 +0000;Fix array('mystr','c') so it works as in NumPy

==

numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
==================
356e93e;Travis Oliphant;2006-05-02 19:38:46 +0000;Add PyArray_CHAR as an alias to PyArray_STRING with element size of 1

==

numpy/core/include/numpy/arrayobject.h
numpy/core/src/arraytypes.inc.src
numpy/core/src/scalarmathmodule.c.src
==================
20cd015;Pearu Peterson;2006-05-02 14:46:05 +0000;Fixed prune file pattern - subdirectories were exluded by this bug for add_data_dir.

==

numpy/distutils/misc_util.py
==================
1615d53;Pearu Peterson;2006-05-01 22:10:49 +0000;Impl. NumpyTest.testall method that looks for test methods more agrressively than NumpyTest.test

==

numpy/testing/numpytest.py
==================
fe20769;Robert Kern;2006-05-01 18:14:12 +0000;Fix #90.

==

numpy/random/mtrand/distributions.c
==================
7a10bcd;Pearu Peterson;2006-05-01 16:56:11 +0000;Made only/skip f2py options active when using -h option.

==

numpy/f2py/crackfortran.py
==================
ab51391;Tim Hochberg;2006-04-30 21:46:36 +0000;Changed rundocs to closely follow procedure outlined in the docs for imp.load_module. This fixed a bizzare error where tests would run fine the first time through, but would fail the second time through when loading from a pyc file.

==

numpy/testing/numpytest.py
==================
b3bf228;Travis Oliphant;2006-04-29 22:39:27 +0000;Fix absolute which does not contain the needed functions...

==

numpy/core/src/scalarmathmodule.c.src
==================
f6a6d8f;Travis Oliphant;2006-04-29 22:32:00 +0000;Implement int, float, long, oct, hex

==

numpy/core/src/arrayobject.c
numpy/core/src/scalarmathmodule.c.src
==================
f399dfc;Travis Oliphant;2006-04-29 21:09:04 +0000;Fix up usage of platform-specific functions.

==

numpy/core/src/arrayobject.c
numpy/core/src/scalarmathmodule.c.src
==================
40cc08d;Travis Oliphant;2006-04-28 18:04:33 +0000;Fix type of _PyArrayScalar_BoolValues

==

numpy/core/code_generators/generate_array_api.py
numpy/core/include/numpy/arrayscalars.h
numpy/core/src/scalarmathmodule.c.src
==================
da478e7;Travis Oliphant;2006-04-28 17:28:33 +0000;Fix-up size check for 64-bit

==

numpy/core/src/scalarmathmodule.c.src
==================
42f652d;Travis Oliphant;2006-04-28 07:07:44 +0000;Fix so correct return value happens in get_functions

==

numpy/core/src/scalarmathmodule.c.src
==================
37b1778;Travis Oliphant;2006-04-28 06:49:01 +0000;Finish up scalarmath.  Needs testing...

==

THANKS.txt
numpy/core/src/scalarmathmodule.c.src
numpy/core/src/umathmodule.c.src
==================
638ed06;Travis Oliphant;2006-04-28 04:15:10 +0000;Implement divmod

==

numpy/core/src/scalarmathmodule.c.src
==================
ed4b92a;Travis Oliphant;2006-04-28 03:50:37 +0000;Fix true_divide for integers.

==

numpy/core/src/scalarmathmodule.c.src
==================
6172e53;Travis Oliphant;2006-04-28 03:48:17 +0000;Add ctype_true_divide, ctype_divide, and ctype_floor_divide for integers.

==

numpy/core/src/scalarmathmodule.c.src
==================
1640c11;sasha;2006-04-28 03:01:16 +0000;implemented @name@_ctype_(l,r)shift

==

numpy/core/src/scalarmathmodule.c.src
==================
1dc253c;sasha;2006-04-28 02:07:40 +0000;implemented (float,double,longdouble)_ctype_remainder

==

numpy/core/src/scalarmathmodule.c.src
==================
18d4b43;Travis Oliphant;2006-04-27 21:20:51 +0000;Fix typo

==

numpy/core/src/scalarmathmodule.c.src
==================
a974a06;Travis Oliphant;2006-04-27 21:19:25 +0000;Fix typo

==

numpy/core/src/scalarmathmodule.c.src
==================
81588c8;Travis Oliphant;2006-04-27 21:18:34 +0000;Perhaps floor functions should be present

==

numpy/core/src/scalarmathmodule.c.src
==================
b317509;Travis Oliphant;2006-04-27 21:17:34 +0000;Add multiply and floor_divide

==

numpy/core/src/scalarmathmodule.c.src
==================
46abd33;sasha;2006-04-27 21:15:42 +0000;implemented (float, double, longdouble)_ctype_power in scalarmath

==

numpy/core/src/scalarmathmodule.c.src
==================
a129ce4;sasha;2006-04-27 20:52:07 +0000;implemented @name@_ctype_(positive,negative) in scalarmath

==

numpy/core/src/scalarmathmodule.c.src
==================
77dfa41;sasha;2006-04-27 20:33:09 +0000;implemented @name@_ctype_absolute in scalarmath

==

numpy/core/src/scalarmathmodule.c.src
==================
f37d7f1;Travis Oliphant;2006-04-27 20:12:46 +0000;Fixed up nonzero --- it doesn't need a ctype implementation anymore...

==

numpy/core/src/scalarmathmodule.c.src
==================
66e926b;sasha;2006-04-27 20:08:06 +0000;implemented @name@_ctype_nonzero in scalarmath

==

numpy/core/src/scalarmathmodule.c.src
==================
c10618c;Travis Oliphant;2006-04-27 19:57:19 +0000;Fix nonzero and go back to using Generic scalar handler on failure in main scalar routine.

==

numpy/core/src/scalarmathmodule.c.src
==================
3caa584;sasha;2006-04-27 19:54:22 +0000;implemented @name@_ctype_invert in scalarmath

==

numpy/core/src/scalarmathmodule.c.src
==================
c7737e6;Travis Oliphant;2006-04-27 18:44:27 +0000;Fix indentation error.

==

numpy/lib/function_base.py
==================
91548d0;Travis Oliphant;2006-04-27 15:53:54 +0000;Add improved checking for number of arguments to support more functions

==

numpy/lib/function_base.py
==================
92e59de;Travis Oliphant;2006-04-27 15:19:52 +0000;Fix missing error check.

==

numpy/f2py/src/fortranobject.c
==================
808ea6e;Travis Oliphant;2006-04-27 07:47:12 +0000;Fix typo and warning.

==

numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
==================
f452b59;Travis Oliphant;2006-04-27 07:43:39 +0000;Add EnsureAnyArray as a function instead of a macro

==

numpy/core/code_generators/array_api_order.txt
numpy/core/include/numpy/arrayobject.h
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
==================
de1b419;Travis Oliphant;2006-04-27 07:24:30 +0000;Bump up version number.  Fix methods on matrices to preserve order.  Add more scalar math (it now compiles).  Add a missing API.

==

numpy/core/code_generators/array_api_order.txt
numpy/core/code_generators/generate_ufunc_api.py
numpy/core/defmatrix.py
numpy/core/include/numpy/arrayobject.h
numpy/core/setup.py
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/core/src/scalarmathmodule.c.src
numpy/core/src/scalartypes.inc.src
numpy/core/src/ufuncobject.c
==================
6d4a9d0;Travis Oliphant;2006-04-27 01:14:52 +0000;Fix typo.

==

numpy/core/src/scalartypes.inc.src
==================
17a7675;Travis Oliphant;2006-04-27 01:10:42 +0000;Add a couple more ufunc API calls.  Add more to scalarmath.c.  Get rid of overflow checking on multiplication.

==

numpy/core/code_generators/array_api_order.txt
numpy/core/code_generators/ufunc_api_order.txt
numpy/core/include/numpy/arrayobject.h
numpy/core/include/numpy/ufuncobject.h
numpy/core/src/scalarmathmodule.c.src
numpy/core/src/scalartypes.inc.src
numpy/core/src/ufuncobject.c
numpy/core/src/umathmodule.c.src
==================
d526919;cookedm;2006-04-27 00:22:17 +0000;Better uninitialized variable fix in array_richcompare

==

numpy/core/src/arrayobject.c
==================
24893ed;Pearu Peterson;2006-04-26 23:39:12 +0000;Remove print stmt.

==

numpy/core/tests/test_records.py
==================
3f682ff;Pearu Peterson;2006-04-26 22:51:40 +0000;Added NumpyTestCase.rundocs method to support running doc-tests via unittest machinery - needed for running tests via testoob.

==

numpy/lib/tests/test_polynomial.py
numpy/lib/tests/test_ufunclike.py
numpy/testing/numpytest.py
==================
7413032;Pearu Peterson;2006-04-26 20:33:14 +0000;Apply replace ScipyTestCase->NumpyTestCase. Fix tests for testoob.

==

numpy/core/tests/test_numerictypes.py
numpy/core/tests/test_records.py
numpy/core/tests/test_unicode.py
numpy/doc/DISTUTILS.txt
==================
b01cd88;Pearu Peterson;2006-04-26 19:51:49 +0000;Added importall function that recursively imports modules. Convinient for detecting any import problems.

==

numpy/testing/numpytest.py
==================
f6c56c1;Pearu Peterson;2006-04-26 19:50:37 +0000;Try harder to get swig module name when in package.

==

numpy/distutils/command/build_src.py
==================
0feed10;cookedm;2006-04-26 19:45:27 +0000;Fix warning about a potentially uninitialized variable

==

numpy/core/src/arrayobject.c
==================
1871d95;cookedm;2006-04-26 19:44:57 +0000;Better concatenate docstring

==

numpy/core/src/multiarraymodule.c
==================
39e6217;Travis Oliphant;2006-04-26 19:06:40 +0000;Add new C-API function in middle.  Bump C-API version number.

==

numpy/core/code_generators/array_api_order.txt
numpy/core/include/numpy/arrayobject.h
numpy/core/src/scalarmathmodule.c.src
numpy/core/src/scalartypes.inc.src
numpy/lib/function_base.py
==================
6a72022;Travis Oliphant;2006-04-26 17:14:25 +0000;Slightly different fix to vectorize.

==

numpy/lib/function_base.py
==================
e328ecf;Travis Oliphant;2006-04-26 17:11:27 +0000;Fix vectorize to handle scalar return values.

==

numpy/lib/function_base.py
==================
d2dfaf2;Pearu Peterson;2006-04-26 15:56:33 +0000;Fix compiler warnings about returning int in void function.

==

numpy/f2py/rules.py
==================
b61fc74;Travis Oliphant;2006-04-26 06:45:11 +0000;More additions to scalarmath

==

numpy/core/src/scalarmathmodule.c.src
==================
1516b86;Travis Oliphant;2006-04-26 00:25:23 +0000;Some asthetic macro changes.

==

numpy/core/include/numpy/arrayobject.h
==================
c1bfdfd;Travis Oliphant;2006-04-25 23:13:10 +0000;Fix issue #77

==

numpy/doc/swig/numpy.i
==================
7e7f383;Travis Oliphant;2006-04-25 23:05:16 +0000;Fix reference-count problem in Macro form of EquivTypenums and update numpy.i to use EquivTypenums.

==

numpy/core/code_generators/multiarray_api_order.txt
numpy/core/include/numpy/arrayobject.h
numpy/core/src/multiarraymodule.c
numpy/doc/swig/numpy.i
==================
aabd8a7;Travis Oliphant;2006-04-25 18:11:50 +0000;Add a few scalar-macros.

==

numpy/core/include/numpy/arrayscalars.h
numpy/core/src/scalarmathmodule.c.src
==================
b93564d;Travis Oliphant;2006-04-25 17:58:25 +0000;More scalar math implemented.  Cosmetic changes to arrayobject.c

==

numpy/core/src/arrayobject.c
numpy/core/src/scalarmathmodule.c.src
==================
d81315e;Travis Oliphant;2006-04-25 16:57:09 +0000;Fix problem actually in PyArray_Scalar for wide builds.

==

numpy/core/src/arrayobject.c
numpy/core/src/scalarmathmodule.c.src
==================
879bc24;Travis Oliphant;2006-04-25 16:24:53 +0000;Fix memory leak on error.

==

numpy/core/src/arraytypes.inc.src
==================
34624ff;Travis Oliphant;2006-04-25 15:49:03 +0000;Fix UNICODE copyswap code.

==

numpy/core/src/arraytypes.inc.src
==================
46bdb66;Pearu Peterson;2006-04-25 15:38:32 +0000;Fixed typo.

==

numpy/distutils/misc_util.py
==================
b139fd5;Travis Oliphant;2006-04-25 10:09:23 +0000;Fixed error in _strided_copy macro.  Fix access error.  Make PyArray_ToScalar a macro.

==

numpy/core/code_generators/array_api_order.txt
numpy/core/include/numpy/arrayobject.h
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
==================
4fce8c0;Travis Oliphant;2006-04-25 08:09:20 +0000;Fix Unicode swapping problem.

==

numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
==================
1a0525b;Travis Oliphant;2006-04-25 06:06:00 +0000;Clean-up strided_byte_copy code and expose a new API call for getting broadcasting behavior and ufunc-like iterators over the longest axis.

==

numpy/core/code_generators/array_api_order.txt
numpy/core/src/arrayobject.c
==================
6e1856e;Travis Oliphant;2006-04-25 00:24:08 +0000;Update copyswap functions to take array as argument in preparation for improved functionality of VOID_copyswap and possibly faster code for aligned data.

==

numpy/core/include/numpy/arrayobject.h
numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
numpy/core/src/scalartypes.inc.src
numpy/core/src/ufuncobject.c
==================
61b0418;Pearu Peterson;2006-04-24 23:05:22 +0000;Fix splitting a pattern on win32.

==

numpy/distutils/misc_util.py
==================
8c7d39d;Pearu Peterson;2006-04-24 22:39:21 +0000;Make ext module typespecs to use PyMODINIT_FUNC that is essential for mingw32 and c++ code combination to work correctly.

==

numpy/core/blasdot/_dotblas.c
numpy/core/src/multiarraymodule.c
numpy/core/src/scalarmathmodule.c.src
numpy/core/src/umathmodule.c.src
numpy/dft/fftpack_litemodule.c
numpy/distutils/system_info.py
numpy/doc/pyrex/numpyx.c
numpy/f2py/rules.py
numpy/f2py/tests/array_from_pyobj/wrapmodule.c
numpy/lib/src/_compiled_base.c
numpy/random/mtrand/mtrand.c
==================
628087d;Travis Oliphant;2006-04-24 20:58:53 +0000;Change svn:eol-style to native

==

numpy/core/src/scalartypes.inc.src
numpy/core/tests/test_oldnumeric.py
==================
448bb44;Travis Oliphant;2006-04-24 20:44:33 +0000;Fix so USE_USE_DEFAULTS code works in multi-threaded case.  Speed up 1-d array indexing by an integer.

==

numpy/core/numeric.py
numpy/core/src/arrayobject.c
numpy/core/src/ufuncobject.c
numpy/core/tests/test_numeric.py
==================
9867cad;Pearu Peterson;2006-04-24 19:21:54 +0000;Applied ticket #77 patch.

==

numpy/doc/swig/numpy.i
==================
79ff235;Pearu Peterson;2006-04-24 19:13:17 +0000;Minor bug fix in interactive sys.argv set feature.

==

numpy/distutils/interactive.py
==================
f908c6a;Pearu Peterson;2006-04-24 19:07:01 +0000;Adding plat_specifier to build/src directory so that multiple platforms could share build directory (fixes numpy/core config.h conflict).

==

numpy/distutils/command/build_src.py
==================
43521c0;Pearu Peterson;2006-04-24 17:12:00 +0000;Fix old scipy Issue173.

==

numpy/distutils/mingw32ccompiler.py
==================
4694331;Travis Oliphant;2006-04-24 06:20:57 +0000;Fix PyArray_FromAny so it returns error if UPDATEIFCOPY is set for nonarray input.

==

numpy/core/include/numpy/arrayobject.h
numpy/core/src/arrayobject.c
==================
1753b62;Travis Oliphant;2006-04-22 17:12:05 +0000;Missing error return added. Fixes Sourceforge bug.

==

numpy/core/src/multiarraymodule.c
==================
2276bf7;cookedm;2006-04-21 16:15:12 +0000;Use correct download url in setup.py so that setuptool's easy_install would be able to download the source correctly.

==

setup.py
==================
73bff2a;Tim Hochberg;2006-04-20 21:04:52 +0000;Tweaks to Travis's recent addition of thread local semantics to setting of errors. Most important is that I disabled the optimization in the "default" case since it appeared broken when there were multiple threads and it didn't seem to have a significant performance impact. Added comments on how to fix it if that turns out to be desirable.

==

numpy/core/numeric.py
numpy/core/src/ufuncobject.c
numpy/core/tests/test_numeric.py
==================
4a4caf0;Tim Hochberg;2006-04-20 21:01:55 +0000;Improve docstring for complex scalars.

==

numpy/core/src/scalartypes.inc.src
==================
a68ca8a;Pearu Peterson;2006-04-20 20:24:39 +0000;Fixed subpackage name when adding subpackage with setup.py script.

==

numpy/distutils/misc_util.py
==================
d748172;Pearu Peterson;2006-04-20 20:23:53 +0000;Fail with long traceback from setup before closing interactive session.

==

numpy/distutils/core.py
==================
014ca86;Robert Kern;2006-04-20 18:26:18 +0000;Possible fix for #72.

==

numpy/core/src/arrayobject.c
==================
f51a51f;Pearu Peterson;2006-04-20 17:09:14 +0000;Remove cwd from sys.path when running numpy/setup.py script.

==

numpy/setup.py
==================
0f8a871;Pearu Peterson;2006-04-20 17:01:01 +0000;Fixed the order of setup commands.

==

numpy/distutils/interactive.py
==================
d2f1e96;Pearu Peterson;2006-04-20 15:39:49 +0000;Added configure alias to interactive sys.argv setter, number of minor improvements.

==

numpy/distutils/interactive.py
==================
b00fb8d;Tim Hochberg;2006-04-20 03:52:14 +0000;Fix kron so that the return type reflects the type of its arguments. Also, raise an exception if the arguments are not rank-2 since the other cases were some combination of ambiguous or broken.

==

numpy/lib/shape_base.py
numpy/lib/tests/test_shape_base.py
==================
137be11;Pearu Peterson;2006-04-19 23:08:20 +0000;Completed impl. of interactive setting of sys.argv.

==

numpy/distutils/interactive.py
==================
bc76490;Pearu Peterson;2006-04-19 19:46:43 +0000;Fix interactive setup: hold the process until enter is pressed.

==

numpy/distutils/core.py
==================
dbe851f;Pearu Peterson;2006-04-19 19:20:04 +0000;Fix version detection of an older absoft compiler (version 2.3 to be specific).

==

numpy/distutils/fcompiler/absoft.py
==================
8a31e29;Pearu Peterson;2006-04-19 18:58:30 +0000;New feature: interactively set sys.argv when setup.py is called without arguments. At the moment the feature only can show system/platform/fcompiler information..

==

numpy/distutils/core.py
numpy/distutils/interactive.py
==================
7ac6e20;Pearu Peterson;2006-04-19 18:42:23 +0000;Fix bug in resolving target_dirs for data_dir patterns containing extra slashes.

==

numpy/distutils/misc_util.py
==================
6968531;Robert Kern;2006-04-19 17:59:09 +0000;Some fixes for Absoft Fortran 10.0 on 64-bit Linux. I would appreciate some double-checking from someone else on this!

==

numpy/distutils/fcompiler/absoft.py
==================
51a6c98;Pearu Peterson;2006-04-19 16:50:17 +0000;Fix build_src inplace build for library sources.

==

numpy/distutils/command/build_src.py
==================
847c32d;edschofield;2006-04-19 11:26:00 +0000;Added warning about config.add_headers to DISTUTILS.txt

==

numpy/doc/DISTUTILS.txt
==================
b663277;edschofield;2006-04-19 10:08:10 +0000;Use add_data_files instead of add_headers to install randomkit.h

==

numpy/random/setup.py
==================
11273d2;Travis Oliphant;2006-04-19 08:18:54 +0000;When selecting from string arrays, remove NULL bytes from string scalar.  Fix string comparisons so NULL bytes are not compared inappropriately.

==

numpy/core/src/arrayobject.c
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_unicode.py
==================
e7da22e;Travis Oliphant;2006-04-19 02:55:55 +0000;Fix bugs in recent check-in

==

numpy/core/src/arrayobject.c
==================
5964bd7;Travis Oliphant;2006-04-19 02:52:56 +0000;Add special-purpose code for copying aligned data.

==

numpy/core/src/arrayobject.c
==================
959e147;Travis Oliphant;2006-04-19 02:26:34 +0000;Speed up copying code a bit for well-behaved cases.

==

numpy/core/src/arrayobject.c
==================
787e44f;Travis Oliphant;2006-04-18 23:58:04 +0000;fix typo.

==

numpy/lib/UserArray.py
==================
dbb89ee;Pearu Peterson;2006-04-18 21:02:41 +0000;Fix numpy ticket 53.

==

numpy/distutils/misc_util.py
==================
021da2c;Travis Oliphant;2006-04-18 20:47:39 +0000;Fix bad __getattr__ code causing recursion.

==

numpy/lib/UserArray.py
==================
07e5091;Travis Oliphant;2006-04-18 19:07:59 +0000;Implement a reset-on-delete object for save error modes.

==

numpy/core/numeric.py
numpy/core/src/ufuncobject.c
==================
e273a1a;Travis Oliphant;2006-04-18 18:08:56 +0000;Change ...errlist to ...errobj

==

numpy/core/numeric.py
numpy/core/src/umathmodule.c.src
==================
ae43872;Travis Oliphant;2006-04-18 18:00:09 +0000;Changed error look-up to use per-thread global variable.

==

numpy/core/numeric.py
numpy/core/src/ufuncobject.c
numpy/core/src/umathmodule.c.src
==================
5d5d80f;edschofield;2006-04-18 17:06:15 +0000;Modified numpy/random/setup.py to export randomkit.h header file

==

numpy/random/setup.py
==================
6890d56;Travis Oliphant;2006-04-18 16:49:01 +0000;Check fwrite of separator to ensure it was written.  Fixes ticket #68

==

numpy/core/include/numpy/arrayobject.h
numpy/core/src/arrayobject.c
==================
c523fea;Robert Kern;2006-04-18 14:05:42 +0000;Expand sqrt docstring. Fixes #66.

==

numpy/core/code_generators/generate_umath.py
==================
b01e909;Robert Kern;2006-04-16 10:23:18 +0000;Actually return the appropriate version if found.

==

numpy/distutils/fcompiler/ibm.py
==================
6c736d2;Travis Oliphant;2006-04-15 19:02:32 +0000;Fix valgrind-discovered errors for 0-dim and 0-sized arrays.  Fixes tickets #60,#61,#62,#63,#64,#65

==

numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
numpy/core/src/scalartypes.inc.src
==================
52b98d2;Travis Oliphant;2006-04-15 02:25:11 +0000;Fix some more bugs found by valgrind.

==

numpy/core/src/arrayobject.c
numpy/core/src/scalartypes.inc.src
numpy/core/src/umathmodule.c.src
==================
c429c9c;Travis Oliphant;2006-04-15 01:46:43 +0000;Initialize buffer for object loops.

==

numpy/core/src/multiarraymodule.c
numpy/core/src/ufuncobject.c
==================
412bd52;Travis Oliphant;2006-04-14 21:57:03 +0000;Bump up the version number.

==

numpy/core/include/numpy/arrayobject.h
==================
a522173;Travis Oliphant;2006-04-14 21:48:28 +0000;Fix object-loop reference counting in BUFFERED UFUNC.

==

numpy/core/include/numpy/ufuncobject.h
numpy/core/src/ufuncobject.c
numpy/lib/tests/test_function_base.py
==================
5567185;Travis Oliphant;2006-04-14 17:38:11 +0000;Add string (and unicode) comparison to array objects.

==

numpy/core/code_generators/array_api_order.txt
numpy/core/defchararray.py
numpy/core/src/_sortmodule.c.src
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/core/src/ucsnarrow.c
numpy/core/tests/test_multiarray.py
==================
036d7a3;Travis Oliphant;2006-04-13 21:01:54 +0000;Fix so that b.shape = <tuple> does not work for non-contiguous arrays

==

numpy/core/src/arrayobject.c
==================
66afe6d;Travis Oliphant;2006-04-13 21:00:05 +0000;Fix so that b.shape = <tuple> does not work for non-contiguous arrays

==

numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
==================
8a20ec0;Travis Oliphant;2006-04-13 19:53:41 +0000;Fix the test for Ticket #59

==

numpy/core/tests/test_multiarray.py
==================
47dc68a;Travis Oliphant;2006-04-13 19:51:39 +0000;Fix more on ticket #59

==

numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/core/tests/test_multiarray.py
==================
9640396;Travis Oliphant;2006-04-13 15:13:57 +0000;Fix segfault on indexing (but functionality still not working).  Add vectorize test-case (ticket #52).  Improve comments on broadcast failure.

==

THANKS.txt
numpy/core/src/arrayobject.c
numpy/lib/tests/test_function_base.py
==================
6eec6fa;Travis Oliphant;2006-04-13 01:48:47 +0000;Try to fool compilers on in divbyzero generation.

==

numpy/core/src/umathmodule.c.src
==================
7d03612;Travis Oliphant;2006-04-12 23:34:12 +0000;Fixed Ticket #43

==

numpy/core/src/multiarraymodule.c
==================
d618770;Travis Oliphant;2006-04-12 23:30:51 +0000;Fix Ticket #50 --- allow reconstruction of dumped chararray

==

numpy/core/defchararray.py
==================
ea68104;Travis Oliphant;2006-04-12 23:20:46 +0000;Fix ticket #40

==

numpy/core/src/ufuncobject.c
==================
e209904;Travis Oliphant;2006-04-12 23:16:26 +0000;Fixed silent altering of index arrays in fancy-indexing.

==

numpy/core/include/numpy/arrayobject.h
numpy/core/src/arrayobject.c
==================
ec554d0;Travis Oliphant;2006-04-12 22:49:00 +0000;Fixed where to always return a tuple

==

numpy/core/oldnumeric.py
numpy/core/src/arraymethods.c
numpy/core/src/multiarraymodule.c
numpy/lib/arraysetops.py
==================
5534a99;Travis Oliphant;2006-04-12 21:11:29 +0000;Fix Ticket #52

==

numpy/core/src/ufuncobject.c
numpy/lib/shape_base.py
==================
5326f89;Travis Oliphant;2006-04-11 07:14:15 +0000;Comment changes.  Fix-up byte-swapping on pickle read so that descriptor is also changed.

==

numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
==================
c71689e;Travis Oliphant;2006-04-10 23:35:58 +0000;Byteswap on pickle-read if not in correct byte-order.

==

numpy/core/src/arraymethods.c
==================
fe48ab5;Robert Cimrman;2006-04-10 14:55:52 +0000;

==

site.cfg.example
==================
d143f3c;Pearu Peterson;2006-04-10 10:48:50 +0000;Splitted umfpack and amd system_info classes into two.

==

numpy/distutils/system_info.py
==================
50e69de;Pearu Peterson;2006-04-09 10:11:56 +0000;Add Intel EM64T Fortran Compiler support.

==

numpy/distutils/cpuinfo.py
numpy/distutils/fcompiler/__init__.py
numpy/distutils/fcompiler/intel.py
numpy/distutils/system_info.py
==================
a8e6747;Pearu Peterson;2006-04-08 18:33:04 +0000;Fixed typo.

==

numpy/distutils/command/build_clib.py
numpy/distutils/fcompiler/__init__.py
==================
6932d85;Pearu Peterson;2006-04-08 17:10:26 +0000;Add support to specify config_fc option in setup.py file.

==

numpy/distutils/command/build_clib.py
numpy/distutils/fcompiler/__init__.py
==================
5cb0f8b;Pearu Peterson;2006-04-08 08:37:32 +0000;Removed cc_dynamic from libraries list for Gnu95FCompiler (darwin).

==

numpy/distutils/fcompiler/gnu.py
==================
1bca125;Pearu Peterson;2006-04-08 08:13:56 +0000;Fix ticket 48.

==

numpy/distutils/command/config_compiler.py
==================
18c2a95;sasha;2006-04-07 04:08:44 +0000;fixed mask calculation in cum* methods

==

numpy/core/ma.py
==================
b642778;sasha;2006-04-06 23:08:24 +0000;more array methods in ma (thanks Pierre GM <pgmdevlist@mailcan.com>)

==

numpy/core/ma.py
numpy/core/tests/test_ma.py
==================
f2337b8;Robert Cimrman;2006-04-06 12:06:47 +0000;site.scfg.example added

==

site.cfg.example
==================
035720e;Travis Oliphant;2006-04-06 09:44:35 +0000;Fixed bug in sorting on byteswapped arrays.

==

numpy/core/src/multiarraymodule.c
==================
17d7cfe;Pearu Peterson;2006-04-04 12:26:14 +0000;Fix version machinery and pkg information requests.

==

numpy/distutils/misc_util.py
numpy/setup.py
setup.py
==================
4c0bf7d;Pearu Peterson;2006-04-04 12:25:03 +0000;Fixed typo.

==

numpy/distutils/core.py
==================
163d946;Pearu Peterson;2006-04-04 06:11:39 +0000;Applied Bryce patch to support TestCase proxy classes.

==

numpy/testing/numpytest.py
==================
7c0eef6;Pearu Peterson;2006-04-03 14:23:19 +0000;Workaround strage tempfile problem.

==

numpy/distutils/exec_command.py
==================
6cc9da7;Pearu Peterson;2006-04-01 14:25:19 +0000;Reorg. code so that numpy.distutils could be used from cwd that contains math.py.

==

numpy/distutils/core.py
numpy/distutils/exec_command.py
numpy/f2py/__init__.py
==================
8680d6f;Pearu Peterson;2006-03-31 20:19:17 +0000;Fix typo.

==

numpy/distutils/misc_util.py
==================
827b79a;Tim Hochberg;2006-03-31 16:28:24 +0000;Fixed _wrapit so that it correctly handled non-array return values.

==

numpy/core/oldnumeric.py
numpy/core/tests/test_oldnumeric.py
==================
f0c7ba0;Pearu Peterson;2006-03-31 16:22:10 +0000;Fix inplace building of data sources.

==

numpy/distutils/command/build_src.py
==================
17e57d0;Pearu Peterson;2006-03-31 15:45:57 +0000;Handle callable data file generators

==

numpy/distutils/misc_util.py
==================
aa6ca9b;sasha;2006-03-31 14:23:05 +0000;unit test for r2312

==

numpy/core/tests/test_multiarray.py
==================
2a800cc;Pearu Peterson;2006-03-31 09:38:29 +0000;Add svn revision number to version.

==

setup.py
==================
c31f2f8;Pearu Peterson;2006-03-31 09:17:10 +0000;Applied http://projects.scipy.org/scipy/numpy/ticket/39

==

numpy/distutils/cpuinfo.py
numpy/distutils/fcompiler/intel.py
==================
d157315;Pearu Peterson;2006-03-31 09:03:37 +0000;Hint for using new setup configuration kw argument.

==

numpy/doc/DISTUTILS.txt
==================
471196b;Pearu Peterson;2006-03-31 08:59:36 +0000;Introduced configuration kw argument to setup. This fixes long lasted long configuration messages when setup command line has only help request or errors.

==

numpy/distutils/core.py
numpy/distutils/misc_util.py
setup.py
==================
da78766;Travis Oliphant;2006-03-31 08:32:04 +0000;Fix-up record-array pickling and attribute access errors.  Fix minor pickling inconsistency with un-ordered ('|') data-types.

==

numpy/core/records.py
numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/scalarmathmodule.c.src
==================
698a593;Pearu Peterson;2006-03-31 07:35:43 +0000;Fix restoring distutils.core globals on setup failure.

==

numpy/distutils/system_info.py
==================
1f1b3b4;sasha;2006-03-31 05:16:51 +0000;fixed segfault from add(x, [1], x) where x = array(2)

==

numpy/core/src/ufuncobject.c
==================
11bbd92;Travis Oliphant;2006-03-31 01:21:11 +0000;Allow flexible types to be up-cast to OBJECT dtype in 'ufuncs'

==

numpy/core/src/ufuncobject.c
==================
5bce295;Travis Oliphant;2006-03-30 21:26:09 +0000;Fix-up _wrapit

==

numpy/add_newdocs.py
numpy/core/oldnumeric.py
==================
7ddcb89;Pearu Peterson;2006-03-30 21:25:11 +0000;Improved umfpack_info.

==

numpy/distutils/system_info.py
==================
97dbaec;Pearu Peterson;2006-03-30 18:15:19 +0000;Added swig_opts to umfpack_info.

==

numpy/distutils/system_info.py
==================
65d44cd;Pearu Peterson;2006-03-30 18:04:46 +0000;Fixed 'from numpy.lib.scimath import *' failure.

==

numpy/lib/scimath.py
==================
9953985;Pearu Peterson;2006-03-30 17:56:48 +0000;Included numpy .txt files to installation.

==

setup.py
==================
8869df5;Pearu Peterson;2006-03-30 17:36:27 +0000;Reimplemented add_data_dir and add_data_files methods to fix ambiguities.

==

numpy/core/setup.py
numpy/distutils/misc_util.py
numpy/distutils/setup.py
numpy/doc/DISTUTILS.txt
==================
1845b35;Pearu Peterson;2006-03-30 09:21:33 +0000;Trying harder to find info modules.

==

numpy/_import_tools.py
==================
a873580;Pearu Peterson;2006-03-30 07:55:30 +0000;Fixed errors when trying to import freezed numpy scripts.

==

numpy/_import_tools.py
==================
4a5ed4f;Pearu Peterson;2006-03-30 07:20:48 +0000;Refactored Configuration._fix_paths method to gpaths, added tests and documentation.

==

numpy/distutils/misc_util.py
numpy/distutils/tests/test_misc_util.py
numpy/doc/DISTUTILS.txt
==================
052de78;Travis Oliphant;2006-03-29 22:17:32 +0000;Rever to old .reshape copy-if-necessary behavior.  Too disruptive to change. A sub-class should change it.

==

numpy/core/oldnumeric.py
numpy/core/src/multiarraymodule.c
==================
8898b96;Travis Oliphant;2006-03-29 18:26:58 +0000;Fix-up usage of asarray.

==

numpy/lib/function_base.py
==================
680a44a;Pearu Peterson;2006-03-29 14:31:13 +0000;Introduced standalone kw argument to add_subpackage and parent_name kw argument to get_subpackage. Fixed delegating options to subpackages when calling from Python prompt.

==

numpy/distutils/misc_util.py
==================
b0921fb;Pearu Peterson;2006-03-29 13:46:05 +0000;Fixed njoin for absolute paths.

==

numpy/distutils/misc_util.py
==================
10764c8;Pearu Peterson;2006-03-29 13:25:58 +0000;Fixed minrelpath bug for processing '.././..', minrelpath resolves '.'s. Introduced internal caller_level kw argument to Configuration to resolve relative path problems.

==

numpy/distutils/misc_util.py
numpy/distutils/tests/test_misc_util.py
==================
cecd918;Pearu Peterson;2006-03-29 11:22:07 +0000;Forcing unique names for subpackage setup.py modules.

==

numpy/distutils/misc_util.py
==================
700d45e;Travis Oliphant;2006-03-29 06:11:46 +0000;Fix use of wrong type in array_zeros.

==

numpy/core/src/multiarraymodule.c
==================
7c4be14;Travis Oliphant;2006-03-29 06:06:00 +0000;Fix up asanyarray usage

==

numpy/core/oldnumeric.py
==================
4aa3f16;Travis Oliphant;2006-03-29 02:20:00 +0000;Fix ravel function because method went back to old behavior.

==

numpy/core/oldnumeric.py
numpy/core/src/arraymethods.c
==================
c1dff9e;Travis Oliphant;2006-03-29 02:15:19 +0000;Change so that .ravel() has old behavior.

==

numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
==================
f819562;Travis Oliphant;2006-03-28 23:56:50 +0000;Updates to array creation: improve docstring, allow fast exit for subok=1, remove copy argument from all but array function itself.

==

numpy/core/numeric.py
numpy/core/src/multiarraymodule.c
==================
ffe633b;Travis Oliphant;2006-03-28 21:31:19 +0000;.ravel and .reshape always return views and raise ValueError if that is impossible.  The functions ravel and reshape return views or copies if the view is not possible.

==

numpy/core/arrayprint.py
numpy/core/oldnumeric.py
numpy/core/src/multiarraymodule.c
==================
4776dff;Pearu Peterson;2006-03-28 12:39:24 +0000;Fixed import.

==

numpy/distutils/fcompiler/compaq.py
==================
580fb51;Travis Oliphant;2006-03-27 22:10:30 +0000;Change order of attribute lookup for recarrays.  Now, the methods and attributes of the object are tried first).

==

numpy/core/records.py
==================
592b9dc;Travis Oliphant;2006-03-27 18:47:11 +0000;Remove nd=1 optimization in .ravel and add support for fortran order arrays that don't copy

==

numpy/core/src/multiarraymodule.c
==================
d3f62a6;Robert Cimrman;2006-03-27 14:17:54 +0000;umfpack detection added

==

numpy/distutils/system_info.py
==================
768e57a;Tim Leslie;2006-03-25 11:41:41 +0000;remove unused imports

==

numpy/lib/function_base.py
numpy/lib/twodim_base.py
numpy/lib/type_check.py
==================
3c45bc3;Tim Leslie;2006-03-25 11:29:22 +0000;remove unused import

==

numpy/lib/scimath.py
==================
4921d30;Tim Leslie;2006-03-25 11:15:51 +0000;remove unused variable

==

numpy/core/memmap.py
==================
28b7d9f;Travis Oliphant;2006-03-24 22:12:48 +0000;Changed fortran= keywords to order= keywords

==

numpy/core/code_generators/multiarray_api_order.txt
numpy/core/defchararray.py
numpy/core/defmatrix.py
numpy/core/include/numpy/arrayobject.h
numpy/core/ma.py
numpy/core/memmap.py
numpy/core/numeric.py
numpy/core/oldnumeric.py
numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
==================
76612bf;Travis Oliphant;2006-03-24 19:16:04 +0000;Simplify interfaces.  Fix UCHAR bug.

==

numpy/core/include/numpy/arrayobject.h
numpy/core/numeric.py
numpy/lib/shape_base.py
==================
4bd0d90;Travis Oliphant;2006-03-24 05:10:50 +0000;Use generate_mtrand code to create the mtrand.c file.

==

numpy/random/mtrand/mtrand.c
==================
2db96a7;Travis Oliphant;2006-03-23 22:14:45 +0000;Added ascontiguous and asfortran functions.

==

numpy/core/numeric.py
numpy/core/src/multiarraymodule.c
==================
3fa921b;Robert Kern;2006-03-23 16:23:45 +0000;Fix randint(1,2) == 0 bug.

==

numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
==================
16de17a;sasha;2006-03-23 05:02:36 +0000;don't catch exceptions from method calls

==

numpy/core/oldnumeric.py
==================
6e5c13b;Travis Oliphant;2006-03-23 04:18:27 +0000;compress code

==

numpy/core/src/arrayobject.c
==================
0e72b1b;Travis Oliphant;2006-03-23 03:17:06 +0000;Fix segfault in fast power.

==

numpy/core/src/arrayobject.c
==================
bf8b6bc;Tim Leslie;2006-03-23 02:23:17 +0000;trivial whitespace changes, more explicit imports

==

numpy/lib/function_base.py
==================
9ceea56;Tim Leslie;2006-03-23 02:22:00 +0000;trivial whitespace changes

==

numpy/lib/index_tricks.py
==================
01d1eed;Tim Leslie;2006-03-23 02:19:50 +0000;explicitly use numerictypes

==

numpy/lib/getlimits.py
==================
815ac8f;Tim Leslie;2006-03-23 02:19:00 +0000;shorten long comment line

==

numpy/lib/scimath.py
==================
2ee64fd;Tim Leslie;2006-03-23 02:16:55 +0000;use docstring header, fix 'import *', remove duplicate definition of __float__, change first arg of method from 'a' to 'self'

==

numpy/lib/UserArray.py
==================
4867af4;Tim Leslie;2006-03-23 02:13:46 +0000;change header comments into docstrings

==

numpy/lib/convertcode.py
numpy/lib/machar.py
==================
56ae0d3;sasha;2006-03-22 22:50:30 +0000;Removed branches that use undefined "_wrapit"

==

numpy/core/ma.py
==================
7dd693c;sasha;2006-03-22 22:36:56 +0000; * More array methods thanks to Pierre GM <pgmdevlist@mailcan.com>  * Added dtype argument to reduce

==

numpy/core/ma.py
numpy/core/tests/test_ma.py
==================
394965f;Travis Oliphant;2006-03-22 17:38:35 +0000;Fix optimized dot error (1,1)x(1,N) and (N,1)x(1,1)

==

numpy/core/blasdot/_dotblas.c
==================
4ede50a;Travis Oliphant;2006-03-22 17:27:56 +0000;Expose another dot error.

==

numpy/core/src/scalarmathmodule.c.src
numpy/core/tests/test_numeric.py
==================
4b414d7;Travis Oliphant;2006-03-21 23:22:45 +0000;scalar math updates.

==

numpy/core/include/numpy/arrayobject.h
numpy/core/src/scalarmathmodule.c.src
==================
8a80009;Travis Oliphant;2006-03-21 09:42:40 +0000;Fix reshape function to support fortran perspective better.

==

numpy/core/src/multiarraymodule.c
==================
cdbcee5;Travis Oliphant;2006-03-21 05:21:43 +0000;Fix reshape to always interpret as C-contiguous unless fortran=True is given or fortran=None and array is already fortran array.

==

numpy/core/code_generators/generate_array_api.py
numpy/core/code_generators/multiarray_api_order.txt
numpy/core/include/numpy/arrayobject.h
numpy/core/numeric.py
numpy/core/oldnumeric.py
numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/core/src/scalartypes.inc.src
==================
cd5f36d;cookedm;2006-03-21 04:14:29 +0000;Better version matching for Sun Fortran, and don't panic when we can't match the version number

==

numpy/distutils/ccompiler.py
numpy/distutils/fcompiler/sun.py
==================
8f28c43;cookedm;2006-03-21 03:54:15 +0000;whoops, readd cc_dynamic to libs to link with for darwin platform.

==

numpy/distutils/fcompiler/gnu.py
==================
0838fa5;Tim Leslie;2006-03-19 01:25:20 +0000;remove 'from numerictypes import *'

==

numpy/core/ma.py
numpy/core/tests/test_ma.py
==================
06f4407;cookedm;2006-03-18 22:43:25 +0000;For version checking of compilers, first look for a .version_match method to call, then check the version_pattern regex if not found. Also add a simple_version_match function to ccompiler which does a fuzzy match.
Update the GNU Fortran compilers to use version_match.

==

numpy/distutils/ccompiler.py
numpy/distutils/fcompiler/gnu.py
==================
267a8f5;Tim Leslie;2006-03-18 04:18:57 +0000;change use of deprecated NewAxis to newaxis

==

numpy/lib/index_tricks.py
numpy/lib/tests/test_shape_base.py
numpy/linalg/linalg.py
==================
1164825;Travis Oliphant;2006-03-17 09:48:17 +0000;Add coercion test for scalar objects.

==

numpy/core/code_generators/array_api_order.txt
numpy/core/src/arrayobject.c
numpy/core/src/scalarmathmodule.c.src
==================
1780496;Travis Oliphant;2006-03-17 00:56:39 +0000;Comments only.

==

numpy/core/src/scalarmathmodule.c.src
==================
6eec749;Travis Oliphant;2006-03-16 18:00:56 +0000;Add extra arguments to corrcoef.

==

numpy/lib/function_base.py
==================
9003457;Travis Oliphant;2006-03-16 17:57:07 +0000;Fix scalar case for corrcoef

==

numpy/lib/function_base.py
==================
7b85f21;Travis Oliphant;2006-03-16 17:44:20 +0000;Third time's the charm.

==

numpy/lib/function_base.py
==================
0818507;Travis Oliphant;2006-03-16 17:39:24 +0000;Fix cov and corrcoef in numpy

==

numpy/lib/function_base.py
==================
959f36c;Travis Oliphant;2006-03-16 17:36:38 +0000;Fix cov and corrcoef in numpy

==

numpy/lib/function_base.py
==================
4506c51;Travis Oliphant;2006-03-16 16:16:18 +0000;Expose arrayscalar structure to make scalarmath and other extensions easier to write.  Move bool scalar C-API to arrayscalars.h

==

numpy/core/code_generators/generate_array_api.py
numpy/core/include/numpy/arrayobject.h
numpy/core/include/numpy/arrayscalars.h
numpy/core/src/arrayobject.c
numpy/core/src/scalarmathmodule.c.src
numpy/core/src/scalartypes.inc.src
==================
8c9cf9a;Tim Leslie;2006-03-16 04:05:58 +0000;clean up some imports

==

numpy/dft/fftpack.py
numpy/lib/machar.py
numpy/lib/scimath.py
numpy/lib/shape_base.py
numpy/lib/twodim_base.py
==================
5a71283;Travis Oliphant;2006-03-15 11:36:26 +0000;Fix bug when setting uic to False.

==

numpy/core/src/arraymethods.c
==================
75f139d;Travis Oliphant;2006-03-15 11:31:30 +0000;Fix flags getitem.

==

numpy/core/src/arrayobject.c
==================
967e9fd;Travis Oliphant;2006-03-15 09:30:20 +0000;Fix-up name-spaces.

==

numpy/linalg/linalg.py
==================
abe1567;Travis Oliphant;2006-03-15 09:29:30 +0000;Fix-up name-spaces.

==

numpy/core/oldnumeric.py
numpy/linalg/linalg.py
numpy/linalg/old.py
==================
24cd77b;Tim Leslie;2006-03-15 06:10:41 +0000;fix imports so that all tests pass

==

numpy/linalg/linalg.py
numpy/linalg/old.py
==================
db77da0;Travis Oliphant;2006-03-15 02:53:57 +0000;Isolate Numeric compatibility to numpy.linalg.old

==

numpy/lib/convertcode.py
numpy/linalg/linalg.py
numpy/linalg/old.py
==================
9682b2c;Travis Oliphant;2006-03-15 01:34:50 +0000;Committed much of ticket #36

==

numpy/dual.py
numpy/linalg/info.py
numpy/linalg/linalg.py
==================
0373688;Travis Oliphant;2006-03-15 00:48:04 +0000;Changed the C-API by making the a.flags object a builtin object for speed.  Also fixed issues with linalg and matrices.

==

numpy/core/_internal.py
numpy/core/code_generators/array_api_order.txt
numpy/core/code_generators/generate_array_api.py
numpy/core/include/numpy/arrayobject.h
numpy/core/numeric.py
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/core/src/scalartypes.inc.src
numpy/core/src/umathmodule.c.src
numpy/linalg/linalg.py
==================
440214d;Travis Oliphant;2006-03-14 21:24:34 +0000;New version number

==

numpy/version.py
==================
ee8e27a;Travis Oliphant;2006-03-14 20:31:42 +0000;Fix 2.3 compatibility on windows.

==

numpy/testing/utils.py
==================
7afda6a;Travis Oliphant;2006-03-14 07:53:59 +0000;Add rest of the examples for pyrex and swig

==

numpy/doc/pyrex/MANIFEST
numpy/doc/pyrex/Makefile
numpy/doc/pyrex/c_python.pxd
numpy/doc/pyrex/notes
numpy/doc/pyrex/numpyx.c
numpy/doc/pyrex/numpyx.pyx
numpy/doc/pyrex/run_test.py
numpy/doc/pyrex/setup.py
numpy/doc/swig/HelperFunctions.txt
numpy/doc/swig/Makefile
numpy/doc/swig/README
numpy/doc/swig/Series.i
numpy/doc/swig/series.cxx
numpy/doc/swig/series.h
numpy/doc/swig/setup.py
numpy/doc/swig/testSeries.py
==================
22335be;Travis Oliphant;2006-03-14 07:22:32 +0000;Fix missing increment of reference count.

==

numpy/core/blasdot/_dotblas.c
numpy/core/src/arrayobject.c
numpy/doc/CAPI.txt
==================
57b603a;Travis Oliphant;2006-03-13 23:12:31 +0000;Fix scalar multiplication in optimized dot.

==

numpy/core/blasdot/_dotblas.c
numpy/core/tests/test_numeric.py
==================
55b8604;Travis Oliphant;2006-03-13 22:06:30 +0000;Fix consistency of optimized dot

==

numpy/core/blasdot/_dotblas.c
==================
aa04352;Travis Oliphant;2006-03-13 21:40:06 +0000;Remove numpy distutils from autoload and fix 64-bit bug.

==

numpy/__init__.py
numpy/core/src/arraymethods.c
==================
37e0c9b;Tim Leslie;2006-03-13 07:41:07 +0000;remove unused imports

==

numpy/lib/UserArray.py
numpy/lib/function_base.py
numpy/lib/index_tricks.py
numpy/lib/ufunclike.py
==================
8a65c25;Tim Leslie;2006-03-13 07:35:40 +0000;update tests to all run correctly

==

numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_index_tricks.py
numpy/lib/tests/test_polynomial.py
numpy/lib/tests/test_twodim_base.py
==================
7ed9544;Travis Oliphant;2006-03-13 07:09:11 +0000;Deleting copied files

==

numpy/core/include/numpy/c_numpy.pxd
numpy/core/include/numpy/numpy.i
==================
e3b5adb;Travis Oliphant;2006-03-13 07:07:30 +0000;Move swig and pyrex over

==

numpy/doc/pyrex/c_numpy.pxd
numpy/doc/swig/numpy.i
==================
3afb449;Travis Oliphant;2006-03-13 07:05:41 +0000;Adding swig and pyrex examples

==

numpy/core/include/numpy/c_numpy.pxd
numpy/core/include/numpy/numpy.i
numpy/core/src/arrayobject.c
numpy/doc/ufuncs.txt
setup.py
==================
64c7a3c;Travis Oliphant;2006-03-13 06:27:30 +0000;Fix ticket #35

==

numpy/core/src/multiarraymodule.c
==================
67940c3;Travis Oliphant;2006-03-13 03:37:36 +0000;Fix up oldnumeric.py functions to return intput class where possible.  Allow complex-valued arrays in PyArray_Round. Add backward-compatible support for Python2.5 ssize_t changes.

==

numpy/core/include/numpy/arrayobject.h
numpy/core/numeric.py
numpy/core/oldnumeric.py
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/core/src/scalartypes.inc.src
==================
cda50ab;Travis Oliphant;2006-03-12 11:38:04 +0000;Fix defect #28

==

numpy/lib/polynomial.py
==================
2ce697c;Travis Oliphant;2006-03-12 11:35:01 +0000;Fix object array setting.

==

numpy/core/src/arrayobject.c
==================
0c436ea;Travis Oliphant;2006-03-12 10:35:09 +0000;Fixed segfault on multiarray import in install directory.  Now, it just raises an error.

==

numpy/core/_internal.py
numpy/core/src/multiarraymodule.c
==================
b865aac;Travis Oliphant;2006-03-11 22:52:45 +0000;Fixed typeNA (ticket #31)

==

numpy/core/numerictypes.py
==================
bf57380;cookedm;2006-03-10 21:31:27 +0000;Run reindent.py (script distributed with Python) over the source to remove extraneous whitespace

==

benchmarks/sorting.py
numpy/_import_tools.py
numpy/core/__init__.py
numpy/core/_internal.py
numpy/core/arrayprint.py
numpy/core/code_generators/generate_array_api.py
numpy/core/code_generators/generate_umath.py
numpy/core/defchararray.py
numpy/core/defmatrix.py
numpy/core/info.py
numpy/core/ma.py
numpy/core/memmap.py
numpy/core/numeric.py
numpy/core/numerictypes.py
numpy/core/oldnumeric.py
numpy/core/records.py
numpy/core/setup.py
numpy/core/tests/test_defmatrix.py
numpy/core/tests/test_ma.py
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_numeric.py
numpy/core/tests/test_numerictypes.py
numpy/core/tests/test_records.py
numpy/core/tests/test_umath.py
numpy/core/tests/test_unicode.py
numpy/dft/__init__.py
numpy/dft/fftpack.py
numpy/dft/helper.py
numpy/distutils/ccompiler.py
numpy/distutils/command/__init__.py
numpy/distutils/command/build_src.py
numpy/distutils/command/config_compiler.py
numpy/distutils/conv_template.py
numpy/distutils/cpuinfo.py
numpy/distutils/fcompiler/absoft.py
numpy/distutils/fcompiler/gnu.py
numpy/distutils/from_template.py
numpy/distutils/lib2def.py
numpy/distutils/line_endings.py
numpy/distutils/mingw32ccompiler.py
numpy/distutils/misc_util.py
numpy/distutils/system_info.py
numpy/distutils/tests/gen_ext/setup.py
numpy/distutils/unixccompiler.py
numpy/dual.py
numpy/f2py/auxfuncs.py
numpy/f2py/capi_maps.py
numpy/f2py/cb_rules.py
numpy/f2py/cfuncs.py
numpy/f2py/common_rules.py
numpy/f2py/crackfortran.py
numpy/f2py/doc/collectinput.py
numpy/f2py/f2py2e.py
numpy/f2py/f2py_testing.py
numpy/f2py/f90mod_rules.py
numpy/f2py/func2subr.py
numpy/f2py/rules.py
numpy/f2py/setup.py
numpy/f2py/tests/array_from_pyobj/tests/test_array_from_pyobj.py
numpy/f2py/tests/c/return_real.py
numpy/f2py/tests/f77/return_complex.py
numpy/f2py/tests/f77/return_logical.py
numpy/f2py/tests/f77/return_real.py
numpy/f2py/tests/f90/return_character.py
numpy/f2py/tests/f90/return_complex.py
numpy/f2py/tests/f90/return_integer.py
numpy/f2py/tests/f90/return_real.py
numpy/f2py/use_rules.py
numpy/lib/__init__.py
numpy/lib/arraysetops.py
numpy/lib/convertcode.py
numpy/lib/function_base.py
numpy/lib/getlimits.py
numpy/lib/index_tricks.py
numpy/lib/info.py
numpy/lib/shape_base.py
numpy/lib/tests/test_arraysetops.py
numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_shape_base.py
numpy/lib/tests/test_twodim_base.py
numpy/lib/tests/test_type_check.py
numpy/lib/twodim_base.py
numpy/lib/type_check.py
numpy/lib/ufunclike.py
numpy/lib/utils.py
numpy/linalg/__init__.py
numpy/linalg/info.py
numpy/linalg/linalg.py
numpy/linalg/setup.py
numpy/random/__init__.py
numpy/random/setup.py
numpy/testing/numpytest.py
numpy/testing/utils.py
==================
f2db317;cookedm;2006-03-10 21:19:42 +0000;Run tabnanny over the code, and replace uses of tab for indentation with spaces

==

numpy/core/_internal.py
numpy/core/tests/test_defmatrix.py
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_numeric.py
numpy/distutils/fcompiler/absoft.py
numpy/distutils/system_info.py
numpy/f2py/capi_maps.py
numpy/lib/machar.py
numpy/lib/tests/test_twodim_base.py
==================
3493d8b;Travis Oliphant;2006-03-10 19:24:04 +0000;Add back missing typeNA values

==

numpy/core/numerictypes.py
==================
d04f074;Travis Oliphant;2006-03-10 12:21:20 +0000;Fix numpy intYY types so they correspond exactly with C-based PyArray_INTYY number

==

numpy/core/numerictypes.py
==================
088cd5a;Travis Oliphant;2006-03-10 10:27:31 +0000;Simplify scalar arithmetic and improve it in cases of array scalars mixed with masked arrays.

==

numpy/core/src/scalartypes.inc.src
==================
132acae;Travis Oliphant;2006-03-10 10:05:24 +0000;Change error raise to warning when __array_() is called with no context

==

numpy/core/ma.py
==================
33c9c5b;Travis Oliphant;2006-03-10 06:58:33 +0000;Fixed SETITEM and GETITEM macros. Added __index__ support for array scalars of integer type for Python 2.5

==

numpy/core/blasdot/_dotblas.c
numpy/core/include/numpy/arrayobject.h
numpy/core/include/numpy/ufuncobject.h
numpy/core/src/scalartypes.inc.src
==================
15dea02;cookedm;2006-03-09 03:12:32 +0000;Add unit test for negative complex powers

==

numpy/core/tests/test_umath.py
==================
1c82c1f;Tim Hochberg;2006-03-09 02:46:11 +0000;Fix negative integral powers of complex numbers being computed as positive powers!

==

numpy/core/src/umathmodule.c.src
==================
7042045;Travis Oliphant;2006-03-08 22:47:17 +0000;Fix f2py to handle character arrays in common blocks

==

numpy/f2py/common_rules.py
numpy/f2py/src/fortranobject.c
numpy/f2py/src/fortranobject.h
==================
07d0360;Travis Oliphant;2006-03-08 21:32:24 +0000;Fix tabs-to-spaces and unused import re: ticket #26

==

numpy/core/defchararray.py
==================
d4f1427;cookedm;2006-03-07 22:49:38 +0000;Merge power_optimization branch (r2103:2205) to trunk. Important changes:  * x**n (where n is a scalar) is optimized  * new ufuncs: square, reciprocal, ones_like, used for optimizing x**n  * PyArray_FromAny speed increased for converting scalars    - side effect is that subclasses of Python builtin scalars won't have      the array protocol checked.

==
==================
c9d2cdc;cookedm;2006-03-07 22:02:23 +0000;Merge trunk (r2142:2204) to power_optimization branch

==
==================
5bb7342;Travis Oliphant;2006-03-06 23:33:05 +0000;Fix pickling of fortran arrays (defect #16)

==

numpy/core/src/arraymethods.c
numpy/core/tests/test_multiarray.py
==================
819578a;Travis Oliphant;2006-03-06 23:15:35 +0000;Apply Tim's code-checker tests except for white-space-only changes.

==

numpy/core/arrayprint.py
numpy/core/defmatrix.py
numpy/core/numeric.py
numpy/core/numerictypes.py
numpy/core/records.py
numpy/core/tests/test_ma.py
==================
2ce56bc;Travis Oliphant;2006-03-06 19:29:55 +0000;Fix so that -OO works

==

numpy/__init__.py
==================
377645d;sasha;2006-03-06 16:58:35 +0000;removed checks for the mask shape; fixes ticket:19 by timl

==

numpy/core/ma.py
==================
8818839;sasha;2006-03-06 16:29:50 +0000;code cleanup for ma.py by timl

==

numpy/core/ma.py
==================
4e8b56d;Travis Oliphant;2006-03-06 08:18:52 +0000;Ensure scalars in finfo

==

numpy/lib/getlimits.py
==================
f1fb5f8;Travis Oliphant;2006-03-06 04:23:46 +0000;A little re-ordering.

==

numpy/core/src/arrayobject.c
==================
07bdddd;Travis Oliphant;2006-03-06 04:20:01 +0000;Fix bad substitution of PyArray_New

==

numpy/core/src/arrayobject.c
==================
fe076fb;sasha;2006-03-05 18:11:38 +0000;fixed ma.nonzero

==

numpy/core/ma.py
numpy/core/tests/test_ma.py
==================
d5c0229;Travis Oliphant;2006-03-03 23:40:17 +0000;Fix bug when ENSURECOPY was present but types are different.

==

numpy/core/src/arrayobject.c
==================
07a9750;Travis Oliphant;2006-03-03 16:45:16 +0000;Fix an issue with string/unicode arrays created from scalars.

==

numpy/core/numerictypes.py
numpy/core/src/arrayobject.c
==================
7db985e;Robert Kern;2006-03-02 17:19:30 +0000;Fixed license statement

==

numpy/f2py/f2py2e.py
==================
a93cea6;Travis Oliphant;2006-03-01 17:49:45 +0000;Fix equality and inequality comparison so that non-array objects are not cast to the type of the array object unless that array is of type PyArray_OBJECT.

==

numpy/core/src/arrayobject.c
==================
6fd31c3;Travis Oliphant;2006-03-01 06:49:10 +0000;Remove bigndarray because Python SVN has support for 64-bit indexing.

==

numpy/core/include/numpy/arrayobject.h
numpy/core/numeric.py
numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/core/src/ufuncobject.c
==================
3f8c2de;Travis Oliphant;2006-03-01 06:10:17 +0000;Swap order of fill-function arguments and make ones use fill now.

==

numpy/core/include/numpy/arrayobject.h
numpy/core/numeric.py
numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
==================
5f99490;sasha;2006-03-01 03:44:42 +0000;incremented NDARRAY_VERSION

==

numpy/core/include/numpy/arrayobject.h
==================
b25ddc2;sasha;2006-03-01 03:41:58 +0000;faster ndarray.fill

==

numpy/core/include/numpy/arrayobject.h
numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/tests/test_multiarray.py
==================
8f6eca6;sasha;2006-03-01 01:19:01 +0000;made ma friendlier to pydoc

==

numpy/core/ma.py
==================
60a6705;Travis Oliphant;2006-03-01 01:16:21 +0000;Add keyword arguments to single-argument functions taking axis argument.

==

numpy/core/src/arraymethods.c
numpy/core/src/scalartypes.inc.src
==================
c190cfa;sasha;2006-03-01 00:39:50 +0000;implemented ndim attribute

==

numpy/core/ma.py
numpy/core/tests/test_ma.py
==================
6627d4e;Travis Oliphant;2006-03-01 00:18:35 +0000;Fix-up error in piecewise.

==

numpy/lib/function_base.py
==================
931a4a3;Travis Oliphant;2006-02-28 21:58:27 +0000;Code cleanup

==

numpy/core/src/arrayobject.c
==================
f4fc019;Travis Oliphant;2006-02-28 21:56:13 +0000;Check strides every time it is allowed.

==

numpy/core/src/arrayobject.c
==================
fc064db;Travis Oliphant;2006-02-28 21:13:49 +0000;Add refcheck keyword argument to resize method to allow override of reference count check.  Allow 0-stride arrays to be created and allow setting of strides even when we create the memory.

==

numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/tests/test_multiarray.py
==================
1bf0188;Travis Oliphant;2006-02-28 19:52:00 +0000;Fix reference counting on wrap method in ufuncobject.c

==

numpy/core/src/ufuncobject.c
==================
e11ca4d;Travis Oliphant;2006-02-28 07:54:11 +0000;Fix tests and segfault in set_strides.

==

numpy/core/src/arrayobject.c
numpy/core/tests/test_multiarray.py
==================
a538c37;Travis Oliphant;2006-02-28 07:43:19 +0000;Allow any integer as a stride (including zero --- though you need to understand that case to use it effectively).  Also.  fix a bug in strides_set that appeared when an array had say a string as it's base object instead of an array.

==

numpy/core/src/arrayobject.c
==================
3e5fdde;cookedm;2006-02-28 02:36:11 +0000;Add __eq__ and __ne__ to poly1d

==

numpy/lib/polynomial.py
==================
3989cad;Travis Oliphant;2006-02-28 00:06:37 +0000;Modest improvements to UserArray attribute access.

==

numpy/lib/UserArray.py
==================
c222547;Travis Oliphant;2006-02-27 23:36:06 +0000;Undo last change.  Misunderstood...

==

numpy/core/defmatrix.py
==================
d46782d;Travis Oliphant;2006-02-27 23:32:49 +0000;Don't check scalars in matrix mul.  There is fast code for them in dotblas.

==

numpy/core/defmatrix.py
==================
5ffd88a;edschofield;2006-02-27 22:47:42 +0000;More judicious calling of dot() from matrix.__mul__

==

numpy/core/defmatrix.py
==================
b8ba262;Travis Oliphant;2006-02-27 19:23:05 +0000;Have __array_finalize__ be called for every sub-class creation.

==

numpy/core/memmap.py
numpy/core/src/arrayobject.c
==================
def1c92;Travis Oliphant;2006-02-27 18:24:25 +0000;Fix segfault due to no error check.

==

numpy/core/src/arrayobject.c
numpy/core/src/scalartypes.inc.src
==================
1b3fcc6;sasha;2006-02-27 18:09:29 +0000;fixed whitespace in several doc strings

==

numpy/core/src/arraymethods.c
==================
4156b24;sasha;2006-02-26 04:14:32 +0000;made subscripting return ndarray if ellipsis is present

==

numpy/core/src/arrayobject.c
numpy/core/tests/test_multiarray.py
==================
013b396;Pearu Peterson;2006-02-24 23:24:36 +0000;Clean up.

==

numpy/__init__.py
==================
a895d10;Pearu Peterson;2006-02-24 23:19:41 +0000;Replaced numpy.distutils.test method instance with a function to avoid importing numpy during numpy import.

==

numpy/distutils/__init__.py
==================
27e255b;sasha;2006-02-24 20:55:26 +0000;allow array(())

==

numpy/core/src/arrayobject.c
numpy/core/tests/test_multiarray.py
==================
00f2295;Pearu Peterson;2006-02-24 16:56:59 +0000;Added more debugging hooks to PackageLoader: NUMPY_IMPORT_DEBUG. Avoid initiating Scipy/NumpyTest during imports.

==

numpy/__init__.py
numpy/_import_tools.py
numpy/core/__init__.py
numpy/dft/__init__.py
numpy/lib/__init__.py
numpy/lib/function_base.py
numpy/linalg/__init__.py
numpy/linalg/linalg.py
numpy/random/__init__.py
numpy/testing/info.py
numpy/testing/utils.py
==================
ec53dd5;Travis Oliphant;2006-02-24 12:27:12 +0000;Fixed inappropriate use of gentype_copy

==

numpy/core/src/scalartypes.inc.src
==================
4daf551;Travis Oliphant;2006-02-24 11:04:26 +0000;Added kron and repmat

==

numpy/lib/shape_base.py
numpy/lib/twodim_base.py
==================
b18d25b;Travis Oliphant;2006-02-24 10:50:02 +0000;Faster return.

==

numpy/core/defmatrix.py
==================
24a8d32;Travis Oliphant;2006-02-24 10:48:35 +0000;Don't allow matrices larger than ndim=2

==

numpy/core/defmatrix.py
==================
8db604b;Travis Oliphant;2006-02-24 10:36:36 +0000;Fix problem with subspace indexing an matrix subclass

==

numpy/core/src/arrayobject.c
==================
14f6333;Travis Oliphant;2006-02-24 10:09:23 +0000;Fix scalar multiplication striding for both rows and columns.

==

numpy/core/blasdot/_dotblas.c
==================
a616cf6;Pearu Peterson;2006-02-24 08:31:00 +0000;Improved the meaning of test level argument: with negative level return a list of abs(level) unit tests, with a positive value, also run them.

==

numpy/testing/numpytest.py
==================
fc3ad91;Pearu Peterson;2006-02-24 07:55:06 +0000;Documented NumpyTest.test level and verbosity arguments. Added special behaviors.

==

numpy/testing/numpytest.py
==================
71597d7;Travis Oliphant;2006-02-24 05:59:37 +0000;Change formating of all flexible arrays to str(arr.dtype)

==

numpy/core/numeric.py
==================
e3a1d50;cookedm;2006-02-24 05:47:33 +0000;Special-case PyArray_FromAny to handle Python scalars. bool, int, long, float, and complex are tested for early, and converted using PyArray_FromScalar before going to the general code. Before, tests for attributes like __array__ would be done first.
This does have the side effect that if you have a subclass of float, say, that
defines the array interface then that will not be used. I can't conceive
of a use for that though.

==

numpy/core/src/arrayobject.c
==================
e9b5c63;cookedm;2006-02-24 02:27:01 +0000;Make r_ and c_ instances of subclasses of concatenator, with appropiate docstrings.

==

numpy/lib/index_tricks.py
==================
872a836;Travis Oliphant;2006-02-24 02:17:39 +0000;Add check for rint and a default implementation if not present.  Make UserArray a new-style class.

==

numpy/core/setup.py
numpy/core/src/umathmodule.c.src
numpy/lib/UserArray.py
==================
f909e98;Travis Oliphant;2006-02-24 01:40:53 +0000;Add round method to array scalars and fix a few reference count issues.

==

THANKS.txt
numpy/core/src/multiarraymodule.c
numpy/core/src/scalartypes.inc.src
==================
adc2173;sasha;2006-02-24 00:37:16 +0000;added rint ufunc and ndarray.round

==

numpy/core/code_generators/generate_umath.py
numpy/core/code_generators/multiarray_api_order.txt
numpy/core/include/numpy/arrayobject.h
numpy/core/ma.py
numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/core/src/umathmodule.c.src
numpy/core/tests/test_multiarray.py
==================
9f395ae;Travis Oliphant;2006-02-24 00:31:07 +0000;Make an enumerated type out of the scalar defines.

==

numpy/core/include/numpy/arrayobject.h
numpy/core/src/multiarraymodule.c
numpy/core/src/scalartypes.inc.src
numpy/core/src/ufuncobject.c
==================
a497e90;Travis Oliphant;2006-02-23 19:47:07 +0000;Fix scalar-multiply dotblas error for non-double types.  Preserve more matrices through functions

==

numpy/core/blasdot/_dotblas.c
numpy/core/include/numpy/arrayobject.h
numpy/lib/UserArray.py
numpy/linalg/linalg.py
==================
ee7b258;Tim Hochberg;2006-02-23 16:08:03 +0000;Add optimizations for integral powers of complex numbers to nc_pow.

==

numpy/core/src/umathmodule.c.src
==================
7adb2e2;Pearu Peterson;2006-02-23 12:37:17 +0000;Fixed a bug in importing zzz/tests/test_zzz.py when zzz/zzz.py exists. Added check_testcase_name and testfile_patterns to NumpyTest so that different test suite conventions can be used.

==

numpy/testing/numpytest.py
==================
97342ef;Travis Oliphant;2006-02-23 07:06:19 +0000;Make matrices survive through more functions.

==

numpy/linalg/linalg.py
==================
5c566d6;Travis Oliphant;2006-02-23 04:29:03 +0000;Fix _AIX bug and add UserArray for container class backward compatibility.

==

numpy/core/include/numpy/ufuncobject.h
numpy/lib/UserArray.py
numpy/lib/twodim_base.py
numpy/linalg/linalg.py
==================
61553e3;edschofield;2006-02-22 09:52:16 +0000;Fixed linalg.singular_value_decomposition. Should full_matrices=1 ??

==

numpy/linalg/linalg.py
==================
ede85ce;cookedm;2006-02-21 23:09:12 +0000;Merge trunk (r2124:2142) to power optimization branch

==
==================
0aa85ca;cookedm;2006-02-21 23:01:17 +0000;Improve umath generation a bit (ufuncs are outputed in name-sorted order)

==

numpy/core/code_generators/generate_umath.py
==================
b7db375;cookedm;2006-02-21 22:58:26 +0000;Minor style improvements for polynomial.py

==

numpy/lib/polynomial.py
==================
bb23ed7;cookedm;2006-02-21 22:56:16 +0000;Fix up Tim's x**n optimizations  * do the reciprocal right for complex arrays  * use PyArray_Copy for x**1, instead of x.copy(). PyArray_SetNumericOps    can't find "copy" when multiarray is imported, so this wasn't called.  * some whitespace issues  * add some test cases for x**n

==

numpy/core/src/arrayobject.c
numpy/core/src/umathmodule.c.src
numpy/core/tests/test_umath.py
==================
00c6d3e;Pearu Peterson;2006-02-21 22:38:37 +0000;Impl. check_testcase_name, get_testfile methods to support different unittest suite naming schemes. Removed Python 2.1 support code.

==

numpy/testing/numpytest.py
==================
9fddb81;Pearu Peterson;2006-02-21 09:13:35 +0000;Added memusage() for os.name=='nt'

==

numpy/testing/utils.py
==================
c90f2fa;Pearu Peterson;2006-02-20 20:22:59 +0000;Added dict and list support to assert_equal when they contain arrays.

==

numpy/testing/utils.py
==================
5937d59;Tim Hochberg;2006-02-19 13:57:36 +0000;Dispatch to reciprocal, ones_like, copy, sqrt, square inside array_power and array_inplace_power when power is a scalar in [-1, 0, 1, 0.5, 1, 2]. Also, added the ufuncs reciprocal and ones_like.

==

numpy/core/code_generators/generate_umath.py
numpy/core/src/arrayobject.c
numpy/core/src/umathmodule.c.src
==================
f30e6c2;Travis Oliphant;2006-02-19 00:54:51 +0000;1) Fix scimath functions to take and return vectors. 2) Fix old bug in PyArray_CastTo when multiple copies made. 3) Fix reference counting bugs.

==

numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/lib/scimath.py
==================
626bcc3;Pearu Peterson;2006-02-18 13:57:34 +0000;Fixed numpy build for cygwin.

==

numpy/core/include/numpy/fenv/fenv.c
==================
54d08c6;Pearu Peterson;2006-02-18 13:07:25 +0000;Moved fenv codes to numpy/include/fenv/ as mingw32 compiler was picking up wrong fenv.h header file.

==

numpy/core/include/fenv.c
numpy/core/include/fenv.h
numpy/core/include/numpy/fenv/fenv.c
numpy/core/include/numpy/fenv/fenv.h
numpy/core/include/numpy/ufuncobject.h
numpy/core/setup.py
==================
cfffff3;Pearu Peterson;2006-02-18 12:43:14 +0000;Fixing mingw32 building: fixes undefined referece __EH_FRAME_BEGIN__ linker failure.

==

numpy/distutils/ccompiler.py
numpy/distutils/fcompiler/gnu.py
numpy/distutils/misc_util.py
numpy/testing/numpytest.py
==================
ca84e84;Pearu Peterson;2006-02-18 06:12:19 +0000;Fixed compiler warnings.

==

numpy/core/src/arraytypes.inc.src
numpy/core/src/scalartypes.inc.src
==================
6e709fd;sasha;2006-02-18 05:06:40 +0000;fixed max and min

==

numpy/core/ma.py
numpy/core/tests/test_ma.py
==================
30d932b;Travis Oliphant;2006-02-18 01:27:37 +0000;Fix output logic for ufuncs with output arrays provided...

==

numpy/core/src/ufuncobject.c
==================
2035b20;edschofield;2006-02-17 20:05:50 +0000;Fixed orientation of matrix.sum(axis=1), added unit test

==

numpy/core/defmatrix.py
numpy/core/tests/test_defmatrix.py
==================
9c339c6;edschofield;2006-02-17 13:01:14 +0000;Small documentation fixes

==

numpy/core/src/arraymethods.c
numpy/core/src/multiarraymodule.c
==================
8d9af69;cookedm;2006-02-17 12:04:30 +0000;merge trunk (r2103:2124) to power_optimization branch.

==

numpy/core/code_generators/generate_umath.py
numpy/core/code_generators/ufunc_api_order.txt
numpy/core/include/numpy/arrayobject.h
numpy/core/ma.py
numpy/core/numeric.py
numpy/core/records.py
numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
numpy/core/src/scalartypes.inc.src
numpy/core/src/ufuncobject.c
numpy/core/src/umathmodule.c.src
numpy/core/tests/test_defmatrix.py
numpy/core/tests/test_ma.py
numpy/core/tests/test_multiarray.py
numpy/distutils/command/build_ext.py
numpy/distutils/fcompiler/gnu.py
numpy/distutils/system_info.py
numpy/lib/__init__.py
numpy/version.py
==================
38d4447;Travis Oliphant;2006-02-17 11:47:25 +0000;Add patch from BSD to get cygwin working.

==

numpy/core/include/fenv.c
numpy/core/include/fenv.h
numpy/core/include/numpy/ufuncobject.h
numpy/core/setup.py
numpy/core/src/umathmodule.c.src
==================
f5c5678;cookedm;2006-02-17 11:34:45 +0000;Remove some experimental code that I accidentally left in.

==

numpy/core/code_generators/generate_umath.py
==================
912becc;cookedm;2006-02-17 11:28:30 +0000;Redo generation of ufunc api. This uncovered some latent bugs: - conjugate, remainder, and fmod were improperly defined for objects - all the binary ufuncs that delegate to a method for objects were broken:   they weren't passed the other object. Added PyUFunc_OO_O_method to take   care of this case.

==

numpy/core/code_generators/generate_umath.py
numpy/core/code_generators/ufunc_api_order.txt
numpy/core/src/ufuncobject.c
==================
2aba0e2;Travis Oliphant;2006-02-17 06:54:56 +0000;Upgrade version number of trunk and add 'math'

==

numpy/lib/__init__.py
numpy/version.py
==================
54524a9;Travis Oliphant;2006-02-16 22:49:41 +0000;Change C-API to version 0905 to sync with 0.9.5

==

numpy/core/include/numpy/arrayobject.h
==================
74d5bbd;Travis Oliphant;2006-02-16 22:21:05 +0000;Fix problems with isfortran test.  Always test before committing ...

==

numpy/core/src/arrayobject.c
==================
2fd136e;Travis Oliphant;2006-02-16 22:07:33 +0000;Fix sub-array for fortran arrays so that new dimensions are correctly appended at the first.

==

numpy/core/src/arrayobject.c
==================
6c8412f;Travis Oliphant;2006-02-16 05:50:20 +0000;Fix-up site.cfg

==

numpy/distutils/system_info.py
==================
f638095;sasha;2006-02-16 03:17:52 +0000;support passing arrays with non-trivial mask to ufuncs

==

numpy/core/ma.py
numpy/core/tests/test_ma.py
==================
6dec388;Travis Oliphant;2006-02-16 03:15:55 +0000;Added axis= argument to cross

==

numpy/core/include/numpy/arrayobject.h
numpy/core/numeric.py
==================
34535b9;Travis Oliphant;2006-02-15 22:09:46 +0000;Try to improve site.cfg search

==

numpy/distutils/system_info.py
==================
2b36f20;Travis Oliphant;2006-02-15 19:25:32 +0000;Change the -1 entry of the fields dict to always be a tuple and enforce it on conversion from the names sequence.

==

numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
numpy/core/src/scalartypes.inc.src
==================
7f0f842;chanley;2006-02-15 16:53:32 +0000;Added a field method to recarray to allow field access via column name or index.

==

numpy/core/records.py
==================
dcdfc1c;Pearu Peterson;2006-02-15 11:16:39 +0000;Fixed importing test_unicode.

==

numpy/core/tests/test_multiarray.py
==================
b68b23e;edschofield;2006-02-15 10:09:56 +0000;Removed spurious asmatrix test

==

numpy/core/tests/test_defmatrix.py
==================
888b883;Pearu Peterson;2006-02-15 08:04:23 +0000;Fixed ticket 4

==

numpy/distutils/command/build_ext.py
==================
df636e2;Pearu Peterson;2006-02-15 07:15:15 +0000;Applied Matthew Brett patch: clean up the logic in gnu.get_flags_arch, support to more recent cpus.

==

numpy/distutils/fcompiler/gnu.py
==================
9a651c5;Travis Oliphant;2006-02-15 00:47:56 +0000;Fix fromstring docstring to point out that it can read ASCII strings with separations similar to fromfile.

==

numpy/core/src/multiarraymodule.c
==================
70a4067;cookedm;2006-02-14 23:11:03 +0000;Add a square() ufunc, and optimize power(x, <scalar exponent>) for ints and reals.

==

numpy/core/code_generators/generate_umath.py
numpy/core/src/umathmodule.c.src
==================
6b93ba8;Travis Oliphant;2006-02-14 22:54:07 +0000;Added unit-tests from Francesc Alted

==

THANKS.txt
numpy/core/include/numpy/arrayobject.h
numpy/core/tests/test_multiarray.py
numpy/core/tests/test_numerictypes.py
numpy/core/tests/test_unicode.py
==================
263df75;Travis Oliphant;2006-02-14 22:15:05 +0000;Make Getptr function and macros return void *

==

numpy/core/include/numpy/arrayobject.h
numpy/core/src/multiarraymodule.c
==================
3faeb7e;Travis Oliphant;2006-02-14 04:56:47 +0000;Fix segfault and move PyArray_Put fix from newunicode branch.

==
==================
adcc8b8;Travis Oliphant;2006-02-14 00:44:38 +0000;Fix typo.

==

numpy/core/src/arraymethods.c
==================
3eae4c1;Travis Oliphant;2006-02-14 00:43:28 +0000;Move scalar coercion rules to C-API.

==

numpy/core/code_generators/array_api_order.txt
numpy/core/include/numpy/arrayobject.h
==================
2236762;Travis Oliphant;2006-02-14 00:41:38 +0000;Fix .view to not return scalars.

==

numpy/core/src/arraymethods.c
numpy/core/src/umathmodule.c.src
==================
b374679;Travis Oliphant;2006-02-14 00:39:30 +0000;Fixed allocation problem.

==

numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/core/src/ufuncobject.c
==================
17049d1;Tim Hochberg;2006-02-13 22:39:00 +0000;This is a test to see if I (tim_hochberg) can successfully commit.

==

TEST_COMMIT
==================
9175b19;Travis Oliphant;2006-02-11 22:24:21 +0000;Add check to make sure title dictionary insert is not over-writing something already there.

==

numpy/core/src/multiarraymodule.c
==================
7d4d958;Pearu Peterson;2006-02-11 15:18:36 +0000;Fixed minrelpath tests for platforms where os.path.sep<>'/'.

==

numpy/distutils/misc_util.py
numpy/distutils/tests/test_misc_util.py
==================
8ee6df7;Travis Oliphant;2006-02-11 10:31:32 +0000;Fixed UNICODE functions to handle misaligned and/or byte-swapped arrays.

==

numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
==================
7e34c2e;Travis Oliphant;2006-02-11 01:33:27 +0000;Change PyArray_Put so that values0 is forcecast to the right type.

==

numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
==================
6fc0e44;Pearu Peterson;2006-02-10 11:21:06 +0000;Fixed numpy.put docs, added a test checking a put bug.

==

numpy/core/oldnumeric.py
numpy/core/tests/test_oldnumeric.py
==================
ad19f35;sasha;2006-02-10 07:32:58 +0000;use array style in *_fill

==

numpy/core/src/arraytypes.inc.src
==================
d99b73b;Travis Oliphant;2006-02-09 20:50:33 +0000;Change accuracy of fill and more _WIN32 fixes.

==

numpy/core/setup.py
numpy/core/src/arraytypes.inc.src
numpy/distutils/system_info.py
numpy/random/setup.py
==================
f5209cb;Robert Kern;2006-02-09 19:06:53 +0000;Back out mistaken commit

==

numpy/distutils/command/build_ext.py
numpy/distutils/fcompiler/absoft.py
numpy/distutils/fcompiler/gnu.py
==================
ddf6e61;Robert Kern;2006-02-09 19:04:18 +0000;Fixed join() -> os.path.join()

==

numpy/distutils/command/build_ext.py
numpy/distutils/fcompiler/absoft.py
numpy/distutils/fcompiler/gnu.py
numpy/distutils/system_info.py
==================
e5e72a4;Travis Oliphant;2006-02-09 17:25:54 +0000;Fixes to help compilation on Windows with MSVC

==

numpy/distutils/misc_util.py
numpy/distutils/system_info.py
numpy/random/mtrand/distributions.c
numpy/random/setup.py
==================
44f0e40;Pearu Peterson;2006-02-09 12:50:30 +0000;Fixed get_path bug fix.

==

numpy/distutils/misc_util.py
==================
2eb3a4b;Pearu Peterson;2006-02-09 12:38:13 +0000;Impl. rename() method for NumpyTest class that allows redefining mapping between module name and test_<module name>.py file name. Fixed bug with output_exception argument.

==

numpy/testing/numpytest.py
==================
622e686;Travis Oliphant;2006-02-09 08:55:38 +0000;Fixed bug in unicode change.

==

numpy/core/arrayprint.py
numpy/core/src/scalartypes.inc.src
numpy/core/src/ucsnarrow.c
==================
e4df04a;Travis Oliphant;2006-02-09 05:54:19 +0000;Speed up fill a little.

==

numpy/core/src/arraytypes.inc.src
==================
9429138;Travis Oliphant;2006-02-09 05:31:53 +0000;Merged unicode changes back into main branch.

==
==================
fc7ac38;Travis Oliphant;2006-02-09 05:26:03 +0000;Fixed reference count problems.

==

numpy/core/numeric.py
numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
numpy/core/src/ucsnarrow.c
==================
094c14d;cookedm;2006-02-09 04:56:19 +0000;Finish reStructedText'ing CAPI.txt, and correct documentation of PyArray_FromAny.

==

numpy/doc/CAPI.txt
==================
b5953fe;cookedm;2006-02-09 04:55:39 +0000;Fix get_path to return correct path when module is __main__, but doesn't have a __file__ attribute. This could happen if called as execfile("setup.py") when building eggs.

==

numpy/distutils/misc_util.py
==================
c870252;cookedm;2006-02-09 04:46:35 +0000;Clean up comments (and add a few) in arrayobject.h, for documentation purposes

==

numpy/core/include/numpy/arrayobject.h
==================
f1bffaa;Travis Oliphant;2006-02-09 04:38:58 +0000;Created NumPy unicode as 32-bit.

==

numpy/core/include/numpy/arrayobject.h
numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
numpy/core/src/scalartypes.inc.src
numpy/core/src/ucsnarrow.c
==================
520b1c9;Travis Oliphant;2006-02-09 02:08:49 +0000;Add ucsnarrow.c code.

==

numpy/core/src/ucsnarrow.c
==================
9a4d927;Travis Oliphant;2006-02-09 00:57:29 +0000;Fixing new-unicode branch.

==

numpy/core/include/numpy/arrayobject.h
numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
numpy/core/src/scalartypes.inc.src
==================
2a59095;sasha;2006-02-08 23:31:57 +0000;Augmented arange docstring

==

numpy/core/src/multiarraymodule.c
==================
34b8113;Travis Oliphant;2006-02-08 19:32:24 +0000;Fix record-array so sub-classes work.

==

numpy/core/records.py
==================
6ff711e;Pearu Peterson;2006-02-08 10:58:02 +0000;Refactored path fixing code to _fix_paths_dict. Apply path fixing to extension libraries.

==

numpy/distutils/misc_util.py
==================
7c5d117;Pearu Peterson;2006-02-08 10:55:39 +0000;Added f2py_info to retrive fortranobject.c.

==

numpy/distutils/system_info.py
==================
6852097;Travis Oliphant;2006-02-08 06:07:03 +0000;use _fpclass on MSVC for isinf and typecast to double

==

numpy/core/include/numpy/ufuncobject.h
==================
45e4e48;Travis Oliphant;2006-02-08 00:50:19 +0000;Fixes to help compilation on windows with MSVC

==

numpy/core/include/numpy/ufuncobject.h
==================
8913a2b;Pearu Peterson;2006-02-07 22:14:57 +0000;Fixed intent(c) statement bug when only spaces follow.

==

numpy/f2py/crackfortran.py
==================
d34bdb2;Travis Oliphant;2006-02-07 18:10:19 +0000;Change to undefine any long-double defines.

==

numpy/core/src/umathmodule.c.src
==================
f2daada;Travis Oliphant;2006-02-07 18:00:57 +0000;Add ifndef statements to all long-double and float functions

==

numpy/core/src/umathmodule.c.src
==================
4308866;Pearu Peterson;2006-02-07 13:59:05 +0000;Fixed get_path to return correct path when module is __main__. Fixes calling path/to/setup.py bugs.

==

numpy/distutils/misc_util.py
==================
5b8f347;Travis Oliphant;2006-02-07 07:08:26 +0000;Make unicode use w or W on output.

==

numpy/core/include/numpy/arrayobject.h
numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
numpy/core/src/ufuncobject.c
==================
79f73f3;Travis Oliphant;2006-02-07 06:34:11 +0000;Remove void * arithmetic

==

numpy/core/include/numpy/arrayobject.h
numpy/core/include/numpy/ufuncobject.h
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
numpy/core/src/ufuncobject.c
==================
810f8fa;Travis Oliphant;2006-02-06 22:15:35 +0000;Add data-type descriptor getitem ability and fix inconsistency between unicode typestr and data-type entry

==

numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
==================
1e78e19;Pearu Peterson;2006-02-06 12:10:06 +0000;Changed -M to -J for gfortran.

==

numpy/distutils/command/build_src.py
numpy/distutils/fcompiler/gnu.py
==================
0e8e7f1;Pearu Peterson;2006-02-06 12:09:15 +0000;Updated numpy.distutils tests site.

==

numpy/distutils/tests/f2py_ext/setup.py
numpy/distutils/tests/f2py_f90_ext/setup.py
numpy/distutils/tests/gen_ext/setup.py
numpy/distutils/tests/pyrex_ext/setup.py
numpy/distutils/tests/setup.py
numpy/distutils/tests/swig_ext/setup.py
numpy/distutils/tests/swig_ext/src/example.i
numpy/distutils/tests/swig_ext/tests/test_example.py
numpy/distutils/tests/swig_ext/tests/test_example2.py
==================
d8342ac;Pearu Peterson;2006-02-06 10:29:49 +0000;Added pyrex support to numpy.distutils.

==

numpy/distutils/command/build_src.py
numpy/distutils/tests/pyrex_ext/__init__.py
numpy/distutils/tests/pyrex_ext/primes.pyx
numpy/distutils/tests/pyrex_ext/setup.py
numpy/distutils/tests/pyrex_ext/tests/test_primes.py
==================
ad1f3db;sasha;2006-02-03 19:01:14 +0000;do not ignore strides in ndarray() when no buffer is provided - raise an error

==

numpy/core/src/arrayobject.c
numpy/core/tests/test_multiarray.py
==================
1efcf75;sasha;2006-02-03 18:45:22 +0000;check negative strides and disallow zero strides

==

numpy/core/include/numpy/arrayobject.h
numpy/core/src/arrayobject.c
numpy/core/tests/test_multiarray.py
==================
f767de2;sasha;2006-02-02 22:17:26 +0000;fixed a typo in an error message

==

numpy/core/src/arrayobject.c
==================
26181eb;cookedm;2006-02-02 03:59:22 +0000;Some work on CAPI.txt to be better reStructuredText (only half done)

==

numpy/doc/CAPI.txt
==================
cba01fd;cookedm;2006-02-02 03:29:38 +0000;More refactoring in numpy.distutils.misc_util

==

numpy/distutils/misc_util.py
numpy/doc/DISTUTILS.txt
==================
9e5252b;cookedm;2006-02-02 03:28:25 +0000;Remove unused imports

==

numpy/distutils/command/bdist_rpm.py
numpy/distutils/command/build_clib.py
numpy/distutils/command/build_ext.py
numpy/distutils/command/build_scripts.py
numpy/distutils/command/build_src.py
numpy/distutils/command/install.py
numpy/distutils/command/install_data.py
numpy/distutils/command/install_headers.py
numpy/distutils/command/sdist.py
==================
91473bf;cookedm;2006-02-02 01:39:43 +0000;Add a void * cast to PyArray_DATA, and add PyArray_BYTES for the uncast version (which returns a char *)

==

numpy/core/include/numpy/arrayobject.h
==================
85fae89;cookedm;2006-02-02 00:16:32 +0000;Partial fix to build failure

==

numpy/distutils/command/build_src.py
==================
01407b9;Travis Oliphant;2006-02-01 23:31:01 +0000;Precision representation improved when LONGDOUBLE == DOUBLE and bugfix in AsCtype

==

numpy/core/src/scalartypes.inc.src
==================
9a794fa;cookedm;2006-02-01 22:55:38 +0000;Replace type(a) is (something) with appropiate is_string/is_sequence tests

==

numpy/distutils/ccompiler.py
numpy/distutils/command/build_clib.py
numpy/distutils/command/build_ext.py
numpy/distutils/command/build_py.py
numpy/distutils/command/build_scripts.py
numpy/distutils/command/build_src.py
numpy/distutils/exec_command.py
numpy/distutils/fcompiler/__init__.py
numpy/distutils/log.py
==================
c0f4676;Travis Oliphant;2006-02-01 22:07:43 +0000;Fixed missing Py_INCREF and added Francesc's tests for nested record structures.

==

numpy/core/src/arraytypes.inc.src
numpy/core/tests/test_numerictypes.py
==================
ad3b00a;Travis Oliphant;2006-02-01 16:28:41 +0000;Change dtype.name getter.

==

numpy/core/src/arrayobject.c
==================
a3f10be;Travis Oliphant;2006-02-01 07:45:42 +0000;Fix typo.

==

numpy/core/src/arrayobject.c
==================
a09e748;Travis Oliphant;2006-02-01 07:44:52 +0000;INCREF Py_True and Py_False before returning them.

==

numpy/core/src/arrayobject.c
==================
8920e59;Travis Oliphant;2006-02-01 07:15:56 +0000;Fix so that equality and inequality comparisons of arrays with None still return True or False

==

numpy/core/src/arrayobject.c
==================
26188dc;cookedm;2006-01-31 23:20:47 +0000;When using setuptools, run the build_src command before egg_info (which is run by the bdist_egg command). This means that python -c 'import setuptools; execfile("setup.py")' bdist_egg works fine, without having to add build_src in there.

==

numpy/distutils/command/egg_info.py
numpy/distutils/core.py
==================
042a315;cookedm;2006-01-31 22:50:19 +0000;Add /opt/local for directories searched for includes and libraries. This is used by darwinports on OS X.

==

numpy/distutils/system_info.py
==================
f59515e;cookedm;2006-01-31 22:49:15 +0000;Misc cleanups + replace `a` with %r or repr(a) Also replace some type checks with misc_util.is_sequence or misc_util.is_string or appropiate isinstance().

==

numpy/distutils/ccompiler.py
numpy/distutils/command/build_src.py
numpy/distutils/core.py
numpy/distutils/exec_command.py
numpy/distutils/misc_util.py
numpy/distutils/system_info.py
==================
c1b9a6e;Travis Oliphant;2006-01-31 21:13:58 +0000;Change name of scalars from <x>_arrtype to <x>scalar

==

numpy/core/numeric.py
numpy/core/numerictypes.py
numpy/core/src/scalartypes.inc.src
==================
41496b7;Travis Oliphant;2006-01-31 21:02:19 +0000;Change arrtype --> sctype so that dtype is given pre-eminance in determining array type.

==

numpy/core/numerictypes.py
numpy/core/oldnumeric.py
numpy/lib/getlimits.py
numpy/lib/type_check.py
numpy/lib/utils.py
==================
8a52fe2;Travis Oliphant;2006-01-31 19:36:38 +0000;Remove getitem and setitem from record class -- void type does the right thing

==

numpy/core/records.py
==================
e38f25a;Travis Oliphant;2006-01-31 19:29:21 +0000;Fix up record class to allow getting items from list.

==

numpy/core/records.py
==================
b88a3fc;Pearu Peterson;2006-01-31 15:13:27 +0000;Fixing inplace support for data_files and py_modules.

==

numpy/distutils/command/build_src.py
==================
9e85009;Travis Oliphant;2006-01-31 14:52:25 +0000;Fix long-standing dot bug.

==

numpy/core/src/multiarraymodule.c
==================
389d6d2;Pearu Peterson;2006-01-31 11:00:23 +0000;Added warn,info methods to NumpyTestCase.

==

numpy/testing/numpytest.py
==================
8343ed3;Pearu Peterson;2006-01-31 10:53:46 +0000;Fixed a misplaced test messages by flushing.

==

numpy/testing/numpytest.py
==================
a6eeae5;Pearu Peterson;2006-01-31 10:46:21 +0000;Renamed ScipyTest to NumpyTest, flushing printouts, fixed a bug of including too many tests in situations where we have xxx/__init__.py, xxx/xxx.py, xxx/tests/test_xxx.py.

==

numpy/testing/numpytest.py
==================
daf3e9f;Pearu Peterson;2006-01-31 10:21:40 +0000;Fixed pkgload: synced behaviours of postpone and postpone_import flags.

==

numpy/_import_tools.py
==================
71f74ba;Pearu Peterson;2006-01-31 09:31:22 +0000;Improved warn messages.

==

numpy/distutils/misc_util.py
==================
33279f1;Pearu Peterson;2006-01-31 09:22:35 +0000;Added options to Configuration.

==

numpy/distutils/misc_util.py
setup.py
==================
39ba8fc;Pearu Peterson;2006-01-30 21:11:22 +0000;Handle setup.py help and display requests without noise.

==

numpy/distutils/misc_util.py
setup.py
==================
ca90e3e;Travis Oliphant;2006-01-30 09:20:46 +0000;Fix-up record arrays that were not of dtype.type record.  Don't allow arbitrary objects with dtype attributes as data-type indicators.

==

numpy/core/records.py
numpy/core/src/multiarraymodule.c
==================
624787a;Travis Oliphant;2006-01-30 08:48:14 +0000;Fixed coercion rules so that integer scalar is not seen as a negative integer scalar unless it is actually negative.

==

numpy/core/src/ufuncobject.c
==================
f097ed4;Travis Oliphant;2006-01-30 07:49:07 +0000;Fix bugs relating to adding hasobject.  Add scalar-loops for some operations to see if they are faster on some platforms.

==

numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/core/src/umathmodule.c.src
==================
0245dde;Travis Oliphant;2006-01-29 10:38:34 +0000;Fixed so that long integers convert to int64 arrays if possible.

==

numpy/core/src/arrayobject.c
==================
2438f98;Travis Oliphant;2006-01-29 08:40:39 +0000;Convert to arrays in piecewise.  Improve error-handling of object-array conversions.

==

numpy/core/src/arraytypes.inc.src
numpy/lib/function_base.py
==================
c0d68f4;Travis Oliphant;2006-01-29 03:50:48 +0000;Fix the dot(shape=(1,), shape=(1,N)) case too

==

numpy/core/blasdot/_dotblas.c
numpy/core/tests/test_numeric.py
==================
bbca1e3;Travis Oliphant;2006-01-29 03:32:14 +0000;Fix inconsistency with un-optimized dot function

==

numpy/core/blasdot/_dotblas.c
==================
5186558;Travis Oliphant;2006-01-29 03:20:22 +0000;Fix column-vector x (1,) in dotblas.

==

numpy/core/blasdot/_dotblas.c
==================
83d691d;Travis Oliphant;2006-01-29 02:58:55 +0000;Add test for column-vector bug in dotblas.

==

numpy/core/tests/test_numeric.py
numpy/lib/function_base.py
==================
e97d2da;Pearu Peterson;2006-01-28 11:33:35 +0000;Fixed add_data_files for patterns. paths takes include_non_existing kw argument.

==

numpy/distutils/misc_util.py
==================
4c2ce0a;Pearu Peterson;2006-01-28 09:52:05 +0000;Introduced njoin and minrelpath to handle relative paths and containing slashes in an OS independent way. Fixed a __svn_version__ installation bug.

==

numpy/distutils/misc_util.py
numpy/distutils/tests/test_misc_util.py
==================
ba6c2ba;Pearu Peterson;2006-01-28 09:25:27 +0000;Fix bdist_rpm for path names containing spaces.

==

numpy/distutils/command/install.py
==================
b8e4a5f;cookedm;2006-01-27 22:04:23 +0000;Store the relative path inside the installed package as part of the Configuration instance (instead of recalculating each time)

==

numpy/distutils/misc_util.py
==================
ee0533b;cookedm;2006-01-27 22:03:10 +0000;Add site.cfg to datafiles installed for numpy.distutils.

==

numpy/distutils/setup.py
==================
ebb9354;cookedm;2006-01-27 20:57:25 +0000;Cleanups of numpy.distutils.misc_util Mostly covers replacing typechecks using type() with two routines: is_sequence and is_string.

==

numpy/distutils/misc_util.py
==================
c6c45c0;Travis Oliphant;2006-01-27 19:52:01 +0000;More missing names from Numeric.

==

numpy/core/oldnumeric.py
==================
c3761a4;Travis Oliphant;2006-01-27 19:28:52 +0000;Add UnsignedInt32

==

numpy/core/oldnumeric.py
==================
f94d937;Pearu Peterson;2006-01-27 19:10:43 +0000;Resolve paths in add_library include_dirs..

==

numpy/distutils/misc_util.py
==================
6bf1820;Pearu Peterson;2006-01-27 12:21:07 +0000;Added data_files generator support - removed a piece of core.setup function.

==

numpy/distutils/command/build_src.py
numpy/distutils/core.py
numpy/distutils/misc_util.py
==================
b7cc1f6;Travis Oliphant;2006-01-27 01:00:48 +0000;Add ndindex iterator to complement ndenumerate iterator.

==

numpy/lib/index_tricks.py
==================
606c857;Pearu Peterson;2006-01-26 22:17:44 +0000;Prefer xxx/setup.py file over xxx/setup_xxx.py when both exist.

==

numpy/distutils/misc_util.py
==================
e59bb82;Pearu Peterson;2006-01-26 22:05:44 +0000;Added simple pattern support for Configuration.add_subpackage method.

==

numpy/distutils/misc_util.py
==================
f6d28d0;Travis Oliphant;2006-01-26 21:42:01 +0000;Simplify the ndenumerate class by exposing coords and index from flat iterator.  Simple cosmetic changes to ffts.

==

numpy/core/src/arrayobject.c
numpy/dft/fftpack.py
numpy/lib/index_tricks.py
==================
5da0b20;sasha;2006-01-26 21:09:46 +0000;added simple tests for reduce ops

==

numpy/core/tests/test_ma.py
==================
434501d;sasha;2006-01-26 20:43:33 +0000;fixed alltrue and sometrue

==

numpy/core/ma.py
==================
656b8ba;Travis Oliphant;2006-01-25 23:58:35 +0000;Simplify hasobject checks by setting hasobject to 1 for OBJECT_Descr data-type descriptor.

==

numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
==================
2a71223;Travis Oliphant;2006-01-25 23:01:35 +0000;Raise error when using same field names and disallow object fields for now.

==

numpy/core/blasdot/_dotblas.c
numpy/core/include/numpy/arrayobject.h
numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
numpy/dft/fftpack_litemodule.c
==================
9dc43c4;Pearu Peterson;2006-01-25 20:02:13 +0000;Fixed f2py bug in calculating dims vector when expected rank equals to array rank.

==

numpy/f2py/src/fortranobject.c
==================
f1421a9;Pearu Peterson;2006-01-25 20:00:01 +0000;Updated f2py tests to recent numpy CAPI.

==

numpy/f2py/tests/array_from_pyobj/tests/test_array_from_pyobj.py
numpy/f2py/tests/array_from_pyobj/wrapmodule.c
==================
83051c1;Travis Oliphant;2006-01-25 09:56:44 +0000;Check for duplicate field names. Change .arrdescr --> .descr  and .subdescr --> .subdtype  in the dtype object.

==

numpy/core/_internal.py
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
==================
14cc42d;Travis Oliphant;2006-01-25 08:19:26 +0000;Fix so that string and unicode types don't print NULL bytes

==

numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/scalartypes.inc.src
==================
6a355bb;Pearu Peterson;2006-01-24 20:10:32 +0000;Added missing return to f2py generated ext/module init function.

==

numpy/f2py/rules.py
==================
4b644a7;Travis Oliphant;2006-01-24 19:33:44 +0000;Remove bad 'fix' for f2py

==

numpy/f2py/src/fortranobject.c
==================
d1fd99d;Travis Oliphant;2006-01-24 19:15:35 +0000;Undo special checks for dimension=1 in contiguous and Fortran-ordrer checking routine.

==

numpy/core/src/arrayobject.c
==================
a47cfdc;Pearu Peterson;2006-01-24 19:02:24 +0000;Fixed setup.py sdist.

==

numpy/distutils/command/build_py.py
==================
16c544e;Pearu Peterson;2006-01-24 18:29:48 +0000;__config__.py files are generated through py_modules list. Added get_info method to Configuration.

==

numpy/distutils/command/build_py.py
numpy/distutils/command/build_src.py
numpy/distutils/misc_util.py
numpy/doc/DISTUTILS.txt
==================
b1b17f1;Travis Oliphant;2006-01-24 17:58:40 +0000;Fix umath module load mistake.

==

numpy/core/src/umathmodule.c.src
==================
0917323;Travis Oliphant;2006-01-24 17:57:17 +0000;Don't raise fatal errors on load.

==

numpy/core/src/multiarraymodule.c
numpy/core/src/umathmodule.c.src
numpy/lib/src/_compiled_base.c
numpy/linalg/lapack_litemodule.c
==================
5beecfe;Travis Oliphant;2006-01-24 17:33:33 +0000;Add ndmin to array constructors.

==

numpy/core/numeric.py
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/lib/shape_base.py
==================
2718405;Pearu Peterson;2006-01-24 17:19:57 +0000;Ignore implied-do list in data statement.

==

numpy/f2py/crackfortran.py
==================
4c7ad57;Pearu Peterson;2006-01-24 11:18:11 +0000;Instead of Fatal error in f2py ext.modules let Python handle raising an exception.

==

numpy/f2py/rules.py
==================
1b3333b;Travis Oliphant;2006-01-24 05:43:31 +0000;Fixed C-API to not use special types

==

numpy/core/src/multiarraymodule.c
==================
3c11cd7;Pearu Peterson;2006-01-23 19:05:40 +0000;Fixed get_info for Numeric. Doc fixes.

==

numpy/distutils/system_info.py
==================
47306a9;Travis Oliphant;2006-01-23 17:56:56 +0000;Switched order of NDARRAY_VERSION C-API check.

==

numpy/core/code_generators/generate_array_api.py
==================
4eeb659;Travis Oliphant;2006-01-22 07:40:50 +0000;Fix 2.3 compatibility.

==

numpy/core/setup.py
numpy/core/src/arraytypes.inc.src
==================
d297382;Travis Oliphant;2006-01-22 05:52:32 +0000;Bumped up version after release.

==

numpy/version.py
==================
f32a4e4;Travis Oliphant;2006-01-22 05:38:18 +0000;Comment change in fortranobject.c better.

==

numpy/f2py/src/fortranobject.c
==================
34b8ce6;Travis Oliphant;2006-01-22 05:35:21 +0000;Added LICENSE.txt to distribution. Fixed f2py check_and_fix_dimensions to not reverse dimensions.

==

MANIFEST.in
numpy/f2py/src/fortranobject.c
==================
beb7e7c;Travis Oliphant;2006-01-21 20:15:14 +0000;Added tests for fromstring.

==

numpy/core/tests/test_multiarray.py
==================
f18a0fa;Travis Oliphant;2006-01-21 19:39:54 +0000;Fix uninitialized variable.

==

numpy/core/src/multiarraymodule.c
==================
4072234;Travis Oliphant;2006-01-21 19:18:18 +0000;Fix a few more improper uses of .dtype attribute.

==

numpy/core/defchararray.py
numpy/linalg/linalg.py
==================
1b409ce;Travis Oliphant;2006-01-21 11:29:10 +0000;Update C-API version.

==

numpy/core/include/numpy/arrayobject.h
==================
e5a5e24;Travis Oliphant;2006-01-21 11:28:34 +0000;Added ability to read ascii strings in fromstring.

==

numpy/core/include/numpy/arrayobject.h
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
==================
d51b059;Travis Oliphant;2006-01-21 00:44:05 +0000;Fix arange to accept None and treat it as if it hadn't been passed in.

==

numpy/core/src/multiarraymodule.c
==================
67e7565;Travis Oliphant;2006-01-20 23:50:38 +0000;Add a BSD-type LICENSE.txt file

==

LICENSE.txt
==================
6b724c9;Travis Oliphant;2006-01-20 23:25:44 +0000;A few safety checks for platforms where SIZEOF_LONG < SIZEOF_INTP -- windows 64-bit I think

==

numpy/core/src/arrayobject.c
==================
a0a42fc;Travis Oliphant;2006-01-20 23:15:58 +0000;Fix conversions to NaN for other floating types

==

numpy/core/src/arraytypes.inc.src
==================
3249d3b;Travis Oliphant;2006-01-20 23:05:07 +0000;Fix so that None converts to Nan in array conversion.

==

numpy/core/src/arraytypes.inc.src
==================
f3a4e8f;Travis Oliphant;2006-01-20 22:28:02 +0000;Fix str representation for rank-0 arrays

==

numpy/core/numeric.py
==================
97f03d6;Travis Oliphant;2006-01-20 22:23:18 +0000;Fix segfault when using subdescr.

==

numpy/core/src/arraytypes.inc.src
==================
e45d0eb;Travis Oliphant;2006-01-20 21:59:32 +0000;Change License text to NumPy License (permission granted by Pearu)

==

numpy/f2py/auxfuncs.py
numpy/f2py/capi_maps.py
numpy/f2py/cb_rules.py
numpy/f2py/cfuncs.py
numpy/f2py/common_rules.py
numpy/f2py/crackfortran.py
numpy/f2py/doc/collectinput.py
numpy/f2py/doc/index.html
numpy/f2py/docs/README.txt
numpy/f2py/docs/THANKS.txt
numpy/f2py/f2py.1
numpy/f2py/f2py2e.py
numpy/f2py/f90mod_rules.py
numpy/f2py/func2subr.py
numpy/f2py/rules.py
numpy/f2py/setup.py
numpy/f2py/use_rules.py
==================
e966fd1;Travis Oliphant;2006-01-20 10:43:42 +0000;Remove unnecessary check.

==

numpy/core/src/arrayobject.c
==================
9ccdfb6;Travis Oliphant;2006-01-20 10:20:33 +0000;Change order of descriptor functions to match required vs. non-required.

==

numpy/core/code_generators/generate_array_api.py
numpy/core/include/numpy/arrayobject.h
numpy/core/src/arraytypes.inc.src
==================
e8d6184;Travis Oliphant;2006-01-20 08:47:02 +0000;Fixed error in no-axis methods for matrices.

==

numpy/core/src/arrayobject.c
numpy/core/tests/test_defmatrix.py
==================
502af60;Travis Oliphant;2006-01-20 03:31:30 +0000;Fix so that arrays never become scalars using .copy() command

==

numpy/core/src/arraymethods.c
==================
45475dd;sasha;2006-01-20 03:13:03 +0000;take advantage of nomask=False_

==

numpy/core/ma.py
==================
b228886;sasha;2006-01-20 02:59:30 +0000;changed nomask from None to False_

==

numpy/core/ma.py
==================
c8ca3be;Travis Oliphant;2006-01-20 00:57:59 +0000;Fix inappropriate DECREF.

==

numpy/core/include/numpy/arrayobject.h
numpy/core/src/multiarraymodule.c
==================
01597c2;sasha;2006-01-20 00:21:47 +0000;Made ma immune to a bug in choose

==

numpy/core/ma.py
numpy/core/tests/test_umath.py
==================
39edf80;sasha;2006-01-20 00:19:09 +0000;Defined False_ and True_

==

numpy/core/numeric.py
numpy/core/tests/test_numeric.py
==================
7cff614;Robert Kern;2006-01-19 22:21:20 +0000;numpy no longer needs to be a namespace package.

==

numpy/__init__.py
==================
8e801af;Travis Oliphant;2006-01-19 22:06:01 +0000;Fix reference counting problems..

==

numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/core/tests/test_numeric.py
==================
481610f;Travis Oliphant;2006-01-19 21:43:19 +0000;Fix bad strides in complex scalar-matrix multiply.

==

numpy/core/blasdot/_dotblas.c
==================
490cbac;Travis Oliphant;2006-01-19 21:27:58 +0000;More optimizations to indexing...

==

numpy/core/src/arrayobject.c
==================
5c62c0e;sasha;2006-01-19 20:54:34 +0000;faster 'nonzero', &, | and ^ for bool_

==

numpy/core/src/scalartypes.inc.src
numpy/core/tests/test_numeric.py
==================
70e790a;Travis Oliphant;2006-01-19 20:49:00 +0000;Speed ups to indexing..

==

numpy/core/include/numpy/arrayobject.h
numpy/core/src/arrayobject.c
==================
8755f53;Pearu Peterson;2006-01-19 08:49:39 +0000;Using /etc/ld.so.conf and LD_LIBRARY_PATH to detect MKLROOT. When MKLROOT is not detected, using MKL is disabled.

==

numpy/distutils/system_info.py
==================
ee811d8;Travis Oliphant;2006-01-19 05:03:46 +0000;Added NDARRAY_VERSION check on import_array

==

numpy/core/code_generators/generate_array_api.py
numpy/core/code_generators/multiarray_api_order.txt
numpy/core/include/numpy/arrayobject.h
numpy/core/src/multiarraymodule.c
numpy/core/src/scalartypes.inc.src
==================
6a30aaf;Travis Oliphant;2006-01-19 03:01:27 +0000;Add restore functions to numpy.dual

==

numpy/dual.py
==================
107c7d3;Travis Oliphant;2006-01-19 02:44:55 +0000;Use a register_func system for altering functions in numpy.dual

==

numpy/dual.py
==================
f7d8a57;Travis Oliphant;2006-01-19 01:28:20 +0000;Cleaned up some uses of CheckFromAny

==

numpy/core/include/numpy/arrayobject.h
==================
044fa49;Travis Oliphant;2006-01-19 01:10:26 +0000;Fixed up PyArray_FromAny and friends for API --- recompile extensions...

==

numpy/core/blasdot/_dotblas.c
numpy/core/code_generators/array_api_order.txt
numpy/core/include/numpy/arrayobject.h
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/core/src/scalartypes.inc.src
numpy/core/src/ufuncobject.c
numpy/f2py/src/fortranobject.c
numpy/lib/src/_compiled_base.c
==================
ac121be;sasha;2006-01-18 23:25:31 +0000;more tests for {{{__array__}}} calls

==

numpy/core/tests/test_umath.py
==================
3611572;Travis Oliphant;2006-01-18 22:54:24 +0000;More optimization in iterator for 1d.

==

numpy/core/include/numpy/arrayobject.h
==================
f5fef90;Travis Oliphant;2006-01-18 22:51:55 +0000;Re-order optimization in iterator for 1d.

==

numpy/core/include/numpy/arrayobject.h
==================
39d51cd;Travis Oliphant;2006-01-18 22:50:03 +0000;Add optimization in iterator for 1d.

==

numpy/core/include/numpy/arrayobject.h
==================
a58b3f7;Travis Oliphant;2006-01-18 22:37:36 +0000;Fix problems with non-square matrices in _dotblas.c

==

numpy/core/blasdot/_dotblas.c
numpy/core/src/scalartypes.inc.src
numpy/core/tests/test_numeric.py
==================
ecd4f32;cookedm;2006-01-18 22:05:45 +0000;Revert passing -m32 to g77

==

numpy/distutils/fcompiler/gnu.py
==================
b387165;sasha;2006-01-18 22:05:11 +0000;static allocation of boolean values

==

numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/core/src/scalartypes.inc.src
==================
968b923;sasha;2006-01-18 19:05:28 +0000;intern bool_arrtype values

==

numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/core/src/scalartypes.inc.src
numpy/core/tests/test_multiarray.py
==================
5aab814;Travis Oliphant;2006-01-18 18:57:53 +0000;Fixed char.array function

==

numpy/core/defchararray.py
==================
59bd342;sasha;2006-01-18 18:55:07 +0000;added passing optional context to the __array__ method

==

numpy/core/src/ufuncobject.c
numpy/core/tests/test_umath.py
numpy/distutils/fcompiler/gnu.py
==================
c701bc5;Travis Oliphant;2006-01-18 18:12:38 +0000;Fixed up inappropriate copy...

==

numpy/core/blasdot/_dotblas.c
numpy/core/src/arrayobject.c
numpy/core/tests/test_numeric.py
==================
d1e5d1d;cookedm;2006-01-18 08:42:27 +0000;Use pickle.loads/dumps for test_ma to avoid littering the filesystem with test9.pik files.

==

numpy/core/tests/test_ma.py
==================
0e1c718;Travis Oliphant;2006-01-17 22:23:57 +0000;Reset MAX_DIMS to 32 and add tests for dot.

==

DEV_README.txt
numpy/core/include/numpy/arrayobject.h
numpy/core/src/multiarraymodule.c
numpy/core/tests/test_numeric.py
==================
e5bd12f;sasha;2006-01-17 21:48:14 +0000;use nomask instead of None

==

numpy/core/tests/test_ma.py
==================
8706ede;sasha;2006-01-17 17:59:23 +0000;fixed filled(masked)

==

numpy/core/ma.py
numpy/core/tests/test_ma.py
==================
76761ff;Travis Oliphant;2006-01-17 12:01:48 +0000;Fixed dotblas for zero-size arrays.

==

numpy/core/blasdot/_dotblas.c
numpy/core/defchararray.py
numpy/core/numerictypes.py
numpy/core/records.py
numpy/core/src/multiarraymodule.c
numpy/distutils/misc_util.py
numpy/testing/numpytest.py
==================
e92c9c4;Travis Oliphant;2006-01-17 02:59:51 +0000;Add Paulo's improvements to _dotblas.c and don't always require contiguous.

==

numpy/core/blasdot/_dotblas.c
numpy/core/defmatrix.py
numpy/core/src/multiarraymodule.c
==================
4593515;Travis Oliphant;2006-01-17 00:07:21 +0000;Fixed up usage of dtype to be consistent with new dtype objects.

==

numpy/core/defchararray.py
numpy/core/ma.py
numpy/core/numerictypes.py
numpy/core/oldnumeric.py
numpy/core/src/arrayobject.c
numpy/core/src/umathmodule.c.src
numpy/lib/getlimits.py
numpy/lib/type_check.py
numpy/lib/utils.py
==================
a397b55;Travis Oliphant;2006-01-16 22:29:15 +0000;Load numpy.linalg on import

==

numpy/__init__.py
==================
fd4b2e8;Travis Oliphant;2006-01-16 22:10:42 +0000;Fix equality comparison for object arrays.

==

numpy/core/src/arrayobject.c
==================
74ce986;cookedm;2006-01-16 21:57:27 +0000;Add docstrings to index_tricks functions (r_, c_, ndenumerate, index_exp)

==

numpy/lib/index_tricks.py
==================
1f45e43;Travis Oliphant;2006-01-16 21:57:01 +0000;Fixed uninitialized memory in real_fft.

==

numpy/dft/fftpack_litemodule.c
==================
edc8a85;Travis Oliphant;2006-01-16 21:32:58 +0000;Fix shape() function.  Fix so that longdouble typecode never overwrites double if longdouble is the same as double.  Fix missing math module import.

==

numpy/core/numeric.py
numpy/core/numerictypes.py
numpy/core/oldnumeric.py
==================
8b271e0;cookedm;2006-01-16 10:44:38 +0000;Move handling of array priorities in dot-related functions to a separate function. Also fixes 'unused variable' warnings which were bugs.

==

numpy/core/blasdot/_dotblas.c
numpy/core/src/multiarraymodule.c
==================
f22f844;sasha;2006-01-15 22:47:52 +0000;do not mask errors in {{{__array_wrap__}}}

==

numpy/core/src/ufuncobject.c
numpy/core/tests/test_umath.py
==================
1a89728;Travis Oliphant;2006-01-15 10:25:13 +0000;Remove the automatic squeezing from _dotblas so that it is compatible with Numeric and non BLAS optimized matrixmultiply.

==

numpy/core/blasdot/_dotblas.c
==================
d868ba2;Travis Oliphant;2006-01-15 08:09:50 +0000;Made dtypedescr name attribute always report bit-width; fixed memmap slicing; Improved documentation of convertfile and convertall in convertcode.py

==

numpy/core/memmap.py
numpy/core/numeric.py
numpy/core/src/arrayobject.c
numpy/lib/convertcode.py
==================
02f61f0;Travis Oliphant;2006-01-15 06:16:19 +0000;Fix unnecessary priority checks in multiarray and use C-API call in ufuncobject

==

numpy/core/src/multiarraymodule.c
numpy/core/src/ufuncobject.c
==================
9e0de87;Travis Oliphant;2006-01-15 06:00:16 +0000;Minor renaming.

==

numpy/core/defmatrix.py
==================
03c8042;Travis Oliphant;2006-01-15 05:52:41 +0000;Speed up matrix-vector calculations using matrix class.

==

numpy/core/blasdot/_dotblas.c
numpy/core/defmatrix.py
==================
ded5913;sasha;2006-01-15 05:01:21 +0000;Do not check {{{__array_priority__}}} if only one instance with {{{__array_wrap__}}} is in the argument list.
Added more tests for  {{{__array_wrap__}}} selection.

==

numpy/core/src/ufuncobject.c
numpy/core/tests/test_umath.py
==================
ee91d88;Travis Oliphant;2006-01-15 03:28:40 +0000;Fix bad use of .dtype

==

numpy/lib/polynomial.py
==================
0283b6f;Travis Oliphant;2006-01-15 03:10:36 +0000;Moved .dtypedescr to .dtype; .dtype->.dtype.type; .dtypestr ->.dtype.str; .dtypechar -> .dtype.char

==

COMPATIBILITY
numpy/core/_internal.py
numpy/core/arrayprint.py
numpy/core/blasdot/_dotblas.c
numpy/core/defchararray.py
numpy/core/defmatrix.py
numpy/core/ma.py
numpy/core/memmap.py
numpy/core/numeric.py
numpy/core/numerictypes.py
numpy/core/oldnumeric.py
numpy/core/records.py
numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/core/src/scalartypes.inc.src
numpy/core/src/ufuncobject.c
numpy/core/tests/test_defmatrix.py
numpy/core/tests/test_ma.py
numpy/core/tests/test_multiarray.py
numpy/dft/fftpack.py
numpy/f2py/tests/array_from_pyobj/tests/test_array_from_pyobj.py
numpy/lib/convertcode.py
numpy/lib/function_base.py
numpy/lib/index_tricks.py
numpy/lib/shape_base.py
numpy/lib/tests/test_polynomial.py
numpy/lib/twodim_base.py
numpy/lib/type_check.py
numpy/linalg/linalg.py
numpy/random/mtrand/mtrand.c
numpy/random/mtrand/numpy.pxi
numpy/version.py
==================
d04bb02;sasha;2006-01-15 02:57:33 +0000;handle odd scipy installations

==

numpy/dual.py
==================
42b3ee7;sasha;2006-01-15 02:46:52 +0000;fixed handling of __array_priority__

==

numpy/core/src/ufuncobject.c
numpy/core/tests/test_umath.py
==================
90b8e1d;Pearu Peterson;2006-01-14 09:19:14 +0000;Added missing info.py files

==

numpy/distutils/info.py
==================
aaf9d39;Pearu Peterson;2006-01-14 09:18:45 +0000;Making f2py and distutils scipy-style packages. Using pkgload to load numpy packages.

==

numpy/f2py/info.py
==================
2cdbd57;Pearu Peterson;2006-01-14 09:16:45 +0000;Making f2py and distutils scipy-style packages. Using pkgload to load numpy packages.

==

numpy/__init__.py
numpy/_import_tools.py
numpy/distutils/__init__.py
numpy/distutils/fcompiler/ibm.py
numpy/f2py/__init__.py
numpy/lib/info.py
==================
5410f34;sasha;2006-01-14 07:21:32 +0000;fixed domains for arccosh and arctanh
TODO: replace literal constants with appropriate machine
specific values in arctanh and tan domains

==

numpy/core/ma.py
numpy/core/tests/test_ma.py
==================
dde45b1;sasha;2006-01-14 06:36:09 +0000;use extended {{{__array_wrap__}}} in ma

==

numpy/core/ma.py
numpy/core/tests/test_ma.py
==================
ceda8cd;sasha;2006-01-14 04:35:19 +0000;extended __array_wrap__ see wiki:MaskedArray

==

numpy/core/src/ufuncobject.c
numpy/core/tests/test_umath.py
==================
6de260c;Travis Oliphant;2006-01-14 04:14:57 +0000;Finish the fix...

==

numpy/core/src/umathmodule.c.src
==================
438efde;sasha;2006-01-14 04:05:24 +0000;fixed printing of masked zero-rank arrays

==

numpy/core/ma.py
numpy/core/tests/test_ma.py
==================
c5d8aaf;Travis Oliphant;2006-01-14 03:16:53 +0000;Remove expm1 and log1p from C99 defs.

==

numpy/core/src/umathmodule.c.src
==================
f64c19f;sasha;2006-01-13 03:37:27 +0000;fixed core dump for invalid __array__

==

numpy/core/src/arrayobject.c
numpy/core/tests/test_multiarray.py
==================
ed647a0;Travis Oliphant;2006-01-13 02:33:34 +0000;fix up the expm1 and log1p additions.

==

numpy/core/src/umathmodule.c.src
==================
968dd66;Travis Oliphant;2006-01-13 02:29:56 +0000;fix up the expm1 and log1p additions.

==

numpy/core/src/umathmodule.c.src
==================
3883205;Travis Oliphant;2006-01-12 22:54:22 +0000;Add generate_div_by_zero

==

numpy/core/include/numpy/ufuncobject.h
==================
8aee1fe;Travis Oliphant;2006-01-12 22:46:53 +0000;Fix AIX portion of code

==

numpy/core/include/numpy/ufuncobject.h
==================
42779fe;sasha;2006-01-12 22:27:17 +0000;introduced nomask = None constant

==

numpy/core/ma.py
==================
0a407f9;sasha;2006-01-12 21:56:07 +0000;made 'masked' rank-0

==

numpy/core/ma.py
numpy/core/tests/test_ma.py
==================
071f111;Travis Oliphant;2006-01-12 21:23:07 +0000;Make (type, 1) case equivalent to type

==

numpy/core/src/multiarraymodule.c
==================
ece9e80;Travis Oliphant;2006-01-12 14:30:37 +0000;Fix segfault in constructor when dtype not given.

==

numpy/core/src/arrayobject.c
==================
470bc4b;cookedm;2006-01-12 03:08:22 +0000;Fix the complex version of expm1

==

numpy/core/src/umathmodule.c.src
==================
a41d567;cookedm;2006-01-12 02:45:53 +0000;Use better functions for inverse hyperbolic functions, and expose log1p and expm1. The functions are transformations mainly due to Kahan.

==

numpy/core/code_generators/generate_umath.py
numpy/core/setup.py
numpy/core/src/umathmodule.c.src
numpy/core/tests/test_umath.py
==================
f1a1c7c;sasha;2006-01-11 23:15:13 +0000;started filling in missing ma.array methods

==

numpy/core/ma.py
numpy/core/tests/test_ma.py
==================
74cc5f8;Travis Oliphant;2006-01-11 18:36:18 +0000;Fix up use of aligned keyword.

==

numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
==================
f547239;Travis Oliphant;2006-01-11 09:53:43 +0000;Fixed-up tests we are not returning object array scalars...

==

numpy/core/tests/test_ma.py
numpy/core/tests/test_multiarray.py
==================
fec83ff;Travis Oliphant;2006-01-11 09:35:51 +0000;Don't return Object Array Scalars.

==

numpy/core/src/arrayobject.c
==================
7433c36;Travis Oliphant;2006-01-11 09:34:13 +0000;Fix arraysetops.

==

numpy/lib/arraysetops.py
==================
a13aad3;Travis Oliphant;2006-01-11 08:38:19 +0000;Add support for generators in NumPy sum

==

numpy/core/oldnumeric.py
==================
9a1d729;Travis Oliphant;2006-01-11 08:27:34 +0000;Rename arguments in arraysetops to follow convention.  Add bsum for builtin sum.

==

numpy/core/oldnumeric.py
numpy/lib/arraysetops.py
==================
efa20eb;Travis Oliphant;2006-01-11 07:27:46 +0000;Don't wrap ndarray's in object array wrappers.

==

numpy/core/src/arrayobject.c
==================
2ea2a87;Travis Oliphant;2006-01-11 07:18:26 +0000;Change the order of attribute lookup for object array types.

==

numpy/core/src/scalartypes.inc.src
==================
45c7e2b;Travis Oliphant;2006-01-11 07:12:58 +0000;Improved object array-scalar types

==

numpy/core/src/arrayobject.c
numpy/core/src/scalartypes.inc.src
==================
ba52e16;Travis Oliphant;2006-01-11 06:08:56 +0000;allow assignment with multiple same indices as susbscripting.  Limit to 1 ellipsis object for 0d array subscripting.

==

THANKS.txt
numpy/core/src/arrayobject.c
==================
04d7338;sasha;2006-01-11 04:24:47 +0000;Spell newaxis in lower case in error messages and comments

==

numpy/core/src/arrayobject.c
==================
b32744e;sasha;2006-01-11 03:25:42 +0000;implemented newaxis support for zero rank arrays

==

numpy/core/src/arrayobject.c
numpy/core/tests/test_multiarray.py
==================
8b2fae0;Travis Oliphant;2006-01-11 02:29:50 +0000;Added check for floating point support.

==

numpy/core/tests/test_umath.py
==================
cdcb606;Travis Oliphant;2006-01-11 02:26:27 +0000;Added openBSD and FreeBSD checks.

==

numpy/core/include/numpy/ufuncobject.h
==================
8f1c332;Travis Oliphant;2006-01-11 00:58:55 +0000;Fixed up bad-checkin of ufunc code.

==

numpy/core/include/numpy/ufuncobject.h
numpy/core/src/arrayobject.c
numpy/core/src/umathmodule.c.src
==================
2a53be6;Travis Oliphant;2006-01-11 00:52:55 +0000;Added floating point support and changed default number of MAX_DIMS to 20

==

numpy/core/include/numpy/arrayobject.h
numpy/core/include/numpy/ufuncobject.h
numpy/core/src/arraytypes.inc.src
numpy/core/src/umathmodule.c.src
==================
743d922;sasha;2006-01-11 00:17:47 +0000;implemented a[...] = v and a[()] = v for zero rank a

==

numpy/core/src/arrayobject.c
numpy/core/tests/test_multiarray.py
==================
52c1871;Travis Oliphant;2006-01-10 23:46:52 +0000;Fixed up segfault and error in r_

==

numpy/core/src/multiarraymodule.c
numpy/lib/index_tricks.py
==================
9024ff0;sasha;2006-01-10 16:07:32 +0000;allow x[...] and x[()] for zero rank ndarray x

==

numpy/core/src/arrayobject.c
numpy/core/tests/test_multiarray.py
==================
e2f62fa;Travis Oliphant;2006-01-09 23:23:57 +0000;Fixed missing keyword.

==

numpy/core/src/multiarraymodule.c
==================
f2ab332;Pearu Peterson;2006-01-09 12:26:14 +0000;Fixed multiarray.dot([],[]).

==

numpy/core/src/multiarraymodule.c
==================
6699699;Robert Cimrman;2006-01-09 12:09:24 +0000;Arraysetops added to numpy.lib

==

numpy/lib/__init__.py
numpy/lib/arraysetops.py
numpy/lib/info.py
numpy/lib/tests/test_arraysetops.py
==================
cb69a9f;Pearu Peterson;2006-01-09 10:15:21 +0000;Improved warning message for non-existing packages in pkgload call.

==

numpy/_import_tools.py
==================
5d495dd;Pearu Peterson;2006-01-09 10:07:59 +0000;Fixed pkgload docs.

==

numpy/_import_tools.py
==================
4fecd1e;Pearu Peterson;2006-01-09 08:52:36 +0000;Documenting global_symbols in __doc__ and fixed formatting.

==

numpy/_import_tools.py
==================
e3d3245;sasha;2006-01-09 04:33:38 +0000;Undo r1855. x[m] does not raise ValueError anymore.
See Travis' r1836.


==

numpy/core/ma.py
==================
ff02df4;Travis Oliphant;2006-01-09 02:44:21 +0000;Undo size-0 iteration changes and fix possible core dump in PyArray_Return.

==

THANKS.txt
numpy/core/src/arrayobject.c
==================
c1cdece;sasha;2006-01-08 14:50:54 +0000;Fixed a failure in test_ma reported by Nils Wagner See http://aspn.activestate.com/ASPN/Mail/Message/scipy-dev/2969615

==

numpy/core/ma.py
==================
0a6b8e4;Pearu Peterson;2006-01-08 10:18:21 +0000;Fixing scipy.lib and numpy.lib names conflict.

==

numpy/__init__.py
==================
a71140e;Travis Oliphant;2006-01-08 07:15:18 +0000;Fixed up so that at least element-size is allocated and iterator of size-0 raises an error

==

numpy/core/src/arrayobject.c
numpy/dual.py
==================
4596572;sasha;2006-01-08 07:07:40 +0000;Fixed the case when scalar mask is not None but False (see r1850)

==

numpy/core/ma.py
numpy/core/tests/test_ma.py
==================
9974432;sasha;2006-01-08 06:45:56 +0000;Fixed printing of masked arrays

==

numpy/core/ma.py
==================
b12fbb1;sasha;2006-01-08 05:39:19 +0000;Fixed the following bug:
>>> from numpy.core.ma import *
>>> array(1,mask=0).filled().dtype
<type 'object_arrtype'>

Now:

>>> array(1,mask=0).filled().dtype
<type 'int32_arrtype'>


==

numpy/core/ma.py
numpy/core/tests/test_ma.py
==================
1589259;Pearu Peterson;2006-01-07 14:35:21 +0000;Fixed missing _obj2str attr bug.

==

numpy/_import_tools.py
==================
9cfe6d5;sasha;2006-01-06 23:50:22 +0000;chararray -> defchararray

==

numpy/core/records.py
==================
b97b6d5;Travis Oliphant;2006-01-06 21:27:55 +0000;Added some more tests.

==

numpy/core/tests/test_multiarray.py
==================
1e5c9e9;Travis Oliphant;2006-01-06 21:21:03 +0000;Minor cleanup.

==

numpy/core/__init__.py
==================
b65c07d;Travis Oliphant;2006-01-06 21:19:49 +0000;Renamed module file to minimize confusion.

==

numpy/core/__init__.py
numpy/core/chararray.py
numpy/core/defchararray.py
==================
ea20506;Travis Oliphant;2006-01-06 21:16:37 +0000;Slight change for memmap

==

numpy/core/memmap.py
==================
48079cb;Travis Oliphant;2006-01-06 21:06:12 +0000;A few cleanups to error code in PyArray_NewFromDescr.  Some checks so that certain subclassees cannot be created inappropriately by .view()

==

README.txt
numpy/core/chararray.py
numpy/core/memmap.py
numpy/core/records.py
numpy/core/src/arrayobject.c
==================
ddff28c;Pearu Peterson;2006-01-06 10:44:34 +0000;Fixed import for undefined triu.

==

numpy/linalg/linalg.py
==================
2dee644;Travis Oliphant;2006-01-06 10:31:45 +0000;Fixed up errors..

==

numpy/core/defmatrix.py
numpy/core/tests/test_ma.py
==================
36d7145;Travis Oliphant;2006-01-06 10:16:55 +0000;Fixed small error.

==

numpy/core/records.py
==================
6315c4c;Travis Oliphant;2006-01-06 10:14:10 +0000;Added new feature to .view method so that if the argument is a sub-type of the ndarray, an object is returned with all the information of the array.

==

numpy/core/__init__.py
numpy/core/_internal.py
numpy/core/chararray.py
numpy/core/defmatrix.py
numpy/core/memmap.py
numpy/core/records.py
numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/lib/function_base.py
==================
5f5c4b9;Pearu Peterson;2006-01-06 10:06:32 +0000;Included locals info to error on negep.

==

numpy/lib/machar.py
==================
1eab315;sasha;2006-01-06 06:28:38 +0000;added a test case for mixed operands

==

numpy/core/tests/test_ma.py
==================
c4c5763;Travis Oliphant;2006-01-06 05:52:23 +0000;Allow resize(a,0)

==

numpy/core/oldnumeric.py
numpy/core/src/arrayobject.c
==================
4ac586f;Travis Oliphant;2006-01-06 05:22:27 +0000;Fix-up so that masked array returns masked array when ufunc does the adding.

==

numpy/core/ma.py
==================
842f977;sasha;2006-01-06 03:27:18 +0000;Fixed printing of the masked objects

==

numpy/core/ma.py
numpy/core/tests/test_ma.py
==================
543811b;Travis Oliphant;2006-01-06 03:15:13 +0000;Fixed namespace issue.

==

numpy/core/__init__.py
==================
c8b5a7e;Travis Oliphant;2006-01-06 02:12:50 +0000;Fixed error in setflags and added a few unit tests for test_multiarray

==

numpy/core/setup.py
numpy/core/src/arraymethods.c
numpy/testing/utils.py
numpy/version.py
setup.py
==================
9dd16b4;Pearu Peterson;2006-01-05 21:59:14 +0000;Added fftw2,fftw3,fft_opt info classes.

==

numpy/distutils/system_info.py
==================
218033d;Travis Oliphant;2006-01-05 19:53:28 +0000;Updated a few TODOs

==

TODO.txt
==================
0265695;Travis Oliphant;2006-01-05 19:37:24 +0000;Added Chris Stawarz patch for solaris.

==

numpy/core/setup.py
numpy/core/src/arraymethods.c
numpy/core/src/scalartypes.inc.src
==================
8c29394;Pearu Peterson;2006-01-05 14:21:23 +0000;Applied Darren Dale patch about detecting libdjbfft.so

==

numpy/distutils/system_info.py
==================
0fa6516;Pearu Peterson;2006-01-05 13:31:57 +0000;Impl. get_pkgdocs and cleanup of _import_tools.

==

numpy/_import_tools.py
==================
7021626;Pearu Peterson;2006-01-05 11:09:18 +0000;Doc updates and removing NUMPY_IMPORT_VERBOSE from numpy.

==

numpy/__init__.py
==================
f8f8ca7;Travis Oliphant;2006-01-05 10:57:06 +0000;Copy input for i0 calculation.

==

numpy/lib/function_base.py
==================
cec9a2e;Pearu Peterson;2006-01-05 10:40:20 +0000;Cleaning up __all__ list and numpy namespace.

==

numpy/__init__.py
numpy/core/__init__.py
numpy/f2py/f2py2e.py
numpy/lib/__init__.py
numpy/lib/function_base.py
numpy/lib/tests/test_index_tricks.py
numpy/lib/tests/test_twodim_base.py
==================
8b1e2f9;Travis Oliphant;2006-01-05 10:28:41 +0000;Add a few more docstrings using add_docstring.

==

COMPATIBILITY
DEV_README.txt
numpy/__init__.py
numpy/add_newdocs.py
numpy/lib/function_base.py
numpy/lib/src/_compiled_base.c
==================
b97663c;Travis Oliphant;2006-01-05 08:40:43 +0000;Remove deconvolve

==

numpy/lib/polynomial.py
==================
4dd79b0;Travis Oliphant;2006-01-05 08:36:12 +0000;Added i0 natively for kaiser window

==

numpy/_import_tools.py
numpy/core/defmatrix.py
numpy/core/ma.py
numpy/dft/fftpack.py
numpy/dual.py
numpy/lib/function_base.py
numpy/lib/mlab.py
numpy/lib/polynomial.py
numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
==================
de399f0;Pearu Peterson;2006-01-05 07:31:57 +0000;Fixed name change.

==

numpy/distutils/misc_util.py
==================
88cfa33;Pearu Peterson;2006-01-05 07:29:01 +0000;Restore _import_tools.py.

==

numpy/_import_tools.py
==================
8081b28;Travis Oliphant;2006-01-05 07:28:38 +0000;Re-added sasha's 1780 patches

==

numpy/core/ma.py
numpy/core/tests/test_ma.py
==================
c2b11e8;Pearu Peterson;2006-01-05 07:20:03 +0000;Removed pkgload from numpy - all imports can be done explicitly.

==

numpy/__init__.py
numpy/_import_tools.py
numpy/setup.py
==================
10d4896;Travis Oliphant;2006-01-05 07:17:48 +0000;Removed pkg names from dual

==

numpy/dual.py
==================
f69c9a6;Travis Oliphant;2006-01-05 07:08:37 +0000;Changed how to get dual numpy/scipy behavior.  Use explicit numpy.dual module.

==

numpy/dft/__init__.py
numpy/dual.py
numpy/linalg/__init__.py
==================
fb605c6;Travis Oliphant;2006-01-05 03:21:43 +0000;I don't understand why this wasn't included before.

==

numpy/random/mtrand/mtrand.c
==================
416bf37;Travis Oliphant;2006-01-05 01:28:47 +0000;Trying to delete mtrand.c

==

numpy/random/mtrand/mtrand.c
==================
959e0ba;Travis Oliphant;2006-01-05 01:23:47 +0000;Fixed corelinalg in mtrand.

==

numpy/random/mtrand/mtrand.pyx
==================
5b83476;Travis Oliphant;2006-01-05 01:21:44 +0000;Made matrix tests work.

==

numpy/core/defmatrix.py
numpy/core/tests/test_defmatrix.py
numpy/core/tests/test_matrix.py
==================
2f01cc8;Travis Oliphant;2006-01-05 01:14:35 +0000;Move package loader to _import_tools.py

==

numpy/__init__.py
numpy/_import_tools.py
==================
f115fdf;Travis Oliphant;2006-01-05 01:06:10 +0000;numpy.base -> numpy

==

numpy/core/arrayprint.py
numpy/core/tests/test_matrix.py
numpy/distutils/command/install_headers.py
numpy/distutils/tests/f2py_ext/tests/test_fib2.py
numpy/distutils/tests/f2py_f90_ext/tests/test_foo.py
numpy/distutils/tests/gen_ext/tests/test_fib3.py
numpy/distutils/tests/swig_ext/tests/test_example.py
numpy/doc/DISTUTILS.txt
numpy/f2py/diagnose.py
numpy/f2py/rules.py
numpy/f2py/tests/array_from_pyobj/tests/test_array_from_pyobj.py
numpy/f2py/tests/array_from_pyobj/wrapmodule.c
numpy/f2py/tests/f77/return_integer.py
numpy/f2py/tests/f77/return_real.py
numpy/lib/convertcode.py
numpy/lib/utils.py
==================
fc95346;Travis Oliphant;2006-01-05 00:46:19 +0000;Fixed problem in mlab.py

==

numpy/lib/mlab.py
==================
605f8a5;edschofield;2006-01-05 00:27:06 +0000;More documentation updates

==

README.txt
benchmarks/sorting.py
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/doc/DISTUTILS.txt
numpy/f2py/docs/README.txt
numpy/lib/shape_base.py
==================
6a0653c;Travis Oliphant;2006-01-05 00:16:33 +0000;Fixes to convertcode.py

==

THANKS.txt
numpy/core/numerictypes.py
numpy/lib/convertcode.py
==================
e74ea10;edschofield;2006-01-05 00:13:13 +0000;Documentation updates: SciPy core -> NumPy

==

numpy/__init__.py
numpy/doc/README.txt
==================
e53c47e;Pearu Peterson;2006-01-04 23:40:55 +0000;Fixed svn_version hooks.

==

numpy/version.py
==================
75077ce;Pearu Peterson;2006-01-04 23:38:48 +0000;Fixed import errors.

==

numpy/distutils/misc_util.py
==================
c5b3557;Travis Oliphant;2006-01-04 23:34:09 +0000;Fixed name issue.

==

numpy/f2py/f2py2e.py
==================
be4d973;Travis Oliphant;2006-01-04 23:20:44 +0000;Fixed version issue..

==

numpy/f2py/f2py2e.py
==================
961f7f5;Travis Oliphant;2006-01-04 22:57:46 +0000;Merged r1773:1791 branch of numpy into main trunk

==
==================
0f05f38;Travis Oliphant;2006-01-04 22:46:30 +0000;Final commit before merge to trunk.

==

numpy/lib/polynomial.py
numpy/lib/shape_base.py
==================
6d2d01b;Travis Oliphant;2006-01-04 22:44:50 +0000;Fix up numpy

==

numpy/core/src/multiarraymodule.c
==================
5cfcf93;Travis Oliphant;2006-01-04 22:37:16 +0000;More fixes...

==

numpy/core/code_generators/generate_umath.py
numpy/core/oldnumeric.py
numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/scalartypes.inc.src
numpy/core/src/umathmodule.c.src
numpy/core/tests/test_ma.py
numpy/core/tests/test_records.py
numpy/core/tests/test_umath.py
numpy/dft/tests/test_helper.py
numpy/lib/__init__.py
numpy/lib/function_base.py
numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_getlimits.py
numpy/lib/tests/test_index_tricks.py
numpy/lib/tests/test_polynomial.py
numpy/lib/tests/test_shape_base.py
numpy/lib/tests/test_twodim_base.py
numpy/lib/tests/test_type_check.py
numpy/lib/tests/test_ufunclike.py
numpy/lib/type_check.py
numpy/lib/ufunclike.py
==================
490712c;Travis Oliphant;2006-01-04 21:05:36 +0000;More numpy fixes...

==

numpy/__init__.py
numpy/core/__init__.py
numpy/core/code_generators/generate_array_api.py
numpy/core/code_generators/generate_ufunc_api.py
numpy/core/defmatrix.py
numpy/core/info.py
numpy/core/ma.py
numpy/core/matrix.py
numpy/core/numeric.py
numpy/core/oldnumeric.py
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
numpy/core/src/scalartypes.inc.src
numpy/dft/fftpack.py
numpy/dft/helper.py
numpy/dft/info.py
numpy/lib/function_base.py
numpy/lib/getlimits.py
numpy/lib/index_tricks.py
numpy/lib/info.py
numpy/lib/src/_compiled_base.c
numpy/linalg/info.py
numpy/linalg/linalg.py
numpy/random/info.py
==================
7ff8521;Travis Oliphant;2006-01-04 20:08:04 +0000;More numpy fixes...

==

numpy/version
numpy/version.py
==================
af08f34;Travis Oliphant;2006-01-04 19:49:33 +0000;Moved another directory

==

numpy/core/include/numpy/arrayobject.h
numpy/core/include/numpy/ufuncobject.h
numpy/core/include/scipy/arrayobject.h
numpy/core/include/scipy/ufuncobject.h
==================
bd7411a;Travis Oliphant;2006-01-04 19:48:03 +0000;More changes

==

numpy/core/__init__.py
numpy/core_version.py
numpy/lib/__init__.py
numpy/lib/setup.py
numpy/testing/numpytest.py
numpy/testing/scipytest.py
numpy/version
==================
a6eb1cb;Travis Oliphant;2006-01-04 19:44:03 +0000;Updated mtrand pyrex-generated c file.

==

numpy/random/mtrand/mtrand.c
==================
b0a3266;Travis Oliphant;2006-01-04 19:43:23 +0000;Moved pxi in mtrand

==

numpy/random/mtrand/numpy.pxi
numpy/random/mtrand/scipy.pxi
==================
5a76512;Travis Oliphant;2006-01-04 19:30:36 +0000;Fixed lib

==

numpy/dft/__init__.py
numpy/doc/CAPI.txt
numpy/doc/DISTUTILS.txt
numpy/lib/function_base.py
numpy/lib/getlimits.py
numpy/lib/machar.py
numpy/lib/mlab.py
numpy/lib/polynomial.py
numpy/lib/scimath.py
numpy/lib/shape_base.py
numpy/lib/test_shape_base.py
numpy/lib/tests/test_shape_base.py
numpy/lib/twodim_base.py
numpy/lib/type_check.py
numpy/lib/ufunclike.py
numpy/lib/utils.py
numpy/linalg/__init__.py
setup.py
==================
e706c7d;Travis Oliphant;2006-01-04 19:00:27 +0000;Changed all references to scipy to numpy

==

COMPATIBILITY
README.txt
THANKS.txt
benchmarks/sorting.py
numpy/__init__.py
numpy/_import_tools.py
numpy/core/__init__.py
numpy/core/arrayprint.py
numpy/core/blasdot/_dotblas.c
numpy/core/code_generators/array_api_order.txt
numpy/core/code_generators/generate_array_api.py
numpy/core/code_generators/generate_ufunc_api.py
numpy/core/ma.py
numpy/core/matrix.py
numpy/core/src/_sortmodule.c.src
numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/multiarraymodule.c
numpy/core/src/scalarmathmodule.c.src
numpy/core/src/scalartypes.inc.src
numpy/core/src/ufuncobject.c
numpy/core/src/umathmodule.c.src
numpy/core/tests/test_ma.py
numpy/core/tests/test_matrix.py
numpy/core/tests/test_records.py
numpy/core/tests/test_umath.py
numpy/core_version.py
numpy/dft/__init__.py
numpy/dft/fftpack.py
numpy/dft/fftpack_litemodule.c
numpy/dft/helper.py
numpy/dft/tests/test_helper.py
numpy/distutils/__init__.py
numpy/distutils/ccompiler.py
numpy/distutils/command/build_clib.py
numpy/distutils/command/build_ext.py
numpy/distutils/command/build_scripts.py
numpy/distutils/command/build_src.py
numpy/distutils/command/config.py
numpy/distutils/command/config_compiler.py
numpy/distutils/command/install_headers.py
numpy/distutils/command/sdist.py
numpy/distutils/core.py
numpy/distutils/extension.py
numpy/distutils/fcompiler/__init__.py
numpy/distutils/fcompiler/absoft.py
numpy/distutils/fcompiler/compaq.py
numpy/distutils/fcompiler/g95.py
numpy/distutils/fcompiler/gnu.py
numpy/distutils/fcompiler/hpux.py
numpy/distutils/fcompiler/ibm.py
numpy/distutils/fcompiler/intel.py
numpy/distutils/fcompiler/lahey.py
numpy/distutils/fcompiler/mips.py
numpy/distutils/fcompiler/nag.py
numpy/distutils/fcompiler/none.py
numpy/distutils/fcompiler/pg.py
numpy/distutils/fcompiler/sun.py
numpy/distutils/fcompiler/vast.py
numpy/distutils/intelccompiler.py
numpy/distutils/mingw32ccompiler.py
numpy/distutils/misc_util.py
numpy/distutils/setup.py
numpy/distutils/system_info.py
numpy/distutils/tests/f2py_ext/setup.py
numpy/distutils/tests/f2py_ext/tests/test_fib2.py
numpy/distutils/tests/f2py_f90_ext/setup.py
numpy/distutils/tests/f2py_f90_ext/tests/test_foo.py
numpy/distutils/tests/gen_ext/setup.py
numpy/distutils/tests/gen_ext/tests/test_fib3.py
numpy/distutils/tests/swig_ext/setup.py
numpy/distutils/tests/swig_ext/tests/test_example.py
numpy/distutils/tests/swig_ext/tests/test_example2.py
numpy/distutils/tests/test_misc_util.py
numpy/doc/CAPI.txt
numpy/doc/DISTUTILS.txt
numpy/f2py/Makefile
numpy/f2py/TODO.txt
numpy/f2py/__init__.py
numpy/f2py/diagnose.py
numpy/f2py/doc/index.html
numpy/f2py/doc/oldnews.html
numpy/f2py/docs/FAQ.txt
numpy/f2py/docs/HISTORY.txt
numpy/f2py/docs/OLDNEWS.txt
numpy/f2py/docs/README.txt
numpy/f2py/docs/TESTING.txt
numpy/f2py/docs/THANKS.txt
numpy/f2py/docs/usersguide/index.txt
numpy/f2py/docs/usersguide/setup_example.py
numpy/f2py/f2py.1
numpy/f2py/f2py2e.py
numpy/f2py/rules.py
numpy/f2py/setup.py
numpy/f2py/src/fortranobject.h
numpy/f2py/tests/array_from_pyobj/setup.py
numpy/f2py/tests/array_from_pyobj/tests/test_array_from_pyobj.py
numpy/f2py/tests/array_from_pyobj/wrapmodule.c
numpy/f2py/tests/f77/return_integer.py
numpy/f2py/tests/f77/return_real.py
numpy/lib/convertcode.py
numpy/lib/function_base.py
numpy/lib/getlimits.py
numpy/lib/index_tricks.py
numpy/lib/mlab.py
numpy/lib/polynomial.py
numpy/lib/shape_base.py
numpy/lib/src/_compiled_base.c
numpy/lib/test_shape_base.py
numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_getlimits.py
numpy/lib/tests/test_index_tricks.py
numpy/lib/tests/test_polynomial.py
numpy/lib/tests/test_twodim_base.py
numpy/lib/tests/test_type_check.py
numpy/lib/tests/test_ufunclike.py
numpy/lib/type_check.py
numpy/lib/utils.py
numpy/linalg/__init__.py
numpy/linalg/lapack_litemodule.c
numpy/linalg/linalg.py
numpy/random/__init__.py
numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
numpy/random/mtrand/scipy.pxi
numpy/testing/__init__.py
numpy/testing/scipytest.py
numpy/testing/setup.py
scipy_compatibility
setup.py
==================
6d9c86c;sasha;2006-01-04 18:29:28 +0000;Fixed sf bugs 1395698 and 1395688
Note that this patch changes the return type of a[i] and
the conversion to bool for consistency with the scipy core
rules.

==

scipy/base/ma.py
scipy/base/tests/test_ma.py
==================
c14d4fe;Travis Oliphant;2006-01-04 17:47:13 +0000;Change most setup.py files

==

numpy/core/setup.py
numpy/core/tests/test_ufunclike.py
numpy/dft/setup.py
numpy/lib/convertcode.py
numpy/lib/setup.py
numpy/lib/tests/test_type_check.py
numpy/lib/tests/test_ufunclike.py
numpy/linalg/setup.py
numpy/random/setup.py
numpy/setup.py
numpy/testing/test_type_check.py
numpy/testing/utils.py
==================
3496a3c;Travis Oliphant;2006-01-04 17:37:00 +0000;Moving things..

==

numpy/core/convertcode.py
numpy/core/function_base.py
numpy/core/getlimits.py
numpy/core/index_tricks.py
numpy/core/machar.py
numpy/core/mlab.py
numpy/core/polynomial.py
numpy/core/scimath.py
numpy/core/shape_base.py
numpy/core/src/_compiled_base.c
numpy/core/tests/test_function_base.py
numpy/core/tests/test_getlimits.py
numpy/core/tests/test_index_tricks.py
numpy/core/tests/test_polynomial.py
numpy/core/tests/test_shape_base.py
numpy/core/tests/test_twodim_base.py
numpy/core/tests/test_type_check.py
numpy/core/twodim_base.py
numpy/core/type_check.py
numpy/core/ufunclike.py
numpy/core/utils.py
numpy/lib/convertcode.py
numpy/lib/function_base.py
numpy/lib/getlimits.py
numpy/lib/index_tricks.py
numpy/lib/machar.py
numpy/lib/mlab.py
numpy/lib/polynomial.py
numpy/lib/scimath.py
numpy/lib/shape_base.py
numpy/lib/src/_compiled_base.c
numpy/lib/test_shape_base.py
numpy/lib/tests/test_function_base.py
numpy/lib/tests/test_getlimits.py
numpy/lib/tests/test_index_tricks.py
numpy/lib/tests/test_polynomial.py
numpy/lib/tests/test_twodim_base.py
numpy/lib/twodim_base.py
numpy/lib/type_check.py
numpy/lib/ufunclike.py
numpy/lib/utils.py
numpy/testing/test_type_check.py
==================
8057b2d;Travis Oliphant;2006-01-04 17:33:12 +0000;rename sub-packages

==

numpy/base/__init__.py
numpy/base/_internal.py
numpy/base/arrayprint.py
numpy/base/blasdot/_dotblas.c
numpy/base/blasdot/cblas.h
numpy/base/chararray.py
numpy/base/code_generators/array_api_order.txt
numpy/base/code_generators/genapi.py
numpy/base/code_generators/generate_array_api.py
numpy/base/code_generators/generate_ufunc_api.py
numpy/base/code_generators/generate_umath.py
numpy/base/code_generators/multiarray_api_order.txt
numpy/base/code_generators/ufunc_api_order.txt
numpy/base/convertcode.py
numpy/base/function_base.py
numpy/base/getlimits.py
numpy/base/include/scipy/arrayobject.h
numpy/base/include/scipy/ufuncobject.h
numpy/base/index_tricks.py
numpy/base/info.py
numpy/base/ma.py
numpy/base/machar.py
numpy/base/matrix.py
numpy/base/memmap.py
numpy/base/mlab.py
numpy/base/numeric.py
numpy/base/numerictypes.py
numpy/base/oldnumeric.py
numpy/base/polynomial.py
numpy/base/records.py
numpy/base/scimath.py
numpy/base/setup.py
numpy/base/shape_base.py
numpy/base/src/_compiled_base.c
numpy/base/src/_isnan.c
numpy/base/src/_signbit.c
numpy/base/src/_sortmodule.c.src
numpy/base/src/arraymethods.c
numpy/base/src/arrayobject.c
numpy/base/src/arraytypes.inc.src
numpy/base/src/multiarraymodule.c
numpy/base/src/scalarmathmodule.c.src
numpy/base/src/scalartypes.inc.src
numpy/base/src/ufuncobject.c
numpy/base/src/umathmodule.c.src
numpy/base/tests/test_function_base.py
numpy/base/tests/test_getlimits.py
numpy/base/tests/test_index_tricks.py
numpy/base/tests/test_ma.py
numpy/base/tests/test_matrix.py
numpy/base/tests/test_polynomial.py
numpy/base/tests/test_records.py
numpy/base/tests/test_shape_base.py
numpy/base/tests/test_twodim_base.py
numpy/base/tests/test_type_check.py
numpy/base/tests/test_ufunclike.py
numpy/base/tests/test_umath.py
numpy/base/tests/testdata.fits
numpy/base/twodim_base.py
numpy/base/type_check.py
numpy/base/ufunclike.py
numpy/base/utils.py
numpy/core/__init__.py
numpy/core/_internal.py
numpy/core/arrayprint.py
numpy/core/blasdot/_dotblas.c
numpy/core/blasdot/cblas.h
numpy/core/chararray.py
numpy/core/code_generators/array_api_order.txt
numpy/core/code_generators/genapi.py
numpy/core/code_generators/generate_array_api.py
numpy/core/code_generators/generate_ufunc_api.py
numpy/core/code_generators/generate_umath.py
numpy/core/code_generators/multiarray_api_order.txt
numpy/core/code_generators/ufunc_api_order.txt
numpy/core/convertcode.py
numpy/core/function_base.py
numpy/core/getlimits.py
numpy/core/include/scipy/arrayobject.h
numpy/core/include/scipy/ufuncobject.h
numpy/core/index_tricks.py
numpy/core/info.py
numpy/core/ma.py
numpy/core/machar.py
numpy/core/matrix.py
numpy/core/memmap.py
numpy/core/mlab.py
numpy/core/numeric.py
numpy/core/numerictypes.py
numpy/core/oldnumeric.py
numpy/core/polynomial.py
numpy/core/records.py
numpy/core/scimath.py
numpy/core/setup.py
numpy/core/shape_base.py
numpy/core/src/_compiled_base.c
numpy/core/src/_isnan.c
numpy/core/src/_signbit.c
numpy/core/src/_sortmodule.c.src
numpy/core/src/arraymethods.c
numpy/core/src/arrayobject.c
numpy/core/src/arraytypes.inc.src
numpy/core/src/multiarraymodule.c
numpy/core/src/scalarmathmodule.c.src
numpy/core/src/scalartypes.inc.src
numpy/core/src/ufuncobject.c
numpy/core/src/umathmodule.c.src
numpy/core/tests/test_function_base.py
numpy/core/tests/test_getlimits.py
numpy/core/tests/test_index_tricks.py
numpy/core/tests/test_ma.py
numpy/core/tests/test_matrix.py
numpy/core/tests/test_polynomial.py
numpy/core/tests/test_records.py
numpy/core/tests/test_shape_base.py
numpy/core/tests/test_twodim_base.py
numpy/core/tests/test_type_check.py
numpy/core/tests/test_ufunclike.py
numpy/core/tests/test_umath.py
numpy/core/tests/testdata.fits
numpy/core/twodim_base.py
numpy/core/type_check.py
numpy/core/ufunclike.py
numpy/core/utils.py
numpy/corefft/__init__.py
numpy/corefft/fftpack.c
numpy/corefft/fftpack.h
numpy/corefft/fftpack.py
numpy/corefft/fftpack_litemodule.c
numpy/corefft/helper.py
numpy/corefft/info.py
numpy/corefft/setup.py
numpy/corefft/tests/test_helper.py
numpy/corelinalg/__init__.py
numpy/corelinalg/blas_lite.c
numpy/corelinalg/dlamch.c
numpy/corelinalg/dlapack_lite.c
numpy/corelinalg/f2c.h
numpy/corelinalg/f2c_lite.c
numpy/corelinalg/info.py
numpy/corelinalg/lapack_litemodule.c
numpy/corelinalg/linalg.py
numpy/corelinalg/setup.py
numpy/corelinalg/zlapack_lite.c
numpy/dft/__init__.py
numpy/dft/fftpack.c
numpy/dft/fftpack.h
numpy/dft/fftpack.py
numpy/dft/fftpack_litemodule.c
numpy/dft/helper.py
numpy/dft/info.py
numpy/dft/setup.py
numpy/dft/tests/test_helper.py
numpy/linalg/__init__.py
numpy/linalg/blas_lite.c
numpy/linalg/dlamch.c
numpy/linalg/dlapack_lite.c
numpy/linalg/f2c.h
numpy/linalg/f2c_lite.c
numpy/linalg/info.py
numpy/linalg/lapack_litemodule.c
numpy/linalg/linalg.py
numpy/linalg/setup.py
numpy/linalg/zlapack_lite.c
==================
da9c6da;Travis Oliphant;2006-01-04 17:31:07 +0000;Fix-up setup.py

==

setup.py
==================
8e26545;Travis Oliphant;2006-01-04 17:26:31 +0000;Moved scipy directory to numpy

==

numpy/__init__.py
numpy/_import_tools.py
numpy/base/__init__.py
numpy/base/_internal.py
numpy/base/arrayprint.py
numpy/base/blasdot/_dotblas.c
numpy/base/blasdot/cblas.h
numpy/base/chararray.py
numpy/base/code_generators/array_api_order.txt
numpy/base/code_generators/genapi.py
numpy/base/code_generators/generate_array_api.py
numpy/base/code_generators/generate_ufunc_api.py
numpy/base/code_generators/generate_umath.py
numpy/base/code_generators/multiarray_api_order.txt
numpy/base/code_generators/ufunc_api_order.txt
numpy/base/convertcode.py
numpy/base/function_base.py
numpy/base/getlimits.py
numpy/base/include/scipy/arrayobject.h
numpy/base/include/scipy/ufuncobject.h
numpy/base/index_tricks.py
numpy/base/info.py
numpy/base/ma.py
numpy/base/machar.py
numpy/base/matrix.py
numpy/base/memmap.py
numpy/base/mlab.py
numpy/base/numeric.py
numpy/base/numerictypes.py
numpy/base/oldnumeric.py
numpy/base/polynomial.py
numpy/base/records.py
numpy/base/scimath.py
numpy/base/setup.py
numpy/base/shape_base.py
numpy/base/src/_compiled_base.c
numpy/base/src/_isnan.c
numpy/base/src/_signbit.c
numpy/base/src/_sortmodule.c.src
numpy/base/src/arraymethods.c
numpy/base/src/arrayobject.c
numpy/base/src/arraytypes.inc.src
numpy/base/src/multiarraymodule.c
numpy/base/src/scalarmathmodule.c.src
numpy/base/src/scalartypes.inc.src
numpy/base/src/ufuncobject.c
numpy/base/src/umathmodule.c.src
numpy/base/tests/test_function_base.py
numpy/base/tests/test_getlimits.py
numpy/base/tests/test_index_tricks.py
numpy/base/tests/test_ma.py
numpy/base/tests/test_matrix.py
numpy/base/tests/test_polynomial.py
numpy/base/tests/test_records.py
numpy/base/tests/test_shape_base.py
numpy/base/tests/test_twodim_base.py
numpy/base/tests/test_type_check.py
numpy/base/tests/test_ufunclike.py
numpy/base/tests/test_umath.py
numpy/base/tests/testdata.fits
numpy/base/twodim_base.py
numpy/base/type_check.py
numpy/base/ufunclike.py
numpy/base/utils.py
numpy/core_version.py
numpy/corefft/__init__.py
numpy/corefft/fftpack.c
numpy/corefft/fftpack.h
numpy/corefft/fftpack.py
numpy/corefft/fftpack_litemodule.c
numpy/corefft/helper.py
numpy/corefft/info.py
numpy/corefft/setup.py
numpy/corefft/tests/test_helper.py
numpy/corelinalg/__init__.py
numpy/corelinalg/blas_lite.c
numpy/corelinalg/dlamch.c
numpy/corelinalg/dlapack_lite.c
numpy/corelinalg/f2c.h
numpy/corelinalg/f2c_lite.c
numpy/corelinalg/info.py
numpy/corelinalg/lapack_litemodule.c
numpy/corelinalg/linalg.py
numpy/corelinalg/setup.py
numpy/corelinalg/zlapack_lite.c
numpy/distutils/__init__.py
numpy/distutils/__version__.py
numpy/distutils/ccompiler.py
numpy/distutils/command/__init__.py
numpy/distutils/command/bdist_rpm.py
numpy/distutils/command/build.py
numpy/distutils/command/build_clib.py
numpy/distutils/command/build_ext.py
numpy/distutils/command/build_py.py
numpy/distutils/command/build_scripts.py
numpy/distutils/command/build_src.py
numpy/distutils/command/config.py
numpy/distutils/command/config_compiler.py
numpy/distutils/command/install.py
numpy/distutils/command/install_data.py
numpy/distutils/command/install_headers.py
numpy/distutils/command/sdist.py
numpy/distutils/conv_template.py
numpy/distutils/core.py
numpy/distutils/cpuinfo.py
numpy/distutils/exec_command.py
numpy/distutils/extension.py
numpy/distutils/fcompiler/__init__.py
numpy/distutils/fcompiler/absoft.py
numpy/distutils/fcompiler/compaq.py
numpy/distutils/fcompiler/g95.py
numpy/distutils/fcompiler/gnu.py
numpy/distutils/fcompiler/hpux.py
numpy/distutils/fcompiler/ibm.py
numpy/distutils/fcompiler/intel.py
numpy/distutils/fcompiler/lahey.py
numpy/distutils/fcompiler/mips.py
numpy/distutils/fcompiler/nag.py
numpy/distutils/fcompiler/none.py
numpy/distutils/fcompiler/pg.py
numpy/distutils/fcompiler/sun.py
numpy/distutils/fcompiler/vast.py
numpy/distutils/from_template.py
numpy/distutils/intelccompiler.py
numpy/distutils/lib2def.py
numpy/distutils/line_endings.py
numpy/distutils/log.py
numpy/distutils/mingw32ccompiler.py
numpy/distutils/misc_util.py
numpy/distutils/setup.py
numpy/distutils/system_info.py
numpy/distutils/tests/f2py_ext/__init__.py
numpy/distutils/tests/f2py_ext/setup.py
numpy/distutils/tests/f2py_ext/src/fib1.f
numpy/distutils/tests/f2py_ext/src/fib2.pyf
numpy/distutils/tests/f2py_ext/tests/test_fib2.py
numpy/distutils/tests/f2py_f90_ext/__init__.py
numpy/distutils/tests/f2py_f90_ext/include/body.f90
numpy/distutils/tests/f2py_f90_ext/setup.py
numpy/distutils/tests/f2py_f90_ext/src/foo_free.f90
numpy/distutils/tests/f2py_f90_ext/tests/test_foo.py
numpy/distutils/tests/gen_ext/__init__.py
numpy/distutils/tests/gen_ext/setup.py
numpy/distutils/tests/gen_ext/tests/test_fib3.py
numpy/distutils/tests/swig_ext/__init__.py
numpy/distutils/tests/swig_ext/setup.py
numpy/distutils/tests/swig_ext/src/example.c
numpy/distutils/tests/swig_ext/src/example.i
numpy/distutils/tests/swig_ext/src/zoo.cc
numpy/distutils/tests/swig_ext/src/zoo.h
numpy/distutils/tests/swig_ext/src/zoo.i
numpy/distutils/tests/swig_ext/tests/test_example.py
numpy/distutils/tests/swig_ext/tests/test_example2.py
numpy/distutils/tests/test_misc_util.py
numpy/distutils/unixccompiler.py
numpy/doc/CAPI.txt
numpy/doc/DISTUTILS.txt
numpy/doc/README.txt
numpy/doc/records.txt
numpy/doc/ufuncs.txt
numpy/f2py/BUGS.txt
numpy/f2py/Makefile
numpy/f2py/NEWS.txt
numpy/f2py/README.txt
numpy/f2py/TODO.txt
numpy/f2py/__init__.py
numpy/f2py/__version__.py
numpy/f2py/auxfuncs.py
numpy/f2py/capi_maps.py
numpy/f2py/cb_rules.py
numpy/f2py/cfuncs.py
numpy/f2py/common_rules.py
numpy/f2py/crackfortran.py
numpy/f2py/diagnose.py
numpy/f2py/doc/Makefile
numpy/f2py/doc/Release-1.x.txt
numpy/f2py/doc/Release-2.x.txt
numpy/f2py/doc/Release-3.x.txt
numpy/f2py/doc/Release-4.x.txt
numpy/f2py/doc/apps.tex
numpy/f2py/doc/bugs.tex
numpy/f2py/doc/collectinput.py
numpy/f2py/doc/commands.tex
numpy/f2py/doc/ex1/arr.f
numpy/f2py/doc/ex1/bar.f
numpy/f2py/doc/ex1/foo.f
numpy/f2py/doc/ex1/foobar-smart.f90
numpy/f2py/doc/ex1/foobar.f90
numpy/f2py/doc/ex1/foobarmodule.tex
numpy/f2py/doc/ex1/runme
numpy/f2py/doc/f2py2e.tex
numpy/f2py/doc/f2python9-final/README.txt
numpy/f2py/doc/f2python9-final/aerostructure.jpg
numpy/f2py/doc/f2python9-final/flow.jpg
numpy/f2py/doc/f2python9-final/mk_html.sh
numpy/f2py/doc/f2python9-final/mk_pdf.sh
numpy/f2py/doc/f2python9-final/mk_ps.sh
numpy/f2py/doc/f2python9-final/src/examples/exp1.f
numpy/f2py/doc/f2python9-final/src/examples/exp1mess.txt
numpy/f2py/doc/f2python9-final/src/examples/exp1session.txt
numpy/f2py/doc/f2python9-final/src/examples/foo.pyf
numpy/f2py/doc/f2python9-final/src/examples/foom.pyf
numpy/f2py/doc/f2python9-final/structure.jpg
numpy/f2py/doc/fortranobject.tex
numpy/f2py/doc/index.html
numpy/f2py/doc/intro.tex
numpy/f2py/doc/multiarray/array_from_pyobj.c
numpy/f2py/doc/multiarray/bar.c
numpy/f2py/doc/multiarray/foo.f
numpy/f2py/doc/multiarray/fortran_array_from_pyobj.txt
numpy/f2py/doc/multiarray/fun.pyf
numpy/f2py/doc/multiarray/run.pyf
numpy/f2py/doc/multiarray/transpose.txt
numpy/f2py/doc/multiarrays.txt
numpy/f2py/doc/notes.tex
numpy/f2py/doc/oldnews.html
numpy/f2py/doc/options.tex
numpy/f2py/doc/python9.tex
numpy/f2py/doc/signaturefile.tex
numpy/f2py/doc/using_F_compiler.txt
numpy/f2py/doc/win32_notes.txt
numpy/f2py/docs/FAQ.txt
numpy/f2py/docs/HISTORY.txt
numpy/f2py/docs/OLDNEWS.txt
numpy/f2py/docs/README.txt
numpy/f2py/docs/TESTING.txt
numpy/f2py/docs/THANKS.txt
numpy/f2py/docs/default.css
numpy/f2py/docs/docutils.conf
numpy/f2py/docs/hello.f
numpy/f2py/docs/pyforttest.pyf
numpy/f2py/docs/pytest.py
numpy/f2py/docs/simple.f
numpy/f2py/docs/simple_session.dat
numpy/f2py/docs/usersguide/allocarr.f90
numpy/f2py/docs/usersguide/allocarr_session.dat
numpy/f2py/docs/usersguide/array.f
numpy/f2py/docs/usersguide/array_session.dat
numpy/f2py/docs/usersguide/calculate.f
numpy/f2py/docs/usersguide/calculate_session.dat
numpy/f2py/docs/usersguide/callback.f
numpy/f2py/docs/usersguide/callback2.pyf
numpy/f2py/docs/usersguide/callback_session.dat
numpy/f2py/docs/usersguide/common.f
numpy/f2py/docs/usersguide/common_session.dat
numpy/f2py/docs/usersguide/compile_session.dat
numpy/f2py/docs/usersguide/default.css
numpy/f2py/docs/usersguide/docutils.conf
numpy/f2py/docs/usersguide/extcallback.f
numpy/f2py/docs/usersguide/extcallback_session.dat
numpy/f2py/docs/usersguide/fib1.f
numpy/f2py/docs/usersguide/fib1.pyf
numpy/f2py/docs/usersguide/fib2.pyf
numpy/f2py/docs/usersguide/fib3.f
numpy/f2py/docs/usersguide/ftype.f
numpy/f2py/docs/usersguide/ftype_session.dat
numpy/f2py/docs/usersguide/index.txt
numpy/f2py/docs/usersguide/moddata.f90
numpy/f2py/docs/usersguide/moddata_session.dat
numpy/f2py/docs/usersguide/run_main_session.dat
numpy/f2py/docs/usersguide/scalar.f
numpy/f2py/docs/usersguide/scalar_session.dat
numpy/f2py/docs/usersguide/setup_example.py
numpy/f2py/docs/usersguide/spam.pyf
numpy/f2py/docs/usersguide/spam_session.dat
numpy/f2py/docs/usersguide/string.f
numpy/f2py/docs/usersguide/string_session.dat
numpy/f2py/docs/usersguide/var.pyf
numpy/f2py/docs/usersguide/var_session.dat
numpy/f2py/f2py.1
numpy/f2py/f2py2e.py
numpy/f2py/f2py_testing.py
numpy/f2py/f90mod_rules.py
numpy/f2py/func2subr.py
numpy/f2py/rules.py
numpy/f2py/setup.cfg
numpy/f2py/setup.py
numpy/f2py/src/fortranobject.c
numpy/f2py/src/fortranobject.h
numpy/f2py/src/test/Makefile
numpy/f2py/src/test/bar.f
numpy/f2py/src/test/foo.f
numpy/f2py/src/test/foo90.f90
numpy/f2py/src/test/foomodule.c
numpy/f2py/src/test/wrap.f
numpy/f2py/tests/array_from_pyobj/__init__.py
numpy/f2py/tests/array_from_pyobj/setup.py
numpy/f2py/tests/array_from_pyobj/tests/test_array_from_pyobj.py
numpy/f2py/tests/array_from_pyobj/wrapmodule.c
numpy/f2py/tests/c/return_real.py
numpy/f2py/tests/f77/callback.py
numpy/f2py/tests/f77/return_character.py
numpy/f2py/tests/f77/return_complex.py
numpy/f2py/tests/f77/return_integer.py
numpy/f2py/tests/f77/return_logical.py
numpy/f2py/tests/f77/return_real.py
numpy/f2py/tests/f90/return_character.py
numpy/f2py/tests/f90/return_complex.py
numpy/f2py/tests/f90/return_integer.py
numpy/f2py/tests/f90/return_logical.py
numpy/f2py/tests/f90/return_real.py
numpy/f2py/tests/mixed/foo.f
numpy/f2py/tests/mixed/foo_fixed.f90
numpy/f2py/tests/mixed/foo_free.f90
numpy/f2py/tests/mixed/run.py
numpy/f2py/tests/run_all.py
numpy/f2py/use_rules.py
numpy/random/__init__.py
numpy/random/info.py
numpy/random/mtrand/Python.pxi
numpy/random/mtrand/distributions.c
numpy/random/mtrand/distributions.h
numpy/random/mtrand/generate_mtrand_c.py
numpy/random/mtrand/initarray.c
numpy/random/mtrand/initarray.h
numpy/random/mtrand/mtrand.c
numpy/random/mtrand/mtrand.pyx
numpy/random/mtrand/randomkit.c
numpy/random/mtrand/randomkit.h
numpy/random/mtrand/scipy.pxi
numpy/random/setup.py
numpy/setup.py
numpy/testing/__init__.py
numpy/testing/info.py
numpy/testing/scipytest.py
numpy/testing/setup.py
numpy/testing/utils.py
scipy/__init__.py
scipy/_import_tools.py
scipy/base/__init__.py
scipy/base/_internal.py
scipy/base/arrayprint.py
scipy/base/blasdot/_dotblas.c
scipy/base/blasdot/cblas.h
scipy/base/chararray.py
scipy/base/code_generators/array_api_order.txt
scipy/base/code_generators/genapi.py
scipy/base/code_generators/generate_array_api.py
scipy/base/code_generators/generate_ufunc_api.py
scipy/base/code_generators/generate_umath.py
scipy/base/code_generators/multiarray_api_order.txt
scipy/base/code_generators/ufunc_api_order.txt
scipy/base/convertcode.py
scipy/base/function_base.py
scipy/base/getlimits.py
scipy/base/include/scipy/arrayobject.h
scipy/base/include/scipy/ufuncobject.h
scipy/base/index_tricks.py
scipy/base/info.py
scipy/base/ma.py
scipy/base/machar.py
scipy/base/matrix.py
scipy/base/memmap.py
scipy/base/mlab.py
scipy/base/numeric.py
scipy/base/numerictypes.py
scipy/base/oldnumeric.py
scipy/base/polynomial.py
scipy/base/records.py
scipy/base/scimath.py
scipy/base/setup.py
scipy/base/shape_base.py
scipy/base/src/_compiled_base.c
scipy/base/src/_isnan.c
scipy/base/src/_signbit.c
scipy/base/src/_sortmodule.c.src
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/arraytypes.inc.src
scipy/base/src/multiarraymodule.c
scipy/base/src/scalarmathmodule.c.src
scipy/base/src/scalartypes.inc.src
scipy/base/src/ufuncobject.c
scipy/base/src/umathmodule.c.src
scipy/base/tests/test_function_base.py
scipy/base/tests/test_getlimits.py
scipy/base/tests/test_index_tricks.py
scipy/base/tests/test_ma.py
scipy/base/tests/test_matrix.py
scipy/base/tests/test_polynomial.py
scipy/base/tests/test_records.py
scipy/base/tests/test_shape_base.py
scipy/base/tests/test_twodim_base.py
scipy/base/tests/test_type_check.py
scipy/base/tests/test_ufunclike.py
scipy/base/tests/test_umath.py
scipy/base/tests/testdata.fits
scipy/base/twodim_base.py
scipy/base/type_check.py
scipy/base/ufunclike.py
scipy/base/utils.py
scipy/core_version.py
scipy/corefft/__init__.py
scipy/corefft/fftpack.c
scipy/corefft/fftpack.h
scipy/corefft/fftpack.py
scipy/corefft/fftpack_litemodule.c
scipy/corefft/helper.py
scipy/corefft/info.py
scipy/corefft/setup.py
scipy/corefft/tests/test_helper.py
scipy/corelinalg/__init__.py
scipy/corelinalg/blas_lite.c
scipy/corelinalg/dlamch.c
scipy/corelinalg/dlapack_lite.c
scipy/corelinalg/f2c.h
scipy/corelinalg/f2c_lite.c
scipy/corelinalg/info.py
scipy/corelinalg/lapack_litemodule.c
scipy/corelinalg/linalg.py
scipy/corelinalg/setup.py
scipy/corelinalg/zlapack_lite.c
scipy/distutils/__init__.py
scipy/distutils/__version__.py
scipy/distutils/ccompiler.py
scipy/distutils/command/__init__.py
scipy/distutils/command/bdist_rpm.py
scipy/distutils/command/build.py
scipy/distutils/command/build_clib.py
scipy/distutils/command/build_ext.py
scipy/distutils/command/build_py.py
scipy/distutils/command/build_scripts.py
scipy/distutils/command/build_src.py
scipy/distutils/command/config.py
scipy/distutils/command/config_compiler.py
scipy/distutils/command/install.py
scipy/distutils/command/install_data.py
scipy/distutils/command/install_headers.py
scipy/distutils/command/sdist.py
scipy/distutils/conv_template.py
scipy/distutils/core.py
scipy/distutils/cpuinfo.py
scipy/distutils/exec_command.py
scipy/distutils/extension.py
scipy/distutils/fcompiler/__init__.py
scipy/distutils/fcompiler/absoft.py
scipy/distutils/fcompiler/compaq.py
scipy/distutils/fcompiler/g95.py
scipy/distutils/fcompiler/gnu.py
scipy/distutils/fcompiler/hpux.py
scipy/distutils/fcompiler/ibm.py
scipy/distutils/fcompiler/intel.py
scipy/distutils/fcompiler/lahey.py
scipy/distutils/fcompiler/mips.py
scipy/distutils/fcompiler/nag.py
scipy/distutils/fcompiler/none.py
scipy/distutils/fcompiler/pg.py
scipy/distutils/fcompiler/sun.py
scipy/distutils/fcompiler/vast.py
scipy/distutils/from_template.py
scipy/distutils/intelccompiler.py
scipy/distutils/lib2def.py
scipy/distutils/line_endings.py
scipy/distutils/log.py
scipy/distutils/mingw32ccompiler.py
scipy/distutils/misc_util.py
scipy/distutils/setup.py
scipy/distutils/system_info.py
scipy/distutils/tests/f2py_ext/__init__.py
scipy/distutils/tests/f2py_ext/setup.py
scipy/distutils/tests/f2py_ext/src/fib1.f
scipy/distutils/tests/f2py_ext/src/fib2.pyf
scipy/distutils/tests/f2py_ext/tests/test_fib2.py
scipy/distutils/tests/f2py_f90_ext/__init__.py
scipy/distutils/tests/f2py_f90_ext/include/body.f90
scipy/distutils/tests/f2py_f90_ext/setup.py
scipy/distutils/tests/f2py_f90_ext/src/foo_free.f90
scipy/distutils/tests/f2py_f90_ext/tests/test_foo.py
scipy/distutils/tests/gen_ext/__init__.py
scipy/distutils/tests/gen_ext/setup.py
scipy/distutils/tests/gen_ext/tests/test_fib3.py
scipy/distutils/tests/swig_ext/__init__.py
scipy/distutils/tests/swig_ext/setup.py
scipy/distutils/tests/swig_ext/src/example.c
scipy/distutils/tests/swig_ext/src/example.i
scipy/distutils/tests/swig_ext/src/zoo.cc
scipy/distutils/tests/swig_ext/src/zoo.h
scipy/distutils/tests/swig_ext/src/zoo.i
scipy/distutils/tests/swig_ext/tests/test_example.py
scipy/distutils/tests/swig_ext/tests/test_example2.py
scipy/distutils/tests/test_misc_util.py
scipy/distutils/unixccompiler.py
scipy/doc/CAPI.txt
scipy/doc/DISTUTILS.txt
scipy/doc/README.txt
scipy/doc/records.txt
scipy/doc/ufuncs.txt
scipy/f2py/BUGS.txt
scipy/f2py/Makefile
scipy/f2py/NEWS.txt
scipy/f2py/README.txt
scipy/f2py/TODO.txt
scipy/f2py/__init__.py
scipy/f2py/__version__.py
scipy/f2py/auxfuncs.py
scipy/f2py/capi_maps.py
scipy/f2py/cb_rules.py
scipy/f2py/cfuncs.py
scipy/f2py/common_rules.py
scipy/f2py/crackfortran.py
scipy/f2py/diagnose.py
scipy/f2py/doc/Makefile
scipy/f2py/doc/Release-1.x.txt
scipy/f2py/doc/Release-2.x.txt
scipy/f2py/doc/Release-3.x.txt
scipy/f2py/doc/Release-4.x.txt
scipy/f2py/doc/apps.tex
scipy/f2py/doc/bugs.tex
scipy/f2py/doc/collectinput.py
scipy/f2py/doc/commands.tex
scipy/f2py/doc/ex1/arr.f
scipy/f2py/doc/ex1/bar.f
scipy/f2py/doc/ex1/foo.f
scipy/f2py/doc/ex1/foobar-smart.f90
scipy/f2py/doc/ex1/foobar.f90
scipy/f2py/doc/ex1/foobarmodule.tex
scipy/f2py/doc/ex1/runme
scipy/f2py/doc/f2py2e.tex
scipy/f2py/doc/f2python9-final/README.txt
scipy/f2py/doc/f2python9-final/aerostructure.jpg
scipy/f2py/doc/f2python9-final/flow.jpg
scipy/f2py/doc/f2python9-final/mk_html.sh
scipy/f2py/doc/f2python9-final/mk_pdf.sh
scipy/f2py/doc/f2python9-final/mk_ps.sh
scipy/f2py/doc/f2python9-final/src/examples/exp1.f
scipy/f2py/doc/f2python9-final/src/examples/exp1mess.txt
scipy/f2py/doc/f2python9-final/src/examples/exp1session.txt
scipy/f2py/doc/f2python9-final/src/examples/foo.pyf
scipy/f2py/doc/f2python9-final/src/examples/foom.pyf
scipy/f2py/doc/f2python9-final/structure.jpg
scipy/f2py/doc/fortranobject.tex
scipy/f2py/doc/index.html
scipy/f2py/doc/intro.tex
scipy/f2py/doc/multiarray/array_from_pyobj.c
scipy/f2py/doc/multiarray/bar.c
scipy/f2py/doc/multiarray/foo.f
scipy/f2py/doc/multiarray/fortran_array_from_pyobj.txt
scipy/f2py/doc/multiarray/fun.pyf
scipy/f2py/doc/multiarray/run.pyf
scipy/f2py/doc/multiarray/transpose.txt
scipy/f2py/doc/multiarrays.txt
scipy/f2py/doc/notes.tex
scipy/f2py/doc/oldnews.html
scipy/f2py/doc/options.tex
scipy/f2py/doc/python9.tex
scipy/f2py/doc/signaturefile.tex
scipy/f2py/doc/using_F_compiler.txt
scipy/f2py/doc/win32_notes.txt
scipy/f2py/docs/FAQ.txt
scipy/f2py/docs/HISTORY.txt
scipy/f2py/docs/OLDNEWS.txt
scipy/f2py/docs/README.txt
scipy/f2py/docs/TESTING.txt
scipy/f2py/docs/THANKS.txt
scipy/f2py/docs/default.css
scipy/f2py/docs/docutils.conf
scipy/f2py/docs/hello.f
scipy/f2py/docs/pyforttest.pyf
scipy/f2py/docs/pytest.py
scipy/f2py/docs/simple.f
scipy/f2py/docs/simple_session.dat
scipy/f2py/docs/usersguide/allocarr.f90
scipy/f2py/docs/usersguide/allocarr_session.dat
scipy/f2py/docs/usersguide/array.f
scipy/f2py/docs/usersguide/array_session.dat
scipy/f2py/docs/usersguide/calculate.f
scipy/f2py/docs/usersguide/calculate_session.dat
scipy/f2py/docs/usersguide/callback.f
scipy/f2py/docs/usersguide/callback2.pyf
scipy/f2py/docs/usersguide/callback_session.dat
scipy/f2py/docs/usersguide/common.f
scipy/f2py/docs/usersguide/common_session.dat
scipy/f2py/docs/usersguide/compile_session.dat
scipy/f2py/docs/usersguide/default.css
scipy/f2py/docs/usersguide/docutils.conf
scipy/f2py/docs/usersguide/extcallback.f
scipy/f2py/docs/usersguide/extcallback_session.dat
scipy/f2py/docs/usersguide/fib1.f
scipy/f2py/docs/usersguide/fib1.pyf
scipy/f2py/docs/usersguide/fib2.pyf
scipy/f2py/docs/usersguide/fib3.f
scipy/f2py/docs/usersguide/ftype.f
scipy/f2py/docs/usersguide/ftype_session.dat
scipy/f2py/docs/usersguide/index.txt
scipy/f2py/docs/usersguide/moddata.f90
scipy/f2py/docs/usersguide/moddata_session.dat
scipy/f2py/docs/usersguide/run_main_session.dat
scipy/f2py/docs/usersguide/scalar.f
scipy/f2py/docs/usersguide/scalar_session.dat
scipy/f2py/docs/usersguide/setup_example.py
scipy/f2py/docs/usersguide/spam.pyf
scipy/f2py/docs/usersguide/spam_session.dat
scipy/f2py/docs/usersguide/string.f
scipy/f2py/docs/usersguide/string_session.dat
scipy/f2py/docs/usersguide/var.pyf
scipy/f2py/docs/usersguide/var_session.dat
scipy/f2py/f2py.1
scipy/f2py/f2py2e.py
scipy/f2py/f2py_testing.py
scipy/f2py/f90mod_rules.py
scipy/f2py/func2subr.py
scipy/f2py/rules.py
scipy/f2py/setup.cfg
scipy/f2py/setup.py
scipy/f2py/src/fortranobject.c
scipy/f2py/src/fortranobject.h
scipy/f2py/src/test/Makefile
scipy/f2py/src/test/bar.f
scipy/f2py/src/test/foo.f
scipy/f2py/src/test/foo90.f90
scipy/f2py/src/test/foomodule.c
scipy/f2py/src/test/wrap.f
scipy/f2py/tests/array_from_pyobj/__init__.py
scipy/f2py/tests/array_from_pyobj/setup.py
scipy/f2py/tests/array_from_pyobj/tests/test_array_from_pyobj.py
scipy/f2py/tests/array_from_pyobj/wrapmodule.c
scipy/f2py/tests/c/return_real.py
scipy/f2py/tests/f77/callback.py
scipy/f2py/tests/f77/return_character.py
scipy/f2py/tests/f77/return_complex.py
scipy/f2py/tests/f77/return_integer.py
scipy/f2py/tests/f77/return_logical.py
scipy/f2py/tests/f77/return_real.py
scipy/f2py/tests/f90/return_character.py
scipy/f2py/tests/f90/return_complex.py
scipy/f2py/tests/f90/return_integer.py
scipy/f2py/tests/f90/return_logical.py
scipy/f2py/tests/f90/return_real.py
scipy/f2py/tests/mixed/foo.f
scipy/f2py/tests/mixed/foo_fixed.f90
scipy/f2py/tests/mixed/foo_free.f90
scipy/f2py/tests/mixed/run.py
scipy/f2py/tests/run_all.py
scipy/f2py/use_rules.py
scipy/random/__init__.py
scipy/random/info.py
scipy/random/mtrand/Python.pxi
scipy/random/mtrand/distributions.c
scipy/random/mtrand/distributions.h
scipy/random/mtrand/generate_mtrand_c.py
scipy/random/mtrand/initarray.c
scipy/random/mtrand/initarray.h
scipy/random/mtrand/mtrand.c
scipy/random/mtrand/mtrand.pyx
scipy/random/mtrand/randomkit.c
scipy/random/mtrand/randomkit.h
scipy/random/mtrand/scipy.pxi
scipy/random/setup.py
scipy/setup.py
scipy/testing/__init__.py
scipy/testing/info.py
scipy/testing/scipytest.py
scipy/testing/setup.py
scipy/testing/utils.py
==================
2581fe8;chanley;2006-01-04 15:51:02 +0000;test change

==

TEST_COMMIT
==================
ddaed64;Travis Oliphant;2006-01-04 07:35:17 +0000;Added compare to dtypedescr and typeNA dict

==

scipy/base/numerictypes.py
scipy/base/src/arrayobject.c
==================
3b4ee4f;sasha;2006-01-04 05:53:16 +0000;fixed sf bug 1395646

==

scipy/base/ma.py
scipy/base/tests/test_ma.py
==================
1c2c47b;sasha;2006-01-04 04:52:58 +0000;test commit privilege

==

TEST_COMMIT
==================
95fc448;Travis Oliphant;2006-01-03 09:55:18 +0000;Forced fields to be a proxy object (read-only from Python) and added ability to document dynamically object attributes.

==

scipy/base/scimath.py
scipy/base/src/_compiled_base.c
scipy/base/src/arrayobject.c
==================
4712a37;Travis Oliphant;2006-01-02 08:26:24 +0000;Moved weave to scipy

==

scipy/setup.py
scipy/weave/LICENSE.txt
scipy/weave/README.txt
scipy/weave/__init__.py
scipy/weave/accelerate_tools.py
scipy/weave/ast_tools.py
scipy/weave/base_info.py
scipy/weave/base_spec.py
scipy/weave/blitz/blitz/Makefile.am
scipy/weave/blitz/blitz/Makefile.in
scipy/weave/blitz/blitz/README
scipy/weave/blitz/blitz/applics.h
scipy/weave/blitz/blitz/array-impl.h
scipy/weave/blitz/blitz/array-old.h
scipy/weave/blitz/blitz/array.h
scipy/weave/blitz/blitz/array/Makefile.am
scipy/weave/blitz/blitz/array/Makefile.in
scipy/weave/blitz/blitz/array/asexpr.h
scipy/weave/blitz/blitz/array/bops.cc
scipy/weave/blitz/blitz/array/cartesian.h
scipy/weave/blitz/blitz/array/cgsolve.h
scipy/weave/blitz/blitz/array/complex.cc
scipy/weave/blitz/blitz/array/convolve.cc
scipy/weave/blitz/blitz/array/convolve.h
scipy/weave/blitz/blitz/array/cycle.cc
scipy/weave/blitz/blitz/array/domain.h
scipy/weave/blitz/blitz/array/et.h
scipy/weave/blitz/blitz/array/eval.cc
scipy/weave/blitz/blitz/array/expr.h
scipy/weave/blitz/blitz/array/fastiter.h
scipy/weave/blitz/blitz/array/funcs.h
scipy/weave/blitz/blitz/array/functorExpr.h
scipy/weave/blitz/blitz/array/geometry.h
scipy/weave/blitz/blitz/array/indirect.h
scipy/weave/blitz/blitz/array/interlace.cc
scipy/weave/blitz/blitz/array/io.cc
scipy/weave/blitz/blitz/array/iter.h
scipy/weave/blitz/blitz/array/map.h
scipy/weave/blitz/blitz/array/methods.cc
scipy/weave/blitz/blitz/array/misc.cc
scipy/weave/blitz/blitz/array/multi.h
scipy/weave/blitz/blitz/array/newbops.cc
scipy/weave/blitz/blitz/array/newet-macros.h
scipy/weave/blitz/blitz/array/newet.h
scipy/weave/blitz/blitz/array/ops.cc
scipy/weave/blitz/blitz/array/ops.h
scipy/weave/blitz/blitz/array/reduce.cc
scipy/weave/blitz/blitz/array/reduce.h
scipy/weave/blitz/blitz/array/resize.cc
scipy/weave/blitz/blitz/array/shape.h
scipy/weave/blitz/blitz/array/slice.h
scipy/weave/blitz/blitz/array/slicing.cc
scipy/weave/blitz/blitz/array/stencil-et.h
scipy/weave/blitz/blitz/array/stencil.cc
scipy/weave/blitz/blitz/array/stencil.h
scipy/weave/blitz/blitz/array/stencilops.h
scipy/weave/blitz/blitz/array/stencils.cc
scipy/weave/blitz/blitz/array/stencils.h
scipy/weave/blitz/blitz/array/storage.h
scipy/weave/blitz/blitz/array/uops.cc
scipy/weave/blitz/blitz/array/where.h
scipy/weave/blitz/blitz/array/zip.h
scipy/weave/blitz/blitz/bench.cc
scipy/weave/blitz/blitz/bench.h
scipy/weave/blitz/blitz/benchext.cc
scipy/weave/blitz/blitz/benchext.h
scipy/weave/blitz/blitz/blitz.h
scipy/weave/blitz/blitz/bzconfig.h
scipy/weave/blitz/blitz/bzdebug.h
scipy/weave/blitz/blitz/compiler.h
scipy/weave/blitz/blitz/config.h.in
scipy/weave/blitz/blitz/etbase.h
scipy/weave/blitz/blitz/extremum.h
scipy/weave/blitz/blitz/funcs.h
scipy/weave/blitz/blitz/generate/Makefile.am
scipy/weave/blitz/blitz/generate/Makefile.in
scipy/weave/blitz/blitz/generate/arroperands.h
scipy/weave/blitz/blitz/generate/arroptuple.h
scipy/weave/blitz/blitz/generate/bzfstream.h
scipy/weave/blitz/blitz/generate/genarrbops.cpp
scipy/weave/blitz/blitz/generate/genarruops.cpp
scipy/weave/blitz/blitz/generate/genmatbops.cpp
scipy/weave/blitz/blitz/generate/genmathfunc.cpp
scipy/weave/blitz/blitz/generate/genmatuops.cpp
scipy/weave/blitz/blitz/generate/genpromote.cpp
scipy/weave/blitz/blitz/generate/genvecbfn.cpp
scipy/weave/blitz/blitz/generate/genvecbops.cpp
scipy/weave/blitz/blitz/generate/genvecuops.cpp
scipy/weave/blitz/blitz/generate/genvecwhere.cpp
scipy/weave/blitz/blitz/generate/operands.h
scipy/weave/blitz/blitz/generate/operands2.h
scipy/weave/blitz/blitz/generate/optuple.h
scipy/weave/blitz/blitz/generate/optuple2.h
scipy/weave/blitz/blitz/indexexpr.h
scipy/weave/blitz/blitz/limits-hack.h
scipy/weave/blitz/blitz/listinit.h
scipy/weave/blitz/blitz/matbops.h
scipy/weave/blitz/blitz/matdiag.h
scipy/weave/blitz/blitz/matexpr.h
scipy/weave/blitz/blitz/matgen.h
scipy/weave/blitz/blitz/mathf2.h
scipy/weave/blitz/blitz/mathfunc.h
scipy/weave/blitz/blitz/matltri.h
scipy/weave/blitz/blitz/matref.h
scipy/weave/blitz/blitz/matrix.cc
scipy/weave/blitz/blitz/matrix.h
scipy/weave/blitz/blitz/matsymm.h
scipy/weave/blitz/blitz/mattoep.h
scipy/weave/blitz/blitz/matuops.h
scipy/weave/blitz/blitz/matutri.h
scipy/weave/blitz/blitz/memblock.cc
scipy/weave/blitz/blitz/memblock.h
scipy/weave/blitz/blitz/meta/Makefile.am
scipy/weave/blitz/blitz/meta/Makefile.in
scipy/weave/blitz/blitz/meta/dot.h
scipy/weave/blitz/blitz/meta/matassign.h
scipy/weave/blitz/blitz/meta/matmat.h
scipy/weave/blitz/blitz/meta/matvec.h
scipy/weave/blitz/blitz/meta/metaprog.h
scipy/weave/blitz/blitz/meta/product.h
scipy/weave/blitz/blitz/meta/sum.h
scipy/weave/blitz/blitz/meta/vecassign.h
scipy/weave/blitz/blitz/minmax.h
scipy/weave/blitz/blitz/mstruct.h
scipy/weave/blitz/blitz/numinquire.h
scipy/weave/blitz/blitz/numtrait.h
scipy/weave/blitz/blitz/ops.h
scipy/weave/blitz/blitz/prettyprint.h
scipy/weave/blitz/blitz/promote-old.h
scipy/weave/blitz/blitz/promote.h
scipy/weave/blitz/blitz/rand-dunif.h
scipy/weave/blitz/blitz/rand-mt.h
scipy/weave/blitz/blitz/rand-normal.h
scipy/weave/blitz/blitz/rand-tt800.h
scipy/weave/blitz/blitz/rand-uniform.h
scipy/weave/blitz/blitz/random.h
scipy/weave/blitz/blitz/randref.h
scipy/weave/blitz/blitz/range.h
scipy/weave/blitz/blitz/reduce.h
scipy/weave/blitz/blitz/shapecheck.h
scipy/weave/blitz/blitz/tau.h
scipy/weave/blitz/blitz/timer.h
scipy/weave/blitz/blitz/tiny.h
scipy/weave/blitz/blitz/tinymat.h
scipy/weave/blitz/blitz/tinymatexpr.h
scipy/weave/blitz/blitz/tinymatio.cc
scipy/weave/blitz/blitz/tinyvec-et.h
scipy/weave/blitz/blitz/tinyvec.cc
scipy/weave/blitz/blitz/tinyvec.h
scipy/weave/blitz/blitz/tinyvecio.cc
scipy/weave/blitz/blitz/tinyveciter.h
scipy/weave/blitz/blitz/traversal.cc
scipy/weave/blitz/blitz/traversal.h
scipy/weave/blitz/blitz/tuning.h
scipy/weave/blitz/blitz/tvcross.h
scipy/weave/blitz/blitz/tvecglobs.h
scipy/weave/blitz/blitz/update.h
scipy/weave/blitz/blitz/vecaccum.cc
scipy/weave/blitz/blitz/vecall.cc
scipy/weave/blitz/blitz/vecany.cc
scipy/weave/blitz/blitz/vecbfn.cc
scipy/weave/blitz/blitz/vecbops.cc
scipy/weave/blitz/blitz/veccount.cc
scipy/weave/blitz/blitz/vecdelta.cc
scipy/weave/blitz/blitz/vecdot.cc
scipy/weave/blitz/blitz/vecexpr.h
scipy/weave/blitz/blitz/vecexprwrap.h
scipy/weave/blitz/blitz/vecglobs.cc
scipy/weave/blitz/blitz/vecglobs.h
scipy/weave/blitz/blitz/vecio.cc
scipy/weave/blitz/blitz/veciter.h
scipy/weave/blitz/blitz/vecmax.cc
scipy/weave/blitz/blitz/vecmin.cc
scipy/weave/blitz/blitz/vecnorm.cc
scipy/weave/blitz/blitz/vecnorm1.cc
scipy/weave/blitz/blitz/vecpick.cc
scipy/weave/blitz/blitz/vecpick.h
scipy/weave/blitz/blitz/vecpickio.cc
scipy/weave/blitz/blitz/vecpickiter.h
scipy/weave/blitz/blitz/vecsum.cc
scipy/weave/blitz/blitz/vector-et.h
scipy/weave/blitz/blitz/vector.cc
scipy/weave/blitz/blitz/vector.h
scipy/weave/blitz/blitz/vecuops.cc
scipy/weave/blitz/blitz/vecwhere.cc
scipy/weave/blitz/blitz/vecwhere.h
scipy/weave/blitz/blitz/wrap-climits.h
scipy/weave/blitz/blitz/zero.cc
scipy/weave/blitz/blitz/zero.h
scipy/weave/blitz_spec.py
scipy/weave/blitz_tools.py
scipy/weave/build_tools.py
scipy/weave/bytecodecompiler.py
scipy/weave/c_spec.py
scipy/weave/catalog.py
scipy/weave/common_info.py
scipy/weave/converters.py
scipy/weave/cpp_namespace_spec.py
scipy/weave/doc/tutorial.html
scipy/weave/dumb_shelve.py
scipy/weave/dumbdbm_patched.py
scipy/weave/examples/array3d.py
scipy/weave/examples/binary_search.py
scipy/weave/examples/cast_copy_transpose.py
scipy/weave/examples/dict_sort.py
scipy/weave/examples/fibonacci.py
scipy/weave/examples/functional.py
scipy/weave/examples/increment_example.py
scipy/weave/examples/md5_speed.py
scipy/weave/examples/object.py
scipy/weave/examples/print_example.py
scipy/weave/examples/py_none.py
scipy/weave/examples/ramp.c
scipy/weave/examples/ramp.py
scipy/weave/examples/ramp2.py
scipy/weave/examples/support_code_example.py
scipy/weave/examples/swig2_example.py
scipy/weave/examples/swig2_ext.h
scipy/weave/examples/swig2_ext.i
scipy/weave/examples/tuple_return.py
scipy/weave/examples/vq.py
scipy/weave/examples/vtk_example.py
scipy/weave/examples/wx_example.py
scipy/weave/examples/wx_speed.py
scipy/weave/ext_tools.py
scipy/weave/info.py
scipy/weave/inline_tools.py
scipy/weave/platform_info.py
scipy/weave/scxx/README.txt
scipy/weave/scxx/dict.h
scipy/weave/scxx/list.h
scipy/weave/scxx/notes.txt
scipy/weave/scxx/number.h
scipy/weave/scxx/object.h
scipy/weave/scxx/scxx.h
scipy/weave/scxx/sequence.h
scipy/weave/scxx/str.h
scipy/weave/scxx/tuple.h
scipy/weave/scxx/weave_imp.cpp
scipy/weave/setup.py
scipy/weave/size_check.py
scipy/weave/slice_handler.py
scipy/weave/standard_array_spec.py
scipy/weave/swig2_spec.py
scipy/weave/swigptr.py
scipy/weave/swigptr2.py
scipy/weave/tests/scxx_timings.py
scipy/weave/tests/test_ast_tools.py
scipy/weave/tests/test_blitz_tools.py
scipy/weave/tests/test_build_tools.py
scipy/weave/tests/test_c_spec.py
scipy/weave/tests/test_catalog.py
scipy/weave/tests/test_ext_tools.py
scipy/weave/tests/test_inline_tools.py
scipy/weave/tests/test_scxx.py
scipy/weave/tests/test_scxx_dict.py
scipy/weave/tests/test_scxx_object.py
scipy/weave/tests/test_scxx_sequence.py
scipy/weave/tests/test_size_check.py
scipy/weave/tests/test_slice_handler.py
scipy/weave/tests/test_standard_array_spec.py
scipy/weave/tests/test_wx_spec.py
scipy/weave/tests/weave_test_utils.py
scipy/weave/vtk_spec.py
scipy/weave/weave_version.py
scipy/weave/wx_spec.py
==================
b5ba000;Travis Oliphant;2006-01-02 03:50:42 +0000;Added UIntXX inplace of UintXX.  Added Bool type

==

scipy/base/numerictypes.py
scipy/base/oldnumeric.py
scipy/base/src/_sortmodule.c.src
==================
912b8ef;Charles Harris;2006-01-01 23:24:08 +0000;Correct sort documentation

==

scipy/base/src/_sortmodule.c.src
==================
f169e88;Pearu Peterson;2006-01-01 20:54:22 +0000;Applied Andrew Straw patch with modifications to support eggs.

==

scipy/__init__.py
==================
25f1b45;Travis Oliphant;2006-01-01 10:43:33 +0000;Added capability to add docstrings to new types and builtin functions or methods after compilation.  Doc strings can be moved from C-code into a separate Python module and added as needed.

==

scipy/base/src/_compiled_base.c
==================
3313204;Travis Oliphant;2006-01-01 02:25:37 +0000;Added mergesorts for STRING and UNICODE and exposed lexsort

==

scipy/base/numeric.py
scipy/base/src/_sortmodule.c.src
scipy/base/src/arraytypes.inc.src
==================
53d748f;Travis Oliphant;2006-01-01 01:24:59 +0000;Added lexicographic sort.

==

scipy/base/code_generators/multiarray_api_order.txt
scipy/base/numeric.py
scipy/base/src/arraymethods.c
scipy/base/src/multiarraymodule.c
==================
cd9c8d6;Travis Oliphant;2005-12-31 21:31:00 +0000;Added 1-d indexing speed-ups by going through the array iterator when fancy-indexing is needed.  Also added bug-fixes to ma.py from Sourceforge.

==

scipy/base/ma.py
scipy/base/src/arrayobject.c
==================
ee79446;Pearu Peterson;2005-12-31 13:54:05 +0000;Postpone implicit imports of packages without global_symbols.

==

scipy/__init__.py
==================
c54fd7c;Pearu Peterson;2005-12-31 13:16:05 +0000;Fixed getting info files from subpackages. Code clean up.

==

scipy/__init__.py
==================
d32bc1d;Travis Oliphant;2005-12-31 09:21:18 +0000;Fix nasty corner-case.

==

scipy/base/src/arrayobject.c
==================
c2e7e3f;Travis Oliphant;2005-12-31 07:21:07 +0000;Fixed conversion from string to number types

==

TODO.txt
scipy/base/src/arrayobject.c
scipy/base/src/arraytypes.inc.src
==================
1bbcc97;Travis Oliphant;2005-12-31 06:26:25 +0000;Just changed the order of source-code

==

scipy/base/src/_sortmodule.c.src
==================
b83dfab;Travis Oliphant;2005-12-31 05:54:07 +0000;Added other sort methods (heap, merge)

==

scipy/base/code_generators/multiarray_api_order.txt
scipy/base/include/scipy/arrayobject.h
scipy/base/ma.py
scipy/base/src/_sortmodule.c.src
scipy/base/src/arraymethods.c
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
==================
c548d82;Travis Oliphant;2005-12-31 04:07:26 +0000;Added benchmarks folder

==

benchmarks/sorting.py
==================
f0e7d01;Travis Oliphant;2005-12-31 03:53:59 +0000;Fixed bug..

==

scipy/base/src/_sortmodule.c.src
==================
1dd6cca;Travis Oliphant;2005-12-31 03:53:12 +0000;Added complex sorting functions as well.

==

scipy/base/src/_sortmodule.c.src
==================
2cf3888;Travis Oliphant;2005-12-31 03:35:09 +0000;Fixed bug in ma.py and added fast quicksorts.

==

scipy/base/__init__.py
scipy/base/include/scipy/arrayobject.h
scipy/base/ma.py
scipy/base/src/_sortmodule.c.src
scipy/base/src/multiarraymodule.c
==================
f19cbc3;Travis Oliphant;2005-12-31 01:33:42 +0000;Merged fixsort branch.

==
==================
445dc58;Travis Oliphant;2005-12-31 01:21:47 +0000;Adding type-specific sorting functions.

==

scipy/base/code_generators/array_api_order.txt
scipy/base/include/scipy/arrayobject.h
scipy/base/setup.py
scipy/base/src/_sortmodule.c.src
scipy/base/src/arrayobject.c
scipy/base/src/arraytypes.inc.src
scipy/base/src/multiarraymodule.c
scipy/core_version.py
==================
6508583;Travis Oliphant;2005-12-30 23:23:29 +0000;Updated PyArray_ArgSort to allow future sorting choices.

==

scipy/base/src/arraymethods.c
scipy/base/src/multiarraymodule.c
scipy/core_version.py
==================
8d90fbf;Travis Oliphant;2005-12-30 23:10:28 +0000;Fix inplace sorting along other dimension.

==

scipy/base/src/multiarraymodule.c
==================
e9dead2;Travis Oliphant;2005-12-30 22:52:11 +0000;Fixed some other uses of sort method.

==

scipy/base/function_base.py
==================
a2eaf4b;Travis Oliphant;2005-12-30 22:45:35 +0000;Changed sort to be in-place

==

scipy/base/src/multiarraymodule.c
scipy/base/tests/test_function_base.py
==================
2719abd;Travis Oliphant;2005-12-30 22:06:12 +0000;Changed sort to in-place --- uses copy for now.

==

scipy/base/function_base.py
scipy/base/include/scipy/arrayobject.h
scipy/base/oldnumeric.py
scipy/base/src/arraymethods.c
scipy/base/src/multiarraymodule.c
scipy/base/tests/test_function_base.py
==================
4112ff3;Pearu Peterson;2005-12-30 13:55:27 +0000;scipy.distutils doc updates

==

scipy/doc/DISTUTILS.txt
==================
ddea42e;Pearu Peterson;2005-12-30 13:40:45 +0000;Fixed importing _dotblas.

==

scipy/base/numeric.py
==================
d12ad06;Pearu Peterson;2005-12-30 12:11:57 +0000;Removed scipy/lib from scipy_core.

==

scipy/lib/__init__.py
scipy/lib/setup.py
==================
c589b82;Pearu Peterson;2005-12-30 12:10:13 +0000;Moved scipy/lib/blasdot to scipy/base

==

scipy/base/blasdot/_dotblas.c
scipy/base/blasdot/cblas.h
scipy/base/setup.py
scipy/lib/blasdot/_dotblas.c
scipy/lib/blasdot/cblas.h
scipy/lib/setup.py
scipy/setup.py
==================
9338dea;Pearu Peterson;2005-12-30 12:00:24 +0000;Moved scipy.lib.mtrand to scipy.random.

==

scipy/lib/mtrand/Python.pxi
scipy/lib/mtrand/distributions.c
scipy/lib/mtrand/distributions.h
scipy/lib/mtrand/generate_mtrand_c.py
scipy/lib/mtrand/initarray.c
scipy/lib/mtrand/initarray.h
scipy/lib/mtrand/mtrand.c
scipy/lib/mtrand/mtrand.pyx
scipy/lib/mtrand/randomkit.c
scipy/lib/mtrand/randomkit.h
scipy/lib/mtrand/scipy.pxi
scipy/lib/setup.py
scipy/random/__init__.py
scipy/random/info.py
scipy/random/mtrand/Python.pxi
scipy/random/mtrand/distributions.c
scipy/random/mtrand/distributions.h
scipy/random/mtrand/generate_mtrand_c.py
scipy/random/mtrand/initarray.c
scipy/random/mtrand/initarray.h
scipy/random/mtrand/mtrand.c
scipy/random/mtrand/mtrand.pyx
scipy/random/mtrand/randomkit.c
scipy/random/mtrand/randomkit.h
scipy/random/mtrand/scipy.pxi
scipy/random/setup.py
==================
b5cf0b8;Pearu Peterson;2005-12-30 11:46:06 +0000;Introduced postpone kw argument to pkgload. When postpone=True, packages info are read but packages themself are not loaded.

==

scipy/__init__.py
==================
5c1981d;Pearu Peterson;2005-12-30 11:15:56 +0000;MANIFEST.in clean up

==

MANIFEST.in
==================
fcdf391;Travis Oliphant;2005-12-30 03:26:33 +0000;Fixed mistake.

==

scipy/base/index_tricks.py
==================
12fb5f9;Travis Oliphant;2005-12-30 01:59:33 +0000;Fixed problems revealed by pychecker.

==

scipy/base/_internal.py
scipy/base/arrayprint.py
scipy/base/chararray.py
scipy/base/convertcode.py
scipy/base/function_base.py
scipy/base/getlimits.py
scipy/base/index_tricks.py
scipy/base/ma.py
scipy/base/machar.py
scipy/base/matrix.py
scipy/base/numeric.py
scipy/base/oldnumeric.py
scipy/base/polynomial.py
scipy/base/records.py
scipy/base/shape_base.py
scipy/base/type_check.py
==================
ac853f7;Travis Oliphant;2005-12-30 00:08:43 +0000;Fixed problem with mod.

==

scipy/base/function_base.py
==================
b7b5cba;Travis Oliphant;2005-12-29 22:31:47 +0000;Added string initialization conversion to chararray.

==

MANIFEST.in
scipy/base/chararray.py
==================
55a0865;Travis Oliphant;2005-12-29 22:15:02 +0000;Fixed up chararray a bit.

==

scipy/base/chararray.py
scipy/base/src/arraytypes.inc.src
scipy/base/src/multiarraymodule.c
==================
d54955f;chanley;2005-12-29 16:00:17 +0000;Added records unittest for fromfile method.  Included file testdata.fits file for use in test.

==

MANIFEST.in
scipy/base/tests/test_records.py
scipy/base/tests/testdata.fits
==================
3e11aea;Travis Oliphant;2005-12-29 11:57:32 +0000;Remove special method names for void scalar types

==

scipy/base/src/arraytypes.inc.src
==================
1439e1e;Travis Oliphant;2005-12-29 11:37:29 +0000;Improvements to nested records.

==

scipy/base/src/arrayobject.c
scipy/base/src/arraytypes.inc.src
scipy/base/src/multiarraymodule.c
==================
d846106;Travis Oliphant;2005-12-29 08:33:08 +0000;Changed some expected outputs in docstrings

==

scipy/base/records.py
==================
c0caf58;Travis Oliphant;2005-12-29 08:29:39 +0000;Don't set fields attribute in record type (get it from dtypedescr).

==

scipy/base/records.py
scipy/base/src/arrayobject.c
scipy/base/src/scalartypes.inc.src
==================
a8adf72;Travis Oliphant;2005-12-29 08:19:50 +0000;Fix so that anytime fields are defined void array-scalars don't copy data.

==

scipy/base/src/arrayobject.c
==================
4352925;Travis Oliphant;2005-12-29 08:11:28 +0000;Improved void array-scalar type so that it has named-field access

==

scipy/base/src/arrayobject.c
scipy/base/src/scalartypes.inc.src
==================
de779c8;Travis Oliphant;2005-12-28 20:09:56 +0000;Fixed use of byteorder.

==

scipy/base/records.py
==================
922f7cf;Travis Oliphant;2005-12-28 03:17:55 +0000;Added an mlab so that there is one file to replace the old MLab functionality.

==

scipy/base/convertcode.py
scipy/base/function_base.py
scipy/base/ma.py
scipy/base/mlab.py
scipy/base/oldnumeric.py
scipy/base/shape_base.py
scipy/base/src/arraymethods.c
scipy/base/tests/test_function_base.py
scipy/base/twodim_base.py
==================
4b61fd0;chanley;2005-12-27 20:16:54 +0000;new test for records method fromarrays

==

scipy/base/tests/test_records.py
==================
65d5f7f;Travis Oliphant;2005-12-26 09:27:42 +0000;Changed .toscalar() method to .item()

==

scipy/base/arrayprint.py
scipy/base/chararray.py
scipy/base/convertcode.py
scipy/base/ma.py
scipy/base/records.py
scipy/base/src/arraymethods.c
scipy/base/src/scalartypes.inc.src
scipy/base/tests/test_ma.py
scipy/base/tests/test_records.py
scipy/base/type_check.py
==================
c46f152;Travis Oliphant;2005-12-26 09:09:35 +0000;Don't define extra variables if we don't use them.

==

scipy/base/src/arrayobject.c
==================
1208810;Travis Oliphant;2005-12-26 08:38:21 +0000;Fix so that array can be used to construct default record arrays.

==

scipy/base/src/arrayobject.c
scipy/base/src/arraytypes.inc.src
==================
0110167;Pearu Peterson;2005-12-26 08:12:06 +0000;Fixing svn commit testing issues.

==

scipy/testing/__init__.py
==================
15ad048;Pearu Peterson;2005-12-26 08:02:07 +0000;Fixing svn commit testing issues

==

scipy/testing/__init__.py
scipy/testing/info.py
scipy/testing/scipytest.py
scipy/testing/setup.py
scipy/testing/utils.py
==================
076c9da;Pearu Peterson;2005-12-26 08:00:53 +0000;Fixing svn commit testing issues

==

scipy/testing/__init__.py
scipy/testing/info.py
scipy/testing/scipy_test_version.py
scipy/testing/scipytest.py
scipy/testing/setup.py
scipy/testing/setup_scipy_test.py
scipy/testing/testing.py
scipy/testing/utils.py
==================
a1d0059;Pearu Peterson;2005-12-26 07:49:25 +0000;Renamed scipy.test module to scipy.testing. Clean up testing.

==

scipy/__init__.py
scipy/base/__init__.py
scipy/base/info.py
scipy/base/tests/test_function_base.py
scipy/base/tests/test_getlimits.py
scipy/base/tests/test_index_tricks.py
scipy/base/tests/test_ma.py
scipy/base/tests/test_matrix.py
scipy/base/tests/test_polynomial.py
scipy/base/tests/test_records.py
scipy/base/tests/test_shape_base.py
scipy/base/tests/test_twodim_base.py
scipy/base/tests/test_type_check.py
scipy/base/tests/test_ufunclike.py
scipy/base/tests/test_umath.py
scipy/corefft/__init__.py
scipy/corefft/tests/test_helper.py
scipy/corelinalg/__init__.py
scipy/distutils/__init__.py
scipy/distutils/tests/test_misc_util.py
scipy/random/__init__.py
scipy/setup.py
scipy/test/__init__.py
scipy/test/auto_test.py
scipy/test/info.py
scipy/test/scipy_test_version.py
scipy/test/setup_scipy_test.py
scipy/test/testing.py
scipy/testing/__init__.py
scipy/testing/info.py
scipy/testing/scipy_test_version.py
scipy/testing/scipytest.py
scipy/testing/setup.py
scipy/testing/setup_scipy_test.py
scipy/testing/testing.py
scipy/testing/utils.py
scipy/weave/__init__.py
scipy/weave/blitz_tools.py
scipy/weave/info.py
scipy/weave/info_weave.py
scipy/weave/setup.py
scipy/weave/tests/test_ast_tools.py
scipy/weave/tests/test_blitz_tools.py
scipy/weave/tests/test_build_tools.py
scipy/weave/tests/test_c_spec.py
scipy/weave/tests/test_catalog.py
scipy/weave/tests/test_ext_tools.py
scipy/weave/tests/test_inline_tools.py
scipy/weave/tests/test_scxx.py
scipy/weave/tests/test_scxx_dict.py
scipy/weave/tests/test_scxx_object.py
scipy/weave/tests/test_scxx_sequence.py
scipy/weave/tests/test_size_check.py
scipy/weave/tests/test_slice_handler.py
scipy/weave/tests/test_standard_array_spec.py
scipy/weave/tests/test_wx_spec.py
scipy/weave/tests/weave_test_utils.py
scipy/weave/weave_version.py
==================
36e55fb;Travis Oliphant;2005-12-26 07:29:42 +0000;Changed the version in preparation for a release.

==

scipy/core_version.py
==================
0bc5df9;Travis Oliphant;2005-12-26 07:28:46 +0000;Changed rtype to dtype in reduce for consistency.

==

scipy/base/oldnumeric.py
scipy/base/src/arraymethods.c
scipy/base/src/ufuncobject.c
==================
7b9f051;Travis Oliphant;2005-12-26 06:42:10 +0000;Added redefinitions of corelinalg and corefft functions duplicated in full scipy linalg and fft

==

scipy/corefft/__init__.py
scipy/corefft/fftpack.py
scipy/corefft/info.py
scipy/corelinalg/__init__.py
scipy/corelinalg/info.py
scipy/corelinalg/linalg.py
scipy/lib/mtrand/mtrand.c
scipy/lib/mtrand/mtrand.pyx
==================
08be341;Travis Oliphant;2005-12-26 04:25:46 +0000;Changed corerandom to random to reflect that it will not be 'supplanted' by full scipy.

==

scipy/__init__.py
scipy/base/convertcode.py
scipy/setup.py
==================
e9d1483;Travis Oliphant;2005-12-26 04:06:49 +0000;Removed separate random.py file.

==

scipy/random/__init__.py
scipy/random/random.py
==================
d0ec8c0;Travis Oliphant;2005-12-26 04:02:45 +0000;Renamed corerandom to random

==

scipy/corerandom/__init__.py
scipy/corerandom/info.py
scipy/corerandom/random.py
scipy/corerandom/setup.py
scipy/random/__init__.py
scipy/random/info.py
scipy/random/random.py
scipy/random/setup.py
==================
2ca38d2;Travis Oliphant;2005-12-25 11:14:53 +0000;Added rudimentary code for over-riding functions in scipy_core with those from full scipy.

==

scipy/corefft/__init__.py
scipy/corelinalg/__init__.py
==================
083e827;Travis Oliphant;2005-12-25 10:21:28 +0000;...and back again.

==

scipy/corerandom/__init__.py
scipy/corerandom/info.py
scipy/corerandom/random.py
scipy/corerandom/setup.py
scipy/corestats/__init__.py
scipy/corestats/info.py
scipy/corestats/random.py
scipy/corestats/setup.py
==================
f1caaab;Travis Oliphant;2005-12-25 10:20:53 +0000;Moved from random to stats.

==

scipy/corerandom/__init__.py
scipy/corerandom/info.py
scipy/corerandom/random.py
scipy/corerandom/setup.py
scipy/corestats/__init__.py
scipy/corestats/info.py
scipy/corestats/random.py
scipy/corestats/setup.py
==================
5fa9528;Travis Oliphant;2005-12-25 10:19:10 +0000;Eliminate basic and move everything to corefft, corelinalg, or corerandom

==

scipy/__init__.py
scipy/base/convertcode.py
scipy/base/matrix.py
scipy/base/polynomial.py
scipy/base/tests/test_matrix.py
scipy/corefft/__init__.py
scipy/corefft/info.py
scipy/corefft/setup.py
scipy/corefft/tests/test_helper.py
scipy/corelinalg/__init__.py
scipy/corelinalg/info.py
scipy/corelinalg/setup.py
scipy/corerandom/__init__.py
scipy/corerandom/info.py
scipy/corerandom/setup.py
scipy/setup.py
==================
25ddd8d;Travis Oliphant;2005-12-25 09:49:16 +0000;Moving out basic tools to higher level.

==

scipy/basic/__init__.py
scipy/basic/fftpack.py
scipy/basic/helper.py
scipy/basic/info.py
scipy/basic/linalg.py
scipy/basic/setup.py
scipy/basic/tests/test_helper.py
scipy/corefft/__init__.py
scipy/corefft/fftpack.py
scipy/corefft/helper.py
scipy/corefft/info.py
scipy/corefft/tests/test_helper.py
scipy/corelinalg/__init__.py
scipy/corelinalg/info.py
scipy/corelinalg/linalg.py
scipy/corerandom/__init__.py
scipy/corerandom/info.py
==================
495a683;Travis Oliphant;2005-12-25 09:45:23 +0000;Create core libraries.

==

scipy/basic/fftpack_lite/fftpack.c
scipy/basic/fftpack_lite/fftpack.h
scipy/basic/fftpack_lite/fftpack_litemodule.c
scipy/basic/lapack_lite/blas_lite.c
scipy/basic/lapack_lite/dlamch.c
scipy/basic/lapack_lite/dlapack_lite.c
scipy/basic/lapack_lite/f2c.h
scipy/basic/lapack_lite/f2c_lite.c
scipy/basic/lapack_lite/lapack_litemodule.c
scipy/basic/lapack_lite/zlapack_lite.c
scipy/basic/random.py
scipy/corefft/fftpack.c
scipy/corefft/fftpack.h
scipy/corefft/fftpack_litemodule.c
scipy/corelinalg/blas_lite.c
scipy/corelinalg/dlamch.c
scipy/corelinalg/dlapack_lite.c
scipy/corelinalg/f2c.h
scipy/corelinalg/f2c_lite.c
scipy/corelinalg/lapack_litemodule.c
scipy/corelinalg/zlapack_lite.c
scipy/corerandom/random.py
==================
5c9620b;cookedm;2005-12-23 20:57:48 +0000;Fix polynomial division

==

scipy/base/polynomial.py
scipy/base/tests/test_polynomial.py
==================
540ddd3;cookedm;2005-12-21 16:43:04 +0000;small change in poly1d docstring

==

scipy/base/polynomial.py
==================
27ee3d2;cookedm;2005-12-21 16:40:27 +0000;p=poly1d([1,2,3], variable='lambda') will use 'lambda' as the variable in str(p)

==

scipy/base/polynomial.py
scipy/base/tests/test_polynomial.py
==================
42e7dd3;Pearu Peterson;2005-12-21 09:01:32 +0000;Removed scipy/test/logging.py, logging is std part of python 2.3 and up.

==

scipy/test/logging.py
==================
9514a6c;Pearu Peterson;2005-12-21 07:40:54 +0000;Introduced SCIPY_IMPORT_VERBOSE env. variable.

==

scipy/__init__.py
==================
48d9364;Pearu Peterson;2005-12-21 07:16:11 +0000;Added info.pyc file support to pkgload, needed when freezing with py2app, Josh Marshall patch.

==

scipy/__init__.py
==================
557478e;Pearu Peterson;2005-12-21 06:58:36 +0000;Suppressed pkgload debugging messages.

==

scipy/__init__.py
==================
b35106b;Pearu Peterson;2005-12-20 12:10:07 +0000;Fixed doc string.

==

scipy/__init__.py
==================
0874633;Pearu Peterson;2005-12-20 12:06:09 +0000;Initial but working version of scipy.pkgload method.

==

scipy/__init__.py
scipy/base/info.py
scipy/basic/info.py
==================
1632f00;chanley;2005-12-19 16:03:54 +0000;Moved C++ like variable declarations to start of function to allow scipy_core to build on Solaris using native compilers.

==

scipy/base/src/arrayobject.c
==================
b2f4cb7;Travis Oliphant;2005-12-17 07:39:13 +0000;Fixed use of free instead of _pya_free.  Changed back to use system malloc by default.

==

scipy/base/include/scipy/arrayobject.h
scipy/base/src/arrayobject.c
==================
af176f8;Travis Oliphant;2005-12-17 01:35:07 +0000;Fixed uses of malloc to use Python Memory allocator if desired.

==

scipy/base/include/scipy/arrayobject.h
scipy/base/src/arrayobject.c
scipy/base/src/arraytypes.inc.src
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
scipy/base/src/ufuncobject.c
==================
2eb04a7;Travis Oliphant;2005-12-16 22:31:40 +0000;Updated convertcode.  Added NOTSWAPPED flag as a possible input to PyArray_FromAny to simplify forcing a machine byte-order array.

==

scipy/base/convertcode.py
scipy/base/src/arrayobject.c
==================
654d4d5;Pearu Peterson;2005-12-16 13:36:42 +0000;Fixed docs.

==

scipy/basic/info.py
==================
52fa059;Pearu Peterson;2005-12-16 13:25:53 +0000;Added missing import.

==

scipy/basic/fftpack.py
==================
af71ce6;Pearu Peterson;2005-12-16 13:12:02 +0000;Renamed directory corelib to lib.

==

scipy/corelib/__init__.py
scipy/corelib/blasdot/_dotblas.c
scipy/corelib/blasdot/cblas.h
scipy/corelib/mtrand/Python.pxi
scipy/corelib/mtrand/distributions.c
scipy/corelib/mtrand/distributions.h
scipy/corelib/mtrand/generate_mtrand_c.py
scipy/corelib/mtrand/initarray.c
scipy/corelib/mtrand/initarray.h
scipy/corelib/mtrand/mtrand.c
scipy/corelib/mtrand/mtrand.pyx
scipy/corelib/mtrand/randomkit.c
scipy/corelib/mtrand/randomkit.h
scipy/corelib/mtrand/scipy.pxi
scipy/corelib/setup.py
scipy/lib/__init__.py
scipy/lib/blasdot/_dotblas.c
scipy/lib/blasdot/cblas.h
scipy/lib/mtrand/Python.pxi
scipy/lib/mtrand/distributions.c
scipy/lib/mtrand/distributions.h
scipy/lib/mtrand/generate_mtrand_c.py
scipy/lib/mtrand/initarray.c
scipy/lib/mtrand/initarray.h
scipy/lib/mtrand/mtrand.c
scipy/lib/mtrand/mtrand.pyx
scipy/lib/mtrand/randomkit.c
scipy/lib/mtrand/randomkit.h
scipy/lib/mtrand/scipy.pxi
scipy/lib/setup.py
scipy/setup.py
==================
af25411;Pearu Peterson;2005-12-16 13:06:13 +0000;Moved dotblas back to scipy.corelib (scipy.base.numeric tries to import it)

==

scipy/__init__.py
scipy/_import_tools.py
scipy/base/numeric.py
scipy/basic/__init__.py
scipy/basic/blasdot/_dotblas.c
scipy/basic/blasdot/cblas.h
scipy/basic/setup.py
scipy/corelib/blasdot/_dotblas.c
scipy/corelib/blasdot/cblas.h
scipy/corelib/setup.py
==================
3464418;Pearu Peterson;2005-12-16 12:55:48 +0000;Fixed _dotblas import.

==

scipy/base/numeric.py
==================
62eb8d6;Pearu Peterson;2005-12-16 12:52:24 +0000;Moved linalg_lite, fftpack_lite under scipy.basic. Code clean up.

==

scipy/basic/__init__.py
scipy/basic/basic_lite.py
scipy/basic/blasdot/_dotblas.c
scipy/basic/blasdot/cblas.h
scipy/basic/fft_lite.py
scipy/basic/fftpack.py
scipy/basic/fftpack_lite/fftpack.c
scipy/basic/fftpack_lite/fftpack.h
scipy/basic/fftpack_lite/fftpack_litemodule.c
scipy/basic/lapack_lite/blas_lite.c
scipy/basic/lapack_lite/dlamch.c
scipy/basic/lapack_lite/dlapack_lite.c
scipy/basic/lapack_lite/f2c.h
scipy/basic/lapack_lite/f2c_lite.c
scipy/basic/lapack_lite/lapack_litemodule.c
scipy/basic/lapack_lite/zlapack_lite.c
scipy/basic/linalg.py
scipy/basic/setup.py
scipy/corelib/blasdot/_dotblas.c
scipy/corelib/blasdot/cblas.h
scipy/corelib/fftpack_lite/fftpack.c
scipy/corelib/fftpack_lite/fftpack.h
scipy/corelib/fftpack_lite/fftpack_litemodule.c
scipy/corelib/lapack_lite/blas_lite.c
scipy/corelib/lapack_lite/dlamch.c
scipy/corelib/lapack_lite/dlapack_lite.c
scipy/corelib/lapack_lite/f2c.h
scipy/corelib/lapack_lite/f2c_lite.c
scipy/corelib/lapack_lite/lapack_litemodule.c
scipy/corelib/lapack_lite/zlapack_lite.c
scipy/corelib/setup.py
scipy/doc/DISTUTILS.txt
==================
f05b626;Travis Oliphant;2005-12-16 11:55:18 +0000;Moved random back under basic and added basic to list of modules to import.

==

scipy/__init__.py
scipy/base/include/scipy/arrayobject.h
scipy/basic/__init__.py
scipy/basic/fft.py
scipy/basic/fftpack.py
scipy/basic/info.py
scipy/basic/random.py
scipy/random.py
==================
625ee58;Pearu Peterson;2005-12-16 10:20:34 +0000;Fixed test method when using subpackages as standalone.

==

scipy/distutils/misc_util.py
scipy/distutils/system_info.py
scipy/test/testing.py
==================
83015df;Robert Kern;2005-12-16 09:49:56 +0000; r1600@Blasphemy:  kern | 2005-12-16 01:43:39 -0800  Removed automatic importing of scipy.basic.* into the scipy namespace

==

scipy/__init__.py
scipy/base/matrix.py
scipy/base/polynomial.py
scipy/base/tests/test_matrix.py
scipy/basic/__init__.py
scipy/basic/info.py
scipy/basic/random.py
scipy/corelib/__init__.py
scipy/corelib/mtrand/mtrand.c
scipy/corelib/mtrand/mtrand.pyx
scipy/random.py
==================
4057798;Travis Oliphant;2005-12-16 01:13:47 +0000;Remove silly return from array_flatten.

==

scipy/base/src/arraymethods.c
==================
383bca5;Travis Oliphant;2005-12-15 12:16:30 +0000;Added more macros for consistency

==

scipy/base/include/scipy/arrayobject.h
==================
ec4e73f;Travis Oliphant;2005-12-15 10:45:37 +0000;Minor improvement to dtypedescr printing...

==

scipy/base/src/arrayobject.c
==================
baddbef;Travis Oliphant;2005-12-15 10:37:04 +0000;Added default conversion from array_descr style lists in dtypedescr __new__ method.  Added a default representation for data-type descriptor objects using the typestring (if no fields) or the array_descr representation if fields are present.

==

scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
==================
04070b6;Travis Oliphant;2005-12-15 06:18:15 +0000;Added support to consume the array_descr protocol.:

==

scipy/base/include/scipy/arrayobject.h
scipy/base/src/multiarraymodule.c
==================
14a14bc;Travis Oliphant;2005-12-15 01:57:41 +0000;Clean up more swap references.

==

scipy/base/_internal.py
scipy/base/include/scipy/arrayobject.h
scipy/base/memmap.py
scipy/base/numerictypes.py
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy/base/src/ufuncobject.c
==================
95cb1d0;Travis Oliphant;2005-12-15 00:11:29 +0000;Set Py_None in builtin fields later.

==

scipy/base/src/arraytypes.inc.src
==================
948a716;Travis Oliphant;2005-12-14 23:58:45 +0000;Fixed oversight of saving the flags.

==

scipy/base/records.py
scipy/base/src/arraytypes.inc.src
==================
532fb29;Travis Oliphant;2005-12-14 23:43:56 +0000;Made names more consistent, fixed byteorder for recarrays

==

scipy/base/code_generators/multiarray_api_order.txt
scipy/base/include/scipy/arrayobject.h
scipy/base/records.py
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy/base/src/ufuncobject.c
==================
562bba5;Travis Oliphant;2005-12-14 23:10:37 +0000;Fixed ignorance of byteorder in PyArray_CastToType

==

scipy/base/include/scipy/arrayobject.h
scipy/base/src/arrayobject.c
==================
0a5107b;Travis Oliphant;2005-12-14 22:34:00 +0000;Fix array interface exporting --- set the NOTSWAPPED flag.

==

scipy/base/src/arrayobject.c
==================
e59b7f9;Travis Oliphant;2005-12-14 22:20:05 +0000;Removed NOTSWAPPED flag as it is more aptly handled by the data-type-descriptor object -- PyArray_ISNOTSWAPPED(ap) is still a useful command.

==
==================
9985d7c;Travis Oliphant;2005-12-14 22:03:04 +0000;Added newbyteorder methods.

==

scipy/base/chararray.py
scipy/base/code_generators/array_api_order.txt
scipy/base/code_generators/multiarray_api_order.txt
scipy/base/include/scipy/arrayobject.h
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
scipy/core_version.py
scipy/doc/CAPI.txt
==================
e84aa63;Pearu Peterson;2005-12-14 21:14:33 +0000;Fixed is_64bit.

==

scipy/distutils/cpuinfo.py
==================
16f6a92;Pearu Peterson;2005-12-14 21:07:11 +0000;Fixed typo.

==

scipy/distutils/cpuinfo.py
==================
4bcd528;Pearu Peterson;2005-12-14 20:22:19 +0000;cpu detection fixes for Itanium

==

scipy/distutils/cpuinfo.py
==================
4caffb7;chanley;2005-12-14 17:46:10 +0000;added additional records unittests from numarray

==

scipy/base/tests/test_records.py
==================
6a1ba6d;chanley;2005-12-14 15:45:35 +0000;added array method test to records unittest

==

scipy/base/tests/test_records.py
==================
026c09a;Pearu Peterson;2005-12-14 13:19:55 +0000;Added Intel MKL support.

==

scipy/distutils/cpuinfo.py
scipy/distutils/system_info.py
==================
9df62b0;Travis Oliphant;2005-12-14 12:10:31 +0000;Removed swap paramter

==

scipy/base/_internal.py
scipy/base/chararray.py
scipy/base/code_generators/array_api_order.txt
scipy/base/include/scipy/arrayobject.h
scipy/base/matrix.py
scipy/base/records.py
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/arraytypes.inc.src
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
==================
22f9b86;Travis Oliphant;2005-12-14 09:43:19 +0000;Fixed error.  Added byteorder attribute and allow byte-order prefix in string->dtypedescr conversions.

==

scipy/base/_internal.py
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/arraytypes.inc.src
scipy/base/src/multiarraymodule.c
==================
fe36395;Pearu Peterson;2005-12-14 08:52:02 +0000;Applied prabhu patch.

==

scipy/distutils/misc_util.py
==================
d7d1645;Pearu Peterson;2005-12-14 08:31:28 +0000;Importing misc_util locally.

==

scipy/distutils/log.py
==================
fd7052d;Pearu Peterson;2005-12-14 08:20:33 +0000;Fixed get_scipy_include_dirs when running from scipy core directory. Fixes also python core/scipy/distutils/system_info.py.

==

scipy/distutils/misc_util.py
==================
3ae8598;Travis Oliphant;2005-12-14 03:01:29 +0000;Added string processing to dtypedescr repetoire

==

scipy/base/_internal.py
scipy/base/records.py
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
==================
cffac3d;Travis Oliphant;2005-12-13 22:06:29 +0000;Fix byte-order issues on record arrays.

==

scipy/base/records.py
scipy/base/src/arrayobject.c
scipy/base/src/arraytypes.inc.src
scipy/base/src/scalartypes.inc.src
==================
b5dbca1;chanley;2005-12-13 21:56:50 +0000;quick fix for fromrecords unittest

==

scipy/base/tests/test_records.py
==================
186f646;chanley;2005-12-13 21:46:27 +0000;initial fromrecords unittest

==

scipy/base/tests/test_records.py
==================
7bac5dd;Travis Oliphant;2005-12-13 20:47:46 +0000;Changed the scipy.pxi file in non-essential ways but since it will probably be a reference I figured it might as well look right.

==

scipy/base/convertcode.py
scipy/base/include/scipy/arrayobject.h
scipy/base/src/arrayobject.c
scipy/base/src/arraytypes.inc.src
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
scipy/corelib/mtrand/mtrand.c
scipy/corelib/mtrand/mtrand.pyx
scipy/corelib/mtrand/scipy.pxi
==================
c2f71bc;chanley;2005-12-13 20:27:26 +0000;modified fromstring method

==

scipy/base/records.py
==================
85203aa;Travis Oliphant;2005-12-13 17:21:30 +0000;Bumped up version number.

==

scipy/core_version.py
==================
21711f8;Travis Oliphant;2005-12-13 17:21:02 +0000;Improved VOID_getitem and VOID_setitem when there are fields.  Fixed arange segfault.

==

scipy/base/_internal.py
scipy/base/include/scipy/arrayobject.h
scipy/base/records.py
scipy/base/src/arraytypes.inc.src
scipy/base/src/multiarraymodule.c
==================
aedc138;Travis Oliphant;2005-12-13 08:26:02 +0000;Fixed silly problem in mingw32ccompiler.py

==

scipy/distutils/mingw32ccompiler.py
==================
2da41b1;Travis Oliphant;2005-12-13 07:28:21 +0000;Fix setup.py to include api_generating files.

==

scipy/base/setup.py
==================
a20e397;Travis Oliphant;2005-12-13 06:54:34 +0000;Fixed so swapped record arrays get converted properly.

==

scipy/base/chararray.py
scipy/base/records.py
scipy/base/src/scalartypes.inc.src
scipy/core_version.py
==================
f0995b5;Travis Oliphant;2005-12-13 05:33:13 +0000;Fixed array pickle to handle subclasses.

==

scipy/base/__init__.py
scipy/base/_internal.py
scipy/base/chararray.py
scipy/base/records.py
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/ufuncobject.c
==================
aea56a2;Travis Oliphant;2005-12-13 04:07:36 +0000;Fixed pickling to support arbitrary dtypedescr arrays.

==

scipy/base/__init__.py
scipy/base/numeric.py
scipy/base/records.py
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/arraytypes.inc.src
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
==================
bb4910c;Travis Oliphant;2005-12-12 20:40:06 +0000;Changed name ndrecarray -> recarray.  Disabled default printing and error printing goes to sys.stderr

==

scipy/__init__.py
scipy/_import_tools.py
scipy/base/records.py
==================
c1cc22f;Travis Oliphant;2005-12-12 11:06:43 +0000;Fixed missed dtype->dtypedescr.

==

scipy/base/src/multiarraymodule.c
==================
c14792d;Travis Oliphant;2005-12-11 08:38:41 +0000;Sped up arange and remainder.

==

scipy/base/code_generators/multiarray_api_order.txt
scipy/base/include/scipy/arrayobject.h
scipy/base/src/arraytypes.inc.src
scipy/base/src/multiarraymodule.c
scipy/base/src/umathmodule.c.src
scipy/core_version.py
==================
cf4cf7f;Travis Oliphant;2005-12-11 04:14:02 +0000;Update alignment when appropriate.

==

scipy/base/src/multiarraymodule.c
==================
16321ac;Travis Oliphant;2005-12-10 21:39:49 +0000;Re-factor code to get dtypedescr from object.

==

scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
==================
a4592fd;Travis Oliphant;2005-12-10 19:24:55 +0000;Fixed-up putmask to accept anything and force the cast to BOOL.

==

scipy/base/src/multiarraymodule.c
==================
18d66b2;Travis Oliphant;2005-12-10 18:54:05 +0000;Fix-up dealing with arbitrary objects as type-descriptors.

==

scipy/base/records.py
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
==================
845a9b4;Travis Oliphant;2005-12-10 11:17:43 +0000;Fixed _dotblas.

==

scipy/corelib/blasdot/_dotblas.c
==================
c5f751f;Travis Oliphant;2005-12-10 10:50:42 +0000;Update CAPI.txt to reflect new function pointer structure.

==

scipy/doc/CAPI.txt
scipy/f2py/cfuncs.py
==================
b514d4c;Travis Oliphant;2005-12-10 10:40:26 +0000;Moved function pointers to sub-structure.

==

scipy/base/include/scipy/arrayobject.h
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/arraytypes.inc.src
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
scipy/base/src/ufuncobject.c
scipy/core_version.py
==================
8f90681;Travis Oliphant;2005-12-10 07:21:30 +0000;Fix up object arrtypes to pass attributes to wrapped object.

==

scipy/base/src/scalartypes.inc.src
==================
8098f1e;Travis Oliphant;2005-12-09 21:13:59 +0000;Fix backward compatible Numeric C-API so that NULL data does not return Fortran array in FromDimsAndDataAndDescr.

==

scipy/base/src/arrayobject.c
==================
4d8d808;Travis Oliphant;2005-12-09 19:46:35 +0000;Fix-up reference counting for OBJECT arrays in ufuncloop.

==

THANKS.txt
scipy/base/include/scipy/ufuncobject.h
scipy/base/src/ufuncobject.c
scipy/doc/ufuncs.txt
==================
a046954;Travis Oliphant;2005-12-09 18:07:44 +0000;Fixed loop->function code

==

scipy/base/src/ufuncobject.c
==================
cade732;Pearu Peterson;2005-12-09 13:45:57 +0000;Fixing appendpath tests fow Windows. 3rd try.

==

scipy/distutils/misc_util.py
==================
b7fd6b5;Pearu Peterson;2005-12-09 12:51:25 +0000;Fixing appendpath tests fow Windows. 2nd try.

==

scipy/distutils/misc_util.py
scipy/distutils/tests/test_misc_util.py
==================
c47edab;Travis Oliphant;2005-12-09 10:05:54 +0000;Merging fixufunc branch -r1606:1613

==
==================
e59a3eb;Travis Oliphant;2005-12-09 10:02:12 +0000;ufunc fix seems to be working...

==

scipy/base/src/ufuncobject.c
==================
9c05eb8;Pearu Peterson;2005-12-09 07:59:32 +0000;Fixing appendpath tests fow Windows.

==

scipy/distutils/tests/test_misc_util.py
==================
06e4714;Travis Oliphant;2005-12-08 23:32:23 +0000;New ufunc code works on simple case..

==

scipy/base/src/ufuncobject.c
==================
269e5e6;Travis Oliphant;2005-12-08 22:51:26 +0000;Fixed setitem problem.

==

scipy/base/records.py
==================
d741f1d;Travis Oliphant;2005-12-08 10:54:03 +0000;First-pass at optimized buffer ufunc.

==

scipy/base/include/scipy/ufuncobject.h
==================
76b98e3;Travis Oliphant;2005-12-08 10:53:41 +0000;First-pass at optimized buffer ufunc.

==

scipy/base/src/ufuncobject.c
==================
26ab095;Travis Oliphant;2005-12-08 10:16:40 +0000;First stabs at fixing buffered ufunc to not copy unnecessarily.

==

scipy/base/include/scipy/ufuncobject.h
scipy/base/src/ufuncobject.c
scipy/base/src/umathmodule.c.src
==================
f2f568d;Travis Oliphant;2005-12-08 07:17:47 +0000;Use amax and amin in ma.py

==

scipy/base/ma.py
scipy/base/records.py
==================
5b30dd1;Travis Oliphant;2005-12-08 07:11:07 +0000;Fix-ups for records

==

scipy/base/records.py
==================
69ecc32;Travis Oliphant;2005-12-08 06:50:58 +0000;Fixed up records so that record-scalar modifies original data.

==

scipy/base/records.py
scipy/base/src/arrayobject.c
scipy/base/src/arraytypes.inc.src
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
==================
2f8218d;Travis Oliphant;2005-12-08 04:33:06 +0000;Record type infrastructure in place.

==

scipy/base/__init__.py
scipy/base/records.py
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
==================
38798eb;Travis Oliphant;2005-12-08 00:42:17 +0000;Fix problem.

==

scipy/base/src/scalartypes.inc.src
==================
abe35b3;Travis Oliphant;2005-12-07 23:17:42 +0000;Fixing records.py

==

scipy/base/_internal.py
scipy/base/records.py
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
==================
58edc63;Travis Oliphant;2005-12-07 21:13:16 +0000;A few bug-fixes to descr-handling code.

==

scipy/base/_internal.py
scipy/base/src/multiarraymodule.c
==================
5073394;Travis Oliphant;2005-12-07 20:35:27 +0000;Added list as data-type specifier.

==

scipy/base/src/multiarraymodule.c
scipy/doc/records.txt
==================
4ba1a35;Travis Oliphant;2005-12-07 10:19:30 +0000;Changes to docs.

==

scipy/doc/CAPI.txt
scipy/doc/records.txt
==================
151c9d6;Travis Oliphant;2005-12-07 09:44:08 +0000;Added __array_descr__ protocol (export) support.

==

scipy/base/_internal.py
scipy/base/src/arrayobject.c
==================
624b717;cookedm;2005-12-07 05:08:58 +0000;New implemenation of logspace using linspace due to Alan G. Isaac

==

scipy/base/function_base.py
==================
2a2f099;Travis Oliphant;2005-12-07 03:42:55 +0000;Fixed typo in setup.py script.

==

scipy/base/setup.py
==================
02d368a;Travis Oliphant;2005-12-07 03:38:32 +0000;Fixed-up PyArray_Scalar to receive PyArray_Descr *

==
==================
ff82140;Travis Oliphant;2005-12-07 03:33:14 +0000;Fixed-up PyArray_Scalar to receive Descr structure.

==

scipy/base/src/arrayobject.c
scipy/base/src/arraytypes.inc.src
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
scipy/core_version.py
==================
05e7ce2;Travis Oliphant;2005-12-07 01:11:00 +0000;Start changes so that Scalar creation relies on Descr structure.

==

scipy/base/src/multiarraymodule.c
==================
10c1389;Travis Oliphant;2005-12-07 01:10:48 +0000;Start changes so that Scalar creation relies on Descr structure.

==

scipy/base/records.py
scipy/base/src/arrayobject.c
scipy/base/src/scalartypes.inc.src
==================
4366dcd;cookedm;2005-12-06 22:39:00 +0000;Refactor API generation a little

==

scipy/base/setup.py
==================
f487b5a;cookedm;2005-12-06 21:52:17 +0000;More robust corner cases for linspace

==

scipy/base/function_base.py
scipy/base/tests/test_function_base.py
==================
6c30140;Travis Oliphant;2005-12-06 19:19:57 +0000;Don't allow OBJECT_Descr to be used as a base descriptor.

==

scipy/base/include/scipy/arrayobject.h
scipy/base/src/multiarraymodule.c
==================
0e8e24c;Pearu Peterson;2005-12-06 11:35:08 +0000;Fixed syntax errors.

==

scipy/base/code_generators/genapi.py
scipy/base/records.py
scipy/f2py/docs/FAQ.txt
==================
4d39b10;cookedm;2005-12-06 11:15:26 +0000;Left a debug statement in

==

scipy/base/setup.py
==================
c6e97c7;cookedm;2005-12-06 11:10:13 +0000;The declarations for API functions are now read directly from the source files, using the /*OBJECT_API*/ (and similiar) tags. The order of the API functions is determined by the *_api_order.txt files in code_generators/. Also, the code_generators/generate_*.py files are imported instead of using execfile() in setup.py, with common routines held in genapi.py.

==

scipy/base/code_generators/array_api_order.txt
scipy/base/code_generators/genapi.py
scipy/base/code_generators/generate_array_api.py
scipy/base/code_generators/generate_ufunc_api.py
scipy/base/code_generators/multiarray_api_order.txt
scipy/base/code_generators/ufunc_api_order.txt
scipy/base/setup.py
==================
aeccfe6;cookedm;2005-12-06 11:06:12 +0000;Add API tags: comments like /*OBJECT_API*/ before functions that are exported. OBJECT_API is for the PyArray API, MULTIARRAY_API for multiarray, and UFUNC_API for ufuncs.

==

scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/arraytypes.inc.src
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
scipy/base/src/ufuncobject.c
==================
20e073f;Travis Oliphant;2005-12-06 09:22:34 +0000;Moved generic type-object checking back where it belongs.

==

scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
==================
c8d9e84;Travis Oliphant;2005-12-06 08:46:45 +0000;Fixed 64-bit problem

==

scipy/base/ma.py
scipy/base/src/arrayobject.c
==================
f45b4c5;Travis Oliphant;2005-12-06 08:28:10 +0000;Added general object->descriptor converter.

==

scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
==================
db07471;cookedm;2005-12-06 07:59:11 +0000;Small fixes for declaration code style (opening brace of function on new line)

==

scipy/base/src/arrayobject.c
scipy/base/src/arraytypes.inc.src
==================
4d66d01;Travis Oliphant;2005-12-06 05:55:57 +0000;Fixed int->intp in header of NewFromDescr.

==

scipy/base/src/arrayobject.c
==================
4de572b;Travis Oliphant;2005-12-06 05:49:08 +0000;Fixed-up setfield bug and added offset check for negative numbers.

==

scipy/base/src/arraymethods.c
scipy/base/src/multiarraymodule.c
==================
f49bd3e;Travis Oliphant;2005-12-06 02:00:00 +0000;One more error in cfuncs and remove Py_NotImplmented from fields.

==

scipy/base/src/arrayobject.c
scipy/f2py/cfuncs.py
==================
4a7ce99;Travis Oliphant;2005-12-06 01:43:36 +0000;Fixed typo in cfuncs.py

==

scipy/base/matrix.py
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
scipy/doc/records.txt
scipy/f2py/cfuncs.py
==================
bcd661e;Travis Oliphant;2005-12-06 00:59:49 +0000;Comment fixes..

==

scipy/base/_internal.py
==================
50fefdf;Travis Oliphant;2005-12-06 00:57:13 +0000;Added handling of output of fields returned from dtypedescr to constructor.  Fixed itemsize reference in fortranobject.c

==

scipy/base/_internal.py
scipy/f2py/src/fortranobject.c
==================
cb2f58f;Travis Oliphant;2005-12-06 00:49:43 +0000;Field specification possible with two-kinds of dictionaries

==

scipy/base/_internal.py
scipy/base/numeric.py
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/arraytypes.inc.src
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
==================
4772f10;Travis Oliphant;2005-12-05 23:55:03 +0000;Creating data-descriptors from a dictionary now works.

==

scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
==================
73eff17;Travis Oliphant;2005-12-05 21:56:27 +0000;Fixed up tuple as data descriptor and added datadescr for descriptor constructor

==

scipy/base/numeric.py
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy/base/src/ufuncobject.c
==================
9db8e4f;Travis Oliphant;2005-12-05 21:09:57 +0000;Merged fixtype branch to core directory.

==
==================
a13279e;Travis Oliphant;2005-12-05 20:58:31 +0000;Fixtype branch tests level 1 pass.

==

scipy/base/chararray.py
scipy/base/matrix.py
scipy/base/records.py
scipy/base/src/_compiled_base.c
scipy/base/src/arrayobject.c
scipy/base/src/arraytypes.inc.src
==================
a7a0f13;Travis Oliphant;2005-12-05 20:29:45 +0000;Fixtype branch.  No segfaults on test...

==

scipy/base/code_generators/generate_array_api.py
scipy/base/src/_compiled_base.c
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy/base/src/ufuncobject.c
==================
b7b8af2;Travis Oliphant;2005-12-05 19:32:25 +0000;Fixtype branch compiles again.  Manual check of PyArray_Descr reference counting completed.

==

scipy/base/code_generators/generate_array_api.py
scipy/base/include/scipy/arrayobject.h
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/arraytypes.inc.src
scipy/base/src/multiarraymodule.c
scipy/base/src/ufuncobject.c
==================
cd08033;Travis Oliphant;2005-12-05 17:47:38 +0000;fixed fromstring for 64-bit

==

scipy/base/src/multiarraymodule.c
==================
20c6033;Travis Oliphant;2005-12-05 17:45:27 +0000;More fixes for fixtype branch.

==

scipy/base/code_generators/generate_array_api.py
scipy/base/include/scipy/arrayobject.h
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/arraytypes.inc.src
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
scipy/base/src/ufuncobject.c
scipy/doc/records.txt
==================
de8086a;Travis Oliphant;2005-12-04 10:04:40 +0000;Reference count fixes for fixtype branch.

==

scipy/base/code_generators/generate_array_api.py
scipy/base/include/scipy/arrayobject.h
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/arraytypes.inc.src
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
scipy/corelib/blasdot/_dotblas.c
scipy/doc/records.txt
==================
49b48ff;Travis Oliphant;2005-12-04 07:02:42 +0000;Conversion from PyArray_Typecode to PyArray_Descr * now compiles.

==

scipy/base/code_generators/generate_array_api.py
scipy/base/include/scipy/arrayobject.h
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/arraytypes.inc.src
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
scipy/base/src/ufuncobject.c
==================
88c06a9;Travis Oliphant;2005-12-04 05:34:10 +0000;Finished pass 1 of fixtype changes. Now, fix compile errors...

==

scipy/base/code_generators/generate_array_api.py
scipy/base/include/scipy/arrayobject.h
scipy/base/src/_compiled_base.c
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/arraytypes.inc.src
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
scipy/base/src/ufuncobject.c
scipy/corelib/blasdot/_dotblas.c
==================
75e3035;Travis Oliphant;2005-12-04 03:30:11 +0000;More changes...

==

scipy/base/code_generators/generate_array_api.py
scipy/base/include/scipy/arrayobject.h
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/arraytypes.inc.src
scipy/base/src/multiarraymodule.c
scipy/doc/records.txt
scipy/f2py/cfuncs.py
scipy/f2py/src/fortranobject.c
==================
a28f19c;Travis Oliphant;2005-12-03 22:50:02 +0000;Saving incremental changes

==

scipy/base/code_generators/generate_array_api.py
scipy/base/include/scipy/arrayobject.h
scipy/base/src/arrayobject.c
scipy/base/src/arraytypes.inc.src
scipy/base/src/multiarraymodule.c
scipy/doc/records.txt
==================
60a8878;Travis Oliphant;2005-12-03 06:09:51 +0000;Incremental changes to fixtype branch.

==

scipy/base/code_generators/generate_array_api.py
scipy/base/include/scipy/arrayobject.h
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
==================
7050eb5;Travis Oliphant;2005-12-03 01:27:29 +0000;Saving changes.

==

scipy/base/code_generators/generate_array_api.py
scipy/base/include/scipy/arrayobject.h
scipy/base/src/arrayobject.c
scipy/base/src/scalartypes.inc.src
scipy/basic/basic_lite.py
scipy/core_version.py
==================
d3fe38a;Travis Oliphant;2005-12-02 23:15:16 +0000;Fixed astype problem causing cholesky to fail.

==

scipy/base/src/arraymethods.c
==================
4ba40d4;Travis Oliphant;2005-12-02 23:13:44 +0000;First initial changes.

==

scipy/base/code_generators/generate_array_api.py
scipy/base/include/scipy/arrayobject.h
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/arraytypes.inc.src
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
scipy/basic/basic_lite.py
==================
830408c;cookedm;2005-12-02 21:53:20 +0000;Very old versions of setuptools don't have bdist_egg; check for that.

==

scipy/distutils/core.py
==================
5cf8208;cookedm;2005-12-01 23:17:56 +0000;whitespace fix

==

setup.py
==================
0ce7a26;Travis Oliphant;2005-12-01 19:48:31 +0000;Added ability to get and set a tuple-type field.

==

scipy/base/code_generators/generate_array_api.py
scipy/base/src/arraymethods.c
==================
7548e73;Travis Oliphant;2005-12-01 17:57:20 +0000;Added ability to set data type to a tuple

==

scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
==================
9772a6a;Travis Oliphant;2005-12-01 07:24:21 +0000;Added PyArray_SetField to API.  Began code to allow setting the data type with a tuple of (dtype, shape) for better records support.

==

scipy/base/code_generators/generate_array_api.py
scipy/base/numeric.py
scipy/base/records.py
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/scalartypes.inc.src
==================
158f487;Travis Oliphant;2005-12-01 02:22:55 +0000;Basic record type now works.

==

scipy/base/arrayprint.py
scipy/base/numerictypes.py
scipy/base/records.py
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
==================
c9af94c;Travis Oliphant;2005-11-30 19:40:45 +0000;Fixed argmin bug.

==

scipy/base/numerictypes.py
scipy/base/src/multiarraymodule.c
==================
87db003;Travis Oliphant;2005-11-30 18:42:17 +0000;Fixed segfault bug on type change for 0-d arrays.

==

scipy/base/src/arrayobject.c
==================
18f57f5;Travis Oliphant;2005-11-30 10:48:55 +0000;Improvements to chararray.

==

scipy/base/chararray.py
==================
8dfbf5d;Travis Oliphant;2005-11-30 09:30:51 +0000;Fixed up ndchararray a bit.  Fixed up use of registered data types.

==

scipy/base/chararray.py
scipy/base/matrix.py
scipy/base/numeric.py
scipy/base/records.py
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
scipy/base/src/ufuncobject.c
==================
0376164;Travis Oliphant;2005-11-30 00:24:45 +0000;Added .var method and fixed problem with .std

==

scipy/base/code_generators/generate_array_api.py
scipy/base/src/arraymethods.c
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
==================
5a53416;Travis Oliphant;2005-11-29 11:14:32 +0000;Fixed cblas_dgemm bug reported for Numeric 24.2

==

scipy/corelib/blasdot/_dotblas.c
==================
56c7f03;Travis Oliphant;2005-11-29 09:49:22 +0000;Removed print statement and added CastScalarToCtype function.

==

scipy/base/code_generators/generate_array_api.py
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
scipy/base/src/ufuncobject.c
scipy/core_version.py
==================
25a5a74;Travis Oliphant;2005-11-29 05:59:01 +0000;Add GetPyValues to UFunc_API.  Add mechanism so that if default ufunc pyvalues are in use the variable look up is by-passed.  A method call updates this static variable.

==

scipy/base/code_generators/generate_ufunc_api.py
scipy/base/include/scipy/arrayobject.h
scipy/base/numeric.py
scipy/base/src/ufuncobject.c
scipy/base/src/umathmodule.c.src
scipy/core_version.py
==================
aa61c8c;Travis Oliphant;2005-11-29 04:13:06 +0000;Fixed object array math with non-array types.

==

scipy/base/include/scipy/arrayobject.h
scipy/base/src/ufuncobject.c
==================
d51cd61;Travis Oliphant;2005-11-29 01:01:53 +0000;Changed version since API addition.

==

scipy/core_version.py
==================
2ff29c5;Travis Oliphant;2005-11-29 00:57:01 +0000;Added some macros and function for accessing ndarray

==

scipy/base/chararray.py
scipy/base/code_generators/generate_array_api.py
scipy/base/include/scipy/arrayobject.h
scipy/base/src/multiarraymodule.c
==================
fe36f6d;Pearu Peterson;2005-11-26 07:18:50 +0000;Enabled LastChangedRevision HeadURL keywords.

==

scipy/doc/DISTUTILS.txt
==================
b741bf3;Travis Oliphant;2005-11-24 08:26:57 +0000;Added PY_UFUNC_UNIQUE_SYMBOL and friends.  A few edits to C-API documentation.

==

scipy/base/code_generators/generate_ufunc_api.py
scipy/doc/CAPI.txt
==================
63a1118;Pearu Peterson;2005-11-23 12:49:44 +0000;Fixed typo.

==

scipy/distutils/misc_util.py
==================
9bcc664;Travis Oliphant;2005-11-22 22:22:56 +0000;Improvements to multiter and flatiter types -- give them a few attributes

==

scipy/base/chararray.py
scipy/base/include/scipy/arrayobject.h
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
==================
3180d78;Travis Oliphant;2005-11-22 13:51:15 +0000;Some more fixes to weave.

==

scipy/weave/accelerate_tools.py
scipy/weave/blitz_tools.py
scipy/weave/examples/object.py
scipy/weave/examples/ramp.py
scipy/weave/size_check.py
==================
20ba225;Travis Oliphant;2005-11-22 11:40:32 +0000;Fixed up unicode scalar object issues.  Started character array sub-class.

==

scipy/base/chararray.py
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/scalartypes.inc.src
scipy/base/utils.py
==================
c2c4df3;Travis Oliphant;2005-11-22 09:58:52 +0000;Cleaned up memmap.py and made it available.  Started with chararray.

==

scipy/base/__init__.py
scipy/base/chararray.py
scipy/base/matrix.py
scipy/base/memmap.py
scipy/base/utils.py
==================
4d8e8a0;Fernando Perez;2005-11-22 07:25:14 +0000;Andrew Straw's patch to avoid conflicts with a C++ compiler defining Bool.

==

scipy/base/include/scipy/arrayobject.h
==================
74ffa1e;Pearu Peterson;2005-11-21 15:01:50 +0000;Doc updates.

==

scipy/_import_tools.py
==================
7b51929;Pearu Peterson;2005-11-21 14:59:36 +0000;Doc updates.

==

scipy/_import_tools.py
scipy/doc/DISTUTILS.txt
==================
bf8d706;Pearu Peterson;2005-11-21 10:58:31 +0000;Added default_config_dict with depreciation warning.

==

scipy/distutils/misc_util.py
==================
c9582b9;Pearu Peterson;2005-11-21 10:27:34 +0000;Added default_config_dict with depreciation warning.

==

scipy/distutils/misc_util.py
==================
6b631ec;Pearu Peterson;2005-11-21 10:21:11 +0000;Don't try to use fortran linker when it is not available.

==

scipy/distutils/command/build_ext.py
scipy/distutils/fcompiler/__init__.py
==================
7ac1eab;Pearu Peterson;2005-11-21 09:41:01 +0000;Adding none fcompiler.

==

scipy/distutils/fcompiler/none.py
==================
116f3e7;Travis Oliphant;2005-11-20 21:01:49 +0000;Fixed problem with ravel and 1-d.

==

scipy/base/oldnumeric.py
scipy/base/src/arraymethods.c
scipy/base/src/multiarraymodule.c
==================
fb2b491;Travis Oliphant;2005-11-20 09:59:19 +0000;Added simple memory mapping to core.

==

scipy/base/code_generators/generate_array_api.py
scipy/base/memmap.py
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
==================
a1e5c5b;Travis Oliphant;2005-11-20 08:13:58 +0000;Fix memmap some. Fix reductions on object arrays.

==

scipy/base/include/scipy/arrayobject.h
scipy/base/memmap.py
scipy/base/numeric.py
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
scipy/base/src/ufuncobject.c
==================
a4d16e5;Pearu Peterson;2005-11-19 19:08:06 +0000;Applied ravi patch for gfortran.

==

scipy/distutils/fcompiler/gnu.py
==================
7ad1100;Pearu Peterson;2005-11-19 11:49:03 +0000;Fixed compiler warning for 64 bit platform.

==

scipy/base/src/multiarraymodule.c
==================
9d4947b;Travis Oliphant;2005-11-19 09:42:01 +0000;Improve writeable detection.

==

scipy/base/memmap.py
scipy/base/numeric.py
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
==================
a536768;Travis Oliphant;2005-11-19 04:44:10 +0000;Added memory mapping from numarray.

==

scipy/base/memmap.py
==================
d9b3850;Travis Oliphant;2005-11-18 20:32:30 +0000;Fixed autocasting tests to casting tests.. Inplace casting is not supported.

==

scipy/base/matrix.py
scipy/base/tests/test_matrix.py
==================
4f869af;Travis Oliphant;2005-11-18 20:22:51 +0000;Reverted matrix.py to previous state.

==

scipy/base/matrix.py
==================
9f57eae;edschofield;2005-11-18 19:35:29 +0000;Fixes and efficiency improvements for matrices

==

scipy/base/matrix.py
==================
53adce3;Travis Oliphant;2005-11-18 19:30:31 +0000;Fixed array_resize problem.

==

scipy/base/src/arraymethods.c
==================
1931776;Travis Oliphant;2005-11-18 18:17:58 +0000;Minor changes.

==

scipy/base/src/multiarraymodule.c
==================
a2b7978;edschofield;2005-11-18 17:41:27 +0000;Added asmatrix() function, as a parallel to asarray(), and new tests

==

scipy/base/matrix.py
scipy/base/tests/test_matrix.py
==================
dd815f3;edschofield;2005-11-18 16:07:41 +0000;Bug fixes and transparent upcasting for matrix objects

==

scipy/base/matrix.py
scipy/base/tests/test_matrix.py
==================
4330c22;Travis Oliphant;2005-11-18 10:40:26 +0000;Cleaned up.

==

scipy/base/src/multiarraymodule.c
==================
a96cec4;Travis Oliphant;2005-11-18 09:39:36 +0000;Re-factored ConvertToCommonType and added to C-API.

==

scipy/base/code_generators/generate_array_api.py
scipy/base/src/multiarraymodule.c
scipy/core_version.py
==================
d23cda7;Travis Oliphant;2005-11-18 09:11:01 +0000;Fixed up problem with PyArray_ArrayType that was causing trouble with PyArray_Choose.  Also altered concatenate and choose so that type selection is not swayed by scalars.

==

scipy/base/include/scipy/arrayobject.h
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
==================
2203b4e;Travis Oliphant;2005-11-18 01:48:54 +0000;Allow data to be NULL in PyUFunc_FromFuncAndData

==

scipy/base/include/scipy/ufuncobject.h
scipy/base/src/ufuncobject.c
==================
8344c05;Travis Oliphant;2005-11-17 20:22:46 +0000;Disallow arrays and array scalars as types.

==

scipy/base/src/multiarraymodule.c
==================
da2ba36;Travis Oliphant;2005-11-17 20:20:22 +0000;Fixed up fancy_indexing check to handle more sequences.

==

scipy/base/src/arrayobject.c
==================
1add63f;edschofield;2005-11-17 18:21:13 +0000;Fixed bug in test_matrix.py

==

scipy/base/tests/test_matrix.py
==================
532f7cf;Travis Oliphant;2005-11-17 04:40:31 +0000;Fixed a problem with PyArray_Where.

==

scipy/base/src/multiarraymodule.c
==================
7e9ace9;Travis Oliphant;2005-11-17 04:24:18 +0000;Removed generic typecode capability.

==

scipy/base/include/scipy/arrayobject.h
scipy/base/src/multiarraymodule.c
==================
38dbe29;Travis Oliphant;2005-11-16 21:04:34 +0000;

==

scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy/distutils/mingw32ccompiler.py
==================
44faafe;Travis Oliphant;2005-11-16 20:19:44 +0000;Fixed some issues with fromfile and hopefully with mingw32 compilations.

==

scipy/base/src/arraymethods.c
scipy/base/src/multiarraymodule.c
scipy/distutils/mingw32ccompiler.py
==================
2f14971;Travis Oliphant;2005-11-16 18:23:44 +0000;Fixed strings as indexobject segfault.

==

scipy/base/src/arrayobject.c
==================
5866c7e;Travis Oliphant;2005-11-16 10:44:51 +0000;Fixed svd and eig to be compatible with full scipy.  Eliminate warning.

==

scipy/base/src/arrayobject.c
scipy/base/src/ufuncobject.c
scipy/basic/basic_lite.py
scipy/basic/fft.py
scipy/basic/linalg.py
==================
fedd3f1;Travis Oliphant;2005-11-16 08:31:08 +0000;Change rules.py back.

==

scipy/f2py/rules.py
==================
9685323;Travis Oliphant;2005-11-16 08:15:19 +0000;Restore inadvertent change to f2py.

==

scipy/test/testing.py
==================
48971fb;Travis Oliphant;2005-11-16 05:36:18 +0000;Fixed set memory to zero for generic allocator.

==

scipy/base/src/arrayobject.c
scipy/base/src/scalartypes.inc.src
scipy/f2py/rules.py
==================
17b9068;Travis Oliphant;2005-11-16 01:48:39 +0000;Altered allocator for scalars.

==

scipy/base/src/scalartypes.inc.src
==================
511efc9;Travis Oliphant;2005-11-16 01:38:17 +0000;Removed dependence on Python memory allocator for most scipy core objects.

==

scipy/base/src/arrayobject.c
scipy/base/src/ufuncobject.c
scipy/base/src/umathmodule.c.src
scipy/base/tests/test_ma.py
scipy/base/tests/test_matrix.py
==================
d692bad;Travis Oliphant;2005-11-14 23:56:10 +0000;Closed a few more leaks.

==

scipy/base/ma.py
scipy/base/src/_compiled_base.c
scipy/base/src/arrayobject.c
scipy/base/src/ufuncobject.c
scipy/base/tests/test_ma.py
scipy/base/tests/test_matrix.py
scipy/f2py/src/fortranobject.c
==================
51508b2;Pearu Peterson;2005-11-14 12:00:50 +0000;Fixed missing global symbols.

==

scipy/basic/info.py
scipy/basic/linalg.py
==================
3c39ae4;Pearu Peterson;2005-11-14 11:54:49 +0000;Exposing package documentation strings to scipy.__doc__.

==

scipy/__init__.py
scipy/_import_tools.py
scipy/base/__init__.py
scipy/base/info.py
scipy/base/info_scipy_base.py
scipy/basic/__init__.py
scipy/basic/info.py
scipy/test/__init__.py
scipy/test/info.py
scipy/test/info_scipy_test.py
==================
3ceafbf;Travis Oliphant;2005-11-14 11:48:47 +0000;Improved MultiIterator Macros. Added it to namespace.

==

scipy/base/include/scipy/arrayobject.h
scipy/base/numeric.py
==================
d6869c9;Travis Oliphant;2005-11-14 11:23:06 +0000;Added multiter type to expose broadcasting as an iterator.

==

scipy/base/code_generators/generate_array_api.py
scipy/base/include/scipy/arrayobject.h
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy/core_version.py
==================
f4e6260;Travis Oliphant;2005-11-14 07:57:43 +0000;Fix a.imag = obj problem.

==

scipy/base/src/arrayobject.c
scipy/base/src/scalartypes.inc.src
==================
2cc83c5;Robert Kern;2005-11-13 08:35:47 +0000; r823@Blasphemy:  kern | 2005-11-13 00:35:39 -0800  Fixed isinstance() uses

==

scipy/base/polynomial.py
==================
35c019e;Travis Oliphant;2005-11-13 03:42:13 +0000;Updated version...

==

scipy/core_version.py
==================
5a215e7;Travis Oliphant;2005-11-13 03:10:24 +0000;Modify README.txt

==

README.txt
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
==================
a218a55;Fernando Perez;2005-11-13 02:03:59 +0000;Patch by Andrew Straw, which fixes recently introduced segfaults triggered because arraymethods.c's _ARET() macro assumes its input is PyArrayObject*, whereas in these cases it's simply PyObject*.

==

scipy/base/src/arraymethods.c
==================
0ca82e9;Pearu Peterson;2005-11-12 22:37:15 +0000;Code clean up in f2py. Added initial gnu95 compiler support.

==

scipy/distutils/fcompiler/__init__.py
scipy/distutils/fcompiler/gnu.py
scipy/f2py/f2py2e.py
==================
7cbb2fc;Travis Oliphant;2005-11-12 10:24:39 +0000;Added a few features to the C-API

==

scipy/base/code_generators/generate_array_api.py
scipy/base/src/multiarraymodule.c
scipy/core_version.py
==================
ffa70cd;Travis Oliphant;2005-11-12 05:01:45 +0000;Changed core_version back.

==

scipy/core_version.py
==================
280dfb5;Travis Oliphant;2005-11-12 04:26:50 +0000;Removed svn version number for release.

==

scipy/base/src/arraymethods.c
scipy/core_version.py
==================
42a1219;edschofield;2005-11-12 00:18:16 +0000;Prevent infinite loop with longdouble on PPC with gcc 4.0

==

scipy/base/machar.py
==================
3ecf0fe;Travis Oliphant;2005-11-11 23:40:23 +0000;Possible memory leaks closed.

==

scipy/base/src/arrayobject.c
==================
6ee7839;Travis Oliphant;2005-11-11 21:24:10 +0000;Fixed bug in scalar methods.

==

scipy/base/src/arrayobject.c
scipy/base/src/scalartypes.inc.src
==================
a08f2fc;Travis Oliphant;2005-11-11 11:31:09 +0000;Added fftw3 support to system info.

==

scipy/distutils/system_info.py
==================
19a82bc;Robert Kern;2005-11-11 11:23:22 +0000; r804@Blasphemy:  kern | 2005-11-11 03:22:40 -0800  Better gamma algorithm

==

scipy/corelib/mtrand/distributions.c
scipy/corelib/mtrand/distributions.h
scipy/corelib/mtrand/mtrand.c
==================
e976023;Travis Oliphant;2005-11-11 11:19:26 +0000;Fixed string conversion.  Cleaned up.

==

scipy/f2py/cfuncs.py
==================
4468007;Travis Oliphant;2005-11-11 10:38:04 +0000;Speed up pyvalues lookup a bit.

==

scipy/base/src/ufuncobject.c
==================
a75a2b1;Travis Oliphant;2005-11-11 09:22:27 +0000;Mild changes and version number upgrade.

==

COMPATIBILITY
README.txt
scipy/base/src/arrayobject.c
scipy/core_version.py
==================
3e339a0;Robert Kern;2005-11-11 08:32:57 +0000; r802@Blasphemy:  kern | 2005-11-11 00:32:39 -0800  Improved the algorithm for the small-mean case of the binomial distribution

==

scipy/corelib/mtrand/distributions.c
scipy/corelib/mtrand/distributions.h
scipy/corelib/mtrand/mtrand.c
scipy/corelib/mtrand/mtrand.pyx
scipy/corelib/mtrand/scipy.pxi
==================
acd6ca1;Travis Oliphant;2005-11-11 02:56:36 +0000;Alter shape setting.

==

scipy/base/src/arrayobject.c
==================
4175a06;Travis Oliphant;2005-11-11 00:19:45 +0000;Moving newcore to trunk

==
==================
bc6b314;Travis Oliphant;2005-11-11 00:17:17 +0000;Added f2c.h to depends.

==

scipy/corelib/setup.py
==================
6d32237;Travis Oliphant;2005-11-10 23:33:45 +0000;Fix array scalars __array_struct__ interface

==

scipy/base/include/scipy/arrayobject.h
scipy/base/src/arrayobject.c
scipy/base/src/scalartypes.inc.src
==================
d9d4797;Travis Oliphant;2005-11-10 06:13:40 +0000;Added Masked Array tests.

==

scipy/base/tests/test_ma.py
==================
82fb848;Travis Oliphant;2005-11-10 02:14:32 +0000;Minor memory leaks

==

scipy/base/src/_compiled_base.c
scipy/base/src/ufuncobject.c
==================
3f4142f;Travis Oliphant;2005-11-10 01:27:21 +0000;Fix array_structinterface bug

==

scipy/base/src/arrayobject.c
==================
a42bc3e;Travis Oliphant;2005-11-09 22:22:31 +0000;Added Paul's enhanced masked arrays.

==

THANKS.txt
scipy/base/ma.py
scipy/base/numerictypes.py
scipy/base/src/scalartypes.inc.src
scipy/base/src/ufuncobject.c
==================
b184d68;Travis Oliphant;2005-11-09 09:08:23 +0000;Fix up bad commit.

==

scipy/base/src/ufuncobject.c
==================
1859d1a;Travis Oliphant;2005-11-09 08:58:28 +0000;Changed Transpose C-API. Cleaned up memory leaks.

==

scipy/base/code_generators/generate_array_api.py
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy/base/src/ufuncobject.c
==================
46557b9;Travis Oliphant;2005-11-09 05:02:38 +0000;Beginnings of faster scalar math.

==

scipy/base/src/scalarmathmodule.c.src
==================
4588d7f;Travis Oliphant;2005-11-09 01:10:14 +0000;Fixed put and putmask functions to not work for nonarrays.

==

scipy/base/oldnumeric.py
==================
7dcff40;Travis Oliphant;2005-11-09 01:08:55 +0000;Switched order of put and putmask.

==

scipy/base/oldnumeric.py
scipy/base/shape_base.py
scipy/base/src/arraymethods.c
scipy/base/src/multiarraymodule.c
==================
f13e023;cookedm;2005-11-08 20:07:17 +0000;Fix int stop -> intp stop in parse_subindex

==

scipy/base/src/arrayobject.c
==================
e560080;Travis Oliphant;2005-11-08 17:52:09 +0000;Fixed up slice parsing to support larger integers on 64-bit platforms.

==

scipy/base/src/arrayobject.c
==================
f37554d;Travis Oliphant;2005-11-08 09:10:27 +0000;Created a better Copy function that can copy FORTRAN order too.

==

scipy/base/code_generators/generate_array_api.py
scipy/base/include/scipy/arrayobject.h
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
==================
94d041c;Travis Oliphant;2005-11-08 08:13:02 +0000;Fixed another leak.

==

scipy/base/getlimits.py
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
==================
b6502bf;Travis Oliphant;2005-11-08 05:06:12 +0000;Fixed-up array interface.

==

scipy/base/src/arrayobject.c
==================
55d50c5;Travis Oliphant;2005-11-08 01:04:07 +0000;Comment changes.

==

scipy/base/src/arrayobject.c
==================
183f6fc;Travis Oliphant;2005-11-07 23:49:21 +0000;Remove PyArrayMapIter_Type from user space.

==

scipy/base/code_generators/generate_array_api.py
scipy/base/include/scipy/arrayobject.h
scipy/base/src/arrayobject.c
scipy/base/src/scalartypes.inc.src
==================
12a01c1;Travis Oliphant;2005-11-05 05:31:30 +0000;Updated FillWithScalar.

==

scipy/base/src/arrayobject.c
scipy/base/src/arraytypes.inc.src
==================
360f43f;Travis Oliphant;2005-11-05 04:30:31 +0000;removed MapIter commands from C-API

==

scipy/base/code_generators/generate_array_api.py
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
==================
19b0e64;Travis Oliphant;2005-11-05 00:06:18 +0000;More valgrind-found bugs.

==

scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
scipy/base/src/ufuncobject.c
==================
c071975;Travis Oliphant;2005-11-04 21:31:12 +0000;valgrind-found fixes and adjust indexing for object arrays.

==

scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
==================
ab695d0;chanley;2005-11-04 15:37:27 +0000;11/4/05 -- CJH -- Moved variable declaration to make it consistent with C standard.  Declaration had been keeping scipy_core from building on Solaris systems with native compilers.

==

scipy/base/src/multiarraymodule.c
==================
705ba54;Travis Oliphant;2005-11-04 09:37:00 +0000;Fixed some type issues.

==

scipy/base/numerictypes.py
scipy/base/oldnumeric.py
==================
6e3f146;Travis Oliphant;2005-11-04 05:45:40 +0000;Fixed back the test to cover all of scipy.

==

scipy/__init__.py
==================
b614b68;Travis Oliphant;2005-11-04 02:24:40 +0000;Added flexible support for Choose.

==

scipy/base/src/multiarraymodule.c
==================
b7c1615;Travis Oliphant;2005-11-04 02:08:25 +0000;Found and fixed Put Object bug.

==

scipy/base/shape_base.py
scipy/base/src/multiarraymodule.c
scipy/base/tests/test_shape_base.py
==================
8034b06;Travis Oliphant;2005-11-04 01:35:40 +0000;Disable problem test.

==

scipy/__init__.py
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
scipy/base/tests/test_shape_base.py
==================
f5d38eb;Fernando Perez;2005-11-03 21:33:46 +0000;Small fixes for Intel Compiler class - tested and builds correctly

==

scipy/distutils/fcompiler/intel.py
scipy/distutils/intelccompiler.py
==================
3bdf640;Travis Oliphant;2005-11-03 16:25:38 +0000;Raise error for iteration over scalar.

==

scipy/base/src/arrayobject.c
==================
d70ab04;Travis Oliphant;2005-11-03 16:06:54 +0000;Fixed problems with non-existent attributes in array interface.

==

scipy/base/src/arrayobject.c
==================
ba0c163;Pearu Peterson;2005-11-03 08:47:42 +0000;Added Intel C Compiler class.

==

scipy/distutils/ccompiler.py
scipy/distutils/intelccompiler.py
==================
1514eef;Travis Oliphant;2005-11-03 08:06:56 +0000;Comment changes, and change read to write in PyArray_Dump

==

scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
==================
63e2431;Travis Oliphant;2005-11-03 05:18:52 +0000;Fixed bug in getfield, and some consistency issues.

==

scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
==================
91cc73f;Travis Oliphant;2005-11-03 01:41:19 +0000;Added ability to create arrays of user-defined type using the typeobject.

==

scipy/base/code_generators/generate_array_api.py
scipy/base/src/arrayobject.c
scipy/base/src/arraytypes.inc.src
scipy/base/src/scalartypes.inc.src
scipy/base/src/ufuncobject.c
==================
e484db1;Travis Oliphant;2005-11-02 23:54:48 +0000;Altered flexible types so that NotImplemented is raised in case another type wants to handle it.

==

scipy/base/chararray.py
scipy/base/src/arrayobject.c
scipy/base/src/ufuncobject.c
==================
0e48826;Travis Oliphant;2005-11-02 20:24:32 +0000;Updated PyArray_Zero and PyArray_One.

==

scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
==================
8de819f;cookedm;2005-11-02 19:32:19 +0000;Add missing variable declaration

==

scipy/base/src/arrayobject.c
==================
fc1db88;Travis Oliphant;2005-11-02 18:46:36 +0000;Fixed some array interface issues.

==

scipy/base/include/scipy/arrayobject.h
scipy/base/src/arrayobject.c
==================
cf2c7c9;chanley;2005-11-02 16:40:17 +0000;Comment cleanup.

==

scipy/base/numerictypes.py
==================
5a7abd7;chanley;2005-11-02 16:38:13 +0000;CJH -- 11/2/2005 -- Modified the nbytes dictionary to return values in bytes instead of bits.  Makes the assumption that 8 bits is 1 byte.

==

scipy/base/numerictypes.py
==================
51024bc;Travis Oliphant;2005-11-02 01:32:30 +0000;added support for __array_struct__

==

scipy/base/include/scipy/arrayobject.h
scipy/base/src/arrayobject.c
scipy/base/src/scalartypes.inc.src
==================
76f8287;Travis Oliphant;2005-11-01 23:14:09 +0000;Added nbytes attribute and nbytes dictionary

==

scipy/base/numerictypes.py
scipy/base/src/arrayobject.c
scipy/base/src/scalartypes.inc.src
==================
3daefec;Travis Oliphant;2005-11-01 22:47:01 +0000;Fixed Concatenate to use new ArrayType interface so flexible arrays are supported.

==

scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
==================
3234006;cookedm;2005-11-01 22:04:59 +0000;Update Blitz++ included with weave to 0.9 (which was released 2005-10-18). Currently, this only has a configuration for GNU g++.

==

scipy/weave/blitz/blitz/MAT-NOTE.gz
scipy/weave/blitz/blitz/Makefile.am
scipy/weave/blitz/blitz/Makefile.in
scipy/weave/blitz/blitz/README
scipy/weave/blitz/blitz/applics.h
scipy/weave/blitz/blitz/array-impl.h
scipy/weave/blitz/blitz/array-old.h
scipy/weave/blitz/blitz/array.h
scipy/weave/blitz/blitz/bench.cc
scipy/weave/blitz/blitz/bench.h
scipy/weave/blitz/blitz/benchext.cc
scipy/weave/blitz/blitz/benchext.h
scipy/weave/blitz/blitz/blitz.h
scipy/weave/blitz/blitz/bzconfig.h
scipy/weave/blitz/blitz/bzdebug.h
scipy/weave/blitz/blitz/compiler.h
scipy/weave/blitz/blitz/config-ICL.h
scipy/weave/blitz/blitz/config-KCC.h
scipy/weave/blitz/blitz/config-SC4.0.h
scipy/weave/blitz/blitz/config-SGi.h
scipy/weave/blitz/blitz/config-g++2.7.2.h
scipy/weave/blitz/blitz/config-mwerks.h
scipy/weave/blitz/blitz/config-xlC.h
scipy/weave/blitz/blitz/config.h
scipy/weave/blitz/blitz/config.h.in
scipy/weave/blitz/blitz/etbase.h
scipy/weave/blitz/blitz/extremum.h
scipy/weave/blitz/blitz/funcs.h
scipy/weave/blitz/blitz/indexexpr.h
scipy/weave/blitz/blitz/limits-hack.h
scipy/weave/blitz/blitz/listinit.h
scipy/weave/blitz/blitz/matbops.h
scipy/weave/blitz/blitz/matdiag.h
scipy/weave/blitz/blitz/matexpr.h
scipy/weave/blitz/blitz/matgen.h
scipy/weave/blitz/blitz/mathf2.h
scipy/weave/blitz/blitz/mathfunc.h
scipy/weave/blitz/blitz/matltri.h
scipy/weave/blitz/blitz/matref.h
scipy/weave/blitz/blitz/matrix.cc
scipy/weave/blitz/blitz/matrix.h
scipy/weave/blitz/blitz/matsymm.h
scipy/weave/blitz/blitz/mattoep.h
scipy/weave/blitz/blitz/matuops.h
scipy/weave/blitz/blitz/matutri.h
scipy/weave/blitz/blitz/memblock.cc
scipy/weave/blitz/blitz/memblock.h
scipy/weave/blitz/blitz/minmax.h
scipy/weave/blitz/blitz/mstruct.h
scipy/weave/blitz/blitz/numinquire.h
scipy/weave/blitz/blitz/numtrait.h
scipy/weave/blitz/blitz/ops.h
scipy/weave/blitz/blitz/prettyprint.h
scipy/weave/blitz/blitz/promote-old.h
scipy/weave/blitz/blitz/promote.h
scipy/weave/blitz/blitz/rand-dunif.h
scipy/weave/blitz/blitz/rand-mt.h
scipy/weave/blitz/blitz/rand-normal.h
scipy/weave/blitz/blitz/rand-tt800.h
scipy/weave/blitz/blitz/rand-uniform.h
scipy/weave/blitz/blitz/random.h
scipy/weave/blitz/blitz/randref.h
scipy/weave/blitz/blitz/range.h
scipy/weave/blitz/blitz/reduce.h
scipy/weave/blitz/blitz/shapecheck.h
scipy/weave/blitz/blitz/tau.h
scipy/weave/blitz/blitz/timer.h
scipy/weave/blitz/blitz/tiny.h
scipy/weave/blitz/blitz/tinymat.h
scipy/weave/blitz/blitz/tinymatexpr.h
scipy/weave/blitz/blitz/tinymatio.cc
scipy/weave/blitz/blitz/tinyvec-et.h
scipy/weave/blitz/blitz/tinyvec.cc
scipy/weave/blitz/blitz/tinyvec.h
scipy/weave/blitz/blitz/tinyvecio.cc
scipy/weave/blitz/blitz/tinyveciter.h
scipy/weave/blitz/blitz/traversal.cc
scipy/weave/blitz/blitz/traversal.h
scipy/weave/blitz/blitz/tuning.h
scipy/weave/blitz/blitz/tvcross.h
scipy/weave/blitz/blitz/tvecglobs.h
scipy/weave/blitz/blitz/update.h
scipy/weave/blitz/blitz/vecaccum.cc
scipy/weave/blitz/blitz/vecall.cc
scipy/weave/blitz/blitz/vecany.cc
scipy/weave/blitz/blitz/vecbfn.cc
scipy/weave/blitz/blitz/vecbops.cc
scipy/weave/blitz/blitz/veccount.cc
scipy/weave/blitz/blitz/vecdelta.cc
scipy/weave/blitz/blitz/vecdot.cc
scipy/weave/blitz/blitz/vecexpr.h
scipy/weave/blitz/blitz/vecexprwrap.h
scipy/weave/blitz/blitz/vecglobs.cc
scipy/weave/blitz/blitz/vecglobs.h
scipy/weave/blitz/blitz/vecio.cc
scipy/weave/blitz/blitz/veciter.h
scipy/weave/blitz/blitz/vecmax.cc
scipy/weave/blitz/blitz/vecmin.cc
scipy/weave/blitz/blitz/vecnorm.cc
scipy/weave/blitz/blitz/vecnorm1.cc
scipy/weave/blitz/blitz/vecpick.cc
scipy/weave/blitz/blitz/vecpick.h
scipy/weave/blitz/blitz/vecpickio.cc
scipy/weave/blitz/blitz/vecpickiter.h
scipy/weave/blitz/blitz/vecsum.cc
scipy/weave/blitz/blitz/vector-et.h
scipy/weave/blitz/blitz/vector.cc
scipy/weave/blitz/blitz/vector.h
scipy/weave/blitz/blitz/vecuops.cc
scipy/weave/blitz/blitz/vecwhere.cc
scipy/weave/blitz/blitz/vecwhere.h
scipy/weave/blitz/blitz/zero.cc
scipy/weave/blitz/blitz/zero.h
==================
a983584;cookedm;2005-11-01 22:04:15 +0000;Update Blitz++ included with weave to 0.9 (which was released 2005-10-18). Currently, this only has a configuration for GNU g++.

==

scipy/weave/blitz/blitz/array/Makefile.am
scipy/weave/blitz/blitz/array/Makefile.in
scipy/weave/blitz/blitz/array/asexpr.h
scipy/weave/blitz/blitz/array/bops.cc
scipy/weave/blitz/blitz/array/cartesian.h
scipy/weave/blitz/blitz/array/cgsolve.h
scipy/weave/blitz/blitz/array/complex.cc
scipy/weave/blitz/blitz/array/convolve.cc
scipy/weave/blitz/blitz/array/convolve.h
scipy/weave/blitz/blitz/array/cycle.cc
scipy/weave/blitz/blitz/array/domain.h
scipy/weave/blitz/blitz/array/et.h
scipy/weave/blitz/blitz/array/eval.cc
scipy/weave/blitz/blitz/array/expr.h
scipy/weave/blitz/blitz/array/fastiter.h
scipy/weave/blitz/blitz/array/funcs.h
scipy/weave/blitz/blitz/array/functorExpr.h
scipy/weave/blitz/blitz/array/geometry.h
scipy/weave/blitz/blitz/array/indirect.h
scipy/weave/blitz/blitz/array/interlace.cc
scipy/weave/blitz/blitz/array/io.cc
scipy/weave/blitz/blitz/array/iter.h
scipy/weave/blitz/blitz/array/map.h
scipy/weave/blitz/blitz/array/methods.cc
scipy/weave/blitz/blitz/array/misc.cc
scipy/weave/blitz/blitz/array/multi.h
scipy/weave/blitz/blitz/array/newet-macros.h
scipy/weave/blitz/blitz/array/newet.h
scipy/weave/blitz/blitz/array/ops.cc
scipy/weave/blitz/blitz/array/ops.h
scipy/weave/blitz/blitz/array/reduce.cc
scipy/weave/blitz/blitz/array/reduce.h
scipy/weave/blitz/blitz/array/resize.cc
scipy/weave/blitz/blitz/array/shape.h
scipy/weave/blitz/blitz/array/slice.h
scipy/weave/blitz/blitz/array/slicing.cc
scipy/weave/blitz/blitz/array/stencil-et.h
scipy/weave/blitz/blitz/array/stencilops.h
scipy/weave/blitz/blitz/array/stencils.cc
scipy/weave/blitz/blitz/array/stencils.h
scipy/weave/blitz/blitz/array/storage.h
scipy/weave/blitz/blitz/array/uops.cc
scipy/weave/blitz/blitz/array/where.h
scipy/weave/blitz/blitz/array/zip.h
scipy/weave/blitz/blitz/generate/Makefile.am
scipy/weave/blitz/blitz/generate/Makefile.in
scipy/weave/blitz/blitz/generate/arroperands.h
scipy/weave/blitz/blitz/generate/arroptuple.h
scipy/weave/blitz/blitz/generate/bzfstream.h
scipy/weave/blitz/blitz/generate/genarrbops.cpp
scipy/weave/blitz/blitz/generate/genarruops.cpp
scipy/weave/blitz/blitz/generate/genmatbops.cpp
scipy/weave/blitz/blitz/generate/genmathfunc.cpp
scipy/weave/blitz/blitz/generate/genmatuops.cpp
scipy/weave/blitz/blitz/generate/genpromote.cpp
scipy/weave/blitz/blitz/generate/genvecbfn.cpp
scipy/weave/blitz/blitz/generate/genvecbops.cpp
scipy/weave/blitz/blitz/generate/genvecuops.cpp
scipy/weave/blitz/blitz/generate/genvecwhere.cpp
scipy/weave/blitz/blitz/generate/operands.h
scipy/weave/blitz/blitz/generate/operands2.h
scipy/weave/blitz/blitz/generate/optuple.h
scipy/weave/blitz/blitz/generate/optuple2.h
scipy/weave/blitz/blitz/meta/Makefile.am
scipy/weave/blitz/blitz/meta/Makefile.in
scipy/weave/blitz/blitz/meta/dot.h
scipy/weave/blitz/blitz/meta/matassign.h
scipy/weave/blitz/blitz/meta/matmat.h
scipy/weave/blitz/blitz/meta/matvec.h
scipy/weave/blitz/blitz/meta/metaprog.h
scipy/weave/blitz/blitz/meta/product.h
scipy/weave/blitz/blitz/meta/sum.h
scipy/weave/blitz/blitz/meta/vecassign.h
==================
9a73f06;edschofield;2005-11-01 15:46:46 +0000;Reapplied patch to interpret sequences more cautiously.

==

scipy/base/src/arrayobject.c
==================
9fe283d;edschofield;2005-11-01 11:16:02 +0000;Reverted the PySequence_Check patch.  DOK matrices should be fixed instead.

==

scipy/base/src/arrayobject.c
==================
b8d2974;edschofield;2005-11-01 10:43:24 +0000;Changed array_fromobject() to treat failure of the Array_FromSequence() call differently.  Now it clears the error flag and tries interpreting the object as a scalar.  This allows more graceful error handling of badly behaved objects like DOK matrices that pass PySequence_Check but can't be indexed like sequences.
Fixed small typos.


==

scipy/base/src/arrayobject.c
==================
6348f93;Robert Kern;2005-11-01 09:07:30 +0000; r723@Blasphemy:  kern | 2005-11-01 01:07:20 -0800  scipy_distutils -> scipy.distutils

==

scipy/weave/build_tools.py
scipy/weave/platform_info.py
==================
d6fe75a;Travis Oliphant;2005-11-01 04:32:59 +0000;Added ISALIGNED macro and documentation update.

==

scipy/base/include/scipy/arrayobject.h
scipy/base/src/arrayobject.c
==================
9b101c0;Travis Oliphant;2005-11-01 00:05:28 +0000;Fixed to allow reflected operators instead of OBJECT addition.

==

scipy/base/code_generators/generate_array_api.py
scipy/base/include/scipy/arrayobject.h
scipy/base/include/scipy/ufuncobject.h
scipy/base/src/arrayobject.c
scipy/base/src/ufuncobject.c
==================
7cdbfb9;Robert Kern;2005-10-31 21:20:31 +0000; r707@803636f3:  kern | 2005-10-31 13:19:55 -0800  Fix put() typo

==

scipy/base/oldnumeric.py
==================
0563204;Travis Oliphant;2005-10-31 18:27:58 +0000;Added more attribute access to flags object.

==

scipy/base/_internal.py
==================
519274a;Travis Oliphant;2005-10-31 18:14:13 +0000;Allow flags dictionary attribute access

==

scipy/base/_internal.py
==================
abfceef;Travis Oliphant;2005-10-31 17:58:54 +0000;Added bool8 type.

==

scipy/base/numerictypes.py
==================
1e2e8ef;edschofield;2005-10-31 14:15:27 +0000;Fixed small typo

==

scipy/base/code_generators/generate_umath.py
==================
954c1d9;Pearu Peterson;2005-10-31 05:30:11 +0000;Fixed incorrect usage of PyArray_CanCastSafely.

==

scipy/f2py/src/fortranobject.c
==================
9362a1d;cookedm;2005-10-30 23:11:41 +0000;Save and restore sys.displayhook around running tests, so that doctests can run correctly under IPython

==

scipy/test/testing.py
==================
cf44e43;cookedm;2005-10-30 23:01:20 +0000;Don't use deconvolve for polydiv, as that requires scipy.signal to be installed. Do it using synthetic division. Could be more efficient.

==

scipy/base/polynomial.py
==================
d3cb158;cookedm;2005-10-30 22:37:54 +0000;Don't try to handle ImportError in deconvolve when scipy.signal doesn't exist

==

scipy/base/polynomial.py
==================
e06ac3f;Pearu Peterson;2005-10-30 19:19:58 +0000;Cosmetics with NO_SCIPY_IMPORT.

==

scipy/distutils/system_info.py
scipy/f2py/setup.py
==================
fdc4a87;Travis Oliphant;2005-10-30 06:58:16 +0000;Fixed nx -> NX

==

scipy/base/polynomial.py
==================
e51a19a;cookedm;2005-10-30 00:08:37 +0000;Change to using PY_ARRAY_TYPES_PREFIX instead of PYARRAY_TYPES_PREFIX, to agree with PY_ARRAY_UNIQUE_SYMBOL.

==

scipy/base/include/scipy/arrayobject.h
scipy/base/include/scipy/ufuncobject.h
==================
de8fca5;cookedm;2005-10-30 00:02:09 +0000;Make it easier for extension writers. If PYARRAY_TYPES_PREFIX is defined to some value before arrayobject.h or ufuncobject.h is included, that value will be prefixed before types that typedef'd. So, if PYARRAY_TYPES_PREFIX is defined to be PA_, then, for instance, Bool as a type will not exist, but instead PA_Bool will have been defined.
There is no problem with name mismatches as typedefs are not used in linking.

==

scipy/base/include/scipy/arrayobject.h
scipy/base/include/scipy/ufuncobject.h
==================
c4fae16;cookedm;2005-10-29 22:24:51 +0000;some clean up for scimath.py, use type objects instead of typechars

==

scipy/base/scimath.py
==================
e380b12;cookedm;2005-10-29 22:11:33 +0000;small whitespace

==

scipy/base/shape_base.py
==================
5cf79ab;cookedm;2005-10-29 22:11:20 +0000;Convert polynomial to use type objects instead of old Numeric typechars

==

scipy/base/polynomial.py
==================
19ec5da;cookedm;2005-10-29 21:56:26 +0000;TLC for polynomial.py: cleanup, poly1d class is now new-type, and unittests The unit tests are doctests.

==

scipy/base/polynomial.py
scipy/base/tests/test_polynomial.py
==================
fb20951;cookedm;2005-10-29 21:45:38 +0000;Give ufunclike some TLC. Cleanup, add docstrings and unit tests. The unit tests are as doctests, and currently use the deprecated test_suite method of running.

==

scipy/base/tests/test_ufunclike.py
scipy/base/ufunclike.py
==================
8b7ccd9;cookedm;2005-10-29 21:30:16 +0000;Whitespace cleanup and make classes new-type

==

scipy/base/function_base.py
scipy/base/getlimits.py
scipy/base/index_tricks.py
scipy/base/machar.py
scipy/base/matrix.py
scipy/base/scimath.py
scipy/base/shape_base.py
scipy/base/twodim_base.py
scipy/base/type_check.py
==================
75f8d03;Travis Oliphant;2005-10-29 18:18:33 +0000;Altered vectorize to allow default arguments in function.

==

scipy/base/function_base.py
==================
cb3a7e2;Travis Oliphant;2005-10-29 08:33:15 +0000;More cosmetic changes.

==

THANKS.txt
scipy/base/include/scipy/arrayobject.h
==================
b170dbb;Travis Oliphant;2005-10-29 00:00:20 +0000;Added PyUFunc_On_Om to UFunc C-API

==

scipy/base/code_generators/generate_ufunc_api.py
scipy/base/include/scipy/ufuncobject.h
scipy/base/numeric.py
scipy/base/src/multiarraymodule.c
scipy/base/src/ufuncobject.c
==================
b5ea6c1;cookedm;2005-10-28 22:59:07 +0000;Some refactoring - poly1d is a new-style class now - no import * now - whitespace, prettying

==

scipy/base/polynomial.py
==================
44767ad;Pearu Peterson;2005-10-28 21:41:19 +0000;Replaced PyArray_FromDimsAndData with PyArray_SimpleNewFromData.

==

scipy/f2py/cfuncs.py
==================
d830c0c;Travis Oliphant;2005-10-28 21:36:56 +0000;Cosmetic changes mainly. Remove unused itemsize from scanfunc arguments.

==

scipy/base/include/scipy/arrayobject.h
scipy/base/src/arrayobject.c
scipy/base/src/arraytypes.inc.src
scipy/base/src/multiarraymodule.c
==================
5dda00d;Pearu Peterson;2005-10-28 21:25:47 +0000;Moved f2py2e to f2py.

==

scipy/f2py/BUGS.txt
scipy/f2py/Makefile
scipy/f2py/NEWS.txt
scipy/f2py/README.txt
scipy/f2py/TODO.txt
scipy/f2py/__init__.py
scipy/f2py/__version__.py
scipy/f2py/auxfuncs.py
scipy/f2py/capi_maps.py
scipy/f2py/cb_rules.py
scipy/f2py/cfuncs.py
scipy/f2py/common_rules.py
scipy/f2py/crackfortran.py
scipy/f2py/diagnose.py
scipy/f2py/doc/Makefile
scipy/f2py/doc/Release-1.x.txt
scipy/f2py/doc/Release-2.x.txt
scipy/f2py/doc/Release-3.x.txt
scipy/f2py/doc/Release-4.x.txt
scipy/f2py/doc/apps.tex
scipy/f2py/doc/bugs.tex
scipy/f2py/doc/collectinput.py
scipy/f2py/doc/commands.tex
scipy/f2py/doc/ex1/arr.f
scipy/f2py/doc/ex1/bar.f
scipy/f2py/doc/ex1/foo.f
scipy/f2py/doc/ex1/foobar-smart.f90
scipy/f2py/doc/ex1/foobar.f90
scipy/f2py/doc/ex1/foobarmodule.tex
scipy/f2py/doc/ex1/runme
scipy/f2py/doc/f2py2e.tex
scipy/f2py/doc/f2python9-final/README.txt
scipy/f2py/doc/f2python9-final/aerostructure.jpg
scipy/f2py/doc/f2python9-final/flow.jpg
scipy/f2py/doc/f2python9-final/mk_html.sh
scipy/f2py/doc/f2python9-final/mk_pdf.sh
scipy/f2py/doc/f2python9-final/mk_ps.sh
scipy/f2py/doc/f2python9-final/src/examples/exp1.f
scipy/f2py/doc/f2python9-final/src/examples/exp1mess.txt
scipy/f2py/doc/f2python9-final/src/examples/exp1session.txt
scipy/f2py/doc/f2python9-final/src/examples/foo.pyf
scipy/f2py/doc/f2python9-final/src/examples/foom.pyf
scipy/f2py/doc/f2python9-final/structure.jpg
scipy/f2py/doc/fortranobject.tex
scipy/f2py/doc/index.html
scipy/f2py/doc/intro.tex
scipy/f2py/doc/multiarray/array_from_pyobj.c
scipy/f2py/doc/multiarray/bar.c
scipy/f2py/doc/multiarray/foo.f
scipy/f2py/doc/multiarray/fortran_array_from_pyobj.txt
scipy/f2py/doc/multiarray/fun.pyf
scipy/f2py/doc/multiarray/run.pyf
scipy/f2py/doc/multiarray/transpose.txt
scipy/f2py/doc/multiarrays.txt
scipy/f2py/doc/notes.tex
scipy/f2py/doc/oldnews.html
scipy/f2py/doc/options.tex
scipy/f2py/doc/python9.tex
scipy/f2py/doc/signaturefile.tex
scipy/f2py/doc/using_F_compiler.txt
scipy/f2py/doc/win32_notes.txt
scipy/f2py/docs/FAQ.txt
scipy/f2py/docs/HISTORY.txt
scipy/f2py/docs/OLDNEWS.txt
scipy/f2py/docs/README.txt
scipy/f2py/docs/TESTING.txt
scipy/f2py/docs/THANKS.txt
scipy/f2py/docs/default.css
scipy/f2py/docs/docutils.conf
scipy/f2py/docs/hello.f
scipy/f2py/docs/pyforttest.pyf
scipy/f2py/docs/pytest.py
scipy/f2py/docs/simple.f
scipy/f2py/docs/simple_session.dat
scipy/f2py/docs/usersguide/allocarr.f90
scipy/f2py/docs/usersguide/allocarr_session.dat
scipy/f2py/docs/usersguide/array.f
scipy/f2py/docs/usersguide/array_session.dat
scipy/f2py/docs/usersguide/calculate.f
scipy/f2py/docs/usersguide/calculate_session.dat
scipy/f2py/docs/usersguide/callback.f
scipy/f2py/docs/usersguide/callback2.pyf
scipy/f2py/docs/usersguide/callback_session.dat
scipy/f2py/docs/usersguide/common.f
scipy/f2py/docs/usersguide/common_session.dat
scipy/f2py/docs/usersguide/compile_session.dat
scipy/f2py/docs/usersguide/default.css
scipy/f2py/docs/usersguide/docutils.conf
scipy/f2py/docs/usersguide/extcallback.f
scipy/f2py/docs/usersguide/extcallback_session.dat
scipy/f2py/docs/usersguide/fib1.f
scipy/f2py/docs/usersguide/fib1.pyf
scipy/f2py/docs/usersguide/fib2.pyf
scipy/f2py/docs/usersguide/fib3.f
scipy/f2py/docs/usersguide/ftype.f
scipy/f2py/docs/usersguide/ftype_session.dat
scipy/f2py/docs/usersguide/index.txt
scipy/f2py/docs/usersguide/moddata.f90
scipy/f2py/docs/usersguide/moddata_session.dat
scipy/f2py/docs/usersguide/run_main_session.dat
scipy/f2py/docs/usersguide/scalar.f
scipy/f2py/docs/usersguide/scalar_session.dat
scipy/f2py/docs/usersguide/setup_example.py
scipy/f2py/docs/usersguide/spam.pyf
scipy/f2py/docs/usersguide/spam_session.dat
scipy/f2py/docs/usersguide/string.f
scipy/f2py/docs/usersguide/string_session.dat
scipy/f2py/docs/usersguide/var.pyf
scipy/f2py/docs/usersguide/var_session.dat
scipy/f2py/f2py.1
scipy/f2py/f2py2e.py
scipy/f2py/f2py_testing.py
scipy/f2py/f90mod_rules.py
scipy/f2py/func2subr.py
scipy/f2py/rules.py
scipy/f2py/setup.cfg
scipy/f2py/setup.py
scipy/f2py/src/fortranobject.c
scipy/f2py/src/fortranobject.h
scipy/f2py/src/test/Makefile
scipy/f2py/src/test/bar.f
scipy/f2py/src/test/foo.f
scipy/f2py/src/test/foo90.f90
scipy/f2py/src/test/foomodule.c
scipy/f2py/src/test/wrap.f
scipy/f2py/tests/array_from_pyobj/__init__.py
scipy/f2py/tests/array_from_pyobj/setup.py
scipy/f2py/tests/array_from_pyobj/tests/test_array_from_pyobj.py
scipy/f2py/tests/array_from_pyobj/wrapmodule.c
scipy/f2py/tests/c/return_real.py
scipy/f2py/tests/f77/callback.py
scipy/f2py/tests/f77/return_character.py
scipy/f2py/tests/f77/return_complex.py
scipy/f2py/tests/f77/return_integer.py
scipy/f2py/tests/f77/return_logical.py
scipy/f2py/tests/f77/return_real.py
scipy/f2py/tests/f90/return_character.py
scipy/f2py/tests/f90/return_complex.py
scipy/f2py/tests/f90/return_integer.py
scipy/f2py/tests/f90/return_logical.py
scipy/f2py/tests/f90/return_real.py
scipy/f2py/tests/mixed/foo.f
scipy/f2py/tests/mixed/foo_fixed.f90
scipy/f2py/tests/mixed/foo_free.f90
scipy/f2py/tests/mixed/run.py
scipy/f2py/tests/run_all.py
scipy/f2py/use_rules.py
scipy/f2py2e/BUGS.txt
scipy/f2py2e/Makefile
scipy/f2py2e/NEWS.txt
scipy/f2py2e/README.txt
scipy/f2py2e/TODO.txt
scipy/f2py2e/__init__.py
scipy/f2py2e/__version__.py
scipy/f2py2e/auxfuncs.py
scipy/f2py2e/capi_maps.py
scipy/f2py2e/cb_rules.py
scipy/f2py2e/cfuncs.py
scipy/f2py2e/common_rules.py
scipy/f2py2e/crackfortran.py
scipy/f2py2e/diagnose.py
scipy/f2py2e/doc/Makefile
scipy/f2py2e/doc/Release-1.x.txt
scipy/f2py2e/doc/Release-2.x.txt
scipy/f2py2e/doc/Release-3.x.txt
scipy/f2py2e/doc/Release-4.x.txt
scipy/f2py2e/doc/apps.tex
scipy/f2py2e/doc/bugs.tex
scipy/f2py2e/doc/collectinput.py
scipy/f2py2e/doc/commands.tex
scipy/f2py2e/doc/ex1/arr.f
scipy/f2py2e/doc/ex1/bar.f
scipy/f2py2e/doc/ex1/foo.f
scipy/f2py2e/doc/ex1/foobar-smart.f90
scipy/f2py2e/doc/ex1/foobar.f90
scipy/f2py2e/doc/ex1/foobarmodule.tex
scipy/f2py2e/doc/ex1/runme
scipy/f2py2e/doc/f2py2e.tex
scipy/f2py2e/doc/f2python9-final/README.txt
scipy/f2py2e/doc/f2python9-final/aerostructure.jpg
scipy/f2py2e/doc/f2python9-final/flow.jpg
scipy/f2py2e/doc/f2python9-final/mk_html.sh
scipy/f2py2e/doc/f2python9-final/mk_pdf.sh
scipy/f2py2e/doc/f2python9-final/mk_ps.sh
scipy/f2py2e/doc/f2python9-final/src/examples/exp1.f
scipy/f2py2e/doc/f2python9-final/src/examples/exp1mess.txt
scipy/f2py2e/doc/f2python9-final/src/examples/exp1session.txt
scipy/f2py2e/doc/f2python9-final/src/examples/foo.pyf
scipy/f2py2e/doc/f2python9-final/src/examples/foom.pyf
scipy/f2py2e/doc/f2python9-final/structure.jpg
scipy/f2py2e/doc/fortranobject.tex
scipy/f2py2e/doc/index.html
scipy/f2py2e/doc/intro.tex
scipy/f2py2e/doc/multiarray/array_from_pyobj.c
scipy/f2py2e/doc/multiarray/bar.c
scipy/f2py2e/doc/multiarray/foo.f
scipy/f2py2e/doc/multiarray/fortran_array_from_pyobj.txt
scipy/f2py2e/doc/multiarray/fun.pyf
scipy/f2py2e/doc/multiarray/run.pyf
scipy/f2py2e/doc/multiarray/transpose.txt
scipy/f2py2e/doc/multiarrays.txt
scipy/f2py2e/doc/notes.tex
scipy/f2py2e/doc/oldnews.html
scipy/f2py2e/doc/options.tex
scipy/f2py2e/doc/python9.tex
scipy/f2py2e/doc/signaturefile.tex
scipy/f2py2e/doc/using_F_compiler.txt
scipy/f2py2e/doc/win32_notes.txt
scipy/f2py2e/docs/FAQ.txt
scipy/f2py2e/docs/HISTORY.txt
scipy/f2py2e/docs/OLDNEWS.txt
scipy/f2py2e/docs/README.txt
scipy/f2py2e/docs/TESTING.txt
scipy/f2py2e/docs/THANKS.txt
scipy/f2py2e/docs/default.css
scipy/f2py2e/docs/docutils.conf
scipy/f2py2e/docs/hello.f
scipy/f2py2e/docs/pyforttest.pyf
scipy/f2py2e/docs/pytest.py
scipy/f2py2e/docs/simple.f
scipy/f2py2e/docs/simple_session.dat
scipy/f2py2e/docs/usersguide/allocarr.f90
scipy/f2py2e/docs/usersguide/allocarr_session.dat
scipy/f2py2e/docs/usersguide/array.f
scipy/f2py2e/docs/usersguide/array_session.dat
scipy/f2py2e/docs/usersguide/calculate.f
scipy/f2py2e/docs/usersguide/calculate_session.dat
scipy/f2py2e/docs/usersguide/callback.f
scipy/f2py2e/docs/usersguide/callback2.pyf
scipy/f2py2e/docs/usersguide/callback_session.dat
scipy/f2py2e/docs/usersguide/common.f
scipy/f2py2e/docs/usersguide/common_session.dat
scipy/f2py2e/docs/usersguide/compile_session.dat
scipy/f2py2e/docs/usersguide/default.css
scipy/f2py2e/docs/usersguide/docutils.conf
scipy/f2py2e/docs/usersguide/extcallback.f
scipy/f2py2e/docs/usersguide/extcallback_session.dat
scipy/f2py2e/docs/usersguide/fib1.f
scipy/f2py2e/docs/usersguide/fib1.pyf
scipy/f2py2e/docs/usersguide/fib2.pyf
scipy/f2py2e/docs/usersguide/fib3.f
scipy/f2py2e/docs/usersguide/ftype.f
scipy/f2py2e/docs/usersguide/ftype_session.dat
scipy/f2py2e/docs/usersguide/index.txt
scipy/f2py2e/docs/usersguide/moddata.f90
scipy/f2py2e/docs/usersguide/moddata_session.dat
scipy/f2py2e/docs/usersguide/run_main_session.dat
scipy/f2py2e/docs/usersguide/scalar.f
scipy/f2py2e/docs/usersguide/scalar_session.dat
scipy/f2py2e/docs/usersguide/setup_example.py
scipy/f2py2e/docs/usersguide/spam.pyf
scipy/f2py2e/docs/usersguide/spam_session.dat
scipy/f2py2e/docs/usersguide/string.f
scipy/f2py2e/docs/usersguide/string_session.dat
scipy/f2py2e/docs/usersguide/var.pyf
scipy/f2py2e/docs/usersguide/var_session.dat
scipy/f2py2e/f2py.1
scipy/f2py2e/f2py2e.py
scipy/f2py2e/f2py_testing.py
scipy/f2py2e/f90mod_rules.py
scipy/f2py2e/func2subr.py
scipy/f2py2e/rules.py
scipy/f2py2e/setup.cfg
scipy/f2py2e/setup.py
scipy/f2py2e/src/fortranobject.c
scipy/f2py2e/src/fortranobject.h
scipy/f2py2e/src/test/Makefile
scipy/f2py2e/src/test/bar.f
scipy/f2py2e/src/test/foo.f
scipy/f2py2e/src/test/foo90.f90
scipy/f2py2e/src/test/foomodule.c
scipy/f2py2e/src/test/wrap.f
scipy/f2py2e/tests/array_from_pyobj/__init__.py
scipy/f2py2e/tests/array_from_pyobj/setup.py
scipy/f2py2e/tests/array_from_pyobj/tests/test_array_from_pyobj.py
scipy/f2py2e/tests/array_from_pyobj/wrapmodule.c
scipy/f2py2e/tests/c/return_real.py
scipy/f2py2e/tests/f77/callback.py
scipy/f2py2e/tests/f77/return_character.py
scipy/f2py2e/tests/f77/return_complex.py
scipy/f2py2e/tests/f77/return_integer.py
scipy/f2py2e/tests/f77/return_logical.py
scipy/f2py2e/tests/f77/return_real.py
scipy/f2py2e/tests/f90/return_character.py
scipy/f2py2e/tests/f90/return_complex.py
scipy/f2py2e/tests/f90/return_integer.py
scipy/f2py2e/tests/f90/return_logical.py
scipy/f2py2e/tests/f90/return_real.py
scipy/f2py2e/tests/mixed/foo.f
scipy/f2py2e/tests/mixed/foo_fixed.f90
scipy/f2py2e/tests/mixed/foo_free.f90
scipy/f2py2e/tests/mixed/run.py
scipy/f2py2e/tests/run_all.py
scipy/f2py2e/use_rules.py
scipy/setup.py
==================
b87a003;cookedm;2005-10-28 20:30:02 +0000;change PyArray_Scalar to take a void * instead of char *, and some whitespace cleanup

==

scipy/base/code_generators/generate_array_api.py
scipy/base/code_generators/generate_ufunc_api.py
scipy/base/code_generators/generate_umath.py
==================
59eccb0;cookedm;2005-10-28 20:28:43 +0000;Change PyArray_Scalar to take a void * instead of char *

==

scipy/base/src/arrayobject.c
==================
5a3fa7b;cookedm;2005-10-28 20:27:06 +0000;Whitespace cleanup

==

scipy/base/src/umathmodule.c.src
==================
13a3a3f;cookedm;2005-10-28 20:25:49 +0000;Add __all__ statements to base.{oldnumeric,numeric,numerictypes} This should cut down the number of accidental imports

==

scipy/base/numeric.py
scipy/base/numerictypes.py
scipy/base/oldnumeric.py
==================
784c41e;Travis Oliphant;2005-10-28 10:23:17 +0000;Fixed SimpleNewFromData to use correct flags.

==

scipy/base/include/scipy/arrayobject.h
==================
ecd7362;Travis Oliphant;2005-10-28 10:15:48 +0000;Fixed complex to bool issues.

==

scipy/base/code_generators/generate_umath.py
scipy/base/src/arraytypes.inc.src
scipy/base/src/umathmodule.c.src
==================
c45d115;Pearu Peterson;2005-10-28 09:53:19 +0000;Introduced PyArray_SimpleNewFromData as a replacement to PyArray_FromDimsAndData

==

scipy/base/include/scipy/arrayobject.h
scipy/doc/CAPI.txt
==================
08feb21;Travis Oliphant;2005-10-28 09:27:49 +0000;Removed unused requirement that compare deal with misbehaved arrays.

==

scipy/base/include/scipy/arrayobject.h
scipy/base/src/arraytypes.inc.src
==================
a4e9f20;Travis Oliphant;2005-10-28 09:18:50 +0000;Small cleanups in arrayobject.h

==

scipy/base/include/scipy/arrayobject.h
==================
6002cdd;Travis Oliphant;2005-10-28 02:29:04 +0000;Altered default flags in PyArray_BufferConverter and fixed signbit and friends.

==

scipy/base/src/multiarraymodule.c
scipy/base/src/umathmodule.c.src
==================
a5fd5e5;Travis Oliphant;2005-10-27 23:52:42 +0000;Fixed problem with correlate.

==

scipy/base/arrayprint.py
scipy/base/numeric.py
scipy/base/polynomial.py
scipy/base/src/arraytypes.inc.src
scipy/base/src/multiarraymodule.c
scipy/corelib/blasdot/_dotblas.c
==================
e62a504;Travis Oliphant;2005-10-27 17:59:45 +0000;Fix 0-d array indexing.

==

scipy/base/include/scipy/arrayobject.h
scipy/base/src/arrayobject.c
scipy/base/src/scalartypes.inc.src
==================
8fcb106;edschofield;2005-10-27 16:50:32 +0000;Fix for rank-0 arrays.  Now a[0] = 1 throws an IndexError, just like reading from a[0] does.
** Note: assigning a[-1] = 0 still segfaults! **


==

scipy/base/src/arrayobject.c
==================
4e73671;edschofield;2005-10-27 15:08:34 +0000;More docstring fixes for mean() and sum().

==

scipy/base/function_base.py
scipy/base/src/arraymethods.c
==================
fa94504;edschofield;2005-10-27 14:17:47 +0000;Trivial changes to a.mean() docstring

==

scipy/base/src/arraymethods.c
==================
6d63497;edschofield;2005-10-27 13:59:16 +0000;Improved docstrings:   * Fuller explanation of default casting behaviour of a.sum(), a.mean(),     scipy.sum(), and scipy.average()   * Changed some array variable names from 'x' to 'a' in function_base.py     for consistency with docstrings in arraymethods.c   * Other cosmetic fixes to docstrings and code formatting

==

scipy/base/function_base.py
scipy/base/oldnumeric.py
scipy/base/src/arraymethods.c
==================
8386582;Pearu Peterson;2005-10-27 11:52:55 +0000;Fixed get_lib_source_files bug.

==

scipy/distutils/misc_util.py
==================
a25e5da;Pearu Peterson;2005-10-27 09:08:19 +0000;Made ScalarType tuple so that it could be 2nd argument to isinstance.

==

scipy/base/numerictypes.py
==================
80a598c;Pearu Peterson;2005-10-27 08:52:21 +0000;Fixed assert_approx_equal(0,0) failure bug.

==

scipy/test/testing.py
==================
a74ef76;Travis Oliphant;2005-10-27 03:04:32 +0000;Fixed stepping issue for length-1 arrays.

==

scipy/base/src/ufuncobject.c
==================
64ee901;Travis Oliphant;2005-10-26 22:42:43 +0000;Fixed problem with temporary allocation in PyArray_Transpose.

==

scipy/base/src/multiarraymodule.c
==================
4fb4bd4;Pearu Peterson;2005-10-26 22:08:31 +0000;Bug fixes.

==

scipy/base/scimath.py
==================
4e91720;Pearu Peterson;2005-10-26 21:00:54 +0000;Fixed tests on opteron

==

scipy/f2py2e/tests/array_from_pyobj/tests/test_array_from_pyobj.py
==================
4fd8345;Pearu Peterson;2005-10-26 18:32:39 +0000;Fixed intent(in,out) array shape when copy is made.

==

scipy/f2py2e/src/fortranobject.c
==================
7e2da24;Pearu Peterson;2005-10-26 14:06:01 +0000;Setting __scipy_version__.

==

scipy/__init__.py
==================
1523841;Pearu Peterson;2005-10-26 13:54:20 +0000;Finished impl. of new array_from_pyobj. Updates and clean up. Removed array_has_column_major_storage and transpose_strides functions from f2py extensions.

==

scipy/f2py2e/rules.py
scipy/f2py2e/src/fortranobject.c
scipy/f2py2e/src/fortranobject.h
scipy/f2py2e/tests/array_from_pyobj/setup.py
scipy/f2py2e/tests/array_from_pyobj/tests/test_array_from_pyobj.py
scipy/f2py2e/tests/array_from_pyobj/wrapmodule.c
==================
83643d1;Travis Oliphant;2005-10-26 05:43:29 +0000;Fixes to array_ass_item and array_item so that other uses of these besides the sequence protocol work for 64-bit systems.

==

scipy/base/src/arrayobject.c
==================
c001bbe;Travis Oliphant;2005-10-26 05:05:10 +0000;Cosmetic fixes.

==

scipy/base/src/arrayobject.c
==================
60cfb6a;Travis Oliphant;2005-10-26 04:55:06 +0000;More weave fixes.

==

scipy/weave/c_spec.py
==================
146140c;Travis Oliphant;2005-10-26 04:52:01 +0000;Added more types to weave.

==

scipy/base/code_generators/generate_array_api.py
scipy/base/src/multiarraymodule.c
scipy/weave/c_spec.py
scipy/weave/standard_array_spec.py
==================
98830f7;Travis Oliphant;2005-10-26 04:21:53 +0000;Fixed string_from_pyobj to handle multi-length string conversion.

==

scipy/f2py2e/cfuncs.py
==================
9e2b9a4;Travis Oliphant;2005-10-26 03:31:22 +0000;Fix segfault with Character arrays.

==

scipy/base/numeric.py
scipy/base/src/arrayobject.c
==================
33616f8;Travis Oliphant;2005-10-26 02:41:30 +0000;Fix toscalar so it only works when a.size == 1

==

scipy/base/src/arraymethods.c
==================
878d535;Pearu Peterson;2005-10-25 21:42:41 +0000;Reimplemented array_from_pyobj using scipy.base CAPI.

==

scipy/f2py2e/src/fortranobject.c
==================
72c2028;Pearu Peterson;2005-10-25 21:41:12 +0000;Unittests for new array_from_pyobj in f2py.

==

scipy/f2py2e/tests/array_from_pyobj/__init__.py
scipy/f2py2e/tests/array_from_pyobj/setup.py
scipy/f2py2e/tests/array_from_pyobj/tests/test_array_from_pyobj.py
scipy/f2py2e/tests/array_from_pyobj/wrapmodule.c
==================
3696fd0;Travis Oliphant;2005-10-25 19:53:41 +0000;Fixed default typecode on copy.

==

scipy/base/src/arrayobject.c
==================
5087854;edschofield;2005-10-25 19:26:26 +0000;Fixed docstring (line-break problem)

==

scipy/base/src/arrayobject.c
==================
5defd06;edschofield;2005-10-25 15:24:48 +0000;Bug fix and new test cases for average()

==

scipy/base/function_base.py
scipy/base/tests/test_function_base.py
==================
a8e59ca;edschofield;2005-10-25 10:21:13 +0000;Cleaned up exceptions:  * improved consistency in exception strings; removed typos  * changed some ValueError exceptions to TypeError

==

scipy/base/src/_compiled_base.c
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy/base/src/ufuncobject.c
==================
d1f5e8b;Robert Kern;2005-10-24 00:05:17 +0000; r583@Blasphemy:  kern | 2005-10-23 17:04:42 -0700  Try to mask key with 0xffffffffUL to restrict numbers to 32 bits.

==

scipy/corelib/mtrand/randomkit.c
==================
9b3a166;Travis Oliphant;2005-10-22 19:25:59 +0000;More fixes to remove allowing numbers for types.

==

scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
==================
9a3a3b8;Travis Oliphant;2005-10-22 18:51:45 +0000;Removed allowing numbers for typecodes.

==

scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
==================
8c50e91;edschofield;2005-10-22 11:25:58 +0000;EJS: disabled the stricter type checking on boolean values for now, until I've tested this with the full scipy

==

scipy/base/src/multiarraymodule.c
==================
14bdbe9;edschofield;2005-10-22 11:21:21 +0000;EJS: Patch to use proper True and False values rather than 1 and 0.  This allows stricter type checking when we expect a boolean value to prevent the user shooting himself in the foot.  Example:     >>> a = zeros(1,2,3) used to succeed, creating an array of shape (1,), dtype 2, and fortran=True, which was probably not intended.  It now raises a TypeError.  [The user probably wants something else, like zeros((1,2,3)).]

==

scipy/base/function_base.py
scipy/base/index_tricks.py
scipy/base/ma.py
scipy/base/matrix.py
scipy/base/numeric.py
scipy/base/numerictypes.py
scipy/base/oldnumeric.py
scipy/base/records.py
scipy/base/src/multiarraymodule.c
==================
584a026;Travis Oliphant;2005-10-22 09:13:13 +0000;Fixed bug in CDOUBLE_setitem

==

scipy/base/src/arraytypes.inc.src
==================
ec78fa3;Travis Oliphant;2005-10-22 01:31:10 +0000;added common_type

==

scipy/base/convertcode.py
scipy/base/type_check.py
==================
153b32a;Travis Oliphant;2005-10-21 23:49:35 +0000;Remove useless size change.

==

scipy/base/src/arrayobject.c
==================
a308a42;Travis Oliphant;2005-10-21 21:41:51 +0000;Fixed memory alignment issue in frompyfunc

==

scipy/base/src/ufuncobject.c
==================
24a86c0;Travis Oliphant;2005-10-21 20:16:29 +0000;Added a new test for isinf.

==

scipy/base/setup.py
scipy/base/src/ufuncobject.c
scipy/base/src/umathmodule.c.src
==================
7a1f86c;Travis Oliphant;2005-10-21 18:26:50 +0000;Fixed up array interface

==

scipy/base/src/arrayobject.c
scipy/base/src/umathmodule.c.src
==================
ec5458c;Travis Oliphant;2005-10-20 09:05:09 +0000;Make sure errorobj is NULL.

==

scipy/base/src/ufuncobject.c
==================
b0d2f1a;Travis Oliphant;2005-10-20 07:42:45 +0000;Applied Ted Horst's patches.

==

scipy/base/src/arraytypes.inc.src
scipy/base/src/umathmodule.c.src
==================
83d2075;Travis Oliphant;2005-10-20 07:28:45 +0000;Tried different ones algorithm.  Wasn't faster.

==

scipy/base/numeric.py
==================
8bc53bd;Travis Oliphant;2005-10-20 07:07:53 +0000;Added .fill method.

==

scipy/base/code_generators/generate_array_api.py
scipy/base/include/scipy/arrayobject.h
scipy/base/numeric.py
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/scalartypes.inc.src
scipy/doc/CAPI.txt
==================
143fa8c;Travis Oliphant;2005-10-20 06:26:57 +0000;Set memory to zero when using SimpleNew

==

scipy/f2py2e/src/fortranobject.c
==================
0c9bbde;Travis Oliphant;2005-10-20 05:53:54 +0000;Changed lookup to a single list.

==

scipy/base/include/scipy/ufuncobject.h
scipy/base/numeric.py
scipy/base/src/ufuncobject.c
scipy/base/src/umathmodule.c.src
==================
13ae011;Travis Oliphant;2005-10-20 03:20:09 +0000;Silly error in _ScalarAsCtype.

==

scipy/base/src/scalartypes.inc.src
==================
f42cec1;Travis Oliphant;2005-10-20 02:39:34 +0000;Transpose fixes --- flags needed fixing before calling copy_ND_array.

==

scipy/base/src/arrayobject.c
scipy/base/src/ufuncobject.c
scipy/f2py2e/src/fortranobject.c
==================
7259165;Travis Oliphant;2005-10-19 23:55:29 +0000;Changed default rtype for Bool and low-bit integers

==

scipy/base/src/ufuncobject.c
==================
63500f0;Pearu Peterson;2005-10-19 22:37:32 +0000;Replaced PyArray_FromDimsAndData with PyArray_New. 2nd try.

==

scipy/f2py2e/cb_rules.py
==================
fb807e6;Pearu Peterson;2005-10-19 22:25:23 +0000;Replaced PyArray_FromDimsAndData with PyArray_New.

==

scipy/f2py2e/cb_rules.py
==================
ad8c6ae;Travis Oliphant;2005-10-19 22:13:53 +0000;Fix flags and don't set mem to 0 in FromDimsAndData

==

scipy/base/src/arrayobject.c
==================
cd201fd;Travis Oliphant;2005-10-19 21:59:30 +0000;Changed default on matrix to copy=1

==

scipy/base/matrix.py
==================
19cba66;Travis Oliphant;2005-10-19 21:55:49 +0000;Allow array scalars in f2py conversions.

==

scipy/base/code_generators/generate_array_api.py
scipy/base/include/scipy/arrayobject.h
scipy/base/oldnumeric.py
scipy/base/src/scalartypes.inc.src
scipy/base/ufunclike.py
scipy/f2py2e/cfuncs.py
==================
4ecebd3;Pearu Peterson;2005-10-19 20:53:00 +0000;Clean up, updated initforcomb for 64 bit platform.

==

scipy/f2py2e/cfuncs.py
==================
e421eb9;Pearu Peterson;2005-10-19 14:00:32 +0000;Impl. finfo as a new-style singleton class. Added singleton tests.

==

scipy/base/getlimits.py
scipy/base/machar.py
scipy/base/tests/test_getlimits.py
==================
f4f9be7;Pearu Peterson;2005-10-19 10:50:36 +0000;Dont define ushort,uint ulong when _BSD_SOURCE.

==

scipy/base/include/scipy/arrayobject.h
==================
67ba898;Pearu Peterson;2005-10-19 10:36:29 +0000;Fixed intp formats.

==

scipy/f2py2e/src/fortranobject.c
==================
e261a0a;Pearu Peterson;2005-10-19 10:34:11 +0000;Fixed INTP_FMT when SIZEOF_PY_INTPTR_T == SIZEOF_LONG.

==

scipy/base/include/scipy/arrayobject.h
==================
d4d6298;Pearu Peterson;2005-10-19 10:31:44 +0000;Fixed intp formats.

==

scipy/f2py2e/src/fortranobject.c
==================
69f77f1;Pearu Peterson;2005-10-19 09:59:28 +0000;Fixed typedef, part of int->intp changes.

==

scipy/f2py2e/src/fortranobject.h
==================
3563f26;Pearu Peterson;2005-10-19 09:56:04 +0000;Fixed missing type.

==

scipy/f2py2e/src/fortranobject.c
==================
af3d2e4;Pearu Peterson;2005-10-19 09:50:58 +0000;Using PyArray_ITEMSIZE instead of ->descr->elsize

==

scipy/f2py2e/src/fortranobject.c
==================
9c74129;Pearu Peterson;2005-10-19 09:47:45 +0000;Changed int to intp for array dimensions and strides.

==

scipy/f2py2e/cb_rules.py
scipy/f2py2e/rules.py
==================
738c01f;Travis Oliphant;2005-10-19 09:03:53 +0000;Changes to fix int -> intp

==

scipy/corelib/blasdot/_dotblas.c
scipy/f2py2e/src/fortranobject.c
scipy/f2py2e/src/fortranobject.h
==================
69e5f33;Travis Oliphant;2005-10-19 00:07:34 +0000;Removed character conversion from convertcode.

==

scipy/base/convertcode.py
==================
760b848;Travis Oliphant;2005-10-18 23:36:32 +0000;Added NO_IMPORT to list of workable defines.

==

scipy/base/code_generators/generate_array_api.py
==================
eadb977;Pearu Peterson;2005-10-18 22:03:48 +0000;Clean up -- removed Numeric and numarray specific code.

==

scipy/f2py2e/rules.py
scipy/f2py2e/src/fortranobject.c
scipy/f2py2e/src/fortranobject.h
==================
d24887f;Pearu Peterson;2005-10-18 22:02:25 +0000;If env.variable NO_SCIPY_IMPORT is defined then importing scipy packages will be skipped -- used for building newscipy or when one only needs scipy.base.

==

scipy/__init__.py
==================
f66e57a;Pearu Peterson;2005-10-18 22:00:33 +0000;PyArray_API management copied from Numeric.

==

scipy/base/code_generators/generate_array_api.py
==================
6d23f80;Pearu Peterson;2005-10-18 11:48:24 +0000;scipy include_dirs are set by scipy.distutils, no need to do that in f2py.

==

scipy/f2py2e/f2py2e.py
==================
20a5d16;Pearu Peterson;2005-10-18 11:38:24 +0000;Fixed segfaults from f2py generated modules: fortranobject needed import_array.

==

scipy/__init__.py
scipy/f2py2e/capi_maps.py
scipy/f2py2e/rules.py
scipy/f2py2e/src/fortranobject.c
scipy/f2py2e/src/fortranobject.h
==================
98bb7e4;Pearu Peterson;2005-10-18 08:04:08 +0000;Fixed bug: items in data statement may be separated by commas.

==

scipy/f2py2e/crackfortran.py
scipy/f2py2e/tests/f77/return_real.py
==================
3f88695;Travis Oliphant;2005-10-18 02:01:08 +0000;Generalized newshape for adding and removing ones.

==

scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
==================
41053b0;Travis Oliphant;2005-10-18 00:15:01 +0000;Fixed so that setting shape works even for discontiguous arrays as long as only inserting or deleting unit length dimensions is involved.  This fixes problem with selecting from matrix.

==

scipy/base/matrix.py
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
==================
52dd9bb;Pearu Peterson;2005-10-17 08:17:00 +0000;Additional support for gnu compiler on 64-bit platform.

==

scipy/distutils/cpuinfo.py
scipy/distutils/fcompiler/gnu.py
==================
7ab34e1;Pearu Peterson;2005-10-16 19:44:57 +0000;Fixed return_integer tests.

==

scipy/f2py2e/__init__.py
scipy/f2py2e/f2py2e.py
scipy/f2py2e/tests/f77/return_integer.py
==================
299720f;Robert Kern;2005-10-15 17:52:17 +0000; r409@Blasphemy:  kern | 2005-10-14 20:26:04 -0700  Comment out unused RCS crud

==

scipy/corelib/mtrand/randomkit.c
==================
6e62330;Robert Kern;2005-10-15 02:55:20 +0000; r391@Blasphemy:  kern | 2005-10-14 19:54:35 -0700  Fix RandomState.random_integers()

==

scipy/corelib/mtrand/mtrand.c
scipy/corelib/mtrand/mtrand.pyx
==================
9ef026a;Travis Oliphant;2005-10-15 00:44:17 +0000;removed % from FMT string

==

scipy/base/include/scipy/arrayobject.h
scipy/base/records.py
scipy/base/src/arraytypes.inc.src
scipy/doc/CAPI.txt
==================
3fd7ab7;Pearu Peterson;2005-10-14 22:37:23 +0000;Impl. hooks to import scipy packages with info.py files.

==

scipy/__init__.py
scipy/_import_tools.py
==================
d40a2d4;cookedm;2005-10-14 21:35:36 +0000;Fix remaining compile warnings (except for one) in mtrand by using a postprocessor. ArrayType variables are declared in the .pyx file with a C name of arrayObject<something>, and the postprocessor checks that they're cast right. Also, remove declarations for unused and undefined internal functions.

==

scipy/corelib/mtrand/generate_mtrand_c.py
scipy/corelib/mtrand/mtrand.c
scipy/corelib/mtrand/mtrand.pyx
==================
0fef6d3;cookedm;2005-10-14 19:54:21 +0000;Support for setuptools, if found. You can use python setup.py bdist_egg to make a Python egg now. This seems to work for scipy_core, but I've had some trouble with scipy proper so far.

==

scipy/distutils/core.py
==================
7fb2479;cookedm;2005-10-14 19:50:06 +0000;Few more fixes for compiler warnings for mtrand. I'm still getting 'warning: assignment from incompatible pointer type' due to Pyrex not applying the <ArrayType> cast. This looks like it's going to be a bit of trouble to track it down in Pyrex.

==

scipy/corelib/mtrand/mtrand.c
scipy/corelib/mtrand/mtrand.pyx
scipy/corelib/mtrand/scipy.pxi
==================
fb62ac9;Travis Oliphant;2005-10-14 17:30:17 +0000;Cleaned up a few things in arrayobject.h

==

scipy/base/include/scipy/arrayobject.h
==================
f56b5b0;Pearu Peterson;2005-10-14 15:31:13 +0000;Initial hooks for package imports.

==

scipy/__init__.py
scipy/_import_tools.py
==================
58dbd7a;Pearu Peterson;2005-10-14 13:15:00 +0000;Doc updates and initial hooks for scipy imports.

==

scipy/__init__.py
==================
464b5d5;Pearu Peterson;2005-10-14 12:07:13 +0000;Fixed the installation path for __svn_version__.py.

==

scipy/distutils/misc_util.py
==================
92b786f;Pearu Peterson;2005-10-14 12:02:16 +0000;Updated f2py/weave setup.py files.

==

scipy/f2py2e/setup.py
scipy/weave/setup.py
==================
1993327;Pearu Peterson;2005-10-14 12:01:14 +0000;Clean up.

==

scipy/distutils/misc_util.py
==================
ad2119d;Pearu Peterson;2005-10-14 12:00:20 +0000;Fixed more add_data_dir/add_data_files bugs.

==

scipy/distutils/misc_util.py
==================
b28109b;Travis Oliphant;2005-10-14 08:34:08 +0000;Fixed __array_data__ interface.

==

scipy/base/src/arrayobject.c
scipy/base/src/scalartypes.inc.src
==================
0282cf7;Travis Oliphant;2005-10-14 07:30:24 +0000;Removed mapiter from Python exposure.

==

scipy/base/numeric.py
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
==================
366fab1;Travis Oliphant;2005-10-14 02:22:07 +0000;Fixes made necessary by change to asarray.

==

scipy/base/code_generators/generate_array_api.py
scipy/base/numeric.py
scipy/base/src/_compiled_base.c
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy/basic/basic_lite.py
scipy/doc/CAPI.txt
==================
9f12865;Travis Oliphant;2005-10-14 01:47:07 +0000;Fixed subclass PyArray_New error segfault.  Updated f2py for newscipy (a little)

==

scipy/__init__.py
scipy/base/index_tricks.py
scipy/base/numeric.py
scipy/base/src/arrayobject.c
scipy/f2py2e/capi_maps.py
scipy/f2py2e/f2py2e.py
==================
2cfd18d;Travis Oliphant;2005-10-13 23:49:15 +0000;Fixed can cast safely.

==

scipy/base/src/arrayobject.c
==================
2c6e233;Travis Oliphant;2005-10-13 23:39:44 +0000;Fixed so that array always returns an array object.

==

scipy/base/include/scipy/arrayobject.h
scipy/base/matrix.py
scipy/base/numeric.py
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy/base/src/umathmodule.c.src
==================
4d9e46d;Pearu Peterson;2005-10-13 21:25:31 +0000;Fixed typo.

==

scipy/distutils/tests/test_misc_util.py
==================
08e7fa8;cookedm;2005-10-13 16:29:04 +0000;Regenerated mtrand.c with a version of Pyrex which emits code that compiles with fewer warnings.

==

scipy/corelib/mtrand/mtrand.c
==================
c02b094;Pearu Peterson;2005-10-13 15:07:01 +0000;Fixed typo.

==

scipy/distutils/tests/test_misc_util.py
==================
d6e2f67;Pearu Peterson;2005-10-13 15:06:00 +0000;Enabled scipy.distutils tests.

==

scipy/distutils/__init__.py
scipy/distutils/setup.py
scipy/distutils/tests/test_build_src.py
scipy/distutils/tests/test_misc_util.py
==================
826a06e;Pearu Peterson;2005-10-13 15:00:09 +0000;Dropped install_init_py file and generating __core_config__.py in order to detect whether we are in source or installatio directory.

==

scipy/install__init__py
==================
8d0801d;Pearu Peterson;2005-10-13 14:59:39 +0000;Dropped install_init_py file and generating __core_config__.py in order to detect whether we are in source or installatio directory.

==

scipy/__init__.py
scipy/distutils/misc_util.py
scipy/setup.py
==================
682a875;Pearu Peterson;2005-10-13 14:57:50 +0000;Made svn version available to main setup.py script.

==

setup.py
==================
1bb2bc4;Pearu Peterson;2005-10-13 11:36:03 +0000;Added initial scipy.basic.tests site.

==

scipy/basic/__init__.py
scipy/basic/setup.py
scipy/basic/tests/test_helper.py
==================
a0cf73d;Pearu Peterson;2005-10-13 11:00:13 +0000;Renamed test_limits to test_getlimits.

==

scipy/base/tests/test_getlimits.py
scipy/base/tests/test_limits.py
==================
704e5a1;Pearu Peterson;2005-10-13 10:51:09 +0000;Renamed test_basic to test_umath.

==

scipy/base/tests/test_basic.py
scipy/base/tests/test_umath.py
==================
7768c2e;Pearu Peterson;2005-10-13 10:38:32 +0000;Shut up scipy.test(..) on missing tests. Use scipy.test(verbosity=2) to get old behaviour.

==

scipy/test/testing.py
==================
d47b79d;Pearu Peterson;2005-10-13 07:45:16 +0000;Fixed getting base svn version number - avoiding importing base while in source directory. 2nd try.

==

scipy/core_version.py
==================
b04bd56;Pearu Peterson;2005-10-13 07:40:55 +0000;Fixed getting base svn version number - avoiding importing base while in source directory.

==

scipy/core_version.py
scipy/setup.py
==================
956dd22;Pearu Peterson;2005-10-12 22:52:47 +0000;Moved importing scipy modules from __init__.py to install__init__py.

==

scipy/__init__.py
scipy/install__init__py
scipy/setup.py
==================
d54cc39;Travis Oliphant;2005-10-12 19:33:03 +0000;Updated thank yous..

==

THANKS.txt
==================
e5515fd;Travis Oliphant;2005-10-12 19:23:03 +0000;Added more doc-strings.

==

scipy/base/src/arraymethods.c
==================
f3e745b;Travis Oliphant;2005-10-12 10:09:27 +0000;change floor precision of small-bit integers

==

scipy/base/src/umathmodule.c.src
==================
0048ff0;Pearu Peterson;2005-10-12 09:58:13 +0000;Added mingw32ccompiler and lib2def to support building with Python 2.3 under Windows (msys/mingw32).

==

scipy/distutils/ccompiler.py
scipy/distutils/lib2def.py
scipy/distutils/mingw32ccompiler.py
==================
33e2d21;Travis Oliphant;2005-10-12 09:50:38 +0000;Fixed remainder to behaved like Python.

==

scipy/base/_internal.py
scipy/base/code_generators/generate_umath.py
scipy/base/numeric.py
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
scipy/base/src/umathmodule.c.src
scipy/base/ufunclike.py
==================
e3ba6c6;Travis Oliphant;2005-10-12 09:05:09 +0000;Fix buglet in set_numeric_ops

==

scipy/base/src/arrayobject.c
scipy/core_version.py
==================
594ec37;Pearu Peterson;2005-10-12 08:43:36 +0000;Added tuple argument support to add_data_dir.

==

scipy/distutils/misc_util.py
scipy/doc/DISTUTILS.txt
scipy/test/testing.py
==================
82fb451;Travis Oliphant;2005-10-12 07:50:14 +0000;Moved back to 0.4.2

==

scipy/base/setup.py
scipy/base/src/umathmodule.c.src
scipy/core_version.py
==================
dce41a2;Travis Oliphant;2005-10-12 05:21:47 +0000;Moved doc to subdir of scipy

==

doc/CAPI.txt
doc/DISTUTILS.txt
doc/README.txt
scipy/doc/CAPI.txt
scipy/doc/DISTUTILS.txt
scipy/doc/README.txt
scipy/setup.py
==================
8c1d5fa;Travis Oliphant;2005-10-12 04:05:38 +0000;Updated version after beta tag

==

scipy/core_version.py
==================
1f5d8ae;Travis Oliphant;2005-10-12 03:43:40 +0000;Fixed memset to 0 in dotblas.

==

scipy/corelib/blasdot/_dotblas.c
==================
b94cc89;Travis Oliphant;2005-10-12 03:42:48 +0000;Fixed memset to 0 in dotblas.

==

scipy/corelib/blasdot/_dotblas.c
==================
3d0634c;Robert Kern;2005-10-12 02:51:09 +0000; r328@Blasphemy:  kern | 2005-10-11 19:50:41 -0700  matrix.py fixes and tests.

==

scipy/base/matrix.py
scipy/base/tests/test_matrix.py
==================
c9833ef;Robert Kern;2005-10-12 02:51:02 +0000; r327@Blasphemy:  kern | 2005-10-11 19:49:52 -0700  Missing self.

==

scipy/distutils/command/build_src.py
==================
e8e5a12;Travis Oliphant;2005-10-12 02:34:31 +0000;Fixed getting things from scipy.linalg

==

scipy/base/matrix.py
scipy/base/polynomial.py
scipy/corelib/blasdot/_dotblas.c
==================
e5d34e2;cookedm;2005-10-11 23:01:16 +0000;cookedm doing test commit

==

TEST_COMMIT
==================
c4bd04d;Travis Oliphant;2005-10-11 22:23:07 +0000;Added new user.

==

TEST_COMMIT
==================
c18832a;Travis Oliphant;2005-10-11 21:47:34 +0000;Fixed flags problem on array_interface conversion.

==

scipy/base/src/arrayobject.c
==================
3fc25bb;Travis Oliphant;2005-10-11 19:47:02 +0000;Removed comments.  Fixed can_cast so that 64-bit integer can be cast safely to a double precision.

==

scipy/base/src/arrayobject.c
scipy/base/src/ufuncobject.c
==================
9edde60;Travis Oliphant;2005-10-11 18:57:47 +0000;Fixed long double unary func problem.

==

scipy/base/src/ufuncobject.c
==================
7f1961c;chanley;2005-10-11 18:47:16 +0000;10/11/05 -- CJH -- Commented out diagnostic print statement.

==

scipy/base/src/ufuncobject.c
==================
47d169b;Travis Oliphant;2005-10-10 21:55:29 +0000;Added ndenumerate.  Some print statements for debugging on 64-bit

==

scipy/base/index_tricks.py
scipy/base/src/ufuncobject.c
==================
652a657;chanley;2005-10-10 19:45:54 +0000;test commit

==

TEST_COMMIT
==================
3febd7b;chanley;2005-10-10 18:12:39 +0000;test change

==

scipy/base/records.py
==================
1f624ba;Travis Oliphant;2005-10-10 17:07:28 +0000;Fixed typo

==

scipy/base/src/umathmodule.c.src
==================
57971b8;Travis Oliphant;2005-10-10 16:13:29 +0000;Print statements for 64-bit debug.

==

doc/CAPI.txt
scipy/base/src/ufuncobject.c
==================
e8fc406;Travis Oliphant;2005-10-10 03:32:31 +0000;Fixed scalar stuff again.

==

scipy/base/src/scalartypes.inc.src
==================
9eda64c;Travis Oliphant;2005-10-10 02:08:44 +0000;Infinite recursion for long doubles.

==

scipy/base/src/arraytypes.inc.src
scipy/base/src/scalartypes.inc.src
==================
150f901;swalton;2005-10-09 19:31:44 +0000;Removed deleted mtrand routines from scipy/corelib/setup.py and fixed rand() docstring in mtrand.pyx.

==

scipy/corelib/mtrand/mtrand.pyx
scipy/corelib/setup.py
==================
6f21495;Robert Kern;2005-10-09 16:55:06 +0000; r300@Blasphemy:  kern | 2005-10-09 09:54:11 -0700  Remove dependency on Cephes stuff

==

scipy/corelib/mtrand/const.c
scipy/corelib/mtrand/distributions.c
scipy/corelib/mtrand/distributions.h
scipy/corelib/mtrand/gamma.c
scipy/corelib/mtrand/isnan.c
scipy/corelib/mtrand/mconf.h
scipy/corelib/mtrand/mtrand.c
scipy/corelib/mtrand/mtrand.pyx
scipy/corelib/mtrand/polevl.c
scipy/corelib/mtrand/protos.h
==================
9792b8b;Travis Oliphant;2005-10-09 08:50:26 +0000;More fixes for 64-bit systems.

==

scipy/base/src/arrayobject.c
scipy/base/src/ufuncobject.c
==================
4a11f55;Travis Oliphant;2005-10-09 08:07:32 +0000;Fixed loop->bufcnt for 64-bit fixes.

==

doc/CAPI.txt
scipy/base/include/scipy/arrayobject.h
scipy/base/include/scipy/ufuncobject.h
scipy/base/src/_compiled_base.c
scipy/base/src/ufuncobject.c
scipy/corelib/fftpack_lite/fftpack_litemodule.c
scipy/corelib/mtrand/mtrand.c
scipy/corelib/mtrand/scipy.pxi
==================
6f56244;Travis Oliphant;2005-10-09 06:08:21 +0000;Fixed off-by-one at end problem with fromfile text files.

==

scipy/base/src/arraytypes.inc.src
scipy/base/src/multiarraymodule.c
==================
1bfa259;Travis Oliphant;2005-10-09 05:14:31 +0000;Added comments

==

scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
==================
47c9ceb;Travis Oliphant;2005-10-08 22:23:11 +0000;Fixed backwards compatibility with Numeric on 64-bit machines.

==

scipy/base/code_generators/generate_array_api.py
scipy/base/include/scipy/arrayobject.h
scipy/base/src/multiarraymodule.c
==================
b81e0a0;Travis Oliphant;2005-10-08 21:39:19 +0000;Fixes to get core version working.

==

scipy/core_version.py
==================
747d81f;Travis Oliphant;2005-10-08 21:34:40 +0000;Fixed typo and moved __svn_version__ for core

==

scipy/__init__.py
scipy/base/setup.py
scipy/base/src/arrayobject.c
scipy/core_version.py
scipy/setup.py
==================
92af93f;Travis Oliphant;2005-10-08 20:43:15 +0000;More information on flags...

==

doc/CAPI.txt
==================
016786a;Travis Oliphant;2005-10-08 20:10:49 +0000;Added a blank README file for rpm

==

README.txt
==================
8f185e4;Travis Oliphant;2005-10-08 19:55:54 +0000;Improve the array docstring a bit.

==

scipy/base/src/arrayobject.c
==================
8b0a6e8;Travis Oliphant;2005-10-08 19:32:20 +0000;Fix use of PyArray_New in PyArray_FromDims

==

scipy/base/src/arrayobject.c
==================
943e381;Travis Oliphant;2005-10-08 19:25:19 +0000;Some printing fixes.

==

scipy/base/src/arrayobject.c
==================
fdfefd7;Travis Oliphant;2005-10-08 19:20:53 +0000;More 64 bit fixes.

==

scipy/base/src/arrayobject.c
scipy/base/src/scalartypes.inc.src
scipy/corelib/mtrand/distributions.c
scipy/corelib/mtrand/mtrand.c
scipy/corelib/mtrand/mtrand.pyx
==================
21d16bd;Travis Oliphant;2005-10-08 05:22:32 +0000;Fixed some typecode initilization warnings.  Made core libraries accessible directly under scipy name space.

==

scipy/__init__.py
scipy/base/matrix.py
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy/base/tests/test_index_tricks.py
==================
bb644a0;Travis Oliphant;2005-10-07 23:10:43 +0000;Minor changes

==

doc/CAPI.txt
==================
1effbf8;Pearu Peterson;2005-10-07 22:04:01 +0000;Moving DISTUTILS.txt to newcore/doc.

==

doc/DISTUTILS.txt
==================
52c686c;Travis Oliphant;2005-10-07 20:19:55 +0000;Moved extra modules to basic

==

scipy/__init__.py
scipy/base/convertcode.py
scipy/base/matrix.py
scipy/basic/__init__.py
scipy/basic/basic_lite.py
scipy/basic/fft.py
scipy/basic/fft_lite.py
scipy/basic/helper.py
scipy/basic/linalg.py
scipy/basic/random.py
scipy/core_version.py
scipy/fftpack/__init__.py
scipy/fftpack/fft_lite.py
scipy/fftpack/helper.py
scipy/linalg/__init__.py
scipy/linalg/basic_lite.py
scipy/random.py
scipy/setup.py
==================
4d0a78f;Travis Oliphant;2005-10-07 18:45:37 +0000;Minor formatting changes.

==

THANKS.txt
==================
ab3e2b4;Travis Oliphant;2005-10-07 18:36:20 +0000;Fixed formatting.

==

doc/CAPI.txt
==================
c5e4fba;Travis Oliphant;2005-10-07 18:30:23 +0000;Fixed up one change in PyArray_New

==

scipy/base/src/ufuncobject.c
==================
3f0cd73;Travis Oliphant;2005-10-07 18:28:56 +0000;Added some simple CAPI documentation.

==

COMPATIBILITY
doc/CAPI.txt
doc/README.txt
scipy/base/code_generators/generate_array_api.py
scipy/base/include/scipy/arrayobject.h
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
==================
dfdb868;Travis Oliphant;2005-10-07 17:07:47 +0000;Fixed more intp issues.

==

scipy/base/src/arrayobject.c
==================
8af0fea;Robert Kern;2005-10-07 10:12:43 +0000; r206@Blasphemy:  kern | 2005-10-07 03:12:29 -0700  Okay, for real this time. scipy.random will be a module, and developers will actually communicate with each other in the future.

==

scipy/random.py
==================
7239af6;Travis Oliphant;2005-10-07 09:49:47 +0000;Finished delting random.

==

scipy/setup.py
==================
9caec19;Travis Oliphant;2005-10-07 09:48:03 +0000;Deleted random package.

==

scipy/random/__init__.py
==================
f47d2fd;Robert Kern;2005-10-07 09:46:21 +0000; r201@Blasphemy:  kern | 2005-10-07 02:46:04 -0700  Don't need this anymore

==

scipy/random.py
==================
c060cee;Travis Oliphant;2005-10-07 09:43:38 +0000;More 64-bit fixes.

==

scipy/base/numeric.py
==================
1f5d0b4;Travis Oliphant;2005-10-07 09:40:25 +0000;More checks for SIZEOF_LONGLONG==SIZEOF_LONG

==

scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
==================
d2b5deb;Robert Kern;2005-10-07 09:40:12 +0000; r188@Blasphemy:  kern | 2005-10-07 02:37:24 -0700  Move scipy.stats to scipy.random. Add logarithmic-series distribution.

==

scipy/corelib/mtrand/distributions.c
scipy/corelib/mtrand/distributions.h
scipy/corelib/mtrand/mtrand.c
scipy/corelib/mtrand/mtrand.pyx
scipy/random.py
==================
06e8eab;Travis Oliphant;2005-10-07 09:02:50 +0000;Fixed import problem.

==

scipy/fftpack/helper.py
==================
54a193f;Travis Oliphant;2005-10-07 09:01:49 +0000;Added Inf to base

==

scipy/base/numeric.py
scipy/base/type_check.py
==================
e67afea;Travis Oliphant;2005-10-07 08:55:08 +0000;Some more fixes

==

scipy/base/src/ufuncobject.c
==================
911cb6b;Travis Oliphant;2005-10-07 08:47:52 +0000;Fixed missing intp's

==

scipy/base/src/ufuncobject.c
==================
de02f81;Travis Oliphant;2005-10-07 08:17:39 +0000;Get rid of rfftfreq and add random.

==

scipy/fftpack/helper.py
scipy/setup.py
==================
1348aa1;Travis Oliphant;2005-10-07 07:59:45 +0000;Trial run of random...

==

scipy/__init__.py
scipy/base/convertcode.py
scipy/random/__init__.py
scipy/stats/__init__.py
==================
a3a464b;Travis Oliphant;2005-10-07 07:47:15 +0000;Some f2py fixes

==

scipy/base/include/scipy/ufuncobject.h
scipy/f2py2e/cfuncs.py
==================
061e5e4;Travis Oliphant;2005-10-07 07:19:13 +0000;Fixed up add_library for a bit.

==

scipy/distutils/misc_util.py
==================
2b5ac62;Travis Oliphant;2005-10-07 06:54:42 +0000;Fixed up fftpack a bit.  Don't want to conflict with scipy's use of rfft.

==

scipy/base/shape_base.py
scipy/fftpack/__init__.py
==================
df3bc1b;Travis Oliphant;2005-10-07 05:32:15 +0000;Added helper.py from scipy.

==

scipy/fftpack/__init__.py
scipy/fftpack/helper.py
==================
04a98ff;Robert Kern;2005-10-07 05:02:43 +0000; r165@Blasphemy:  kern | 2005-10-06 22:02:09 -0700  More distributions!

==

scipy/corelib/mtrand/distributions.c
scipy/corelib/mtrand/distributions.h
scipy/corelib/mtrand/mtrand.c
scipy/corelib/mtrand/mtrand.pyx
scipy/stats/__init__.py
==================
1c8e6d9;Robert Kern;2005-10-07 05:02:35 +0000; r164@Blasphemy:  kern | 2005-10-06 22:01:39 -0700  Typo

==

scipy/base/function_base.py
==================
0a8d3a1;Travis Oliphant;2005-10-07 02:45:16 +0000;Fixed vectorize segfault...

==

scipy/base/src/ufuncobject.c
==================
d52d900;Travis Oliphant;2005-10-07 00:06:47 +0000;Fixed issues with threading...

==

scipy/base/include/scipy/arrayobject.h
scipy/base/include/scipy/ufuncobject.h
scipy/base/src/arrayobject.c
scipy/base/src/ufuncobject.c
==================
c2871a8;Travis Oliphant;2005-10-06 22:15:37 +0000;Added optimization for array_subscript and eleminated threaded support for a while.

==

scipy/base/include/scipy/arrayobject.h
scipy/base/src/arrayobject.c
==================
6de1ded;Travis Oliphant;2005-10-06 16:55:50 +0000;Added more COMPATIBILITY info.

==

COMPATIBILITY
==================
bce31b0;Travis Oliphant;2005-10-06 02:47:25 +0000;Added compatibility information

==

COMPATIBILITY
scipy/base/include/scipy/arrayobject.h
==================
3dc10e0;Travis Oliphant;2005-10-05 21:10:05 +0000;Fixed tests.

==

scipy/base/tests/test_type_check.py
==================
3d544ba;Travis Oliphant;2005-10-05 21:01:55 +0000;Fixed some BOOL-related bugs.  BOOLs are now cast to their correct type.

==

scipy/base/src/arrayobject.c
scipy/base/src/arraytypes.inc.src
scipy/base/src/scalartypes.inc.src
scipy/base/src/umathmodule.c.src
==================
9ce3555;Travis Oliphant;2005-10-05 19:57:28 +0000;Fixed remaining problems with casting buffer sizes..

==

scipy/base/_internal.py
scipy/base/src/arraytypes.inc.src
scipy/base/src/ufuncobject.c
scipy/base/src/umathmodule.c.src
==================
2444393;Robert Kern;2005-10-05 11:21:51 +0000; r107@Blasphemy:  kern | 2005-10-05 04:21:41 -0700  Activate apply_along_axis test

==

scipy/base/tests/test_shape_base.py
==================
e35b804;Robert Kern;2005-10-05 11:20:28 +0000; r104@Blasphemy:  kern | 2005-10-05 04:20:16 -0700  Fix apply_along_axis

==

scipy/base/shape_base.py
==================
b3b6921;Robert Kern;2005-10-05 11:13:17 +0000; r88@Blasphemy:  kern | 2005-10-04 07:03:42 -0700  Some fixes to code and tests

==

scipy/base/tests/test_shape_base.py
scipy/base/tests/test_type_check.py
scipy/base/type_check.py
scipy/base/ufunclike.py
==================
e3a5778;Travis Oliphant;2005-10-05 10:35:21 +0000;Added feature that output arrays less than bufsize make temporaries...

==

scipy/base/src/arrayobject.c
scipy/base/src/ufuncobject.c
==================
c3a9fe7;Travis Oliphant;2005-10-05 09:00:20 +0000;Fixed some more bugs

==

scipy/base/src/arraytypes.inc.src
scipy/base/src/ufuncobject.c
scipy/base/tests/test_twodim_base.py
==================
2d40d9e;Pearu Peterson;2005-10-05 07:28:03 +0000;Moved inclusion of files from MANIFEST.in to proper setup.py files.

==

MANIFEST.in
scipy/base/setup.py
scipy/corelib/setup.py
scipy/distutils/misc_util.py
==================
77ec6f0;Travis Oliphant;2005-10-05 07:07:39 +0000;Fixed object put bug..

==

MANIFEST.in
scipy/base/src/arrayobject.c
scipy/base/src/arraytypes.inc.src
scipy/base/src/multiarraymodule.c
scipy/base/src/ufuncobject.c
==================
b4a71a6;Robert Kern;2005-10-04 13:06:44 +0000; r85@Blasphemy:  kern | 2005-10-04 03:56:27 -0700  Ahem

==

scipy/base/shape_base.py
==================
ea06171;Robert Kern;2005-10-04 13:06:37 +0000; r84@Blasphemy:  kern | 2005-10-04 03:55:47 -0700  methodize take() and shape() calls

==

scipy/base/shape_base.py
==================
4219df8;Robert Kern;2005-10-04 10:26:08 +0000; r82@Blasphemy:  kern | 2005-10-04 03:25:34 -0700  defined(darwin) -> defined(__APPLE__); a similar change should happen in numarray, too

==

scipy/base/include/scipy/ufuncobject.h
==================
d32f2d2;Pearu Peterson;2005-10-04 08:37:12 +0000;Added extra_info kw to add_extension method. Cleaned corelib setup.py.

==

scipy/corelib/setup.py
scipy/distutils/misc_util.py
==================
50967f0;Pearu Peterson;2005-10-04 08:09:47 +0000;Added cblas.h.

==

scipy/corelib/blasdot/_dotblas.c
scipy/corelib/blasdot/cblas.h
==================
d92e550;Travis Oliphant;2005-10-04 07:20:14 +0000;Improved logic so sequence can act like tuple for advanced indexing as well.

==

scipy/base/src/arrayobject.c
==================
3dfcce1;Travis Oliphant;2005-10-04 06:47:28 +0000;Made sure that arbitrary sequences (smaller than MAX_DIMS) with slice objects in them use standard indexing.

==

scipy/base/src/arrayobject.c
==================
118022b;Travis Oliphant;2005-10-04 04:31:21 +0000;Fixed Broadcasting problem introduced by previous fixes...

==

scipy/base/src/ufuncobject.c
==================
fd10c43;Travis Oliphant;2005-10-03 23:58:56 +0000;Fixed segfaults in buffered casting when castsize was different than buffersize.  Also fixed so copies are made whenever the array is less than the buffersize

==

scipy/base/code_generators/generate_array_api.py
scipy/base/include/scipy/arrayobject.h
scipy/base/matrix.py
scipy/base/numeric.py
scipy/base/src/arrayobject.c
scipy/base/src/arraytypes.inc.src
scipy/base/src/ufuncobject.c
==================
68a551c;Travis Oliphant;2005-10-03 17:13:50 +0000;Several fixes.

==

scipy/base/_internal.py
scipy/base/function_base.py
scipy/base/include/scipy/arrayobject.h
scipy/base/matrix.py
scipy/base/numeric.py
scipy/base/oldnumeric.py
scipy/base/records.py
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
scipy/base/src/ufuncobject.c
scipy/base/ufunclike.py
scipy/linalg/basic_lite.py
==================
c04829a;Travis Oliphant;2005-10-02 20:26:11 +0000;Fix problem with uninitialized memory in _dotblas.  Changed old C-API to set the memory to 0 as before.

==

scipy/__init__.py
scipy/base/src/arrayobject.c
scipy/corelib/blasdot/_dotblas.c
scipy/linalg/basic_lite.py
==================
e00e0b3;Travis Oliphant;2005-10-02 19:07:04 +0000;Fixed bug in umath absolute.

==

scipy/base/code_generators/generate_umath.py
scipy/linalg/basic_lite.py
==================
7bada31;Travis Oliphant;2005-10-02 09:23:59 +0000;Fixing some linalg bugs...

==

scipy/__init__.py
scipy/base/twodim_base.py
scipy/linalg/basic_lite.py
==================
fa3237c;Travis Oliphant;2005-10-02 06:23:10 +0000;Improved logic.

==

scipy/corelib/setup.py
==================
e901c38;Travis Oliphant;2005-10-02 06:21:37 +0000;One minor change to sdist.

==

scipy/distutils/command/sdist.py
==================
079a8b7;Travis Oliphant;2005-10-02 06:18:35 +0000;Fixed setup.py to add extensions when sdist is run

==

scipy/corelib/setup.py
scipy/distutils/command/sdist.py
==================
fb0ceff;Travis Oliphant;2005-10-02 03:51:44 +0000;Fixes by Eric Firing..

==

THANKS.txt
scipy/base/function_base.py
scipy/base/matrix.py
scipy/base/numeric.py
scipy/base/numerictypes.py
scipy/base/oldnumeric.py
scipy/base/src/arraymethods.c
scipy/base/src/multiarraymodule.c
==================
0e1c0c0;swalton;2005-10-02 00:36:17 +0000;

==

TEST_COMMIT
==================
7124b14;Travis Oliphant;2005-10-01 23:50:35 +0000;Matrix indexing weirdness

==

scipy/base/matrix.py
==================
3778b72;Travis Oliphant;2005-10-01 22:52:33 +0000;Simpler names in fftpack

==

scipy/fftpack/__init__.py
scipy/fftpack/fft_lite.py
scipy/linalg/__init__.py
scipy/stats/__init__.py
==================
e8d9c37;Travis Oliphant;2005-10-01 21:08:20 +0000;Removed sign and round as methods -- more like ufuncs

==

scipy/base/__init__.py
scipy/base/arrayprint.py
scipy/base/code_generators/generate_array_api.py
scipy/base/function_base.py
scipy/base/oldnumeric.py
scipy/base/src/arraymethods.c
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
scipy/base/type_check.py
scipy/base/ufunclike.py
==================
17bf4ce;Travis Oliphant;2005-10-01 09:19:11 +0000;Add error checking for object ufuncs.

==

scipy/base/include/scipy/ufuncobject.h
scipy/base/numeric.py
scipy/base/numerictypes.py
scipy/base/src/ufuncobject.c
scipy/base/src/umathmodule.c.src
==================
c2fcb2a;Travis Oliphant;2005-09-30 22:08:26 +0000;Improve overflow detection.

==

scipy/base/src/umathmodule.c.src
==================
5dca9eb;Travis Oliphant;2005-09-30 22:04:46 +0000;Altered error detection to use raiseexcept when appropriate.  Also, clear fperrors at start of ufunc computation.

==

scipy/base/include/scipy/ufuncobject.h
scipy/base/src/ufuncobject.c
scipy/base/src/umathmodule.c.src
==================
a75de92;Travis Oliphant;2005-09-30 19:31:23 +0000;Fixed some casting rule issues.

==

scipy/base/oldnumeric.py
scipy/base/src/arrayobject.c
scipy/base/src/umathmodule.c.src
==================
fe01351;Pearu Peterson;2005-09-30 19:25:28 +0000;Impl. atanhf and using it for detecting HAVE_INVERSE_HYPERBOLIC_FLOAT.

==

scipy/base/setup.py
scipy/base/src/umathmodule.c.src
==================
0267fe6;Travis Oliphant;2005-09-30 19:12:21 +0000;Added two to TEST_COMMIT

==

TEST_COMMIT
scipy/base/_internal.py
scipy/base/oldnumeric.py
==================
7831378;Fernando Perez;2005-09-30 17:30:56 +0000;Testing fperez commit

==

TEST_COMMIT
==================
8087035;Pearu Peterson;2005-09-30 17:27:11 +0000;Define atanhf,asinhf,acoshf when missing (like in mingw32).

==

scipy/base/setup.py
scipy/base/src/umathmodule.c.src
==================
dc21239;Pearu Peterson;2005-09-30 17:08:26 +0000;Fixed config_cmd.check_func call bugs that used to return always True.

==

scipy/base/setup.py
scipy/base/tests/test_type_check.py
==================
5471cf5;Pearu Peterson;2005-09-30 12:04:38 +0000;Exposing scipy.test(..), scipy.base.test(..) functions.

==

scipy/__init__.py
scipy/base/__init__.py
scipy/test/testing.py
==================
7ee2b43;Pearu Peterson;2005-09-30 09:38:09 +0000;Fixed and improved scipy.distutils.

==

scipy/base/__init__.py
scipy/base/numeric.py
scipy/base/setup.py
scipy/distutils/command/build_src.py
scipy/distutils/misc_util.py
scipy/distutils/system_info.py
scipy/setup.py
==================
759d4d8;Pearu Peterson;2005-09-30 07:03:42 +0000;Removed Numeric dependence.

==

scipy/f2py2e/f2py2e.py
scipy/f2py2e/rules.py
scipy/f2py2e/src/fortranobject.h
==================
358fdf2;Travis Oliphant;2005-09-30 06:56:18 +0000;Making sure it committed

==

scipy/core_version.py
==================
ce8da23;Pearu Peterson;2005-09-30 06:45:22 +0000;Removed Numeric dependence.

==

scipy/corelib/mtrand/mtrand.c
scipy/corelib/mtrand/mtrand.pyx
==================
d87d7f7;Travis Oliphant;2005-09-30 05:01:23 +0000;Fixing header.

==

scipy/base/include/scipy/arrayobject.h
==================
d744209;Travis Oliphant;2005-09-30 04:46:56 +0000;Removed bad define.

==

scipy/base/include/scipy/arrayobject.h
==================
18ee121;Travis Oliphant;2005-09-30 00:13:39 +0000;Fixed compatibility issues.

==

scipy/base/include/scipy/arrayobject.h
scipy/core_version.py
scipy/f2py2e/src/fortranobject.c
==================
1ba7b90;Travis Oliphant;2005-09-29 23:38:40 +0000;Pearu can write.

==

TEST_COMMIT
==================
4f5ab59;Travis Oliphant;2005-09-29 23:34:20 +0000;Final changes..

==

scipy/base/include/scipy/ufuncobject.h
scipy/base/src/ufuncobject.c
scipy/base/src/umathmodule.c.src
==================
481b572;Pearu Peterson;2005-09-29 23:03:33 +0000;Removed obsolete test-site.

==

scipy/f2py2e/test-site/a/geniotest.py
scipy/f2py2e/test-site/a/runme.py
scipy/f2py2e/test-site/b/array.f
scipy/f2py2e/test-site/b/arraytest.f
scipy/f2py2e/test-site/b/callbacktest.f
scipy/f2py2e/test-site/b/complextest.f
scipy/f2py2e/test-site/b/marraytest.f
scipy/f2py2e/test-site/b/runme.py
scipy/f2py2e/test-site/b/scalar.f
scipy/f2py2e/test-site/c/complextest_c.c
scipy/f2py2e/test-site/cb/cb.pyf
scipy/f2py2e/test-site/cb/test.f
scipy/f2py2e/test-site/cf/Makefile
scipy/f2py2e/test-site/cf/test.f
scipy/f2py2e/test-site/curtis/cabase-smart.f90
scipy/f2py2e/test-site/curtis/cabase1.f
scipy/f2py2e/test-site/curtis/cabase1.py
scipy/f2py2e/test-site/curtis/cabase2.f
scipy/f2py2e/test-site/curtis/cabase2.py
scipy/f2py2e/test-site/curtis/cabase2m.f
scipy/f2py2e/test-site/curtis/runme_curtis
scipy/f2py2e/test-site/curtis/test.py
scipy/f2py2e/test-site/d/array.f
scipy/f2py2e/test-site/d/callback-test.py
scipy/f2py2e/test-site/d/callbacktest.f
scipy/f2py2e/test-site/d/runme_array
scipy/f2py2e/test-site/d/runme_callback
scipy/f2py2e/test-site/d/runme_scalar
scipy/f2py2e/test-site/d/runme_string
scipy/f2py2e/test-site/d/scalar.f
scipy/f2py2e/test-site/d/string.f
scipy/f2py2e/test-site/detail/argpasstest.py
scipy/f2py2e/test-site/detail/cbreturntest.py
scipy/f2py2e/test-site/detail/f2pytests.py
scipy/f2py2e/test-site/detail/genfuntests.py
scipy/f2py2e/test-site/detail/gentests.py
scipy/f2py2e/test-site/detail/returntest.py
scipy/f2py2e/test-site/detail/runtests.py
scipy/f2py2e/test-site/detail/simpletest.py
scipy/f2py2e/test-site/e/com1a.f
scipy/f2py2e/test-site/e/common.f
scipy/f2py2e/test-site/e/runme_com1
scipy/f2py2e/test-site/e/runme_common
scipy/f2py2e/test-site/g/param.in
scipy/f2py2e/test-site/g/runme
scipy/f2py2e/test-site/g/smgice.f
scipy/f2py2e/test-site/h/bar.f
scipy/f2py2e/test-site/h/bar.f90
scipy/f2py2e/test-site/h/barcom.f
scipy/f2py2e/test-site/h/bardata.f90
scipy/f2py2e/test-site/h/cbar.f
scipy/f2py2e/test-site/h/cbar.f90
scipy/f2py2e/test-site/minpack/minpack-smart.pyf
scipy/f2py2e/test-site/minpack/runme_minpack
scipy/f2py2e/test-site/minpack/src/chkder.f
scipy/f2py2e/test-site/minpack/src/covar.f
scipy/f2py2e/test-site/minpack/src/dmchar.f
scipy/f2py2e/test-site/minpack/src/dogleg.f
scipy/f2py2e/test-site/minpack/src/dpmpar.f
scipy/f2py2e/test-site/minpack/src/enorm.f
scipy/f2py2e/test-site/minpack/src/errjac.f
scipy/f2py2e/test-site/minpack/src/fdjac1.f
scipy/f2py2e/test-site/minpack/src/fdjac2.f
scipy/f2py2e/test-site/minpack/src/grdfcn.f
scipy/f2py2e/test-site/minpack/src/hybrd.f
scipy/f2py2e/test-site/minpack/src/hybrj.f
scipy/f2py2e/test-site/minpack/src/lmder.f
scipy/f2py2e/test-site/minpack/src/lmdif.f
scipy/f2py2e/test-site/minpack/src/lmpar.f
scipy/f2py2e/test-site/minpack/src/lmstr.f
scipy/f2py2e/test-site/minpack/src/objfcn.f
scipy/f2py2e/test-site/minpack/src/qform.f
scipy/f2py2e/test-site/minpack/src/qrfac.f
scipy/f2py2e/test-site/minpack/src/qrsolv.f
scipy/f2py2e/test-site/minpack/src/r1mpyq.f
scipy/f2py2e/test-site/minpack/src/r1updt.f
scipy/f2py2e/test-site/minpack/src/rwupdt.f
scipy/f2py2e/test-site/minpack/src/ssqfcn.f
scipy/f2py2e/test-site/minpack/src/ssqjac.f
scipy/f2py2e/test-site/minpack/src/vecfcn.f
scipy/f2py2e/test-site/minpack/src/vecjac.f
scipy/f2py2e/test-site/mod/data_mod.f
scipy/f2py2e/test-site/mod/main.c
scipy/f2py2e/test-site/mod/runme
scipy/f2py2e/test-site/mod/runme_mod
scipy/f2py2e/test-site/mod/simple.py
scipy/f2py2e/test-site/mod/simple2.pyf
scipy/f2py2e/test-site/mod/sub.f90
scipy/f2py2e/test-site/mod/test.f
scipy/f2py2e/test-site/mod/wrap.f90
scipy/f2py2e/test-site/quadpack/runme_quadpack
scipy/f2py2e/test-site/simple/gen_setup.sh
scipy/f2py2e/test-site/simple/src/array.f
scipy/f2py2e/test-site/simple/src/scalar.f
scipy/f2py2e/test-site/simple/test_array.py
scipy/f2py2e/test-site/simple/test_scalar.py
scipy/f2py2e/test-site/splines/runme_splines
scipy/f2py2e/test-site/splines/splines-smart.pyf
scipy/f2py2e/test-site/test_f2py2e.py
==================
dfcf45c;Pearu Peterson;2005-09-29 22:49:01 +0000;Added f2py2e as scipy.f2py, improved scipy.distutils, fixed setup.py files, etc

==

MANIFEST.in
scipy/base/setup.py
scipy/distutils/command/__init__.py
scipy/distutils/command/build_ext.py
scipy/distutils/command/build_scripts.py
scipy/distutils/command/build_src.py
scipy/distutils/core.py
scipy/distutils/misc_util.py
scipy/distutils/system_info.py
scipy/f2py2e/__cvs_version__.py
scipy/f2py2e/__version__.py
scipy/f2py2e/setup.py
==================
615d814;Travis Oliphant;2005-09-29 22:29:00 +0000;Changed names from axxxxx to xxxx_ for types that shadow builtin types.

==

scipy/base/getlimits.py
scipy/base/numeric.py
scipy/base/numerictypes.py
scipy/base/twodim_base.py
scipy/base/type_check.py
==================
fe215b7;Travis Oliphant;2005-09-29 22:15:05 +0000;Added test_commit file

==

TEST_COMMIT
==================
9c5f512;Travis Oliphant;2005-09-29 19:39:52 +0000;More thanks...

==

THANKS.txt
setup.py
==================
8e60b39;Travis Oliphant;2005-09-29 18:24:07 +0000;Added Stephen Walton's patch for absoft.py

==

scipy/distutils/fcompiler/absoft.py
==================
add3f7a;Travis Oliphant;2005-09-29 16:05:47 +0000;Fixed richcmp inheritance.

==

scipy/base/src/scalartypes.inc.src
==================
26a1580;Robert Kern;2005-09-29 10:12:30 +0000; r3539@Blasphemy:  kern | 2005-09-29 03:12:18 -0700  Bit of a merge conflict.

==

scipy/base/type_check.py
==================
56728d5;Robert Kern;2005-09-29 10:08:49 +0000; r3532@Blasphemy:  kern | 2005-09-29 03:08:25 -0700  More test fixes

==

scipy/base/function_base.py
scipy/base/index_tricks.py
scipy/base/numeric.py
scipy/base/shape_base.py
scipy/base/tests/test_function_base.py
scipy/base/tests/test_matrix_base.py
scipy/base/tests/test_twodim_base.py
scipy/base/twodim_base.py
scipy/base/type_check.py
==================
305fabe;Robert Kern;2005-09-29 10:08:32 +0000; r3531@Blasphemy:  kern | 2005-09-29 02:05:01 -0700  Restoring tests

==

scipy/base/setup.py
scipy/base/tests/test_basic.py
scipy/base/tests/test_function_base.py
scipy/base/tests/test_index_tricks.py
scipy/base/tests/test_limits.py
scipy/base/tests/test_matrix_base.py
scipy/base/tests/test_shape_base.py
scipy/base/tests/test_type_check.py
scipy/test/testing.py
==================
ca2d4dc;Travis Oliphant;2005-09-29 09:23:46 +0000;Added a can_cast Python function.

==

scipy/base/code_generators/generate_array_api.py
scipy/base/numeric.py
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
==================
5daeb8e;Travis Oliphant;2005-09-29 08:34:21 +0000;Eliminated random_lite

==

scipy/stats/random_lite.py
==================
b953386;Travis Oliphant;2005-09-29 08:29:28 +0000;Simplified scalar type checking.

==

scipy/base/getlimits.py
scipy/base/info_scipy_base.py
scipy/base/machar.py
scipy/base/src/arraytypes.inc.src
scipy/base/src/ufuncobject.c
scipy/base/type_check.py
==================
a287aa7;Robert Kern;2005-09-29 07:30:56 +0000; r3529@Blasphemy:  kern | 2005-09-29 00:30:52 -0700  Remove mconf_{BE,LE}.h split

==

scipy/corelib/mtrand/isnan.c
scipy/corelib/mtrand/mconf.h
scipy/corelib/mtrand/mconf_BE.h
scipy/corelib/mtrand/mconf_LE.h
==================
e7f6a7c;Robert Kern;2005-09-29 07:02:33 +0000;

==

scipy/corelib/mtrand/mtrand.pyx
==================
57315b1;Robert Kern;2005-09-29 07:00:14 +0000; r3519@Blasphemy:  kern | 2005-09-28 22:56:10 -0700  mtrand pickle support and some clean up

==

scipy/corelib/mtrand/mtrand.c
scipy/corelib/mtrand/mtrand.pyx
scipy/corelib/mtrand/randomkit.h
scipy/stats/__init__.py
==================
9bb9833;Robert Kern;2005-09-29 06:59:17 +0000; r3509@Blasphemy:  kern | 2005-09-27 22:50:18 -0700  mtrand fixes

==

scipy/corelib/mtrand/mtrand.c
scipy/corelib/mtrand/mtrand.pyx
scipy/corelib/mtrand/randomkit.c
scipy/stats/__init__.py
==================
dfe6c48;Travis Oliphant;2005-09-29 03:26:24 +0000;No pre-computing limits in getlimits.py

==

scipy/base/getlimits.py
scipy/base/type_check.py
==================
8c8881a;Travis Oliphant;2005-09-29 01:26:44 +0000;improving a.flags

==

scipy/base/_internal.py
==================
422e931;Travis Oliphant;2005-09-29 01:25:33 +0000;Updated flags attribute to special dictionary.

==

scipy/base/_internal.py
==================
a9f62af;Travis Oliphant;2005-09-29 01:24:04 +0000;Updated flags attribute to special dictionary.

==

scipy/base/_internal.py
scipy/base/type_check.py
==================
4742ef0;Travis Oliphant;2005-09-29 00:52:06 +0000;a.flags returns fancy array-connected dictionary.

==

scipy/base/_internal.py
scipy/base/function_base.py
scipy/base/getlimits.py
scipy/base/matrix.py
scipy/base/numeric.py
scipy/base/numerictypes.py
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy/base/twodim_base.py
scipy/base/type_check.py
==================
a8240d8;Travis Oliphant;2005-09-28 21:36:32 +0000;Fixed mixed-type array scalar computation issues.

==

scipy/base/__init__.py
scipy/base/matrix.py
scipy/base/numerictypes.py
scipy/base/src/scalartypes.inc.src
scipy/base/twodim_base.py
==================
b60f3c5;Travis Oliphant;2005-09-28 20:26:19 +0000;Don't shadow builtins anymore.

==

THANKS.txt
scipy/base/numeric.py
scipy/base/numerictypes.py
scipy/base/src/multiarraymodule.c
==================
07a2484;Travis Oliphant;2005-09-28 10:02:03 +0000;Fixed bugs.

==

scipy/base/src/arrayobject.c
scipy/base/src/ufuncobject.c
scipy/base/twodim_base.py
==================
b5ec235;Travis Oliphant;2005-09-28 09:19:26 +0000;Changes..

==

scipy/base/numeric.py
scipy/base/twodim_base.py
==================
2422edc;Travis Oliphant;2005-09-28 08:45:13 +0000;Altered string and unicode array scalar types so they inherit from Python types first...

==

THANKS.txt
scipy/base/index_tricks.py
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
==================
dcd3bd0;Travis Oliphant;2005-09-28 06:53:37 +0000;Eliminated random_lite library

==

scipy/base/function_base.py
scipy/base/index_tricks.py
scipy/base/matrix.py
scipy/base/numeric.py
scipy/base/polynomial.py
scipy/base/scimath.py
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy/base/twodim_base.py
scipy/corelib/random_lite/com.c
scipy/corelib/random_lite/linpack.c
scipy/corelib/random_lite/pmath_rng.c
scipy/corelib/random_lite/ranf.c
scipy/corelib/random_lite/ranf.h
scipy/corelib/random_lite/ranlib.c
scipy/corelib/random_lite/ranlib.h
scipy/corelib/random_lite/ranlibmodule.c
scipy/corelib/random_lite/rngmodule.c
scipy/corelib/setup.py
scipy/stats/__init__.py
==================
2199334;Robert Kern;2005-09-28 02:56:52 +0000; r3493@803638d6:  kern | 2005-09-27 19:52:10 -0700  get_scipy_include() docs and fix; f2py updated to use get_scipy_include(); mtrand integration

==

MANIFEST.in
scipy/base/numeric.py
scipy/corelib/mtrand/mtrand.c
scipy/corelib/mtrand/mtrand.pyx
scipy/corelib/mtrand/protos.h
scipy/f2py2e/f2py2e.py
scipy/stats/__init__.py
==================
861df81;Robert Kern;2005-09-28 02:56:42 +0000; r3492@803638d6:  kern | 2005-09-27 19:03:06 -0700  Update scipy.stats to use mtrand

==

scipy/stats/__init__.py
==================
f763d77;Robert Kern;2005-09-28 02:56:11 +0000; r3476@803638d6:  kern | 2005-09-26 23:37:30 -0700  Added proper __dealloc__ method.

==

scipy/corelib/mtrand/mtrand.pyx
==================
be9be13;Robert Kern;2005-09-28 02:55:53 +0000;

==
==================
b633305;Robert Kern;2005-09-28 02:55:14 +0000; r3471@803638d6:  kern | 2005-09-26 17:50:29 -0700  Ensured that mtrand imports from scipy, not Numeric

==

scipy/corelib/mtrand/Numeric.pxi
scipy/corelib/mtrand/mtrand.c
scipy/corelib/mtrand/mtrand.pyx
scipy/corelib/mtrand/scipy.pxi
==================
6ac5b1d;Robert Kern;2005-09-28 02:55:05 +0000; r3470@803638d6:  kern | 2005-09-26 17:50:04 -0700  Don't install headers under /include/python2.4 but into the package

==

scipy/base/numeric.py
scipy/base/setup.py
==================
7ac07af;Robert Kern;2005-09-28 02:54:54 +0000;

==
==================
ca5d55a;Robert Kern;2005-09-28 02:54:48 +0000; r3463@803638d6:  kern | 2005-09-26 14:31:52 -0700  Fix for blank math library

==

scipy/base/setup.py
==================
f1ba8e7;Robert Kern;2005-09-28 02:54:38 +0000;

==
==================
1e7839d;Robert Kern;2005-09-28 02:54:16 +0000; r3164@803638d6:  kern | 2005-09-26 01:27:54 -0700  Added scipy.lib.mtrand. It is not yet integrated into scipy.stats

==

scipy/corelib/mtrand/Numeric.pxi
scipy/corelib/mtrand/Python.pxi
scipy/corelib/mtrand/const.c
scipy/corelib/mtrand/distributions.c
scipy/corelib/mtrand/distributions.h
scipy/corelib/mtrand/gamma.c
scipy/corelib/mtrand/initarray.c
scipy/corelib/mtrand/initarray.h
scipy/corelib/mtrand/isnan.c
scipy/corelib/mtrand/mconf.h
scipy/corelib/mtrand/mconf_BE.h
scipy/corelib/mtrand/mconf_LE.h
scipy/corelib/mtrand/mtrand.c
scipy/corelib/mtrand/mtrand.pyx
scipy/corelib/mtrand/polevl.c
scipy/corelib/mtrand/protos.h
scipy/corelib/mtrand/randomkit.c
scipy/corelib/mtrand/randomkit.h
scipy/corelib/setup.py
==================
9847b19;Robert Kern;2005-09-28 02:54:05 +0000; r3162@803638d6:  kern | 2005-09-26 01:25:20 -0700  Comment out faulty linalg import until it has been properly ported

==

scipy/__init__.py
==================
3bb97a7;Robert Kern;2005-09-28 01:34:00 +0000;Fix Accelerate.framework flags

==

scipy/distutils/system_info.py
==================
ba42c6e;Travis Oliphant;2005-09-28 00:24:53 +0000;Deleted sub-package manifests

==

scipy/f2py2e/MANIFEST
scipy/f2py2e/MANIFEST.in
scipy/weave/MANIFEST.in
==================
0ba15d5;Travis Oliphant;2005-09-28 00:14:34 +0000;Getting ready to release beta.

==

MANIFEST.in
scipy/__init__.py
scipy/base/include/scipy/arrayobject.h
scipy/f2py2e/diagnose.py
scipy/f2py2e/f2py2e.py
scipy/f2py2e/rules.py
scipy/f2py2e/setup.py
scipy/setup.py
==================
421cd80;Travis Oliphant;2005-09-27 11:13:09 +0000;Added f2py2e -- not tested.

==

scipy/setup.py
==================
571c53f;Travis Oliphant;2005-09-27 11:06:31 +0000;Added cvs version 1.46.23.2019 of f2py2e to svn

==

scipy/f2py2e/BUGS.txt
scipy/f2py2e/MANIFEST
scipy/f2py2e/MANIFEST.in
scipy/f2py2e/Makefile
scipy/f2py2e/NEWS.txt
scipy/f2py2e/README.txt
scipy/f2py2e/TODO.txt
scipy/f2py2e/__cvs_version__.py
scipy/f2py2e/__init__.py
scipy/f2py2e/__version__.py
scipy/f2py2e/auxfuncs.py
scipy/f2py2e/capi_maps.py
scipy/f2py2e/cb_rules.py
scipy/f2py2e/cfuncs.py
scipy/f2py2e/common_rules.py
scipy/f2py2e/crackfortran.py
scipy/f2py2e/diagnose.py
scipy/f2py2e/doc/Makefile
scipy/f2py2e/doc/Release-1.x.txt
scipy/f2py2e/doc/Release-2.x.txt
scipy/f2py2e/doc/Release-3.x.txt
scipy/f2py2e/doc/Release-4.x.txt
scipy/f2py2e/doc/apps.tex
scipy/f2py2e/doc/bugs.tex
scipy/f2py2e/doc/collectinput.py
scipy/f2py2e/doc/commands.tex
scipy/f2py2e/doc/ex1/arr.f
scipy/f2py2e/doc/ex1/bar.f
scipy/f2py2e/doc/ex1/foo.f
scipy/f2py2e/doc/ex1/foobar-smart.f90
scipy/f2py2e/doc/ex1/foobar.f90
scipy/f2py2e/doc/ex1/foobarmodule.tex
scipy/f2py2e/doc/ex1/runme
scipy/f2py2e/doc/f2py2e.tex
scipy/f2py2e/doc/f2python9-final/README.txt
scipy/f2py2e/doc/f2python9-final/aerostructure.jpg
scipy/f2py2e/doc/f2python9-final/flow.jpg
scipy/f2py2e/doc/f2python9-final/mk_html.sh
scipy/f2py2e/doc/f2python9-final/mk_pdf.sh
scipy/f2py2e/doc/f2python9-final/mk_ps.sh
scipy/f2py2e/doc/f2python9-final/src/examples/exp1.f
scipy/f2py2e/doc/f2python9-final/src/examples/exp1mess.txt
scipy/f2py2e/doc/f2python9-final/src/examples/exp1session.txt
scipy/f2py2e/doc/f2python9-final/src/examples/foo.pyf
scipy/f2py2e/doc/f2python9-final/src/examples/foom.pyf
scipy/f2py2e/doc/f2python9-final/structure.jpg
scipy/f2py2e/doc/fortranobject.tex
scipy/f2py2e/doc/index.html
scipy/f2py2e/doc/intro.tex
scipy/f2py2e/doc/multiarray/array_from_pyobj.c
scipy/f2py2e/doc/multiarray/bar.c
scipy/f2py2e/doc/multiarray/foo.f
scipy/f2py2e/doc/multiarray/fortran_array_from_pyobj.txt
scipy/f2py2e/doc/multiarray/fun.pyf
scipy/f2py2e/doc/multiarray/run.pyf
scipy/f2py2e/doc/multiarray/transpose.txt
scipy/f2py2e/doc/multiarrays.txt
scipy/f2py2e/doc/notes.tex
scipy/f2py2e/doc/oldnews.html
scipy/f2py2e/doc/options.tex
scipy/f2py2e/doc/python9.tex
scipy/f2py2e/doc/signaturefile.tex
scipy/f2py2e/doc/using_F_compiler.txt
scipy/f2py2e/doc/win32_notes.txt
scipy/f2py2e/docs/FAQ.txt
scipy/f2py2e/docs/HISTORY.txt
scipy/f2py2e/docs/OLDNEWS.txt
scipy/f2py2e/docs/README.txt
scipy/f2py2e/docs/TESTING.txt
scipy/f2py2e/docs/THANKS.txt
scipy/f2py2e/docs/default.css
scipy/f2py2e/docs/docutils.conf
scipy/f2py2e/docs/hello.f
scipy/f2py2e/docs/pyforttest.pyf
scipy/f2py2e/docs/pytest.py
scipy/f2py2e/docs/simple.f
scipy/f2py2e/docs/simple_session.dat
scipy/f2py2e/docs/usersguide/allocarr.f90
scipy/f2py2e/docs/usersguide/allocarr_session.dat
scipy/f2py2e/docs/usersguide/array.f
scipy/f2py2e/docs/usersguide/array_session.dat
scipy/f2py2e/docs/usersguide/calculate.f
scipy/f2py2e/docs/usersguide/calculate_session.dat
scipy/f2py2e/docs/usersguide/callback.f
scipy/f2py2e/docs/usersguide/callback2.pyf
scipy/f2py2e/docs/usersguide/callback_session.dat
scipy/f2py2e/docs/usersguide/common.f
scipy/f2py2e/docs/usersguide/common_session.dat
scipy/f2py2e/docs/usersguide/compile_session.dat
scipy/f2py2e/docs/usersguide/default.css
scipy/f2py2e/docs/usersguide/docutils.conf
scipy/f2py2e/docs/usersguide/extcallback.f
scipy/f2py2e/docs/usersguide/extcallback_session.dat
scipy/f2py2e/docs/usersguide/fib1.f
scipy/f2py2e/docs/usersguide/fib1.pyf
scipy/f2py2e/docs/usersguide/fib2.pyf
scipy/f2py2e/docs/usersguide/fib3.f
scipy/f2py2e/docs/usersguide/ftype.f
scipy/f2py2e/docs/usersguide/ftype_session.dat
scipy/f2py2e/docs/usersguide/index.txt
scipy/f2py2e/docs/usersguide/moddata.f90
scipy/f2py2e/docs/usersguide/moddata_session.dat
scipy/f2py2e/docs/usersguide/run_main_session.dat
scipy/f2py2e/docs/usersguide/scalar.f
scipy/f2py2e/docs/usersguide/scalar_session.dat
scipy/f2py2e/docs/usersguide/setup_example.py
scipy/f2py2e/docs/usersguide/spam.pyf
scipy/f2py2e/docs/usersguide/spam_session.dat
scipy/f2py2e/docs/usersguide/string.f
scipy/f2py2e/docs/usersguide/string_session.dat
scipy/f2py2e/docs/usersguide/var.pyf
scipy/f2py2e/docs/usersguide/var_session.dat
scipy/f2py2e/f2py.1
scipy/f2py2e/f2py2e.py
scipy/f2py2e/f2py_testing.py
scipy/f2py2e/f90mod_rules.py
scipy/f2py2e/func2subr.py
scipy/f2py2e/rules.py
scipy/f2py2e/setup.cfg
scipy/f2py2e/setup.py
scipy/f2py2e/src/fortranobject.c
scipy/f2py2e/src/fortranobject.h
scipy/f2py2e/src/test/Makefile
scipy/f2py2e/src/test/bar.f
scipy/f2py2e/src/test/foo.f
scipy/f2py2e/src/test/foo90.f90
scipy/f2py2e/src/test/foomodule.c
scipy/f2py2e/src/test/wrap.f
scipy/f2py2e/test-site/a/geniotest.py
scipy/f2py2e/test-site/a/runme.py
scipy/f2py2e/test-site/b/array.f
scipy/f2py2e/test-site/b/arraytest.f
scipy/f2py2e/test-site/b/callbacktest.f
scipy/f2py2e/test-site/b/complextest.f
scipy/f2py2e/test-site/b/marraytest.f
scipy/f2py2e/test-site/b/runme.py
scipy/f2py2e/test-site/b/scalar.f
scipy/f2py2e/test-site/c/complextest_c.c
scipy/f2py2e/test-site/cb/cb.pyf
scipy/f2py2e/test-site/cb/test.f
scipy/f2py2e/test-site/cf/Makefile
scipy/f2py2e/test-site/cf/test.f
scipy/f2py2e/test-site/curtis/cabase-smart.f90
scipy/f2py2e/test-site/curtis/cabase1.f
scipy/f2py2e/test-site/curtis/cabase1.py
scipy/f2py2e/test-site/curtis/cabase2.f
scipy/f2py2e/test-site/curtis/cabase2.py
scipy/f2py2e/test-site/curtis/cabase2m.f
scipy/f2py2e/test-site/curtis/runme_curtis
scipy/f2py2e/test-site/curtis/test.py
scipy/f2py2e/test-site/d/array.f
scipy/f2py2e/test-site/d/callback-test.py
scipy/f2py2e/test-site/d/callbacktest.f
scipy/f2py2e/test-site/d/runme_array
scipy/f2py2e/test-site/d/runme_callback
scipy/f2py2e/test-site/d/runme_scalar
scipy/f2py2e/test-site/d/runme_string
scipy/f2py2e/test-site/d/scalar.f
scipy/f2py2e/test-site/d/string.f
scipy/f2py2e/test-site/detail/argpasstest.py
scipy/f2py2e/test-site/detail/cbreturntest.py
scipy/f2py2e/test-site/detail/f2pytests.py
scipy/f2py2e/test-site/detail/genfuntests.py
scipy/f2py2e/test-site/detail/gentests.py
scipy/f2py2e/test-site/detail/returntest.py
scipy/f2py2e/test-site/detail/runtests.py
scipy/f2py2e/test-site/detail/simpletest.py
scipy/f2py2e/test-site/e/com1a.f
scipy/f2py2e/test-site/e/common.f
scipy/f2py2e/test-site/e/runme_com1
scipy/f2py2e/test-site/e/runme_common
scipy/f2py2e/test-site/g/param.in
scipy/f2py2e/test-site/g/runme
scipy/f2py2e/test-site/g/smgice.f
scipy/f2py2e/test-site/h/bar.f
scipy/f2py2e/test-site/h/bar.f90
scipy/f2py2e/test-site/h/barcom.f
scipy/f2py2e/test-site/h/bardata.f90
scipy/f2py2e/test-site/h/cbar.f
scipy/f2py2e/test-site/h/cbar.f90
scipy/f2py2e/test-site/minpack/minpack-smart.pyf
scipy/f2py2e/test-site/minpack/runme_minpack
scipy/f2py2e/test-site/minpack/src/chkder.f
scipy/f2py2e/test-site/minpack/src/covar.f
scipy/f2py2e/test-site/minpack/src/dmchar.f
scipy/f2py2e/test-site/minpack/src/dogleg.f
scipy/f2py2e/test-site/minpack/src/dpmpar.f
scipy/f2py2e/test-site/minpack/src/enorm.f
scipy/f2py2e/test-site/minpack/src/errjac.f
scipy/f2py2e/test-site/minpack/src/fdjac1.f
scipy/f2py2e/test-site/minpack/src/fdjac2.f
scipy/f2py2e/test-site/minpack/src/grdfcn.f
scipy/f2py2e/test-site/minpack/src/hybrd.f
scipy/f2py2e/test-site/minpack/src/hybrj.f
scipy/f2py2e/test-site/minpack/src/lmder.f
scipy/f2py2e/test-site/minpack/src/lmdif.f
scipy/f2py2e/test-site/minpack/src/lmpar.f
scipy/f2py2e/test-site/minpack/src/lmstr.f
scipy/f2py2e/test-site/minpack/src/objfcn.f
scipy/f2py2e/test-site/minpack/src/qform.f
scipy/f2py2e/test-site/minpack/src/qrfac.f
scipy/f2py2e/test-site/minpack/src/qrsolv.f
scipy/f2py2e/test-site/minpack/src/r1mpyq.f
scipy/f2py2e/test-site/minpack/src/r1updt.f
scipy/f2py2e/test-site/minpack/src/rwupdt.f
scipy/f2py2e/test-site/minpack/src/ssqfcn.f
scipy/f2py2e/test-site/minpack/src/ssqjac.f
scipy/f2py2e/test-site/minpack/src/vecfcn.f
scipy/f2py2e/test-site/minpack/src/vecjac.f
scipy/f2py2e/test-site/mod/data_mod.f
scipy/f2py2e/test-site/mod/main.c
scipy/f2py2e/test-site/mod/runme
scipy/f2py2e/test-site/mod/runme_mod
scipy/f2py2e/test-site/mod/simple.py
scipy/f2py2e/test-site/mod/simple2.pyf
scipy/f2py2e/test-site/mod/sub.f90
scipy/f2py2e/test-site/mod/test.f
scipy/f2py2e/test-site/mod/wrap.f90
scipy/f2py2e/test-site/quadpack/runme_quadpack
scipy/f2py2e/test-site/simple/gen_setup.sh
scipy/f2py2e/test-site/simple/src/array.f
scipy/f2py2e/test-site/simple/src/scalar.f
scipy/f2py2e/test-site/simple/test_array.py
scipy/f2py2e/test-site/simple/test_scalar.py
scipy/f2py2e/test-site/splines/runme_splines
scipy/f2py2e/test-site/splines/splines-smart.pyf
scipy/f2py2e/test-site/test_f2py2e.py
scipy/f2py2e/tests/c/return_real.py
scipy/f2py2e/tests/f77/callback.py
scipy/f2py2e/tests/f77/return_character.py
scipy/f2py2e/tests/f77/return_complex.py
scipy/f2py2e/tests/f77/return_integer.py
scipy/f2py2e/tests/f77/return_logical.py
scipy/f2py2e/tests/f77/return_real.py
scipy/f2py2e/tests/f90/return_character.py
scipy/f2py2e/tests/f90/return_complex.py
scipy/f2py2e/tests/f90/return_integer.py
scipy/f2py2e/tests/f90/return_logical.py
scipy/f2py2e/tests/f90/return_real.py
scipy/f2py2e/tests/mixed/foo.f
scipy/f2py2e/tests/mixed/foo_fixed.f90
scipy/f2py2e/tests/mixed/foo_free.f90
scipy/f2py2e/tests/mixed/run.py
scipy/f2py2e/tests/run_all.py
scipy/f2py2e/use_rules.py
==================
6a9f940;Travis Oliphant;2005-09-27 10:48:59 +0000;Added thanks file

==

THANKS.txt
scipy/__init__.py
==================
009f35d;Travis Oliphant;2005-09-27 10:23:04 +0000;Don't register multiple copies.

==

scipy/base/src/arrayobject.c
==================
47cf7fd;Travis Oliphant;2005-09-27 10:04:25 +0000;Added simple type registration system.

==

scipy/base/code_generators/generate_array_api.py
scipy/base/code_generators/generate_ufunc_api.py
scipy/base/include/scipy/arrayobject.h
scipy/base/include/scipy/ufuncobject.h
scipy/base/src/arrayobject.c
scipy/base/src/arraytypes.inc.src
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
scipy/base/src/ufuncobject.c
==================
b53531d;Travis Oliphant;2005-09-27 07:04:02 +0000;Fixed some remaining problems.

==

scipy/base/include/scipy/arrayobject.h
scipy/base/src/arraytypes.inc.src
scipy/base/src/multiarraymodule.c
==================
3be1dab;Travis Oliphant;2005-09-27 06:44:25 +0000;Removed redundant testing.

==

scipy/base/src/arrayobject.c
scipy/base/testing.py
scipy/stats/random_lite.py
scipy/test/testing.py
==================
1717eb7;Travis Oliphant;2005-09-27 06:32:42 +0000;Changed OWN_DATA to OWNDATA

==

scipy/base/include/scipy/arrayobject.h
scipy/base/src/arrayobject.c
==================
c36e940;Travis Oliphant;2005-09-27 06:27:18 +0000;Changed new typedef bool to Bool throughout.

==

scipy/base/code_generators/generate_array_api.py
scipy/base/include/scipy/arrayobject.h
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/arraytypes.inc.src
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
scipy/base/src/ufuncobject.c
scipy/base/src/umathmodule.c.src
scipy/corelib/blasdot/_dotblas.c
==================
69af376;Travis Oliphant;2005-09-27 05:35:33 +0000;Defines for backward compat C-API

==

scipy/base/src/arrayobject.c
==================
a3d9267;Travis Oliphant;2005-09-27 04:56:14 +0000;Added a cross index function

==

scipy/base/include/scipy/arrayobject.h
scipy/base/index_tricks.py
scipy/base/src/arraytypes.inc.src
==================
33f97e1;Travis Oliphant;2005-09-26 22:48:42 +0000;Return Long integer on size only if necessary.

==

scipy/base/src/arrayobject.c
==================
491a3fd;Travis Oliphant;2005-09-26 22:46:59 +0000;Return Long integer on size only if necessary.

==

scipy/base/src/arrayobject.c
scipy/base/src/scalartypes.inc.src
scipy/stats/random_lite.py
==================
d02e0f8;Travis Oliphant;2005-09-26 22:35:09 +0000;Allow use of generic type objects for instancing arrays -- use standard specific types

==

scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
==================
306fc5d;Travis Oliphant;2005-09-26 21:11:11 +0000;Fixed nasty shape setting bug.

==

scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy/stats/random_lite.py
==================
64c9050;Travis Oliphant;2005-09-26 20:39:13 +0000;Moved weave to be a sub-package of scipy (so as not to conflict with any already installed weave which uses Numeric.

==

scipy/distutils/misc_util.py
scipy/setup.py
scipy/weave/setup.py
scipy/weave/setup_weave.py
setup.py
==================
45d01a4;Travis Oliphant;2005-09-26 20:20:16 +0000;Moved weave

==

scipy/weave/LICENSE.txt
scipy/weave/MANIFEST.in
scipy/weave/README.txt
scipy/weave/__init__.py
scipy/weave/accelerate_tools.py
scipy/weave/ast_tools.py
scipy/weave/base_info.py
scipy/weave/base_spec.py
scipy/weave/blitz/blitz/MAT-NOTE.gz
scipy/weave/blitz/blitz/Makefile.am
scipy/weave/blitz/blitz/Makefile.in
scipy/weave/blitz/blitz/applics.h
scipy/weave/blitz/blitz/array-impl.h
scipy/weave/blitz/blitz/array-old.h
scipy/weave/blitz/blitz/array.h
scipy/weave/blitz/blitz/array/Makefile.am
scipy/weave/blitz/blitz/array/Makefile.in
scipy/weave/blitz/blitz/array/asexpr.h
scipy/weave/blitz/blitz/array/bops.cc
scipy/weave/blitz/blitz/array/cartesian.h
scipy/weave/blitz/blitz/array/cgsolve.h
scipy/weave/blitz/blitz/array/complex.cc
scipy/weave/blitz/blitz/array/convolve.cc
scipy/weave/blitz/blitz/array/convolve.h
scipy/weave/blitz/blitz/array/cycle.cc
scipy/weave/blitz/blitz/array/domain.h
scipy/weave/blitz/blitz/array/et.h
scipy/weave/blitz/blitz/array/eval.cc
scipy/weave/blitz/blitz/array/expr.h
scipy/weave/blitz/blitz/array/fastiter.h
scipy/weave/blitz/blitz/array/funcs.h
scipy/weave/blitz/blitz/array/functorExpr.h
scipy/weave/blitz/blitz/array/geometry.h
scipy/weave/blitz/blitz/array/indirect.h
scipy/weave/blitz/blitz/array/interlace.cc
scipy/weave/blitz/blitz/array/io.cc
scipy/weave/blitz/blitz/array/iter.h
scipy/weave/blitz/blitz/array/map.h
scipy/weave/blitz/blitz/array/methods.cc
scipy/weave/blitz/blitz/array/misc.cc
scipy/weave/blitz/blitz/array/multi.h
scipy/weave/blitz/blitz/array/newbops.cc
scipy/weave/blitz/blitz/array/newet-macros.h
scipy/weave/blitz/blitz/array/newet.h
scipy/weave/blitz/blitz/array/ops.cc
scipy/weave/blitz/blitz/array/ops.h
scipy/weave/blitz/blitz/array/reduce.cc
scipy/weave/blitz/blitz/array/reduce.h
scipy/weave/blitz/blitz/array/resize.cc
scipy/weave/blitz/blitz/array/shape.h
scipy/weave/blitz/blitz/array/slice.h
scipy/weave/blitz/blitz/array/slicing.cc
scipy/weave/blitz/blitz/array/stencil-et.h
scipy/weave/blitz/blitz/array/stencil.cc
scipy/weave/blitz/blitz/array/stencil.h
scipy/weave/blitz/blitz/array/stencilops.h
scipy/weave/blitz/blitz/array/stencils.cc
scipy/weave/blitz/blitz/array/stencils.h
scipy/weave/blitz/blitz/array/storage.h
scipy/weave/blitz/blitz/array/uops.cc
scipy/weave/blitz/blitz/array/where.h
scipy/weave/blitz/blitz/array/zip.h
scipy/weave/blitz/blitz/bench.cc
scipy/weave/blitz/blitz/bench.h
scipy/weave/blitz/blitz/benchext.cc
scipy/weave/blitz/blitz/benchext.h
scipy/weave/blitz/blitz/blitz.h
scipy/weave/blitz/blitz/bzdebug.h
scipy/weave/blitz/blitz/compiler.h
scipy/weave/blitz/blitz/config-ICL.h
scipy/weave/blitz/blitz/config-KCC.h
scipy/weave/blitz/blitz/config-SC4.0.h
scipy/weave/blitz/blitz/config-SGi.h
scipy/weave/blitz/blitz/config-g++2.7.2.h
scipy/weave/blitz/blitz/config-mwerks.h
scipy/weave/blitz/blitz/config-xlC.h
scipy/weave/blitz/blitz/config.h
scipy/weave/blitz/blitz/etbase.h
scipy/weave/blitz/blitz/extremum.h
scipy/weave/blitz/blitz/funcs.h
scipy/weave/blitz/blitz/generate/Makefile.am
scipy/weave/blitz/blitz/generate/Makefile.in
scipy/weave/blitz/blitz/generate/arroperands.h
scipy/weave/blitz/blitz/generate/arroptuple.h
scipy/weave/blitz/blitz/generate/bzfstream.h
scipy/weave/blitz/blitz/generate/genarrbops.cpp
scipy/weave/blitz/blitz/generate/genarruops.cpp
scipy/weave/blitz/blitz/generate/genmatbops.cpp
scipy/weave/blitz/blitz/generate/genmathfunc.cpp
scipy/weave/blitz/blitz/generate/genmatuops.cpp
scipy/weave/blitz/blitz/generate/genpromote.cpp
scipy/weave/blitz/blitz/generate/genvecbops.cpp
scipy/weave/blitz/blitz/generate/genvecuops.cpp
scipy/weave/blitz/blitz/generate/genvecwhere.cpp
scipy/weave/blitz/blitz/generate/operands.h
scipy/weave/blitz/blitz/generate/operands2.h
scipy/weave/blitz/blitz/generate/optuple.h
scipy/weave/blitz/blitz/generate/optuple2.h
scipy/weave/blitz/blitz/indexexpr.h
scipy/weave/blitz/blitz/limits-hack.h
scipy/weave/blitz/blitz/listinit.h
scipy/weave/blitz/blitz/matbops.h
scipy/weave/blitz/blitz/matdiag.h
scipy/weave/blitz/blitz/matexpr.h
scipy/weave/blitz/blitz/matgen.h
scipy/weave/blitz/blitz/mathf2.h
scipy/weave/blitz/blitz/mathfunc.h
scipy/weave/blitz/blitz/matltri.h
scipy/weave/blitz/blitz/matref.h
scipy/weave/blitz/blitz/matrix.cc
scipy/weave/blitz/blitz/matrix.h
scipy/weave/blitz/blitz/matsymm.h
scipy/weave/blitz/blitz/mattoep.h
scipy/weave/blitz/blitz/matuops.h
scipy/weave/blitz/blitz/matutri.h
scipy/weave/blitz/blitz/memblock.cc
scipy/weave/blitz/blitz/memblock.h
scipy/weave/blitz/blitz/meta/Makefile.am
scipy/weave/blitz/blitz/meta/Makefile.in
scipy/weave/blitz/blitz/meta/dot.h
scipy/weave/blitz/blitz/meta/matassign.h
scipy/weave/blitz/blitz/meta/matmat.h
scipy/weave/blitz/blitz/meta/matvec.h
scipy/weave/blitz/blitz/meta/metaprog.h
scipy/weave/blitz/blitz/meta/product.h
scipy/weave/blitz/blitz/meta/sum.h
scipy/weave/blitz/blitz/meta/vecassign.h
scipy/weave/blitz/blitz/minmax.h
scipy/weave/blitz/blitz/mstruct.h
scipy/weave/blitz/blitz/numinquire.h
scipy/weave/blitz/blitz/numtrait.h
scipy/weave/blitz/blitz/ops.h
scipy/weave/blitz/blitz/prettyprint.h
scipy/weave/blitz/blitz/promote-old.h
scipy/weave/blitz/blitz/promote.h
scipy/weave/blitz/blitz/rand-dunif.h
scipy/weave/blitz/blitz/rand-mt.h
scipy/weave/blitz/blitz/rand-normal.h
scipy/weave/blitz/blitz/rand-tt800.h
scipy/weave/blitz/blitz/rand-uniform.h
scipy/weave/blitz/blitz/random.h
scipy/weave/blitz/blitz/randref.h
scipy/weave/blitz/blitz/range.h
scipy/weave/blitz/blitz/reduce.h
scipy/weave/blitz/blitz/shapecheck.h
scipy/weave/blitz/blitz/tau.h
scipy/weave/blitz/blitz/timer.h
scipy/weave/blitz/blitz/tiny.h
scipy/weave/blitz/blitz/tinymat.h
scipy/weave/blitz/blitz/tinymatexpr.h
scipy/weave/blitz/blitz/tinymatio.cc
scipy/weave/blitz/blitz/tinyvec-et.h
scipy/weave/blitz/blitz/tinyvec.cc
scipy/weave/blitz/blitz/tinyvec.h
scipy/weave/blitz/blitz/tinyvecio.cc
scipy/weave/blitz/blitz/tinyveciter.h
scipy/weave/blitz/blitz/traversal.cc
scipy/weave/blitz/blitz/traversal.h
scipy/weave/blitz/blitz/tuning.h
scipy/weave/blitz/blitz/tvcross.h
scipy/weave/blitz/blitz/tvecglobs.h
scipy/weave/blitz/blitz/update.h
scipy/weave/blitz/blitz/vecaccum.cc
scipy/weave/blitz/blitz/vecall.cc
scipy/weave/blitz/blitz/vecany.cc
scipy/weave/blitz/blitz/vecbfn.cc
scipy/weave/blitz/blitz/vecbops.cc
scipy/weave/blitz/blitz/veccount.cc
scipy/weave/blitz/blitz/vecdelta.cc
scipy/weave/blitz/blitz/vecdot.cc
scipy/weave/blitz/blitz/vecexpr.h
scipy/weave/blitz/blitz/vecexprwrap.h
scipy/weave/blitz/blitz/vecglobs.cc
scipy/weave/blitz/blitz/vecglobs.h
scipy/weave/blitz/blitz/vecio.cc
scipy/weave/blitz/blitz/veciter.h
scipy/weave/blitz/blitz/vecmax.cc
scipy/weave/blitz/blitz/vecmin.cc
scipy/weave/blitz/blitz/vecnorm.cc
scipy/weave/blitz/blitz/vecnorm1.cc
scipy/weave/blitz/blitz/vecpick.cc
scipy/weave/blitz/blitz/vecpick.h
scipy/weave/blitz/blitz/vecpickio.cc
scipy/weave/blitz/blitz/vecpickiter.h
scipy/weave/blitz/blitz/vecsum.cc
scipy/weave/blitz/blitz/vector-et.h
scipy/weave/blitz/blitz/vector.cc
scipy/weave/blitz/blitz/vector.h
scipy/weave/blitz/blitz/vecuops.cc
scipy/weave/blitz/blitz/vecwhere.cc
scipy/weave/blitz/blitz/vecwhere.h
scipy/weave/blitz/blitz/wrap-climits.h
scipy/weave/blitz/blitz/zero.cc
scipy/weave/blitz/blitz/zero.h
scipy/weave/blitz_spec.py
scipy/weave/blitz_tools.py
scipy/weave/build_tools.py
scipy/weave/bytecodecompiler.py
scipy/weave/c_spec.py
scipy/weave/catalog.py
scipy/weave/common_info.py
scipy/weave/converters.py
scipy/weave/cpp_namespace_spec.py
scipy/weave/doc/tutorial.html
scipy/weave/dumb_shelve.py
scipy/weave/dumbdbm_patched.py
scipy/weave/examples/array3d.py
scipy/weave/examples/binary_search.py
scipy/weave/examples/cast_copy_transpose.py
scipy/weave/examples/dict_sort.py
scipy/weave/examples/fibonacci.py
scipy/weave/examples/functional.py
scipy/weave/examples/increment_example.py
scipy/weave/examples/md5_speed.py
scipy/weave/examples/object.py
scipy/weave/examples/print_example.py
scipy/weave/examples/py_none.py
scipy/weave/examples/ramp.c
scipy/weave/examples/ramp.py
scipy/weave/examples/ramp2.py
scipy/weave/examples/support_code_example.py
scipy/weave/examples/swig2_example.py
scipy/weave/examples/swig2_ext.h
scipy/weave/examples/swig2_ext.i
scipy/weave/examples/tuple_return.py
scipy/weave/examples/vq.py
scipy/weave/examples/vtk_example.py
scipy/weave/examples/wx_example.py
scipy/weave/examples/wx_speed.py
scipy/weave/ext_tools.py
scipy/weave/info_weave.py
scipy/weave/inline_tools.py
scipy/weave/platform_info.py
scipy/weave/scxx/README.txt
scipy/weave/scxx/dict.h
scipy/weave/scxx/list.h
scipy/weave/scxx/notes.txt
scipy/weave/scxx/number.h
scipy/weave/scxx/object.h
scipy/weave/scxx/scxx.h
scipy/weave/scxx/sequence.h
scipy/weave/scxx/str.h
scipy/weave/scxx/tuple.h
scipy/weave/scxx/weave_imp.cpp
scipy/weave/setup.py
scipy/weave/setup_weave.py
scipy/weave/size_check.py
scipy/weave/slice_handler.py
scipy/weave/standard_array_spec.py
scipy/weave/swig2_spec.py
scipy/weave/swigptr.py
scipy/weave/swigptr2.py
scipy/weave/tests/scxx_timings.py
scipy/weave/tests/test_ast_tools.py
scipy/weave/tests/test_blitz_tools.py
scipy/weave/tests/test_build_tools.py
scipy/weave/tests/test_c_spec.py
scipy/weave/tests/test_catalog.py
scipy/weave/tests/test_ext_tools.py
scipy/weave/tests/test_inline_tools.py
scipy/weave/tests/test_scxx.py
scipy/weave/tests/test_scxx_dict.py
scipy/weave/tests/test_scxx_object.py
scipy/weave/tests/test_scxx_sequence.py
scipy/weave/tests/test_size_check.py
scipy/weave/tests/test_slice_handler.py
scipy/weave/tests/test_standard_array_spec.py
scipy/weave/tests/test_wx_spec.py
scipy/weave/tests/weave_test_utils.py
scipy/weave/vtk_spec.py
scipy/weave/weave_version.py
scipy/weave/wx_spec.py
weave/LICENSE.txt
weave/MANIFEST.in
weave/README.txt
weave/__init__.py
weave/accelerate_tools.py
weave/ast_tools.py
weave/base_info.py
weave/base_spec.py
weave/blitz/blitz/MAT-NOTE.gz
weave/blitz/blitz/Makefile.am
weave/blitz/blitz/Makefile.in
weave/blitz/blitz/applics.h
weave/blitz/blitz/array-impl.h
weave/blitz/blitz/array-old.h
weave/blitz/blitz/array.h
weave/blitz/blitz/array/Makefile.am
weave/blitz/blitz/array/Makefile.in
weave/blitz/blitz/array/asexpr.h
weave/blitz/blitz/array/bops.cc
weave/blitz/blitz/array/cartesian.h
weave/blitz/blitz/array/cgsolve.h
weave/blitz/blitz/array/complex.cc
weave/blitz/blitz/array/convolve.cc
weave/blitz/blitz/array/convolve.h
weave/blitz/blitz/array/cycle.cc
weave/blitz/blitz/array/domain.h
weave/blitz/blitz/array/et.h
weave/blitz/blitz/array/eval.cc
weave/blitz/blitz/array/expr.h
weave/blitz/blitz/array/fastiter.h
weave/blitz/blitz/array/funcs.h
weave/blitz/blitz/array/functorExpr.h
weave/blitz/blitz/array/geometry.h
weave/blitz/blitz/array/indirect.h
weave/blitz/blitz/array/interlace.cc
weave/blitz/blitz/array/io.cc
weave/blitz/blitz/array/iter.h
weave/blitz/blitz/array/map.h
weave/blitz/blitz/array/methods.cc
weave/blitz/blitz/array/misc.cc
weave/blitz/blitz/array/multi.h
weave/blitz/blitz/array/newbops.cc
weave/blitz/blitz/array/newet-macros.h
weave/blitz/blitz/array/newet.h
weave/blitz/blitz/array/ops.cc
weave/blitz/blitz/array/ops.h
weave/blitz/blitz/array/reduce.cc
weave/blitz/blitz/array/reduce.h
weave/blitz/blitz/array/resize.cc
weave/blitz/blitz/array/shape.h
weave/blitz/blitz/array/slice.h
weave/blitz/blitz/array/slicing.cc
weave/blitz/blitz/array/stencil-et.h
weave/blitz/blitz/array/stencil.cc
weave/blitz/blitz/array/stencil.h
weave/blitz/blitz/array/stencilops.h
weave/blitz/blitz/array/stencils.cc
weave/blitz/blitz/array/stencils.h
weave/blitz/blitz/array/storage.h
weave/blitz/blitz/array/uops.cc
weave/blitz/blitz/array/where.h
weave/blitz/blitz/array/zip.h
weave/blitz/blitz/bench.cc
weave/blitz/blitz/bench.h
weave/blitz/blitz/benchext.cc
weave/blitz/blitz/benchext.h
weave/blitz/blitz/blitz.h
weave/blitz/blitz/bzdebug.h
weave/blitz/blitz/compiler.h
weave/blitz/blitz/config-ICL.h
weave/blitz/blitz/config-KCC.h
weave/blitz/blitz/config-SC4.0.h
weave/blitz/blitz/config-SGi.h
weave/blitz/blitz/config-g++2.7.2.h
weave/blitz/blitz/config-mwerks.h
weave/blitz/blitz/config-xlC.h
weave/blitz/blitz/config.h
weave/blitz/blitz/etbase.h
weave/blitz/blitz/extremum.h
weave/blitz/blitz/funcs.h
weave/blitz/blitz/generate/Makefile.am
weave/blitz/blitz/generate/Makefile.in
weave/blitz/blitz/generate/arroperands.h
weave/blitz/blitz/generate/arroptuple.h
weave/blitz/blitz/generate/bzfstream.h
weave/blitz/blitz/generate/genarrbops.cpp
weave/blitz/blitz/generate/genarruops.cpp
weave/blitz/blitz/generate/genmatbops.cpp
weave/blitz/blitz/generate/genmathfunc.cpp
weave/blitz/blitz/generate/genmatuops.cpp
weave/blitz/blitz/generate/genpromote.cpp
weave/blitz/blitz/generate/genvecbops.cpp
weave/blitz/blitz/generate/genvecuops.cpp
weave/blitz/blitz/generate/genvecwhere.cpp
weave/blitz/blitz/generate/operands.h
weave/blitz/blitz/generate/operands2.h
weave/blitz/blitz/generate/optuple.h
weave/blitz/blitz/generate/optuple2.h
weave/blitz/blitz/indexexpr.h
weave/blitz/blitz/limits-hack.h
weave/blitz/blitz/listinit.h
weave/blitz/blitz/matbops.h
weave/blitz/blitz/matdiag.h
weave/blitz/blitz/matexpr.h
weave/blitz/blitz/matgen.h
weave/blitz/blitz/mathf2.h
weave/blitz/blitz/mathfunc.h
weave/blitz/blitz/matltri.h
weave/blitz/blitz/matref.h
weave/blitz/blitz/matrix.cc
weave/blitz/blitz/matrix.h
weave/blitz/blitz/matsymm.h
weave/blitz/blitz/mattoep.h
weave/blitz/blitz/matuops.h
weave/blitz/blitz/matutri.h
weave/blitz/blitz/memblock.cc
weave/blitz/blitz/memblock.h
weave/blitz/blitz/meta/Makefile.am
weave/blitz/blitz/meta/Makefile.in
weave/blitz/blitz/meta/dot.h
weave/blitz/blitz/meta/matassign.h
weave/blitz/blitz/meta/matmat.h
weave/blitz/blitz/meta/matvec.h
weave/blitz/blitz/meta/metaprog.h
weave/blitz/blitz/meta/product.h
weave/blitz/blitz/meta/sum.h
weave/blitz/blitz/meta/vecassign.h
weave/blitz/blitz/minmax.h
weave/blitz/blitz/mstruct.h
weave/blitz/blitz/numinquire.h
weave/blitz/blitz/numtrait.h
weave/blitz/blitz/ops.h
weave/blitz/blitz/prettyprint.h
weave/blitz/blitz/promote-old.h
weave/blitz/blitz/promote.h
weave/blitz/blitz/rand-dunif.h
weave/blitz/blitz/rand-mt.h
weave/blitz/blitz/rand-normal.h
weave/blitz/blitz/rand-tt800.h
weave/blitz/blitz/rand-uniform.h
weave/blitz/blitz/random.h
weave/blitz/blitz/randref.h
weave/blitz/blitz/range.h
weave/blitz/blitz/reduce.h
weave/blitz/blitz/shapecheck.h
weave/blitz/blitz/tau.h
weave/blitz/blitz/timer.h
weave/blitz/blitz/tiny.h
weave/blitz/blitz/tinymat.h
weave/blitz/blitz/tinymatexpr.h
weave/blitz/blitz/tinymatio.cc
weave/blitz/blitz/tinyvec-et.h
weave/blitz/blitz/tinyvec.cc
weave/blitz/blitz/tinyvec.h
weave/blitz/blitz/tinyvecio.cc
weave/blitz/blitz/tinyveciter.h
weave/blitz/blitz/traversal.cc
weave/blitz/blitz/traversal.h
weave/blitz/blitz/tuning.h
weave/blitz/blitz/tvcross.h
weave/blitz/blitz/tvecglobs.h
weave/blitz/blitz/update.h
weave/blitz/blitz/vecaccum.cc
weave/blitz/blitz/vecall.cc
weave/blitz/blitz/vecany.cc
weave/blitz/blitz/vecbfn.cc
weave/blitz/blitz/vecbops.cc
weave/blitz/blitz/veccount.cc
weave/blitz/blitz/vecdelta.cc
weave/blitz/blitz/vecdot.cc
weave/blitz/blitz/vecexpr.h
weave/blitz/blitz/vecexprwrap.h
weave/blitz/blitz/vecglobs.cc
weave/blitz/blitz/vecglobs.h
weave/blitz/blitz/vecio.cc
weave/blitz/blitz/veciter.h
weave/blitz/blitz/vecmax.cc
weave/blitz/blitz/vecmin.cc
weave/blitz/blitz/vecnorm.cc
weave/blitz/blitz/vecnorm1.cc
weave/blitz/blitz/vecpick.cc
weave/blitz/blitz/vecpick.h
weave/blitz/blitz/vecpickio.cc
weave/blitz/blitz/vecpickiter.h
weave/blitz/blitz/vecsum.cc
weave/blitz/blitz/vector-et.h
weave/blitz/blitz/vector.cc
weave/blitz/blitz/vector.h
weave/blitz/blitz/vecuops.cc
weave/blitz/blitz/vecwhere.cc
weave/blitz/blitz/vecwhere.h
weave/blitz/blitz/wrap-climits.h
weave/blitz/blitz/zero.cc
weave/blitz/blitz/zero.h
weave/blitz_spec.py
weave/blitz_tools.py
weave/build_tools.py
weave/bytecodecompiler.py
weave/c_spec.py
weave/catalog.py
weave/common_info.py
weave/converters.py
weave/cpp_namespace_spec.py
weave/doc/tutorial.html
weave/dumb_shelve.py
weave/dumbdbm_patched.py
weave/examples/array3d.py
weave/examples/binary_search.py
weave/examples/cast_copy_transpose.py
weave/examples/dict_sort.py
weave/examples/fibonacci.py
weave/examples/functional.py
weave/examples/increment_example.py
weave/examples/md5_speed.py
weave/examples/object.py
weave/examples/print_example.py
weave/examples/py_none.py
weave/examples/ramp.c
weave/examples/ramp.py
weave/examples/ramp2.py
weave/examples/support_code_example.py
weave/examples/swig2_example.py
weave/examples/swig2_ext.h
weave/examples/swig2_ext.i
weave/examples/tuple_return.py
weave/examples/vq.py
weave/examples/vtk_example.py
weave/examples/wx_example.py
weave/examples/wx_speed.py
weave/ext_tools.py
weave/info_weave.py
weave/inline_tools.py
weave/platform_info.py
weave/scxx/README.txt
weave/scxx/dict.h
weave/scxx/list.h
weave/scxx/notes.txt
weave/scxx/number.h
weave/scxx/object.h
weave/scxx/scxx.h
weave/scxx/sequence.h
weave/scxx/str.h
weave/scxx/tuple.h
weave/scxx/weave_imp.cpp
weave/setup.py
weave/setup_weave.py
weave/size_check.py
weave/slice_handler.py
weave/standard_array_spec.py
weave/swig2_spec.py
weave/swigptr.py
weave/swigptr2.py
weave/tests/scxx_timings.py
weave/tests/test_ast_tools.py
weave/tests/test_blitz_tools.py
weave/tests/test_build_tools.py
weave/tests/test_c_spec.py
weave/tests/test_catalog.py
weave/tests/test_ext_tools.py
weave/tests/test_inline_tools.py
weave/tests/test_scxx.py
weave/tests/test_scxx_dict.py
weave/tests/test_scxx_object.py
weave/tests/test_scxx_sequence.py
weave/tests/test_size_check.py
weave/tests/test_slice_handler.py
weave/tests/test_standard_array_spec.py
weave/tests/test_wx_spec.py
weave/tests/weave_test_utils.py
weave/vtk_spec.py
weave/weave_version.py
weave/wx_spec.py
==================
ccd1c3d;Travis Oliphant;2005-09-26 20:18:56 +0000;Added weave.

==

scipy/base/code_generators/generate_array_api.py
scipy/distutils/command/build_src.py
scipy/distutils/command/install_headers.py
scipy/distutils/misc_util.py
scipy/setup.py
scipy/test/testing.py
weave/setup_weave.py
==================
8ac222e;Travis Oliphant;2005-09-26 19:01:50 +0000;Adding weave and test

==

scipy/base/convertcode.py
scipy/base/function_base.py
scipy/test/__init__.py
scipy/test/auto_test.py
scipy/test/info_scipy_test.py
scipy/test/logging.py
scipy/test/scipy_test_version.py
scipy/test/setup_scipy_test.py
scipy/test/testing.py
setup.py
test/__init__.py
test/auto_test.py
test/info_scipy_test.py
test/logging.py
test/scipy_test_version.py
test/setup_scipy_test.py
test/testing.py
weave/__init__.py
weave/accelerate_tools.py
weave/blitz_spec.py
weave/blitz_tools.py
weave/catalog.py
weave/converters.py
weave/setup.py
weave/setup_weave.py
weave/size_check.py
weave/standard_array_spec.py
==================
ed8548a;Travis Oliphant;2005-09-26 16:23:13 +0000;Getting weave setup

==

weave/blitz-20001213/blitz/MAT-NOTE.gz
weave/blitz-20001213/blitz/Makefile.am
weave/blitz-20001213/blitz/Makefile.in
weave/blitz-20001213/blitz/applics.h
weave/blitz-20001213/blitz/array-impl.h
weave/blitz-20001213/blitz/array-old.h
weave/blitz-20001213/blitz/array.h
weave/blitz-20001213/blitz/array/Makefile.am
weave/blitz-20001213/blitz/array/Makefile.in
weave/blitz-20001213/blitz/array/asexpr.h
weave/blitz-20001213/blitz/array/bops.cc
weave/blitz-20001213/blitz/array/cartesian.h
weave/blitz-20001213/blitz/array/cgsolve.h
weave/blitz-20001213/blitz/array/complex.cc
weave/blitz-20001213/blitz/array/convolve.cc
weave/blitz-20001213/blitz/array/convolve.h
weave/blitz-20001213/blitz/array/cycle.cc
weave/blitz-20001213/blitz/array/domain.h
weave/blitz-20001213/blitz/array/et.h
weave/blitz-20001213/blitz/array/eval.cc
weave/blitz-20001213/blitz/array/expr.h
weave/blitz-20001213/blitz/array/fastiter.h
weave/blitz-20001213/blitz/array/funcs.h
weave/blitz-20001213/blitz/array/functorExpr.h
weave/blitz-20001213/blitz/array/geometry.h
weave/blitz-20001213/blitz/array/indirect.h
weave/blitz-20001213/blitz/array/interlace.cc
weave/blitz-20001213/blitz/array/io.cc
weave/blitz-20001213/blitz/array/iter.h
weave/blitz-20001213/blitz/array/map.h
weave/blitz-20001213/blitz/array/methods.cc
weave/blitz-20001213/blitz/array/misc.cc
weave/blitz-20001213/blitz/array/multi.h
weave/blitz-20001213/blitz/array/newbops.cc
weave/blitz-20001213/blitz/array/newet-macros.h
weave/blitz-20001213/blitz/array/newet.h
weave/blitz-20001213/blitz/array/ops.cc
weave/blitz-20001213/blitz/array/ops.h
weave/blitz-20001213/blitz/array/reduce.cc
weave/blitz-20001213/blitz/array/reduce.h
weave/blitz-20001213/blitz/array/resize.cc
weave/blitz-20001213/blitz/array/shape.h
weave/blitz-20001213/blitz/array/slice.h
weave/blitz-20001213/blitz/array/slicing.cc
weave/blitz-20001213/blitz/array/stencil-et.h
weave/blitz-20001213/blitz/array/stencil.cc
weave/blitz-20001213/blitz/array/stencil.h
weave/blitz-20001213/blitz/array/stencilops.h
weave/blitz-20001213/blitz/array/stencils.cc
weave/blitz-20001213/blitz/array/stencils.h
weave/blitz-20001213/blitz/array/storage.h
weave/blitz-20001213/blitz/array/uops.cc
weave/blitz-20001213/blitz/array/where.h
weave/blitz-20001213/blitz/array/zip.h
weave/blitz-20001213/blitz/bench.cc
weave/blitz-20001213/blitz/bench.h
weave/blitz-20001213/blitz/benchext.cc
weave/blitz-20001213/blitz/benchext.h
weave/blitz-20001213/blitz/blitz.h
weave/blitz-20001213/blitz/bzdebug.h
weave/blitz-20001213/blitz/compiler.h
weave/blitz-20001213/blitz/config-ICL.h
weave/blitz-20001213/blitz/config-KCC.h
weave/blitz-20001213/blitz/config-SC4.0.h
weave/blitz-20001213/blitz/config-SGi.h
weave/blitz-20001213/blitz/config-g++2.7.2.h
weave/blitz-20001213/blitz/config-mwerks.h
weave/blitz-20001213/blitz/config-xlC.h
weave/blitz-20001213/blitz/config.h
weave/blitz-20001213/blitz/etbase.h
weave/blitz-20001213/blitz/extremum.h
weave/blitz-20001213/blitz/funcs.h
weave/blitz-20001213/blitz/generate/Makefile.am
weave/blitz-20001213/blitz/generate/Makefile.in
weave/blitz-20001213/blitz/generate/arroperands.h
weave/blitz-20001213/blitz/generate/arroptuple.h
weave/blitz-20001213/blitz/generate/bzfstream.h
weave/blitz-20001213/blitz/generate/genarrbops.cpp
weave/blitz-20001213/blitz/generate/genarruops.cpp
weave/blitz-20001213/blitz/generate/genmatbops.cpp
weave/blitz-20001213/blitz/generate/genmathfunc.cpp
weave/blitz-20001213/blitz/generate/genmatuops.cpp
weave/blitz-20001213/blitz/generate/genpromote.cpp
weave/blitz-20001213/blitz/generate/genvecbops.cpp
weave/blitz-20001213/blitz/generate/genvecuops.cpp
weave/blitz-20001213/blitz/generate/genvecwhere.cpp
weave/blitz-20001213/blitz/generate/operands.h
weave/blitz-20001213/blitz/generate/operands2.h
weave/blitz-20001213/blitz/generate/optuple.h
weave/blitz-20001213/blitz/generate/optuple2.h
weave/blitz-20001213/blitz/indexexpr.h
weave/blitz-20001213/blitz/limits-hack.h
weave/blitz-20001213/blitz/listinit.h
weave/blitz-20001213/blitz/matbops.h
weave/blitz-20001213/blitz/matdiag.h
weave/blitz-20001213/blitz/matexpr.h
weave/blitz-20001213/blitz/matgen.h
weave/blitz-20001213/blitz/mathf2.h
weave/blitz-20001213/blitz/mathfunc.h
weave/blitz-20001213/blitz/matltri.h
weave/blitz-20001213/blitz/matref.h
weave/blitz-20001213/blitz/matrix.cc
weave/blitz-20001213/blitz/matrix.h
weave/blitz-20001213/blitz/matsymm.h
weave/blitz-20001213/blitz/mattoep.h
weave/blitz-20001213/blitz/matuops.h
weave/blitz-20001213/blitz/matutri.h
weave/blitz-20001213/blitz/memblock.cc
weave/blitz-20001213/blitz/memblock.h
weave/blitz-20001213/blitz/meta/Makefile.am
weave/blitz-20001213/blitz/meta/Makefile.in
weave/blitz-20001213/blitz/meta/dot.h
weave/blitz-20001213/blitz/meta/matassign.h
weave/blitz-20001213/blitz/meta/matmat.h
weave/blitz-20001213/blitz/meta/matvec.h
weave/blitz-20001213/blitz/meta/metaprog.h
weave/blitz-20001213/blitz/meta/product.h
weave/blitz-20001213/blitz/meta/sum.h
weave/blitz-20001213/blitz/meta/vecassign.h
weave/blitz-20001213/blitz/minmax.h
weave/blitz-20001213/blitz/mstruct.h
weave/blitz-20001213/blitz/numinquire.h
weave/blitz-20001213/blitz/numtrait.h
weave/blitz-20001213/blitz/ops.h
weave/blitz-20001213/blitz/prettyprint.h
weave/blitz-20001213/blitz/promote-old.h
weave/blitz-20001213/blitz/promote.h
weave/blitz-20001213/blitz/rand-dunif.h
weave/blitz-20001213/blitz/rand-mt.h
weave/blitz-20001213/blitz/rand-normal.h
weave/blitz-20001213/blitz/rand-tt800.h
weave/blitz-20001213/blitz/rand-uniform.h
weave/blitz-20001213/blitz/random.h
weave/blitz-20001213/blitz/randref.h
weave/blitz-20001213/blitz/range.h
weave/blitz-20001213/blitz/reduce.h
weave/blitz-20001213/blitz/shapecheck.h
weave/blitz-20001213/blitz/tau.h
weave/blitz-20001213/blitz/timer.h
weave/blitz-20001213/blitz/tiny.h
weave/blitz-20001213/blitz/tinymat.h
weave/blitz-20001213/blitz/tinymatexpr.h
weave/blitz-20001213/blitz/tinymatio.cc
weave/blitz-20001213/blitz/tinyvec-et.h
weave/blitz-20001213/blitz/tinyvec.cc
weave/blitz-20001213/blitz/tinyvec.h
weave/blitz-20001213/blitz/tinyvecio.cc
weave/blitz-20001213/blitz/tinyveciter.h
weave/blitz-20001213/blitz/traversal.cc
weave/blitz-20001213/blitz/traversal.h
weave/blitz-20001213/blitz/tuning.h
weave/blitz-20001213/blitz/tvcross.h
weave/blitz-20001213/blitz/tvecglobs.h
weave/blitz-20001213/blitz/update.h
weave/blitz-20001213/blitz/vecaccum.cc
weave/blitz-20001213/blitz/vecall.cc
weave/blitz-20001213/blitz/vecany.cc
weave/blitz-20001213/blitz/vecbfn.cc
weave/blitz-20001213/blitz/vecbops.cc
weave/blitz-20001213/blitz/veccount.cc
weave/blitz-20001213/blitz/vecdelta.cc
weave/blitz-20001213/blitz/vecdot.cc
weave/blitz-20001213/blitz/vecexpr.h
weave/blitz-20001213/blitz/vecexprwrap.h
weave/blitz-20001213/blitz/vecglobs.cc
weave/blitz-20001213/blitz/vecglobs.h
weave/blitz-20001213/blitz/vecio.cc
weave/blitz-20001213/blitz/veciter.h
weave/blitz-20001213/blitz/vecmax.cc
weave/blitz-20001213/blitz/vecmin.cc
weave/blitz-20001213/blitz/vecnorm.cc
weave/blitz-20001213/blitz/vecnorm1.cc
weave/blitz-20001213/blitz/vecpick.cc
weave/blitz-20001213/blitz/vecpick.h
weave/blitz-20001213/blitz/vecpickio.cc
weave/blitz-20001213/blitz/vecpickiter.h
weave/blitz-20001213/blitz/vecsum.cc
weave/blitz-20001213/blitz/vector-et.h
weave/blitz-20001213/blitz/vector.cc
weave/blitz-20001213/blitz/vector.h
weave/blitz-20001213/blitz/vecuops.cc
weave/blitz-20001213/blitz/vecwhere.cc
weave/blitz-20001213/blitz/vecwhere.h
weave/blitz-20001213/blitz/wrap-climits.h
weave/blitz-20001213/blitz/zero.cc
weave/blitz-20001213/blitz/zero.h
weave/blitz/blitz/MAT-NOTE.gz
weave/blitz/blitz/Makefile.am
weave/blitz/blitz/Makefile.in
weave/blitz/blitz/applics.h
weave/blitz/blitz/array-impl.h
weave/blitz/blitz/array-old.h
weave/blitz/blitz/array.h
weave/blitz/blitz/array/Makefile.am
weave/blitz/blitz/array/Makefile.in
weave/blitz/blitz/array/asexpr.h
weave/blitz/blitz/array/bops.cc
weave/blitz/blitz/array/cartesian.h
weave/blitz/blitz/array/cgsolve.h
weave/blitz/blitz/array/complex.cc
weave/blitz/blitz/array/convolve.cc
weave/blitz/blitz/array/convolve.h
weave/blitz/blitz/array/cycle.cc
weave/blitz/blitz/array/domain.h
weave/blitz/blitz/array/et.h
weave/blitz/blitz/array/eval.cc
weave/blitz/blitz/array/expr.h
weave/blitz/blitz/array/fastiter.h
weave/blitz/blitz/array/funcs.h
weave/blitz/blitz/array/functorExpr.h
weave/blitz/blitz/array/geometry.h
weave/blitz/blitz/array/indirect.h
weave/blitz/blitz/array/interlace.cc
weave/blitz/blitz/array/io.cc
weave/blitz/blitz/array/iter.h
weave/blitz/blitz/array/map.h
weave/blitz/blitz/array/methods.cc
weave/blitz/blitz/array/misc.cc
weave/blitz/blitz/array/multi.h
weave/blitz/blitz/array/newbops.cc
weave/blitz/blitz/array/newet-macros.h
weave/blitz/blitz/array/newet.h
weave/blitz/blitz/array/ops.cc
weave/blitz/blitz/array/ops.h
weave/blitz/blitz/array/reduce.cc
weave/blitz/blitz/array/reduce.h
weave/blitz/blitz/array/resize.cc
weave/blitz/blitz/array/shape.h
weave/blitz/blitz/array/slice.h
weave/blitz/blitz/array/slicing.cc
weave/blitz/blitz/array/stencil-et.h
weave/blitz/blitz/array/stencil.cc
weave/blitz/blitz/array/stencil.h
weave/blitz/blitz/array/stencilops.h
weave/blitz/blitz/array/stencils.cc
weave/blitz/blitz/array/stencils.h
weave/blitz/blitz/array/storage.h
weave/blitz/blitz/array/uops.cc
weave/blitz/blitz/array/where.h
weave/blitz/blitz/array/zip.h
weave/blitz/blitz/bench.cc
weave/blitz/blitz/bench.h
weave/blitz/blitz/benchext.cc
weave/blitz/blitz/benchext.h
weave/blitz/blitz/blitz.h
weave/blitz/blitz/bzdebug.h
weave/blitz/blitz/compiler.h
weave/blitz/blitz/config-ICL.h
weave/blitz/blitz/config-KCC.h
weave/blitz/blitz/config-SC4.0.h
weave/blitz/blitz/config-SGi.h
weave/blitz/blitz/config-g++2.7.2.h
weave/blitz/blitz/config-mwerks.h
weave/blitz/blitz/config-xlC.h
weave/blitz/blitz/config.h
weave/blitz/blitz/etbase.h
weave/blitz/blitz/extremum.h
weave/blitz/blitz/funcs.h
weave/blitz/blitz/generate/Makefile.am
weave/blitz/blitz/generate/Makefile.in
weave/blitz/blitz/generate/arroperands.h
weave/blitz/blitz/generate/arroptuple.h
weave/blitz/blitz/generate/bzfstream.h
weave/blitz/blitz/generate/genarrbops.cpp
weave/blitz/blitz/generate/genarruops.cpp
weave/blitz/blitz/generate/genmatbops.cpp
weave/blitz/blitz/generate/genmathfunc.cpp
weave/blitz/blitz/generate/genmatuops.cpp
weave/blitz/blitz/generate/genpromote.cpp
weave/blitz/blitz/generate/genvecbops.cpp
weave/blitz/blitz/generate/genvecuops.cpp
weave/blitz/blitz/generate/genvecwhere.cpp
weave/blitz/blitz/generate/operands.h
weave/blitz/blitz/generate/operands2.h
weave/blitz/blitz/generate/optuple.h
weave/blitz/blitz/generate/optuple2.h
weave/blitz/blitz/indexexpr.h
weave/blitz/blitz/limits-hack.h
weave/blitz/blitz/listinit.h
weave/blitz/blitz/matbops.h
weave/blitz/blitz/matdiag.h
weave/blitz/blitz/matexpr.h
weave/blitz/blitz/matgen.h
weave/blitz/blitz/mathf2.h
weave/blitz/blitz/mathfunc.h
weave/blitz/blitz/matltri.h
weave/blitz/blitz/matref.h
weave/blitz/blitz/matrix.cc
weave/blitz/blitz/matrix.h
weave/blitz/blitz/matsymm.h
weave/blitz/blitz/mattoep.h
weave/blitz/blitz/matuops.h
weave/blitz/blitz/matutri.h
weave/blitz/blitz/memblock.cc
weave/blitz/blitz/memblock.h
weave/blitz/blitz/meta/Makefile.am
weave/blitz/blitz/meta/Makefile.in
weave/blitz/blitz/meta/dot.h
weave/blitz/blitz/meta/matassign.h
weave/blitz/blitz/meta/matmat.h
weave/blitz/blitz/meta/matvec.h
weave/blitz/blitz/meta/metaprog.h
weave/blitz/blitz/meta/product.h
weave/blitz/blitz/meta/sum.h
weave/blitz/blitz/meta/vecassign.h
weave/blitz/blitz/minmax.h
weave/blitz/blitz/mstruct.h
weave/blitz/blitz/numinquire.h
weave/blitz/blitz/numtrait.h
weave/blitz/blitz/ops.h
weave/blitz/blitz/prettyprint.h
weave/blitz/blitz/promote-old.h
weave/blitz/blitz/promote.h
weave/blitz/blitz/rand-dunif.h
weave/blitz/blitz/rand-mt.h
weave/blitz/blitz/rand-normal.h
weave/blitz/blitz/rand-tt800.h
weave/blitz/blitz/rand-uniform.h
weave/blitz/blitz/random.h
weave/blitz/blitz/randref.h
weave/blitz/blitz/range.h
weave/blitz/blitz/reduce.h
weave/blitz/blitz/shapecheck.h
weave/blitz/blitz/tau.h
weave/blitz/blitz/timer.h
weave/blitz/blitz/tiny.h
weave/blitz/blitz/tinymat.h
weave/blitz/blitz/tinymatexpr.h
weave/blitz/blitz/tinymatio.cc
weave/blitz/blitz/tinyvec-et.h
weave/blitz/blitz/tinyvec.cc
weave/blitz/blitz/tinyvec.h
weave/blitz/blitz/tinyvecio.cc
weave/blitz/blitz/tinyveciter.h
weave/blitz/blitz/traversal.cc
weave/blitz/blitz/traversal.h
weave/blitz/blitz/tuning.h
weave/blitz/blitz/tvcross.h
weave/blitz/blitz/tvecglobs.h
weave/blitz/blitz/update.h
weave/blitz/blitz/vecaccum.cc
weave/blitz/blitz/vecall.cc
weave/blitz/blitz/vecany.cc
weave/blitz/blitz/vecbfn.cc
weave/blitz/blitz/vecbops.cc
weave/blitz/blitz/veccount.cc
weave/blitz/blitz/vecdelta.cc
weave/blitz/blitz/vecdot.cc
weave/blitz/blitz/vecexpr.h
weave/blitz/blitz/vecexprwrap.h
weave/blitz/blitz/vecglobs.cc
weave/blitz/blitz/vecglobs.h
weave/blitz/blitz/vecio.cc
weave/blitz/blitz/veciter.h
weave/blitz/blitz/vecmax.cc
weave/blitz/blitz/vecmin.cc
weave/blitz/blitz/vecnorm.cc
weave/blitz/blitz/vecnorm1.cc
weave/blitz/blitz/vecpick.cc
weave/blitz/blitz/vecpick.h
weave/blitz/blitz/vecpickio.cc
weave/blitz/blitz/vecpickiter.h
weave/blitz/blitz/vecsum.cc
weave/blitz/blitz/vector-et.h
weave/blitz/blitz/vector.cc
weave/blitz/blitz/vector.h
weave/blitz/blitz/vecuops.cc
weave/blitz/blitz/vecwhere.cc
weave/blitz/blitz/vecwhere.h
weave/blitz/blitz/wrap-climits.h
weave/blitz/blitz/zero.cc
weave/blitz/blitz/zero.h
weave/blitz_spec.py
weave/setup_weave.py
==================
b0d7635;Travis Oliphant;2005-09-26 16:15:42 +0000;Fixed up for release.

==

scipy/__init__.py
scipy/base/include/scipy/arrayobject.h
scipy/base/matrix.py
scipy/base/src/arrayobject.c
scipy/corelib/setup.py
scipy/fftpack/fft_lite.py
scipy/linalg/__init__.py
scipy/linalg/basic_lite.py
scipy/stats/__init__.py
scipy/stats/random_lite.py
==================
3bd3270;Travis Oliphant;2005-09-26 15:34:48 +0000;Moving back to simple Numeric interface.

==

scipy/linalg/__init__.py
scipy/linalg/basic_lite.py
scipy/linalg/decomp_lite.py.py
==================
d695a4d;Travis Oliphant;2005-09-25 06:22:24 +0000;

==

scipy/base/setup.py
scipy/base/src/multiarraymodule.c
==================
221b999;Travis Oliphant;2005-09-23 23:48:16 +0000;

==

scipy/base/type_check.py
==================
e59aae3;Travis Oliphant;2005-09-23 23:42:26 +0000;

==

scipy/fftpack/__init__.py
scipy/fftpack/fft.py
scipy/fftpack/fft_lite.py
scipy/stats/random.py
scipy/stats/random_lite.py
==================
30e43a0;Travis Oliphant;2005-09-23 23:38:09 +0000;

==

scipy/__init__.py
scipy/base/__init__.py
scipy/linalg/__init__.py
scipy/linalg/basic.py
scipy/linalg/basic_lite.py
scipy/linalg/decomp_lite.py.py
==================
da93411;Travis Oliphant;2005-09-23 23:33:29 +0000;

==

scipy/base/getlimits.py
scipy/base/limits.py
scipy/base/src/multiarraymodule.c
scipy/base/src/ufuncobject.c
==================
4b72615;Travis Oliphant;2005-09-23 05:25:23 +0000;

==

scipy/base/__init__.py
scipy/base/pexec.py
scipy/base/ppimport.py
==================
43866c5;Travis Oliphant;2005-09-23 01:20:28 +0000;

==

scipy/base/src/arrayobject.c
==================
69134e1;Travis Oliphant;2005-09-22 05:45:56 +0000;fixed so that fp status flags are checked on mingw32 platform where __MINGW32__ is defined.

==

scipy/base/include/scipy/ufuncobject.h
scipy/base/src/ufuncobject.c
==================
c487b9c;Travis Oliphant;2005-09-22 03:41:21 +0000;Altered so that ndarray inherits from ndbigarray which does not export the sequence or buffer interface and so is not subject to the 32-bit limitations on platforms where int is not the size of the pointer.

==

scipy/base/code_generators/generate_array_api.py
scipy/base/include/scipy/arrayobject.h
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy/linalg/basic.py
==================
5bf137e;Travis Oliphant;2005-09-22 03:07:47 +0000;Fixed fortran ravelling issues.

==

scipy/__init__.py
scipy/base/code_generators/generate_array_api.py
scipy/base/include/scipy/arrayobject.h
scipy/base/numeric.py
scipy/base/setup.py
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy/corelib/blasdot/_dotblas.c
scipy/corelib/lapack_lite/lapack_litemodule.c
scipy/corelib/setup.py
scipy/linalg/basic.py
==================
e51273e;Travis Oliphant;2005-09-21 09:15:16 +0000;Added more missing files

==

scipy/corelib/fftpack_lite/fftpack.h
==================
f576bc5;Travis Oliphant;2005-09-21 09:07:39 +0000;Added missing setup.py

==

scipy/corelib/setup.py
==================
7296b27;Travis Oliphant;2005-09-21 08:03:15 +0000;Minor comment additions.

==

scipy/base/src/ufuncobject.c
==================
c5e6985;Travis Oliphant;2005-09-21 07:30:54 +0000;Fixed ufunc error handling.

==

scipy/base/matrix.py
scipy/base/numeric.py
scipy/base/src/arraytypes.inc.src
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
scipy/base/src/ufuncobject.c
==================
052a7b2;Travis Oliphant;2005-09-21 04:21:50 +0000;Added ufunc attributes.

==

scipy/base/code_generators/generate_umath.py
scipy/base/function_base.py
scipy/base/src/ufuncobject.c
scipy/base/src/umathmodule.c.src
==================
83accef;Travis Oliphant;2005-09-21 00:57:41 +0000;added hashability of scalars, and fixed printing of large integers.

==

scipy/base/arrayprint.py
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
==================
d015bd0;Travis Oliphant;2005-09-20 21:26:14 +0000;Added missing __init__ files

==

scipy/corelib/__init__.py
scipy/linalg/__init__.py
==================
a3874db;Travis Oliphant;2005-09-20 10:58:41 +0000;More fixes.

==

scipy/base/function_base.py
scipy/base/oldnumeric.py
scipy/base/shape_base.py
scipy/base/twodim_base.py
==================
1a859e9;Travis Oliphant;2005-09-20 09:19:33 +0000;Remove stray print.

==

scipy/base/shape_base.py
scipy/base/src/arraymethods.c
==================
0746db1;Travis Oliphant;2005-09-20 08:19:08 +0000;problematic MIN removed.

==

scipy/base/function_base.py
scipy/base/include/scipy/arrayobject.h
scipy/base/shape_base.py
scipy/base/src/_compiled_base.c
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy_compatibility
==================
b560ed0;Travis Oliphant;2005-09-20 07:25:17 +0000;Fixed up limits

==

scipy/base/__init__.py
scipy/base/function_base.py
scipy/base/limits.py
scipy/base/machar.py
scipy/base/src/arraytypes.inc.src
scipy/base/type_check.py
==================
182a8c3;Travis Oliphant;2005-09-20 05:40:52 +0000;Found problem with reshape.

==

scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
==================
70edf5c;Travis Oliphant;2005-09-20 03:00:26 +0000;Making more consistent.

==

scipy/base/numeric.py
scipy/base/src/arraymethods.c
scipy/base/src/scalartypes.inc.src
==================
2d0b625;Travis Oliphant;2005-09-19 23:41:29 +0000;Fixing some array scalar inconsistencies.

==

scipy/base/__init__.py
scipy/base/convertcode.py
scipy/base/function_base.py
scipy/base/include/scipy/arrayobject.h
scipy/base/index_tricks.py
scipy/base/info_scipy_base.py
scipy/base/ma.py
scipy/base/matrix.py
scipy/base/numeric.py
scipy/base/numerictypes.py
scipy/base/oldnumeric.py
scipy/base/oldscipy.py
scipy/base/polynomial.py
scipy/base/scimath.py
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
scipy/base/src/ufuncobject.c
scipy/base/testing.py
scipy/base/twodim_base.py
scipy/base/type_check.py
scipy/linalg/basic.py
==================
dc87df7;Travis Oliphant;2005-09-19 20:49:50 +0000;Adding core scipy functions

==

scipy/__init__.py
scipy/base/__init__.py
scipy/base/convertcode.py
scipy/base/limits.py
scipy/base/ma.py
scipy/base/machar.py
scipy/base/matrix.py
scipy/base/matrix_base.py
scipy/base/numeric.py
scipy/base/numerictypes.py
scipy/base/oldnumeric.py
scipy/base/shape_base.py
scipy/base/src/arraymethods.c
scipy/base/src/scalartypes.inc.src
scipy/base/src/umathmodule.c.src
scipy/base/twodim_base.py
scipy/base/type_check.py
==================
6c6675d;Travis Oliphant;2005-09-19 07:55:25 +0000;Converting masked arrays

==

scipy/base/convertcode.py
scipy/base/ma.py
scipy/base/oldnumeric.py
scipy/base/src/arrayobject.c
==================
9e29c45;Travis Oliphant;2005-09-18 08:15:31 +0000;Fixed more bugs.

==

scipy/base/src/arraymethods.c
scipy/base/src/ufuncobject.c
==================
198e1d7;Travis Oliphant;2005-09-18 07:32:39 +0000;Fixed PyArray_Copy when swapping needed.  Removed PyArray_CopyArray (made it a define)

==

scipy/base/code_generators/generate_array_api.py
scipy/base/include/scipy/arrayobject.h
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/ufuncobject.c
==================
2d3a747;Travis Oliphant;2005-09-16 22:56:50 +0000;Improving convert code.

==

scipy/base/convertcode.py
==================
1697f6f;Travis Oliphant;2005-09-16 22:17:04 +0000;Fixed _isnan

==

scipy/base/src/_isnan.c
==================
3ddaff3;Travis Oliphant;2005-09-16 22:15:40 +0000;Improved isinf if platform doesn't provide.

==

scipy/base/src/umathmodule.c.src
==================
136709c;Travis Oliphant;2005-09-16 22:06:02 +0000;Even more simplifications to isinf macro

==

scipy/base/src/umathmodule.c.src
==================
cef9614;Travis Oliphant;2005-09-16 21:58:35 +0000;Reworked isinf isnan macros a bit.

==

scipy/base/src/_isnan.c
scipy/base/src/_signbit.c
scipy/base/src/umathmodule.c.src
==================
325306f;Travis Oliphant;2005-09-16 21:11:54 +0000;Added isnan, isinf, isfinite, and signbit

==

scipy/base/code_generators/generate_umath.py
scipy/base/numeric.py
scipy/base/setup.py
scipy/base/src/umathmodule.c.src
==================
e4e9c0e;Travis Oliphant;2005-09-16 17:50:40 +0000;moved fft back to fftpack

==

scipy/fftfunc/__init__.py
scipy/fftfunc/fft.py
scipy/fftpack/__init__.py
scipy/fftpack/fft.py
scipy/setup.py
==================
9ce22d2;Travis Oliphant;2005-09-16 08:49:11 +0000;Checked that lapack_lite sources build if needed.

==

scipy/corelib/lapack_lite/blas_lite.c
scipy/corelib/lapack_lite/dlamch.c
scipy/corelib/lapack_lite/dlapack_lite.c
scipy/corelib/lapack_lite/f2c_lite.c
scipy/corelib/lapack_lite/zlapack_lite.c
scipy/fftfunc/__init__.py
scipy/fftfunc/fft.py
scipy/fftpack/__init__.py
scipy/fftpack/fft.py
scipy/setup.py
==================
dd64211;Travis Oliphant;2005-09-16 08:40:45 +0000;Seems to be completish

==

scipy/corelib/lapack_lite/f2c.h
scipy/corelib/random_lite/com.c
scipy/corelib/random_lite/linpack.c
scipy/corelib/random_lite/ranlib.c
scipy/corelib/random_lite/ranlib.h
scipy/corelib/random_lite/ranlibmodule.c
scipy/corelib/random_lite/rngmodule.c
scipy/linalg/basic.py
scipy/stats/__init__.py
scipy/stats/random.py
==================
242730b;Travis Oliphant;2005-09-16 08:21:41 +0000;Added lapack (if libs already present)

==

scipy/corelib/lapack_lite/lapack_litemodule.c
scipy/corelib/random_lite/rngmodule.c
scipy/linalg/basic.py
==================
8944d4f;Travis Oliphant;2005-09-16 08:03:00 +0000;Added fft.

==

scipy/corelib/fftpack_lite/fftpack_litemodule.c
scipy/fftpack/__init__.py
scipy/fftpack/fft.py
==================
ceca6a6;Travis Oliphant;2005-09-16 07:52:15 +0000;Many fixes.

==

scipy/base/code_generators/generate_array_api.py
scipy/base/include/scipy/arrayobject.h
scipy/base/matrix.py
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
scipy/base/src/ufuncobject.c
scipy/corelib/blasdot/__init__.py
scipy/corelib/blasdot/_dotblas.c
scipy/corelib/fftpack_lite/fftpack_litemodule.c
scipy/corelib/fftpack_lite/fftpackmodule.c
==================
b62c859;Travis Oliphant;2005-09-16 04:48:54 +0000;Added _dotblas install

==

scipy/__init__.py
scipy/base/code_generators/generate_umath.py
scipy/base/include/scipy/arrayobject.h
scipy/base/numeric.py
scipy/base/src/arraytypes.inc.src
scipy/base/src/multiarraymodule.c
scipy/corelib/blasdot/_dotblas.c
scipy/distutils/misc_util.py
scipy/distutils/system_info.py
scipy/setup.py
==================
d91b5b9;Travis Oliphant;2005-09-16 00:34:24 +0000;Added ldexp, frexp, and modf to ufuncs

==

scipy/base/code_generators/generate_umath.py
scipy/base/src/umathmodule.c.src
==================
a215f58;Travis Oliphant;2005-09-15 16:24:47 +0000;Added ma hook.

==

scipy/base/ma.py
==================
3cb3d77;Travis Oliphant;2005-09-15 09:04:10 +0000;Finished new _dotblas.c

==

scipy/corelib/blasdot/_dotblas.c
==================
76f6dbd;Travis Oliphant;2005-09-15 08:55:17 +0000;Added PyArray_ArrayType

==

scipy/base/code_generators/generate_array_api.py
scipy/base/include/scipy/arrayobject.h
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/arraytypes.inc.src
scipy/base/src/multiarraymodule.c
scipy/corelib/blasdot/_dotblas.c
==================
7257a82;Travis Oliphant;2005-09-15 00:20:47 +0000;Fixing added Numeric

==

scipy/base/src/arrayobject.c
scipy/corelib/random_lite/RNGmodule.c
scipy/corelib/random_lite/rngmodule.c
==================
4bea674;Travis Oliphant;2005-09-14 23:58:12 +0000;Moving Numeric to newcore

==

scipy/corelib/blasdot/__init__.py
scipy/corelib/blasdot/_dotblas.c
scipy/corelib/fftpack_lite/fftpack.c
scipy/corelib/fftpack_lite/fftpackmodule.c
scipy/corelib/lapack_lite/blas_lite.c
scipy/corelib/lapack_lite/dlamch.c
scipy/corelib/lapack_lite/dlapack_lite.c
scipy/corelib/lapack_lite/f2c_lite.c
scipy/corelib/lapack_lite/lapack_litemodule.c
scipy/corelib/lapack_lite/zlapack_lite.c
scipy/corelib/random_lite/RNGmodule.c
scipy/corelib/random_lite/pmath_rng.c
scipy/corelib/random_lite/ranf.c
scipy/corelib/random_lite/ranf.h
scipy/fftpack/__init__.py
scipy/fftpack/fft.py
scipy/linalg/basic.py
scipy/stats/__init__.py
scipy/stats/random.py
==================
ff01b26;Travis Oliphant;2005-09-14 23:34:12 +0000;Added EnsureArray to C-API and used it to clean up some method calls

==

scipy/__init__.py
scipy/base/code_generators/generate_array_api.py
scipy/base/setup.py
scipy/base/src/arrayobject.c
scipy/base/src/multiarraymodule.c
scipy/distutils/misc_util.py
==================
b48b35f;Travis Oliphant;2005-09-14 22:45:14 +0000;SVN version builds

==

scipy/base/_compiled_base.c
scipy/base/setup.py
scipy/base/src/_compiled_base.c
==================
8ce04e7;Travis Oliphant;2005-09-14 22:43:04 +0000;Adding scipy.base

==

setup.py
==================
8c23d38;Travis Oliphant;2005-09-14 22:42:53 +0000;Adding scipy.base

==

scipy/__init__.py
scipy/core_version.py
scipy/setup.py
==================
8cb36a6;Travis Oliphant;2005-09-14 22:42:37 +0000;Adding scipy.base to SVN

==

scipy/base/__init__.py
scipy/base/_scipy_mapping.c
scipy/base/_scipy_number.c
scipy/base/core_version.py
scipy/base/numerix.py
scipy/base/scipy_base_version.py
scipy/base/setup.py
scipy/base/src/arraymethods.c
scipy/base/src/arrayobject.c
scipy/base/src/arraytypes.inc.src
scipy/base/src/multiarraymodule.c
scipy/base/src/scalartypes.inc.src
scipy/base/src/ufuncobject.c
scipy/base/src/umathmodule.c.src
==================
add82c9;Travis Oliphant;2005-09-14 22:29:46 +0000;Moving things under scipy

==
==================
61b4869;Travis Oliphant;2005-09-14 22:28:28 +0000;Moving things to live under scipy

==

base/__init__.py
base/_compiled_base.c
base/_scipy_mapping.c
base/_scipy_number.c
base/arrayprint.py
base/code_generators/generate_array_api.py
base/code_generators/generate_ufunc_api.py
base/code_generators/generate_umath.py
base/convertcode.py
base/core_version.py
base/function_base.py
base/include/scipy/arrayobject.h
base/include/scipy/ufuncobject.h
base/index_tricks.py
base/info_scipy_base.py
base/limits.py
base/machar.py
base/matrix.py
base/matrix_base.py
base/numeric.py
base/numerictypes.py
base/numerix.py
base/oldnumeric.py
base/oldscipy.py
base/pexec.py
base/polynomial.py
base/ppimport.py
base/records.py
base/scimath.py
base/scipy_base_version.py
base/setup.py
base/shape_base.py
base/testing.py
base/tests/test_basic.py
base/tests/test_function_base.py
base/tests/test_index_tricks.py
base/tests/test_limits.py
base/tests/test_matrix_base.py
base/tests/test_shape_base.py
base/tests/test_type_check.py
base/type_check.py
distutils/__init__.py
distutils/__version__.py
distutils/ccompiler.py
distutils/command/__init__.py
distutils/command/bdist_rpm.py
distutils/command/build.py
distutils/command/build_clib.py
distutils/command/build_ext.py
distutils/command/build_py.py
distutils/command/build_src.py
distutils/command/config.py
distutils/command/config_compiler.py
distutils/command/install.py
distutils/command/install_data.py
distutils/command/install_headers.py
distutils/command/sdist.py
distutils/conv_template.py
distutils/core.py
distutils/cpuinfo.py
distutils/exec_command.py
distutils/extension.py
distutils/fcompiler/__init__.py
distutils/fcompiler/absoft.py
distutils/fcompiler/compaq.py
distutils/fcompiler/g95.py
distutils/fcompiler/gnu.py
distutils/fcompiler/hpux.py
distutils/fcompiler/ibm.py
distutils/fcompiler/intel.py
distutils/fcompiler/lahey.py
distutils/fcompiler/mips.py
distutils/fcompiler/nag.py
distutils/fcompiler/pg.py
distutils/fcompiler/sun.py
distutils/fcompiler/vast.py
distutils/from_template.py
distutils/line_endings.py
distutils/log.py
distutils/misc_util.py
distutils/setup.py
distutils/system_info.py
distutils/tests/f2py_ext/__init__.py
distutils/tests/f2py_ext/setup.py
distutils/tests/f2py_ext/src/fib1.f
distutils/tests/f2py_ext/src/fib2.pyf
distutils/tests/f2py_ext/tests/test_fib2.py
distutils/tests/f2py_f90_ext/__init__.py
distutils/tests/f2py_f90_ext/include/body.f90
distutils/tests/f2py_f90_ext/setup.py
distutils/tests/f2py_f90_ext/src/foo_free.f90
distutils/tests/f2py_f90_ext/tests/test_foo.py
distutils/tests/gen_ext/__init__.py
distutils/tests/gen_ext/setup.py
distutils/tests/gen_ext/tests/test_fib3.py
distutils/tests/swig_ext/__init__.py
distutils/tests/swig_ext/setup.py
distutils/tests/swig_ext/src/example.c
distutils/tests/swig_ext/src/example.i
distutils/tests/swig_ext/src/zoo.cc
distutils/tests/swig_ext/src/zoo.h
distutils/tests/swig_ext/src/zoo.i
distutils/tests/swig_ext/tests/test_example.py
distutils/tests/swig_ext/tests/test_example2.py
distutils/tests/test_build_src.py
distutils/unixccompiler.py
scipy/base/__init__.py
scipy/base/_compiled_base.c
scipy/base/_scipy_mapping.c
scipy/base/_scipy_number.c
scipy/base/arrayprint.py
scipy/base/code_generators/generate_array_api.py
scipy/base/code_generators/generate_ufunc_api.py
scipy/base/code_generators/generate_umath.py
scipy/base/convertcode.py
scipy/base/core_version.py
scipy/base/function_base.py
scipy/base/include/scipy/arrayobject.h
scipy/base/include/scipy/ufuncobject.h
scipy/base/index_tricks.py
scipy/base/info_scipy_base.py
scipy/base/limits.py
scipy/base/machar.py
scipy/base/matrix.py
scipy/base/matrix_base.py
scipy/base/numeric.py
scipy/base/numerictypes.py
scipy/base/numerix.py
scipy/base/oldnumeric.py
scipy/base/oldscipy.py
scipy/base/pexec.py
scipy/base/polynomial.py
scipy/base/ppimport.py
scipy/base/records.py
scipy/base/scimath.py
scipy/base/scipy_base_version.py
scipy/base/setup.py
scipy/base/shape_base.py
scipy/base/testing.py
scipy/base/tests/test_basic.py
scipy/base/tests/test_function_base.py
scipy/base/tests/test_index_tricks.py
scipy/base/tests/test_limits.py
scipy/base/tests/test_matrix_base.py
scipy/base/tests/test_shape_base.py
scipy/base/tests/test_type_check.py
scipy/base/type_check.py
scipy/distutils/__init__.py
scipy/distutils/__version__.py
scipy/distutils/ccompiler.py
scipy/distutils/command/__init__.py
scipy/distutils/command/bdist_rpm.py
scipy/distutils/command/build.py
scipy/distutils/command/build_clib.py
scipy/distutils/command/build_ext.py
scipy/distutils/command/build_py.py
scipy/distutils/command/build_src.py
scipy/distutils/command/config.py
scipy/distutils/command/config_compiler.py
scipy/distutils/command/install.py
scipy/distutils/command/install_data.py
scipy/distutils/command/install_headers.py
scipy/distutils/command/sdist.py
scipy/distutils/conv_template.py
scipy/distutils/core.py
scipy/distutils/cpuinfo.py
scipy/distutils/exec_command.py
scipy/distutils/extension.py
scipy/distutils/fcompiler/__init__.py
scipy/distutils/fcompiler/absoft.py
scipy/distutils/fcompiler/compaq.py
scipy/distutils/fcompiler/g95.py
scipy/distutils/fcompiler/gnu.py
scipy/distutils/fcompiler/hpux.py
scipy/distutils/fcompiler/ibm.py
scipy/distutils/fcompiler/intel.py
scipy/distutils/fcompiler/lahey.py
scipy/distutils/fcompiler/mips.py
scipy/distutils/fcompiler/nag.py
scipy/distutils/fcompiler/pg.py
scipy/distutils/fcompiler/sun.py
scipy/distutils/fcompiler/vast.py
scipy/distutils/from_template.py
scipy/distutils/line_endings.py
scipy/distutils/log.py
scipy/distutils/misc_util.py
scipy/distutils/setup.py
scipy/distutils/system_info.py
scipy/distutils/tests/f2py_ext/__init__.py
scipy/distutils/tests/f2py_ext/setup.py
scipy/distutils/tests/f2py_ext/src/fib1.f
scipy/distutils/tests/f2py_ext/src/fib2.pyf
scipy/distutils/tests/f2py_ext/tests/test_fib2.py
scipy/distutils/tests/f2py_f90_ext/__init__.py
scipy/distutils/tests/f2py_f90_ext/include/body.f90
scipy/distutils/tests/f2py_f90_ext/setup.py
scipy/distutils/tests/f2py_f90_ext/src/foo_free.f90
scipy/distutils/tests/f2py_f90_ext/tests/test_foo.py
scipy/distutils/tests/gen_ext/__init__.py
scipy/distutils/tests/gen_ext/setup.py
scipy/distutils/tests/gen_ext/tests/test_fib3.py
scipy/distutils/tests/swig_ext/__init__.py
scipy/distutils/tests/swig_ext/setup.py
scipy/distutils/tests/swig_ext/src/example.c
scipy/distutils/tests/swig_ext/src/example.i
scipy/distutils/tests/swig_ext/src/zoo.cc
scipy/distutils/tests/swig_ext/src/zoo.h
scipy/distutils/tests/swig_ext/src/zoo.i
scipy/distutils/tests/swig_ext/tests/test_example.py
scipy/distutils/tests/swig_ext/tests/test_example2.py
scipy/distutils/tests/test_build_src.py
scipy/distutils/unixccompiler.py
==================
575d373;Travis Oliphant;2005-09-14 22:12:33 +0000;Added new distutils

==

distutils/__init__.py
distutils/__version__.py
distutils/ccompiler.py
distutils/command/__init__.py
distutils/command/bdist_rpm.py
distutils/command/build.py
distutils/command/build_clib.py
distutils/command/build_ext.py
distutils/command/build_py.py
distutils/command/build_src.py
distutils/command/config.py
distutils/command/config_compiler.py
distutils/command/install.py
distutils/command/install_data.py
distutils/command/install_headers.py
distutils/command/sdist.py
distutils/conv_template.py
distutils/core.py
distutils/cpuinfo.py
distutils/exec_command.py
distutils/extension.py
distutils/fcompiler/__init__.py
distutils/fcompiler/absoft.py
distutils/fcompiler/compaq.py
distutils/fcompiler/g95.py
distutils/fcompiler/gnu.py
distutils/fcompiler/hpux.py
distutils/fcompiler/ibm.py
distutils/fcompiler/intel.py
distutils/fcompiler/lahey.py
distutils/fcompiler/mips.py
distutils/fcompiler/nag.py
distutils/fcompiler/pg.py
distutils/fcompiler/sun.py
distutils/fcompiler/vast.py
distutils/from_template.py
distutils/line_endings.py
distutils/log.py
distutils/misc_util.py
distutils/setup.py
distutils/system_info.py
distutils/tests/f2py_ext/__init__.py
distutils/tests/f2py_ext/setup.py
distutils/tests/f2py_ext/src/fib1.f
distutils/tests/f2py_ext/src/fib2.pyf
distutils/tests/f2py_ext/tests/test_fib2.py
distutils/tests/f2py_f90_ext/__init__.py
distutils/tests/f2py_f90_ext/include/body.f90
distutils/tests/f2py_f90_ext/setup.py
distutils/tests/f2py_f90_ext/src/foo_free.f90
distutils/tests/f2py_f90_ext/tests/test_foo.py
distutils/tests/gen_ext/__init__.py
distutils/tests/gen_ext/setup.py
distutils/tests/gen_ext/tests/test_fib3.py
distutils/tests/swig_ext/__init__.py
distutils/tests/swig_ext/setup.py
distutils/tests/swig_ext/src/example.c
distutils/tests/swig_ext/src/example.i
distutils/tests/swig_ext/src/zoo.cc
distutils/tests/swig_ext/src/zoo.h
distutils/tests/swig_ext/src/zoo.i
distutils/tests/swig_ext/tests/test_example.py
distutils/tests/swig_ext/tests/test_example2.py
distutils/tests/test_build_src.py
distutils/unixccompiler.py
==================
14db419;Travis Oliphant;2005-09-14 22:08:46 +0000;Fixing for new distutils

==

base/code_generators/generate_array_api.py
base/code_generators/generate_ufunc_api.py
base/code_generators/generate_umath.py
distutils/MANIFEST.in
distutils/__init__.py
distutils/absoftfcompiler.py
distutils/ccompiler.py
distutils/command/__init__.py
distutils/command/bdist_rpm.py
distutils/command/build.py
distutils/command/build_clib.py
distutils/command/build_ext.py
distutils/command/build_py.py
distutils/command/build_src.py
distutils/command/config_compiler.py
distutils/command/install.py
distutils/command/install_data.py
distutils/command/install_headers.py
distutils/command/sdist.py
distutils/compaqfcompiler.py
distutils/core.py
distutils/cpuinfo.py
distutils/dist.py
distutils/examples/setup_module_config.py
distutils/examples/setup_module_pure.py
distutils/examples/setup_module_pure_data.py
distutils/examples/setup_module_pure_super.py
distutils/examples/setup_module_svn.py
distutils/exec_command.py
distutils/extension.py
distutils/fcompiler.py
distutils/from_template.py
distutils/g95fcompiler.py
distutils/gnufcompiler.py
distutils/hpuxfcompiler.py
distutils/ibmfcompiler.py
distutils/info_scipy_distutils.py
distutils/intelfcompiler.py
distutils/laheyfcompiler.py
distutils/lib2def.py
distutils/line_endings.py
distutils/log.py
distutils/mingw32_support.py
distutils/mingw32ccompiler.py
distutils/mipsfcompiler.py
distutils/misc_util.py
distutils/nagfcompiler.py
distutils/pgfcompiler.py
distutils/proc.py
distutils/sample_site.cfg
distutils/scipy_distutils_version.py
distutils/setup.py
distutils/setup_scipy_distutils.py
distutils/sunfcompiler.py
distutils/system_info.py
distutils/tests/f2py_ext/__init__.py
distutils/tests/f2py_ext/setup.py
distutils/tests/f2py_ext/src/fib1.f
distutils/tests/f2py_ext/src/fib2.pyf
distutils/tests/f2py_ext/tests/test_fib2.py
distutils/tests/f2py_f90_ext/__init__.py
distutils/tests/f2py_f90_ext/include/body.f90
distutils/tests/f2py_f90_ext/setup.py
distutils/tests/f2py_f90_ext/src/foo_free.f90
distutils/tests/f2py_f90_ext/tests/test_foo.py
distutils/tests/gen_ext/__init__.py
distutils/tests/gen_ext/setup.py
distutils/tests/gen_ext/tests/test_fib3.py
distutils/tests/swig_ext/__init__.py
distutils/tests/swig_ext/setup.py
distutils/tests/swig_ext/src/example.c
distutils/tests/swig_ext/src/example.i
distutils/tests/swig_ext/src/zoo.cc
distutils/tests/swig_ext/src/zoo.h
distutils/tests/swig_ext/src/zoo.i
distutils/tests/swig_ext/tests/test_example.py
distutils/tests/swig_ext/tests/test_example2.py
distutils/unixccompiler.py
distutils/vastfcompiler.py
setup.py
==================
c5b2e41;Travis Oliphant;2005-09-14 22:04:03 +0000;Trying to delete CodeGenerators

==
==================
27aebee;Travis Oliphant;2005-09-14 22:03:19 +0000;Adding base

==

base/CodeGenerators/generate_array_api.py
base/CodeGenerators/generate_ufunc_api.py
base/CodeGenerators/generate_umath.py
base/_na_imports.py
base/_nc_imports.py
base/fastumath_nounsigned.inc
base/fastumath_unsigned.inc
base/fastumathmodule.c
base/include/scipy/arrayobject.h
base/include/scipy/ufuncobject.h
base/isnan.c
base/mconf_lite.h
base/mconf_lite_BE.h
base/mconf_lite_LE.h
base/numerix.h
base/setup_scipy_base.py
==================
618a8d4;Travis Oliphant;2005-09-14 21:56:45 +0000;Added base

==

base/CodeGenerators/generate_array_api.py
base/CodeGenerators/generate_ufunc_api.py
base/CodeGenerators/generate_umath.py
base/__init__.py
base/arrayprint.py
base/convertcode.py
base/core_version.py
base/function_base.py
base/matrix.py
base/numeric.py
base/numerictypes.py
base/oldnumeric.py
base/oldscipy.py
base/ppimport.py
base/records.py
base/setup.py
base/shape_base.py
base/src/display_test.c
base/testing.py
base/tests/test_basic.py
base/tests/test_fastumath.py
==================
951cdad;Travis Oliphant;2005-09-14 18:55:03 +0000;renamed directories

==

base/__init__.py
base/_compiled_base.c
base/_na_imports.py
base/_nc_imports.py
base/_scipy_mapping.c
base/_scipy_number.c
base/fastumath_nounsigned.inc
base/fastumath_unsigned.inc
base/fastumathmodule.c
base/function_base.py
base/index_tricks.py
base/info_scipy_base.py
base/isnan.c
base/limits.py
base/machar.py
base/matrix_base.py
base/mconf_lite.h
base/mconf_lite_BE.h
base/mconf_lite_LE.h
base/numerix.h
base/numerix.py
base/pexec.py
base/polynomial.py
base/ppimport.py
base/scimath.py
base/scipy_base_version.py
base/setup_scipy_base.py
base/shape_base.py
base/src/display_test.c
base/tests/test_fastumath.py
base/tests/test_function_base.py
base/tests/test_index_tricks.py
base/tests/test_limits.py
base/tests/test_matrix_base.py
base/tests/test_shape_base.py
base/tests/test_type_check.py
base/type_check.py
distutils/MANIFEST.in
distutils/__init__.py
distutils/absoftfcompiler.py
distutils/ccompiler.py
distutils/command/__init__.py
distutils/command/bdist_rpm.py
distutils/command/build.py
distutils/command/build_clib.py
distutils/command/build_ext.py
distutils/command/build_py.py
distutils/command/build_src.py
distutils/command/config_compiler.py
distutils/command/install.py
distutils/command/install_data.py
distutils/command/install_headers.py
distutils/command/sdist.py
distutils/compaqfcompiler.py
distutils/core.py
distutils/cpuinfo.py
distutils/dist.py
distutils/examples/setup_module_config.py
distutils/examples/setup_module_pure.py
distutils/examples/setup_module_pure_data.py
distutils/examples/setup_module_pure_super.py
distutils/examples/setup_module_svn.py
distutils/exec_command.py
distutils/extension.py
distutils/fcompiler.py
distutils/from_template.py
distutils/g95fcompiler.py
distutils/gnufcompiler.py
distutils/hpuxfcompiler.py
distutils/ibmfcompiler.py
distutils/info_scipy_distutils.py
distutils/intelfcompiler.py
distutils/laheyfcompiler.py
distutils/lib2def.py
distutils/line_endings.py
distutils/log.py
distutils/mingw32_support.py
distutils/mingw32ccompiler.py
distutils/mipsfcompiler.py
distutils/misc_util.py
distutils/nagfcompiler.py
distutils/pgfcompiler.py
distutils/proc.py
distutils/sample_site.cfg
distutils/scipy_distutils_version.py
distutils/setup.py
distutils/setup_scipy_distutils.py
distutils/sunfcompiler.py
distutils/system_info.py
distutils/tests/f2py_ext/__init__.py
distutils/tests/f2py_ext/setup.py
distutils/tests/f2py_ext/src/fib1.f
distutils/tests/f2py_ext/src/fib2.pyf
distutils/tests/f2py_ext/tests/test_fib2.py
distutils/tests/f2py_f90_ext/__init__.py
distutils/tests/f2py_f90_ext/include/body.f90
distutils/tests/f2py_f90_ext/setup.py
distutils/tests/f2py_f90_ext/src/foo_free.f90
distutils/tests/f2py_f90_ext/tests/test_foo.py
distutils/tests/gen_ext/__init__.py
distutils/tests/gen_ext/setup.py
distutils/tests/gen_ext/tests/test_fib3.py
distutils/tests/swig_ext/__init__.py
distutils/tests/swig_ext/setup.py
distutils/tests/swig_ext/src/example.c
distutils/tests/swig_ext/src/example.i
distutils/tests/swig_ext/src/zoo.cc
distutils/tests/swig_ext/src/zoo.h
distutils/tests/swig_ext/src/zoo.i
distutils/tests/swig_ext/tests/test_example.py
distutils/tests/swig_ext/tests/test_example2.py
distutils/unixccompiler.py
distutils/vastfcompiler.py
scipy_base/__init__.py
scipy_base/_compiled_base.c
scipy_base/_na_imports.py
scipy_base/_nc_imports.py
scipy_base/_scipy_mapping.c
scipy_base/_scipy_number.c
scipy_base/fastumath_nounsigned.inc
scipy_base/fastumath_unsigned.inc
scipy_base/fastumathmodule.c
scipy_base/function_base.py
scipy_base/index_tricks.py
scipy_base/info_scipy_base.py
scipy_base/isnan.c
scipy_base/limits.py
scipy_base/machar.py
scipy_base/matrix_base.py
scipy_base/mconf_lite.h
scipy_base/mconf_lite_BE.h
scipy_base/mconf_lite_LE.h
scipy_base/numerix.h
scipy_base/numerix.py
scipy_base/pexec.py
scipy_base/polynomial.py
scipy_base/ppimport.py
scipy_base/scimath.py
scipy_base/scipy_base_version.py
scipy_base/setup_scipy_base.py
scipy_base/shape_base.py
scipy_base/src/display_test.c
scipy_base/tests/test_fastumath.py
scipy_base/tests/test_function_base.py
scipy_base/tests/test_index_tricks.py
scipy_base/tests/test_limits.py
scipy_base/tests/test_matrix_base.py
scipy_base/tests/test_shape_base.py
scipy_base/tests/test_type_check.py
scipy_base/type_check.py
scipy_distutils/MANIFEST.in
scipy_distutils/__init__.py
scipy_distutils/absoftfcompiler.py
scipy_distutils/ccompiler.py
scipy_distutils/command/__init__.py
scipy_distutils/command/bdist_rpm.py
scipy_distutils/command/build.py
scipy_distutils/command/build_clib.py
scipy_distutils/command/build_ext.py
scipy_distutils/command/build_py.py
scipy_distutils/command/build_src.py
scipy_distutils/command/config_compiler.py
scipy_distutils/command/install.py
scipy_distutils/command/install_data.py
scipy_distutils/command/install_headers.py
scipy_distutils/command/sdist.py
scipy_distutils/compaqfcompiler.py
scipy_distutils/core.py
scipy_distutils/cpuinfo.py
scipy_distutils/dist.py
scipy_distutils/examples/setup_module_config.py
scipy_distutils/examples/setup_module_pure.py
scipy_distutils/examples/setup_module_pure_data.py
scipy_distutils/examples/setup_module_pure_super.py
scipy_distutils/examples/setup_module_svn.py
scipy_distutils/exec_command.py
scipy_distutils/extension.py
scipy_distutils/fcompiler.py
scipy_distutils/from_template.py
scipy_distutils/g95fcompiler.py
scipy_distutils/gnufcompiler.py
scipy_distutils/hpuxfcompiler.py
scipy_distutils/ibmfcompiler.py
scipy_distutils/info_scipy_distutils.py
scipy_distutils/intelfcompiler.py
scipy_distutils/laheyfcompiler.py
scipy_distutils/lib2def.py
scipy_distutils/line_endings.py
scipy_distutils/log.py
scipy_distutils/mingw32_support.py
scipy_distutils/mingw32ccompiler.py
scipy_distutils/mipsfcompiler.py
scipy_distutils/misc_util.py
scipy_distutils/nagfcompiler.py
scipy_distutils/pgfcompiler.py
scipy_distutils/proc.py
scipy_distutils/sample_site.cfg
scipy_distutils/scipy_distutils_version.py
scipy_distutils/setup.py
scipy_distutils/setup_scipy_distutils.py
scipy_distutils/sunfcompiler.py
scipy_distutils/system_info.py
scipy_distutils/tests/f2py_ext/__init__.py
scipy_distutils/tests/f2py_ext/setup.py
scipy_distutils/tests/f2py_ext/src/fib1.f
scipy_distutils/tests/f2py_ext/src/fib2.pyf
scipy_distutils/tests/f2py_ext/tests/test_fib2.py
scipy_distutils/tests/f2py_f90_ext/__init__.py
scipy_distutils/tests/f2py_f90_ext/include/body.f90
scipy_distutils/tests/f2py_f90_ext/setup.py
scipy_distutils/tests/f2py_f90_ext/src/foo_free.f90
scipy_distutils/tests/f2py_f90_ext/tests/test_foo.py
scipy_distutils/tests/gen_ext/__init__.py
scipy_distutils/tests/gen_ext/setup.py
scipy_distutils/tests/gen_ext/tests/test_fib3.py
scipy_distutils/tests/swig_ext/__init__.py
scipy_distutils/tests/swig_ext/setup.py
scipy_distutils/tests/swig_ext/src/example.c
scipy_distutils/tests/swig_ext/src/example.i
scipy_distutils/tests/swig_ext/src/zoo.cc
scipy_distutils/tests/swig_ext/src/zoo.h
scipy_distutils/tests/swig_ext/src/zoo.i
scipy_distutils/tests/swig_ext/tests/test_example.py
scipy_distutils/tests/swig_ext/tests/test_example2.py
scipy_distutils/unixccompiler.py
scipy_distutils/vastfcompiler.py
scipy_test/__init__.py
scipy_test/auto_test.py
scipy_test/info_scipy_test.py
scipy_test/logging.py
scipy_test/scipy_test_version.py
scipy_test/setup_scipy_test.py
scipy_test/testing.py
test/__init__.py
test/auto_test.py
test/info_scipy_test.py
test/logging.py
test/scipy_test_version.py
test/setup_scipy_test.py
test/testing.py
==================
c261078;jmiller;2005-09-08 13:25:08 +0000;Updated for weave support for numarray.

==

scipy_base/_na_imports.py
scipy_base/_nc_imports.py
weave/accelerate_tools.py
weave/blitz_spec.py
weave/blitz_tools.py
weave/catalog.py
weave/converters.py
weave/doc/tutorial.html
weave/examples/array3d.py
weave/examples/binary_search.py
weave/examples/cast_copy_transpose.py
weave/examples/ramp.py
weave/examples/ramp2.py
weave/examples/vq.py
weave/examples/vtk_example.py
weave/examples/wx_speed.py
weave/size_check.py
weave/standard_array_spec.py
weave/tests/test_ast_tools.py
weave/tests/test_blitz_tools.py
weave/tests/test_ext_tools.py
weave/tests/test_inline_tools.py
weave/tests/test_size_check.py
weave/tests/test_standard_array_spec.py
==================
e3af03c;Travis Oliphant;2005-08-31 08:01:17 +0000;Testing oliphant account

==

test
==================
1bed02e;Travis Oliphant;2005-08-31 08:00:52 +0000;Testing oliphant account

==

test
==================
a338b8d;jmiller;2005-08-12 23:37:51 +0000;Test commit.

==

scipy_base/_na_imports.py
==================
31b7554;jmiller;2005-08-12 21:41:10 +0000;Cleaning up test file

==

test
==================
98d71b5;jmiller;2005-08-12 21:40:36 +0000;Testing switch to digest authentication for repo

==

test
==================
05b4249;joe;2005-08-12 21:38:55 +0000;Cleaning up test file

==

test
==================
c868315;joe;2005-08-12 21:36:05 +0000;Testing scipy_core subversion repository

==

test
==================
a3b7a78;Travis Oliphant;2005-08-02 15:30:51 +0000;Added gradient

==

scipy_base/function_base.py
==================
3ee9684;Fernando Perez;2005-07-22 03:02:31 +0000;Patch submitted by Matt Fishburn <fishburn@MIT.EDU>, adds support for fftw3.

==

scipy_distutils/system_info.py
==================
0864a3e;Pearu Peterson;2005-07-11 04:08:46 +0000;Fixed bug.

==

scipy_distutils/ibmfcompiler.py
==================
28fa079;Fernando Perez;2005-07-08 17:54:33 +0000;comment out 'numerix VERSION' print statement

==

scipy_base/numerix.py
==================
68da31f;Fernando Perez;2005-06-17 15:23:39 +0000;Python.h must be the first header, before any blitz ones.

==

scipy_base/fastumathmodule.c
==================
c9b58a6;Fernando Perez;2005-06-17 15:22:14 +0000;Replace non-descript 'None' or 'unix' printed message when recompiling with an explicit '<weave: compiling>' one, issued at the proper location.

==

weave/inline_tools.py
weave/platform_info.py
==================
2ff0186;Fernando Perez;2005-06-17 15:21:13 +0000;Make sure Python.h are the very first headers in auto-generated code, even before blitz/array.h.  This is required by the Python C-API, as otherwise nasty warnings are generated.

==

weave/ext_tools.py
==================
c1410bc;Fernando Perez;2005-06-17 15:20:08 +0000;Add some caching to default_dir(), and close all opened shelves (shelve doesn't guarantee proper flushing unless close() is explicitly called).

==

weave/catalog.py
==================
02b1927;jmiller;2005-05-31 20:29:57 +0000;Fixed nesting of <emph> for Mozilla on linux (the remainder of the file was in italics).

==

weave/doc/tutorial.html
==================
ab64ab7;jmiller;2005-05-31 14:06:10 +0000;Fixed the auto-environment setting for NUMARRAY/NUMERIC from NUMERIX.

==

scipy_base/numerix.py
==================
76bfd2c;Travis Oliphant;2005-05-12 22:40:33 +0000;Fixed bmat

==

scipy_base/matrix_base.py
==================
195ab4a;jmiller;2005-05-09 19:12:53 +0000;Modifications to support scipy.special for numarray.

==

scipy_base/_na_imports.py
scipy_base/_nc_imports.py
scipy_base/function_base.py
scipy_base/machar.py
scipy_base/numerix.py
scipy_base/polynomial.py
scipy_base/scimath.py
==================
4cd1f2c;prabhu;2005-04-13 02:34:31 +0000;ENH: Added support for SWIG version 1.3.25.  The new version of SWIG has a different runtime layout.

==

weave/swig2_spec.py
weave/swigptr2.py
==================
177e749;Pearu Peterson;2005-03-24 09:38:31 +0000;Fixed _backend_compiled_base names to _compiled_base.

==

scipy_base/_compiled_base.c
scipy_base/_na_imports.py
scipy_base/_nc_imports.py
scipy_base/setup_scipy_base.py
==================
294234c;Pearu Peterson;2005-03-24 09:24:34 +0000;Update for build_ext --backends.

==

scipy_base/setup_scipy_base.py
==================
f8ce14c;Pearu Peterson;2005-03-24 09:22:43 +0000;Improved build_ext --backends support, setup.py files should not use numpy_info anymore, build_src takes care of that.

==

scipy_distutils/command/build_ext.py
scipy_distutils/command/build_src.py
scipy_distutils/system_info.py
==================
61b9776;Pearu Peterson;2005-03-24 09:17:48 +0000;Added swig_opts introduced in Py2.4

==

scipy_distutils/extension.py
==================
f8929d2;Pearu Peterson;2005-03-22 09:10:22 +0000;Clean up

==

scipy_base/setup_scipy_base.py
==================
64fb0ee;Pearu Peterson;2005-03-22 08:55:14 +0000;Fixed bug in build_ext --backend support, expose also ext. module private names to backend wrapper.

==

scipy_distutils/command/build_src.py
==================
ebf0bc4;Pearu Peterson;2005-03-22 07:04:22 +0000;Added g95 compiler support (thanks to Bill McLean)

==

scipy_distutils/fcompiler.py
scipy_distutils/g95fcompiler.py
==================
d851d5a;Pearu Peterson;2005-03-13 23:16:34 +0000;Fixed the detection of __file__ existence.

==

scipy_distutils/system_info.py
==================
ef6dabc;Robert Kern;2005-03-12 01:48:10 +0000;Firstly, fix FORTRAN fix for Fink.

==

scipy_distutils/gnufcompiler.py
==================
b5ec49d;Robert Kern;2005-03-11 00:53:24 +0000;OSX fix for g77

==

scipy_distutils/gnufcompiler.py
==================
3ac42a6;Pearu Peterson;2005-03-08 22:36:59 +0000;Introduced --backends option for build_ext command, when used then also build_src must be specified.

==

scipy_distutils/command/build_ext.py
scipy_distutils/command/build_src.py
==================
7aad76a;Pearu Peterson;2005-03-08 11:30:47 +0000;Applied patch by Brent Leback from the PG.

==

scipy_distutils/pgfcompiler.py
==================
661570f;Pearu Peterson;2005-02-03 20:30:13 +0000;Added not about -g77 and -DUNDERSCORE_G77.

==

scipy_distutils/absoftfcompiler.py
==================
2974e97;Pearu Peterson;2005-01-29 18:24:01 +0000;Fixed version numbers.

==

scipy_base/scipy_base_version.py
scipy_distutils/scipy_distutils_version.py
scipy_test/scipy_test_version.py
setup.py
weave/setup.py
weave/setup_weave.py
weave/weave_version.py
==================
ba85fbb;Pearu Peterson;2005-01-28 16:49:19 +0000;Renamed Scipy to scipy (as there are packages like scipy_base etc).

==

setup.py
==================
52e7976;Pearu Peterson;2005-01-28 16:36:27 +0000;Removed obsolute file. Using MANIFEST.in should be avoided, all source files should be listed in setup_...py files.

==

MANIFEST.in
==================
94d6646;Pearu Peterson;2005-01-28 16:32:20 +0000;Fixed bdist_rpm command.

==

scipy_base/setup_scipy_base.py
==================
a2d94a2;jmiller;2005-01-28 15:09:13 +0000;Added scipy_base/_compiled_base.c since it is used at build time but not included literally in any Extension, only as a renamed copy: e.g. _na_compiled_base.c.

==

MANIFEST.in
==================
de989a1;Pearu Peterson;2005-01-13 19:05:54 +0000;Fixed importing ScipyTest.

==

scipy_test/testing.py
==================
7d4fc57;jmiller;2005-01-11 16:18:44 +0000;numarray merge, continued.

==

scipy_test/testing.py
==================
ab288fa;jmiller;2005-01-10 19:28:55 +0000;Merged numarray branch onto the main trunk.

==
==================
bbc4687;jmiller;2005-01-10 18:07:42 +0000;Pearu's ATLAS detection fix for Python built in debug mode.  In debug mode there's extra ref count output which was screwing things up.

==

scipy_distutils/system_info.py
==================
54e300d;jmiller;2005-01-07 20:42:22 +0000;Switch to -O2 for gcc <= 3.3.3 rather than gcc == 3.3.3.

==

scipy_distutils/gnufcompiler.py
==================
5d776d8;Pearu Peterson;2005-01-05 10:19:40 +0000;Fixed test failures.

==

scipy_base/tests/test_function_base.py
==================
f4dfb70;Pearu Peterson;2005-01-05 09:16:19 +0000;Applied Todd's patch.

==

scipy_test/testing.py
==================
246665b;jmiller;2004-12-22 20:06:09 +0000;Backed out numarray "fixes" to avoid confusing issues;  numarray doesn't need these changes per see,  scipy as a whole does.

==

scipy_base/tests/test_function_base.py
==================
7486383;jmiller;2004-12-22 19:29:29 +0000;Added cross_correlate, array2string, ArrayType.

==

scipy_base/_na_imports.py
==================
bbeded3;jmiller;2004-12-22 19:27:16 +0000;Removed try/except from imports because it masks problems in the "numerix era".

==

scipy_test/testing.py
==================
f29481b;Pearu Peterson;2004-12-21 09:10:42 +0000;Try harder to find ATLAS version.

==

scipy_distutils/system_info.py
==================
6f8a23d;jmiller;2004-12-17 18:20:28 +0000;Reverted switch from alltrue() to all() after Pearu pointed out that the arrays in question were already raveled so the two calls are equivalent.   Added code so that assert_equal() and assert_almost_equal() will defer to assert_array_equal(), etc. for array parameters.

==

scipy_test/testing.py
==================
bc05123;jmiller;2004-12-06 22:26:04 +0000;Fixed assert_almost_equal by using around() instead of round().

==

scipy_test/testing.py
==================
8ab36c8;jmiller;2004-12-06 19:31:57 +0000;Fixed missing import for isfinite() by qualifying with _nx.

==

scipy_base/function_base.py
==================
64b26de;jmiller;2004-12-06 19:31:18 +0000;Fixed parenthesizing problem in _fix_real_lt_zero revealed by scipy-level self tests.

==

scipy_base/scimath.py
==================
5b13d29;jmiller;2004-12-03 22:41:55 +0000;numarray port "first draft" changes.

==

scipy_base/__init__.py
scipy_base/_compiled_base.c
scipy_base/_na_imports.py
scipy_base/_nc_imports.py
scipy_base/_scipy_mapping.c
scipy_base/_scipy_number.c
scipy_base/fastumath_unsigned.inc
scipy_base/fastumathmodule.c
scipy_base/function_base.py
scipy_base/index_tricks.py
scipy_base/info_scipy_base.py
scipy_base/machar.py
scipy_base/matrix_base.py
scipy_base/numerix.h
scipy_base/numerix.py
scipy_base/polynomial.py
scipy_base/scimath.py
scipy_base/setup_scipy_base.py
scipy_base/shape_base.py
scipy_base/tests/test_function_base.py
scipy_base/tests/test_type_check.py
scipy_base/type_check.py
scipy_test/testing.py
==================
7d87fa7;Pearu Peterson;2004-12-01 07:08:51 +0000;Removed HideException feature. Using isrunnable hooks instead to get the number of test suites correct.

==

scipy_test/testing.py
==================
c2920f6;Pearu Peterson;2004-11-30 12:53:50 +0000;Using -O2 with gcc-3.3.3 to avoid test failures.

==

scipy_distutils/gnufcompiler.py
==================
b89d967;Pearu Peterson;2004-11-29 18:09:51 +0000;Fixed displayed number of tests.

==

scipy_test/testing.py
==================
47a598c;Pearu Peterson;2004-11-29 17:46:30 +0000;Introduced HideException. Fixed docs.

==

scipy_test/testing.py
==================
c1361c8;Pearu Peterson;2004-11-27 21:23:27 +0000;Fixed getfile wrapper and wrapped inspect.getsource.

==

scipy_base/ppimport.py
==================
77c240a;Pearu Peterson;2004-11-27 15:55:23 +0000;Expose ppresolve.

==

scipy_base/__init__.py
scipy_base/info_scipy_base.py
==================
55d5de4;Pearu Peterson;2004-11-27 15:47:17 +0000;Doc fixes for livedocs.

==

scipy_base/type_check.py
scipy_distutils/info_scipy_distutils.py
scipy_test/info_scipy_test.py
scipy_test/testing.py
==================
afdbe18;Robert Kern;2004-11-24 01:17:46 +0000;Join code segments with newlines in between.

==

weave/ext_tools.py
==================
537e4ea;Pearu Peterson;2004-11-22 20:24:01 +0000;mintypecode() supports array arguments.

==

scipy_base/type_check.py
scipy_test/testing.py
==================
ed2479c;prabhu;2004-11-22 09:42:56 +0000;ENH: Updated to support recent versions of SWIG in addition to the older versions.  The SWIG runtime layout has changed recently (1.3.23).  The changes allow one to use both the older versions and the latest versions.

==

weave/swig2_spec.py
weave/swigptr2.py
==================
bc2f8ec;Pearu Peterson;2004-11-21 10:22:30 +0000;Docs for livedocs

==

scipy_test/__init__.py
scipy_test/info_scipy_test.py
scipy_test/testing.py
==================
34a21ae;Pearu Peterson;2004-11-21 10:08:46 +0000;Bug fixes in from_template. Added docs for livedocs.

==

scipy_distutils/__init__.py
scipy_distutils/exec_command.py
scipy_distutils/from_template.py
scipy_distutils/info_scipy_distutils.py
==================
6f974f1;Pearu Peterson;2004-11-19 22:43:27 +0000;Skip 'No test file..' messages in cases of info_, __cvs_version__, _version .py files.

==

scipy_test/testing.py
==================
7bcfe0c;Pearu Peterson;2004-11-19 11:16:30 +0000;Revised from_template (bug fixes, new features, support including .src files).

==

scipy_distutils/command/build_src.py
scipy_distutils/from_template.py
==================
ca66987;Pearu Peterson;2004-11-18 11:01:51 +0000;Implemented mintypecode.

==

scipy_base/info_scipy_base.py
scipy_base/tests/test_type_check.py
scipy_base/type_check.py
==================
3cf56bb;Pearu Peterson;2004-11-15 14:48:27 +0000;Added support to use additional libraries.

==

scipy_distutils/system_info.py
==================
7ea4934;Pearu Peterson;2004-11-14 17:44:08 +0000;Workaround Issue 202.

==

scipy_base/shape_base.py
==================
c91771e;Pearu Peterson;2004-11-14 09:43:52 +0000;Improved tests usage string.

==

scipy_test/testing.py
==================
0d6053f;Pearu Peterson;2004-11-14 09:43:11 +0000;Testing Issue202. Seems like a Numeric bug.

==

scipy_base/tests/test_shape_base.py
==================
d7be70e;Travis Oliphant;2004-11-12 02:04:51 +0000;Changes for livedocs.

==

scipy_base/type_check.py
==================
7a926be;Eric Jones;2004-11-11 23:30:12 +0000;added '\\n' to separate some of the generated code better.

==

weave/ext_tools.py
==================
06a0482;Pearu Peterson;2004-11-11 20:23:40 +0000;Minor modif.

==

scipy_distutils/gnufcompiler.py
==================
a80bdeb;Travis Oliphant;2004-11-10 07:13:19 +0000;Added .M attribute to altered numeric arrays.  Fixed more documentation issues.

==

scipy_base/_compiled_base.c
scipy_base/index_tricks.py
scipy_base/info_scipy_base.py
scipy_base/matrix_base.py
weave/info_weave.py
==================
f5cbab1;Pearu Peterson;2004-11-06 18:44:44 +0000;set_verbosity returns previous verbosity level.

==

scipy_distutils/log.py
==================
2a9e78c;Pearu Peterson;2004-11-06 16:23:22 +0000;Added missing numpy_info usages. Bug fixes.

==

scipy_distutils/from_template.py
==================
16a836f;Pearu Peterson;2004-11-06 10:14:28 +0000;Introduced PTATLAS env variable, allows to disable threaded atlas. system_info.py shows info classes specified in command line or all if none given.

==

scipy_distutils/system_info.py
==================
e82e107;Travis Oliphant;2004-11-06 09:07:08 +0000;Documentation fixes for livedocs.  Added agm function.

==

scipy_base/info_scipy_base.py
==================
e889835;Pearu Peterson;2004-11-05 15:44:50 +0000;Backport to Py2.1

==

scipy_test/testing.py
==================
9c184f6;Pearu Peterson;2004-11-05 15:22:16 +0000;Fixed circular fastumath import (triggered by test_stats and scipy_base).

==

scipy_base/setup_scipy_base.py
scipy_test/testing.py
==================
8c22633;Pearu Peterson;2004-11-05 13:20:22 +0000;Use correct Numeric headers to avoid conflicts between different Numeric versions.

==

scipy_base/setup_scipy_base.py
==================
337581c;Pearu Peterson;2004-11-04 23:12:58 +0000;Clean up.

==

scipy_base/fastumath_nounsigned.inc
scipy_base/fastumath_unsigned.inc
==================
eac24cf;Pearu Peterson;2004-11-04 23:07:20 +0000;Fixed the order of including math.h to support freebsd.

==

scipy_base/fastumathmodule.c
==================
40b324c;Pearu Peterson;2004-11-04 17:39:56 +0000;Fixed dir().

==

scipy_base/ppimport.py
==================
932e8be;Pearu Peterson;2004-11-03 11:22:41 +0000;Fixed dir on ppimported modules. Fixed doc-strings of ppimport-wrapped functions.

==

scipy_base/ppimport.py
==================
b2da802;Pearu Peterson;2004-11-03 09:05:54 +0000;Fixed quering info of a module with postponed import from ipython.

==

scipy_base/ppimport.py
==================
3d6d591;Pearu Peterson;2004-11-02 22:09:10 +0000;Using -lm for linking fastumath (support freebsd).

==

scipy_base/setup_scipy_base.py
==================
c93e129;Pearu Peterson;2004-11-02 07:07:51 +0000;Force -UHAVE_INVERSE_HYPERBOLIC on freebsd4 and win32.

==

scipy_base/setup_scipy_base.py
==================
92a5677;Pearu Peterson;2004-11-02 00:37:50 +0000;Impl. inverse hyperbolic functions (copy from Numeric), freebsd seem not to have them.

==

scipy_base/fastumath_nounsigned.inc
scipy_base/fastumath_unsigned.inc
==================
7fad517;Pearu Peterson;2004-11-02 00:36:00 +0000;Fixed atlas,lapack names for freebsd.

==

scipy_distutils/system_info.py
==================
40eb4c0;Pearu Peterson;2004-10-31 13:47:22 +0000;Introduced asfarray.

==

scipy_base/type_check.py
==================
e5b148d;Pearu Peterson;2004-10-29 15:40:27 +0000;Fixing setup.py build_ext -O..

==

scipy_distutils/fcompiler.py
==================
01ac8b9;Pearu Peterson;2004-10-28 20:25:22 +0000;Minor fix.

==

scipy_distutils/command/build_src.py
==================
99f4811;Pearu Peterson;2004-10-15 12:00:09 +0000;Fixed undefined symbol error in importing atlas_version ext. module when using 3.2.1_pre3.3.6 atlas libraries.

==

scipy_distutils/system_info.py
==================
2c40805;prabhu;2004-10-13 07:41:34 +0000;BUG: Add missing right parenthesis.

==

weave/ext_tools.py
==================
8a844dd;Eric Jones;2004-10-13 06:31:29 +0000;removed  "file changed" print statement

==

weave/ext_tools.py
==================
f42b743;Travis Oliphant;2004-10-12 16:36:26 +0000;Fixed from_template so it doesn't lowercase automatically

==

scipy_distutils/from_template.py
==================
f25ec90;Pearu Peterson;2004-10-07 21:06:43 +0000;Merge from v0_3_2 branch.

==
==================
1638e8a;Pearu Peterson;2004-10-07 20:55:02 +0000;Improve resource detection when prefix is given in env. variable.

==

scipy_distutils/system_info.py
==================
fd66cf9;Pearu Peterson;2004-10-07 12:55:18 +0000;Fixing 0.3.2 release branch.

==

setup.py
==================
629c9a8;Pearu Peterson;2004-10-07 12:43:32 +0000;Fixing 0.3.2 release branch.

==

scipy_base/scipy_base_version.py
scipy_distutils/fcompiler.py
scipy_distutils/scipy_distutils_version.py
scipy_test/scipy_test_version.py
weave/weave_version.py
==================
dbc5112;Pearu Peterson;2004-10-07 11:27:44 +0000;Increased micro version number and undone 0.3.2 release.

==

scipy_base/scipy_base_version.py
scipy_distutils/fcompiler.py
scipy_distutils/scipy_distutils_version.py
scipy_test/scipy_test_version.py
weave/weave_version.py
==================
3a8d4dc;Pearu Peterson;2004-10-07 11:02:08 +0000;Prepearing for the 0.3.2 release.

==

scipy_base/scipy_base_version.py
scipy_distutils/fcompiler.py
scipy_distutils/scipy_distutils_version.py
scipy_test/scipy_test_version.py
weave/weave_version.py
==================
68603ef;Travis Oliphant;2004-10-06 23:03:34 +0000;More changes to get rid of whrandom usage.

==

scipy_test/testing.py
weave/examples/dict_sort.py
weave/tests/test_size_check.py
==================
46fc1b2;Pearu Peterson;2004-10-06 17:58:54 +0000;Fixed issue 179.

==

scipy_base/function_base.py
==================
a942a40;Pearu Peterson;2004-10-06 11:59:07 +0000;Improved failure message on shape mismatch.

==

scipy_test/testing.py
==================
e88796b;Travis Oliphant;2004-10-05 13:58:47 +0000;Added documentation fixes and comment changes.

==

scipy_base/fastumathmodule.c
==================
be274e7;Pearu Peterson;2004-10-04 15:21:02 +0000;Fixed bdist_rpm for scipy_core.

==

scipy_base/setup_scipy_base.py
==================
b77d7f9;Pearu Peterson;2004-10-04 09:30:54 +0000;Added has_sse3 and gcc-3.4 flags for Opteron and Athlon 64 cpus.

==

scipy_distutils/cpuinfo.py
scipy_distutils/gnufcompiler.py
==================
bb6b4f4;Pearu Peterson;2004-10-04 09:01:36 +0000;Alpha is always 64-bit.

==

scipy_distutils/cpuinfo.py
==================
90f61af;Pearu Peterson;2004-10-04 08:54:50 +0000;Added is_Athlon64 and is_64bit methods.

==

scipy_distutils/cpuinfo.py
==================
5000b0e;Pearu Peterson;2004-10-02 19:38:22 +0000;Exit gracefully from interpreter shutdown.

==

scipy_base/pexec.py
==================
45b7bb2;Robert Kern;2004-10-01 23:08:34 +0000;logical_* type fixes

==

scipy_base/fastumath_nounsigned.inc
scipy_base/fastumath_unsigned.inc
==================
9677719;Travis Oliphant;2004-10-01 17:07:34 +0000;Fix for matrixmultiply != dot on Numeric < 23.4

==

scipy_base/__init__.py
==================
75e1e94;Travis Oliphant;2004-10-01 08:30:06 +0000;Added wrappers to iterative methods

==

scipy_distutils/from_template.py
==================
b0857cc;Travis Oliphant;2004-10-01 04:23:27 +0000;Forced casting on logical_xor.  Is this the needed MAC fix?

==

scipy_base/fastumath_nounsigned.inc
==================
f1d3571;Travis Oliphant;2004-10-01 04:12:32 +0000;Undid changes to fastumath_unsigned.inc

==

scipy_base/fastumath_unsigned.inc
==================
462dd1e;Robert Kern;2004-10-01 01:11:39 +0000;fixed fastumath logical functions on PPC Darwin platform

==

scipy_base/fastumath_unsigned.inc
==================
a073748;Robert Kern;2004-09-30 22:48:41 +0000;typo fixes and OSX fixes

==

weave/base_info.py
weave/c_spec.py
weave/inline_tools.py
==================
9cdf025;prabhu;2004-09-30 21:21:41 +0000;NEW: Simple example to show how one can inline C++ code in Python to manipulate VTK objects.

==

weave/examples/vtk_example.py
==================
c4bf083;prabhu;2004-09-30 21:19:21 +0000;NEW: Added example code to show how SWIG2 wrapped C++ objects can be used in weave.  The source for the SWIG wrapped extension modules are also included.

==

weave/examples/swig2_example.py
weave/examples/swig2_ext.h
weave/examples/swig2_ext.i
==================
7f3e33a;prabhu;2004-09-30 21:17:32 +0000;NEW: Added a simple example to demonstrate how to access a 3D Numeric array.

==

weave/examples/array3d.py
==================
f36a4af;prabhu;2004-09-30 21:15:12 +0000;ENH: Updated to transparently support SWIG wrapped objects that use a PyCObject and not a string to encode the pointer to the C++ object.

==

weave/swig2_spec.py
==================
d6fd1be;Pearu Peterson;2004-09-29 19:07:21 +0000;Applied patch from scipy issue 189.

==

scipy_distutils/cpuinfo.py
scipy_distutils/intelfcompiler.py
==================
644c97a;Pearu Peterson;2004-09-29 19:00:45 +0000;Fixed scipy issue 190

==

scipy_distutils/log.py
==================
30959d1;Pearu Peterson;2004-09-28 19:41:08 +0000;Fixed help for quering non-existing modules, e.g. keywords.

==

scipy_base/ppimport.py
==================
a48e9f9;Pearu Peterson;2004-09-28 11:05:52 +0000;Backport to Python 2.2 and earlier.

==

scipy_distutils/setup.py
==================
623d2ad;Pearu Peterson;2004-09-28 10:53:30 +0000;Added comment about requiring swig 1.3.14 or later.

==

scipy_distutils/command/build_src.py
==================
a599dbb;Pearu Peterson;2004-09-28 10:32:49 +0000;Backporting CCompiler.compiler hacks to Python <=2.2 distutils, fixes scipy issue 188.

==

scipy_distutils/ccompiler.py
scipy_distutils/fcompiler.py
==================
28efcb4;Pearu Peterson;2004-09-28 10:31:01 +0000;Fixed typos.

==

scipy_distutils/command/build_clib.py
scipy_distutils/command/build_ext.py
==================
58d2cf6;Travis Oliphant;2004-09-25 21:52:24 +0000;Fixed more problems with alter_numeric scalar conversion

==

scipy_base/_scipy_number.c
==================
52d1559;Pearu Peterson;2004-09-25 16:36:01 +0000;Fixed typo.

==

scipy_distutils/MANIFEST.in
==================
a0b4476;Pearu Peterson;2004-09-25 09:27:13 +0000;Clean up sys.path after scipy_distutils has been imported.

==

scipy_distutils/setup.py
==================
a383337;Pearu Peterson;2004-09-25 09:10:34 +0000;Introduced setup.py to make scipy_distutils as a standalone package.

==

scipy_distutils/MANIFEST.in
scipy_distutils/setup.py
==================
56e7378;Pearu Peterson;2004-09-24 09:34:01 +0000;Try harder to find xlf version number when it's not available in xlf output.

==

scipy_distutils/ibmfcompiler.py
==================
0018b01;Travis Oliphant;2004-09-04 22:00:51 +0000;Fixed segfault problems on windows due to passing Py_complex as return value of function between program segments compiled with different compilers.

==

scipy_base/fastumath_nounsigned.inc
scipy_base/fastumath_unsigned.inc
==================
96c0255;Travis Oliphant;2004-09-01 10:02:21 +0000;Fixed segfault bug affecting Windows computers.  Problem related again to using functions that pass structures (complex numbers) in between different comilers.

==

scipy_base/fastumath_nounsigned.inc
scipy_base/fastumath_unsigned.inc
scipy_base/fastumathmodule.c
==================
4c0b541;Pearu Peterson;2004-09-01 08:43:38 +0000;Fixed compiler choice for .f files containing f90 code in free format.

==

scipy_distutils/fcompiler.py
scipy_distutils/intelfcompiler.py
==================
2f080bc;Travis Oliphant;2004-08-31 01:00:05 +0000;Updated from_template to avoid recursion errors and fix bug.

==

scipy_distutils/from_template.py
==================
965e6c6;Travis Oliphant;2004-08-06 06:59:15 +0000;Fixed incomplete spec Issue160

==

scipy_base/index_tricks.py
==================
11d0364;Pearu Peterson;2004-06-23 09:51:56 +0000;Fixed version pattern for newer ibm compilers.

==

scipy_distutils/ibmfcompiler.py
==================
8376d1a;Travis Oliphant;2004-06-21 22:30:08 +0000;Fixed major bug in vectorize causing segfaults when one argument was broadcast to another

==

scipy_base/_compiled_base.c
==================
594170a;Pearu Peterson;2004-06-17 13:08:00 +0000;Fixed compaqfcompiler module switches.

==

scipy_distutils/compaqfcompiler.py
==================
3ff97f1;Travis Oliphant;2004-06-10 08:13:44 +0000;First draft of new (no-python-scalar coercion model).  Some tests are failing with precision errors.

==

scipy_base/_scipy_number.c
==================
b8d812d;Travis Oliphant;2004-06-10 00:41:21 +0000;First crack and ignoring Python scalars for coercion.

==

scipy_base/_compiled_base.c
scipy_base/_scipy_number.c
==================
f6922a8;Travis Oliphant;2004-06-08 00:03:46 +0000;Added fixes so structure for altered coercion model will at least compile -- no altered coercion yet...

==

scipy_base/_compiled_base.c
scipy_base/_scipy_number.c
==================
8b67a9f;Travis Oliphant;2004-06-07 23:52:37 +0000;Fixed abs(array([3,4],'b')) bug.  Placed in structure so that coercion model can be changed (just need to edit setup_types).

==

scipy_base/_compiled_base.c
scipy_base/_scipy_number.c
scipy_base/fastumath_unsigned.inc
==================
e028a1d;Pearu Peterson;2004-06-07 14:34:01 +0000;Fixed absoft version pattern. Wrapped distutils gen_lib_options: fcompiler.library_dir_option may return a list.

==

scipy_distutils/absoftfcompiler.py
scipy_distutils/ccompiler.py
==================
36bc78e;Travis Oliphant;2004-06-05 05:47:59 +0000;Optimizations to fancy indexing.

==

scipy_base/_scipy_mapping.c
==================
44b762b;Travis Oliphant;2004-06-05 05:18:16 +0000;Added index and masking to arrays.  Run scipy.alter_numeric() to enable --- not enabled by default for now...  a[a>3]=10  now works.

==

scipy_base/_compiled_base.c
scipy_base/_scipy_mapping.c
==================
b7bcfbf;Pearu Peterson;2004-06-03 09:20:51 +0000;Working on absoft compiler support for mingw32.

==

scipy_distutils/absoftfcompiler.py
==================
8cb093e;Pearu Peterson;2004-06-01 08:51:28 +0000;Fixed typo.

==

scipy_distutils/misc_util.py
==================
3b388b1;Pearu Peterson;2004-06-01 08:43:30 +0000;Disabled macros for all fortran compilers.

==

scipy_distutils/command/build_ext.py
==================
c22e382;Pearu Peterson;2004-06-01 08:36:08 +0000;Absoft requires win32 path even when called from cygwin environment.

==

scipy_distutils/ccompiler.py
==================
689f291;Pearu Peterson;2004-06-01 08:29:04 +0000;Absoft requires win32 path even when called from cygwin environment.

==

scipy_distutils/absoftfcompiler.py
scipy_distutils/misc_util.py
==================
f6602c8;Pearu Peterson;2004-06-01 08:27:47 +0000;Added gdk and gdk-2.0 info classes

==

scipy_distutils/system_info.py
==================
f6784ff;Pearu Peterson;2004-05-26 17:30:24 +0000;-D -U options to xlf compiler have different meanings than (un)defining cpp variables. So, disabled macros for ibm compiler.

==

scipy_distutils/command/build_ext.py
==================
9161659;Pearu Peterson;2004-05-26 17:27:38 +0000;pkg-config has --cflags instead of --cxxflags

==

scipy_distutils/system_info.py
==================
9ccc30d;Pearu Peterson;2004-05-19 19:59:16 +0000;Fix distutils.util.split_quoted for white-space-less words in quotes.

==

scipy_distutils/ccompiler.py
==================
924e9e3;Pearu Peterson;2004-05-17 12:49:50 +0000;Preparing to fix bdist_rpm bug when setup.py script does not exist.

==

scipy_distutils/command/__init__.py
scipy_distutils/command/bdist_rpm.py
scipy_distutils/core.py
==================
43e9830;Pearu Peterson;2004-05-17 12:48:00 +0000;Fixed bdist_rpm failure when a file name contains spaces.

==

scipy_distutils/command/install.py
==================
4d918dd;Pearu Peterson;2004-05-14 15:40:54 +0000;Adding 'scripts' to default configuration dict.

==

scipy_distutils/misc_util.py
==================
6822f58;Pearu Peterson;2004-05-13 13:46:43 +0000;Two more setup script examples: generation of __svn_version__ and config.

==

scipy_distutils/examples/setup_module_config.py
scipy_distutils/examples/setup_module_svn.py
==================
758a1c8;Pearu Peterson;2004-05-13 13:01:00 +0000;Fixed target_dir of pure Fortran extensions to include extension names.

==

scipy_distutils/command/build_src.py
==================
d1ed079;Pearu Peterson;2004-05-13 11:53:17 +0000;Support for getting packages from non-package subdirectories.

==

scipy_distutils/examples/setup_module_pure_super.py
scipy_distutils/misc_util.py
==================
b7cc0ff;Pearu Peterson;2004-05-13 08:59:08 +0000;Added proc.py.

==

scipy_distutils/proc.py
==================
03693fb;Pearu Peterson;2004-05-13 08:39:59 +0000;Handle the case where .svn/entries does not exist.

==

scipy_distutils/misc_util.py
==================
ebe4943;Pearu Peterson;2004-05-12 20:56:41 +0000;No need to wrap pydoc.locate. Fixes interactive help() session.

==

scipy_base/ppimport.py
==================
77253fb;Pearu Peterson;2004-05-12 14:07:55 +0000;Few typical setup.py example scripts.

==

scipy_distutils/examples/setup_module_pure.py
scipy_distutils/examples/setup_module_pure_data.py
scipy_distutils/examples/setup_module_pure_super.py
==================
afa86a9;Pearu Peterson;2004-05-11 19:42:43 +0000;Fixed help for postponed attributes. Added docs to overwritten methods/functions.

==

scipy_base/__init__.py
scipy_base/ppimport.py
==================
d7b3cd5;Pearu Peterson;2004-05-11 16:32:44 +0000;Refactored code: frame_traceback is quite useful in debugging. Fixed importing all postponed modules when using help().

==

scipy_base/ppimport.py
==================
5d6793a;Pearu Peterson;2004-05-11 12:44:56 +0000;Fixed bugs. More debugging hooks. ppresolve returns its string argument when it is unable to resolve the object and when ignore_failure is true, this fixes few Arnd cases.

==

scipy_base/ppimport.py
==================
038fb06;Pearu Peterson;2004-05-11 12:41:42 +0000;Cleanup.

==

scipy_distutils/system_info.py
==================
5f39b86;Pearu Peterson;2004-05-10 08:19:08 +0000;Impl. get_build_platlib(). atlas_version is built into temp directory - this should fix bdist_rpm on RedHat systems.

==

scipy_distutils/misc_util.py
scipy_distutils/system_info.py
==================
7d34fc5;Pearu Peterson;2004-05-10 06:59:01 +0000;Introduced include_only boolean argument to get_subpackages.

==

scipy_distutils/misc_util.py
==================
14a9cf6;Pearu Peterson;2004-05-09 18:10:50 +0000;Cleanup.

==

scipy_base/ppimport.py
scipy_distutils/misc_util.py
==================
91b24ba;Pearu Peterson;2004-05-09 18:08:51 +0000;Fixed bug where targets of different extensions had the same file name and so caused silent name conflicts.

==

scipy_distutils/command/build_src.py
scipy_distutils/misc_util.py
==================
2c114c6;Pearu Peterson;2004-05-09 07:14:18 +0000;Added debugging hooks.

==

scipy_base/ppimport.py
==================
7a6dba8;Pearu Peterson;2004-05-06 07:02:28 +0000;Also pydoc.describe needs ppresolve wrapper to get title right.

==

scipy_base/ppimport.py
==================
1416eaa;Pearu Peterson;2004-05-06 06:43:10 +0000;Renamed realize to ppresolve. Fixed help('scipy.modulename') issue.

==

scipy_base/ppimport.py
==================
6f911ba;Pearu Peterson;2004-05-05 19:30:39 +0000;Impl. ppimport.realize. Fixes help(module.attribute) bug.

==

scipy_base/ppimport.py
==================
07b23a5;Pearu Peterson;2004-05-03 16:30:05 +0000;Backport to Python <=2.2: cannot use slice object for strings.

==

scipy_distutils/from_template.py
==================
f3e93c7;Pearu Peterson;2004-05-03 10:57:37 +0000;Don't scan build directory for modules.

==

scipy_distutils/misc_util.py
==================
be1d0a5;Pearu Peterson;2004-05-03 10:15:49 +0000;If extension has no sources then there will be no output. Fixes bdist_rpm command.

==

scipy_distutils/command/build_ext.py
==================
4350ab0;Pearu Peterson;2004-05-03 07:32:19 +0000;Disabled hard-linking when creating source archives to avoid modifying (changing eol-style) files in source tree. When enabled, modifications will be undone after an archive is created; however, dos->unix->dos is not always identity mapping (e.g. try on chaco/wxplt.py) and that's the reason for always making a copy.

==

scipy_distutils/command/sdist.py
scipy_distutils/line_endings.py
scipy_distutils/misc_util.py
==================
6e1a504;Pearu Peterson;2004-05-02 19:28:42 +0000;svn revision number must be int.

==

scipy_distutils/misc_util.py
==================
7849a6d;Pearu Peterson;2004-05-02 19:23:58 +0000;Refactored get_svn_revision from generate_svn_version_py.

==

scipy_distutils/misc_util.py
==================
64bc6e3;Pearu Peterson;2004-05-02 19:18:03 +0000;Minor enhancement for generate_svn_version_py.

==

scipy_distutils/misc_util.py
==================
4434fb1;Pearu Peterson;2004-05-02 19:06:32 +0000;Impl. generate_config_py and generate_svn_version_py functions

==

scipy_distutils/misc_util.py
==================
0cc9384;Travis Oliphant;2004-04-30 10:30:26 +0000;Improving sparse support.

==

scipy_distutils/from_template.py
==================
e4bc886;Pearu Peterson;2004-04-29 07:16:02 +0000;Don't build extension module when there are no sources. This allows generating arbitrary .py files within Extension.

==

scipy_distutils/command/build_ext.py
==================
16628c9;Travis Oliphant;2004-04-27 16:35:57 +0000;Added template source support using simple rules

==

scipy_distutils/command/build_src.py
scipy_distutils/from_template.py
==================
7b9ac41;Travis Oliphant;2004-04-27 07:47:35 +0000;Expose only process_str

==

scipy_distutils/from_template.py
==================
8353a24;Travis Oliphant;2004-04-27 07:40:41 +0000;Added function to construct source files from a template.

==

scipy_distutils/from_template.py
==================
463f9a1;Pearu Peterson;2004-04-23 07:07:38 +0000;Fixed missing writeln in dummy_stream.

==

scipy_test/testing.py
==================
bf5e48a;Pearu Peterson;2004-04-22 16:58:48 +0000;Fixed find_executable(exe) when exe is symbolic link (as for example g77->/usr/bin/colorgcc).

==

scipy_distutils/exec_command.py
scipy_distutils/gnufcompiler.py
==================
fb491c2;Pearu Peterson;2004-04-22 16:33:29 +0000;Fixed bug (len(conf.pop())==2 always).

==

scipy_distutils/fcompiler.py
==================
6cd1654;Pearu Peterson;2004-04-22 15:55:13 +0000;Incr. micro version to 1. Enabled CVS version info in version. Enabled arch-dependent Fortran compiler flags.

==

scipy_base/scipy_base_version.py
scipy_distutils/fcompiler.py
scipy_distutils/scipy_distutils_version.py
scipy_test/scipy_test_version.py
weave/weave_version.py
==================
5d0f856;Pearu Peterson;2004-04-21 14:21:23 +0000;Fixed bug: target from a source file having absolute path did not end up inside build directory. Should also fix failing build in autotest.

==

scipy_distutils/command/build_src.py
==================
40942cf;Pearu Peterson;2004-04-20 09:30:17 +0000;New ext module display_test, provides a robust way to test whether X11 display can be opened or not.

==

scipy_base/setup_scipy_base.py
scipy_base/src/display_test.c
==================
64f222c;prabhu;2004-04-20 09:00:55 +0000;NEW: New modules to enable the use of SWIG2 (SWIG >= 1.3) wrapped code with weave.

==

weave/swig2_spec.py
weave/swigptr2.py
==================
bd39273;Pearu Peterson;2004-04-20 08:22:20 +0000;Absoft: using 'f77 -K shared' for building shared libraries and -fpic for compiling codes when version >=8.2.

==

scipy_distutils/absoftfcompiler.py
==================
3cb02b5;Pearu Peterson;2004-04-14 18:52:08 +0000;Impl. a way to ignore software in the system, e.g. set ATLAS=None to pretend that Atlas libraries are not availiable.

==

scipy_distutils/system_info.py
==================
b88d9f6;Pearu Peterson;2004-04-14 18:05:58 +0000;Updates for doing setup sdist.

==

weave/setup.py
weave/setup_weave.py
==================
25f3834;Pearu Peterson;2004-04-14 01:03:54 +0000;Impl. enable/disable functions for ppimport to enable/disable postponed import hooks.

==

scipy_base/ppimport.py
==================
cfa2475;Pearu Peterson;2004-04-13 03:07:51 +0000;Backport to Python 2.1

==

scipy_distutils/exec_command.py
==================
7040550;Pearu Peterson;2004-04-13 02:16:34 +0000;Fixed incorrect failure from assert_approx_equal(1.0,0.99999999998)

==

scipy_test/testing.py
==================
04f1a58;Travis Vaught;2004-04-12 19:35:07 +0000;fixed reference to test_module

==

scipy_test/testing.py
==================
796f998;Travis Vaught;2004-04-12 19:18:44 +0000;added missing definition of 'mstr' for use in failure reporting

==

scipy_test/testing.py
==================
567a14b;Pearu Peterson;2004-04-10 18:43:43 +0000;Ignore None in config_list.

==

scipy_distutils/misc_util.py
==================
e2d1772;Pearu Peterson;2004-04-10 16:16:30 +0000;Setting 'config_fc --noarch' default for the release process (Remember to set it back\!).

==

scipy_distutils/fcompiler.py
==================
dec2d0c;Pearu Peterson;2004-04-10 16:00:09 +0000;Pumped up version numbers to 0.3.0.

==

scipy_base/scipy_base_version.py
scipy_distutils/scipy_distutils_version.py
scipy_test/scipy_test_version.py
weave/weave_version.py
==================
e1802e7;Pearu Peterson;2004-04-10 15:49:48 +0000;Added number of new info classes.

==

scipy_distutils/system_info.py
==================
a1f50a2;Pearu Peterson;2004-04-09 19:40:28 +0000;Added WX_RELEASE_, WX_VERSION_ macros to wx_info, changed WX_VERSION to WX_INFO.

==

scipy_distutils/system_info.py
==================
ec7071e;Pearu Peterson;2004-04-09 17:05:29 +0000;Implemented wx_info support.

==

scipy_distutils/system_info.py
==================
468a2f2;Pearu Peterson;2004-04-09 16:33:47 +0000;Return original exe name when not found.

==

scipy_distutils/exec_command.py
==================
ed27d88;Pearu Peterson;2004-04-05 21:53:37 +0000;Using /Zm1000 when compiling C++ sources with MSVC compiler.

==

scipy_distutils/command/build_ext.py
==================
63bbe4c;Pearu Peterson;2004-04-05 20:12:20 +0000;sdist: ignore hidden and temporary files

==

scipy_distutils/command/build_clib.py
scipy_distutils/command/build_ext.py
==================
0e69290;Pearu Peterson;2004-04-05 19:53:57 +0000;Fixed get_path output.

==

scipy_distutils/misc_util.py
==================
58618b0;Pearu Peterson;2004-04-05 17:39:50 +0000;Fixed --inplace building of swig extensions: .py files are put (by 'swig -outdir') to the same directory where extension files are generated.

==

scipy_distutils/command/build_src.py
==================
4a912cb;Pearu Peterson;2004-04-03 01:31:21 +0000;Fixed win32 cmd and msys ports.

==

scipy_distutils/exec_command.py
==================
e161453;Pearu Peterson;2004-04-03 01:06:25 +0000;Fixed building c++ libraries when using msvc 6.0

==

scipy_distutils/command/build_clib.py
==================
d8e22e7;Pearu Peterson;2004-04-02 21:40:12 +0000;Prepearing to tag scipy tree (unified micro version numbers)

==

scipy_base/scipy_base_version.py
scipy_test/scipy_test_version.py
setup.py
weave/weave_version.py
==================
02ede8c;Pearu Peterson;2004-03-31 18:49:02 +0000;Workaround for MSVC6.0 when building c++ extensions

==

scipy_distutils/command/build_ext.py
==================
442e9dd;Pearu Peterson;2004-03-31 18:48:01 +0000;Improved debug messages

==

scipy_distutils/ccompiler.py
==================
f061375;Pearu Peterson;2004-03-31 18:46:30 +0000;Fixed exec_command when used under win32 cmd and a command contains spaces or is wrapped into quotes

==

scipy_distutils/exec_command.py
==================
d838c79;Pearu Peterson;2004-03-30 17:52:29 +0000;Using os.path.realpath only on posix platforms.

==

scipy_distutils/exec_command.py
==================
bea4593;Pearu Peterson;2004-03-30 16:55:39 +0000;Using _exec_command_posix on sunos.

==

scipy_distutils/exec_command.py
==================
2d7c530;Pearu Peterson;2004-03-30 16:26:15 +0000;Added .F, .F90 to the list of Fortran source extensions.

==

scipy_distutils/fcompiler.py
==================
15e2818;Pearu Peterson;2004-03-29 23:29:28 +0000;Fixed weave.catalog tests and trying to reduce the verbosity of weave usage.

==

weave/build_tools.py
weave/catalog.py
==================
6fc96bc;Pearu Peterson;2004-03-29 23:24:56 +0000;Introduced recursive keyword argument to get_subpackages.

==

scipy_distutils/misc_util.py
==================
f7a8b6d;Pearu Peterson;2004-03-29 19:17:15 +0000;Disabled status=998 error for now.

==

scipy_distutils/exec_command.py
==================
766c97f;Pearu Peterson;2004-03-29 16:57:23 +0000;Added test for f2py --include_paths option

==

scipy_distutils/fcompiler.py
scipy_distutils/tests/f2py_f90_ext/include/body.f90
scipy_distutils/tests/f2py_f90_ext/setup.py
scipy_distutils/tests/f2py_f90_ext/src/foo_free.f90
==================
b515133;Pearu Peterson;2004-03-29 15:52:29 +0000;Fixed exec_command for commands with spaces

==

scipy_distutils/exec_command.py
==================
406a04b;Pearu Peterson;2004-03-28 19:54:30 +0000;Introduced reldir argument to set_local_path.

==

scipy_test/testing.py
==================
5f5c774;Pearu Peterson;2004-03-28 19:53:07 +0000;Reduced debugging messages

==

scipy_distutils/ccompiler.py
scipy_distutils/log.py
==================
3743e36;Pearu Peterson;2004-03-26 18:52:12 +0000;Added support to Sun WorkShop 6 F95 compiler (untested though)

==

scipy_distutils/sunfcompiler.py
==================
5409036;Pearu Peterson;2004-03-26 18:11:27 +0000;Be verbose when command returns failure status.

==

scipy_distutils/ccompiler.py
==================
0d3f9d2;Pearu Peterson;2004-03-26 17:05:47 +0000;Disabled use_shell for sun os

==

scipy_distutils/exec_command.py
==================
88424c5;Pearu Peterson;2004-03-26 16:58:00 +0000;Fixed _exec_command when use_shell is true

==

scipy_distutils/exec_command.py
==================
7712b89;Pearu Peterson;2004-03-26 16:18:51 +0000;Fixed displaying log messages that contain % characters

==

scipy_distutils/log.py
==================
7bf0e17;Pearu Peterson;2004-03-25 15:36:21 +0000;Fixed duplicate quotation of a command path.

==

scipy_distutils/exec_command.py
==================
112824c;Pearu Peterson;2004-03-24 19:37:42 +0000;Fixed compiler_switch

==

scipy_distutils/compaqfcompiler.py
==================
840e261;Pearu Peterson;2004-03-24 19:33:38 +0000;Fixed bug when the fullpath to an executable contains spaces

==

scipy_distutils/exec_command.py
==================
db74b2b;Pearu Peterson;2004-03-22 17:36:59 +0000;Handle the case where one of the arguments is scalar in assert_array_equal

==

scipy_test/testing.py
==================
6a376b2;Pearu Peterson;2004-03-20 23:20:29 +0000;Fixed local_path for previously commited feature

==

scipy_distutils/misc_util.py
==================
0380887;Pearu Peterson;2004-03-20 22:58:34 +0000;Deal with pure python subpackages that have no setup_*.py file.

==

scipy_distutils/misc_util.py
==================
208baf5;Travis Vaught;2004-03-17 21:23:21 +0000;commented out call to recently commented out __get_cc_args

==

scipy_distutils/fcompiler.py
==================
8957ad3;Travis Vaught;2004-03-17 20:56:02 +0000;fixed typo

==

scipy_distutils/system_info.py
==================
1a08dbb;Pearu Peterson;2004-03-13 17:11:12 +0000;Fixed Apple python test

==

scipy_distutils/gnufcompiler.py
==================
0bec5dc;Pearu Peterson;2004-03-12 14:24:44 +0000;changed /c to /compile_only for compaq visual (DF98)

==

scipy_distutils/compaqfcompiler.py
==================
c916560;Pearu Peterson;2004-03-12 07:20:17 +0000;Use -framework Python only with apple python, fink python does not need it (as I have been told)

==

scipy_distutils/gnufcompiler.py
==================
4d2ead9;Travis Oliphant;2004-03-11 21:54:41 +0000;Added compiler flag for versions later than Absoft 6.2 so that compiler will free memory on encountering a dealloc.

==

scipy_distutils/absoftfcompiler.py
==================
8d935d1;Travis Oliphant;2004-03-11 20:20:03 +0000;Fixed dependency libraries on absoft compiler.

==

scipy_distutils/absoftfcompiler.py
scipy_distutils/ccompiler.py
==================
cf8d1e6;Eric Jones;2004-03-10 22:47:10 +0000;platform_info now try to use scipy_distutils and falls back to distutils if it isn't available.

==

weave/platform_info.py
==================
9b5b7b2;Eric Jones;2004-03-10 22:46:22 +0000;fix to get MSVC compilers working.

==

scipy_distutils/ccompiler.py
==================
7797614;Pearu Peterson;2004-03-09 08:35:38 +0000;Introduced IgnoreException. When it is raised then scipy unittesting framework does not treat it as an error. Useful when certain features of a package are disabled but testing site contains tests for these features. Added agg_platform_support.cpp to sources list.

==

scipy_distutils/system_info.py
scipy_test/testing.py
==================
a96e326;Pearu Peterson;2004-03-07 10:05:13 +0000;Multiple suites were found when package_name==__main__, fixed it. Now TestCase classes can be implemented also in module sources.

==

scipy_test/testing.py
==================
7f73fd1;Pearu Peterson;2004-03-07 07:49:37 +0000;Fixed several issues with msvc support.

==

scipy_distutils/ccompiler.py
scipy_distutils/command/build_ext.py
==================
dbd133a;Pearu Peterson;2004-03-06 14:07:52 +0000;Made debugging messages optional.

==

scipy_test/testing.py
==================
339ad8f;Pearu Peterson;2004-03-06 08:46:37 +0000;Impl. better handling of getting suites from a python script

==

scipy_test/testing.py
==================
9760c22;Pearu Peterson;2004-03-06 08:40:29 +0000;Fixed intel compiler warnings, using -72 for compiling F77 sources

==

scipy_distutils/intelfcompiler.py
==================
d3f7411;Pearu Peterson;2004-03-06 08:24:48 +0000;Resolve relative paths in object_filenames: they caused lots of confusion when F90 module files ended up in wrong places

==

scipy_distutils/ccompiler.py
==================
5f73e9a;Pearu Peterson;2004-03-06 07:17:59 +0000;Added system_info classes for boost_python and agg2

==

scipy_distutils/system_info.py
==================
f1e36ac;Travis Oliphant;2004-03-05 15:57:10 +0000;Remove file from current directory if move failed (presumably because destination file already exists)

==

scipy_distutils/command/build_ext.py
==================
4121e33;Travis Oliphant;2004-03-05 03:40:39 +0000;Fixes to use msvc linker on windows

==

scipy_distutils/absoftfcompiler.py
scipy_distutils/ccompiler.py
scipy_distutils/command/build_ext.py
scipy_distutils/fcompiler.py
==================
144b7ab;Travis Oliphant;2004-03-04 23:48:08 +0000;Changed library include directory to append lib

==

scipy_distutils/absoftfcompiler.py
==================
1c5dfc8;Travis Oliphant;2004-03-04 23:04:48 +0000;Remove dummy cc_args from Fcompiler class so that include files get used for Fortan.

==

scipy_distutils/absoftfcompiler.py
scipy_distutils/ccompiler.py
scipy_distutils/fcompiler.py
==================
fa4054d;Travis Oliphant;2004-03-04 22:44:06 +0000;Fixed compiler so that Fortran files are built in order specified in sources list

==

scipy_distutils/ccompiler.py
==================
301b2cd;Travis Oliphant;2004-03-04 21:20:59 +0000;Typo in error message fixed.

==

scipy_distutils/command/build_ext.py
==================
a7e6a9e;Pearu Peterson;2004-03-04 20:14:43 +0000;Added module_dirs argument to Extension to specify the locations of F90 modules

==

scipy_distutils/command/build_ext.py
scipy_distutils/extension.py
==================
c2dc0fa;Pearu Peterson;2004-03-02 11:15:31 +0000;Using local core,log modules instead of scipy_distutils (that might not have be installed yet).

==

scipy_distutils/system_info.py
==================
11a9533;Pearu Peterson;2004-03-01 16:27:22 +0000;Redefine pydoc.help.__call__ method to support ppimport.

==

scipy_base/ppimport.py
==================
653e32f;Pearu Peterson;2004-02-26 19:03:37 +0000;cygwin library may have .dll.a extension

==

scipy_distutils/system_info.py
==================
fc61a4a;Pearu Peterson;2004-02-26 19:02:48 +0000;cygwin library may have .dll.a extension

==

scipy_distutils/system_info.py
==================
7c27e97;Pearu Peterson;2004-02-26 18:56:56 +0000;cygwin may have X11 installed

==

scipy_distutils/misc_util.py
scipy_distutils/system_info.py
==================
d2ce48c;Pearu Peterson;2004-02-26 17:45:44 +0000;include_packages overrides ignore_packages

==

scipy_distutils/misc_util.py
==================
99b67b5;Pearu Peterson;2004-02-26 17:17:19 +0000;Introduced get_subpackages, it should replace get_package_config and friends.

==

scipy_distutils/misc_util.py
==================
91cff85;Pearu Peterson;2004-02-26 10:22:51 +0000;Added flavor info to fortran compilation message.

==

scipy_distutils/ccompiler.py
scipy_distutils/command/build_clib.py
scipy_distutils/command/build_ext.py
scipy_distutils/fcompiler.py
==================
45c0b1e;Pearu Peterson;2004-02-26 07:07:42 +0000;Added missing line.

==

scipy_distutils/system_info.py
==================
ae77726;Pearu Peterson;2004-02-25 22:39:56 +0000;Warn when merging possibly incompatible libraries (e.g when Lib/xxx and Lib/yyy define libraries with the same name but different contents)

==

scipy_distutils/core.py
scipy_distutils/system_info.py
==================
f88e09e;Pearu Peterson;2004-02-23 21:46:56 +0000;Ignore lines starting with tab as it contains no info whether Fortran source code is in fix or free format.

==

scipy_distutils/fcompiler.py
==================
442f9ff;Pearu Peterson;2004-02-21 08:33:46 +0000;Restored mingw32_support with no contents so that older f2py2e versions will work with the resent scipy_distutils.

==

scipy_distutils/mingw32_support.py
==================
ba9f6c5;Pearu Peterson;2004-02-21 08:33:25 +0000;Restored mingw32_support with no contents so that older f2py2e versions will work with the resent scipy_distutils.

==

scipy_distutils/mingw32_support.py
==================
162bec7;Pearu Peterson;2004-02-20 21:47:15 +0000;Completed support for darwin native blas/lapack

==

scipy_distutils/absoftfcompiler.py
scipy_distutils/system_info.py
==================
b902464;Pearu Peterson;2004-02-20 10:04:21 +0000;Moved get_version to ccompiler.py.

==

scipy_distutils/ccompiler.py
scipy_distutils/fcompiler.py
==================
4793e4b;Pearu Peterson;2004-02-20 09:14:44 +0000;Fixed fcompiler search mechanism (it seems that implementation of compiler search hooks in standard distutils is incomplete).

==

scipy_distutils/ccompiler.py
scipy_distutils/fcompiler.py
scipy_distutils/misc_util.py
==================
a29f4f7;Pearu Peterson;2004-02-20 08:09:57 +0000;build_ext takes default fcompiler from config_fc (and build_clib takes it from build_ext).

==

scipy_distutils/command/build_ext.py
==================
a6f8c90;Pearu Peterson;2004-02-19 18:00:37 +0000;Introduced notfound_action argument to get_info().

==

scipy_distutils/system_info.py
==================
5bad7d2;Pearu Peterson;2004-02-19 17:25:54 +0000;Added C++ support to build_clib.

==

scipy_distutils/ccompiler.py
scipy_distutils/command/build_clib.py
scipy_distutils/command/build_ext.py
==================
5e29f4a;Pearu Peterson;2004-02-19 14:32:25 +0000;Fixed sdist: .svn contents is ignored and depends in library build_info is used.

==

scipy_distutils/command/build_clib.py
scipy_distutils/command/build_ext.py
==================
566f987;Pearu Peterson;2004-02-19 11:53:28 +0000;Continue even if get_atlas_version fails. Darwin users can still use atlas if env.var. ATLAS is defined.

==

scipy_distutils/system_info.py
==================
f8cab16;Pearu Peterson;2004-02-19 10:26:50 +0000;Changing environment in cygwin-win32 mix works. Just echo cannot be used to test it, now using python for that.

==

scipy_distutils/exec_command.py
scipy_distutils/log.py
==================
fad43fc;Pearu Peterson;2004-02-18 21:43:27 +0000;Create libraries if needed.

==

scipy_distutils/core.py
==================
29ff231;Pearu Peterson;2004-02-18 21:38:14 +0000;Extension.libraries may contain libraries with sources (such libraries must be given as (lib_name,build_info)).

==

scipy_distutils/core.py
scipy_distutils/system_info.py
==================
795a70f;Pearu Peterson;2004-02-18 17:59:01 +0000;Undone previous commit as it didn't work: either install scipy_core or set PYTHONPATH=.. in order to call 'python system_info.py'

==

scipy_distutils/system_info.py
==================
3dce5df;Pearu Peterson;2004-02-18 17:56:28 +0000;Fix executing system_info.py when scipy_distutils is not installed

==

scipy_distutils/system_info.py
==================
3c0c577;Pearu Peterson;2004-02-18 17:53:46 +0000;Fixed define macros with string values.

==

scipy_distutils/system_info.py
==================
849030c;Pearu Peterson;2004-02-18 17:51:35 +0000;Fixed issue with win32 paths in a string.

==

scipy_distutils/system_info.py
==================
d171284;Pearu Peterson;2004-02-18 17:38:27 +0000;Implemented {lapack,blas}_opt_info. It contains darwin support. But note that if vecLib provides only clapack/cblas then it won't work: linalg does not support cblas/clapack yet.

==

scipy_distutils/command/build_src.py
scipy_distutils/system_info.py
==================
95068c4;Pearu Peterson;2004-02-18 09:15:43 +0000;library sources list may now contain source building functions.

==

scipy_distutils/command/build_src.py
==================
9d206bd;Pearu Peterson;2004-02-18 08:51:39 +0000;Fixed linking flags for darwin

==

scipy_distutils/gnufcompiler.py
==================
1524654;Pearu Peterson;2004-02-18 08:31:20 +0000;Rolled gnu to the end of default compilers for darwin system.

==

scipy_distutils/fcompiler.py
==================
f8721a7;Pearu Peterson;2004-02-18 08:27:30 +0000;xlf is acctually F77 compiler. Fine tuned replacing crt->bundle in xlf.cfg.

==

scipy_distutils/ibmfcompiler.py
scipy_distutils/nagfcompiler.py
==================
e252edd;Pearu Peterson;2004-02-17 16:14:09 +0000;Fixed typo

==

scipy_distutils/gnufcompiler.py
==================
b94984a;Pearu Peterson;2004-02-17 15:24:52 +0000;darwin: using -framework Python when linking

==

scipy_distutils/gnufcompiler.py
==================
7c7526c;Pearu Peterson;2004-02-17 11:20:13 +0000;Forcing new_compiler provided by scipy_distutils (this should fix 'unable to load module' error when using --compiler=mingw32)

==

scipy_distutils/ccompiler.py
==================
a1b9fed;Pearu Peterson;2004-02-16 09:15:12 +0000;Setting ibm as default compiler for AIX

==

scipy_distutils/fcompiler.py
==================
71e73fe;Pearu Peterson;2004-02-16 08:51:41 +0000;Initial support for IBM XL Fortran Compiler

==

scipy_distutils/fcompiler.py
scipy_distutils/ibmfcompiler.py
==================
c22fc07;Pearu Peterson;2004-02-14 08:47:10 +0000;darwin linker_so support for nagfcompiler

==

scipy_distutils/nagfcompiler.py
==================
68569c2;Pearu Peterson;2004-02-13 23:25:43 +0000;Using new.instancemethod to override distutils internal methods - this is very robust that avoids using nasty import hacks.

==

scipy_distutils/__init__.py
scipy_distutils/ccompiler.py
scipy_distutils/command/build_clib.py
scipy_distutils/command/build_ext.py
scipy_distutils/exec_command.py
scipy_distutils/extension.py
scipy_distutils/fcompiler.py
scipy_distutils/mingw32ccompiler.py
scipy_distutils/unixccompiler.py
==================
3317087;Pearu Peterson;2004-02-13 18:11:56 +0000;Reduced scipy_distutils verbosity

==

scipy_distutils/command/build_clib.py
scipy_distutils/command/build_ext.py
scipy_distutils/command/build_src.py
scipy_distutils/exec_command.py
scipy_distutils/fcompiler.py
scipy_distutils/gnufcompiler.py
scipy_distutils/log.py
scipy_distutils/mingw32ccompiler.py
scipy_distutils/misc_util.py
scipy_distutils/unixccompiler.py
==================
c74322b;Pearu Peterson;2004-02-13 15:44:35 +0000;Disableing scipy_distutils hooks in case distutils has been imported before, otherwise I cannot predict what will happen..

==

scipy_distutils/__init__.py
==================
b4e5084;Pearu Peterson;2004-02-13 14:18:33 +0000;Using prefix where Numeric is installed first.

==

scipy_distutils/system_info.py
==================
ff9090a;Pearu Peterson;2004-02-13 12:42:38 +0000;Fixed 'invalid distribution option 'fortran_libraries'' error

==

scipy_distutils/core.py
==================
18518be;Pearu Peterson;2004-02-12 17:32:42 +0000;Extension may specify f2py_options.

==

scipy_distutils/command/build_src.py
==================
0fd21ac;Pearu Peterson;2004-02-12 15:55:59 +0000;Merging build_src branch with HEAD.

==
==================
ba685a6;Pearu Peterson;2004-02-11 20:04:39 +0000;Using ext.language to find correct linker. Fixed doubles libraries in linking command.

==

scipy_distutils/command/build_ext.py
scipy_distutils/gnufcompiler.py
scipy_distutils/laheyfcompiler.py
scipy_distutils/sunfcompiler.py
scipy_distutils/system_info.py
==================
d98f637;Pearu Peterson;2004-02-08 09:32:07 +0000;Single file libraries (like blas and lapack) can be specified with their corresponding environment variables (BLAS and LAPACK). Usage example: BLAS=/path/to/libfblas.a

==

scipy_distutils/system_info.py
==================
c396c0d;Pearu Peterson;2004-02-06 22:13:15 +0000;Forcing scipy_distutils.unixccompiler because on WinXP long argument list to ar (eg when building lapack) silently crashes python.

==

scipy_distutils/__init__.py
==================
0a3bd24;Pearu Peterson;2004-02-06 21:21:18 +0000;Fixed logic of the warning message.

==

scipy_distutils/mingw32ccompiler.py
==================
0d5d227;Pearu Peterson;2004-02-06 21:14:41 +0000;Disabled debug messages. On WinXP MSYS defines MSYSTEM instead of OSTYPE.

==

scipy_distutils/ccompiler.py
scipy_distutils/fcompiler.py
==================
18900e1;Pearu Peterson;2004-02-06 08:33:17 +0000;unixccompiler.py handles very long ar arguments lists

==

scipy_distutils/unixccompiler.py
==================
9e9dbee;Pearu Peterson;2004-02-06 08:14:04 +0000;Fixed bug in testing import library. Clean up. Scipy now builds and tests on win32 (tested so on Windows ME, on Windows 98 I get strange import errors)

==

scipy_distutils/mingw32ccompiler.py
==================
e404137;Pearu Peterson;2004-02-05 12:02:04 +0000;Scipy builds under cygwin with build_src branch.

==

scipy_base/setup_scipy_base.py
==================
6425c59;Pearu Peterson;2004-02-05 12:02:04 +0000;Scipy builds under cygwin with build_src branch.

==

scipy_distutils/ccompiler.py
scipy_distutils/command/build_ext.py
scipy_distutils/fcompiler.py
scipy_distutils/gnufcompiler.py
==================
aa6fd33;Pearu Peterson;2004-02-04 14:30:06 +0000;Got scipy_core to build on win32 with new build_src hooks

==

scipy_distutils/__init__.py
scipy_distutils/ccompiler.py
scipy_distutils/mingw32_support.py
scipy_distutils/mingw32ccompiler.py
scipy_distutils/misc_util.py
scipy_distutils/system_info.py
==================
0d9e6cd;Travis Oliphant;2004-02-03 21:14:45 +0000;Only backup part of PyArray_Type array to avoid occasional garbage-collection-related segfault on Python cleanup.

==

scipy_base/_compiled_base.c
==================
d82b5a6;Travis Oliphant;2004-02-02 17:30:02 +0000;Added hooks so that Numeric behavior can be changed from within scipy_base

==

scipy_base/_compiled_base.c
scipy_base/function_base.py
==================
fcfff55;Pearu Peterson;2004-02-02 16:19:51 +0000;Fixed test_nt missing arg.

==

scipy_distutils/exec_command.py
==================
78aa98e;Pearu Peterson;2004-02-02 16:17:06 +0000;Fixed bug that occurs on win32

==

scipy_distutils/system_info.py
==================
ec18152;Pearu Peterson;2004-02-02 15:59:41 +0000;Raise NumericNotFoundError when Numeric is not found.

==

scipy_base/setup_scipy_base.py
==================
8ad94b4;Pearu Peterson;2004-02-02 15:51:31 +0000;Merging changes (cygwin support) from build_src branch.

==
==================
da3e210;Pearu Peterson;2004-02-02 15:43:50 +0000;Using NOCOLOR env.var to workaround cygncurses bug under cygwin.

==

scipy_distutils/command/build_ext.py
scipy_distutils/misc_util.py
==================
23dc54f;Pearu Peterson;2004-02-02 15:43:50 +0000;Using NOCOLOR env.var to workaround cygncurses bug under cygwin.

==

setup.py
weave/setup_weave.py
==================
59c6f7c;Pearu Peterson;2004-02-02 11:11:26 +0000;Fixed use_tee=0 case for cygwin

==

scipy_distutils/exec_command.py
==================
b04d960;Pearu Peterson;2004-02-02 11:10:37 +0000;Workaround for missing __cvs_version__ which is available only in MAIN branch

==

scipy_distutils/scipy_distutils_version.py
==================
90f033b;Pearu Peterson;2004-02-02 09:35:49 +0000;Added numpy and numarray info classes

==

scipy_distutils/system_info.py
==================
c120b00;Pearu Peterson;2004-02-01 22:07:53 +0000;Created branch build_src in order to work on win32 port without affecting scipy HEAD development.

==

scipy_distutils/command/__init__.py
scipy_distutils/command/build.py
scipy_distutils/command/build_clib.py
scipy_distutils/command/build_ext.py
scipy_distutils/command/build_flib.py
scipy_distutils/command/build_py.py
scipy_distutils/command/cpuinfo.py
scipy_distutils/command/install.py
scipy_distutils/command/run_f2py.py
scipy_distutils/command/sdist.py
scipy_distutils/core.py
scipy_distutils/dist.py
scipy_distutils/misc_util.py
scipy_distutils/scipy_distutils_version.py
scipy_distutils/setup_scipy_distutils.py
==================
e901934;Pearu Peterson;2004-02-01 11:36:10 +0000;Issue with echo tests under cygwin with nt/win32 python is resolved.

==

scipy_distutils/exec_command.py
==================
37dcd32;nobody;2004-02-01 11:36:10 +0000;This commit was manufactured by cvs2svn to create branch 'build_src'.

==

MANIFEST.in
scipy_base/__init__.py
scipy_base/_compiled_base.c
scipy_base/fastumath_nounsigned.inc
scipy_base/fastumath_unsigned.inc
scipy_base/fastumathmodule.c
scipy_base/function_base.py
scipy_base/index_tricks.py
scipy_base/info_scipy_base.py
scipy_base/isnan.c
scipy_base/limits.py
scipy_base/machar.py
scipy_base/matrix_base.py
scipy_base/mconf_lite.h
scipy_base/mconf_lite_BE.h
scipy_base/mconf_lite_LE.h
scipy_base/pexec.py
scipy_base/polynomial.py
scipy_base/ppimport.py
scipy_base/scimath.py
scipy_base/scipy_base_version.py
scipy_base/setup_scipy_base.py
scipy_base/shape_base.py
scipy_base/tests/test_fastumath.py
scipy_base/tests/test_function_base.py
scipy_base/tests/test_index_tricks.py
scipy_base/tests/test_limits.py
scipy_base/tests/test_matrix_base.py
scipy_base/tests/test_shape_base.py
scipy_base/tests/test_type_check.py
scipy_base/type_check.py
scipy_test/__init__.py
scipy_test/auto_test.py
scipy_test/info_scipy_test.py
scipy_test/logging.py
scipy_test/scipy_test_version.py
scipy_test/setup_scipy_test.py
scipy_test/testing.py
setup.py
weave/LICENSE.txt
weave/MANIFEST.in
weave/README.txt
weave/__init__.py
weave/accelerate_tools.py
weave/ast_tools.py
weave/base_info.py
weave/base_spec.py
weave/blitz-20001213/blitz/MAT-NOTE.gz
weave/blitz-20001213/blitz/Makefile.am
weave/blitz-20001213/blitz/Makefile.in
weave/blitz-20001213/blitz/applics.h
weave/blitz-20001213/blitz/array-impl.h
weave/blitz-20001213/blitz/array-old.h
weave/blitz-20001213/blitz/array.h
weave/blitz-20001213/blitz/array/Makefile.am
weave/blitz-20001213/blitz/array/Makefile.in
weave/blitz-20001213/blitz/array/asexpr.h
weave/blitz-20001213/blitz/array/bops.cc
weave/blitz-20001213/blitz/array/cartesian.h
weave/blitz-20001213/blitz/array/cgsolve.h
weave/blitz-20001213/blitz/array/complex.cc
weave/blitz-20001213/blitz/array/convolve.cc
weave/blitz-20001213/blitz/array/convolve.h
weave/blitz-20001213/blitz/array/cycle.cc
weave/blitz-20001213/blitz/array/domain.h
weave/blitz-20001213/blitz/array/et.h
weave/blitz-20001213/blitz/array/eval.cc
weave/blitz-20001213/blitz/array/expr.h
weave/blitz-20001213/blitz/array/fastiter.h
weave/blitz-20001213/blitz/array/funcs.h
weave/blitz-20001213/blitz/array/functorExpr.h
weave/blitz-20001213/blitz/array/geometry.h
weave/blitz-20001213/blitz/array/indirect.h
weave/blitz-20001213/blitz/array/interlace.cc
weave/blitz-20001213/blitz/array/io.cc
weave/blitz-20001213/blitz/array/iter.h
weave/blitz-20001213/blitz/array/map.h
weave/blitz-20001213/blitz/array/methods.cc
weave/blitz-20001213/blitz/array/misc.cc
weave/blitz-20001213/blitz/array/multi.h
weave/blitz-20001213/blitz/array/newbops.cc
weave/blitz-20001213/blitz/array/newet-macros.h
weave/blitz-20001213/blitz/array/newet.h
weave/blitz-20001213/blitz/array/ops.cc
weave/blitz-20001213/blitz/array/ops.h
weave/blitz-20001213/blitz/array/reduce.cc
weave/blitz-20001213/blitz/array/reduce.h
weave/blitz-20001213/blitz/array/resize.cc
weave/blitz-20001213/blitz/array/shape.h
weave/blitz-20001213/blitz/array/slice.h
weave/blitz-20001213/blitz/array/slicing.cc
weave/blitz-20001213/blitz/array/stencil-et.h
weave/blitz-20001213/blitz/array/stencil.cc
weave/blitz-20001213/blitz/array/stencil.h
weave/blitz-20001213/blitz/array/stencilops.h
weave/blitz-20001213/blitz/array/stencils.cc
weave/blitz-20001213/blitz/array/stencils.h
weave/blitz-20001213/blitz/array/storage.h
weave/blitz-20001213/blitz/array/uops.cc
weave/blitz-20001213/blitz/array/where.h
weave/blitz-20001213/blitz/array/zip.h
weave/blitz-20001213/blitz/bench.cc
weave/blitz-20001213/blitz/bench.h
weave/blitz-20001213/blitz/benchext.cc
weave/blitz-20001213/blitz/benchext.h
weave/blitz-20001213/blitz/blitz.h
weave/blitz-20001213/blitz/bzdebug.h
weave/blitz-20001213/blitz/compiler.h
weave/blitz-20001213/blitz/config-ICL.h
weave/blitz-20001213/blitz/config-KCC.h
weave/blitz-20001213/blitz/config-SC4.0.h
weave/blitz-20001213/blitz/config-SGi.h
weave/blitz-20001213/blitz/config-g++2.7.2.h
weave/blitz-20001213/blitz/config-mwerks.h
weave/blitz-20001213/blitz/config-xlC.h
weave/blitz-20001213/blitz/config.h
weave/blitz-20001213/blitz/etbase.h
weave/blitz-20001213/blitz/extremum.h
weave/blitz-20001213/blitz/funcs.h
weave/blitz-20001213/blitz/generate/Makefile.am
weave/blitz-20001213/blitz/generate/Makefile.in
weave/blitz-20001213/blitz/generate/arroperands.h
weave/blitz-20001213/blitz/generate/arroptuple.h
weave/blitz-20001213/blitz/generate/bzfstream.h
weave/blitz-20001213/blitz/generate/genarrbops.cpp
weave/blitz-20001213/blitz/generate/genarruops.cpp
weave/blitz-20001213/blitz/generate/genmatbops.cpp
weave/blitz-20001213/blitz/generate/genmathfunc.cpp
weave/blitz-20001213/blitz/generate/genmatuops.cpp
weave/blitz-20001213/blitz/generate/genpromote.cpp
weave/blitz-20001213/blitz/generate/genvecbops.cpp
weave/blitz-20001213/blitz/generate/genvecuops.cpp
weave/blitz-20001213/blitz/generate/genvecwhere.cpp
weave/blitz-20001213/blitz/generate/operands.h
weave/blitz-20001213/blitz/generate/operands2.h
weave/blitz-20001213/blitz/generate/optuple.h
weave/blitz-20001213/blitz/generate/optuple2.h
weave/blitz-20001213/blitz/indexexpr.h
weave/blitz-20001213/blitz/limits-hack.h
weave/blitz-20001213/blitz/listinit.h
weave/blitz-20001213/blitz/matbops.h
weave/blitz-20001213/blitz/matdiag.h
weave/blitz-20001213/blitz/matexpr.h
weave/blitz-20001213/blitz/matgen.h
weave/blitz-20001213/blitz/mathf2.h
weave/blitz-20001213/blitz/mathfunc.h
weave/blitz-20001213/blitz/matltri.h
weave/blitz-20001213/blitz/matref.h
weave/blitz-20001213/blitz/matrix.cc
weave/blitz-20001213/blitz/matrix.h
weave/blitz-20001213/blitz/matsymm.h
weave/blitz-20001213/blitz/mattoep.h
weave/blitz-20001213/blitz/matuops.h
weave/blitz-20001213/blitz/matutri.h
weave/blitz-20001213/blitz/memblock.cc
weave/blitz-20001213/blitz/memblock.h
weave/blitz-20001213/blitz/meta/Makefile.am
weave/blitz-20001213/blitz/meta/Makefile.in
weave/blitz-20001213/blitz/meta/dot.h
weave/blitz-20001213/blitz/meta/matassign.h
weave/blitz-20001213/blitz/meta/matmat.h
weave/blitz-20001213/blitz/meta/matvec.h
weave/blitz-20001213/blitz/meta/metaprog.h
weave/blitz-20001213/blitz/meta/product.h
weave/blitz-20001213/blitz/meta/sum.h
weave/blitz-20001213/blitz/meta/vecassign.h
weave/blitz-20001213/blitz/minmax.h
weave/blitz-20001213/blitz/mstruct.h
weave/blitz-20001213/blitz/numinquire.h
weave/blitz-20001213/blitz/numtrait.h
weave/blitz-20001213/blitz/ops.h
weave/blitz-20001213/blitz/prettyprint.h
weave/blitz-20001213/blitz/promote-old.h
weave/blitz-20001213/blitz/promote.h
weave/blitz-20001213/blitz/rand-dunif.h
weave/blitz-20001213/blitz/rand-mt.h
weave/blitz-20001213/blitz/rand-normal.h
weave/blitz-20001213/blitz/rand-tt800.h
weave/blitz-20001213/blitz/rand-uniform.h
weave/blitz-20001213/blitz/random.h
weave/blitz-20001213/blitz/randref.h
weave/blitz-20001213/blitz/range.h
weave/blitz-20001213/blitz/reduce.h
weave/blitz-20001213/blitz/shapecheck.h
weave/blitz-20001213/blitz/tau.h
weave/blitz-20001213/blitz/timer.h
weave/blitz-20001213/blitz/tiny.h
weave/blitz-20001213/blitz/tinymat.h
weave/blitz-20001213/blitz/tinymatexpr.h
weave/blitz-20001213/blitz/tinymatio.cc
weave/blitz-20001213/blitz/tinyvec-et.h
weave/blitz-20001213/blitz/tinyvec.cc
weave/blitz-20001213/blitz/tinyvec.h
weave/blitz-20001213/blitz/tinyvecio.cc
weave/blitz-20001213/blitz/tinyveciter.h
weave/blitz-20001213/blitz/traversal.cc
weave/blitz-20001213/blitz/traversal.h
weave/blitz-20001213/blitz/tuning.h
weave/blitz-20001213/blitz/tvcross.h
weave/blitz-20001213/blitz/tvecglobs.h
weave/blitz-20001213/blitz/update.h
weave/blitz-20001213/blitz/vecaccum.cc
weave/blitz-20001213/blitz/vecall.cc
weave/blitz-20001213/blitz/vecany.cc
weave/blitz-20001213/blitz/vecbfn.cc
weave/blitz-20001213/blitz/vecbops.cc
weave/blitz-20001213/blitz/veccount.cc
weave/blitz-20001213/blitz/vecdelta.cc
weave/blitz-20001213/blitz/vecdot.cc
weave/blitz-20001213/blitz/vecexpr.h
weave/blitz-20001213/blitz/vecexprwrap.h
weave/blitz-20001213/blitz/vecglobs.cc
weave/blitz-20001213/blitz/vecglobs.h
weave/blitz-20001213/blitz/vecio.cc
weave/blitz-20001213/blitz/veciter.h
weave/blitz-20001213/blitz/vecmax.cc
weave/blitz-20001213/blitz/vecmin.cc
weave/blitz-20001213/blitz/vecnorm.cc
weave/blitz-20001213/blitz/vecnorm1.cc
weave/blitz-20001213/blitz/vecpick.cc
weave/blitz-20001213/blitz/vecpick.h
weave/blitz-20001213/blitz/vecpickio.cc
weave/blitz-20001213/blitz/vecpickiter.h
weave/blitz-20001213/blitz/vecsum.cc
weave/blitz-20001213/blitz/vector-et.h
weave/blitz-20001213/blitz/vector.cc
weave/blitz-20001213/blitz/vector.h
weave/blitz-20001213/blitz/vecuops.cc
weave/blitz-20001213/blitz/vecwhere.cc
weave/blitz-20001213/blitz/vecwhere.h
weave/blitz-20001213/blitz/wrap-climits.h
weave/blitz-20001213/blitz/zero.cc
weave/blitz-20001213/blitz/zero.h
weave/blitz_spec.py
weave/blitz_tools.py
weave/build_tools.py
weave/bytecodecompiler.py
weave/c_spec.py
weave/catalog.py
weave/common_info.py
weave/converters.py
weave/cpp_namespace_spec.py
weave/doc/tutorial.html
weave/dumb_shelve.py
weave/dumbdbm_patched.py
weave/examples/binary_search.py
weave/examples/cast_copy_transpose.py
weave/examples/dict_sort.py
weave/examples/fibonacci.py
weave/examples/functional.py
weave/examples/increment_example.py
weave/examples/md5_speed.py
weave/examples/object.py
weave/examples/print_example.py
weave/examples/py_none.py
weave/examples/ramp.c
weave/examples/ramp.py
weave/examples/ramp2.py
weave/examples/support_code_example.py
weave/examples/tuple_return.py
weave/examples/vq.py
weave/examples/wx_example.py
weave/examples/wx_speed.py
weave/ext_tools.py
weave/info_weave.py
weave/inline_tools.py
weave/platform_info.py
weave/scxx/README.txt
weave/scxx/dict.h
weave/scxx/list.h
weave/scxx/notes.txt
weave/scxx/number.h
weave/scxx/object.h
weave/scxx/scxx.h
weave/scxx/sequence.h
weave/scxx/str.h
weave/scxx/tuple.h
weave/scxx/weave_imp.cpp
weave/setup.py
weave/setup_weave.py
weave/size_check.py
weave/slice_handler.py
weave/standard_array_spec.py
weave/swigptr.py
weave/tests/scxx_timings.py
weave/tests/test_ast_tools.py
weave/tests/test_blitz_tools.py
weave/tests/test_build_tools.py
weave/tests/test_c_spec.py
weave/tests/test_catalog.py
weave/tests/test_ext_tools.py
weave/tests/test_inline_tools.py
weave/tests/test_scxx.py
weave/tests/test_scxx_dict.py
weave/tests/test_scxx_object.py
weave/tests/test_scxx_sequence.py
weave/tests/test_size_check.py
weave/tests/test_slice_handler.py
weave/tests/test_standard_array_spec.py
weave/tests/test_wx_spec.py
weave/tests/weave_test_utils.py
weave/vtk_spec.py
weave/weave_version.py
weave/wx_spec.py
==================
78db940;Pearu Peterson;2004-02-01 11:25:45 +0000;Oops, forget splitdrive argument..

==

scipy_distutils/exec_command.py
==================
f426559;Pearu Peterson;2004-02-01 11:24:08 +0000;Under nt don't use cygwin executables - is this the right thing do in general? At least cygwin echo command is not picked up when dos echo should be used.

==

scipy_distutils/exec_command.py
==================
f09957a;Pearu Peterson;2004-02-01 11:07:24 +0000;Under nt always use sys.executable as python

==

scipy_distutils/exec_command.py
==================
20bbaaf;Pearu Peterson;2004-02-01 10:56:43 +0000;Workaround for cygwin

==

scipy_distutils/exec_command.py
==================
ea56471;Pearu Peterson;2004-02-01 10:23:29 +0000;cygwin has /proc/cpuinfo, so linux_cpuinfo can be used

==

scipy_distutils/cpuinfo.py
==================
6ace548;Pearu Peterson;2004-01-31 22:26:26 +0000;Checking if Numeric is available, if not, do not try to build scipy_base.

==

scipy_base/setup_scipy_base.py
==================
271fc73;Pearu Peterson;2004-01-31 22:02:30 +0000;fcompiler classes

==

scipy_distutils/absoftfcompiler.py
scipy_distutils/compaqfcompiler.py
scipy_distutils/exec_command.py
scipy_distutils/fcompiler.py
scipy_distutils/gnufcompiler.py
scipy_distutils/hpuxfcompiler.py
scipy_distutils/intelfcompiler.py
scipy_distutils/laheyfcompiler.py
scipy_distutils/mipsfcompiler.py
scipy_distutils/pgfcompiler.py
scipy_distutils/sunfcompiler.py
scipy_distutils/vastfcompiler.py
==================
85ac6be;Pearu Peterson;2004-01-31 22:00:19 +0000;New commands: config_fc and build_src

==

scipy_distutils/command/build_src.py
scipy_distutils/command/config_compiler.py
==================
6abdb08;Pearu Peterson;2004-01-31 21:59:10 +0000;Typical package examples to test scipy_distutils

==

scipy_distutils/tests/f2py_ext/__init__.py
scipy_distutils/tests/f2py_ext/setup.py
scipy_distutils/tests/f2py_ext/src/fib1.f
scipy_distutils/tests/f2py_ext/src/fib2.pyf
scipy_distutils/tests/f2py_ext/tests/test_fib2.py
scipy_distutils/tests/f2py_f90_ext/__init__.py
scipy_distutils/tests/f2py_f90_ext/setup.py
scipy_distutils/tests/f2py_f90_ext/src/foo_free.f90
scipy_distutils/tests/f2py_f90_ext/tests/test_foo.py
scipy_distutils/tests/gen_ext/__init__.py
scipy_distutils/tests/gen_ext/setup.py
scipy_distutils/tests/gen_ext/tests/test_fib3.py
scipy_distutils/tests/swig_ext/__init__.py
scipy_distutils/tests/swig_ext/setup.py
scipy_distutils/tests/swig_ext/src/example.c
scipy_distutils/tests/swig_ext/src/example.i
scipy_distutils/tests/swig_ext/src/zoo.cc
scipy_distutils/tests/swig_ext/src/zoo.h
scipy_distutils/tests/swig_ext/src/zoo.i
scipy_distutils/tests/swig_ext/tests/test_example.py
scipy_distutils/tests/swig_ext/tests/test_example2.py
==================
623575f;Travis Oliphant;2004-01-30 19:15:28 +0000;Fix some functions to work with scalars.  Fix typo in gnufcompiler.

==

scipy_base/function_base.py
scipy_distutils/gnufcompiler.py
==================
f1d0b83;Pearu Peterson;2004-01-29 16:29:23 +0000;Using depends argument from Python 2.3 and backporting it down to Python 2.1. Minor other enhancements.

==

scipy_distutils/extension.py
==================
91705f1;Pearu Peterson;2004-01-29 16:22:58 +0000;Added debug print out when sys.path is modified

==

scipy_test/testing.py
==================
4653332;Pearu Peterson;2004-01-28 12:15:30 +0000;Added lapack_atlas library support (typical in Debian system)

==

scipy_distutils/system_info.py
==================
f564e1c;Travis Vaught;2004-01-19 22:34:49 +0000;disabled -march flag for win32 -- was breaking compile of specfun.f (internal compiler error)

==

scipy_distutils/gnufcompiler.py
==================
e27b6ff;Pearu Peterson;2004-01-19 14:05:05 +0000;Fixed gnu version_pattern (final)

==

scipy_distutils/gnufcompiler.py
==================
23f3f74;Pearu Peterson;2004-01-19 13:59:23 +0000;Fixed gnu version_pattern (2nd try)

==

scipy_distutils/gnufcompiler.py
==================
a2ebf21;Pearu Peterson;2004-01-19 13:49:26 +0000;Fixed gnu version_pattern

==

scipy_distutils/gnufcompiler.py
==================
ebeb16d;Pearu Peterson;2004-01-19 13:42:53 +0000;Added lahey,pg compilers, renamed forte to sun.

==

scipy_distutils/fcompiler.py
scipy_distutils/fortefcompiler.py
scipy_distutils/intelfcompiler.py
scipy_distutils/laheyfcompiler.py
scipy_distutils/pgfcompiler.py
scipy_distutils/sunfcompiler.py
==================
c879ef7;Pearu Peterson;2004-01-19 09:00:01 +0000;Refactoring build_flib.py (to follow and use standard distutils conventions and tools). It's work in-progress. Sending the output of 'python fcompiler.py --verbose' would be a great help if you have other than intel and gnu compilers installed.

==

scipy_distutils/absoftfcompiler.py
scipy_distutils/compaqfcompiler.py
scipy_distutils/cpuinfo.py
scipy_distutils/fcompiler.py
scipy_distutils/fortefcompiler.py
scipy_distutils/gnufcompiler.py
scipy_distutils/hpuxfcompiler.py
scipy_distutils/intelfcompiler.py
scipy_distutils/mipsfcompiler.py
scipy_distutils/nagfcompiler.py
scipy_distutils/vastfcompiler.py
==================
60612a6;Pearu Peterson;2004-01-19 08:54:48 +0000;Fixed and added test for exec_command argument execute_in.

==

scipy_distutils/exec_command.py
==================
f531e1c;Pearu Peterson;2004-01-16 15:00:48 +0000;Adding exec_command - a highly portable getstatusoutput function (e.g. return status is correct even on win32)

==

scipy_distutils/exec_command.py
==================
f5b889b;Pearu Peterson;2004-01-12 13:43:49 +0000;Applied Brett's patch to fix phantom g (g++) when using mingw

==

scipy_distutils/mingw32_support.py
==================
594e5eb;Pearu Peterson;2004-01-04 10:54:17 +0000;Added weave to scipy_core

==

setup.py
weave/weave_version.py
==================
449e90c;Pearu Peterson;2003-12-20 13:41:18 +0000;Disabled mmx,sse under win32 to see if they caused internal compiler error (in emit_swap_insn at reg-stack.c:990) when compiling specfun.f

==

scipy_distutils/command/build_flib.py
==================
13ec9dd;Pearu Peterson;2003-12-16 15:16:09 +0000;Impl. assert_array_less.

==

scipy_test/testing.py
==================
7827303;Pearu Peterson;2003-12-15 21:20:41 +0000;Testing backport to Python 2.1 - it used to skip tests from base classes of test classes

==

scipy_test/testing.py
==================
3e0ec13;Pearu Peterson;2003-12-14 11:10:05 +0000;Another blindish attempt to fix failures in build scoreboard for win32.

==

scipy_distutils/command/build_clib.py
==================
3aad5a2;Pearu Peterson;2003-12-14 10:36:51 +0000;Added missing version attribute to intel_itanium_fortran_compiler

==

scipy_distutils/command/build_flib.py
==================
714a0aa;Pearu Peterson;2003-12-13 22:09:40 +0000;Fix (scoreboard) building on win32

==

scipy_distutils/command/build_clib.py
==================
0dd3d23;Pearu Peterson;2003-12-13 21:47:36 +0000;Intel Fortran Compiler 8.x executable is ifort

==

scipy_distutils/command/build_flib.py
==================
fb700bf;Pearu Peterson;2003-12-13 20:12:40 +0000;ifc-8 requires -nofor_main. Added athlon-mp opt. flags. Enabled sse again.

==

scipy_distutils/command/build_flib.py
scipy_distutils/command/cpuinfo.py
==================
44ea2a2;Pearu Peterson;2003-12-13 18:12:29 +0000;Added atlas_threads_info.

==

scipy_distutils/system_info.py
==================
8ae8ab2;Pearu Peterson;2003-12-13 14:52:16 +0000;Updated scipy complex divide to follow Matlab's convention: 0j/0 is nan, 1j/0 is nan+infj, 1/0 is inf. This fixes linalg.eig for various combinations of singular matrix arguments.

==

scipy_base/fastumath_nounsigned.inc
scipy_base/fastumath_unsigned.inc
==================
7f5e051;Pearu Peterson;2003-12-13 13:42:10 +0000;Using faster implementation of Numeric.asarray.

==

scipy_base/function_base.py
scipy_base/index_tricks.py
scipy_base/matrix_base.py
scipy_base/polynomial.py
scipy_base/scimath.py
scipy_base/shape_base.py
scipy_base/type_check.py
==================
2f11b19;Travis Oliphant;2003-12-10 16:19:02 +0000;Updated scipy complex divide so that 1j/0.0 returns infj instead of nan+infj

==

scipy_base/fastumath_nounsigned.inc
scipy_base/fastumath_unsigned.inc
==================
81d8c69;Pearu Peterson;2003-12-04 11:38:58 +0000;Workaround for Python 2.1 .pyc file generator bug (float constants are truncated, e.g. 1.0066800127055 becomes 1.00668001271 in a .pyc file)

==

scipy_test/testing.py
==================
15a8c04;Pearu Peterson;2003-12-04 11:08:48 +0000;Show parts of arrays if assert_array_*equal fails

==

scipy_test/testing.py
==================
34a3c3c;Pearu Peterson;2003-12-04 09:26:16 +0000;Backport mingw support to older distutils link command that does not have target_lang argument.

==

scipy_distutils/mingw32_support.py
==================
0c183d5;Pearu Peterson;2003-11-27 09:03:16 +0000;When running tests locally, use the script instead of installed test_yyy module.

==

scipy_test/testing.py
==================
c4f81c2;Travis Oliphant;2003-11-25 23:39:51 +0000;Fixed problems in arraymap having to do with zero-dimensional support.  Fixed corresponding problems with distributions.

==

scipy_base/_compiled_base.c
scipy_base/function_base.py
==================
9a23b0f;Pearu Peterson;2003-11-25 08:28:47 +0000;Fixing Py<=2.1 get_platform for Power Mac

==

scipy_distutils/misc_util.py
==================
aba9774;Pearu Peterson;2003-11-24 23:27:06 +0000;This fixes curious scipy_distutils.core import error.

==

scipy_base/setup_scipy_base.py
setup.py
==================
d190674;Pearu Peterson;2003-11-24 22:50:40 +0000;Now one can run 'python /full/path/to/scipy_core/setup.py'

==

setup.py
==================
6a8cbdb;Pearu Peterson;2003-11-24 20:28:20 +0000;Setting the name of merged config dicts.

==

scipy_distutils/misc_util.py
==================
965c4ba;Pearu Peterson;2003-11-24 12:35:18 +0000;Fixed bug when base is '/'

==

scipy_distutils/command/sdist.py
==================
f00675a;Pearu Peterson;2003-11-24 12:13:17 +0000;Backport to Py<2.3 (__file__ is not defined when __name__ is __main__)

==

scipy_distutils/misc_util.py
==================
1aae76e;Pearu Peterson;2003-11-24 09:49:35 +0000;DOS lineendings

==
==================
e420835;Pearu Peterson;2003-11-20 09:38:47 +0000;Using sse only when available and not sse2

==

scipy_distutils/command/build_flib.py
==================
117a669;Travis Oliphant;2003-11-19 11:52:04 +0000;Fixed missing function in function_base.py.  Added entropy calculations to probability distributions.  Fixed error in F distribution ppf function.

==

scipy_base/function_base.py
==================
197ff22;Pearu Peterson;2003-11-15 22:14:34 +0000;Fixed ppimport bug

==

scipy_base/ppimport.py
scipy_distutils/command/build_flib.py
==================
6957b19;Travis Oliphant;2003-10-30 22:40:17 +0000;Added freeze method to distributions which returns a frozen class that has fixed shape, location, and scale parameters.  No checking done yet, so errors on construction are not detected until first call of frozen methods.

==

scipy_base/function_base.py
==================
99e8db0;Pearu Peterson;2003-10-29 19:57:25 +0000;It turns out that -arch is available only under Apple

==

scipy_distutils/command/build_flib.py
==================
201ceec;Pearu Peterson;2003-10-29 08:17:57 +0000;-arch is not available gcc-3.4 option under darwin

==

scipy_distutils/command/build_flib.py
==================
24b22db;Pearu Peterson;2003-10-28 15:42:11 +0000;Fixed the case when path to lib.exe contains spaces (thanks to Berthold Hollmann)

==

scipy_distutils/command/build_flib.py
==================
11cffa5;Pearu Peterson;2003-10-28 08:46:53 +0000;Fixed detecting djbfft on freebsd. Changed system_info.verbose to verbosity and added verbosity=2 output.

==

scipy_distutils/system_info.py
==================
b03d812;Pearu Peterson;2003-10-28 06:44:37 +0000;Fixed typo

==

scipy_distutils/system_info.py
==================
a4a7063;Pearu Peterson;2003-10-27 16:53:33 +0000;Fixed bug.

==

scipy_distutils/command/run_f2py.py
==================
772b74e;Pearu Peterson;2003-10-27 12:03:38 +0000;Introduced SourceFilter. Clean ups and minor bug fixes

==

scipy_base/setup_scipy_base.py
scipy_distutils/extension.py
scipy_distutils/misc_util.py
scipy_distutils/setup_scipy_distutils.py
scipy_test/setup_scipy_test.py
setup.py
==================
4d1b593;Pearu Peterson;2003-10-25 21:51:46 +0000;New import hooks are applied to weave. Clean up.

==

weave/__init__.py
weave/ast_tools.py
weave/blitz_tools.py
weave/build_tools.py
weave/c_spec.py
weave/catalog.py
weave/ext_tools.py
weave/info_weave.py
weave/inline_tools.py
weave/pre___init__.py
weave/setup_weave.py
weave/size_check.py
weave/slice_handler.py
weave/standard_array_spec.py
weave/tests/test_ast_tools.py
weave/tests/test_blitz_tools.py
weave/tests/test_build_tools.py
weave/tests/test_c_spec.py
weave/tests/test_catalog.py
weave/tests/test_ext_tools.py
weave/tests/test_inline_tools.py
weave/tests/test_scxx.py
weave/tests/test_scxx_dict.py
weave/tests/test_scxx_object.py
weave/tests/test_scxx_sequence.py
weave/tests/test_size_check.py
weave/tests/test_slice_handler.py
weave/tests/test_standard_array_spec.py
weave/tests/test_wx_spec.py
weave/vtk_spec.py
weave/wx_spec.py
==================
95a197a;Pearu Peterson;2003-10-25 21:28:12 +0000;Introduced restor_path,set_local_path functions.

==

scipy_test/testing.py
==================
a58d97f;Pearu Peterson;2003-10-25 17:21:47 +0000;Doc updates.

==

scipy_test/testing.py
==================
8942504;Pearu Peterson;2003-10-25 15:14:27 +0000;Avoid looking for tests from test_* modules

==

scipy_test/testing.py
==================
f2d6d44;Pearu Peterson;2003-10-25 13:53:44 +0000;Made code explicit.

==

scipy_base/setup_scipy_base.py
==================
8574b15;Pearu Peterson;2003-10-25 13:51:45 +0000;Dropped test_suite_list feature, simplified code. Test methods are looked also from base classes. Fixed multiple inclusion of the same test file (e.g. this happend for stats.stats and stats.__init__ modules).

==

scipy_test/testing.py
==================
0e751aa;Pearu Peterson;2003-10-25 08:43:58 +0000;Fixed the case when 3rd party module is imported from a python module or script

==

scipy_base/ppimport.py
==================
ddda876;Pearu Peterson;2003-10-24 10:38:27 +0000;scipy_base clean up.

==

scipy_base/__init__.py
scipy_base/function_base.py
scipy_base/index_tricks.py
scipy_base/limits.py
scipy_base/matrix_base.py
scipy_base/shape_base.py
scipy_base/tests/test_fastumath.py
scipy_base/tests/test_function_base.py
scipy_base/tests/test_index_tricks.py
scipy_base/tests/test_limits.py
scipy_base/tests/test_matrix_base.py
scipy_base/tests/test_shape_base.py
scipy_base/tests/test_type_check.py
scipy_base/type_check.py
scipy_test/testing.py
==================
3ea118c;Pearu Peterson;2003-10-24 09:54:32 +0000;Introduced parent_path argument to get_path; when not None and the beggining of path matches with parent_path, then return only remaining of the path.

==

scipy_distutils/command/build_clib.py
scipy_distutils/misc_util.py
==================
7122588;Pearu Peterson;2003-10-23 21:01:00 +0000;Only TestCase instances with test_ suffix are put to test suite list.

==

scipy_test/testing.py
==================
4ee67df;Travis Oliphant;2003-10-23 18:22:40 +0000;Fixed vectorize for scalar inputs. Added new test.

==

scipy_base/_compiled_base.c
scipy_base/tests/test_function_base.py
==================
ef5e7ba;Pearu Peterson;2003-10-23 08:57:55 +0000;Removed .build_py_ignore files: the feature didn't work properly, e.g. building binaries failed. Added sample_site.cfg to data_files. Emptied MANIFEST.in (later we can consider removing it).

==

MANIFEST.in
scipy_base/.build_py_ignore
scipy_distutils/.build_py_ignore
scipy_distutils/setup_scipy_distutils.py
scipy_test/.build_py_ignore
==================
c550d13;Pearu Peterson;2003-10-23 08:26:03 +0000;Cont. SourceGenerator: docs, using it scipy_base

==

scipy_base/setup_scipy_base.py
scipy_distutils/command/build_ext.py
scipy_distutils/command/run_f2py.py
scipy_distutils/extension.py
scipy_distutils/misc_util.py
==================
8266c60;Pearu Peterson;2003-10-22 22:17:49 +0000;Impl. SourceGenerator. Its instances can be used in Extension sources list argument and when in run_f2py,.. then the corresponding source will be generated. See Lib/xxx/setup_xxx.py for example.

==

scipy_distutils/command/run_f2py.py
scipy_distutils/extension.py
scipy_distutils/misc_util.py
==================
b681f71;Pearu Peterson;2003-10-22 18:31:44 +0000;Introduced info_..py files for scipy_core modules

==

scipy_base/__init__.py
scipy_base/info_scipy_base.py
scipy_distutils/info_scipy_distutils.py
scipy_test/info_scipy_test.py
==================
0bdb7a7;Pearu Peterson;2003-10-22 16:20:42 +0000;Impl. ScipyTest.run method. Calling test(..) will resolve all ppimported modules. All ppimported modules get test() function as a reference to ScipyTest(..).test()

==

scipy_base/ppimport.py
scipy_test/testing.py
==================
682dedb;Pearu Peterson;2003-10-21 15:40:16 +0000;Impl. ScipyTest class that will facilitate testing dropped-into-Lib Scipy modules as well as supports tests for extension modules. Cont. writing DEVELOPERS.txt.

==

scipy_test/testing.py
==================
969bcf3;Pearu Peterson;2003-10-21 09:50:21 +0000;Incr. micro version number.

==

scipy_test/scipy_test_version.py
==================
6e3b213;Pearu Peterson;2003-10-21 07:32:45 +0000;Using USE_MCONF_LITE_BE in mconf_lite.h to switch to big-endian. This way we conserve the number of files and avoid creating temporary files in source directory.

==

scipy_base/mconf_lite.h
scipy_base/scipy_base_version.py
scipy_base/setup_scipy_base.py
==================
e6e1212;Pearu Peterson;2003-10-21 07:29:33 +0000;Removed obsolete update_version(). Incr. micro version number.

==

scipy_distutils/misc_util.py
scipy_distutils/scipy_distutils_version.py
scipy_distutils/setup.py
==================
78c6e1a;Pearu Peterson;2003-10-21 06:18:20 +0000;Added setup_*.py files to MANIFEST.in. It is possible that they were missing due to .build_py_ignore feature, so, we might consider dropping the feature.

==

MANIFEST.in
==================
671a3f7;Travis Oliphant;2003-10-18 02:15:42 +0000;Fix to close the shelve catalog to guarantee changes are written to disk.  Fernando Perez fix for random uncessary recompilation with weave.

==

weave/catalog.py
==================
a016c39;Travis Oliphant;2003-10-17 01:09:48 +0000;Added reading of matlab(tm) version 5 file support.

==

scipy_base/shape_base.py
==================
16d3eca;Pearu Peterson;2003-10-10 13:35:28 +0000;Removed migrate function as obsolete. Though, the idea of having migrate is still good, just its currect implementation sucks. See wxPython_thread module in gui_thread for how it should be implemented. So, there's hope that migrate will return in furure.

==

scipy_base/__init__.py
scipy_base/pexec.py
==================
2291031;Pearu Peterson;2003-10-10 01:10:38 +0000;Fixed typo.

==

scipy_base/pexec.py
==================
8efc8d0;Pearu Peterson;2003-10-09 08:34:44 +0000;Implemented ParallelExec used, for example, by gui_thread/chaco_wxplt.py. But useful also in other applications to execute functions in background threads.

==

scipy_base/__init__.py
scipy_base/pexec.py
==================
f0e8ecc;Pearu Peterson;2003-10-03 22:02:26 +0000;Removed /Qvc6 flag for VC6. What is self.version for VC7?

==

scipy_distutils/command/build_flib.py
==================
bd334d0;Pearu Peterson;2003-10-03 21:05:03 +0000;First implementation of win32_cpuinfo (thanks to Jose Rui). If you have a win32 machine, run (python cpuinfo.py) to see if all information is correct.

==

scipy_distutils/command/cpuinfo.py
==================
381f65c;Eric Jones;2003-10-02 04:27:15 +0000;re-instated the forcing of compilation using mingw32 (gcc) on 'nt' based machines.  I do have a question whether it will work with pre-2.2 installations as the interface for determining the compiler seems to have changed from a dictionary to a tuple at some point.  The tuple version works for 2.3 which I am currently testing on.

==

scipy_distutils/mingw32_support.py
==================
56a1b11;Pearu Peterson;2003-10-01 18:42:36 +0000;Introduced machar - Machine Arithmetics - module. It resolves the inaccuracy problem in limits, in addition, machar computes many other constants of floating point arithmetic system. machar_double and machar_float instances are all you need to import from machar.

==

scipy_base/__init__.py
scipy_base/limits.py
scipy_base/machar.py
==================
43e1b88;Pearu Peterson;2003-09-30 06:55:28 +0000;win32:Intel,Compaq options update.

==

scipy_distutils/command/build_flib.py
==================
3e03dfe;Pearu Peterson;2003-09-29 07:51:25 +0000;Working on non-gcc compiler (Intel,Compaq) support (with Jose Rui Faustino de Sousa)

==

scipy_distutils/command/build_flib.py
scipy_distutils/mingw32_support.py
==================
7e5677d;Travis Oliphant;2003-09-27 17:03:11 +0000;Changed from nan_to_num to raising error if all matrix entries are not finite numbers.  Changed behavior of all and any to work over raveled arrays (Numeric's alltrue and sometrue still give old behavior)

==

scipy_base/function_base.py
scipy_base/tests/test_function_base.py
==================
d1138ad;Travis Oliphant;2003-09-25 23:28:55 +0000;Orthogonal polynomial fixes and nan_to_num fixes for hanging linalg routines when nans in matrix

==

scipy_base/polynomial.py
==================
b8d97bd;Pearu Peterson;2003-09-25 20:15:15 +0000;Use fastumath functions from scipy_base instead of Numeric

==

scipy_base/function_base.py
==================
df7db28;Pearu Peterson;2003-09-25 18:27:10 +0000;Fixed long lasting segfault bug, say, in amax([1,2j]). Added preliminary tests for fastumath module.

==

scipy_base/fastumath_unsigned.inc
scipy_base/tests/test_fastumath.py
==================
04f8b86;Pearu Peterson;2003-09-24 10:52:56 +0000;Fixed spelling type

==

scipy_base/ppimport.py
==================
f1e33c3;Pearu Peterson;2003-09-24 10:49:41 +0000;Fixes the case (as occured during weave tests) when postponed module is imported between defining and using a postponed attribute.

==

scipy_base/ppimport.py
==================
ea8b5c7;Pearu Peterson;2003-09-24 10:38:27 +0000;Changed assert to show why check_add_function_ordered test fails (using Python 2.3)

==

weave/tests/test_catalog.py
==================
362e645;Travis Oliphant;2003-09-23 23:50:36 +0000;Fixed some warnings from wxPython about not getting integers.

==

scipy_base/index_tricks.py
==================
a081902;Travis Oliphant;2003-09-23 18:24:17 +0000;Added bmat (build matrix) constructor for easy creation of block matrices.   Added better docs for special.errprint.  Changed default of errprint to 0

==

scipy_base/index_tricks.py
scipy_base/matrix_base.py
==================
2634919;Travis Oliphant;2003-09-22 19:25:46 +0000;Added test functions for extract and insert.

==

scipy_base/tests/test_function_base.py
==================
529150a;Travis Oliphant;2003-09-22 18:30:12 +0000;Changed order of argument in scipy_base.extract.  Added 1-argument version of where to scipy_base.  The 1-argument version only works on 1-d arrays currently.

==

scipy_base/function_base.py
==================
8a8731b;Pearu Peterson;2003-09-20 19:48:59 +0000;Undoing general_function move (Travis won this race;-)

==

scipy_base/__init__.py
scipy_base/arraymapmodule.c
scipy_base/setup_scipy_base.py
==================
25c9847;Travis Oliphant;2003-09-20 19:35:50 +0000;Removed redundant general_function and tests

==

scipy_base/general_function.py
scipy_base/tests/test_general_function.py
==================
ba4e597;Travis Oliphant;2003-09-20 19:30:27 +0000;Moved arraymap from cephes to scipy_base.  Renamed from general_function to vectorize

==

scipy_base/__init__.py
scipy_base/_compiled_base.c
scipy_base/function_base.py
scipy_base/tests/test_function_base.py
==================
100d58f;Pearu Peterson;2003-09-20 19:20:57 +0000;Moving general_function from scipy.special to scipy_base

==

scipy_base/__init__.py
scipy_base/arraymapmodule.c
scipy_base/general_function.py
scipy_base/setup_scipy_base.py
scipy_base/tests/test_general_function.py
==================
19d33f7;Pearu Peterson;2003-09-20 19:09:54 +0000;scipy_test imports scipy_base from installation tree, so reloading scipy_base is required to get scipy_base from the build tree

==

scipy_base/tests/test_function_base.py
scipy_base/tests/test_index_tricks.py
scipy_base/tests/test_limits.py
scipy_base/tests/test_matrix_base.py
scipy_base/tests/test_shape_base.py
scipy_base/tests/test_type_check.py
==================
0c09351;Travis Oliphant;2003-09-20 18:20:56 +0000;Moved futil from scipy_base to stats to keep fortran code out of scipy_base.

==

scipy_base/function_base.py
scipy_base/futil.f
scipy_base/setup_scipy_base.py
==================
c4f7a4f;Travis Oliphant;2003-09-20 02:21:54 +0000;Added unit test for find_repeats

==

scipy_base/tests/test_function_base.py
==================
c16960e;Travis Oliphant;2003-09-19 21:08:51 +0000;Added fortran utility functions to scipy_base as part of f2py demo.

==

scipy_base/function_base.py
scipy_base/futil.f
scipy_base/polynomial.py
scipy_base/setup_scipy_base.py
==================
c9016bb;Pearu Peterson;2003-09-19 13:14:00 +0000;Showing system commands with log.info

==

scipy_distutils/command/build_flib.py
==================
3d0d299;Pearu Peterson;2003-09-19 12:30:38 +0000;Using distutils.log for displaying messages. This feature (from Python 2.3) works also with earlier versions of Python.

==

scipy_distutils/command/build_clib.py
scipy_distutils/command/build_ext.py
scipy_distutils/command/build_flib.py
scipy_distutils/command/build_py.py
scipy_distutils/command/install.py
scipy_distutils/command/run_f2py.py
scipy_distutils/command/sdist.py
scipy_distutils/log.py
==================
a9cd02e;Pearu Peterson;2003-09-19 08:59:17 +0000;Use environment when showing compilers with 'python build_flib.py'

==

scipy_distutils/command/build_flib.py
==================
71a8689;Pearu Peterson;2003-09-19 08:50:55 +0000;Fixed version regex string for g77-3.x compilers

==

scipy_distutils/command/build_flib.py
==================
c11bd2d;Travis Oliphant;2003-09-19 07:26:32 +0000;Fixed buglets found during presentation testing.  General_function now works with zeros((0,)) inputs.  Fixed rv_discrete when arbitrary samples given

==

scipy_base/polynomial.py
==================
2fc0d0e;martin;2003-09-17 16:39:59 +0000;Fixed up for Python 2.3 distutils

==

scipy_distutils/mingw32_support.py
weave/platform_info.py
==================
21ad48a;Eric Jones;2003-08-23 07:50:41 +0000;fixed indentation error to move object_filenames into the mingwcompiler class

==

scipy_distutils/mingw32_support.py
==================
dac7a85;Eric Jones;2003-08-23 07:46:45 +0000;overrode object_filnames method in mingw compiler.  The standard one in python2.3 cygwincompiler doesn't handle the case when a source file is specified with an absolute path correctly on windows.  The leading drive letter is now stripped off.
This may be also be a problem on unix.  It will definitely be a problem again when we try to get msvccompiler working.

==

scipy_distutils/mingw32_support.py
==================
9258218;Eric Jones;2003-08-23 06:57:53 +0000;- add python2.3 support   - set self.compiler_cxx to g++ in __init__.  This should really be done through the set_exectuables method,     but it would break pre 2.3 support because compiler_cxx is not an accepted option.   - added target_lang argument to link() method.

==

scipy_distutils/mingw32_support.py
weave/build_tools.py
==================
9d8887d;Pearu Peterson;2003-08-20 20:46:54 +0000;Replaced execfile statements with simplified import statements in order to avoid problems with Windows installer tools.

==

weave/__init__.py
==================
9da41c6;Pearu Peterson;2003-08-08 20:10:56 +0000;Applied John A. Turner patch for OSF1

==

scipy_distutils/command/build_flib.py
==================
34777aa;Pearu Peterson;2003-08-07 09:56:15 +0000;Introduced MANIFEST.in that includes *.inc files to sdist

==

MANIFEST.in
==================
9ec9ed3;Pearu Peterson;2003-08-06 23:19:33 +0000;Impl. support for Portland Group Fortran compilers

==

scipy_distutils/command/build_flib.py
==================
888e29f;Pearu Peterson;2003-08-05 19:11:02 +0000;Intel Fortran compiler -module option appears starting at version 7.0

==

scipy_distutils/command/build_flib.py
==================
5708f46;Travis Oliphant;2003-08-04 23:57:44 +0000;Fixed initialization error of divide_safe in fastumath.

==

scipy_base/fastumath_nounsigned.inc
scipy_base/fastumath_unsigned.inc
==================
295afb0;Travis Oliphant;2003-06-26 21:36:08 +0000;fixed bug causing ufunction remainder to not work.

==

scipy_base/fastumath_unsigned.inc
==================
11d26a6;Travis Oliphant;2003-06-13 23:34:57 +0000;Changed default of eye(N) to double

==

scipy_base/matrix_base.py
==================
c47e9b2;Pearu Peterson;2003-05-25 11:12:02 +0000;ppimport shows more useful messages when importing modules fail for whatever reason. Using exc_info instead of depreciated exc_value and to save traceback.

==

scipy_base/ppimport.py
==================
4c398c0;Pearu Peterson;2003-05-24 21:03:35 +0000;Being more verbose in assert failure

==

scipy_base/ppimport.py
==================
ed92aab;Eric Jones;2003-05-21 02:05:52 +0000;updated mingw support to handle gcc 3.x for building C++ files.

==

scipy_distutils/mingw32_support.py
==================
451ff2b;Pearu Peterson;2003-05-18 12:07:03 +0000;Updated compaq compiler for OSF1/Tru64 and Linux

==

scipy_distutils/command/build_flib.py
==================
70637f5;Eric Jones;2003-05-12 19:55:13 +0000;fixed a naming error for add_extra_compile_arg method.

==

weave/base_info.py
==================
680ac12;Pearu Peterson;2003-04-23 20:58:49 +0000;Added _f2py suffix to Fortran library names to avoid name conflicts.

==

scipy_distutils/command/build_ext.py
scipy_distutils/command/run_f2py.py
==================
338676a;Pearu Peterson;2003-04-23 19:10:31 +0000;Catching also ImportError that can happen when e.g. ppimported cluster module is not installed but getmodule tries to access its __dict__

==

weave/catalog.py
==================
d998fff;Eric Jones;2003-04-20 08:09:14 +0000;added a new converter that can handle the SWIG pointer conversions based on namespaces in C++.  This is used in the freetype and agg wrappers.

==

weave/cpp_namespace_spec.py
weave/scxx/dict.h
==================
415e02a;Pearu Peterson;2003-04-19 09:38:49 +0000;Adding Lahey compiler support (thanks to Fernando Perez and Pierre Schnizer)

==

scipy_distutils/command/build_flib.py
==================
184fbde;Eric Jones;2003-04-10 23:52:21 +0000;*** empty log message ***

==

weave/wx_spec.py
==================
fb2b56c;Eric Jones;2003-03-29 06:39:37 +0000;fixed C++ builds on windows

==

scipy_distutils/command/build_ext.py
==================
ef17bfa;Eric Jones;2003-03-29 06:24:37 +0000;setup_extension now uses scipy_distutils instead of distutil extensions so that C++ files are linked correctly.  If fails over to distutils if scipy_distutils isn't present in hopes that it will do the right thing.

==

weave/build_tools.py
==================
786056b;Eric Jones;2003-03-29 04:30:26 +0000;added check for the existence of a couple of extension function method names that are present in scipy_distutils classes but absent in distutils classes.  This allows us to mix distutil extensions in with scipy_distutil extension within one build process.  weave returns distutil extension objects, so this is useful

==

scipy_distutils/command/build_ext.py
scipy_distutils/dist.py
==================
7281e96;Pearu Peterson;2003-03-28 22:15:16 +0000;Fixed 'setup.py sdist'->untar->'setup.py build' cycle.

==

scipy_distutils/command/build_py.py
==================
0f98f83;Pearu Peterson;2003-03-28 16:42:15 +0000;linalg may be also available as standalone when import scipy.linalg fails

==

scipy_base/polynomial.py
==================
1d8273c;Pearu Peterson;2003-03-25 22:46:47 +0000;Backported ppimport to Py2.1. Moved help/ppimport hooks to ppimport.py so that they will be available also for standalone installations

==

scipy_base/ppimport.py
==================
cf1f7ad;Pearu Peterson;2003-03-25 22:16:46 +0000;Improved ppimport for nonexisting modules. Added ppimport support to builtin help function. Now both info and help work again on scipy objects.

==

scipy_base/ppimport.py
==================
d419e6c;Eric Jones;2003-03-25 10:41:21 +0000;added setup_extension() method to ext_module to return distutils.core.Extension object for a weave generated extension.  This is helpful in using weave extensions within setup.py files.
added logic inside ext_module.generate_module to check whether the
new extension module code is different from the code that may already 
exist in a previously generated extension module file.  If the code is
the same, the file is not overwritten.  This prevents setup.py from thinking
the module is always out of date and must be recompiled.

==

scipy_distutils/command/install_data.py
weave/build_tools.py
weave/ext_tools.py
weave/scxx/object.h
==================
aba4027;Pearu Peterson;2003-03-24 19:00:16 +0000;Backport to Py2.1 where update will not be available (PyDict_Merge is new to Py2.2)

==

weave/scxx/dict.h
==================
f0069cd;Pearu Peterson;2003-03-22 22:28:17 +0000;1) Finished applying ppimport hooks to scipy. New scipy import timings on PII 400MHz, Debian with postponed import hooks enabled:
pearu@localhost:~$ time python2.2 -c 'import scipy'
real    0m1.392s
user    0m1.320s
sys     0m0.060s
pearu@localhost:~$ time python2.3 -c 'import scipy'
real    0m0.691s
user    0m0.650s
sys     0m0.030s

For reference, importing scipy to Python 2.2 used
to take 2-16 seconds depending on whether scipy was
loaded before or not.

2) New feature in ppimport:
When pre_<modulename>.py* exists for ppimported
module <modulename> then this pre_*.py file will
be executed to initialize additional attributes
to postponed module loader. For a python package,
<packagename>/pre___init__.py is used to add
attributes to package loader.
This feature is useful for importing documentation
strings of a package/module without importing them.
Currently this works with scipy.info but I haven't
tested with pydoc.help yet.

3) Made initial steps for getting scipy documentation
strings parsable by docutils.

==

scipy_base/ppimport.py
weave/__init__.py
weave/pre___init__.py
==================
d396654;Pearu Peterson;2003-03-22 20:02:43 +0000;Fixed bugs. Find modules also in parent directory (for scipy separate packages)

==

scipy_base/ppimport.py
==================
cbc0c92;Pearu Peterson;2003-03-22 16:27:14 +0000;Various cosmetic changes to clean up scipy_base module. In addition: - using ppimport'ed Matrix (saves loading Numeric/LinearAlgebra   module when Matrix is not going to be used) - forcing Numeric to use scipy version of umath (fastumath).

==

scipy_base/__init__.py
scipy_base/function_base.py
scipy_base/index_tricks.py
scipy_base/limits.py
scipy_base/matrix_base.py
scipy_base/polynomial.py
scipy_base/ppimport.py
scipy_base/scimath.py
scipy_base/type_check.py
==================
8eef87f;Pearu Peterson;2003-03-22 14:44:36 +0000;Added support for postponed attributes of class type. Code clean up and optimization.
Initial tests show a considerable speed up in importing scipy (my
target is less than 2 seconds on PII 400MHz, was upto 14
seconds). When using Python 2.3, importing modules is more than two
times even faster.

==

scipy_base/ppimport.py
==================
fd7e739;Pearu Peterson;2003-03-21 23:59:05 +0000;Fixed curious 'TypeError: an integer is required' in fftpack tests (bug report: Arnd Baecker)

==

scipy_test/testing.py
==================
b6062f6;Pearu Peterson;2003-03-20 21:24:18 +0000;Implemented hooks to postpone module import until module attributes are accessed (ppimport function).  To model postponed import for 'from module import name', ppimport_attr(module,name) is introduced where module=ppimport(modulename).
Comparing ppimport to Pmw dynamic loader, ppimport is more robust: it
does not assume any special setup for a module to be imported. With
ppimport one can postpone importing both python modules and packages
as well as python extension modules. ppimport covers the two first
purposes of a dynamic loader (as defined by Pmw docs). The third
purpose, that is choosing between different versions of a module,
should be implemented separately (if at all at this moment) from
ppimport to keep its code as clean as possible.

The basic idea of ppimport is as follows. Expression

  module = ppimport('module')

is equivalent to

  import module

with the difference that the actual module import is postponed until
any part of a python code tries to access the attributes of a module.
The return value of ppimport is either actual module (when module
was imported before ppimport call) or a special ModuleLoader instance
(that triggers module import as soon as module attributes are to be
accessed either through getattr or setattr).

Restrictions: ModuleLoader is not derived from Python module type.
As a result, reload(module) will raise TypeError. As a workaround,
reload(module._ppimport_module) can be used.

Wishes: currently module.__doc__ would trigger importing module though
it may not be necessary. Therefore, a database of modules
documentation is needed in some form (e.g. definition files per
package, preferably generated automatically during build/installation
steps) to prevent unnecessary imports. We need to work out a policy
for documenting scipy modules... what tools to use (pydoc, etc.),
documentation string formats, etc.

==

scipy_base/__init__.py
scipy_base/ppimport.py
==================
1960523;Pearu Peterson;2003-03-18 17:22:35 +0000;Fixed bug in UINT_multiply.

==

scipy_base/fastumath_unsigned.inc
==================
694e8f6;Pearu Peterson;2003-03-18 09:28:21 +0000;Introduced .build_py_ignore hooks: If a .py file directory contains .build_py_ignore and its base name is listed in .build_py_ignore file, then this .py file is removed from the modules list of build_py command.
This generalizes "avoiding setup*.py from installation" hook to
arbitrary files (e.g. linalg, freetype etc contain .py files
that are not meant to be installed) that was also broken: it worked
only when installing packages as standalone.

==

scipy_base/.build_py_ignore
scipy_distutils/.build_py_ignore
scipy_distutils/command/build_py.py
scipy_test/.build_py_ignore
==================
356c08d;Pearu Peterson;2003-03-17 20:10:16 +0000;Implemented setup_freetype.py (tested to work on Linux).
Added initial C++ support to scipy_distutils (darwin, freebsd issues
still need to resolved, copy from weave.build_tools).
Note that distutils.sysconfig._init_posix gcc->g++ linker replace
hack cannot be used, in general, because certain extension modules
require gcc->g77 linker replace hack instead. So, the C++ linker
hack must have been implemented in build_ext.py.

==

scipy_distutils/command/build_ext.py
scipy_distutils/dist.py
scipy_distutils/extension.py
==================
b0ee065;Pearu Peterson;2003-03-11 22:56:53 +0000;Using /usr/include instead of /usr/include/X11 as X11/X.h is actually tested

==

scipy_distutils/system_info.py
==================
63463d0;Pearu Peterson;2003-03-11 22:52:10 +0000;Added /usr/lib and /usr/include/X11 paths so that X11 libraries and include_dirs are found on Sun

==

scipy_distutils/system_info.py
==================
7b75dcd;Eric Jones;2003-03-11 18:47:11 +0000;converted DOS EOL to UNIX EOL.

==
==================
2ef3e1b;Eric Jones;2003-03-10 23:29:41 +0000;when I moved from a swigptr.c to be a string in a swigptr.py file, I forgot to escape \n characters so that they would not be interpreted by python and would actually get written into the generated C++ file.  This patch fixes that.

==

weave/swigptr.py
==================
60d7d66;Pearu Peterson;2003-03-10 18:57:03 +0000;Disabled -msse2 optimization for g77<=3.2.2 as some Fortran files won't compile with it giving error: 'Error: suffix or operands '

==

scipy_distutils/command/build_flib.py
==================
09fe0df;Pearu Peterson;2003-03-10 18:52:15 +0000;Fixed Pentium model detection for 'Intel(R) Pentium(R) 4'

==

scipy_distutils/command/cpuinfo.py
==================
e484697;Pearu Peterson;2003-03-10 18:43:24 +0000;Disabled floor/true_divide for Python<2.2.0. Fixed few compiler warnings.

==

scipy_base/fastumath_nounsigned.inc
scipy_base/fastumath_unsigned.inc
scipy_base/fastumathmodule.c
==================
5828063;Eric Jones;2003-03-10 18:41:34 +0000;converted format of file from DOS to UNIX line endings.

==

weave/swigptr.py
==================
9633322;Pearu Peterson;2003-03-10 17:08:43 +0000;Assume that cygwin does not have X11 libraries.

==

scipy_distutils/system_info.py
==================
6cdf05d;Pearu Peterson;2003-03-08 17:35:11 +0000;Added version hooks to weave,fftpack,special packages.

==

weave/__init__.py
weave/weave_version.py
==================
e133f9c;Pearu Peterson;2003-03-08 17:09:48 +0000;Renamed setup_scipy_core.py to setup.py because scipy_core is not a real package

==

setup.py
setup_scipy_core.py
==================
e8fa013;Pearu Peterson;2003-03-07 18:08:28 +0000;scipy_core package is now functional. Usage:   cvs checkout scipy_core   setup_scipy_core.py install  # to install scipy_{distutils,test,base}   setup_scipy_core.py sdist    # to create Scipy_core-<version>.tar.gz

==

setup_scipy_core.py
==================
e95e42e;Eric Jones;2003-03-07 15:11:46 +0000;Moved code in swigptr.c into a python string, swigptr.swigptr_code.  This makes it where the code doesn't have to be read out of a file in the directory path and makes it easier on py2exe like programs that bundle code into an exe file. [see bug 37]
I think weave will still not work in bundled applications because it referes to a lot of other external files in the scxx directory and blitz directories.  Still, these are not read during import, so they at least don't cause the scipy import to fail.

We should look for a way to make weave work from py2exe binaries in the future.

==

weave/common_info.py
weave/swigptr.py
weave/tests/test_blitz_tools.py
weave/tests/test_c_spec.py
==================
c21bf7e;Travis Oliphant;2003-03-07 02:07:18 +0000;Fixed one more place to make plots of effectively 1-d arrays work.

==

scipy_base/polynomial.py
==================
1f13832;Travis Oliphant;2003-03-07 02:03:15 +0000;Fix bug in polynomial for roots([1]) (unreported).  Fix so that xplt.plot will work when x and y are effectively 1-d arrays but perhaps have several length one dimensions appended.

==

scipy_base/polynomial.py
==================
ae65d9c;Eric Jones;2003-03-05 10:29:56 +0000;Added compatibility with gcc 3.2 versions of mingw on win32 that use gcc -shared instead of dllwrap for building dlls

==

weave/build_tools.py
==================
86bf430;Pearu Peterson;2003-02-28 23:33:15 +0000;Enabled use_gcc,g77 again in mingw32_support.py as calling them in build_flib may be too late. Not sure if this was the cause of building failures on win32..

==

scipy_distutils/mingw32_support.py
==================
452c1f4;Eric Jones;2003-02-28 22:12:49 +0000;Last month, I made some changes so that these modules would be built in the build/os-xxx.temp directory instead of cluttering the directory where setup.py lives.  This then requires the compiler to be told where the module files live.  The inclusion of the temp directory should be done automatically because the module files are placed there automatically.
Changes over the last month (I think in revision 1.58) broke this.  It looks like it was to fix incompatibilities for other absoft compilers.  Dang they change their switches a lot...  Anyway, all absoft f90 compilers should allow a way of specifying the modules directory.  Instead of disabling the search of the temp directory, we should find out how the other versions do it.

I've re-enabled the search for modules in the temp direcotry for the time being.

==

scipy_distutils/command/build_flib.py
==================
38517d5;Pearu Peterson;2003-02-28 09:24:10 +0000;Backport to Absoft 4.6 compiler (not tested though)

==

scipy_distutils/command/build_flib.py
==================
5ad8589;Pearu Peterson;2003-02-27 16:21:00 +0000;Renamed digital_fortran_compiler to compaq_visual_fortran_compiler and changed its vendor to 'Compaq' (as they seem to be essentially same compilers, Digital being older version of CompaqVisual).
Moved some of windows specific compiler setting code from
mingw32_support to command/build_flib.py in order to enable
using scipy_distutils on a purely MS environment (with other
compilers like Compaq Visual Fortran, etc.).
WARNING: These changes are *not* tested and may have broken
scipy_distutils on win32 (hopefully not!).

==

scipy_distutils/command/build_flib.py
scipy_distutils/mingw32_support.py
==================
5d75b42;Pearu Peterson;2003-02-27 08:14:43 +0000;Added Forte to fortran compiler vendor list

==

scipy_distutils/command/build_flib.py
==================
c50021a;Pearu Peterson;2003-02-27 08:11:50 +0000;Fixed typo.

==

scipy_distutils/command/build_flib.py
==================
adf0787;Pearu Peterson;2003-02-27 08:11:19 +0000;Fixed typo.

==

scipy_distutils/command/build_flib.py
==================
2cab038;Pearu Peterson;2003-02-27 07:35:51 +0000;Derived forte_fortran_compiler

==

scipy_distutils/command/build_flib.py
==================
5818b6e;Eric Jones;2003-02-22 10:10:29 +0000;mingw compiler always uses gcc for compile step and g++ for link step now.

==

weave/build_tools.py
==================
7a780b2;Travis Oliphant;2003-02-21 16:37:30 +0000;Fixed true divide issues.  Fixed use of wrong math library.

==

scipy_base/fastumath_nounsigned.inc
scipy_base/fastumath_unsigned.inc
==================
4ae287e;Eric Jones;2003-02-13 15:06:41 +0000;changed platform_specifier to use '_' in place of spaces.  This is equivalent to what python 2.3 does.  We used to just remove the space.

==

scipy_distutils/command/build.py
==================
82735f0;Pearu Peterson;2003-02-13 11:42:00 +0000;Trying harder to determine the location of g2c library as required on Darwin platform

==

scipy_distutils/command/build_flib.py
==================
020aa67;dmorrill;2003-02-10 19:03:13 +0000;Re-fixed the Mac build of chaco problem by moving the fix to weave, and undoing part of the previous fix added to the main chaco setup.py file.

==

weave/build_tools.py
==================
ad70971;Pearu Peterson;2003-02-07 14:26:47 +0000;Scipy builds now with Absoft Fortran compiler (on Linux, probably also on Darwin, not sure about win32)

==

scipy_distutils/command/build_flib.py
==================
085910c;Pearu Peterson;2003-02-07 12:17:51 +0000;Added -f -s flags to Linux Absoft compiler

==

scipy_distutils/command/build_flib.py
==================
fc770a7;Pearu Peterson;2003-02-07 08:29:24 +0000;Enabled g2c library with gcc_lib_dir for darwin platform.

==

scipy_distutils/command/build_flib.py
==================
23a6b0f;Pearu Peterson;2003-02-07 08:21:27 +0000;Fixed Absoft Fortran compiler support on MacOSX (thanks to James E. Scarborough). Disabled -p flag if no module_dirs as f77 does not accept this flag.

==

scipy_distutils/command/build_flib.py
==================
6e57fb5;Pearu Peterson;2003-02-05 09:20:27 +0000;Initial hooks for Absoft compiler support on MacOSX

==

scipy_distutils/command/build_flib.py
==================
d1815ab;Pearu Peterson;2003-02-05 09:17:48 +0000;Added sunos cpuinfo support + other improvements

==

scipy_distutils/command/cpuinfo.py
==================
9f10285;Pearu Peterson;2003-02-04 09:15:35 +0000;Fixed the order of fftw libraries

==

scipy_distutils/system_info.py
==================
ef3688e;Travis Oliphant;2003-02-01 01:24:11 +0000;Fixed problem with insert in scipy_base and added diric(x,n) to special

==

scipy_base/_compiled_base.c
==================
2e67a7a;Travis Oliphant;2003-01-28 07:42:03 +0000;Added Otto's discrete distribution statistical tests

==

scipy_base/type_check.py
==================
8df2b3f;Eric Jones;2003-01-22 09:28:00 +0000;it appears that mips f90 is brain dead also and doesn't allow you to specify where module files should be written.  I've made a mixin class that has the methods for moving the mod files "by hand" so that it can be used by absoft and mips compilers.

==

scipy_distutils/command/build_flib.py
==================
3520037;Eric Jones;2003-01-22 08:31:10 +0000;intel compiler on linux now places module files in the build directory instead of the top level directory.

==

scipy_distutils/command/build_flib.py
==================
5a68b4b;Eric Jones;2003-01-22 00:27:51 +0000;added flags to Sun compiler to make it build modules in the build/temp.os-xxx directory.  This involved adding -moddir/temp_dir and -M temp_dir
absoft 6.2 doesn't handle building mod files in the build directory using a flag
(or at least I didn't find it).  This is brain dead.  anyway, I added the
machinery to move the files to the build directory explicitly after each f90
compile.  It is smart enough to not move mod files that previously existed
 there.  I am a bit worried whether the absoft compiler accepts multiple -p
flags to specify where to look for module files.  This isn't a problem unless
a user also specifies a directory using the module_dirs argument.

The Sun compiler also needed the mvec library on our machine, so I've added it.
Hopefully it is OK to have on all systems.??

==

scipy_distutils/command/build_flib.py
==================
1f60e07;Pearu Peterson;2003-01-21 12:03:39 +0000;Fixed linking with Forte F95 compiler (-lfsu is needed when using intrisic functions)

==

scipy_distutils/command/build_flib.py
==================
58ac35e;Travis Oliphant;2003-01-09 09:30:09 +0000;Fixed test_special to test over 100 of the functions.  Other tests need to be fixed.  Added Pade routine to find Pade approximation.  More tutorial additions.

==

scipy_test/testing.py
==================
414f3b3;Pearu Peterson;2003-01-06 23:40:40 +0000;Impl. cpuinfo for darwin platform. Fixed gnu compiler support on darwin (no need for -lg2c) and impl. optimization hooks for this platform. Clean up code. A note: currently Fortran compilers are used with architecture/machine dependent optimization flags. We need a switch that turns off architecture/machine dependent optimization flags (but keeping generic optimization flags) when building distributable scipy binaries.

==

scipy_distutils/command/build_flib.py
scipy_distutils/command/cpuinfo.py
==================
cdaf91e;Pearu Peterson;2003-01-05 20:15:03 +0000;sgi compiler class clean up. Added optimization hooks for MIPSpro compilers.

==

scipy_distutils/command/build_flib.py
scipy_distutils/command/cpuinfo.py
==================
fbb9934;Eric Jones;2003-01-04 23:31:45 +0000;Fixed bug in test of compiler type that was recently inserted.
Split blitz tests out so that the individual numeric types are tested separately.

==

weave/catalog.py
weave/platform_info.py
weave/tests/test_blitz_tools.py
==================
71489f3;Eric Jones;2003-01-03 23:19:50 +0000;2.3a1 on darwin doesn't have the correct flags set when building extension modules.  It is missing -Wno-long-double to supress the output of this warning.  CFLAGS has this flag, so I just set OPT to CFLAGS in distutils.sysconfig.config_vars.  THis also adds a flag that turns off pre-compiled headers in c++ builds.  I don't know if this will prove an issue in the future or not, but it doesn't affect any of the weave tests.

==

weave/build_tools.py
==================
cde60ff;Eric Jones;2003-01-03 17:53:04 +0000;renamed find_compiler.py to platform_info.py so that it can be used for more generic purposes beyond just getting the compiler information.

==

weave/build_tools.py
weave/find_compiler.py
weave/platform_info.py
==================
1c55139;Eric Jones;2003-01-03 00:02:59 +0000;weave now compiles intermediate files in a compiler specific directory. This prevents the possibility of compilers from different platforms from looking in the python_intermediate directory and finding an object file built by a different compiler and trying to link it in -- which will fail.

==

weave/build_tools.py
==================
7a8d8ba;Eric Jones;2003-01-02 23:59:26 +0000;This module helps find the location of the compiler used by distutils. This is needed so that we can create compiler specific directories for intermediate files (.o) created by weave.  An md5 check sum of the compiler binary provides a reasonably reliable way to differentiate between compilers.  This approach works across multiple platforms that share the same file system.

==

weave/find_compiler.py
==================
339894e;Pearu Peterson;2003-01-01 15:32:27 +0000;Fixed --build_flib/build_temp flags of setup.py build_flib command. It seems that the standard distutils needs the same fix for the build_clib command.

==

scipy_distutils/command/build_flib.py
==================
1d5fd99;Pearu Peterson;2002-12-27 14:17:32 +0000;Fixed Forte Fortran 90 compiler support.

==

scipy_distutils/command/build_flib.py
==================
bc62be8;Pearu Peterson;2002-12-23 01:40:54 +0000;Fixed compiling Fortran 90 fixed and free format files (HP and Compaq compiler classes still need the 'fixed format' switch). For testing the mix of F77/F90 fixed/F90 free Fortran codes, see f2py2e/tests/mixed/.

==

scipy_distutils/command/build_flib.py
==================
49dfa81;Eric Jones;2002-12-19 07:15:18 +0000;made changes to use a PYTHONINCLUDE environment variable to search for include files during extension building.
(1) include directories.
Distutils knows to include files from /usr/include/python2.2 (or wherever it is installed) whenever building extension modules.  Numeric installs its header files inside this directory when installed as root.  However, when I install Numeric in /home/eric/linux, the header files are installed in /home/eric/linux/python2.2.  Distutils doesn't know to look in hear for headers.  To solve this, I'd have to hack all the setup.py files for modules that rely on Numeric to use my include_dirs.  This isn't so nice.

To rectify the problem, scipy_distutils now searches for an environment variable called PYTHONINCLUDE that uses the same syntax as PYTHONPATH and PATH.  If PYTHONINCLUDE is found, the directories listed in it are added to the include path during compilation of C/C++ files by build_ext.py and build_clib.py.  On my machine, I specify

export PYTHONINCLUDE=$OSDIR/include/python2.2

and all setup.py files work unaltered.  I think this is a reasonable solution.

==

scipy_distutils/command/build_clib.py
scipy_distutils/command/build_ext.py
scipy_distutils/misc_util.py
==================
e3abc33;Pearu Peterson;2002-12-18 19:05:51 +0000;Backport to Python 2.1

==

scipy_distutils/setup_scipy_distutils.py
==================
f56ab8f;Eric Jones;2002-12-15 06:54:14 +0000;overrode the finalize_options() method in build so that we could remove spaces from the plat_specifier variable.  This thing is used to define the build path, and has spaces in it on the OS X.  g77 wasn't happy when it sees spaces in file names.
I also factored out the definition of plat_specifier into a function called
get_plat_specifier.

==

scipy_distutils/command/build.py
==================
7867841;Pearu Peterson;2002-11-25 07:38:35 +0000;Impl. memusage() for Linux. memusage is useful for detecting memory leaks

==

scipy_test/testing.py
==================
8003ebb;Pearu Peterson;2002-11-23 00:12:22 +0000;Display F2PY version only once

==

scipy_distutils/command/run_f2py.py
==================
dcc6569;Pearu Peterson;2002-11-23 00:01:42 +0000;Added support for now separate f77 and f90 wrappers that the latest f2py may generate.

==

scipy_distutils/command/run_f2py.py
==================
18f6cc5;Pearu Peterson;2002-11-22 23:08:01 +0000;Fixed dummy file name for multi-user systems

==

scipy_distutils/command/build_flib.py
==================
cf28dad;Pearu Peterson;2002-11-22 18:42:22 +0000;Removed sun_fortran_compiler.get_runtime_library_dirs method that caused linkage error due to -W flag that is supposed to be used only with gnu compilers

==

scipy_distutils/command/build_flib.py
==================
bf70a2e;Travis Oliphant;2002-11-22 09:07:42 +0000;Changed structure of stats module.

==

scipy_base/_compiled_base.c
==================
1376f6e;Eric Jones;2002-11-20 20:59:58 +0000;changed the link order of libraries for absoft compiler.  the order is now 'f90math' and then 'fmath'.  This fixed link errors on windows with absoft 6.2

==

scipy_distutils/command/build_flib.py
==================
c415fd1;Pearu Peterson;2002-11-18 22:39:31 +0000;Bundle scipy_test,scipy_distutils to scipy_core. See the header of setup_scipy_core.py for usage information.

==

setup_scipy_core.py
==================
7c0aa98;Pearu Peterson;2002-11-18 21:06:13 +0000;Removed weave dependence: lib2def lives in scipy_distutils already

==

scipy_distutils/mingw32_support.py
==================
21478aa;Eric Jones;2002-11-07 08:49:57 +0000;moved operator<< to weave_imp.cpp to prevent multiple definition issue.
repr() and str() now return std::string instead of py::object values

==

weave/scxx/object.h
weave/scxx/weave_imp.cpp
==================
b089b4c;Eric Jones;2002-11-07 08:11:44 +0000;added a long int constructor for py::object.  This was needed in the freetype library.

==

weave/scxx/object.h
==================
f0e0be1;Eric Jones;2002-11-07 08:10:58 +0000;unicode conversion now includes a length veariable Nxxx just like Numeric arrays.  If we could use std::wstring reliably on all platforms, the need for this would go away.  My notes say that it doesn't compile correctly on gcc2.95.3 though.

==

weave/c_spec.py
==================
5184dec;Travis Oliphant;2002-11-06 12:18:06 +0000;Added multifactorial function.  Fixed object array bug with insert.

==

scipy_base/_compiled_base.c
==================
f4a310f;Travis Oliphant;2002-11-02 00:51:40 +0000;Changed implementation of how PINF and NAN get computed in fastumath.  Remember to compile fastumath without the -ffast-math flag if you are using gcc.

==

scipy_base/__init__.py
scipy_base/fastumathmodule.c
scipy_base/function_base.py
==================
8e89f5e;Travis Oliphant;2002-11-01 13:30:06 +0000;Added insert and extract to scipy_base docstring

==

scipy_base/__init__.py
==================
815de7e;Travis Oliphant;2002-11-01 13:20:17 +0000;Changed takemask to extract.  Added inverse of extract called insert.  Extract takes 1-d array out of raveled nd array according to raveled mask.  Insert puts elements from 1-d array back into an n-d array according to mask.  It can be thought of as the inverse of extract.  It allows for operations to only be performed when necessary.

==

scipy_base/_compiled_base.c
scipy_base/function_base.py
==================
cf5c05a;Travis Oliphant;2002-11-01 06:41:33 +0000;Added tests to stats.  Added nanXXXX functions.  Fixed kurtosis and skew to handle biased and unbiased estimates to match MATLAB.

==

scipy_base/__init__.py
scipy_base/function_base.py
scipy_base/shape_base.py
scipy_test/testing.py
==================
7e15158;Pearu Peterson;2002-10-20 23:53:48 +0000;Minor changes to ifc flags. Removed gcc hooks: ifc objects are not binary compatible with g77 objects. One should never use g77 and ifc compiled functions in the same executable.

==

scipy_distutils/command/build_flib.py
==================
64a54bf;Eric Jones;2002-10-20 22:25:08 +0000;added examples for the py::object C++ object.

==

weave/examples/object.py
==================
188c4df;Pearu Peterson;2002-10-19 23:32:41 +0000;Fixed typo.

==

scipy_distutils/command/build_flib.py
==================
1f32ecb;Pearu Peterson;2002-10-19 17:50:00 +0000;Changed str->repr in assert_* functions (because DESIRED and ACTUAL showed identical results for failing assert tests).

==

scipy_test/testing.py
==================
da1637a;Pearu Peterson;2002-10-16 08:28:20 +0000;Made scipy_base locally testable.

==

scipy_base/tests/test_function_base.py
scipy_base/tests/test_index_tricks.py
scipy_base/tests/test_limits.py
scipy_base/tests/test_matrix_base.py
scipy_base/tests/test_shape_base.py
scipy_base/tests/test_type_check.py
==================
506412d;Pearu Peterson;2002-10-15 23:03:27 +0000;Using environment variables F77,F90,FC_VENDOR for setting Fortran compilers. This simplifies switching between different compilers, for instance.

==

scipy_distutils/command/build_flib.py
==================
c0cf5d3;Pearu Peterson;2002-10-15 00:21:21 +0000;Added new gcc-3.1 optimization flags.

==

scipy_distutils/command/build_flib.py
scipy_distutils/command/cpuinfo.py
==================
4f8bcc7;Pearu Peterson;2002-10-14 23:04:20 +0000;Scipy is now Debian (that keeps liblapack.a in a different directory from libatlas.a) friendly.

==

scipy_distutils/system_info.py
==================
249b6a3;Eric Jones;2002-10-14 19:13:18 +0000;put try except around wx-config --ldflags to support older versions of wxPython

==

weave/wx_spec.py
==================
7a6bba4;Pearu Peterson;2002-10-14 14:29:20 +0000;When ifc is used with gcc then -lg2c is required.

==

scipy_distutils/command/build_flib.py
==================
6d195cb;Eric Jones;2002-10-14 11:59:23 +0000;wx_spec failure to find wx-config on Unix systems without wxPython was foiling weave import attempts.  The error is now trapped.

==

weave/converters.py
==================
480bbf5;Pearu Peterson;2002-10-13 23:14:05 +0000;Fixed the order library dirs: /usr/local/lib/atlas is looked before /usr/local/lib

==

scipy_distutils/system_info.py
==================
7a76514;Pearu Peterson;2002-10-13 19:26:16 +0000;People may import scipy also from scipy/..

==

scipy_base/__init__.py
==================
7b0e644;Pearu Peterson;2002-10-13 19:14:25 +0000;Give more information when importing scipy from its source directory.

==

scipy_base/__init__.py
==================
f067ab7;Eric Jones;2002-10-13 11:26:41 +0000;added changes for unsigned cahracter support on Numeric arrays.
added Linux support for wxPython.  This still has quite a bit of hard coded
stuff in it because there is no easy way to query it.  This will slowly improve.

==

weave/c_spec.py
weave/standard_array_spec.py
weave/wx_spec.py
==================
3237850;Eric Jones;2002-10-13 11:24:37 +0000;added a speed comparison of a weavified wxPython and standard wxPython call to DrawLines.  This version works on both wxGTK and Windows.

==

weave/examples/wx_speed.py
==================
f64886e;Eric Jones;2002-10-13 06:05:45 +0000;added Pearu's ifdefs to support not().  The whole block is still commented out, but I wanted to add them before I forgot about it.

==

weave/scxx/object.h
==================
f190948;Eric Jones;2002-10-13 06:04:06 +0000;cleaned up a few examples.
added support for wxPython on Unix.  Configuration information is gathered
by running wx-config with the proper flags specified (--cxxflags, --ldflags,
--libs, --gl-libs) to find libraries and include directories needed.  I
wish we could query the wxPython module directly and ask it for this
information, as it would be much more robust.  Currently we look in the
/usr/lib/wxPython directory for wx stuff.  If it isn't there, we're out of
luck.  The wxPython development files are required for this stuff to work.

Windows is actually worse.  I've updated the config files to support
wx2.3.3.1.  Is there a way to discover build type (ansi/unicode) from the
wxPython library?  Right now, it is hard coded to use the Unicode version
of the DLLs.  As for macros and libraries, I borrowed them from the make
file in the wx2.3.3.1/src/make.env file.  The wxPython devel package must
be installed the c:\ directory for all of this to work.

If people use alternative directories in either case, they'll have to hand
edit the wx_spec file to deal with this.

==

weave/base_info.py
weave/c_spec.py
weave/examples/binary_search.py
weave/examples/cast_copy_transpose.py
weave/examples/dict_sort.py
weave/ext_tools.py
weave/scxx/object.h
weave/wx_spec.py
==================
59ef24c;Eric Jones;2002-10-12 04:27:58 +0000;fixed a headers = None --> headers = [] bug

==

weave/inline_tools.py
==================
9a17427;Eric Jones;2002-10-12 01:43:39 +0000;added a PYTHONINCLUDE environment variable that weave searches for include files during compilation.  I added this to handle the recent switch I have made to using a system installed python while storing my own python packages in my home directory. (python setup.py install --prefix=~/<os>)
Unfortunately, there isn't another way to tell weave where to find installed
header files if they aren't in the normal place.  Actaully... If Numeric
stored the location of its header files in a variable called __include_dirs__,
this would go a long way to automating the process for most users and they
would never need to mess with the PYTHONINCLUDE variables.

==

weave/build_tools.py
==================
4d97933;Eric Jones;2002-10-12 00:52:20 +0000;removed blitz converters from being declared by default so that weave can work for people who do not have Numeric installed.

==

weave/converters.py
==================
b90b0c1;Eric Jones;2002-10-12 00:50:45 +0000;removed the not() operator from object.h.  For some reason, it was causing problems in gcc 3.2 -- is it reserved or something?  Anyway, I haven't used it and don't consider it to be critical at the moment, so I've just commented it out until there is more time to look it over.
Fixed const function declaration problems on py::sequenc::in().

==

weave/scxx/object.h
weave/scxx/sequence.h
==================
4fa203f;Eric Jones;2002-10-11 06:48:45 +0000;removed py::number from a test as it is no longer used by weave.

==

weave/tests/test_c_spec.py
==================
efb9df0;Eric Jones;2002-10-10 09:14:17 +0000;type was returning PyObject*.  Changed to py::object

==

weave/scxx/object.h
==================
b9e184c;Eric Jones;2002-10-10 09:05:34 +0000;This checkin marks a fairly substantial change in the C++ classes for weave.  The original SCXX code has been augmented and mutated to the point of not be recognizable as SCXX any more.  File and class names have moved more toward boost naming conventions.
The most significant change is that, when writing standard inline()
code, end users are not responsible for reference counting at all.

Additionally, casting functions have been added and methods have
been overloaded so that conversions between python types and C
types are handled transparently for the basic types (char*,int,float,
double,std::string,std::complex<double>, etc.)

py::object has been augmented to handle attribute access, function
calling, method calling, and pretty much all of the rest of the
PyObject_xxx API.

This is near feature complete for weave 0.3.  The remaining tasks are
to test on other platforms and re-write the documentation.

==

weave/c_spec.py
weave/common_info.py
weave/examples/binary_search.py
weave/examples/cast_copy_transpose.py
weave/examples/dict_sort.py
weave/examples/fibonacci.py
weave/examples/functional.py
weave/examples/vq.py
weave/scxx/callable.h
weave/scxx/dict.h
weave/scxx/list.h
weave/scxx/notes.txt
weave/scxx/number.h
weave/scxx/object.h
weave/scxx/sequence.h
weave/scxx/str.h
weave/scxx/tuple.h
weave/scxx/weave_imp.cpp
weave/tests/scxx_timings.py
weave/tests/test_scxx.py
weave/tests/test_scxx_dict.py
weave/tests/test_scxx_object.py
weave/tests/test_scxx_sequence.py
==================
6978cea;Eric Jones;2002-10-04 03:28:13 +0000;added fastumath_xxx versions of complex number loops so that we don't have use the ones built into Numeric.  This is important because MSVC compiled versions of Numeric have incompatible complex numbers with the gcc compiled fastumath modules.  the nounsigned.inc files had these fixes already. They were just missing from the unsigned.inc versions.

==

scipy_base/fastumath_unsigned.inc
==================
cdb55e3;skip;2002-10-03 22:09:50 +0000;use os.stat() to check file info instead of os.open() followed by os.fstat().  Cleaner and a bit more portable.

==

scipy_distutils/system_info.py
==================
507ed7c;Pearu Peterson;2002-10-03 12:55:59 +0000;Added +ppy (postpend underscores on globals for BSD compatibility) option to HP Fortran compilers

==

scipy_distutils/command/build_flib.py
==================
d458416;Pearu Peterson;2002-10-03 00:19:55 +0000;Carried out major unification of xxx/setup_xxx.py files. Discussion: some modules contain setup.py files that repeat the functionality of the corresponding setup_xxx.py files. Are there any objections if setup.py and setup_xxx.py will be merged into setup_xxx.py and setup.py files will be removed from CVS?

==

scipy_base/scipy_base_version.py
scipy_base/setup_scipy_base.py
scipy_distutils/misc_util.py
scipy_distutils/setup.py
scipy_distutils/setup_scipy_distutils.py
scipy_test/__init__.py
scipy_test/scipy_test_version.py
scipy_test/setup_scipy_test.py
==================
fa6606c;Pearu Peterson;2002-10-02 21:58:25 +0000;Exposed version to imported module, filled setup arguments for sdist command, fixed typos

==

scipy_distutils/__init__.py
scipy_distutils/scipy_distutils_version.py
scipy_distutils/setup.py
scipy_distutils/setup_scipy_distutils.py
==================
24a2ee5;Pearu Peterson;2002-10-02 21:46:18 +0000;Exposed version to imported module, filled setup arguments for sdist command

==

scipy_base/__init__.py
scipy_base/setup_scipy_base.py
==================
97b20f1;Pearu Peterson;2002-10-02 21:15:04 +0000;Testing __cvs__version__.py (2)

==

scipy_base/__init__.py
==================
7f771f7;Pearu Peterson;2002-10-02 21:10:34 +0000;Testing __cvs__version__.py

==

scipy_base/__init__.py
==================
6a1436b;Pearu Peterson;2002-10-02 21:07:39 +0000;Testing __cvs__version__.py

==

scipy_base/__init__.py
==================
6331702;Pearu Peterson;2002-10-02 21:01:02 +0000;Generating __cvs__version__.py file, another try

==

scipy_base/__init__.py
==================
1a61513;Pearu Peterson;2002-10-02 20:57:31 +0000;Generating __cvs__version__.py file

==

scipy_base/__init__.py
==================
4fa288b;Pearu Peterson;2002-10-02 13:50:11 +0000;Fixed int check: works with Python 1.5, 2.1, 2.2; haven't tested with 2.0 or 2.3

==

scipy_distutils/system_info.py
==================
95056af;Pearu Peterson;2002-10-01 21:54:19 +0000;Setting up sun compiler goes too far on non Sun platforms that also have f77 compiler. So, first check if f77 is a Sun compiler and if affirmative then bother with lib_dirs. Removed also -fixed flag from f90 compiler, it just shouldn't be there.

==

scipy_distutils/command/build_flib.py
==================
00dce9d;skip;2002-10-01 18:07:03 +0000;kill trailing CR characters

==

scipy_test/__init__.py
==================
e62572e;skip;2002-10-01 18:05:36 +0000;change assert to be compatible with 2.3 (boolean is a subclass of int)

==

scipy_distutils/system_info.py
==================
fc8405a;Travis Vaught;2002-09-30 14:37:55 +0000;added sub-micro level versioning based on cvs version

==

scipy_base/scipy_base_version.py
scipy_distutils/scipy_distutils_version.py
scipy_test/scipy_test_version.py
==================
f8c6e2f;Pearu Peterson;2002-09-30 13:47:24 +0000;Fixed assert_approx_equal for negative input

==

scipy_test/testing.py
==================
920b35a;Eric Jones;2002-09-30 08:31:56 +0000;This checkin has quite a few changes.  Most are augmentations to the py::object class' capabilities and unit tests to check them and changes to test cases/examples to use the new features.
There is also one other BIG change.  return_val has been changed
from a PyObject* to a py::object.  This removes the need to handle
reference counting almost completely from inline() code.  I am very
happy about this. :-)

All tests pass on win32, but the examples still need some work.

==

weave/c_spec.py
weave/examples/dict_sort.py
weave/examples/functional.py
weave/examples/ramp.py
weave/examples/tuple_return.py
weave/ext_tools.py
weave/inline_tools.py
weave/scxx/notes.txt
weave/scxx/object.h
weave/scxx/weave_imp.cpp
weave/standard_array_spec.py
weave/tests/test_c_spec.py
weave/tests/test_ext_tools.py
weave/tests/test_scxx.py
weave/vtk_spec.py
weave/wx_spec.py
==================
c3ba22d;Eric Jones;2002-09-29 08:18:10 +0000;added speed test for list access and casting operations.

==

weave/tests/test_scxx.py
==================
e42148d;Eric Jones;2002-09-29 08:07:14 +0000;added casting to int float double and std::string for py::object.

==

weave/scxx/object.h
weave/tests/test_scxx.py
==================
52c2ef4;Eric Jones;2002-09-29 07:12:11 +0000;callable is no longer a separate converter class.  It is now handled by catch_all converters which convert the object to a py::object on the C++ side of things.
added more tests for attributes on new scxx classes.

==

weave/c_spec.py
weave/converters.py
weave/scxx/object.h
weave/tests/test_scxx.py
==================
61917b0;Eric Jones;2002-09-29 05:31:30 +0000;converted setItem to set_item in a test script

==

weave/tests/test_scxx.py
==================
d60990e;Eric Jones;2002-09-28 09:00:01 +0000;removing old files

==

weave/scxx/scxx2.h
==================
0b2c911;Eric Jones;2002-09-28 08:59:30 +0000;Moved orginal SCXX files to newly named files that reflect the type they contained.  The objects have also been given more boost like names.

==

weave/scxx/PWOBase.h
weave/scxx/PWOCallable.h
weave/scxx/PWOImp.cpp
weave/scxx/PWOMSequence.h
weave/scxx/PWOMapping.h
weave/scxx/PWONumber.h
weave/scxx/PWOSequence.h
==================
211c137;Eric Jones;2002-09-28 08:55:55 +0000;cleaned up DOS line endings
added scxx test suite

==

weave/setup_weave.py
weave/tests/test_scxx.py
==================
79486d2;Eric Jones;2002-09-28 08:45:07 +0000;added support for method calls on objects using mcall:
  object mcall(const char* nm);
  object mcall(const char* nm, tuple& args);
  object mcall(const char* nm, tuple& args, dict& kwargs);

  object mcall(std::string nm) {
    return mcall(nm.c_str());
  }
  object mcall(std::string nm, tuple& args) {
    return mcall(nm.c_str(),args);
  }
  object mcall(std::string nm, tuple& args, dict& kwargs) {
    return mcall(nm.c_str(),args,kwargs);
  }

moved callable object support directly into object using the call() method.

object is pretty well fleshed out now.  It needs more unit tests in the
test_scxx test suite.  I'm not sure attr() handles ref counts correctly.

Also, I would like to see if operator[] can be optimized for a[i] = b[i]
type operations.  It is currently much slower than using the C api and
also slower than pure python.

==

weave/scxx/notes.txt
weave/scxx/object.h
weave/scxx/weave_imp.cpp
==================
ced6972;patmiller;2002-09-26 16:31:11 +0000;Removed annoying ^M issue

==

weave/c_spec.py
==================
bc477c2;skip;2002-09-26 16:01:07 +0000;add missing || operator

==

scipy_base/mconf_lite_LE.h
==================
23739c8;skip;2002-09-26 15:12:31 +0000;rearrange failure message slightly and dump trailing whitespace

==

scipy_test/testing.py
==================
13f70d0;Pearu Peterson;2002-09-25 22:28:53 +0000;Disabled size_liblapack,has_clapack_sgetri bits.

==

scipy_distutils/system_info.py
==================
d5ce0d2;Pearu Peterson;2002-09-25 22:22:24 +0000;Disabled size_liblapack,has_clapack_sgetri bits.

==

scipy_distutils/system_info.py
==================
1fb972c;Pearu Peterson;2002-09-25 21:29:28 +0000;Fixed typo causing segfaults with Numeric<22.0.

==

scipy_base/fastumath_nounsigned.inc
==================
51cbd9c;Pearu Peterson;2002-09-25 15:54:31 +0000;Giving a warning if older ATLAS is used (that eventually will result in import error about missing clapack_sgetri)

==

scipy_distutils/system_info.py
==================
1f756d4;Pearu Peterson;2002-09-25 14:56:39 +0000;Replaced get_package_path with set_package_path. See linalg/tests/test_*.py for usage.

==

scipy_test/testing.py
==================
996d34f;Pearu Peterson;2002-09-25 12:28:10 +0000;Enabled true jiffies for Mandrake linux

==

scipy_test/testing.py
==================
b986d7a;Eric Jones;2002-09-23 08:08:49 +0000;made changes necessary to .py files to use the new modified version of scxx.

==

weave/c_spec.py
weave/common_info.py
weave/ext_tools.py
weave/setup_weave.py
weave/tests/test_c_spec.py
weave/tests/test_ext_tools.py
==================
ccc5a06;Eric Jones;2002-09-23 08:07:30 +0000;weave now uses a modified version of scxx.  The new class names are closer to (identical in most cases) to the boost library naming convention.  We will continue to try and make code as close to boost compatible as we can without getting into templates.  Here are the main changes:
* all classes moved to py:: namespace
* made tuples mutable with indexing notation. (handy in weave)
* converted camel case names (setItem -> set_item)
* change class names to reflect boost like names and put each
  exposed class in its own header file.
    PWOBase     -> py::object   -- object.h
    PWOList     -> py::list     -- list.h
    PWOTuple    -> py::tuple    -- tuple.h
    PWOMapping  -> py::dict     -- dict.h
    PWOCallable -> py::callable -- callable.h
    PWOString   -> py::str      -- str.h
    PWONumber   -> py::number   -- number.h

==

weave/scxx/PWOImp.cpp
weave/scxx/PWOMSequence.h
weave/scxx/PWOMapping.h
weave/scxx/callable.h
weave/scxx/dict.h
weave/scxx/list.h
weave/scxx/notes.txt
weave/scxx/number.h
weave/scxx/object.h
weave/scxx/scxx2.h
weave/scxx/sequence.h
weave/scxx/str.h
weave/scxx/tuple.h
weave/scxx/weave_imp.cpp
==================
f9d16bb;Eric Jones;2002-09-21 07:56:57 +0000;Significant functionality added.
Methods such as setItem, in, insert, append, and xxxMmbr::operator= were
overloaded to accept basic types int, double, char*, and std::string.  This
allows for much more Pythonic looking C++ code.

!! Need to add same functionality for mappings on haskey and maybe a few
!! others.

!! Need a set of unit tests for added functions to make sure reference
!! counting is handled correctly.

==

weave/scxx/PWOImp.cpp
weave/scxx/PWOMSequence.h
weave/scxx/PWOSequence.h
==================
d05f891;Eric Jones;2002-09-21 07:53:13 +0000;test_c_spec now tests both msvc and gcc on windows for most of all of the common converters.
Still need to add tests for new functionality added to underlying SCXX library.

==

weave/tests/test_c_spec.py
==================
6354521;Eric Jones;2002-09-21 07:49:35 +0000;added a PWONone global object that can be used in place of Py_None.  This is useful because gcc doesn't allow Py_None to be passed into functions with a PWOBase& declartion.

==

weave/common_info.py
==================
1168137;Eric Jones;2002-09-21 04:02:19 +0000;fixed import issues on PythonWin.  sys.stdout doesn't have isatty defined, so unprotected call to it in has_color_terminal was failing.

==

scipy_distutils/misc_util.py
==================
758a8aa;Pearu Peterson;2002-09-20 23:11:41 +0000;Removed scipy_base.testing. Use scipy_test.testing instead.

==

scipy_base/testing.py
==================
d0074f7;Pearu Peterson;2002-09-20 22:48:09 +0000;Fixed jiffies scaling in ScipyTestCase.measure

==

scipy_test/testing.py
==================
c8bfc61;Eric Jones;2002-09-20 22:41:50 +0000;fixed error in get_compiler_dir that was breaking Linux builds.

==

weave/build_tools.py
==================
9ec0eb7;Pearu Peterson;2002-09-20 22:27:26 +0000;Copied missing get_package_path,jiffies functions from scipy_base/testing.py. The latter should be removed.

==

scipy_test/testing.py
==================
4ce7908;Pearu Peterson;2002-09-20 22:25:53 +0000;scipy_test can be build/installed separately

==

scipy_test/setup_scipy_test.py
==================
f55fb2e;skip;2002-09-19 12:20:51 +0000;missing import

==

weave/build_tools.py
==================
200bff5;Eric Jones;2002-09-19 07:08:30 +0000;added yet another directory into the path of intermediate files generated by weave.  This is needed so that people switching between compilers don't end up trying to link c++ object files built with incompatible compilers together.
changed Py_INCREF to a Py_XINCREF to guard against NULL pointer problems
in convert_to_xxx routines.

lengthened the type_names strings for Numeric type names in
standard_array_spec.  It was shorter than some of the names. yikes!

choose_compiler stuff is no longer done by ext_modules.  This was used
to allow xxx_convterters and xxx_info objects to generate different code
depending on which compiler was used.  This is no longer done, and I don't
think it should be necessary going forward.  I've left a little of the code
in case I'm wrong, but will probably hack it out soon.

==

weave/blitz-20001213/blitz/config.h
weave/blitz_spec.py
weave/build_tools.py
weave/c_spec.py
weave/common_info.py
weave/ext_tools.py
weave/standard_array_spec.py
==================
9dec500;Eric Jones;2002-09-19 03:43:32 +0000;removed some old comments about stdc++ and linking issues with gcc.  They are no longer pertinent because we have moved to linking with g++ to solve the problem.

==

weave/build_tools.py
==================
9d56fb0;Eric Jones;2002-09-19 03:13:24 +0000;moved lib2def.py from weave to scipy_distutils
removed lib2def and logging from scipy_distutils as they now live in scipy_test

==

scipy_distutils/auto_test.py
scipy_distutils/lib2def.py
scipy_distutils/logging.py
weave/__init__.py
weave/build_tools.py
weave/lib2def.py
weave/setup.py
==================
a2d92aa;Eric Jones;2002-09-19 03:05:17 +0000;changed config.h defines to check for gcc3 and set definitions appropriately.

==

weave/blitz-20001213/blitz/config.h
==================
09d3a07;dmorrill;2002-09-18 22:44:33 +0000;Fixed problem with unix2dos file conversion routine

==

scipy_distutils/line_endings.py
==================
f3e6c37;Eric Jones;2002-09-18 21:17:46 +0000;MSVC did not have a linker_so variable defined.  This defines a dummy value for it (set to None) so that scipy_base can be built and used with MSVC.  Other pure C modules will also work with MSVC.  C/Fortran will have to wait so that we can work out any linker issues.

==

scipy_distutils/command/build_ext.py
==================
6cdc547;Eric Jones;2002-09-18 21:16:17 +0000;MSVC complained about 1.0/0.0 as a divide by 0 error.  The error went away if I made a variable named zero=0.0 and did 1/zero.

==

scipy_base/fastumathmodule.c
==================
819731a;Eric Jones;2002-09-18 06:55:07 +0000;changed testing module from scipy_base to scipy_test

==

scipy_base/__init__.py
scipy_base/function_base.py
scipy_base/index_tricks.py
scipy_base/limits.py
scipy_base/matrix_base.py
scipy_base/shape_base.py
scipy_base/tests/test_function_base.py
scipy_base/tests/test_index_tricks.py
scipy_base/tests/test_matrix_base.py
scipy_base/tests/test_shape_base.py
scipy_base/tests/test_type_check.py
scipy_base/type_check.py
weave/vtk_spec.py
==================
e7e3556;Eric Jones;2002-09-18 04:55:19 +0000;added a catchall converter that converts all items not caught by other converters to PyObject*
converted testing to use scipy_test.testing

==

weave/__init__.py
weave/ast_tools.py
weave/blitz_tools.py
weave/build_tools.py
weave/c_spec.py
weave/catalog.py
weave/ext_tools.py
weave/inline_tools.py
weave/setup.py
weave/size_check.py
weave/slice_handler.py
weave/standard_array_spec.py
weave/tests/test_c_spec.py
weave/tests/test_size_check.py
weave/tests/test_slice_handler.py
weave/tests/test_standard_array_spec.py
weave/tests/weave_test_utils.py
weave/wx_spec.py
==================
a72ece7;Eric Jones;2002-09-18 04:53:07 +0000;added configuration script to scipy_test

==

scipy_test/setup_scipy_test.py
scipy_test/testing.py
==================
ca2c1b5;Eric Jones;2002-09-18 03:36:35 +0000;added init.py file so that scipy_test becomes a package.

==

scipy_test/__init__.py
==================
70c9cae;Eric Jones;2002-09-18 03:34:40 +0000;added scipy_test (actually reinstated it) to the repository.  It now holds auto_test.py  testing.py and logging.py
In the long run, logging.py is going to be part of python, so it will disappear.  auto_test.py isn't getting used directly either, so its presence isn't absolutely necessary.  For now, we'll leave it.

==

scipy_test/auto_test.py
scipy_test/logging.py
scipy_test/testing.py
==================
8b32c67;Eric Jones;2002-09-17 22:59:14 +0000;merging differences between support for "catchall" converters and the vtk converter.

==

weave/converters.py
==================
f8fc892;Travis Oliphant;2002-09-17 21:49:39 +0000;Fixed unique function for Python 2.1

==

scipy_base/function_base.py
==================
0b94f01;Pearu Peterson;2002-09-17 18:38:05 +0000;This fixes infinite loop when testing weave

==

weave/__init__.py
==================
5d7c903;prabhu;2002-09-17 16:21:17 +0000;ENH: Updated to add the new VTK converter.

==

weave/converters.py
==================
3b2b316;prabhu;2002-09-17 16:14:47 +0000;NEW: Added a VTK type converter for weave.

==

weave/vtk_spec.py
==================
3bfc473;skip;2002-09-17 12:52:14 +0000;dolled up some of the comments

==

scipy_distutils/command/build_flib.py
==================
51b6df8;skip;2002-09-17 01:25:57 +0000;changes to get SciPy to build with Sun's Forte Fortran compilers.  I suspect there may be more changes in the near future.  The sun_fortran_compiler class seems a bit too complex to me.  In fact, it seems like it declares info for two or four compilers.  Should it be split into two or more classes?

==

scipy_distutils/command/build_flib.py
==================
ef494fe;skip;2002-09-16 20:45:55 +0000;The existing code couldn't possibly work on shared machines, as weave was trying to write to /tmp/pythonNM_intermediate for all users. These changes are aimed at fixing that problem.  An extra directory layer, currently defined by whoami() (new function) is inserted, e.g.,
    /tmp/skip/pythonNM_intermediate

Somebody with more cross-platform experience should check whoami() for
portability issues (does M$ have to fiddle everything they touch?).

Other related bits:

 * added create_dir() which will create a path, including any missing
   intermediate paths.

 * moved the tempfile import to the top level (function-level imports
   got much slower in Python 2.2, so are normally to be avoided).

 * dumped the os.access() calls in favor of a new is_writable()
   function which simply checks to see if it can create a file in the
   given directory.  access() is almost never what you want... ;-)
   is_writable() should also be checked for portability issues.

==

weave/catalog.py
==================
74944fa;skip;2002-09-16 20:22:52 +0000;fix typo in warning messages

==

weave/build_tools.py
==================
66d1a08;Eric Jones;2002-09-15 07:19:25 +0000;added some overloaded "=" methods for ListMmbr and DictMmbr classes so that assignment from standard C++ types was possible.  Now
a[0] = "hello";
a[1] = 1.3;
a[2] = 1;

should work for dicts and lists.  I think I will overload tuples also to do
this, although perhaps immutability says this shouldn't happen...

I expect this is still slow as Christmas compared to using the Python API.

==

weave/scxx/PWOImp.cpp
weave/scxx/PWOMSequence.h
weave/scxx/PWOMapping.h
weave/scxx/PWOSequence.h
==================
83e0c58;Pearu Peterson;2002-09-14 08:42:43 +0000;Introduced get_package_path function. It is meant to be used in <package>/tests/test_*.py files to set the package path. This will facilitate running tests both from the development tree as well as from installed package tree.

==

scipy_base/testing.py
==================
8851cdd;Eric Jones;2002-09-12 07:28:20 +0000;removed a few files from old version

==

weave/common_spec.py
weave/scalar_info.py
weave/scalar_spec.py
weave/sequence_spec.py
weave/unicode_spec.py
==================
2143f22;Eric Jones;2002-09-12 07:06:11 +0000;major rewrite of weave.
0.
The underlying library code is significantly re-factored and simpler. There used to be a xxx_spec.py and xxx_info.py file for every group of type conversion classes.  The spec file held the python code that handled the conversion and the info file had most of the C code templates that were generated.  This proved pretty confusing in practice, so the two files have mostly been merged into the spec file.

Also, there was quite a bit of code duplication running around.  The re-factoring was able to trim the standard conversion code base (excluding blitz and accelerate stuff) by about 40%.  This should be a huge maintainability and extensibility win.

1.
With multiple months of using Numeric arrays, I've found some of weave's "magic variable" names unwieldy and want to change them.  The following are the old declarations for an array x of Float32 type:

        PyArrayObject* x = convert_to_numpy(...);
        float* x_data = (float*) x->data;
        int*   _Nx = x->dimensions;
        int*   _Sx = x->strides;
        int    _Dx = x->nd;

The new declaration looks like this:

        PyArrayObject* x_array = convert_to_numpy(...);
        float* x = (float*) x->data;
        int*   Nx = x->dimensions;
        int*   Sx = x->strides;
        int    Dx = x->nd;

This is obviously not backward compatible, and will break some code (including a lot of mine).  It also makes inline() code more readable and natural to write.

2.
I've switched from CXX to Gordon McMillan's SCXX for list, tuples, and dictionaries.  I like CXX pretty well, but its use of advanced C++ (templates, etc.) caused some portability problems.  The SCXX library is similar to CXX but doesn't use templates at all.  This, like (1) is not an
API compatible change and requires repairing existing code.

I have also thought about boost python, but it also makes heavy use of templates.  Moving to SCXX gets rid of almost all template usage for the standard type converters which should help portability.  std::complex and std::string from the STL are the only templates left.  Of course blitz still uses templates in a major way so weave.blitz will continue to be hard on compilers.

I've actually considered scrapping the C++ classes for list, tuples, and
dictionaries, and just fall back to the standard Python C API because the classes are waaay slower than the raw API in many cases.  They are also more convenient and less error prone in many cases, so I've decided to stick with them.  The PyObject variable will always be made available for variable "x" under the name "py_x" for more speedy operations.  You'll definitely want to use these for anything that needs to be speedy.

3.
strings are converted to std::string now.  I found this to be the most useful type in for strings in my code.  Py::String was used previously.

4.
There are a number of reference count "errors" in some of the less tested conversion codes such as instance, module, etc.  I've cleaned most of these up.  I put errors in quotes here because I'm actually not positive that objects passed into "inline" really need reference counting applied to them.  The dictionaries passed in by inline() hold references to these objects so it doesn't seem that they could ever be garbage collected inadvertently.  Variables used by ext_tools, though, definitely need the reference counting done.  I don't think this is a major cost in speed, so it probably isn't worth getting rid of the ref count code.

5.
Unicode objects are now supported.  This was necessary to support rendering Unicode strings in the freetype wrappers for Chaco.

6.
blitz++ was upgraded to the latest CVS.  It compiles about twice as fast as the old blitz and looks like it supports a large number of compilers (though only gcc 2.95.3 is tested).  Compile times now take about 9 seconds on my 850 MHz PIII laptop.

==

weave/blitz-20001213/blitz/MAT-NOTE.gz
weave/blitz-20001213/blitz/Makefile.am
weave/blitz-20001213/blitz/Makefile.in
weave/blitz-20001213/blitz/applics.h
weave/blitz-20001213/blitz/array-impl.h
weave/blitz-20001213/blitz/array-old.h
weave/blitz-20001213/blitz/array.h
weave/blitz-20001213/blitz/array/Makefile.am
weave/blitz-20001213/blitz/array/Makefile.in
weave/blitz-20001213/blitz/array/asexpr.h
weave/blitz-20001213/blitz/array/bops.cc
weave/blitz-20001213/blitz/array/cartesian.h
weave/blitz-20001213/blitz/array/cgsolve.h
weave/blitz-20001213/blitz/array/complex.cc
weave/blitz-20001213/blitz/array/convolve.cc
weave/blitz-20001213/blitz/array/convolve.h
weave/blitz-20001213/blitz/array/cycle.cc
weave/blitz-20001213/blitz/array/domain.h
weave/blitz-20001213/blitz/array/et.h
weave/blitz-20001213/blitz/array/eval.cc
weave/blitz-20001213/blitz/array/expr.h
weave/blitz-20001213/blitz/array/fastiter.h
weave/blitz-20001213/blitz/array/funcs.h
weave/blitz-20001213/blitz/array/functorExpr.h
weave/blitz-20001213/blitz/array/geometry.h
weave/blitz-20001213/blitz/array/indirect.h
weave/blitz-20001213/blitz/array/interlace.cc
weave/blitz-20001213/blitz/array/io.cc
weave/blitz-20001213/blitz/array/iter.h
weave/blitz-20001213/blitz/array/map.h
weave/blitz-20001213/blitz/array/methods.cc
weave/blitz-20001213/blitz/array/misc.cc
weave/blitz-20001213/blitz/array/multi.h
weave/blitz-20001213/blitz/array/newbops.cc
weave/blitz-20001213/blitz/array/newet-macros.h
weave/blitz-20001213/blitz/array/newet.h
weave/blitz-20001213/blitz/array/ops.cc
weave/blitz-20001213/blitz/array/ops.h
weave/blitz-20001213/blitz/array/reduce.cc
weave/blitz-20001213/blitz/array/reduce.h
weave/blitz-20001213/blitz/array/resize.cc
weave/blitz-20001213/blitz/array/shape.h
weave/blitz-20001213/blitz/array/slice.h
weave/blitz-20001213/blitz/array/slicing.cc
weave/blitz-20001213/blitz/array/stencil-et.h
weave/blitz-20001213/blitz/array/stencilops.h
weave/blitz-20001213/blitz/array/stencils.cc
weave/blitz-20001213/blitz/array/stencils.h
weave/blitz-20001213/blitz/array/storage.h
weave/blitz-20001213/blitz/array/uops.cc
weave/blitz-20001213/blitz/array/where.h
weave/blitz-20001213/blitz/array/zip.h
weave/blitz-20001213/blitz/bench.cc
weave/blitz-20001213/blitz/bench.h
weave/blitz-20001213/blitz/benchext.cc
weave/blitz-20001213/blitz/benchext.h
weave/blitz-20001213/blitz/blitz.h
weave/blitz-20001213/blitz/bzdebug.h
weave/blitz-20001213/blitz/compiler.h
weave/blitz-20001213/blitz/config-ICL.h
weave/blitz-20001213/blitz/config-KCC.h
weave/blitz-20001213/blitz/config-SC4.0.h
weave/blitz-20001213/blitz/config-SGi.h
weave/blitz-20001213/blitz/config-g++2.7.2.h
weave/blitz-20001213/blitz/config-mwerks.h
weave/blitz-20001213/blitz/config-xlC.h
weave/blitz-20001213/blitz/etbase.h
weave/blitz-20001213/blitz/extremum.h
weave/blitz-20001213/blitz/funcs.h
weave/blitz-20001213/blitz/generate/Makefile.am
weave/blitz-20001213/blitz/generate/Makefile.in
weave/blitz-20001213/blitz/generate/arroperands.h
weave/blitz-20001213/blitz/generate/arroptuple.h
weave/blitz-20001213/blitz/generate/bzfstream.h
weave/blitz-20001213/blitz/generate/genarrbops.cpp
weave/blitz-20001213/blitz/generate/genarruops.cpp
weave/blitz-20001213/blitz/generate/genmatbops.cpp
weave/blitz-20001213/blitz/generate/genmathfunc.cpp
weave/blitz-20001213/blitz/generate/genmatuops.cpp
weave/blitz-20001213/blitz/generate/genpromote.cpp
weave/blitz-20001213/blitz/generate/genvecbops.cpp
weave/blitz-20001213/blitz/generate/genvecuops.cpp
weave/blitz-20001213/blitz/generate/genvecwhere.cpp
weave/blitz-20001213/blitz/generate/operands.h
weave/blitz-20001213/blitz/generate/operands2.h
weave/blitz-20001213/blitz/generate/optuple.h
weave/blitz-20001213/blitz/generate/optuple2.h
weave/blitz-20001213/blitz/indexexpr.h
weave/blitz-20001213/blitz/limits-hack.h
weave/blitz-20001213/blitz/listinit.h
weave/blitz-20001213/blitz/matbops.h
weave/blitz-20001213/blitz/matdiag.h
weave/blitz-20001213/blitz/matexpr.h
weave/blitz-20001213/blitz/matgen.h
weave/blitz-20001213/blitz/mathf2.h
weave/blitz-20001213/blitz/mathfunc.h
weave/blitz-20001213/blitz/matltri.h
weave/blitz-20001213/blitz/matref.h
weave/blitz-20001213/blitz/matrix.cc
weave/blitz-20001213/blitz/matrix.h
weave/blitz-20001213/blitz/matsymm.h
weave/blitz-20001213/blitz/mattoep.h
weave/blitz-20001213/blitz/matuops.h
weave/blitz-20001213/blitz/matutri.h
weave/blitz-20001213/blitz/memblock.cc
weave/blitz-20001213/blitz/memblock.h
weave/blitz-20001213/blitz/meta/Makefile.am
weave/blitz-20001213/blitz/meta/Makefile.in
weave/blitz-20001213/blitz/meta/dot.h
weave/blitz-20001213/blitz/meta/matassign.h
weave/blitz-20001213/blitz/meta/matmat.h
weave/blitz-20001213/blitz/meta/matvec.h
weave/blitz-20001213/blitz/meta/metaprog.h
weave/blitz-20001213/blitz/meta/product.h
weave/blitz-20001213/blitz/meta/sum.h
weave/blitz-20001213/blitz/meta/vecassign.h
weave/blitz-20001213/blitz/minmax.h
weave/blitz-20001213/blitz/mstruct.h
weave/blitz-20001213/blitz/numinquire.h
weave/blitz-20001213/blitz/numtrait.h
weave/blitz-20001213/blitz/ops.h
weave/blitz-20001213/blitz/prettyprint.h
weave/blitz-20001213/blitz/promote-old.h
weave/blitz-20001213/blitz/promote.h
weave/blitz-20001213/blitz/rand-dunif.h
weave/blitz-20001213/blitz/rand-normal.h
weave/blitz-20001213/blitz/rand-tt800.h
weave/blitz-20001213/blitz/rand-uniform.h
weave/blitz-20001213/blitz/random.h
weave/blitz-20001213/blitz/randref.h
weave/blitz-20001213/blitz/range.h
weave/blitz-20001213/blitz/reduce.h
weave/blitz-20001213/blitz/shapecheck.h
weave/blitz-20001213/blitz/tau.h
weave/blitz-20001213/blitz/timer.h
weave/blitz-20001213/blitz/tiny.h
weave/blitz-20001213/blitz/tinymat.h
weave/blitz-20001213/blitz/tinymatexpr.h
weave/blitz-20001213/blitz/tinymatio.cc
weave/blitz-20001213/blitz/tinyvec-et.h
weave/blitz-20001213/blitz/tinyvec.cc
weave/blitz-20001213/blitz/tinyvec.h
weave/blitz-20001213/blitz/tinyvecio.cc
weave/blitz-20001213/blitz/tinyveciter.h
weave/blitz-20001213/blitz/traversal.cc
weave/blitz-20001213/blitz/traversal.h
weave/blitz-20001213/blitz/tuning.h
weave/blitz-20001213/blitz/tvcross.h
weave/blitz-20001213/blitz/tvecglobs.h
weave/blitz-20001213/blitz/update.h
weave/blitz-20001213/blitz/vecaccum.cc
weave/blitz-20001213/blitz/vecall.cc
weave/blitz-20001213/blitz/vecany.cc
weave/blitz-20001213/blitz/vecbops.cc
weave/blitz-20001213/blitz/veccount.cc
weave/blitz-20001213/blitz/vecdelta.cc
weave/blitz-20001213/blitz/vecdot.cc
weave/blitz-20001213/blitz/vecexpr.h
weave/blitz-20001213/blitz/vecexprwrap.h
weave/blitz-20001213/blitz/vecglobs.cc
weave/blitz-20001213/blitz/vecglobs.h
weave/blitz-20001213/blitz/vecio.cc
weave/blitz-20001213/blitz/veciter.h
weave/blitz-20001213/blitz/vecmax.cc
weave/blitz-20001213/blitz/vecmin.cc
weave/blitz-20001213/blitz/vecnorm.cc
weave/blitz-20001213/blitz/vecnorm1.cc
weave/blitz-20001213/blitz/vecpick.cc
weave/blitz-20001213/blitz/vecpick.h
weave/blitz-20001213/blitz/vecpickio.cc
weave/blitz-20001213/blitz/vecpickiter.h
weave/blitz-20001213/blitz/vecsum.cc
weave/blitz-20001213/blitz/vector-et.h
weave/blitz-20001213/blitz/vector.cc
weave/blitz-20001213/blitz/vector.h
weave/blitz-20001213/blitz/vecuops.cc
weave/blitz-20001213/blitz/vecwhere.cc
weave/blitz-20001213/blitz/vecwhere.h
weave/blitz-20001213/blitz/zero.cc
weave/blitz-20001213/blitz/zero.h
weave/examples/binary_search.py
weave/examples/cast_copy_transpose.py
weave/examples/dict_sort.py
weave/examples/fibonacci.py
weave/examples/functional.py
weave/examples/increment_example.py
weave/examples/md5_speed.py
weave/examples/ramp.py
weave/examples/ramp2.py
weave/examples/support_code_example.py
weave/examples/tuple_return.py
weave/examples/vq.py
weave/examples/wx_example.py
weave/scxx/PWOBase.h
weave/scxx/PWOCallable.h
weave/scxx/PWOImp.cpp
weave/scxx/PWOMSequence.h
weave/scxx/PWOMapping.h
weave/scxx/PWONumber.h
weave/scxx/PWOSequence.h
weave/scxx/README.txt
weave/scxx/scxx.h
weave/tests/test_blitz_tools.py
weave/tests/test_c_spec.py
weave/tests/test_common_spec.py
weave/tests/test_ext_tools.py
weave/tests/test_inline_tools.py
weave/tests/test_scalar_spec.py
weave/tests/test_sequence_spec.py
weave/tests/test_string_spec.py
==================
d3a1627;Eric Jones;2002-09-12 06:54:21 +0000;major rewrite of weave.
0.
The underlying library code is significantly re-factored and simpler. There used to be a xxx_spec.py and xxx_info.py file for every group of type conversion classes.  The spec file held the python code that handled the conversion and the info file had most of the C code templates that were generated.  This proved pretty confusing in practice, so the two files have mostly been merged into the spec file.

Also, there was quite a bit of code duplication running around.  The re-factoring was able to trim the standard conversion code base (excluding blitz and accelerate stuff) by about 40%.  This should be a huge maintainability and extensibility win.

1.
With multiple months of using Numeric arrays, I've found some of weave's "magic variable" names unwieldy and want to change them.  The following are the old declarations for an array x of Float32 type:

        PyArrayObject* x = convert_to_numpy(...);
        float* x_data = (float*) x->data;
        int*   _Nx = x->dimensions;
        int*   _Sx = x->strides;
        int    _Dx = x->nd;

The new declaration looks like this:

        PyArrayObject* x_array = convert_to_numpy(...);
        float* x = (float*) x->data;
        int*   Nx = x->dimensions;
        int*   Sx = x->strides;
        int    Dx = x->nd;

This is obviously not backward compatible, and will break some code (including a lot of mine).  It also makes inline() code more readable and natural to write.

2.
I've switched from CXX to Gordon McMillan's SCXX for list, tuples, and dictionaries.  I like CXX pretty well, but its use of advanced C++ (templates, etc.) caused some portability problems.  The SCXX library is similar to CXX but doesn't use templates at all.  This, like (1) is not an
API compatible change and requires repairing existing code.

I have also thought about boost python, but it also makes heavy use of templates.  Moving to SCXX gets rid of almost all template usage for the standard type converters which should help portability.  std::complex and std::string from the STL are the only templates left.  Of course blitz still uses templates in a major way so weave.blitz will continue to be hard on compilers.

I've actually considered scrapping the C++ classes for list, tuples, and
dictionaries, and just fall back to the standard Python C API because the classes are waaay slower than the raw API in many cases.  They are also more convenient and less error prone in many cases, so I've decided to stick with them.  The PyObject variable will always be made available for variable "x" under the name "py_x" for more speedy operations.  You'll definitely want to use these for anything that needs to be speedy.

3.
strings are converted to std::string now.  I found this to be the most useful type in for strings in my code.  Py::String was used previously.

4.
There are a number of reference count "errors" in some of the less tested conversion codes such as instance, module, etc.  I've cleaned most of these up.  I put errors in quotes here because I'm actually not positive that objects passed into "inline" really need reference counting applied to them.  The dictionaries passed in by inline() hold references to these objects so it doesn't seem that they could ever be garbage collected inadvertently.  Variables used by ext_tools, though, definitely need the reference counting done.  I don't think this is a major cost in speed, so it probably isn't worth getting rid of the ref count code.

5.
Unicode objects are now supported.  This was necessary to support rendering Unicode strings in the freetype wrappers for Chaco.

6.
blitz++ was upgraded to the latest CVS.  It compiles about twice as fast as the old blitz and looks like it supports a large number of compilers (though only gcc 2.95.3 is tested).  Compile times now take about 9 seconds on my 850 MHz PIII laptop.

==

weave/__init__.py
weave/base_spec.py
weave/blitz_info.py
weave/blitz_spec.py
weave/blitz_tools.py
weave/c_spec.py
weave/code_blocks.py
weave/common_info.py
weave/conversion_code.py
weave/conversion_code_old.py
weave/converters.py
weave/cxx_info.py
weave/ext_tools.py
weave/inline_info.py
weave/inline_tools.py
weave/misc.py
weave/setup.py
weave/setup_weave.py
weave/slice_handler.py
weave/standard_array_info.py
weave/standard_array_spec.py
weave/swig_info.py
weave/unicode_info.py
weave/wx_info.py
weave/wx_spec.py
==================
6538641;Pearu Peterson;2002-09-11 14:05:13 +0000;Using jiffies from /proc/pid/stat when measuring benchmarks for more objective results (time.time is inaccurate when python process was suspended or got temporarily less CPU time etc.). On platforms where jiffies are not available, time.time is used as a next best option.

==

scipy_base/testing.py
==================
0ee977f;Pearu Peterson;2002-08-30 12:34:24 +0000;Fixed the order of fftw libraries

==

scipy_distutils/system_info.py
==================
e6612ba;Travis Oliphant;2002-08-28 07:05:55 +0000;Used dictionary keys to speed up unique algorithm.

==

scipy_base/function_base.py
==================
a1cc450;Pearu Peterson;2002-08-25 12:15:18 +0000;Applied Steve M. Robbins patches to serve SGI MIPS compilers. Minor other fixes.

==

scipy_base/__init__.py
scipy_base/_compiled_base.c
==================
ac14c95;Pearu Peterson;2002-08-23 15:49:58 +0000;Fixed djbfft_info. Changed the values of macros like SCIPY_FFTW_H from 1 to None.

==

scipy_distutils/system_info.py
==================
5e3b782;Pearu Peterson;2002-08-23 07:11:00 +0000;Fixed atlas_info: use lapack only from the place where atlas is.

==

scipy_distutils/sample_site.cfg
scipy_distutils/system_info.py
==================
e715aec;Pearu Peterson;2002-08-23 07:01:05 +0000;Using -fomit-frame-pointer in gcc FFLAGS

==

scipy_distutils/command/build_flib.py
scipy_distutils/misc_util.py
==================
8875658;Pearu Peterson;2002-08-23 07:00:01 +0000;Fixed a bug.

==

scipy_distutils/command/run_f2py.py
==================
28866ce;Pearu Peterson;2002-08-23 06:56:38 +0000;Introduced djbfft_info class (djbfft is faster than fftw but supports only N=2**m transforms where m=1..13). Splitted fftw_info into dfftw_info,sfftw_info,fftw_threads_info, etc.

==

scipy_distutils/system_info.py
==================
ecf3868;Travis Oliphant;2002-08-16 13:09:42 +0000;Added new tests to stats package.

==

scipy_base/_compiled_base.c
scipy_base/fastumath_nounsigned.inc
scipy_base/fastumath_unsigned.inc
scipy_base/fastumathmodule.c
scipy_base/function_base.py
scipy_base/setup_scipy_base.py
==================
c57dbdd;Pearu Peterson;2002-08-14 20:48:39 +0000;Checking for completeness of the lapack library when detecting atlas

==

scipy_distutils/system_info.py
==================
0439ef0;Travis Oliphant;2002-08-13 23:03:01 +0000;Added detrend to signal

==

scipy_base/function_base.py
scipy_base/shape_base.py
==================
6fd768e;Pearu Peterson;2002-08-11 21:35:23 +0000;Fixed a possible bug in compiler detection. --quite option is now effective also for run_f2py.

==

scipy_distutils/command/build_flib.py
scipy_distutils/command/run_f2py.py
==================
2aff0fb;Pearu Peterson;2002-08-11 11:30:30 +0000;Cleaned up scipy_distutils messages: less verbose but keeping important information, using self.announce instead of print (then setup.py --quiet works), yellow_text is used for commands, red_text for warnings and errors (rationale: colored output (if available) provides distinction between scipy_distutils and distutils messages). Moved colored terminal hooks to misc_util.

==

scipy_distutils/command/build_clib.py
scipy_distutils/command/build_ext.py
scipy_distutils/command/build_flib.py
scipy_distutils/command/run_f2py.py
scipy_distutils/misc_util.py
==================
9c373e1;Travis Oliphant;2002-08-09 16:30:51 +0000;Added Shapiro Wilk test for normality with test.

==

scipy_base/__init__.py
scipy_base/function_base.py
==================
be41396;Eric Jones;2002-07-19 21:52:54 +0000;Int8 arrays always caused exceptions because the type checking code was trying to match them against "char" arrays and the types didn't match.  The conversion type check code now treats the byte and char types as if they are equal.

==

weave/standard_array_info.py
==================
5cddedd;Eric Jones;2002-07-19 07:21:47 +0000;standard array conversions were not checking the array type.  As a result, code compiled for a float array would execute even if handed a int array. bad. bad. bad.  Type checks on standard array conversions are now done. Note, though, that standard array conversions don't check for array shape, so a 2D array handed into code originally compiled for a 3D array will execute just fine.  This is desired in some cases and not in others.  Its currently up to the user to protect against the undesired cases.

==

weave/blitz_info.py
weave/standard_array_info.py
weave/standard_array_spec.py
==================
c748934;Eric Jones;2002-07-17 06:14:06 +0000;Fixed INCREF bug reported by Matthias Heller that was causing this example to crash.

==

weave/examples/functional.py
==================
e6e0139;Eric Jones;2002-07-17 02:48:32 +0000;removed a debugging change I had made that specialized things to my machine.

==

weave/swig_info.py
==================
576fe7b;Eric Jones;2002-07-10 09:18:56 +0000;added support for unicode strings.

==

weave/converters.py
weave/unicode_info.py
weave/unicode_spec.py
==================
f7a43cc;Eric Jones;2002-07-09 06:54:27 +0000;fixed bug where exceptions during initializing variables could cause problems with during cleanup of variables that were not initialized. Now a flag is set for each variable when it is initialized and the clean up code is only executed for variables that have been initialized.
A init_flag() variable was added to the base_spec to help with the
above bug fix.

The SWIG_GetPtr method does some sophisticated type checking that
weave really doesn't need.  Most of this has been commented out
and a simple string comparison is done to make sure types are correct.

==

weave/base_spec.py
weave/ext_tools.py
weave/swig_info.py
==================
45494a3;Travis Oliphant;2002-07-02 03:53:37 +0000;Fixed read_array problems for Python 2.2, minor docstring editing.

==

scipy_base/index_tricks.py
==================
0ceba18;Pearu Peterson;2002-06-30 23:55:05 +0000;Fixed approx. 95 per cent of C compiler warnings. The rest require a bit more detailed investigation. Should we fix also Fortran compiler warnings? Maybe later...

==

scipy_base/type_check.py
==================
519e772;Pearu Peterson;2002-06-30 07:32:28 +0000;Fixed HAVE_INVERSE_HYPERBOLIC definition for Win32

==

scipy_base/fastumathmodule.c
==================
286affe;Travis Oliphant;2002-06-30 03:44:15 +0000;Added differentiate, central_diff_weights, zeropad functions.  Fixed bug in stats module.  Added more examples and text to tutorial.

==

scipy_base/__init__.py
scipy_base/function_base.py
scipy_base/index_tricks.py
scipy_base/scimath.py
scipy_base/shape_base.py
scipy_base/type_check.py
==================
f711f4f;Pearu Peterson;2002-06-29 22:48:31 +0000;Fixed asinh bug also in fatumath_unsigned.inc. Removed all compiler warnings.

==

scipy_base/fastumath_nounsigned.inc
scipy_base/fastumath_unsigned.inc
scipy_base/fastumathmodule.c
==================
58b81e5;Pearu Peterson;2002-06-29 21:40:53 +0000;Updated comments. Removed -lfortran from mips_fortran_compiler.libraries.

==

scipy_distutils/command/build_clib.py
scipy_distutils/command/build_flib.py
==================
0c117c6;Pearu Peterson;2002-06-29 20:20:53 +0000;Fixed bug in asinh.

==

scipy_base/fastumath_nounsigned.inc
==================
6bd95d1;Pearu Peterson;2002-06-29 19:57:18 +0000;Introduced blas_src_info for building BLAS library from sources if ATLAS or BLAS libraries are not available.

==

scipy_distutils/system_info.py
==================
efb1608;Pearu Peterson;2002-06-29 19:53:08 +0000;Disabled ranlib for MIPSPro compiler. Optimized ar-command cycle when splitting of arguments is required (nt and irix). Minor fixes with error handling.

==

scipy_distutils/command/build_flib.py
==================
0d87cce;Pearu Peterson;2002-06-29 15:16:42 +0000;Introduced lapack_src_info for compiling LAPACK from scipy/linalg setup scripts

==

scipy_distutils/sample_site.cfg
==================
b91d7d9;Pearu Peterson;2002-06-29 15:02:54 +0000;Introduced lapack_src_info for compiling LAPACK from scipy/linalg setup scripts

==

scipy_distutils/system_info.py
==================
7aaffc6;Eric Jones;2002-06-28 17:50:21 +0000;changed library_dir to library_dirs as it is used in the system_info.py file.
added example for SGI site configuration at the end of the file.

==

scipy_distutils/sample_site.cfg
==================
76fc2c0;dmorrill;2002-06-17 19:00:35 +0000;Fixed problem with 'os.uname' not being defined for win32

==

scipy_distutils/command/build_flib.py
==================
5461481;Eric Jones;2002-06-15 08:34:55 +0000;added Sun support to gcc/g77 that should be compatible with most /opt/sfw installs of open source tools on Sun.  You get a zillion undefiend symbols in libg2c.a if you don't specify -mimpure-text on the link line because libg2c has symbols in it that are defined in a shared library.  Without mimpure-text, gcc on Solaris considers undefined symbols in a static library as fatal errors when building a shared library.  mimpure-text tells the linker to ignore these errors and to go ahead and produce a .so file.
This seems to work for most of SciPy.  I'm still working through ATLAS stuff.

==

scipy_distutils/command/build_flib.py
==================
6f0da0e;Travis Oliphant;2002-06-09 04:44:19 +0000;Fixed filter_design bug.  Added unsigned support to fastumath if your Numeric has it.

==

scipy_base/fastumath_nounsigned.inc
scipy_base/fastumath_unsigned.inc
scipy_base/fastumathmodule.c
==================
3f41d8c;Eric Jones;2002-06-06 06:30:36 +0000;fixed bug in test.  an error was being thrown with the void value returned by throw_error instead of just calling throw_error.  This passed tests with MSVC but fails with mingw32.

==

weave/tests/test_inline_tools.py
==================
8d1be95;Pearu Peterson;2002-05-30 12:51:59 +0000;Restored ranlib as 'ar -s' in OS X is invalid

==

scipy_distutils/command/build_flib.py
==================
e8b1ec4;Pearu Peterson;2002-05-28 22:40:00 +0000;Applying Berthold's patch for digital_fortran_compiler with refactoring modifications, it needs testing.

==

scipy_distutils/command/build_flib.py
==================
09caaaf;Pearu Peterson;2002-05-28 12:55:13 +0000;Fixed import dependencies that failed in special situations like building locally

==

scipy_distutils/command/run_f2py.py
scipy_distutils/core.py
==================
93f5619;Pearu Peterson;2002-05-27 20:47:13 +0000;Removed redundant usage of the shortest_path function. Introduced few asserts.

==

scipy_distutils/system_info.py
==================
c4690cf;Pearu Peterson;2002-05-27 20:43:38 +0000;Fixed possible cause of the Win32 test failure; 'possible' because the scoreboard is not very informative if something fundamental fails. Added hooks to check the availability of g2c-pic. Fixed optimization flags for gcc 3.x.x.

==

scipy_distutils/command/build_flib.py
==================
25ca706;Pearu Peterson;2002-05-26 16:51:24 +0000;Impl. lapack and blas info hooks. Replaced static_first flag with search_static_first for site.cfg files and disabled it by default; in future search_static_first hooks may be removed unless it is proved to be useful. Removed the usage of extra_objects that was buggy from the beginning.

==

scipy_distutils/command/build_flib.py
scipy_distutils/sample_site.cfg
scipy_distutils/system_info.py
==================
675f967;Travis Oliphant;2002-05-22 22:21:55 +0000;Fixed weave examples vq.py and cast_copy_and_transpose.py --- they were not working due to some typos and unaccounted-for refactoring of SciPy.  Moved from PR import * to module scope.

==

scipy_base/type_check.py
weave/examples/cast_copy_transpose.py
weave/examples/vq.py
==================
fbf664a;Pearu Peterson;2002-05-22 20:36:55 +0000;Implemented more reliable hooks to determine whether Python stdout can support colored text. Many thanks to c.l.py.

==

scipy_distutils/command/build_flib.py
==================
a13b4a6;Pearu Peterson;2002-05-20 06:28:16 +0000;Updated comments about F compiler

==

scipy_distutils/command/build_flib.py
==================
3817c8d;dmorrill;2002-05-10 18:30:42 +0000;Made changes to allow SciPy to build correctly under cygwin

==

scipy_distutils/command/build_ext.py
scipy_distutils/command/build_flib.py
scipy_distutils/system_info.py
==================
4a7ef69;Pearu Peterson;2002-05-08 16:00:26 +0000;Added HP F90 compiler

==

scipy_distutils/command/build_flib.py
==================
3316dc6;Pearu Peterson;2002-05-07 21:20:54 +0000;Fixed fastumath imports. stats tests fail even with fastumath as math

==

scipy_base/testing.py
scipy_distutils/command/build_flib.py
==================
37af376;Pearu Peterson;2002-05-06 20:25:25 +0000;Fixed missing math import

==

scipy_base/testing.py
==================
40006b7;Pearu Peterson;2002-05-05 22:05:38 +0000;Introduced F compiler without any support for it because of it cannot compile fixed format F90 sources:(. Added hooks for colored messages for certain terminals, let me know if you hate it;)

==

scipy_distutils/command/build_flib.py
==================
b0e9c8f;Eric Jones;2002-05-03 04:13:54 +0000;auto_test now runs against 2.2.1/21.0 and 2.1.3/21.0 and 2.1.3/20.3.  Older Numeric versions are no longer tested.

==

scipy_distutils/auto_test.py
==================
b76d86f;Eric Jones;2002-05-03 04:12:12 +0000;fixed bug in auto_test that prevented it from detecting updates on scipy_snapshot added a check to see it the environment DISPLAY variable was set before running the xinfo stuff in xplt.  It was causing errors on telnet sessions that didn't have a display present.

==

scipy_distutils/auto_test.py
==================
e0403fd;Eric Jones;2002-05-03 03:27:23 +0000;changed g77 version checking from -v to --version.  This hopefully fixes problems on IRIX, but will disable some optimization flags on intel/amd linux machines when gcc 3.x.x is used.  We just need to find what the version number on the 3.x.x reported by g77 --version is to fix this.

==

scipy_distutils/command/build_flib.py
==================
ea80961;patmiller;2002-04-30 04:15:18 +0000;More modifications to allow instance attributes.

==

weave/accelerate_tools.py
weave/bytecodecompiler.py
==================
2dc10d9;Eric Jones;2002-04-29 16:43:28 +0000;converted wx_info to use wx232 -- it doesn't appear to need any libraries from the wxWindows installation.  I think it does still need the wx/wx.h file.
fixed converters to insert the wxpython converter at the front of the list to make sure it is checked before the instance converter is given a shot at the variable.

==

weave/converters.py
weave/wx_info.py
==================
904ca23;Travis Oliphant;2002-04-19 06:54:00 +0000;Added fairly complete PIL to Numeric converters using tostring() and fromstring()

==

scipy_base/index_tricks.py
scipy_base/limits.py
scipy_base/type_check.py
==================
45cb47b;Travis Oliphant;2002-04-13 20:56:32 +0000;Changed mathieu_A to mathieu_even_coef and mathieu_B to mathieu_odd_coef

==

scipy_base/polynomial.py
==================
bd759c9;Eric Jones;2002-04-12 20:09:50 +0000;script output is much less verbose now.  Instead of 700K files on complete tests, they are more like 18K.

==

scipy_distutils/auto_test.py
==================
50ab5c0;Eric Jones;2002-04-12 16:28:06 +0000;added testing log comment

==

scipy_distutils/auto_test.py
==================
a90a991;Eric Jones;2002-04-12 16:26:58 +0000;auto_test now mails to the scipy-testlog mailing lists.  Test files are about 350K right now.  We'll work to short them in the future.  Errors in the build process still result in a mail message to tell where the build process broke.

==

scipy_distutils/auto_test.py
==================
a9bd45e;Eric Jones;2002-04-12 04:01:19 +0000;auto_test is the begiinings of an automated test suite for scipy.  It downloads and builds python, scipy and all the dependencies (except atlas...).  It then sends email based on the results. It requires the logging.py file that hopefully will make it into the standard library.

==

scipy_distutils/auto_test.py
scipy_distutils/logging.py
==================
577d761;Pearu Peterson;2002-04-11 18:20:15 +0000;Enabled using ATLAS env.var. again and fixed typo in stats tests

==

scipy_distutils/system_info.py
==================
ec4b027;Eric Jones;2002-04-11 13:46:54 +0000;improved how error is thrown in test

==

weave/tests/test_inline_tools.py
==================
52a0610;Eric Jones;2002-04-11 13:34:18 +0000;fixed a test that was broken.  The test also points out that exceptions can be skipped with when the C++ code isn't constructed correctly.

==

weave/tests/test_inline_tools.py
==================
f12841a;Pearu Peterson;2002-04-09 17:38:40 +0000;Fixed typo in mconf_BE.h and limits import in plt

==

scipy_base/mconf_lite_BE.h
==================
5e2f226;Eric Jones;2002-04-07 23:41:48 +0000;setup atlas directory search path so that prefix path is searched before /usr/lib so that "locally" installed atlas libraries are found before system libraries.  Note this only works if python is also locally installed.

==

scipy_distutils/system_info.py
==================
35da74a;Eric Jones;2002-04-07 22:19:56 +0000;LGPL --> BSD license conversion

==

scipy_distutils/command/cpuinfo.py
scipy_distutils/system_info.py
==================
17273e9;Eric Jones;2002-04-07 21:10:11 +0000;added try/except tests for Numeric back into testing.py so that it can be used external to scipy and when Numeric is not available.

==

scipy_base/testing.py
==================
e2a37c8;Eric Jones;2002-04-07 20:03:47 +0000;added option for compile arguments for fastumath.  It is empty for now, but may be helpful for ng gcc versions of fastumath compatible with MSVC versions of Numeric.  For now, Travis O. has modified fastumath to solve the problem.

==

scipy_base/setup_scipy_base.py
==================
c3a596e;Pearu Peterson;2002-04-07 15:14:07 +0000;Removing obsolete scipy_test

==

scipy_test/__init__.py
scipy_test/scipy_test.py
scipy_test/setup.py
scipy_test/setup_scipy_test.py
==================
d7c565a;Pearu Peterson;2002-04-07 15:09:48 +0000;Removing obsolete hooks

==

scipy_distutils/fftw_info.py
==================
8a040fa;Pearu Peterson;2002-04-07 15:03:50 +0000;Replacing linalg with linalg2: linalg->linalg/linalg1 and linalg2->linalg

==

scipy_distutils/atlas_info.py
scipy_distutils/system_info.py
scipy_distutils/x11_info.py
==================
de1ef48;Pearu Peterson;2002-04-07 10:08:03 +0000;Cleaned up testing.py

==

scipy_base/testing.py
==================
7cda866;Pearu Peterson;2002-04-07 09:49:46 +0000;Remove path to weave after lib2def is imported

==

scipy_distutils/mingw32_support.py
==================
ed32f56;Pearu Peterson;2002-04-06 12:32:37 +0000;Fixed testing interface for linalg2, in testing local paths are inserted to first position instead of last

==

scipy_base/testing.py
==================
525bfa8;Eric Jones;2002-04-05 23:20:42 +0000;added an attempt to fix problem with the name cc being used for gcc on FreeBSD.  THis causes weave to fail because it needs to link with g++.

==

weave/build_tools.py
==================
38dbd4b;Travis Oliphant;2002-04-05 17:06:24 +0000;Fixed scipy_base.fastumath

==

scipy_base/setup_scipy_base.py
==================
17ea2ea;Travis Oliphant;2002-04-05 17:04:48 +0000;Changed == None to is None

==

scipy_distutils/mingw32_support.py
weave/accelerate_tools.py
weave/build_tools.py
weave/bytecodecompiler.py
weave/lib2def.py
weave/tests/test_catalog.py
==================
ad8ff90;Travis Oliphant;2002-04-05 11:28:30 +0000;Fixed random buglets.

==

scipy_base/__init__.py
scipy_base/function_base.py
scipy_base/limits.py
scipy_base/matrix_base.py
scipy_base/scimath.py
scipy_base/setup_scipy_base.py
scipy_base/testing.py
scipy_base/type_check.py
scipy_test/scipy_test.py
weave/blitz_tools.py
weave/size_check.py
weave/tests/test_ast_tools.py
weave/tests/test_blitz_tools.py
weave/tests/test_size_check.py
weave/tests/test_standard_array_spec.py
==================
461dee0;Travis Oliphant;2002-04-05 01:48:14 +0000;Removed ieee_754.py (again...)

==

scipy_base/ieee_754.py
==================
31773e7;Travis Oliphant;2002-04-04 22:05:49 +0000;Removed dependence on ufuncobject PyUFunc_DD type functions which can require structure-returning functions to be passed between differently-compiled code.

==

scipy_base/fastumathmodule.c
scipy_base/ieee_754.py
==================
a039b9c;Travis Oliphant;2002-04-04 06:01:31 +0000;Fixed spheroidal wave functions. Added lu_solve, lu_factor, cho_solve, cho_factor.  Changed help to info if help is already defined.

==

scipy_base/ieee_754.py
scipy_base/limits.py
scipy_base/mconf_lite_BE.h
scipy_base/mconf_lite_LE.h
==================
157a626;Travis Oliphant;2002-04-03 22:18:58 +0000;Deleted transform_base (again?).

==

scipy_base/fastumathmodule.c
scipy_base/transform_base.py
==================
14e7741;Eric Jones;2002-04-03 22:02:48 +0000;removed import of transform_base.  somehow, it snuck in here.

==

scipy_base/__init__.py
scipy_base/limits.py
==================
f931eed;Pearu Peterson;2002-04-03 21:59:19 +0000;Fixed pathsep problem

==

scipy_distutils/system_info.py
==================
6983f43;Travis Oliphant;2002-04-03 21:12:50 +0000;Changed isposinf and isneginf.

==

scipy_base/__init__.py
scipy_base/convenience.py
scipy_base/fastumathmodule.c
scipy_base/testing.py
scipy_base/type_check.py
==================
db8bb34;Travis Oliphant;2002-04-03 20:25:53 +0000;Moved isnan and friends from cephes to special.  Made comparison functions return UBYTES. Added Complex comparison functions which work on real parts.

==

scipy_base/__init__.py
scipy_base/convenience.py
scipy_base/fastumathmodule.c
scipy_base/function_base.py
scipy_base/isnan.c
scipy_base/matrix_base.py
scipy_base/mconf_lite_BE.h
scipy_base/mconf_lite_LE.h
scipy_base/setup_scipy_base.py
scipy_base/tests/test_type_check.py
scipy_base/transform_base.py
scipy_base/type_check.py
weave/accelerate_tools.py
weave/ast_tools.py
weave/misc.py
==================
694e465;Eric Jones;2002-04-03 18:32:23 +0000;isnan was returning arrays from scalars.  Now it returns scalars for scalar inputs

==

scipy_base/type_check.py
==================
a01f9c1;Eric Jones;2002-04-03 16:20:27 +0000;test() was ignoring level argument

==

weave/__init__.py
==================
53b06c3;Eric Jones;2002-04-03 14:20:51 +0000;added import of rand

==

scipy_base/tests/test_index_tricks.py
==================
44869d6;Eric Jones;2002-04-03 13:59:07 +0000;added test methods for scipy_base

==

scipy_base/tests/test_function_base.py
scipy_base/tests/test_index_tricks.py
scipy_base/tests/test_limits.py
scipy_base/tests/test_matrix_base.py
scipy_base/tests/test_shape_base.py
scipy_base/tests/test_type_check.py
==================
8537109;Eric Jones;2002-04-03 05:03:49 +0000;removed transform_base files -- all routines added fftpack.fft

==

scipy_base/transform_base.py
==================
3c2d8ed;Eric Jones;2002-04-03 05:02:27 +0000;added index_tricks tests

==

scipy_base/index_tricks.py
==================
0d0d0eb;Eric Jones;2002-04-03 04:40:11 +0000;added helpmod.py and fixed a few import errors

==

scipy_base/type_check.py
==================
c117d31;Eric Jones;2002-04-03 03:41:30 +0000;r1array and r2array converted to atleast_1d and atleast_2d

==

weave/__init__.py
weave/ast_tools.py
weave/blitz_tools.py
weave/build_tools.py
weave/catalog.py
weave/common_spec.py
weave/ext_tools.py
weave/inline_tools.py
weave/scalar_spec.py
weave/sequence_spec.py
weave/setup.py
weave/size_check.py
weave/slice_handler.py
weave/standard_array_spec.py
weave/tests/test_scalar_spec.py
weave/tests/test_size_check.py
weave/tests/test_slice_handler.py
weave/tests/test_standard_array_spec.py
weave/tests/weave_test_utils.py
weave/wx_spec.py
==================
b6c68d6;Eric Jones;2002-04-03 02:58:40 +0000;added transform files -- they can be moved to fft whenever

==

scipy_base/transform_base.py
==================
19cf056;Eric Jones;2002-04-03 00:20:22 +0000;fixed import from utility -> type_check error

==

scipy_base/limits.py
==================
409b213;Eric Jones;2002-04-03 00:14:31 +0000;added temp fix for Travis O's machine

==

scipy_base/ieee_754.py
==================
3438848;Eric Jones;2002-04-02 23:29:48 +0000;removing a few files that were placed here temporarily

==

scipy_base/convenience.py
scipy_base/helpmod.py
scipy_base/utility.py
==================
fa45897;Eric Jones;2002-04-02 23:27:28 +0000;removed functions specific to linalg

==

scipy_base/matrix_base.py
==================
f897e1f;Eric Jones;2002-04-02 23:13:09 +0000;major reorg of scipy_base -- initial checkin

==

scipy_base/__init__.py
scipy_base/function_base.py
scipy_base/ieee_754.py
scipy_base/index_tricks.py
scipy_base/matrix_base.py
scipy_base/polynomial.py
scipy_base/scimath.py
scipy_base/shape_base.py
scipy_base/testing.py
scipy_base/type_check.py
==================
5dcb208;Travis Oliphant;2002-04-02 08:18:44 +0000;Finished special functions. (Added orthogonal polynomials).

==

scipy_base/__init__.py
scipy_base/polynomial.py
scipy_base/scimath.py
==================
5082215;Pearu Peterson;2002-04-01 23:28:37 +0000;Applying David M. Cooke's patch with some modifications

==

scipy_distutils/sample_site.cfg
scipy_distutils/system_info.py
==================
c382384;Travis Oliphant;2002-04-01 19:33:48 +0000;More special functions. Cleaned up use of limits. Added __all__ to limits.

==

scipy_base/limits.py
scipy_base/scimath.py
==================
42cec83;Eric Jones;2002-04-01 16:14:02 +0000;fixed a import scipy call that shouldn't be there.  Started converting to use scipy_base.testing

==

scipy_base/__init__.py
scipy_base/convenience.py
scipy_base/limits.py
scipy_base/setup_scipy_base.py
scipy_base/utility.py
==================
2a66bd7;Eric Jones;2002-04-01 15:20:21 +0000;changed limits.py so that its contents are no longer imported into scipy_base's namespace.

==

scipy_base/__init__.py
==================
3e03aaf;Eric Jones;2002-04-01 13:57:48 +0000;moved scipy_test into scipy_base and renamed it.  It shouldn't be automatically imported into scipy_base namespace since it is generally only used when testing code.

==

scipy_base/testing.py
==================
1af7875;Eric Jones;2002-04-01 13:35:36 +0000;added limits.py to scipy_base.  It looks like Travis O. began this process, but didn't quite get to checking it in.  I used the 1.13 version from the attic in scipy (the latest version there).  Hope that is the right one.

==

scipy_base/limits.py
==================
14983d9;Travis Oliphant;2002-03-31 07:04:21 +0000;More progress in finishing cephes to include specfun.

==

scipy_base/utility.py
==================
3410486;Travis Oliphant;2002-03-30 00:56:17 +0000;Move limits.py, fastumath

==

scipy_base/fastumathmodule.c
==================
8f78399;Travis Oliphant;2002-03-30 00:51:03 +0000;Added missing files.

==

scipy_base/setup_scipy_base.py
==================
7c4c41e;Travis Oliphant;2002-03-30 00:47:33 +0000;Moved limits.py to scipy_base

==

scipy_base/__init__.py
==================
1e175b8;Travis Oliphant;2002-03-30 00:45:45 +0000;Changed references to fastumath to scipy_base.fastumath

==

weave/blitz_tools.py
weave/size_check.py
weave/tests/test_ast_tools.py
weave/tests/test_blitz_tools.py
weave/tests/test_size_check.py
weave/tests/test_standard_array_spec.py
==================
0562713;Travis Oliphant;2002-03-30 00:02:58 +0000;Refactored to create scipy_base.

==

scipy_base/__init__.py
scipy_base/convenience.py
scipy_base/helpmod.py
scipy_base/polynomial.py
scipy_base/scimath.py
scipy_base/utility.py
scipy_test/setup_scipy_test.py
==================
b539116;Pearu Peterson;2002-03-26 13:08:06 +0000;Applied fixes for sun compiler from Berthold H�llmann.

==

scipy_distutils/command/build_flib.py
==================
1360974;Pearu Peterson;2002-03-24 13:30:03 +0000;Fixed the order of atlas libs for debian woody

==

scipy_distutils/system_info.py
==================
c68907a;jswhit;2002-03-23 14:07:57 +0000;changes for MacOS X compatibility

==

scipy_distutils/command/build_clib.py
scipy_distutils/command/build_flib.py
==================
f977db5;Pearu Peterson;2002-03-23 08:13:04 +0000;Impl. debian specific (but general) atlas finding hooks

==

scipy_distutils/command/run_f2py.py
scipy_distutils/system_info.py
==================
b1da40a;Eric Jones;2002-03-22 23:02:38 +0000;added a missing space between preprocessor options that popped up in the Absoft compiler

==

scipy_distutils/command/build_flib.py
==================
0fed82b;Pearu Peterson;2002-03-05 16:12:39 +0000;Introduced ScipyTestCase with timing hooks

==

scipy_test/scipy_test.py
==================
cf5035a;Pearu Peterson;2002-03-04 13:52:12 +0000;Fixed building extension modules from fortran sources

==

scipy_distutils/command/run_f2py.py
==================
a0d6e39;Pearu Peterson;2002-03-03 19:30:38 +0000;Subclassed fortran_compiler_base to CCompiler, fortran compiler gets now also -I -D -U options

==

scipy_distutils/command/build_ext.py
scipy_distutils/command/build_flib.py
scipy_distutils/command/run_f2py.py
==================
6e83d28;Eric Jones;2002-03-03 11:43:27 +0000;system_info was setting include_dirs to a string instead of to a list.  This broke win32 builds of linalg2.  Converted to a list.

==

scipy_distutils/system_info.py
==================
241b168;Eric Jones;2002-03-03 11:18:15 +0000;fixed typo in variable name for setting library_dirs

==

scipy_distutils/command/build_ext.py
==================
b8eb100;Eric Jones;2002-03-03 11:12:14 +0000;added a routine to allow using the standard set of Fortran compilers with mingw32 instead of only allowing g77

==

scipy_distutils/mingw32_support.py
==================
85943af;patmiller;2002-03-03 07:02:48 +0000;Loops and 2D Numpy arrays (getitem and setitem).  Still issues with refcounting and really no safety net, but enough to demonstrate some speed.

==

weave/accelerate_tools.py
weave/bytecodecompiler.py
==================
ebe901b;Pearu Peterson;2002-03-02 09:18:01 +0000;Minor enhancments

==

scipy_distutils/misc_util.py
==================
51f44ff;Pearu Peterson;2002-03-01 21:59:29 +0000;Added prefix for fftw search path

==

scipy_distutils/system_info.py
==================
6c6d36a;Pearu Peterson;2002-03-01 17:02:10 +0000;Introduced PostponedException

==

scipy_distutils/misc_util.py
==================
5c232de;Pearu Peterson;2002-03-01 16:56:38 +0000;Introduced PostponedException

==

scipy_distutils/misc_util.py
==================
b25fc06;patmiller;2002-03-01 07:01:21 +0000;Rudimentary loops (range and xrange).  Really good speedups so far

==

weave/accelerate_tools.py
weave/bytecodecompiler.py
==================
956709d;Pearu Peterson;2002-02-28 22:23:14 +0000;Introduced NotFoundError exceptions with informative doc strings

==

scipy_distutils/atlas_info.py
scipy_distutils/command/run_f2py.py
scipy_distutils/system_info.py
==================
af4d15b;Eric Jones;2002-02-27 06:20:19 +0000;fixed a problem with non-breaking spaces not terminated with ';' that screwed up Mozilla

==

weave/doc/tutorial.html
==================
a66dce5;Eric Jones;2002-02-26 19:01:12 +0000;fixed missing , typo that broke module import/reload/test in some situations (it looked like it should break all situations)...

==

scipy_test/scipy_test.py
==================
98b313f;patmiller;2002-02-25 05:44:26 +0000;Some hacks to get NumPy working (arrgh!!  import_array() call required!).  Still not quite ready for prime time (though getitem works on Numeric arrays).  Still have to think through how to deal with explict reference counting.  It is likely better to test for contiguous arrays and convert to a int* (though we lose binops!).

==

weave/accelerate_tools.py
weave/bytecodecompiler.py
==================
421cba8;Pearu Peterson;2002-02-23 10:51:19 +0000;Py 2.0 support

==

scipy_distutils/misc_util.py
==================
75d3486;Pearu Peterson;2002-02-23 09:46:27 +0000;Python 2.0 support

==

scipy_distutils/command/build.py
scipy_distutils/command/build_ext.py
scipy_distutils/command/run_f2py.py
scipy_distutils/core.py
scipy_distutils/misc_util.py
==================
c22540a;Pearu Peterson;2002-02-22 16:43:52 +0000;Applied system_info hooks to scipy. Win32 support is still open.

==

scipy_distutils/atlas_info.py
scipy_distutils/command/build_ext.py
scipy_distutils/command/build_flib.py
scipy_distutils/system_info.py
==================
06a9f21;Pearu Peterson;2002-02-22 15:47:33 +0000;Fixed bugs, introduced get_info function

==

scipy_distutils/system_info.py
==================
0ae7d41;Pearu Peterson;2002-02-21 22:10:56 +0000;Impl. atlas_info, fftw_info classes

==

scipy_distutils/atlas_info.py
scipy_distutils/system_info.py
==================
b928b92;prabhu;2002-02-20 19:01:10 +0000;Allowing for wrong directories to be mentioned in library_path.

==

scipy_distutils/atlas_info.py
==================
19ad2a8;Travis Oliphant;2002-02-20 18:46:07 +0000;Fixed bug in scipy_distutils -- extra_linker_arguments was the incorrect variable in system_info.  Also, changed library_path at the top of atlas_info to None so that the list would be searched.

==

scipy_distutils/atlas_info.py
scipy_distutils/system_info.py
==================
a9e4590;Pearu Peterson;2002-02-20 18:14:13 +0000;Impl. system_info and x11_info

==

scipy_distutils/misc_util.py
scipy_distutils/system_info.py
==================
1fb3905;Pearu Peterson;2002-02-20 15:33:06 +0000;Finalized scipy version hooks

==

scipy_distutils/__version__.py
scipy_distutils/atlas_info.py
scipy_distutils/misc_util.py
==================
64ffff9;Pearu Peterson;2002-02-19 17:33:57 +0000;Fixed bug in build_ext.py

==

scipy_distutils/command/build_ext.py
==================
5ba533b;Eric Jones;2002-02-19 10:35:37 +0000;major overhaul to testing framework.  module_xxx.test() now takes a 'level' argument to specify how thorough the testing should be.  Level 1 is the least thorough, and only runs rapid tests (as specified by the test writer) on the module/package.  level=10 is the most thorough testing.  Any value between 1 and 10 can be used.  I'm currently using 1, 5, and 10 for most of my tests, but others may wish to use more fine grained settings.

==

scipy_test/scipy_test.py
weave/__init__.py
weave/ast_tools.py
weave/blitz_tools.py
weave/build_tools.py
weave/catalog.py
weave/common_spec.py
weave/ext_tools.py
weave/inline_tools.py
weave/scalar_spec.py
weave/sequence_spec.py
weave/size_check.py
weave/slice_handler.py
weave/standard_array_spec.py
weave/tests/test_ast_tools.py
weave/tests/test_blitz_tools.py
weave/tests/test_build_tools.py
weave/tests/test_catalog.py
weave/tests/test_common_spec.py
weave/tests/test_ext_tools.py
weave/tests/test_inline_tools.py
weave/tests/test_scalar_spec.py
weave/tests/test_sequence_spec.py
weave/tests/test_size_check.py
weave/tests/test_slice_handler.py
weave/tests/test_standard_array_spec.py
weave/tests/test_string_spec.py
weave/tests/test_wx_spec.py
weave/wx_spec.py
==================
04891cf;Eric Jones;2002-02-19 09:01:03 +0000;changed references to scipy.scipy_test to scipy_test.

==

weave/tests/test_scalar_spec.py
weave/tests/test_size_check.py
weave/tests/test_slice_handler.py
weave/tests/test_standard_array_spec.py
==================
22dd771;Eric Jones;2002-02-19 08:51:37 +0000;The import method in the testing methods was causing an infinite loop when running test suites.  The new approach is less general, but it does work.

==

weave/__init__.py
==================
1f880da;Eric Jones;2002-02-19 07:31:04 +0000;When Fortran compilers didn't specify a shared library, the Fortran specific libraries were linked in.  The additions hopefully take care of this.

==

scipy_distutils/command/build_ext.py
==================
0894dd3;patmiller;2002-02-19 04:46:38 +0000;Very prototypical version of weave.accelerate This one is sensitive to argument types and chooses the appropriate function.  It includes functionality to allow
foo = weave.accelerate(foo)
foo_int = foo.sample(0) # arguments are for type sampling only...
foo_double = foo.sample(0.0)

Numeric is still hosed (Dying on PyArray_Check of all things! --
It is trying to pull in the C API array instead of using the
normal type checking mechanism (ends up using a NULL pointer))

No tests as yet.  I'll build a unittest compatible version for
the simple test.  Current "super" function object is about
10 times more overhead to check function types.  We may do
well to pull that into one generic mega-test inside the wrapper
code eventually.  The "accelerated" generic version of a+b is 10
times slower than native.  The full accelerated version is 2x
faster (hey -- it's a+b what do you want!)

==

weave/__init__.py
weave/accelerate_tools.py
weave/bytecodecompiler.py
==================
9ae4d9e;Pearu Peterson;2002-02-17 23:23:07 +0000;Introduced x11_info and fixed the inefficiency of xplt setup

==

scipy_distutils/__version__.py
scipy_distutils/x11_info.py
==================
2dfed37;Pearu Peterson;2002-02-17 18:59:25 +0000;CVS state is now sdist-build-import'able

==

scipy_distutils/__version__.py
scipy_distutils/command/build_ext.py
scipy_distutils/command/build_py.py
scipy_distutils/command/run_f2py.py
scipy_distutils/misc_util.py
weave/setup_weave.py
==================
66496b3;prabhu;2002-02-17 18:07:21 +0000;Fixed trivial bug that prevented setup.py from running at all.

==

scipy_distutils/misc_util.py
==================
5d22e0e;Pearu Peterson;2002-02-17 12:24:36 +0000;Added opt. parent_name argument to default_config_dict

==

scipy_distutils/__version__.py
scipy_distutils/command/sdist.py
scipy_distutils/misc_util.py
==================
c81f4e8;Pearu Peterson;2002-02-17 11:00:18 +0000;Made locally buildable

==

weave/setup_weave.py
==================
d17624c;Pearu Peterson;2002-02-17 10:55:37 +0000;added optional name argument to default_config_dict so that sdist can be used locally

==

scipy_distutils/__version__.py
scipy_distutils/command/build_clib.py
scipy_distutils/command/build_flib.py
scipy_distutils/misc_util.py
==================
1a0784a;Pearu Peterson;2002-02-17 09:41:24 +0000;Fixed sdist

==

scipy_distutils/command/build_ext.py
scipy_distutils/command/sdist.py
==================
1ba73fe;Pearu Peterson;2002-02-17 08:17:42 +0000;Added fcompiler libs to ext libs list when needed

==

scipy_distutils/atlas_info.py
==================
880f4ce;Pearu Peterson;2002-02-17 08:10:03 +0000;Added fcompiler libs to ext libs list when needed

==

scipy_distutils/__version__.py
scipy_distutils/atlas_info.py
scipy_distutils/command/build_ext.py
scipy_distutils/command/build_flib.py
==================
280b6f2;Eric Jones;2002-02-14 22:29:01 +0000;several bug fixes for problems introduced in renaming of classes

==

weave/blitz_tools.py
weave/inline_tools.py
weave/sequence_spec.py
==================
635ec72;Eric Jones;2002-02-14 21:22:22 +0000;major refactoring -- renamed _specification classes to _converter.  Moved all conversion lists to the converters.py module

==

weave/base_spec.py
weave/blitz_spec.py
weave/blitz_tools.py
weave/common_spec.py
weave/converters.py
weave/examples/cast_copy_transpose.py
weave/examples/vq.py
weave/ext_tools.py
weave/inline_tools.py
weave/scalar_spec.py
weave/sequence_spec.py
weave/standard_array_spec.py
weave/tests/test_common_spec.py
weave/tests/test_ext_tools.py
weave/tests/test_scalar_spec.py
weave/tests/test_sequence_spec.py
weave/tests/test_standard_array_spec.py
weave/tests/test_string_spec.py
weave/tests/test_wx_spec.py
weave/wx_spec.py
==================
3e45866;Pearu Peterson;2002-02-14 20:36:28 +0000;Forgot minor code fragment for prev. fix

==

scipy_distutils/__version__.py
scipy_distutils/command/build_ext.py
==================
d704859;Pearu Peterson;2002-02-14 20:23:46 +0000;Fixed build_ext to add ext.name to library list, if required

==

scipy_distutils/__version__.py
scipy_distutils/command/build_ext.py
==================
71100a2;Eric Jones;2002-02-14 19:31:20 +0000;some code cleanup after template support for scalars removed.

==

weave/scalar_spec.py
==================
958af34;Eric Jones;2002-02-14 08:17:04 +0000;adding support for instance variables and a few bug cleanups

==

weave/common_spec.py
weave/conversion_code.py
weave/ext_tools.py
weave/standard_array_info.py
==================
e0e4a3f;Pearu Peterson;2002-02-13 21:53:27 +0000;impl. linking fortran libs only on demand

==

scipy_distutils/command/build_ext.py
scipy_distutils/command/build_flib.py
scipy_distutils/misc_util.py
==================
eb18cbf;Pearu Peterson;2002-02-13 10:25:36 +0000;added docs for get_version

==

scipy_distutils/misc_util.py
==================
45819f9;Eric Jones;2002-02-13 08:28:22 +0000;removed template code from use for scalar conversions.  Template versions were moved into blitz support stuff because that is the only place they are utilized.

==

weave/blitz_info.py
weave/common_info.py
weave/conversion_code.py
weave/examples/cast_copy_transpose.py
weave/scalar_info.py
weave/scalar_spec.py
==================
fdb5106;Eric Jones;2002-02-12 23:47:45 +0000;fixed a naming error of compiler->weave

==

scipy_distutils/mingw32_support.py
==================
51b5136;Travis Vaught;2002-02-01 16:43:49 +0000;line ending cleanup

==
==================
c604a38;Eric Jones;2002-01-22 22:27:48 +0000;bumped version number to 0.2.3

==

weave/setup.py
==================
227c397;Eric Jones;2002-01-22 20:43:22 +0000;several issues with tuple,dict,and list conversions were solved.  Also, NameError is now caught and checked for ConversionError in inline_tools.  This can be an issue when something like inline("",['a']) is called and then inline("",['b']) is called.  It hadn't occured to me that the names had to be the same from call to call, but I guess they do or we get a recompile.

==

weave/inline_info.py
weave/inline_tools.py
weave/sequence_spec.py
==================
e03b4d8;Eric Jones;2002-01-22 20:37:01 +0000;added a few tests to catch problems in sequence conversions

==

weave/tests/test_sequence_spec.py
==================
ed00c6f;Eric Jones;2002-01-22 19:14:04 +0000;added macros for convert_to_list, etc.  Somehow, these had been left out in the previous changes.

==

weave/cxx_info.py
==================
7a77037;Eric Jones;2002-01-21 04:39:04 +0000;added assert_approx_equal to compare two numbers up to some significant digit.  Contributed by Louis Luangkesorn

==

scipy_test/scipy_test.py
==================
8d5d89d;Eric Jones;2002-01-20 03:39:14 +0000;fixing namespace issue for std::complex -- how did it ever wrok before?

==

weave/blitz_info.py
==================
a38603f;Eric Jones;2002-01-19 04:58:51 +0000;conversion of blitz stuff to handle Aborted completed.  Had to mess with some code I didn't want to because of template issues, but that is the breaks.

==

weave/blitz_info.py
weave/blitz_spec.py
==================
dccec0d;Eric Jones;2002-01-19 04:40:11 +0000;a few (broken) fixes for blitz.  Still in progress

==

weave/blitz_info.py
weave/blitz_spec.py
==================
5ad4488;Eric Jones;2002-01-19 03:38:01 +0000;converted array conversion checks to use classes so that we wouldn't get the dreaded Abort that occurs with exceptions in functions.  This is silly, but it works.

==

weave/standard_array_info.py
==================
29583b1;Eric Jones;2002-01-17 18:41:07 +0000;fixed error introduced in last change

==

weave/tests/test_blitz_tools.py
==================
9ac0623;Eric Jones;2002-01-17 18:39:33 +0000;slightly changed output from one test

==

weave/tests/test_ext_tools.py
==================
5e9fe5d;Eric Jones;2002-01-17 18:37:46 +0000;turned off verbosity in blitz tests so that testing didn't spew so much stuff.

==

weave/tests/test_blitz_tools.py
==================
d6ea23e;Eric Jones;2002-01-17 18:33:19 +0000; fixed const char* in standard_array_info.py

==

weave/standard_array_info.py
==================
0c8b489;Eric Jones;2002-01-17 18:28:41 +0000; changed converter class method calls to be handled through macros.  This will require less code when we switch back to functional conversion methods.  It also cleans up the compiled_func generated a little.

==

weave/blitz_info.py
weave/common_spec.py
weave/conversion_code.py
weave/cxx_info.py
weave/scalar_spec.py
weave/sequence_spec.py
==================
d7f048b;Eric Jones;2002-01-17 04:55:19 +0000;fixing a few typos

==

weave/common_spec.py
==================
18eb840;Eric Jones;2002-01-17 04:44:28 +0000;further changes to make class versions of converters work

==

weave/common_spec.py
weave/conversion_code.py
weave/cxx_info.py
weave/scalar_spec.py
weave/sequence_spec.py
==================
1ed96f3;Eric Jones;2002-01-17 03:45:05 +0000;converted most conversion routines to be class methods so that exceptions won't croak on gcc.

==

weave/common_spec.py
weave/conversion_code.py
weave/conversion_code_old.py
weave/cxx_info.py
weave/scalar_spec.py
==================
6c32531;Eric Jones;2002-01-17 02:48:19 +0000;attempt to fix abort with string objects

==

weave/cxx_info.py
==================
a0bf2b3;Eric Jones;2002-01-17 01:51:11 +0000;error in variable name

==

weave/conversion_code.py
==================
ec1bba2;Eric Jones;2002-01-17 01:43:04 +0000;added keyword arguments to blitz() so that it can handle distutils arguments just like inline()
converted all exceptions to call throw_error().  throw_error(exception,msg) will set the Python exception values and then through an integer exception.  This is the only one that seems to work on Mandrake.  Gordon McMillan says it happens on other platforms also when the python has been linked with a C compiler instead of a C++ compiler (which is almost always the case).

==

weave/blitz_tools.py
weave/code_blocks.py
weave/conversion_code.py
weave/ext_tools.py
weave/inline_info.py
weave/inline_tools.py
weave/standard_array_info.py
weave/tests/test_blitz_tools.py
weave/tests/test_wx_spec.py
==================
79cd95a;Pearu Peterson;2002-01-16 19:10:10 +0000;Minor changes for better f2py support

==

scipy_distutils/__version__.py
scipy_distutils/command/build_flib.py
scipy_distutils/command/run_f2py.py
==================
c9d6cb8;Eric Jones;2002-01-16 09:41:21 +0000;found improved way of making g++ -shared the linker instead of simply adding stdc++ as a library for gcc.

==

weave/build_tools.py
==================
653df5a;Eric Jones;2002-01-15 21:51:56 +0000;patched an error in the string printing section -- forgot to convert from Py::String to a char*.

==

weave/doc/tutorial.html
==================
5472eed;Eric Jones;2002-01-15 21:39:59 +0000;added a couple of implementations using lists instead of Numeric arrays.  They are very slow.

==

weave/examples/ramp.py
==================
68b8d10;Eric Jones;2002-01-14 07:27:47 +0000;silly error of using == instead of =

==

weave/catalog.py
==================
9ff1532;Eric Jones;2002-01-14 07:10:54 +0000;added test for checking whether conversion exceptions are working correctly in inline_tools.py

==

weave/tests/test_inline_tools.py
==================
a1a701f;Eric Jones;2002-01-14 07:02:50 +0000;setup_xxx.py files are now included in distributions.  I think this is what was breaking the tar balls for some users.  build_py may not be needed now, since I think filtering these was the only reason we had to change the method.

==

scipy_distutils/command/build_py.py
==================
3d616a2;Eric Jones;2002-01-14 06:35:59 +0000;* conversion_to_int and py_to_int now both throw TypeError, but conversion_to_in t prefixes the msg with "Conversion Error:" so that conversion errors can be dif ferentiated from errors thrown in the user's code.

==

weave/blitz_info.py
weave/blitz_spec.py
weave/catalog.py
weave/common_spec.py
weave/conversion_code.py
weave/cxx_info.py
weave/inline_tools.py
weave/scalar_spec.py
weave/sequence_spec.py
weave/standard_array_info.py
weave/standard_array_spec.py
weave/wx_spec.py
==================
e6c3b43;Eric Jones;2002-01-13 22:04:09 +0000;consolidating much of the C++ code for converting variables into a single file, conversion_code.py.  It contains a couple of CXX specific lines, but most everything that is CXX specific is still in the cxx_info file.
The code that was divided between common_info and scalar_info is pretty much consolidated together.

==

weave/common_info.py
weave/conversion_code.py
weave/scalar_info.py
==================
7950172;Pearu Peterson;2002-01-13 11:57:54 +0000;Added err_msg keyword argument to assert_array_equal

==

scipy_test/scipy_test.py
==================
4659495;Eric Jones;2002-01-13 11:09:45 +0000;forgot to uncommnet try/except at top

==

weave/catalog.py
==================
61935af;Eric Jones;2002-01-13 10:56:10 +0000;fix for dumb_shelve to work with tests -- dumbdbm_patched import moved to global scope so that it works correctly.
catalog.py made to dbhash on machcines that have it.  Otherwise dumb_shelve.  try/except no longer wraps dumb_shelve calls in get_catalog -- only if dbhash is used.

==

weave/catalog.py
weave/dumb_shelve.py
==================
2479ff2;Eric Jones;2002-01-13 10:32:31 +0000;arrgh. my dumbdbm exhibits strange behavior on RH 7.1 working from some directories and not from others.  What the heck!  For try to use dbhash whenever it is available.  THis worked on both Linux and Windows before

==

weave/catalog.py
==================
6f5db33;Eric Jones;2002-01-13 09:57:22 +0000;copied scipy dumb_shelve and dumbdbm_patched.py into scipy to get rid of the dependency.  These are proving more reliable than my simpler attempts at patching dumbdbm.

==

weave/dumb_shelve.py
weave/dumbdbm_patched.py
==================
78c147e;Eric Jones;2002-01-13 09:55:50 +0000;chunked the simple_dbm and the dumbdbm in favor of the standard scipy ones.  They were just less error prone.

==

weave/catalog.py
weave/dumbdbm.py
weave/simple_shelve.py
==================
a68af9a;Eric Jones;2002-01-13 09:30:24 +0000;change taken from dumbdbm that seems to clear up some UnpicklingError, pickle truncated errors that were occuring on Linux.  dumbdbm is starting to look like scipy.dumbdbm_patched.py now...

==

weave/dumbdbm.py
==================
262e830;Eric Jones;2002-01-13 09:00:31 +0000;made local copy of move_file to circumvent bug in distutils version.  It is needed instead of rename to move things around correctly on Unix.

==

weave/tests/weave_test_utils.py
==================
b5c77e2;Eric Jones;2002-01-13 08:52:34 +0000;distutils move_file has bug -- no global name errno.  back to using rename...

==

weave/tests/weave_test_utils.py
==================
9415382;Eric Jones;2002-01-13 08:25:22 +0000;* anydbm was causing fits across platforms.  Now I think it mainly had to do with bugs in   dumbdbm with 2.x up to 2.2.  I've included a cleaned up version of dumbdbm in weave to   prevent this from being an issue.  Now catalogs always use this local version of dumbdbm.
* cleaned up helper test routines so that catalog backup/restore works more smoothly

* temporary files and directories are cleaned up a little better after testing.

* file builds are now done in the temporary directory to try and speed up the build process
  on Unix machines with remote file systems for user directories.  Probably not a big help.

==

weave/catalog.py
weave/dumbdbm.py
weave/ext_tools.py
weave/inline_tools.py
weave/tests/test_catalog.py
weave/tests/weave_test_utils.py
==================
6c49b9f;Pearu Peterson;2002-01-13 08:17:19 +0000;version update

==

scipy_distutils/__version__.py
==================
0924d48;Pearu Peterson;2002-01-13 08:14:37 +0000;Minor refinements

==

scipy_distutils/__version__.py
scipy_distutils/atlas_info.py
scipy_distutils/command/run_f2py.py
scipy_distutils/misc_util.py
==================
83119de;Eric Jones;2002-01-13 06:18:49 +0000;This is a verbatim copy of dumbdbm from 2.2.  Some 2.1 (maybe all) are broken.  Having this here means weave will not be troubled by broken copies in some versions of Python.

==

weave/dumbdbm.py
==================
8cc7cf7;Eric Jones;2002-01-13 05:56:33 +0000;Using shelve (which uses anydbm) proved to be the root of troubles for Prabhu.  anydbm doesn't look like it is a cross-platform solution at all...  simple_shelve always uses dumbdbm which will hopefully be more cross-platform.  I don't think performance will be an issue, but length of files may eventually be.

==

weave/catalog.py
weave/simple_shelve.py
==================
7ff49e7;prabhu;2002-01-13 04:18:34 +0000;Added an import pickle to fix a bug in catalog.add_function_persistent.

==

weave/catalog.py
==================
a9bd4d2;Eric Jones;2002-01-12 21:24:57 +0000;fixed a bug in __init__.py that prevente dscipy.weave.test() from working.
various clean up and changes to testing and to catalog pointed out by Prabhu on his Debian machine.  Hopefully all tests will pass for him now.

Added a try/except to prevent loading of corupted catalogs in add_persistent.  I can't imagine why a catalog would get corrupted, but it was happening to Prabhu.  Whether this is fixing a symptom of something else, or is really a good fix remains to be seen.

==

weave/__init__.py
weave/catalog.py
weave/tests/test_blitz_tools.py
weave/tests/test_catalog.py
weave/tests/weave_test_utils.py
==================
bf6026e;Pearu Peterson;2002-01-11 22:21:14 +0000;Fixed typos. Now Extension sources need not contain pyf files together with fortran files.

==

scipy_distutils/command/run_f2py.py
scipy_distutils/dist.py
==================
f56cfff;Pearu Peterson;2002-01-11 17:21:30 +0000;Fixed minor bug in get_cvs_revisions; removed pyf_extensions

==

scipy_distutils/command/run_f2py.py
scipy_distutils/dist.py
scipy_distutils/misc_util.py
==================
fc20cdc;Eric Jones;2002-01-10 17:37:48 +0000; added an example of where blitz and Numeric can be different provided by Prabhu.

==

weave/doc/tutorial.html
==================
46862d2;Eric Jones;2002-01-10 14:59:56 +0000;fixed error found by Prabhu getmodule.  except now catches KeyErrors as well as TypeErrors

==

weave/catalog.py
==================
002fe28;Travis Oliphant;2002-01-10 00:34:07 +0000;Bug in fft2 and Mplot fixed.

==

scipy_distutils/__version__.py
scipy_distutils/atlas_info.py
==================
16b78c2;Pearu Peterson;2002-01-09 20:13:15 +0000;version update

==

scipy_distutils/__version__.py
==================
7e0eac3;Pearu Peterson;2002-01-09 20:12:34 +0000;Cleanup after introducing run_f2py

==

scipy_distutils/command/__init__.py
scipy_distutils/command/build_ext.py
scipy_distutils/command/build_flib.py
scipy_distutils/command/run_f2py.py
scipy_distutils/core.py
scipy_distutils/dist.py
scipy_distutils/misc_util.py
==================
7f46db2;Pearu Peterson;2002-01-09 18:25:45 +0000;Added -w90/95 flags to Intel compiler

==

scipy_distutils/command/build_flib.py
==================
98070b5;Pearu Peterson;2002-01-09 18:00:39 +0000;Added -w90/95 flags to Intel compiler

==

scipy_distutils/command/build_flib.py
==================
b8ae576;Pearu Peterson;2002-01-09 15:43:58 +0000;version serial increase

==

scipy_distutils/__version__.py
==================
40c05db;Pearu Peterson;2002-01-09 15:43:02 +0000;Fixed bug in run_f2py that detected names *__user__* as ext names

==

scipy_distutils/command/run_f2py.py
==================
6996767;Pearu Peterson;2002-01-09 15:26:47 +0000;Fixed typo in run_f2py

==

scipy_distutils/command/run_f2py.py
==================
830fc21;Pearu Peterson;2002-01-09 14:21:53 +0000;version update

==

scipy_distutils/__version__.py
==================
dda06dc;Pearu Peterson;2002-01-09 14:11:13 +0000;Introduced run_f2py command; fixed a minor bug in cpuinfo about detecting i(5|6)86

==

scipy_distutils/command/build.py
scipy_distutils/command/build_ext.py
scipy_distutils/command/cpuinfo.py
scipy_distutils/command/run_f2py.py
scipy_distutils/core.py
scipy_distutils/dist.py
==================
323b6b4;Pearu Peterson;2002-01-09 10:31:07 +0000;Fixed: base of pyf file may be different from what ext module it provides

==

scipy_distutils/command/build_ext.py
==================
4882d70;Eric Jones;2002-01-09 07:21:15 +0000;changed library_path to be a list instead of single directory specification. removed a print statement from atlas_info

==

scipy_distutils/atlas_info.py
scipy_distutils/command/build_ext.py
==================
3ded519;Eric Jones;2002-01-09 06:57:04 +0000;added variable library_path to scipy_distutils.atlas_info to specify where atlas libraries live.

==

scipy_distutils/atlas_info.py
==================
f2871d1;Eric Jones;2002-01-09 06:45:56 +0000;extension needed for adding f2py_options keyword to Extension

==

scipy_distutils/extension.py
==================
10aaa27;Eric Jones;2002-01-09 06:22:28 +0000;Added f2py support back into scipy_distutils.  This required a few more changes to the setup files.

==

scipy_distutils/__version__.py
scipy_distutils/command/build_ext.py
scipy_distutils/core.py
scipy_distutils/misc_util.py
==================
53022e6;Eric Jones;2002-01-07 21:05:53 +0000;added atlas "discovery" module to scipy_distutils

==

scipy_distutils/atlas_info.py
==================
b9ba1e7;Pearu Peterson;2002-01-07 07:47:02 +0000;renamed get_version to update_version, introduced version_template argument

==

scipy_distutils/__version__.py
scipy_distutils/misc_util.py
==================
37e5c37;Pearu Peterson;2002-01-07 07:46:32 +0000;renamed get_version to update_version, introduced version_template argument

==

scipy_distutils/__version__.py
scipy_distutils/misc_util.py
scipy_distutils/setup.py
==================
f44e926;Eric Jones;2002-01-07 07:23:37 +0000;finished additions needed to have tar.gz automatically have correct line ending types even when built on windows (and the same for zip on Linux I think -- not tested)

==

scipy_distutils/__version__.py
scipy_distutils/command/sdist.py
scipy_distutils/line_endings.py
==================
bf4bf3b;Eric Jones;2002-01-07 07:04:56 +0000;added line_endings.py.  Working toward support of conversion of line ending characters for tar.gz files

==

scipy_distutils/command/sdist.py
scipy_distutils/line_endings.py
scipy_distutils/misc_util.py
==================
3b5adc1;Eric Jones;2002-01-07 06:08:25 +0000;fixed problem with detecting existing catalogs found on Sun, but likely to occur in other places.  I was simply filtering for a file names existence in a give folder, but because shelve (with anydbm) can use a variety of file suffixes, it wasn't finding existing files.  Also, fixed the cleanup in weave_test_utils.py to delete the appropriate file+suffix on Sun.  Likely will need to add some more to the list later.

==

weave/catalog.py
weave/tests/test_catalog.py
weave/tests/weave_test_utils.py
==================
fb83853;Eric Jones;2002-01-07 05:29:32 +0000;fixed a few more issues with removing 'from scipy import *'

==

weave/tests/test_catalog.py
==================
20246d0;Eric Jones;2002-01-07 03:39:58 +0000;got rid of from catalog import * in test code that forced restarts for testing to reflect code changes

==

weave/tests/test_catalog.py
==================
a12726d;Eric Jones;2002-01-07 03:30:14 +0000;oops -- missed 'and' in during last check in.

==

weave/build_tools.py
==================
fcae422;Eric Jones;2002-01-07 03:28:12 +0000;added -mimpure-text to link args on Sun OS to fix issues with libstdc++.a.  see: http://mail.python.org/pipermail/python-dev/2001-March/013510.html

==

weave/build_tools.py
==================
2b514ab;Eric Jones;2002-01-06 21:15:43 +0000;Sun version of anydbm (and maybe others) croaked whenever db's were opened with more the one mode flag such as 'cr', or 'cw'.  Now only one mode is allowed at a time, and 'c' is used whenever a db needs to be created.

==

weave/catalog.py
weave/tests/test_catalog.py
==================
0074d56;Eric Jones;2002-01-06 20:21:31 +0000;forgot : at end of if statement

==

weave/catalog.py
==================
556e691;Eric Jones;2002-01-06 17:40:43 +0000;Prabhu found an issue in his test run where we try to delete a path_key that isn't available.  THis can occur is a built-in function is added to catalog.  built-ins do not have a path to their module (they are builtin after all).  We now check to make sure that the catalog has the key before deleting it.

==

weave/catalog.py
==================
a051542;Eric Jones;2002-01-06 07:54:16 +0000;Added ramp example brought up by Brent Burley on comp.lang.python.

==

weave/examples/ramp.c
weave/examples/ramp.py
weave/examples/ramp2.py
==================
fbeedee;Eric Jones;2002-01-06 07:20:55 +0000;fixed a bug in declarations for ext modules.  Types were not being cast correctly.

==

weave/standard_array_spec.py
==================
b2e1b50;Eric Jones;2002-01-06 04:07:38 +0000;converted DOS line endings to UNIX line endings

==
==================
3f0a7c9;Eric Jones;2002-01-06 02:49:21 +0000;screwed up last check in. Returning to previous version

==

weave/ast_tools.py
==================
6d46146;Eric Jones;2002-01-06 02:46:54 +0000;converted DOS line endings to UNIX

==

weave/ast_tools.py
==================
9c38005;Eric Jones;2002-01-05 17:42:47 +0000;converted all files (hopefully) from DOS style line endings to UNIX style line endings.  Some of the Unix users were having problems with files with DOS style endings.  Windows doesn't seem to be as picky about this issue.

==

weave/tests/test_ast_tools.py
weave/tests/test_blitz_tools.py
weave/tests/test_size_check.py
==================
f2e5fb8;Eric Jones;2002-01-05 17:07:10 +0000;changed import of fastumath as "optional" with a try/except clause.  This allows people without SciPy, but with Numeric to use blitz.

==

weave/blitz_tools.py
weave/size_check.py
weave/tests/test_standard_array_spec.py
==================
fd3855d;Pearu Peterson;2002-01-05 12:03:04 +0000;refined get_version

==

scipy_distutils/__version__.py
==================
c1a5d61;Pearu Peterson;2002-01-05 12:02:28 +0000;refined get_version

==

scipy_distutils/__version__.py
scipy_distutils/misc_util.py
scipy_distutils/setup.py
==================
2547260;Eric Jones;2002-01-04 23:54:32 +0000;changed insertion of stdc++ to check for msvc instead of platform == linux

==

weave/build_tools.py
==================
b908030;Eric Jones;2002-01-04 23:24:48 +0000;fixed bug in tables that forced display width to certain number of pixels.

==

weave/doc/tutorial.html
==================
587e00a;Pearu Peterson;2002-01-04 22:27:11 +0000;Introduced get_version, started compaq_fortran_compiler

==

scipy_distutils/command/build_flib.py
scipy_distutils/misc_util.py
scipy_distutils/setup.py
==================
0ebec76;Eric Jones;2002-01-04 20:57:18 +0000;added comment about single vs. double precision speed results

==

weave/doc/tutorial.html
==================
223f42b;Eric Jones;2002-01-04 20:52:02 +0000;added benchmarks

==

weave/doc/tutorial.html
==================
c6ca53c;Eric Jones;2002-01-04 19:19:36 +0000;one final pass through before posting to python-dev

==

weave/doc/tutorial.html
==================
85b0616;Eric Jones;2002-01-04 17:24:17 +0000;added MANIFEST.in so that I could specify that all .txt files are included in the distribution

==

weave/MANIFEST.in
==================
4b8ca90;Eric Jones;2002-01-04 16:39:45 +0000;added legal license information to the file.

==

weave/LICENSE.txt
weave/README.txt
weave/doc/tutorial.html
weave/wx_spec.py
==================
d33eb99;Eric Jones;2002-01-04 16:21:11 +0000;added a short README to tell where the documentation files are located

==

weave/README.txt
==================
a603ba1;Eric Jones;2002-01-04 15:32:32 +0000;changed tempdir to gettempdir(). fixed bug introduced in latest testing frenzy

==

weave/catalog.py
weave/doc/tutorial.html
weave/tests/test_blitz_tools.py
weave/tests/test_scalar_spec.py
==================
b63f8e5;Pearu Peterson;2002-01-04 10:10:32 +0000;fixed get_opt for NAG compiler

==

scipy_distutils/command/build_flib.py
==================
4241019;Pearu Peterson;2002-01-04 08:42:56 +0000;fortran extension support

==

scipy_distutils/command/build.py
scipy_distutils/command/build_ext.py
scipy_distutils/command/build_flib.py
scipy_distutils/command/build_py.py
scipy_distutils/command/cpuinfo.py
scipy_distutils/dist.py
scipy_distutils/setup.py
==================
06d067a;Eric Jones;2002-01-04 03:40:54 +0000;changed inline() args so that arg_names defaults to an empty list.  THis allows you to run C code that doesn't need any arguments without supplying any.

==

weave/inline_tools.py
==================
dfa34a7;Eric Jones;2002-01-04 00:45:20 +0000;fixed catalog test so that it would work if mutliple people were testing at same time or if /tmp/test_catalog could not be written.

==

weave/tests/test_catalog.py
==================
b4f5c98;Eric Jones;2002-01-03 23:24:31 +0000;fixed minor bugs

==

weave/doc/tutorial.html
weave/tests/test_blitz_tools.py
weave/tests/test_ext_tools.py
==================
e69d0cf;Eric Jones;2002-01-03 21:05:33 +0000;removed an import * at function level because 2.2 complains about it

==

weave/tests/test_ext_tools.py
==================
b72a5a0;Eric Jones;2002-01-03 21:02:37 +0000;moved test file creation to the temp directory so that it doesn't try to create files during test in a site-package sub-directory.  This caused failues on Unix for testing of installed package.

==

weave/tests/test_blitz_tools.py
weave/tests/test_scalar_spec.py
==================
be827bc;Eric Jones;2002-01-03 20:54:08 +0000;more renaming of compiler to weave

==

weave/tests/compiler_test_utils.py
weave/tests/weave_test_utils.py
==================
3df2f38;Eric Jones;2002-01-03 20:52:25 +0000;I missed changing the compiler name in __init__

==

weave/__init__.py
==================
4ceef2e;Eric Jones;2002-01-03 20:32:35 +0000;more changes of names from compiler to weave

==

weave/examples/increment_example.py
weave/examples/py_none.py
weave/examples/vq.py
weave/setup.py
weave/setup_compiler.py
weave/setup_weave.py
weave/tests/test_ext_tools.py
==================
a15e2fa;Eric Jones;2002-01-03 20:28:32 +0000;compile_code is no longer a part of weave

==

weave/tests/test_ast_tools.py
weave/tests/test_blitz_tools.py
weave/tests/test_catalog.py
weave/tests/test_compile_code.py
==================
6e13c04;Eric Jones;2002-01-03 19:50:46 +0000;renaming compiler to weave

==

weave/__init__.py
weave/ast_tools.py
weave/base_info.py
weave/base_spec.py
weave/blitz-20001213/blitz/applics.h
weave/blitz-20001213/blitz/array.h
weave/blitz-20001213/blitz/array/asexpr.h
weave/blitz-20001213/blitz/array/cartesian.h
weave/blitz-20001213/blitz/array/cgsolve.h
weave/blitz-20001213/blitz/array/complex.cc
weave/blitz-20001213/blitz/array/convolve.cc
weave/blitz-20001213/blitz/array/convolve.h
weave/blitz-20001213/blitz/array/cycle.cc
weave/blitz-20001213/blitz/array/domain.h
weave/blitz-20001213/blitz/array/et.h
weave/blitz-20001213/blitz/array/eval.cc
weave/blitz-20001213/blitz/array/expr.h
weave/blitz-20001213/blitz/array/fastiter.h
weave/blitz-20001213/blitz/array/geometry.h
weave/blitz-20001213/blitz/array/indirect.h
weave/blitz-20001213/blitz/array/interlace.cc
weave/blitz-20001213/blitz/array/io.cc
weave/blitz-20001213/blitz/array/iter.h
weave/blitz-20001213/blitz/array/map.h
weave/blitz-20001213/blitz/array/methods.cc
weave/blitz-20001213/blitz/array/misc.cc
weave/blitz-20001213/blitz/array/multi.h
weave/blitz-20001213/blitz/array/newbops.cc
weave/blitz-20001213/blitz/array/ops.cc
weave/blitz-20001213/blitz/array/reduce.cc
weave/blitz-20001213/blitz/array/reduce.h
weave/blitz-20001213/blitz/array/resize.cc
weave/blitz-20001213/blitz/array/shape.h
weave/blitz-20001213/blitz/array/slice.h
weave/blitz-20001213/blitz/array/slicing.cc
weave/blitz-20001213/blitz/array/stencil-et.h
weave/blitz-20001213/blitz/array/stencil.cc
weave/blitz-20001213/blitz/array/stencil.h
weave/blitz-20001213/blitz/array/stencilops.h
weave/blitz-20001213/blitz/array/storage.h
weave/blitz-20001213/blitz/array/uops.cc
weave/blitz-20001213/blitz/array/where.h
weave/blitz-20001213/blitz/array/zip.h
weave/blitz-20001213/blitz/bench.cc
weave/blitz-20001213/blitz/bench.h
weave/blitz-20001213/blitz/benchext.cc
weave/blitz-20001213/blitz/benchext.h
weave/blitz-20001213/blitz/blitz.h
weave/blitz-20001213/blitz/bzdebug.h
weave/blitz-20001213/blitz/compiler.h
weave/blitz-20001213/blitz/config.h
weave/blitz-20001213/blitz/etbase.h
weave/blitz-20001213/blitz/extremum.h
weave/blitz-20001213/blitz/indexexpr.h
weave/blitz-20001213/blitz/limits-hack.h
weave/blitz-20001213/blitz/listinit.h
weave/blitz-20001213/blitz/matbops.h
weave/blitz-20001213/blitz/matdiag.h
weave/blitz-20001213/blitz/matexpr.h
weave/blitz-20001213/blitz/matgen.h
weave/blitz-20001213/blitz/mathf2.h
weave/blitz-20001213/blitz/mathfunc.h
weave/blitz-20001213/blitz/matltri.h
weave/blitz-20001213/blitz/matref.h
weave/blitz-20001213/blitz/matrix.cc
weave/blitz-20001213/blitz/matrix.h
weave/blitz-20001213/blitz/matsymm.h
weave/blitz-20001213/blitz/mattoep.h
weave/blitz-20001213/blitz/matuops.h
weave/blitz-20001213/blitz/matutri.h
weave/blitz-20001213/blitz/memblock.cc
weave/blitz-20001213/blitz/memblock.h
weave/blitz-20001213/blitz/meta/dot.h
weave/blitz-20001213/blitz/meta/matassign.h
weave/blitz-20001213/blitz/meta/matmat.h
weave/blitz-20001213/blitz/meta/matvec.h
weave/blitz-20001213/blitz/meta/metaprog.h
weave/blitz-20001213/blitz/meta/product.h
weave/blitz-20001213/blitz/meta/sum.h
weave/blitz-20001213/blitz/meta/vecassign.h
weave/blitz-20001213/blitz/minmax.h
weave/blitz-20001213/blitz/mstruct.h
weave/blitz-20001213/blitz/numinquire.h
weave/blitz-20001213/blitz/numtrait.h
weave/blitz-20001213/blitz/ops.h
weave/blitz-20001213/blitz/prettyprint.h
weave/blitz-20001213/blitz/promote-old.h
weave/blitz-20001213/blitz/promote.h
weave/blitz-20001213/blitz/rand-dunif.h
weave/blitz-20001213/blitz/rand-mt.h
weave/blitz-20001213/blitz/rand-normal.h
weave/blitz-20001213/blitz/rand-tt800.h
weave/blitz-20001213/blitz/rand-uniform.h
weave/blitz-20001213/blitz/random.h
weave/blitz-20001213/blitz/randref.h
weave/blitz-20001213/blitz/range.h
weave/blitz-20001213/blitz/reduce.h
weave/blitz-20001213/blitz/shapecheck.h
weave/blitz-20001213/blitz/tau.h
weave/blitz-20001213/blitz/timer.h
weave/blitz-20001213/blitz/tiny.h
weave/blitz-20001213/blitz/tinymat.h
weave/blitz-20001213/blitz/tinymatexpr.h
weave/blitz-20001213/blitz/tinyvec.cc
weave/blitz-20001213/blitz/tinyvec.h
weave/blitz-20001213/blitz/tinyvecio.cc
weave/blitz-20001213/blitz/tinyveciter.h
weave/blitz-20001213/blitz/traversal.cc
weave/blitz-20001213/blitz/traversal.h
weave/blitz-20001213/blitz/tuning.h
weave/blitz-20001213/blitz/tvcross.h
weave/blitz-20001213/blitz/tvecglobs.h
weave/blitz-20001213/blitz/update.h
weave/blitz-20001213/blitz/vecaccum.cc
weave/blitz-20001213/blitz/vecall.cc
weave/blitz-20001213/blitz/vecany.cc
weave/blitz-20001213/blitz/vecbfn.cc
weave/blitz-20001213/blitz/vecbops.cc
weave/blitz-20001213/blitz/veccount.cc
weave/blitz-20001213/blitz/vecdelta.cc
weave/blitz-20001213/blitz/vecdot.cc
weave/blitz-20001213/blitz/vecexpr.h
weave/blitz-20001213/blitz/vecexprwrap.h
weave/blitz-20001213/blitz/vecglobs.cc
weave/blitz-20001213/blitz/vecglobs.h
weave/blitz-20001213/blitz/vecio.cc
weave/blitz-20001213/blitz/veciter.h
weave/blitz-20001213/blitz/vecmax.cc
weave/blitz-20001213/blitz/vecmin.cc
weave/blitz-20001213/blitz/vecnorm.cc
weave/blitz-20001213/blitz/vecnorm1.cc
weave/blitz-20001213/blitz/vecpick.cc
weave/blitz-20001213/blitz/vecpick.h
weave/blitz-20001213/blitz/vecpickio.cc
weave/blitz-20001213/blitz/vecpickiter.h
weave/blitz-20001213/blitz/vecsum.cc
weave/blitz-20001213/blitz/vector.cc
weave/blitz-20001213/blitz/vector.h
weave/blitz-20001213/blitz/vecuops.cc
weave/blitz-20001213/blitz/vecwhere.cc
weave/blitz-20001213/blitz/vecwhere.h
weave/blitz-20001213/blitz/wrap-climits.h
weave/blitz-20001213/blitz/zero.cc
weave/blitz-20001213/blitz/zero.h
weave/blitz_info.py
weave/blitz_spec.py
weave/blitz_tools.py
weave/build_tools.py
weave/catalog.py
weave/code_blocks.py
weave/common_info.py
weave/common_spec.py
weave/cxx_info.py
weave/doc/tutorial.html
weave/examples/binary_search.py
weave/examples/cast_copy_transpose.py
weave/examples/dict_sort.py
weave/examples/fibonacci.py
weave/examples/functional.py
weave/examples/increment_example.py
weave/examples/md5_speed.py
weave/examples/print_example.py
weave/examples/py_none.py
weave/examples/support_code_example.py
weave/examples/tuple_return.py
weave/examples/vq.py
weave/examples/wx_example.py
weave/ext_tools.py
weave/inline_info.py
weave/inline_tools.py
weave/lib2def.py
weave/misc.py
weave/scalar_info.py
weave/scalar_spec.py
weave/scxx/PWOBase.h
weave/sequence_spec.py
weave/setup.py
weave/setup_compiler.py
weave/size_check.py
weave/slice_handler.py
weave/standard_array_info.py
weave/standard_array_spec.py
weave/swig_info.py
weave/tests/compiler_test_utils.py
weave/tests/test_ast_tools.py
weave/tests/test_blitz_tools.py
weave/tests/test_build_tools.py
weave/tests/test_catalog.py
weave/tests/test_common_spec.py
weave/tests/test_compile_code.py
weave/tests/test_ext_tools.py
weave/tests/test_scalar_spec.py
weave/tests/test_size_check.py
weave/tests/test_slice_handler.py
weave/tests/test_standard_array_spec.py
weave/tests/test_string_spec.py
weave/tests/test_wx_spec.py
weave/wx_info.py
weave/wx_spec.py
==================
7161eb8;Eric Jones;2002-01-02 15:42:07 +0000;encapsulated all Numeric specific code within a try/except so that most functionality can be used without Numeric installed

==

scipy_test/scipy_test.py
scipy_test/setup_scipy_test.py
==================
d58a351;Eric Jones;2002-01-02 04:56:19 +0000;Making this a package made installation easier because distutils doesn't allow both py_modules and packages -- not sure it would have worked even if it did

==

scipy_test/__init__.py
scipy_test/setup_scipy_test.py
==================
dc33f53;Eric Jones;2002-01-02 02:41:53 +0000;Modified how configuration works

==

scipy_test/setup_scipy_test.py
==================
07a8c78;Eric Jones;2002-01-02 02:40:56 +0000;setup configuration module for scipy_distutils

==

scipy_distutils/setup_scipy_distutils.py
==================
77c0f1e;Eric Jones;2002-01-02 02:40:07 +0000;fftw_info.py holds searches for fftw libraries on a persons machine.  It is made separate from the fftw library because it may be needed by other libraries later on.  Also, it could become useful to other projects trying to find fftw on a mchine.  Its very simple right now.

==

scipy_distutils/fftw_info.py
==================
9f63f97;Eric Jones;2002-01-01 09:48:06 +0000;get_path changes made by Pearu so that it works in core.run_setup

==

scipy_distutils/misc_util.py
==================
8d16fd4;Eric Jones;2002-01-01 09:21:09 +0000;cpuinfo.py is needed to calculate optimzation flags on linux.  It has much of the same functionality as scipy.proc, but I've included it for now.  We'll merge the two later.

==

scipy_distutils/command/cpuinfo.py
==================
51e5221;Eric Jones;2002-01-01 09:08:35 +0000;Implemented multiple changes provided by Pearu that increased the number of compilers supported, added some optimization flags, and generally cleaned things up.  I made changes needed to get things rolling for scipy on win32 again.  I've included an email exchange discussing changes below:
I changes are checked into CVS.

1. is_available()
In is_available(), I'm not sure whether any compilers will return an empty version.  I don't think any of them do right now -- but I'm not sure about Sun.  For now, lets use your implementation and deal with it later if it turns out to be a problem.

2. sun compile switches
class sun_fortran_compiler(fortran_compiler_base):

    vendor = 'Sun'
    ver_match =  r'f77: (?P<version>[^\s*,]*)'

    def __init__(self, fc = None, f90c = None):
        ...
        self.f90_switches = ' -fixed ' # ??? why fixed?


I think the fixed is left over from some compiler specific flags I needed in a project at Duke where all of our code was in fixed format.  It probably shouldn't be here.  However, if it isn't, we need a way of specifying the compiler options.  In distutils.extension, there is a

    self.extra_compile_args = extra_compile_args or []

argument.  We need an extra_fcompile_args or something like that.  I think distutils just appends the extra arguments to the end of the compile command.  This is unlikely to work with some Fortran compilers though.  I know the Absoft compiler isn't very sophisticated about handling command line arguments, and any extra args probably need to be placed before the source file in the command.

3. cpu_info.py
Something very similar to this already exists in scipy -- its called proc.py.  I'll look through it and see how to merge the stuff you added into the module.  This stuff is very OS specific and only works on Linux (and maybe BSD).  I wish proc worked on more machine types.

*Well, for now I'm gonna keep the two separate modules.  We'll merge this stuff into proc in the future.

4. optimization flags
I've moved this to a get_opt() function.

Also, we should have a flag to turn *on* machine specific optimization instead of making it the
default.  If people build a binary distibution, it'll only work on specific architectures which can lead to trouble.  This shouldn't be the default behavior.

For now, get_opt() still calls the arch dependent settings by default for the gnu and intel compilers.

5. get_linker_so()
This won't work on windows with mingw32.  The linker is a very strange thing there, and the -shared flag doesn't work.  I've had to add a little code back into the gnu_fortran class and
do a test for win32.  I don't think seeting the libraries and library_dir hurts on linux.  Does it?

6. is_available -> get_version
This is just a better name for it.  is_available is still available... :)  It just calls get_version now.

7. ***  Some vendors provide different compilers for F77 and F90
        compilations. Currently, checking the availability of these
        compilers is based on only checking the availability of the
        corresponding F77 compiler. If it exists, then F90 is assumed
        to exist also.

This is a problem.  Worse than having different ones, gnu fortran doesn't even support f90.  We may want to split this stuff into separate classes.  I'd like to get more feedback from users running into problems on this one.

see ya,
eric

----- Original Message -----
From: "Pearu Peterson" <pearu@cens.ioc.ee>
To: "eric" <eric@enthought.com>
Sent: Monday, December 31, 2001 11:38 AM
Subject: build_flib patch


>
> Hi Eric,
>
> Please find attached my changes to build_flib:
>
> *  Added NAGWare, VAST/f90 compilers support.
> *  Refined Intel compiler support.
> *  Added more aggressive optimization for Intel and Gnu compilers.
> *  Added options --fcompiler-exec and --f90compiler-exec.
> *  The later required some rewrote for compiler classes handling:
>      Eg. the list all_compilers holds now compiler classes, not their
>      instances. As a side effect, the handling is more efficient now.
>      Etc.
> *  Introduced a new file cpuinfo.py that defines a class for holding
>    information about CPU. This is used for finding correct optimization
>    flags for Intel and Gnu compilers. build_flib.py imports it.
> *  get_f*_files functions recognize other Fortran file extensions as well.
> *  Docs about bugs.
> *  Cleaned up the code a bit.
>
> Happy New Year!
> Pearu
>

-------

> > One thing I noticed.  I think the intel compilers should come before the gnu
> > compiler in the list so that they are used by default if both are installed.
> > What do you think?
>
> I think the order should not matter. Users should use --fcompiler flag to
> specify desired compiler. I have fixed this in my local source of
> scipy_distutils, I'll send it later with other changes.

If we move it up in the list, the default behavior will grab the "better" (or at least the commercial) compiler installed on the platform.  I think this is more desirable.  People can still specifiy the gnu compiler with a flag if they want to.  If they have many compilers installed, the flag is the only way to do it that I see.

>
> But there is one thing that should be addressed as well. And that is if
> one wants to specify the path to the desired compiler (eg for
> testing/using different compilers or different versions of the same
> compiler). For example, on debian there are two F77 compilers, g77 (that
> is 2.95.2) and g77-3.0. Both are Gnu, and the same class instance should
> be used. So, to solve this, I can think of many solutions:
>
> 1) Get the compiler path from FC environment variable, so that one can run
>
>   FC=g77-3.0 ./setup.py build_flib --fcompiler=Gnu build
>
> Could this be useful also in Windows? I guess not.
>
> 2) Introduce a new switch for build_flib command:
>
>   ./setup.py build_flib --fcompiler=Gnu --fcompiler_exec=g77-3.0 build
>

Doing 2 is fine with me -- and you've already done it I see. :)

eric

==

scipy_distutils/command/build_ext.py
scipy_distutils/command/build_flib.py
==================
410e513;Eric Jones;2002-01-01 09:00:36 +0000;changed to using fortran class instead of instance for setting fortran compiler.  This was needed after Pearu's changes.

==

scipy_distutils/mingw32_support.py
==================
d1d3344;Eric Jones;2001-12-31 09:13:38 +0000;removed print statements

==

scipy_distutils/command/sdist.py
==================
8d4cc5e;Eric Jones;2001-12-31 08:54:57 +0000;added default setting so users don't need to supply a dependency list for a package in package_config

==

scipy_distutils/misc_util.py
==================
806417f;Eric Jones;2001-12-31 08:52:45 +0000;added package_config method to misc_util that should further simplify the creation of modules that depend on other modules.

==

scipy_distutils/misc_util.py
==================
b1263a7;Eric Jones;2001-12-31 08:40:02 +0000;fixed path issues resulting from using setup_xxx.configuration() methods to grab information about package for use in setup.py.  the configuration() methods use absolute path names to identify files.  This is bad for sdist which uses the relative path of a file to determine which directory it goes into in the source distribution.  To solve the problem, I have sdist search all absolute file paths for the "greatest common directory" among them.  This directory is removed from them to determine where the file will go in the distribution directories.  Files without absolute paths are always put in the top directory of the distribution.
This procedure usually ends up with a setup.py module in the top directory of the source distribution and then a number of sub-directories that hold the actual package source code files.

misc_util sprouted another function or two to help with the process of adding package paths to the PYTHONPATH.  There are some assumptions made about where distutils should look for these packages (first in the current directory then in the parent) that may not be generally true, but should work well for scipy.  It also results in setup.py files that work fine from with in scipy or for building stand along packages that may depend on other scipy packages.

==

scipy_distutils/command/sdist.py
scipy_distutils/misc_util.py
==================
76cfe83;Eric Jones;2001-12-25 06:06:40 +0000;added misc_util file that has a few routines used extensively in setup_xxx.py files and test files within scipy

==

scipy_distutils/core.py
scipy_distutils/dist.py
scipy_distutils/mingw32_support.py
scipy_distutils/misc_util.py
scipy_distutils/setup.py
==================
a76efe8;Eric Jones;2001-12-25 06:05:32 +0000;added build_py module

==

scipy_distutils/command/build_ext.py
scipy_distutils/command/build_py.py
scipy_distutils/command/install_data.py
==================
74a4958;Eric Jones;2001-12-25 06:03:41 +0000;split scipy_test off into its own module.

==

scipy_test/scipy_test.py
scipy_test/setup.py
scipy_test/setup_scipy_test.py
==================
f1a2d63;Eric Jones;2001-12-18 15:45:10 +0000;factored out the scipy specific distutils code into a scipy_distutils package.

==

scipy_distutils/__init__.py
scipy_distutils/command/__init__.py
scipy_distutils/command/build.py
scipy_distutils/command/build_clib.py
scipy_distutils/command/build_ext.py
scipy_distutils/command/build_flib.py
scipy_distutils/command/install.py
scipy_distutils/command/install_data.py
scipy_distutils/command/install_headers.py
scipy_distutils/command/sdist.py
scipy_distutils/core.py
scipy_distutils/dist.py
scipy_distutils/mingw32_support.py
scipy_distutils/setup.py
